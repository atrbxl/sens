local G2L = {};

-- StarterGui.GuiMain
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["Name"] = [[GuiMain]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
G2L["1"]["ResetOnSpawn"] = false;


-- StarterGui.GuiMain.Modules
G2L["2"] = Instance.new("Folder", G2L["1"]);
G2L["2"]["Name"] = [[Modules]];


-- StarterGui.GuiMain.Modules.Blur
G2L["3"] = Instance.new("ModuleScript", G2L["2"]);
G2L["3"]["Name"] = [[Blur]];


-- StarterGui.GuiMain.Modules.Fiu
G2L["4"] = Instance.new("ModuleScript", G2L["2"]);
G2L["4"]["Name"] = [[Fiu]];


-- StarterGui.GuiMain.Modules.Fiu.Interpreter
G2L["5"] = Instance.new("ModuleScript", G2L["4"]);
G2L["5"]["Name"] = [[Interpreter]];


-- StarterGui.GuiMain.Modules.Fiu.Compiler
G2L["6"] = Instance.new("ModuleScript", G2L["4"]);
G2L["6"]["Name"] = [[Compiler]];


-- StarterGui.GuiMain.Modules.FiOne
G2L["7"] = Instance.new("ModuleScript", G2L["2"]);
G2L["7"]["Name"] = [[FiOne]];


-- StarterGui.GuiMain.Modules.FiOne.Compiler
G2L["8"] = Instance.new("ModuleScript", G2L["7"]);
G2L["8"]["Name"] = [[Compiler]];


-- StarterGui.GuiMain.Modules.FiOne.Interpreter
G2L["9"] = Instance.new("ModuleScript", G2L["7"]);
G2L["9"]["Name"] = [[Interpreter]];


-- StarterGui.GuiMain.Modules.LBI
G2L["a"] = Instance.new("ModuleScript", G2L["2"]);
G2L["a"]["Name"] = [[LBI]];


-- StarterGui.GuiMain.Modules.LBI.Interpreter
G2L["b"] = Instance.new("ModuleScript", G2L["a"]);
G2L["b"]["Name"] = [[Interpreter]];


-- StarterGui.GuiMain.Modules.LBI.Compiler
G2L["c"] = Instance.new("ModuleScript", G2L["a"]);
G2L["c"]["Name"] = [[Compiler]];


-- StarterGui.GuiMain.Modules.Fenv
G2L["d"] = Instance.new("ModuleScript", G2L["2"]);
G2L["d"]["Name"] = [[Fenv]];


-- StarterGui.GuiMain.Modules.Satchel
G2L["e"] = Instance.new("ModuleScript", G2L["2"]);
G2L["e"]["Name"] = [[Satchel]];
-- Attributes
G2L["e"]:SetAttribute([[TextColor3]], Color3.fromRGB(255, 255, 255));
G2L["e"]:SetAttribute([[InsetIconPadding]], true);
G2L["e"]:SetAttribute([[TextStrokeTransparency]], 0.5);
G2L["e"]:SetAttribute([[TextStrokeColor3]], Color3.fromRGB(0, 0, 0));
G2L["e"]:SetAttribute([[TextSize]], 16);
G2L["e"]:SetAttribute([[BackgroundTransparency]], 1);
G2L["e"]:SetAttribute([[EquipBorderColor3]], Color3.fromRGB(255, 255, 255));
G2L["e"]:SetAttribute([[OutlineEquipBorder]], true);
G2L["e"]:SetAttribute([[CornerRadius]], UDim.new(0, 8));
G2L["e"]:SetAttribute([[EquipBorderSizePixel]], 5);
G2L["e"]:SetAttribute([[BackgroundColor3]], Color3.fromRGB(26, 28, 30));


-- StarterGui.GuiMain.Modules.Satchel.Shadow
G2L["f"] = Instance.new("ImageLabel", G2L["e"]);
G2L["f"]["ZIndex"] = -1;
G2L["f"]["BorderSizePixel"] = 0;
G2L["f"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["f"]["SliceScale"] = 0.095;
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["f"]["ImageTransparency"] = 0.5;
G2L["f"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["f"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["f"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["f"]["BackgroundTransparency"] = 1;
G2L["f"]["Name"] = [[Shadow]];
G2L["f"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Modules.Satchel.Shadow.UIGradient
G2L["10"] = Instance.new("UIGradient", G2L["f"]);



-- StarterGui.GuiMain.Modules.Satchel.Packages
G2L["11"] = Instance.new("Folder", G2L["e"]);
G2L["11"]["Name"] = [[Packages]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index
G2L["12"] = Instance.new("Folder", G2L["11"]);
G2L["12"]["Name"] = [[_Index]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2
G2L["13"] = Instance.new("Folder", G2L["12"]);
G2L["13"]["Name"] = [[1foreverhd_topbarplus@3.0.2]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus
G2L["14"] = Instance.new("ModuleScript", G2L["13"]);
G2L["14"]["Name"] = [[topbarplus]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Packages
G2L["15"] = Instance.new("Folder", G2L["14"]);
G2L["15"]["Name"] = [[Packages]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Packages.Janitor
G2L["16"] = Instance.new("ModuleScript", G2L["15"]);
G2L["16"]["Name"] = [[Janitor]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Packages.GoodSignal
G2L["17"] = Instance.new("ModuleScript", G2L["15"]);
G2L["17"]["Name"] = [[GoodSignal]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Utility
G2L["18"] = Instance.new("ModuleScript", G2L["14"]);
G2L["18"]["Name"] = [[Utility]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.VERSION
G2L["19"] = Instance.new("ModuleScript", G2L["14"]);
G2L["19"]["Name"] = [[VERSION]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Reference
G2L["1a"] = Instance.new("ModuleScript", G2L["14"]);
G2L["1a"]["Name"] = [[Reference]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Features
G2L["1b"] = Instance.new("Folder", G2L["14"]);
G2L["1b"]["Name"] = [[Features]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Features.Themes
G2L["1c"] = Instance.new("ModuleScript", G2L["1b"]);
G2L["1c"]["Name"] = [[Themes]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Features.Themes.Default
G2L["1d"] = Instance.new("ModuleScript", G2L["1c"]);
G2L["1d"]["Name"] = [[Default]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Features.Themes.Classic
G2L["1e"] = Instance.new("ModuleScript", G2L["1c"]);
G2L["1e"]["Name"] = [[Classic]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Features.Overflow
G2L["1f"] = Instance.new("ModuleScript", G2L["1b"]);
G2L["1f"]["Name"] = [[Overflow]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Features.Gamepad
G2L["20"] = Instance.new("ModuleScript", G2L["1b"]);
G2L["20"]["Name"] = [[Gamepad]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Attribute
G2L["21"] = Instance.new("ModuleScript", G2L["14"]);
G2L["21"]["Name"] = [[Attribute]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements
G2L["22"] = Instance.new("Folder", G2L["14"]);
G2L["22"]["Name"] = [[Elements]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Notice
G2L["23"] = Instance.new("ModuleScript", G2L["22"]);
G2L["23"]["Name"] = [[Notice]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Widget
G2L["24"] = Instance.new("ModuleScript", G2L["22"]);
G2L["24"]["Name"] = [[Widget]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Selection
G2L["25"] = Instance.new("ModuleScript", G2L["22"]);
G2L["25"]["Name"] = [[Selection]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Menu
G2L["26"] = Instance.new("ModuleScript", G2L["22"]);
G2L["26"]["Name"] = [[Menu]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Indicator
G2L["27"] = Instance.new("ModuleScript", G2L["22"]);
G2L["27"]["Name"] = [[Indicator]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Dropdown
G2L["28"] = Instance.new("ModuleScript", G2L["22"]);
G2L["28"]["Name"] = [[Dropdown]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Container
G2L["29"] = Instance.new("ModuleScript", G2L["22"]);
G2L["29"]["Name"] = [[Container]];


-- StarterGui.GuiMain.Modules.Satchel.Packages._Index.1foreverhd_topbarplus@3.0.2.topbarplus.Elements.Caption
G2L["2a"] = Instance.new("ModuleScript", G2L["22"]);
G2L["2a"]["Name"] = [[Caption]];


-- StarterGui.GuiMain.Modules.Satchel.Packages.topbarplus
G2L["2b"] = Instance.new("ModuleScript", G2L["11"]);
G2L["2b"]["Name"] = [[topbarplus]];


-- StarterGui.GuiMain.Modules.Data
G2L["2c"] = Instance.new("ModuleScript", G2L["2"]);
G2L["2c"]["Name"] = [[Data]];


-- StarterGui.GuiMain.Modules.Library
G2L["2d"] = Instance.new("ModuleScript", G2L["2"]);
G2L["2d"]["Name"] = [[Library]];


-- StarterGui.GuiMain.Modules.Library.button.wav
G2L["2e"] = Instance.new("Sound", G2L["2d"]);
G2L["2e"]["Name"] = [[button.wav]];
G2L["2e"]["SoundId"] = [[rbxassetid://8379220604]];


-- StarterGui.GuiMain.Modules.Network
G2L["2f"] = Instance.new("ModuleScript", G2L["2"]);
G2L["2f"]["Name"] = [[Network]];


-- StarterGui.GuiMain.Modules.ByteNet
G2L["30"] = Instance.new("ModuleScript", G2L["2"]);
G2L["30"]["Name"] = [[ByteNet]];


-- StarterGui.GuiMain.Modules.ByteNet.types
G2L["31"] = Instance.new("ModuleScript", G2L["30"]);
G2L["31"]["Name"] = [[types]];


-- StarterGui.GuiMain.Modules.ByteNet.replicated
G2L["32"] = Instance.new("Folder", G2L["30"]);
G2L["32"]["Name"] = [[replicated]];


-- StarterGui.GuiMain.Modules.ByteNet.replicated.values
G2L["33"] = Instance.new("ModuleScript", G2L["32"]);
G2L["33"]["Name"] = [[values]];


-- StarterGui.GuiMain.Modules.ByteNet.replicated.replicatedValue
G2L["34"] = Instance.new("ModuleScript", G2L["32"]);
G2L["34"]["Name"] = [[replicatedValue]];


-- StarterGui.GuiMain.Modules.ByteNet.process
G2L["35"] = Instance.new("Folder", G2L["30"]);
G2L["35"]["Name"] = [[process]];


-- StarterGui.GuiMain.Modules.ByteNet.process.server
G2L["36"] = Instance.new("ModuleScript", G2L["35"]);
G2L["36"]["Name"] = [[server]];


-- StarterGui.GuiMain.Modules.ByteNet.process.readRefs
G2L["37"] = Instance.new("ModuleScript", G2L["35"]);
G2L["37"]["Name"] = [[readRefs]];


-- StarterGui.GuiMain.Modules.ByteNet.process.read
G2L["38"] = Instance.new("ModuleScript", G2L["35"]);
G2L["38"]["Name"] = [[read]];


-- StarterGui.GuiMain.Modules.ByteNet.process.client
G2L["39"] = Instance.new("ModuleScript", G2L["35"]);
G2L["39"]["Name"] = [[client]];


-- StarterGui.GuiMain.Modules.ByteNet.process.bufferWriter
G2L["3a"] = Instance.new("ModuleScript", G2L["35"]);
G2L["3a"]["Name"] = [[bufferWriter]];


-- StarterGui.GuiMain.Modules.ByteNet.packets
G2L["3b"] = Instance.new("Folder", G2L["30"]);
G2L["3b"]["Name"] = [[packets]];


-- StarterGui.GuiMain.Modules.ByteNet.packets.packet
G2L["3c"] = Instance.new("ModuleScript", G2L["3b"]);
G2L["3c"]["Name"] = [[packet]];


-- StarterGui.GuiMain.Modules.ByteNet.packets.definePacket
G2L["3d"] = Instance.new("ModuleScript", G2L["3b"]);
G2L["3d"]["Name"] = [[definePacket]];


-- StarterGui.GuiMain.Modules.ByteNet.namespaces
G2L["3e"] = Instance.new("Folder", G2L["30"]);
G2L["3e"]["Name"] = [[namespaces]];


-- StarterGui.GuiMain.Modules.ByteNet.namespaces.packetIDs
G2L["3f"] = Instance.new("ModuleScript", G2L["3e"]);
G2L["3f"]["Name"] = [[packetIDs]];


-- StarterGui.GuiMain.Modules.ByteNet.namespaces.namespacesDependencies
G2L["40"] = Instance.new("ModuleScript", G2L["3e"]);
G2L["40"]["Name"] = [[namespacesDependencies]];


-- StarterGui.GuiMain.Modules.ByteNet.namespaces.namespace
G2L["41"] = Instance.new("ModuleScript", G2L["3e"]);
G2L["41"]["Name"] = [[namespace]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes
G2L["42"] = Instance.new("Folder", G2L["30"]);
G2L["42"]["Name"] = [[dataTypes]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.vec3
G2L["43"] = Instance.new("ModuleScript", G2L["42"]);
G2L["43"]["Name"] = [[vec3]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.vec2
G2L["44"] = Instance.new("ModuleScript", G2L["42"]);
G2L["44"]["Name"] = [[vec2]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.unknown
G2L["45"] = Instance.new("ModuleScript", G2L["42"]);
G2L["45"]["Name"] = [[unknown]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.uint8
G2L["46"] = Instance.new("ModuleScript", G2L["42"]);
G2L["46"]["Name"] = [[uint8]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.uint32
G2L["47"] = Instance.new("ModuleScript", G2L["42"]);
G2L["47"]["Name"] = [[uint32]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.uint16
G2L["48"] = Instance.new("ModuleScript", G2L["42"]);
G2L["48"]["Name"] = [[uint16]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.struct
G2L["49"] = Instance.new("ModuleScript", G2L["42"]);
G2L["49"]["Name"] = [[struct]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.string
G2L["4a"] = Instance.new("ModuleScript", G2L["42"]);
G2L["4a"]["Name"] = [[string]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.optional
G2L["4b"] = Instance.new("ModuleScript", G2L["42"]);
G2L["4b"]["Name"] = [[optional]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.nothing
G2L["4c"] = Instance.new("ModuleScript", G2L["42"]);
G2L["4c"]["Name"] = [[nothing]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.map
G2L["4d"] = Instance.new("ModuleScript", G2L["42"]);
G2L["4d"]["Name"] = [[map]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.int8
G2L["4e"] = Instance.new("ModuleScript", G2L["42"]);
G2L["4e"]["Name"] = [[int8]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.int32
G2L["4f"] = Instance.new("ModuleScript", G2L["42"]);
G2L["4f"]["Name"] = [[int32]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.int16
G2L["50"] = Instance.new("ModuleScript", G2L["42"]);
G2L["50"]["Name"] = [[int16]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.inst
G2L["51"] = Instance.new("ModuleScript", G2L["42"]);
G2L["51"]["Name"] = [[inst]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.float64
G2L["52"] = Instance.new("ModuleScript", G2L["42"]);
G2L["52"]["Name"] = [[float64]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.float32
G2L["53"] = Instance.new("ModuleScript", G2L["42"]);
G2L["53"]["Name"] = [[float32]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.cframe
G2L["54"] = Instance.new("ModuleScript", G2L["42"]);
G2L["54"]["Name"] = [[cframe]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.buff
G2L["55"] = Instance.new("ModuleScript", G2L["42"]);
G2L["55"]["Name"] = [[buff]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.bool
G2L["56"] = Instance.new("ModuleScript", G2L["42"]);
G2L["56"]["Name"] = [[bool]];


-- StarterGui.GuiMain.Modules.ByteNet.dataTypes.array
G2L["57"] = Instance.new("ModuleScript", G2L["42"]);
G2L["57"]["Name"] = [[array]];


-- StarterGui.GuiMain.Storage
G2L["58"] = Instance.new("Folder", G2L["1"]);
G2L["58"]["Name"] = [[Storage]];


-- StarterGui.GuiMain.Script
G2L["59"] = Instance.new("Script", G2L["1"]);



-- StarterGui.GuiMain.Script.TextLabel
G2L["5a"] = Instance.new("TextLabel", G2L["59"]);
G2L["5a"]["TextWrapped"] = true;
G2L["5a"]["ZIndex"] = 2;
G2L["5a"]["BorderSizePixel"] = 0;
G2L["5a"]["TextSize"] = 17;
G2L["5a"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["BackgroundTransparency"] = 0.9;
G2L["5a"]["Size"] = UDim2.new(1, -5, 0, 35);
G2L["5a"]["Visible"] = false;
G2L["5a"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["Text"] = [[Serversides You Own]];
G2L["5a"]["Position"] = UDim2.new(0, 0, 0, 165);


-- StarterGui.GuiMain.Script.TextLabel.UIGradient
G2L["5b"] = Instance.new("UIGradient", G2L["5a"]);



-- StarterGui.GuiMain.Script.Message
G2L["5c"] = Instance.new("TextBox", G2L["59"]);
G2L["5c"]["Active"] = false;
G2L["5c"]["Name"] = [[Message]];
G2L["5c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["5c"]["BorderSizePixel"] = 0;
G2L["5c"]["TextEditable"] = false;
G2L["5c"]["TextWrapped"] = true;
G2L["5c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5c"]["TextSize"] = 18;
G2L["5c"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["5c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5c"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["5c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5c"]["RichText"] = true;
G2L["5c"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5c"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["5c"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["5c"]["ClearTextOnFocus"] = false;
G2L["5c"]["Size"] = UDim2.new(1, -6, 0, 0);
G2L["5c"]["Position"] = UDim2.new(0.5, 0, 0, 0);
G2L["5c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5c"]["Text"] = [[]];
G2L["5c"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Script.Button2
G2L["5d"] = Instance.new("TextButton", G2L["59"]);
G2L["5d"]["TextWrapped"] = true;
G2L["5d"]["BorderSizePixel"] = 0;
G2L["5d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5d"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5d"]["TextSize"] = 16;
G2L["5d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5d"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5d"]["ZIndex"] = 6;
G2L["5d"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["5d"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["5d"]["BackgroundTransparency"] = 0.9;
G2L["5d"]["Name"] = [[Button2]];
G2L["5d"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["5d"]["Text"] = [[]];
G2L["5d"]["Position"] = UDim2.new(0.5, 0, 0, 0);


-- StarterGui.GuiMain.Script.Button
G2L["5e"] = Instance.new("TextButton", G2L["59"]);
G2L["5e"]["TextWrapped"] = true;
G2L["5e"]["BorderSizePixel"] = 0;
G2L["5e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5e"]["TextTransparency"] = 0.5;
G2L["5e"]["AutoButtonColor"] = false;
G2L["5e"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5e"]["TextSize"] = 16;
G2L["5e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5e"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5e"]["ZIndex"] = 6;
G2L["5e"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["5e"]["Size"] = UDim2.new(1, -20, 0, 40);
G2L["5e"]["BackgroundTransparency"] = 1;
G2L["5e"]["Name"] = [[Button]];
G2L["5e"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["5e"]["Text"] = [[Execute]];
G2L["5e"]["Visible"] = false;
G2L["5e"]["Position"] = UDim2.new(0.5, 0, 0, 0);


-- StarterGui.GuiMain.Script.Button.Frame
G2L["5f"] = Instance.new("Frame", G2L["5e"]);
G2L["5f"]["ZIndex"] = 5;
G2L["5f"]["BorderSizePixel"] = 0;
G2L["5f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["5f"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["5f"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Script.Button.Frame.UICorner
G2L["60"] = Instance.new("UICorner", G2L["5f"]);
G2L["60"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.LocalScript
G2L["61"] = Instance.new("LocalScript", G2L["1"]);



-- StarterGui.GuiMain.LocalScript.Notification
G2L["62"] = Instance.new("Frame", G2L["61"]);
G2L["62"]["Visible"] = false;
G2L["62"]["BorderSizePixel"] = 0;
G2L["62"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["62"]["Size"] = UDim2.new(0.5, 0, 0, 90);
G2L["62"]["Position"] = UDim2.new(0, 0, 0.9, 0);
G2L["62"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["62"]["Name"] = [[Notification]];
G2L["62"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.LocalScript.Notification.UIListLayout
G2L["63"] = Instance.new("UIListLayout", G2L["62"]);
G2L["63"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.GuiMain.LocalScript.Notification.UICorner
G2L["64"] = Instance.new("UICorner", G2L["62"]);
G2L["64"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.LocalScript.Notification.Frame
G2L["65"] = Instance.new("Frame", G2L["62"]);
G2L["65"]["ZIndex"] = 2;
G2L["65"]["BorderSizePixel"] = 0;
G2L["65"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["65"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["65"]["Size"] = UDim2.new(0, 250, 1, 0);
G2L["65"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["65"]["BackgroundTransparency"] = 0.8;


-- StarterGui.GuiMain.LocalScript.Notification.Frame.Shadow
G2L["66"] = Instance.new("ImageLabel", G2L["65"]);
G2L["66"]["BorderSizePixel"] = 0;
G2L["66"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["66"]["SliceScale"] = 0.095;
G2L["66"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["66"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["66"]["ImageTransparency"] = 0.5;
G2L["66"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["66"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["66"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["66"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["66"]["BackgroundTransparency"] = 1;
G2L["66"]["Name"] = [[Shadow]];
G2L["66"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.LocalScript.Notification.Frame.Shadow.UIGradient
G2L["67"] = Instance.new("UIGradient", G2L["66"]);



-- StarterGui.GuiMain.LocalScript.Notification.Frame.TextLabel
G2L["68"] = Instance.new("TextLabel", G2L["65"]);
G2L["68"]["ZIndex"] = 3;
G2L["68"]["TextSize"] = 19;
G2L["68"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["68"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["68"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["68"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["68"]["BackgroundTransparency"] = 1;
G2L["68"]["Size"] = UDim2.new(0, 250, 0, 30);
G2L["68"]["ClipsDescendants"] = true;
G2L["68"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["68"]["Text"] = [[Sensation Notification]];


-- StarterGui.GuiMain.LocalScript.Notification.Frame.TextLabel.Frame
G2L["69"] = Instance.new("Frame", G2L["68"]);
G2L["69"]["BorderSizePixel"] = 0;
G2L["69"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["Size"] = UDim2.new(1, 0, 1, 10);
G2L["69"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.LocalScript.Notification.Frame.TextLabel.Frame.UICorner
G2L["6a"] = Instance.new("UICorner", G2L["69"]);
G2L["6a"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.LocalScript.Notification.Frame.Input
G2L["6b"] = Instance.new("TextLabel", G2L["65"]);
G2L["6b"]["TextWrapped"] = true;
G2L["6b"]["ZIndex"] = 2;
G2L["6b"]["TextSize"] = 17;
G2L["6b"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6b"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6b"]["BackgroundTransparency"] = 1;
G2L["6b"]["Size"] = UDim2.new(0, 250, 0, 69);
G2L["6b"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["6b"]["Text"] = [[Input]];
G2L["6b"]["Name"] = [[Input]];
G2L["6b"]["Position"] = UDim2.new(0, 0, 0.30444, 0);


-- StarterGui.GuiMain.LocalScript.Notification.Frame.UIGradient
G2L["6c"] = Instance.new("UIGradient", G2L["65"]);



-- StarterGui.GuiMain.LocalScript.Notification.Frame.UICorner
G2L["6d"] = Instance.new("UICorner", G2L["65"]);
G2L["6d"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.LocalScript.Sound
G2L["6e"] = Instance.new("Sound", G2L["61"]);
G2L["6e"]["RollOffMode"] = Enum.RollOffMode.InverseTapered;


-- StarterGui.GuiMain.FPS
G2L["6f"] = Instance.new("Frame", G2L["1"]);
G2L["6f"]["Visible"] = false;
G2L["6f"]["ZIndex"] = 2147483647;
G2L["6f"]["BorderSizePixel"] = 0;
G2L["6f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6f"]["AnchorPoint"] = Vector2.new(0, 1);
G2L["6f"]["Size"] = UDim2.new(0, 100, 0, 50);
G2L["6f"]["Position"] = UDim2.new(0, 10, 1, -70);
G2L["6f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6f"]["Name"] = [[FPS]];
G2L["6f"]["BackgroundTransparency"] = 0.8;


-- StarterGui.GuiMain.FPS.SubLabel
G2L["70"] = Instance.new("TextLabel", G2L["6f"]);
G2L["70"]["ZIndex"] = 2147483647;
G2L["70"]["BorderSizePixel"] = 0;
G2L["70"]["TextSize"] = 20;
G2L["70"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["70"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["70"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["70"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["70"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["70"]["BackgroundTransparency"] = 1;
G2L["70"]["Size"] = UDim2.new(1, -51, 1, 0);
G2L["70"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["70"]["Text"] = [[240]];
G2L["70"]["Name"] = [[SubLabel]];
G2L["70"]["Position"] = UDim2.new(0, 51, 0, 0);


-- StarterGui.GuiMain.FPS.MainLabel
G2L["71"] = Instance.new("TextLabel", G2L["6f"]);
G2L["71"]["ZIndex"] = 2147483647;
G2L["71"]["BorderSizePixel"] = 0;
G2L["71"]["TextSize"] = 20;
G2L["71"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["71"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["71"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["71"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["71"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["71"]["BackgroundTransparency"] = 1;
G2L["71"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["71"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["71"]["Text"] = [[    FPS: ]];
G2L["71"]["Name"] = [[MainLabel]];


-- StarterGui.GuiMain.FPS.MainLabel.GradColor
G2L["72"] = Instance.new("UIGradient", G2L["71"]);
G2L["72"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.FPS.Shadow
G2L["73"] = Instance.new("ImageLabel", G2L["6f"]);
G2L["73"]["BorderSizePixel"] = 0;
G2L["73"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["73"]["SliceScale"] = 0.095;
G2L["73"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["73"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["73"]["ImageTransparency"] = 0.5;
G2L["73"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["73"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["73"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["73"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["73"]["BackgroundTransparency"] = 1;
G2L["73"]["Name"] = [[Shadow]];
G2L["73"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.FPS.Shadow.UIGradient
G2L["74"] = Instance.new("UIGradient", G2L["73"]);



-- StarterGui.GuiMain.FPS.UIGradient
G2L["75"] = Instance.new("UIGradient", G2L["6f"]);



-- StarterGui.GuiMain.FPS.UICorner
G2L["76"] = Instance.new("UICorner", G2L["6f"]);
G2L["76"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Login
G2L["77"] = Instance.new("Frame", G2L["1"]);
G2L["77"]["BorderSizePixel"] = 0;
G2L["77"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["77"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["77"]["Size"] = UDim2.new(0, 300, 0, 100);
G2L["77"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["77"]["Name"] = [[Login]];
G2L["77"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Login.Shadow
G2L["78"] = Instance.new("ImageLabel", G2L["77"]);
G2L["78"]["BorderSizePixel"] = 0;
G2L["78"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["78"]["SliceScale"] = 0.095;
G2L["78"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["78"]["ImageTransparency"] = 1;
G2L["78"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["78"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["78"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["78"]["BackgroundTransparency"] = 1;
G2L["78"]["Name"] = [[Shadow]];
G2L["78"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Login.Shadow.UIGradient
G2L["79"] = Instance.new("UIGradient", G2L["78"]);



-- StarterGui.GuiMain.Login.Sound
G2L["7a"] = Instance.new("Sound", G2L["77"]);
G2L["7a"]["Volume"] = 0;
G2L["7a"]["RollOffMode"] = Enum.RollOffMode.InverseTapered;
G2L["7a"]["SoundId"] = [[rbxassetid://9124780123]];


-- StarterGui.GuiMain.Login.Frame
G2L["7b"] = Instance.new("Frame", G2L["77"]);
G2L["7b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["7b"]["Size"] = UDim2.new(0, 230, 0, 10);
G2L["7b"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["7b"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["7b"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Login.Frame.Frame
G2L["7c"] = Instance.new("Frame", G2L["7b"]);
G2L["7c"]["BorderSizePixel"] = 0;
G2L["7c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7c"]["Size"] = UDim2.new(0, 0, 1, 0);
G2L["7c"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["7c"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Login.Frame.Frame.UIGradient
G2L["7d"] = Instance.new("UIGradient", G2L["7c"]);



-- StarterGui.GuiMain.Login.Frame.Frame.UICorner
G2L["7e"] = Instance.new("UICorner", G2L["7c"]);
G2L["7e"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Login.Frame.UICorner
G2L["7f"] = Instance.new("UICorner", G2L["7b"]);
G2L["7f"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Login.B_
G2L["80"] = Instance.new("TextLabel", G2L["77"]);
G2L["80"]["BorderSizePixel"] = 0;
G2L["80"]["TextSize"] = 17;
G2L["80"]["TextTransparency"] = 1;
G2L["80"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["80"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["80"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["80"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["80"]["BackgroundTransparency"] = 1;
G2L["80"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["80"]["Size"] = UDim2.new(0, 200, 0, 30);
G2L["80"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["80"]["Text"] = [[Made only by Adiont]];
G2L["80"]["Name"] = [[B_]];
G2L["80"]["Position"] = UDim2.new(0.5, 0, 1, -30);


-- StarterGui.GuiMain.Login.A_
G2L["81"] = Instance.new("TextLabel", G2L["77"]);
G2L["81"]["BorderSizePixel"] = 0;
G2L["81"]["TextSize"] = 23;
G2L["81"]["TextTransparency"] = 1;
G2L["81"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["81"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["BackgroundTransparency"] = 1;
G2L["81"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["81"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["81"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["81"]["Text"] = [[?S?e?n?s?a?t?i?o?n Hub]];
G2L["81"]["Name"] = [[A_]];
G2L["81"]["Position"] = UDim2.new(0.5, 0, 0, 0);


-- StarterGui.GuiMain.Login.UIGradient
G2L["82"] = Instance.new("UIGradient", G2L["77"]);



-- StarterGui.GuiMain.Login.UICorner
G2L["83"] = Instance.new("UICorner", G2L["77"]);
G2L["83"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.MEM
G2L["84"] = Instance.new("Frame", G2L["1"]);
G2L["84"]["Visible"] = false;
G2L["84"]["ZIndex"] = 2147483647;
G2L["84"]["BorderSizePixel"] = 0;
G2L["84"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["84"]["AnchorPoint"] = Vector2.new(0, 1);
G2L["84"]["Size"] = UDim2.new(0, 120, 0, 50);
G2L["84"]["Position"] = UDim2.new(0, 10, 1, -190);
G2L["84"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["84"]["Name"] = [[MEM]];
G2L["84"]["BackgroundTransparency"] = 0.8;


-- StarterGui.GuiMain.MEM.SubLabel
G2L["85"] = Instance.new("TextLabel", G2L["84"]);
G2L["85"]["ZIndex"] = 2147483647;
G2L["85"]["BorderSizePixel"] = 0;
G2L["85"]["TextSize"] = 20;
G2L["85"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["85"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["85"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["85"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["85"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["85"]["BackgroundTransparency"] = 1;
G2L["85"]["Size"] = UDim2.new(1, -62, 1, 0);
G2L["85"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["85"]["Text"] = [[0000]];
G2L["85"]["Name"] = [[SubLabel]];
G2L["85"]["Position"] = UDim2.new(0, 62, 0, 0);


-- StarterGui.GuiMain.MEM.MainLabel
G2L["86"] = Instance.new("TextLabel", G2L["84"]);
G2L["86"]["ZIndex"] = 2147483647;
G2L["86"]["BorderSizePixel"] = 0;
G2L["86"]["TextSize"] = 20;
G2L["86"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["86"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["86"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["BackgroundTransparency"] = 1;
G2L["86"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["86"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["86"]["Text"] = [[    MEM: ]];
G2L["86"]["Name"] = [[MainLabel]];


-- StarterGui.GuiMain.MEM.MainLabel.GradColor
G2L["87"] = Instance.new("UIGradient", G2L["86"]);
G2L["87"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.MEM.Shadow
G2L["88"] = Instance.new("ImageLabel", G2L["84"]);
G2L["88"]["BorderSizePixel"] = 0;
G2L["88"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["88"]["SliceScale"] = 0.095;
G2L["88"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["88"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["88"]["ImageTransparency"] = 0.5;
G2L["88"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["88"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["88"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["88"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["88"]["BackgroundTransparency"] = 1;
G2L["88"]["Name"] = [[Shadow]];
G2L["88"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.MEM.Shadow.UIGradient
G2L["89"] = Instance.new("UIGradient", G2L["88"]);



-- StarterGui.GuiMain.MEM.UIGradient
G2L["8a"] = Instance.new("UIGradient", G2L["84"]);



-- StarterGui.GuiMain.MEM.UICorner
G2L["8b"] = Instance.new("UICorner", G2L["84"]);
G2L["8b"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main
G2L["8c"] = Instance.new("Frame", G2L["1"]);
G2L["8c"]["BorderSizePixel"] = 0;
G2L["8c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["8c"]["ClipsDescendants"] = true;
G2L["8c"]["Size"] = UDim2.new(0, 600, 0, 400);
G2L["8c"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["8c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8c"]["Name"] = [[Main]];
G2L["8c"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder
G2L["8d"] = Instance.new("Frame", G2L["8c"]);
G2L["8d"]["Visible"] = false;
G2L["8d"]["BorderSizePixel"] = 0;
G2L["8d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["ClipsDescendants"] = true;
G2L["8d"]["Size"] = UDim2.new(0.75, 0, 1, 0);
G2L["8d"]["Position"] = UDim2.new(0.25, 0, 0, 0);
G2L["8d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8d"]["Name"] = [[Holder]];
G2L["8d"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings
G2L["8e"] = Instance.new("Frame", G2L["8d"]);
G2L["8e"]["ZIndex"] = 0;
G2L["8e"]["BorderSizePixel"] = 0;
G2L["8e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8e"]["Size"] = UDim2.new(0, 450, 0, 400);
G2L["8e"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["8e"]["Name"] = [[Settings]];
G2L["8e"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame
G2L["8f"] = Instance.new("ScrollingFrame", G2L["8e"]);
G2L["8f"]["Active"] = true;
G2L["8f"]["BorderSizePixel"] = 0;
G2L["8f"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["8f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8f"]["Name"] = [[Frame]];
G2L["8f"]["ScrollBarImageTransparency"] = 0.8;
G2L["8f"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["8f"]["Size"] = UDim2.new(0, 430, 0, 380);
G2L["8f"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8f"]["Position"] = UDim2.new(0, 10, 0, 10);
G2L["8f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8f"]["ScrollBarThickness"] = 0;
G2L["8f"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur
G2L["90"] = Instance.new("Frame", G2L["8f"]);
G2L["90"]["BorderSizePixel"] = 0;
G2L["90"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["90"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["90"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["90"]["Name"] = [[Blur]];
G2L["90"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.UICorner
G2L["91"] = Instance.new("UICorner", G2L["90"]);
G2L["91"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Subtitle
G2L["92"] = Instance.new("TextLabel", G2L["90"]);
G2L["92"]["TextStrokeTransparency"] = 0.9;
G2L["92"]["BorderSizePixel"] = 0;
G2L["92"]["TextSize"] = 15;
G2L["92"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["92"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["92"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["92"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["92"]["BackgroundTransparency"] = 1;
G2L["92"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["92"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["92"]["Text"] = [[Old | New | Transparency]];
G2L["92"]["Name"] = [[Subtitle]];
G2L["92"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Subtitle.GradColor
G2L["93"] = Instance.new("UIGradient", G2L["92"]);
G2L["93"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame
G2L["94"] = Instance.new("Frame", G2L["90"]);
G2L["94"]["BorderSizePixel"] = 0;
G2L["94"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["94"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["94"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["94"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["94"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame.E2
G2L["95"] = Instance.new("TextButton", G2L["94"]);
G2L["95"]["TextStrokeTransparency"] = 0.9;
G2L["95"]["BorderSizePixel"] = 0;
G2L["95"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["95"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["95"]["TextSize"] = 15;
G2L["95"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["95"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["95"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["95"]["BackgroundTransparency"] = 0.9;
G2L["95"]["Name"] = [[E2]];
G2L["95"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["95"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame.E2.UICorner
G2L["96"] = Instance.new("UICorner", G2L["95"]);
G2L["96"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame.E1
G2L["97"] = Instance.new("TextButton", G2L["94"]);
G2L["97"]["TextStrokeTransparency"] = 0.9;
G2L["97"]["BorderSizePixel"] = 0;
G2L["97"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["97"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["97"]["TextSize"] = 15;
G2L["97"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["97"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["97"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["97"]["BackgroundTransparency"] = 0.9;
G2L["97"]["Name"] = [[E1]];
G2L["97"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["97"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame.E1.UICorner
G2L["98"] = Instance.new("UICorner", G2L["97"]);
G2L["98"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame.UIListLayout
G2L["99"] = Instance.new("UIListLayout", G2L["94"]);
G2L["99"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["99"]["Padding"] = UDim.new(0, 15);
G2L["99"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["99"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame.T
G2L["9a"] = Instance.new("TextBox", G2L["94"]);
G2L["9a"]["TextStrokeTransparency"] = 0.9;
G2L["9a"]["Name"] = [[T]];
G2L["9a"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9a"]["TextSize"] = 15;
G2L["9a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9a"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9a"]["ClipsDescendants"] = true;
G2L["9a"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["9a"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["9a"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["9a"]["Text"] = [[1]];
G2L["9a"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Frame.T.UICorner
G2L["9b"] = Instance.new("UICorner", G2L["9a"]);
G2L["9b"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Title
G2L["9c"] = Instance.new("TextLabel", G2L["90"]);
G2L["9c"]["TextStrokeTransparency"] = 0.9;
G2L["9c"]["BorderSizePixel"] = 0;
G2L["9c"]["TextSize"] = 15;
G2L["9c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9c"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9c"]["BackgroundTransparency"] = 1;
G2L["9c"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["9c"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["9c"]["Text"] = [[Blur]];
G2L["9c"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Title.Frame
G2L["9d"] = Instance.new("Frame", G2L["9c"]);
G2L["9d"]["BorderSizePixel"] = 0;
G2L["9d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9d"]["ClipsDescendants"] = true;
G2L["9d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["9d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9d"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Title.Frame.Frame
G2L["9e"] = Instance.new("Frame", G2L["9d"]);
G2L["9e"]["BorderSizePixel"] = 0;
G2L["9e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9e"]["ClipsDescendants"] = true;
G2L["9e"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["9e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9e"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Title.Frame.Frame.UICorner
G2L["9f"] = Instance.new("UICorner", G2L["9e"]);
G2L["9f"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Title.GradColor
G2L["a0"] = Instance.new("UIGradient", G2L["9c"]);
G2L["a0"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Blur.Title.UICorner
G2L["a1"] = Instance.new("UICorner", G2L["9c"]);
G2L["a1"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2
G2L["a2"] = Instance.new("Frame", G2L["8f"]);
G2L["a2"]["BorderSizePixel"] = 0;
G2L["a2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a2"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["a2"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["a2"]["Name"] = [[Toggles2]];
G2L["a2"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Title
G2L["a3"] = Instance.new("TextLabel", G2L["a2"]);
G2L["a3"]["TextStrokeTransparency"] = 0.9;
G2L["a3"]["BorderSizePixel"] = 0;
G2L["a3"]["TextSize"] = 15;
G2L["a3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a3"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a3"]["BackgroundTransparency"] = 1;
G2L["a3"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["a3"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["a3"]["Text"] = [[Toggles 2]];
G2L["a3"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Title.Frame
G2L["a4"] = Instance.new("Frame", G2L["a3"]);
G2L["a4"]["BorderSizePixel"] = 0;
G2L["a4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a4"]["ClipsDescendants"] = true;
G2L["a4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a4"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Title.Frame.Frame
G2L["a5"] = Instance.new("Frame", G2L["a4"]);
G2L["a5"]["BorderSizePixel"] = 0;
G2L["a5"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a5"]["ClipsDescendants"] = true;
G2L["a5"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["a5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a5"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Title.Frame.Frame.UICorner
G2L["a6"] = Instance.new("UICorner", G2L["a5"]);
G2L["a6"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Title.GradColor
G2L["a7"] = Instance.new("UIGradient", G2L["a3"]);
G2L["a7"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Title.UICorner
G2L["a8"] = Instance.new("UICorner", G2L["a3"]);
G2L["a8"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.UICorner
G2L["a9"] = Instance.new("UICorner", G2L["a2"]);
G2L["a9"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Subtitle
G2L["aa"] = Instance.new("TextLabel", G2L["a2"]);
G2L["aa"]["TextStrokeTransparency"] = 0.9;
G2L["aa"]["BorderSizePixel"] = 0;
G2L["aa"]["TextSize"] = 15;
G2L["aa"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["aa"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["aa"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["aa"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["aa"]["BackgroundTransparency"] = 1;
G2L["aa"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["aa"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["aa"]["Text"] = [[Chat | Join]];
G2L["aa"]["Name"] = [[Subtitle]];
G2L["aa"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Subtitle.GradColor
G2L["ab"] = Instance.new("UIGradient", G2L["aa"]);
G2L["ab"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame
G2L["ac"] = Instance.new("Frame", G2L["a2"]);
G2L["ac"]["BorderSizePixel"] = 0;
G2L["ac"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ac"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["ac"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["ac"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["ac"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame.C
G2L["ad"] = Instance.new("TextButton", G2L["ac"]);
G2L["ad"]["Interactable"] = false;
G2L["ad"]["TextStrokeTransparency"] = 0.9;
G2L["ad"]["BorderSizePixel"] = 0;
G2L["ad"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ad"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ad"]["TextSize"] = 15;
G2L["ad"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ad"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ad"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["ad"]["BackgroundTransparency"] = 0.9;
G2L["ad"]["Name"] = [[C]];
G2L["ad"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ad"]["Text"] = [[]];
G2L["ad"]["Visible"] = false;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame.C.UICorner
G2L["ae"] = Instance.new("UICorner", G2L["ad"]);
G2L["ae"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame.B
G2L["af"] = Instance.new("TextButton", G2L["ac"]);
G2L["af"]["TextStrokeTransparency"] = 0.9;
G2L["af"]["BorderSizePixel"] = 0;
G2L["af"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["af"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["af"]["TextSize"] = 15;
G2L["af"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["af"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["af"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["af"]["BackgroundTransparency"] = 0.9;
G2L["af"]["Name"] = [[B]];
G2L["af"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["af"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame.B.UICorner
G2L["b0"] = Instance.new("UICorner", G2L["af"]);
G2L["b0"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame.A
G2L["b1"] = Instance.new("TextButton", G2L["ac"]);
G2L["b1"]["TextStrokeTransparency"] = 0.9;
G2L["b1"]["BorderSizePixel"] = 0;
G2L["b1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b1"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b1"]["TextSize"] = 15;
G2L["b1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b1"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b1"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["b1"]["BackgroundTransparency"] = 0.9;
G2L["b1"]["Name"] = [[A]];
G2L["b1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b1"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame.A.UICorner
G2L["b2"] = Instance.new("UICorner", G2L["b1"]);
G2L["b2"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles2.Frame.UIListLayout
G2L["b3"] = Instance.new("UIListLayout", G2L["ac"]);
G2L["b3"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["b3"]["Padding"] = UDim.new(0, 15);
G2L["b3"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["b3"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
G2L["b3"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles
G2L["b4"] = Instance.new("Frame", G2L["8f"]);
G2L["b4"]["BorderSizePixel"] = 0;
G2L["b4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b4"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["b4"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["b4"]["Name"] = [[Toggles]];
G2L["b4"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Title
G2L["b5"] = Instance.new("TextLabel", G2L["b4"]);
G2L["b5"]["TextStrokeTransparency"] = 0.9;
G2L["b5"]["BorderSizePixel"] = 0;
G2L["b5"]["TextSize"] = 15;
G2L["b5"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b5"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b5"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b5"]["BackgroundTransparency"] = 1;
G2L["b5"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["b5"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["b5"]["Text"] = [[Toggles]];
G2L["b5"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Title.Frame
G2L["b6"] = Instance.new("Frame", G2L["b5"]);
G2L["b6"]["BorderSizePixel"] = 0;
G2L["b6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b6"]["ClipsDescendants"] = true;
G2L["b6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["b6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b6"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Title.Frame.Frame
G2L["b7"] = Instance.new("Frame", G2L["b6"]);
G2L["b7"]["BorderSizePixel"] = 0;
G2L["b7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b7"]["ClipsDescendants"] = true;
G2L["b7"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["b7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b7"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Title.Frame.Frame.UICorner
G2L["b8"] = Instance.new("UICorner", G2L["b7"]);
G2L["b8"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Title.GradColor
G2L["b9"] = Instance.new("UIGradient", G2L["b5"]);
G2L["b9"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Title.UICorner
G2L["ba"] = Instance.new("UICorner", G2L["b5"]);
G2L["ba"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.UICorner
G2L["bb"] = Instance.new("UICorner", G2L["b4"]);
G2L["bb"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Subtitle
G2L["bc"] = Instance.new("TextLabel", G2L["b4"]);
G2L["bc"]["TextStrokeTransparency"] = 0.9;
G2L["bc"]["BorderSizePixel"] = 0;
G2L["bc"]["TextSize"] = 15;
G2L["bc"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["bc"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bc"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["bc"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["bc"]["BackgroundTransparency"] = 1;
G2L["bc"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["bc"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["bc"]["Text"] = [[Converter | Notifications | Auto R6]];
G2L["bc"]["Name"] = [[Subtitle]];
G2L["bc"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Subtitle.GradColor
G2L["bd"] = Instance.new("UIGradient", G2L["bc"]);
G2L["bd"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame
G2L["be"] = Instance.new("Frame", G2L["b4"]);
G2L["be"]["BorderSizePixel"] = 0;
G2L["be"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["be"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["be"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["be"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["be"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame.C
G2L["bf"] = Instance.new("TextButton", G2L["be"]);
G2L["bf"]["TextStrokeTransparency"] = 0.9;
G2L["bf"]["BorderSizePixel"] = 0;
G2L["bf"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bf"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bf"]["TextSize"] = 15;
G2L["bf"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bf"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["bf"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["bf"]["BackgroundTransparency"] = 0.9;
G2L["bf"]["Name"] = [[C]];
G2L["bf"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bf"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame.C.UICorner
G2L["c0"] = Instance.new("UICorner", G2L["bf"]);
G2L["c0"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame.B
G2L["c1"] = Instance.new("TextButton", G2L["be"]);
G2L["c1"]["TextStrokeTransparency"] = 0.9;
G2L["c1"]["BorderSizePixel"] = 0;
G2L["c1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c1"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c1"]["TextSize"] = 15;
G2L["c1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c1"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c1"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["c1"]["BackgroundTransparency"] = 0.9;
G2L["c1"]["Name"] = [[B]];
G2L["c1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c1"]["Text"] = [[X]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame.B.UICorner
G2L["c2"] = Instance.new("UICorner", G2L["c1"]);
G2L["c2"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame.A
G2L["c3"] = Instance.new("TextButton", G2L["be"]);
G2L["c3"]["TextStrokeTransparency"] = 0.9;
G2L["c3"]["BorderSizePixel"] = 0;
G2L["c3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c3"]["TextSize"] = 15;
G2L["c3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c3"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["c3"]["BackgroundTransparency"] = 0.9;
G2L["c3"]["Name"] = [[A]];
G2L["c3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c3"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame.A.UICorner
G2L["c4"] = Instance.new("UICorner", G2L["c3"]);
G2L["c4"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Toggles.Frame.UIListLayout
G2L["c5"] = Instance.new("UIListLayout", G2L["be"]);
G2L["c5"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["c5"]["Padding"] = UDim.new(0, 15);
G2L["c5"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["c5"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
G2L["c5"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua
G2L["c6"] = Instance.new("Frame", G2L["8f"]);
G2L["c6"]["Visible"] = false;
G2L["c6"]["Interactable"] = false;
G2L["c6"]["BorderSizePixel"] = 0;
G2L["c6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c6"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["c6"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["c6"]["Name"] = [[vLua]];
G2L["c6"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Title
G2L["c7"] = Instance.new("TextLabel", G2L["c6"]);
G2L["c7"]["TextStrokeTransparency"] = 0.9;
G2L["c7"]["BorderSizePixel"] = 0;
G2L["c7"]["TextSize"] = 15;
G2L["c7"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c7"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c7"]["BackgroundTransparency"] = 1;
G2L["c7"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["c7"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["c7"]["Text"] = [[vLua Versions]];
G2L["c7"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Title.Frame
G2L["c8"] = Instance.new("Frame", G2L["c7"]);
G2L["c8"]["BorderSizePixel"] = 0;
G2L["c8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c8"]["ClipsDescendants"] = true;
G2L["c8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["c8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c8"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Title.Frame.Frame
G2L["c9"] = Instance.new("Frame", G2L["c8"]);
G2L["c9"]["BorderSizePixel"] = 0;
G2L["c9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c9"]["ClipsDescendants"] = true;
G2L["c9"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["c9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c9"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Title.Frame.Frame.UICorner
G2L["ca"] = Instance.new("UICorner", G2L["c9"]);
G2L["ca"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Title.GradColor
G2L["cb"] = Instance.new("UIGradient", G2L["c7"]);
G2L["cb"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Title.UICorner
G2L["cc"] = Instance.new("UICorner", G2L["c7"]);
G2L["cc"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.UICorner
G2L["cd"] = Instance.new("UICorner", G2L["c6"]);
G2L["cd"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Subtitle
G2L["ce"] = Instance.new("TextLabel", G2L["c6"]);
G2L["ce"]["TextStrokeTransparency"] = 0.9;
G2L["ce"]["BorderSizePixel"] = 0;
G2L["ce"]["TextSize"] = 13;
G2L["ce"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["ce"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ce"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ce"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["ce"]["BackgroundTransparency"] = 1;
G2L["ce"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["ce"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["ce"]["Text"] = [[Fiu (Luau) | FiOne (Lua) | LBI (Lua)]];
G2L["ce"]["Name"] = [[Subtitle]];
G2L["ce"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Subtitle.GradColor
G2L["cf"] = Instance.new("UIGradient", G2L["ce"]);
G2L["cf"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame
G2L["d0"] = Instance.new("Frame", G2L["c6"]);
G2L["d0"]["BorderSizePixel"] = 0;
G2L["d0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d0"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["d0"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["d0"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["d0"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame.C
G2L["d1"] = Instance.new("TextButton", G2L["d0"]);
G2L["d1"]["TextStrokeTransparency"] = 0.9;
G2L["d1"]["BorderSizePixel"] = 0;
G2L["d1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d1"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d1"]["TextSize"] = 15;
G2L["d1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d1"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d1"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["d1"]["BackgroundTransparency"] = 0.9;
G2L["d1"]["Name"] = [[C]];
G2L["d1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d1"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame.C.UICorner
G2L["d2"] = Instance.new("UICorner", G2L["d1"]);
G2L["d2"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame.B
G2L["d3"] = Instance.new("TextButton", G2L["d0"]);
G2L["d3"]["TextStrokeTransparency"] = 0.9;
G2L["d3"]["BorderSizePixel"] = 0;
G2L["d3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d3"]["TextSize"] = 15;
G2L["d3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d3"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d3"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["d3"]["BackgroundTransparency"] = 0.9;
G2L["d3"]["Name"] = [[B]];
G2L["d3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d3"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame.B.UICorner
G2L["d4"] = Instance.new("UICorner", G2L["d3"]);
G2L["d4"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame.A
G2L["d5"] = Instance.new("TextButton", G2L["d0"]);
G2L["d5"]["TextStrokeTransparency"] = 0.9;
G2L["d5"]["BorderSizePixel"] = 0;
G2L["d5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d5"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d5"]["TextSize"] = 15;
G2L["d5"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d5"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d5"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["d5"]["BackgroundTransparency"] = 0.9;
G2L["d5"]["Name"] = [[A]];
G2L["d5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d5"]["Text"] = [[X]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame.A.UICorner
G2L["d6"] = Instance.new("UICorner", G2L["d5"]);
G2L["d6"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.vLua.Frame.UIListLayout
G2L["d7"] = Instance.new("UIListLayout", G2L["d0"]);
G2L["d7"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["d7"]["Padding"] = UDim.new(0, 15);
G2L["d7"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["d7"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
G2L["d7"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra
G2L["d8"] = Instance.new("Frame", G2L["8f"]);
G2L["d8"]["BorderSizePixel"] = 0;
G2L["d8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d8"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["d8"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["d8"]["Name"] = [[Xtra]];
G2L["d8"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Title
G2L["d9"] = Instance.new("TextLabel", G2L["d8"]);
G2L["d9"]["TextStrokeTransparency"] = 0.9;
G2L["d9"]["BorderSizePixel"] = 0;
G2L["d9"]["TextSize"] = 15;
G2L["d9"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d9"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d9"]["BackgroundTransparency"] = 1;
G2L["d9"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["d9"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["d9"]["Text"] = [[Xtra]];
G2L["d9"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Title.Frame
G2L["da"] = Instance.new("Frame", G2L["d9"]);
G2L["da"]["BorderSizePixel"] = 0;
G2L["da"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["da"]["ClipsDescendants"] = true;
G2L["da"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["da"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["da"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Title.Frame.Frame
G2L["db"] = Instance.new("Frame", G2L["da"]);
G2L["db"]["BorderSizePixel"] = 0;
G2L["db"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["db"]["ClipsDescendants"] = true;
G2L["db"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["db"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["db"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Title.Frame.Frame.UICorner
G2L["dc"] = Instance.new("UICorner", G2L["db"]);
G2L["dc"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Title.GradColor
G2L["dd"] = Instance.new("UIGradient", G2L["d9"]);
G2L["dd"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Title.UICorner
G2L["de"] = Instance.new("UICorner", G2L["d9"]);
G2L["de"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.UICorner
G2L["df"] = Instance.new("UICorner", G2L["d8"]);
G2L["df"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Subtitle
G2L["e0"] = Instance.new("TextLabel", G2L["d8"]);
G2L["e0"]["TextStrokeTransparency"] = 0.9;
G2L["e0"]["BorderSizePixel"] = 0;
G2L["e0"]["TextSize"] = 15;
G2L["e0"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["e0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e0"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e0"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["e0"]["BackgroundTransparency"] = 1;
G2L["e0"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["e0"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["e0"]["Text"] = [[FixMouse | FixCam | Dummy]];
G2L["e0"]["Name"] = [[Subtitle]];
G2L["e0"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Subtitle.GradColor
G2L["e1"] = Instance.new("UIGradient", G2L["e0"]);
G2L["e1"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame
G2L["e2"] = Instance.new("Frame", G2L["d8"]);
G2L["e2"]["BorderSizePixel"] = 0;
G2L["e2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e2"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["e2"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["e2"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["e2"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame.C
G2L["e3"] = Instance.new("TextButton", G2L["e2"]);
G2L["e3"]["TextStrokeTransparency"] = 0.9;
G2L["e3"]["BorderSizePixel"] = 0;
G2L["e3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e3"]["TextSize"] = 15;
G2L["e3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e3"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e3"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["e3"]["BackgroundTransparency"] = 0.9;
G2L["e3"]["Name"] = [[C]];
G2L["e3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e3"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame.C.UICorner
G2L["e4"] = Instance.new("UICorner", G2L["e3"]);
G2L["e4"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame.B
G2L["e5"] = Instance.new("TextButton", G2L["e2"]);
G2L["e5"]["TextStrokeTransparency"] = 0.9;
G2L["e5"]["BorderSizePixel"] = 0;
G2L["e5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e5"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e5"]["TextSize"] = 15;
G2L["e5"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e5"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e5"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["e5"]["BackgroundTransparency"] = 0.9;
G2L["e5"]["Name"] = [[B]];
G2L["e5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e5"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame.B.UICorner
G2L["e6"] = Instance.new("UICorner", G2L["e5"]);
G2L["e6"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame.A
G2L["e7"] = Instance.new("TextButton", G2L["e2"]);
G2L["e7"]["TextStrokeTransparency"] = 0.9;
G2L["e7"]["BorderSizePixel"] = 0;
G2L["e7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e7"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["e7"]["TextSize"] = 15;
G2L["e7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e7"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["e7"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["e7"]["BackgroundTransparency"] = 0.9;
G2L["e7"]["Name"] = [[A]];
G2L["e7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e7"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame.A.UICorner
G2L["e8"] = Instance.new("UICorner", G2L["e7"]);
G2L["e8"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Xtra.Frame.UIListLayout
G2L["e9"] = Instance.new("UIListLayout", G2L["e2"]);
G2L["e9"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["e9"]["Padding"] = UDim.new(0, 15);
G2L["e9"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["e9"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
G2L["e9"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme
G2L["ea"] = Instance.new("Frame", G2L["8f"]);
G2L["ea"]["BorderSizePixel"] = 0;
G2L["ea"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ea"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["ea"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["ea"]["Name"] = [[Theme]];
G2L["ea"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.UICorner
G2L["eb"] = Instance.new("UICorner", G2L["ea"]);
G2L["eb"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Subtitle
G2L["ec"] = Instance.new("TextLabel", G2L["ea"]);
G2L["ec"]["TextStrokeTransparency"] = 0.9;
G2L["ec"]["BorderSizePixel"] = 0;
G2L["ec"]["TextSize"] = 15;
G2L["ec"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["ec"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ec"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ec"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["ec"]["BackgroundTransparency"] = 1;
G2L["ec"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["ec"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["ec"]["Text"] = [[Current Theme]];
G2L["ec"]["Name"] = [[Subtitle]];
G2L["ec"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Subtitle.GradColor
G2L["ed"] = Instance.new("UIGradient", G2L["ec"]);
G2L["ed"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame
G2L["ee"] = Instance.new("Frame", G2L["ea"]);
G2L["ee"]["BorderSizePixel"] = 0;
G2L["ee"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ee"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["ee"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["ee"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["ee"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame.Option
G2L["ef"] = Instance.new("TextLabel", G2L["ee"]);
G2L["ef"]["TextStrokeTransparency"] = 0.9;
G2L["ef"]["TextSize"] = 15;
G2L["ef"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ef"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ef"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ef"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ef"]["BackgroundTransparency"] = 0.9;
G2L["ef"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["ef"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["ef"]["Text"] = [[0]];
G2L["ef"]["Name"] = [[Option]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame.Option.UICorner
G2L["f0"] = Instance.new("UICorner", G2L["ef"]);
G2L["f0"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame.Right
G2L["f1"] = Instance.new("TextButton", G2L["ee"]);
G2L["f1"]["TextStrokeTransparency"] = 0.9;
G2L["f1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f1"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f1"]["TextSize"] = 15;
G2L["f1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f1"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f1"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["f1"]["BackgroundTransparency"] = 0.9;
G2L["f1"]["Name"] = [[Right]];
G2L["f1"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["f1"]["Text"] = [[>]];
G2L["f1"]["Position"] = UDim2.new(0.02381, 0, 0.33333, 0);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame.Right.UICorner
G2L["f2"] = Instance.new("UICorner", G2L["f1"]);
G2L["f2"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame.Left
G2L["f3"] = Instance.new("TextButton", G2L["ee"]);
G2L["f3"]["TextStrokeTransparency"] = 0.9;
G2L["f3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f3"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f3"]["TextSize"] = 15;
G2L["f3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f3"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f3"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["f3"]["BackgroundTransparency"] = 0.9;
G2L["f3"]["Name"] = [[Left]];
G2L["f3"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["f3"]["Text"] = [[<]];
G2L["f3"]["Position"] = UDim2.new(0.02381, 0, 0.33333, 0);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame.Left.UICorner
G2L["f4"] = Instance.new("UICorner", G2L["f3"]);
G2L["f4"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Frame.UIListLayout
G2L["f5"] = Instance.new("UIListLayout", G2L["ee"]);
G2L["f5"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["f5"]["Padding"] = UDim.new(0, 15);
G2L["f5"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["f5"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Title
G2L["f6"] = Instance.new("TextLabel", G2L["ea"]);
G2L["f6"]["TextStrokeTransparency"] = 0.9;
G2L["f6"]["BorderSizePixel"] = 0;
G2L["f6"]["TextSize"] = 15;
G2L["f6"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f6"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["f6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f6"]["BackgroundTransparency"] = 1;
G2L["f6"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["f6"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["f6"]["Text"] = [[Theme]];
G2L["f6"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Title.Frame
G2L["f7"] = Instance.new("Frame", G2L["f6"]);
G2L["f7"]["BorderSizePixel"] = 0;
G2L["f7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f7"]["ClipsDescendants"] = true;
G2L["f7"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["f7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f7"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Title.Frame.Frame
G2L["f8"] = Instance.new("Frame", G2L["f7"]);
G2L["f8"]["BorderSizePixel"] = 0;
G2L["f8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f8"]["ClipsDescendants"] = true;
G2L["f8"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["f8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f8"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Title.Frame.Frame.UICorner
G2L["f9"] = Instance.new("UICorner", G2L["f8"]);
G2L["f9"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Title.GradColor
G2L["fa"] = Instance.new("UIGradient", G2L["f6"]);
G2L["fa"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Theme.Title.UICorner
G2L["fb"] = Instance.new("UICorner", G2L["f6"]);
G2L["fb"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color
G2L["fc"] = Instance.new("Frame", G2L["8f"]);
G2L["fc"]["BorderSizePixel"] = 0;
G2L["fc"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fc"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["fc"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["fc"]["Name"] = [[Sub Color]];
G2L["fc"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.UICorner
G2L["fd"] = Instance.new("UICorner", G2L["fc"]);
G2L["fd"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Subtitle
G2L["fe"] = Instance.new("TextLabel", G2L["fc"]);
G2L["fe"]["TextStrokeTransparency"] = 0.9;
G2L["fe"]["BorderSizePixel"] = 0;
G2L["fe"]["TextSize"] = 15;
G2L["fe"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["fe"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["fe"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["fe"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["fe"]["BackgroundTransparency"] = 1;
G2L["fe"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["fe"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["fe"]["Text"] = [[hue  |  saturation |  brightness]];
G2L["fe"]["Name"] = [[Subtitle]];
G2L["fe"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Subtitle.GradColor
G2L["ff"] = Instance.new("UIGradient", G2L["fe"]);
G2L["ff"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame
G2L["100"] = Instance.new("Frame", G2L["fc"]);
G2L["100"]["BorderSizePixel"] = 0;
G2L["100"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["100"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["100"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["100"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["100"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame.UIListLayout
G2L["101"] = Instance.new("UIListLayout", G2L["100"]);
G2L["101"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["101"]["Padding"] = UDim.new(0, 15);
G2L["101"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["101"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame.V
G2L["102"] = Instance.new("TextBox", G2L["100"]);
G2L["102"]["TextStrokeTransparency"] = 0.9;
G2L["102"]["Name"] = [[V]];
G2L["102"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["102"]["TextSize"] = 15;
G2L["102"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["102"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["102"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["102"]["ClipsDescendants"] = true;
G2L["102"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["102"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["102"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["102"]["Text"] = [[1]];
G2L["102"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame.V.UICorner
G2L["103"] = Instance.new("UICorner", G2L["102"]);
G2L["103"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame.S
G2L["104"] = Instance.new("TextBox", G2L["100"]);
G2L["104"]["TextStrokeTransparency"] = 0.9;
G2L["104"]["Name"] = [[S]];
G2L["104"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["104"]["TextSize"] = 15;
G2L["104"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["104"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["104"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["104"]["ClipsDescendants"] = true;
G2L["104"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["104"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["104"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["104"]["Text"] = [[1]];
G2L["104"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame.S.UICorner
G2L["105"] = Instance.new("UICorner", G2L["104"]);
G2L["105"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame.H
G2L["106"] = Instance.new("TextBox", G2L["100"]);
G2L["106"]["TextStrokeTransparency"] = 0.9;
G2L["106"]["Name"] = [[H]];
G2L["106"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["106"]["TextSize"] = 15;
G2L["106"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["106"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["106"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["106"]["ClipsDescendants"] = true;
G2L["106"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["106"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["106"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["106"]["Text"] = [[1]];
G2L["106"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Frame.H.UICorner
G2L["107"] = Instance.new("UICorner", G2L["106"]);
G2L["107"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Title
G2L["108"] = Instance.new("TextLabel", G2L["fc"]);
G2L["108"]["TextStrokeTransparency"] = 0.9;
G2L["108"]["BorderSizePixel"] = 0;
G2L["108"]["TextSize"] = 15;
G2L["108"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["108"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["108"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["108"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["108"]["BackgroundTransparency"] = 1;
G2L["108"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["108"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["108"]["Text"] = [[Sub Color Settings]];
G2L["108"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Title.Frame
G2L["109"] = Instance.new("Frame", G2L["108"]);
G2L["109"]["BorderSizePixel"] = 0;
G2L["109"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["109"]["ClipsDescendants"] = true;
G2L["109"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["109"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["109"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Title.Frame.Frame
G2L["10a"] = Instance.new("Frame", G2L["109"]);
G2L["10a"]["BorderSizePixel"] = 0;
G2L["10a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10a"]["ClipsDescendants"] = true;
G2L["10a"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["10a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10a"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Title.Frame.Frame.UICorner
G2L["10b"] = Instance.new("UICorner", G2L["10a"]);
G2L["10b"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Title.GradColor
G2L["10c"] = Instance.new("UIGradient", G2L["108"]);
G2L["10c"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Sub Color.Title.UICorner
G2L["10d"] = Instance.new("UICorner", G2L["108"]);
G2L["10d"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color
G2L["10e"] = Instance.new("Frame", G2L["8f"]);
G2L["10e"]["BorderSizePixel"] = 0;
G2L["10e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["10e"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["10e"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["10e"]["Name"] = [[Main Color]];
G2L["10e"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.UICorner
G2L["10f"] = Instance.new("UICorner", G2L["10e"]);
G2L["10f"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Subtitle
G2L["110"] = Instance.new("TextLabel", G2L["10e"]);
G2L["110"]["TextStrokeTransparency"] = 0.9;
G2L["110"]["BorderSizePixel"] = 0;
G2L["110"]["TextSize"] = 15;
G2L["110"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["110"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["110"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["110"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["110"]["BackgroundTransparency"] = 1;
G2L["110"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["110"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["110"]["Text"] = [[hue  |  saturation |  brightness]];
G2L["110"]["Name"] = [[Subtitle]];
G2L["110"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Subtitle.GradColor
G2L["111"] = Instance.new("UIGradient", G2L["110"]);
G2L["111"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame
G2L["112"] = Instance.new("Frame", G2L["10e"]);
G2L["112"]["BorderSizePixel"] = 0;
G2L["112"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["112"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["112"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["112"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["112"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame.UIListLayout
G2L["113"] = Instance.new("UIListLayout", G2L["112"]);
G2L["113"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["113"]["Padding"] = UDim.new(0, 15);
G2L["113"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["113"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame.V
G2L["114"] = Instance.new("TextBox", G2L["112"]);
G2L["114"]["TextStrokeTransparency"] = 0.9;
G2L["114"]["Name"] = [[V]];
G2L["114"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["114"]["TextSize"] = 15;
G2L["114"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["114"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["114"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["114"]["ClipsDescendants"] = true;
G2L["114"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["114"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["114"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["114"]["Text"] = [[1]];
G2L["114"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame.V.UICorner
G2L["115"] = Instance.new("UICorner", G2L["114"]);
G2L["115"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame.S
G2L["116"] = Instance.new("TextBox", G2L["112"]);
G2L["116"]["TextStrokeTransparency"] = 0.9;
G2L["116"]["Name"] = [[S]];
G2L["116"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["116"]["TextSize"] = 15;
G2L["116"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["116"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["116"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["116"]["ClipsDescendants"] = true;
G2L["116"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["116"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["116"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["116"]["Text"] = [[1]];
G2L["116"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame.S.UICorner
G2L["117"] = Instance.new("UICorner", G2L["116"]);
G2L["117"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame.H
G2L["118"] = Instance.new("TextBox", G2L["112"]);
G2L["118"]["TextStrokeTransparency"] = 0.9;
G2L["118"]["Name"] = [[H]];
G2L["118"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["118"]["TextSize"] = 15;
G2L["118"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["118"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["118"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["118"]["ClipsDescendants"] = true;
G2L["118"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["118"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["118"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["118"]["Text"] = [[1]];
G2L["118"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Frame.H.UICorner
G2L["119"] = Instance.new("UICorner", G2L["118"]);
G2L["119"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Title
G2L["11a"] = Instance.new("TextLabel", G2L["10e"]);
G2L["11a"]["TextStrokeTransparency"] = 0.9;
G2L["11a"]["BorderSizePixel"] = 0;
G2L["11a"]["TextSize"] = 15;
G2L["11a"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11a"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["11a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11a"]["BackgroundTransparency"] = 1;
G2L["11a"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["11a"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["11a"]["Text"] = [[Main Color Settings]];
G2L["11a"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Title.Frame
G2L["11b"] = Instance.new("Frame", G2L["11a"]);
G2L["11b"]["BorderSizePixel"] = 0;
G2L["11b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11b"]["ClipsDescendants"] = true;
G2L["11b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["11b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11b"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Title.Frame.Frame
G2L["11c"] = Instance.new("Frame", G2L["11b"]);
G2L["11c"]["BorderSizePixel"] = 0;
G2L["11c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11c"]["ClipsDescendants"] = true;
G2L["11c"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["11c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11c"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Title.Frame.Frame.UICorner
G2L["11d"] = Instance.new("UICorner", G2L["11c"]);
G2L["11d"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Title.GradColor
G2L["11e"] = Instance.new("UIGradient", G2L["11a"]);
G2L["11e"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Main Color.Title.UICorner
G2L["11f"] = Instance.new("UICorner", G2L["11a"]);
G2L["11f"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams
G2L["120"] = Instance.new("Frame", G2L["8f"]);
G2L["120"]["BorderSizePixel"] = 0;
G2L["120"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["120"]["Size"] = UDim2.new(0, 210, 0, 110);
G2L["120"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["120"]["Name"] = [[Chams]];
G2L["120"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.UICorner
G2L["121"] = Instance.new("UICorner", G2L["120"]);
G2L["121"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Subtitle
G2L["122"] = Instance.new("TextLabel", G2L["120"]);
G2L["122"]["TextStrokeTransparency"] = 0.9;
G2L["122"]["BorderSizePixel"] = 0;
G2L["122"]["TextSize"] = 15;
G2L["122"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["122"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["122"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["122"]["TextColor3"] = Color3.fromRGB(201, 201, 201);
G2L["122"]["BackgroundTransparency"] = 1;
G2L["122"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["122"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["122"]["Text"] = [[Enabled | Border | Background]];
G2L["122"]["Name"] = [[Subtitle]];
G2L["122"]["Position"] = UDim2.new(0, 0, 0, 20);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Subtitle.GradColor
G2L["123"] = Instance.new("UIGradient", G2L["122"]);
G2L["123"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame
G2L["124"] = Instance.new("Frame", G2L["120"]);
G2L["124"]["BorderSizePixel"] = 0;
G2L["124"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["124"]["Size"] = UDim2.new(0, 210, 0, 75);
G2L["124"]["Position"] = UDim2.new(0, 0, 0.2, 0);
G2L["124"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["124"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame.E
G2L["125"] = Instance.new("TextButton", G2L["124"]);
G2L["125"]["TextStrokeTransparency"] = 0.9;
G2L["125"]["BorderSizePixel"] = 0;
G2L["125"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["125"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["125"]["TextSize"] = 15;
G2L["125"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["125"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["125"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["125"]["BackgroundTransparency"] = 0.9;
G2L["125"]["Name"] = [[E]];
G2L["125"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["125"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame.E.UICorner
G2L["126"] = Instance.new("UICorner", G2L["125"]);
G2L["126"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame.UIListLayout
G2L["127"] = Instance.new("UIListLayout", G2L["124"]);
G2L["127"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["127"]["Padding"] = UDim.new(0, 15);
G2L["127"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
G2L["127"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame.T2
G2L["128"] = Instance.new("TextBox", G2L["124"]);
G2L["128"]["TextStrokeTransparency"] = 0.9;
G2L["128"]["Name"] = [[T2]];
G2L["128"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["128"]["TextSize"] = 15;
G2L["128"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["128"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["128"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["128"]["ClipsDescendants"] = true;
G2L["128"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["128"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["128"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["128"]["Text"] = [[1]];
G2L["128"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame.T2.UICorner
G2L["129"] = Instance.new("UICorner", G2L["128"]);
G2L["129"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame.T1
G2L["12a"] = Instance.new("TextBox", G2L["124"]);
G2L["12a"]["TextStrokeTransparency"] = 0.9;
G2L["12a"]["Name"] = [[T1]];
G2L["12a"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12a"]["TextSize"] = 15;
G2L["12a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12a"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12a"]["ClipsDescendants"] = true;
G2L["12a"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["12a"]["Position"] = UDim2.new(0.08571, 0, 0.49, 0);
G2L["12a"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["12a"]["Text"] = [[1]];
G2L["12a"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Frame.T1.UICorner
G2L["12b"] = Instance.new("UICorner", G2L["12a"]);
G2L["12b"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Title
G2L["12c"] = Instance.new("TextLabel", G2L["120"]);
G2L["12c"]["TextStrokeTransparency"] = 0.9;
G2L["12c"]["BorderSizePixel"] = 0;
G2L["12c"]["TextSize"] = 15;
G2L["12c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12c"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["12c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12c"]["BackgroundTransparency"] = 1;
G2L["12c"]["Size"] = UDim2.new(0, 210, 0, 20);
G2L["12c"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["12c"]["Text"] = [[Chams]];
G2L["12c"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Title.Frame
G2L["12d"] = Instance.new("Frame", G2L["12c"]);
G2L["12d"]["BorderSizePixel"] = 0;
G2L["12d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12d"]["ClipsDescendants"] = true;
G2L["12d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["12d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12d"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Title.Frame.Frame
G2L["12e"] = Instance.new("Frame", G2L["12d"]);
G2L["12e"]["BorderSizePixel"] = 0;
G2L["12e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12e"]["ClipsDescendants"] = true;
G2L["12e"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["12e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12e"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Title.Frame.Frame.UICorner
G2L["12f"] = Instance.new("UICorner", G2L["12e"]);
G2L["12f"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Title.GradColor
G2L["130"] = Instance.new("UIGradient", G2L["12c"]);
G2L["130"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.Chams.Title.UICorner
G2L["131"] = Instance.new("UICorner", G2L["12c"]);
G2L["131"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Settings.Frame.UIGridLayout
G2L["132"] = Instance.new("UIGridLayout", G2L["8f"]);
G2L["132"]["CellSize"] = UDim2.new(0, 210, 0, 110);
G2L["132"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
G2L["132"]["CellPadding"] = UDim2.new(0, 10, 0, 10);


-- StarterGui.GuiMain.Main.Holder.Players
G2L["133"] = Instance.new("Frame", G2L["8d"]);
G2L["133"]["ZIndex"] = 0;
G2L["133"]["BorderSizePixel"] = 0;
G2L["133"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["133"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["133"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["133"]["Name"] = [[Players]];
G2L["133"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Players.Frame
G2L["134"] = Instance.new("Frame", G2L["133"]);
G2L["134"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["134"]["Size"] = UDim2.new(0, 430, 0, 380);
G2L["134"]["Position"] = UDim2.new(0, 10, 0, 10);
G2L["134"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["134"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame
G2L["135"] = Instance.new("Frame", G2L["134"]);
G2L["135"]["BorderSizePixel"] = 0;
G2L["135"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["135"]["Size"] = UDim2.new(0, 430, 0, 210);
G2L["135"]["Position"] = UDim2.new(0, 0, 0.44737, 0);
G2L["135"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["135"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.Frame
G2L["136"] = Instance.new("Frame", G2L["135"]);
G2L["136"]["BorderSizePixel"] = 0;
G2L["136"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["136"]["ClipsDescendants"] = true;
G2L["136"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["136"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["136"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.Frame.Frame
G2L["137"] = Instance.new("Frame", G2L["136"]);
G2L["137"]["BorderSizePixel"] = 0;
G2L["137"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["137"]["ClipsDescendants"] = true;
G2L["137"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["137"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["137"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.Frame.Frame.UICorner
G2L["138"] = Instance.new("UICorner", G2L["137"]);
G2L["138"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.UICorner
G2L["139"] = Instance.new("UICorner", G2L["135"]);
G2L["139"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame
G2L["13a"] = Instance.new("Frame", G2L["134"]);
G2L["13a"]["BorderSizePixel"] = 0;
G2L["13a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13a"]["Size"] = UDim2.new(0, 430, 0, 160);
G2L["13a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13a"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.Frame
G2L["13b"] = Instance.new("Frame", G2L["13a"]);
G2L["13b"]["BorderSizePixel"] = 0;
G2L["13b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13b"]["ClipsDescendants"] = true;
G2L["13b"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["13b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13b"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.Frame.Frame
G2L["13c"] = Instance.new("Frame", G2L["13b"]);
G2L["13c"]["BorderSizePixel"] = 0;
G2L["13c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13c"]["ClipsDescendants"] = true;
G2L["13c"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["13c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13c"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.Frame.Frame.UICorner
G2L["13d"] = Instance.new("UICorner", G2L["13c"]);
G2L["13d"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Frame.UICorner
G2L["13e"] = Instance.new("UICorner", G2L["13a"]);
G2L["13e"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Players.Frame.TextLabel
G2L["13f"] = Instance.new("TextLabel", G2L["134"]);
G2L["13f"]["TextWrapped"] = true;
G2L["13f"]["ZIndex"] = 2;
G2L["13f"]["BorderSizePixel"] = 0;
G2L["13f"]["TextSize"] = 15;
G2L["13f"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13f"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["13f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13f"]["BackgroundTransparency"] = 1;
G2L["13f"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["13f"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13f"]["Text"] = [[Players]];


-- StarterGui.GuiMain.Main.Holder.Players.Frame.TextLabel.UIGradient
G2L["140"] = Instance.new("UIGradient", G2L["13f"]);



-- StarterGui.GuiMain.Main.Holder.Players.Frame.Players
G2L["141"] = Instance.new("ScrollingFrame", G2L["134"]);
G2L["141"]["Active"] = true;
G2L["141"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["141"]["BorderSizePixel"] = 0;
G2L["141"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["141"]["TopImage"] = [[rbxassetid://13386572]];
G2L["141"]["MidImage"] = [[rbxassetid://13386572]];
G2L["141"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["141"]["Name"] = [[Players]];
G2L["141"]["ScrollBarImageTransparency"] = 0.9;
G2L["141"]["BottomImage"] = [[rbxassetid://13386572]];
G2L["141"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["141"]["Size"] = UDim2.new(1, 0, 0, 140);
G2L["141"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["141"]["Position"] = UDim2.new(0, 0, 0, 20);
G2L["141"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["141"]["ScrollBarThickness"] = 5;
G2L["141"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Players.UIListLayout
G2L["142"] = Instance.new("UIListLayout", G2L["141"]);
G2L["142"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.TextLabel
G2L["143"] = Instance.new("TextLabel", G2L["134"]);
G2L["143"]["TextWrapped"] = true;
G2L["143"]["ZIndex"] = 2;
G2L["143"]["BorderSizePixel"] = 0;
G2L["143"]["TextSize"] = 15;
G2L["143"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["143"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["143"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["143"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["143"]["BackgroundTransparency"] = 1;
G2L["143"]["Size"] = UDim2.new(1, 0, 0, 20);
G2L["143"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["143"]["Text"] = [[Options]];
G2L["143"]["Position"] = UDim2.new(0, 0, 0, 170);


-- StarterGui.GuiMain.Main.Holder.Players.Frame.TextLabel.UIGradient
G2L["144"] = Instance.new("UIGradient", G2L["143"]);



-- StarterGui.GuiMain.Main.Holder.Players.Frame.Options
G2L["145"] = Instance.new("ScrollingFrame", G2L["134"]);
G2L["145"]["Active"] = true;
G2L["145"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["145"]["BorderSizePixel"] = 0;
G2L["145"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["145"]["TopImage"] = [[rbxassetid://13386572]];
G2L["145"]["MidImage"] = [[rbxassetid://13386572]];
G2L["145"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["145"]["Name"] = [[Options]];
G2L["145"]["ScrollBarImageTransparency"] = 0.9;
G2L["145"]["BottomImage"] = [[rbxassetid://13386572]];
G2L["145"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["145"]["Size"] = UDim2.new(1, 0, 0, 190);
G2L["145"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["145"]["Position"] = UDim2.new(0, 0, 0, 190);
G2L["145"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["145"]["ScrollBarThickness"] = 5;
G2L["145"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.Options.UIListLayout
G2L["146"] = Instance.new("UIListLayout", G2L["145"]);
G2L["146"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.GuiMain.Main.Holder.Players.Frame.UICorner
G2L["147"] = Instance.new("UICorner", G2L["134"]);
G2L["147"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Home
G2L["148"] = Instance.new("Frame", G2L["8d"]);
G2L["148"]["ZIndex"] = 0;
G2L["148"]["BorderSizePixel"] = 0;
G2L["148"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["148"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["148"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["148"]["Name"] = [[Home]];
G2L["148"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Home.Frame
G2L["149"] = Instance.new("Frame", G2L["148"]);
G2L["149"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["149"]["Size"] = UDim2.new(0, 430, 0, 380);
G2L["149"]["Position"] = UDim2.new(0, 10, 0, 10);
G2L["149"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["149"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Home.Frame.Frame
G2L["14a"] = Instance.new("Frame", G2L["149"]);
G2L["14a"]["BorderSizePixel"] = 0;
G2L["14a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14a"]["Size"] = UDim2.new(0, 430, 0, 270);
G2L["14a"]["Position"] = UDim2.new(0, 0, 0.28947, 0);
G2L["14a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14a"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Home.Frame.Frame.Frame
G2L["14b"] = Instance.new("Frame", G2L["14a"]);
G2L["14b"]["BorderSizePixel"] = 0;
G2L["14b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14b"]["ClipsDescendants"] = true;
G2L["14b"]["Size"] = UDim2.new(1, 0, 0, 35);
G2L["14b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14b"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Home.Frame.Frame.Frame.Frame
G2L["14c"] = Instance.new("Frame", G2L["14b"]);
G2L["14c"]["BorderSizePixel"] = 0;
G2L["14c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14c"]["ClipsDescendants"] = true;
G2L["14c"]["Size"] = UDim2.new(1, 0, 2, 0);
G2L["14c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14c"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Home.Frame.Frame.Frame.Frame.UICorner
G2L["14d"] = Instance.new("UICorner", G2L["14c"]);
G2L["14d"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Home.Frame.Frame.UICorner
G2L["14e"] = Instance.new("UICorner", G2L["14a"]);
G2L["14e"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Home.Frame.TextLabel
G2L["14f"] = Instance.new("TextLabel", G2L["149"]);
G2L["14f"]["TextWrapped"] = true;
G2L["14f"]["ZIndex"] = 2;
G2L["14f"]["BorderSizePixel"] = 0;
G2L["14f"]["TextSize"] = 16;
G2L["14f"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14f"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14f"]["BackgroundTransparency"] = 1;
G2L["14f"]["RichText"] = true;
G2L["14f"]["Size"] = UDim2.new(1, 0, 0, 35);
G2L["14f"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14f"]["Text"] = [[Severside's]];
G2L["14f"]["Position"] = UDim2.new(0, 0, 0, 110);


-- StarterGui.GuiMain.Main.Holder.Home.Frame.TextLabel.UIGradient
G2L["150"] = Instance.new("UIGradient", G2L["14f"]);



-- StarterGui.GuiMain.Main.Holder.Home.Frame.ScrollingFrame
G2L["151"] = Instance.new("ScrollingFrame", G2L["149"]);
G2L["151"]["Active"] = true;
G2L["151"]["BorderSizePixel"] = 0;
G2L["151"]["TopImage"] = [[rbxassetid://158362307]];
G2L["151"]["MidImage"] = [[rbxassetid://13386572]];
G2L["151"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["151"]["ScrollBarImageTransparency"] = 0.9;
G2L["151"]["BottomImage"] = [[rbxassetid://158362221]];
G2L["151"]["Size"] = UDim2.new(1, 0, 0, 235);
G2L["151"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["151"]["Position"] = UDim2.new(0, 0, 0, 145);
G2L["151"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["151"]["ScrollBarThickness"] = 5;
G2L["151"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Home.Frame.ScrollingFrame.UIListLayout
G2L["152"] = Instance.new("UIListLayout", G2L["151"]);
G2L["152"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.GuiMain.Main.Holder.Home.Frame.You
G2L["153"] = Instance.new("ImageLabel", G2L["149"]);
G2L["153"]["ZIndex"] = 2;
G2L["153"]["BorderSizePixel"] = 0;
G2L["153"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["153"]["Size"] = UDim2.new(0, 100, 0, 100);
G2L["153"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["153"]["BackgroundTransparency"] = 0.9;
G2L["153"]["Name"] = [[You]];


-- StarterGui.GuiMain.Main.Holder.Home.Frame.You.UICorner
G2L["154"] = Instance.new("UICorner", G2L["153"]);
G2L["154"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Home.Frame.You.TextBox
G2L["155"] = Instance.new("TextBox", G2L["153"]);
G2L["155"]["Active"] = false;
G2L["155"]["BorderSizePixel"] = 0;
G2L["155"]["TextEditable"] = false;
G2L["155"]["TextWrapped"] = true;
G2L["155"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["155"]["TextSize"] = 16;
G2L["155"]["ShowNativeInput"] = false;
G2L["155"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["155"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["155"]["RichText"] = true;
G2L["155"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["155"]["MultiLine"] = true;
G2L["155"]["ClearTextOnFocus"] = false;
G2L["155"]["Size"] = UDim2.new(0, 320, 0, 100);
G2L["155"]["Position"] = UDim2.new(0, 110, 0, 0);
G2L["155"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["155"]["Text"] = [[]];
G2L["155"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Home.Frame.You.TextBox.UICorner
G2L["156"] = Instance.new("UICorner", G2L["155"]);
G2L["156"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Home.Frame.UICorner
G2L["157"] = Instance.new("UICorner", G2L["149"]);
G2L["157"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Music
G2L["158"] = Instance.new("Frame", G2L["8d"]);
G2L["158"]["ZIndex"] = 0;
G2L["158"]["BorderSizePixel"] = 0;
G2L["158"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["158"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["158"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["158"]["Name"] = [[Music]];
G2L["158"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Music.Frame
G2L["159"] = Instance.new("Frame", G2L["158"]);
G2L["159"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["159"]["Size"] = UDim2.new(0, 430, 0, 380);
G2L["159"]["Position"] = UDim2.new(0, 10, 0, 10);
G2L["159"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["159"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Background
G2L["15a"] = Instance.new("Frame", G2L["159"]);
G2L["15a"]["ZIndex"] = 2;
G2L["15a"]["BorderSizePixel"] = 0;
G2L["15a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15a"]["ClipsDescendants"] = true;
G2L["15a"]["Size"] = UDim2.new(1, 0, 0, 60);
G2L["15a"]["Position"] = UDim2.new(0, 0, 1, -60);
G2L["15a"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["15a"]["Name"] = [[Background]];
G2L["15a"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Background.Frame
G2L["15b"] = Instance.new("Frame", G2L["15a"]);
G2L["15b"]["BorderSizePixel"] = 0;
G2L["15b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15b"]["Size"] = UDim2.new(1, 0, 0, 68);
G2L["15b"]["Position"] = UDim2.new(0, 0, 1, -68);
G2L["15b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15b"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Background.Frame.UICorner
G2L["15c"] = Instance.new("UICorner", G2L["15b"]);
G2L["15c"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.MusicId
G2L["15d"] = Instance.new("TextBox", G2L["159"]);
G2L["15d"]["Name"] = [[MusicId]];
G2L["15d"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15d"]["ZIndex"] = 3;
G2L["15d"]["BorderSizePixel"] = 0;
G2L["15d"]["TextTransparency"] = 0.5;
G2L["15d"]["TextSize"] = 16;
G2L["15d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15d"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15d"]["ClearTextOnFocus"] = false;
G2L["15d"]["PlaceholderText"] = [[Input]];
G2L["15d"]["Size"] = UDim2.new(1, 0, 0, 30);
G2L["15d"]["Position"] = UDim2.new(0, 0, 1, -60);
G2L["15d"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["15d"]["Text"] = [[]];
G2L["15d"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Title
G2L["15e"] = Instance.new("TextLabel", G2L["159"]);
G2L["15e"]["BorderSizePixel"] = 0;
G2L["15e"]["TextSize"] = 16;
G2L["15e"]["TextTransparency"] = 0.5;
G2L["15e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15e"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["15e"]["BackgroundTransparency"] = 1;
G2L["15e"]["Size"] = UDim2.new(1, 0, 0, 30);
G2L["15e"]["ClipsDescendants"] = true;
G2L["15e"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["15e"]["Text"] = [[Song Title]];
G2L["15e"]["Name"] = [[Title]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Title.Frame
G2L["15f"] = Instance.new("Frame", G2L["15e"]);
G2L["15f"]["BorderSizePixel"] = 0;
G2L["15f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15f"]["Size"] = UDim2.new(1, 0, 1, 8);
G2L["15f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15f"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Title.Frame.UICorner
G2L["160"] = Instance.new("UICorner", G2L["15f"]);
G2L["160"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Title.Color
G2L["161"] = Instance.new("UIGradient", G2L["15e"]);
G2L["161"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.BarsHolder
G2L["162"] = Instance.new("CanvasGroup", G2L["159"]);
G2L["162"]["ZIndex"] = 2;
G2L["162"]["BorderSizePixel"] = 0;
G2L["162"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["162"]["Size"] = UDim2.new(1, 0, 0, 290);
G2L["162"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["162"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["162"]["Name"] = [[BarsHolder]];
G2L["162"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.BarsHolder.BarsReversed
G2L["163"] = Instance.new("Frame", G2L["162"]);
G2L["163"]["BorderSizePixel"] = 0;
G2L["163"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["163"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["163"]["Size"] = UDim2.new(0.5, 0, 1, 0);
G2L["163"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["163"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["163"]["Name"] = [[BarsReversed]];
G2L["163"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.BarsHolder.BarsForward
G2L["164"] = Instance.new("Frame", G2L["162"]);
G2L["164"]["BorderSizePixel"] = 0;
G2L["164"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["164"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["164"]["Size"] = UDim2.new(0.5, 0, 1, 0);
G2L["164"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["164"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["164"]["Name"] = [[BarsForward]];
G2L["164"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.BarsHolder.UIGradient
G2L["165"] = Instance.new("UIGradient", G2L["162"]);



-- StarterGui.GuiMain.Main.Holder.Music.Frame.ScrollingFrame
G2L["166"] = Instance.new("ScrollingFrame", G2L["159"]);
G2L["166"]["Active"] = true;
G2L["166"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["166"]["BorderSizePixel"] = 0;
G2L["166"]["TopImage"] = [[rbxassetid://13623629217]];
G2L["166"]["MidImage"] = [[rbxassetid://13623629217]];
G2L["166"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["166"]["ScrollBarImageTransparency"] = 0.9;
G2L["166"]["BottomImage"] = [[rbxassetid://13623629217]];
G2L["166"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["166"]["Size"] = UDim2.new(0, 0, 0, 290);
G2L["166"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["166"]["Position"] = UDim2.new(0, 0, 0, 30);
G2L["166"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["166"]["ScrollBarThickness"] = 0;
G2L["166"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.ScrollingFrame.UIListLayout
G2L["167"] = Instance.new("UIListLayout", G2L["166"]);
G2L["167"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.ImageButton
G2L["168"] = Instance.new("ImageButton", G2L["159"]);
G2L["168"]["BorderSizePixel"] = 0;
G2L["168"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["168"]["Image"] = [[rbxassetid://11432865277]];
G2L["168"]["Size"] = UDim2.new(0, 20, 0, 20);
G2L["168"]["BackgroundTransparency"] = 1;
G2L["168"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["168"]["Position"] = UDim2.new(0, 5, 0, 5);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input
G2L["169"] = Instance.new("Frame", G2L["159"]);
G2L["169"]["ZIndex"] = 2;
G2L["169"]["BorderSizePixel"] = 0;
G2L["169"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["169"]["ClipsDescendants"] = true;
G2L["169"]["Size"] = UDim2.new(1, 0, 0, 30);
G2L["169"]["Position"] = UDim2.new(0, 0, 1, -30);
G2L["169"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["169"]["Name"] = [[Input]];
G2L["169"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Resume
G2L["16a"] = Instance.new("TextButton", G2L["169"]);
G2L["16a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16a"]["TextTransparency"] = 0.5;
G2L["16a"]["TextSize"] = 16;
G2L["16a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16a"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16a"]["ZIndex"] = 3;
G2L["16a"]["Size"] = UDim2.new(0, 50, 1, 0);
G2L["16a"]["BackgroundTransparency"] = 1;
G2L["16a"]["Name"] = [[Resume]];
G2L["16a"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["16a"]["Text"] = [[Resume]];
G2L["16a"]["Position"] = UDim2.new(0.868, 0, 0, 0);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Resume.Color
G2L["16b"] = Instance.new("UIGradient", G2L["16a"]);
G2L["16b"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Loop
G2L["16c"] = Instance.new("TextButton", G2L["169"]);
G2L["16c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16c"]["TextTransparency"] = 0.5;
G2L["16c"]["TextSize"] = 16;
G2L["16c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16c"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16c"]["ZIndex"] = 3;
G2L["16c"]["Size"] = UDim2.new(0, 32, 1, 0);
G2L["16c"]["BackgroundTransparency"] = 1;
G2L["16c"]["Name"] = [[Loop]];
G2L["16c"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["16c"]["Text"] = [[Loop]];
G2L["16c"]["Position"] = UDim2.new(0.868, 0, 0, 0);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Loop.Color
G2L["16d"] = Instance.new("UIGradient", G2L["16c"]);
G2L["16d"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Stop
G2L["16e"] = Instance.new("TextButton", G2L["169"]);
G2L["16e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16e"]["TextTransparency"] = 0.5;
G2L["16e"]["TextSize"] = 16;
G2L["16e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["16e"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["16e"]["ZIndex"] = 3;
G2L["16e"]["Size"] = UDim2.new(0, 28, 1, 0);
G2L["16e"]["BackgroundTransparency"] = 1;
G2L["16e"]["Name"] = [[Stop]];
G2L["16e"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["16e"]["Text"] = [[Stop]];
G2L["16e"]["Position"] = UDim2.new(0.868, 0, 0, 0);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Stop.Color
G2L["16f"] = Instance.new("UIGradient", G2L["16e"]);
G2L["16f"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Restart
G2L["170"] = Instance.new("TextButton", G2L["169"]);
G2L["170"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["170"]["TextTransparency"] = 0.5;
G2L["170"]["TextSize"] = 16;
G2L["170"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["170"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["170"]["ZIndex"] = 3;
G2L["170"]["Size"] = UDim2.new(0, 46, 1, 0);
G2L["170"]["BackgroundTransparency"] = 1;
G2L["170"]["Name"] = [[Restart]];
G2L["170"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["170"]["Text"] = [[Restart]];
G2L["170"]["Position"] = UDim2.new(0.868, 0, 0, 0);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Restart.Color
G2L["171"] = Instance.new("UIGradient", G2L["170"]);
G2L["171"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Pause
G2L["172"] = Instance.new("TextButton", G2L["169"]);
G2L["172"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["172"]["TextTransparency"] = 0.5;
G2L["172"]["TextSize"] = 16;
G2L["172"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["172"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["172"]["ZIndex"] = 3;
G2L["172"]["Size"] = UDim2.new(0, 39, 1, 0);
G2L["172"]["BackgroundTransparency"] = 1;
G2L["172"]["Name"] = [[Pause]];
G2L["172"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["172"]["Text"] = [[Pause]];
G2L["172"]["Position"] = UDim2.new(0.868, 0, 0, 0);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Pause.Color
G2L["173"] = Instance.new("UIGradient", G2L["172"]);
G2L["173"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Play
G2L["174"] = Instance.new("TextButton", G2L["169"]);
G2L["174"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["174"]["TextTransparency"] = 0.5;
G2L["174"]["TextSize"] = 16;
G2L["174"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["174"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["174"]["ZIndex"] = 3;
G2L["174"]["Size"] = UDim2.new(0, 27, 1, 0);
G2L["174"]["BackgroundTransparency"] = 1;
G2L["174"]["Name"] = [[Play]];
G2L["174"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["174"]["Text"] = [[Play]];
G2L["174"]["Position"] = UDim2.new(0.737, 0, 0, 0);


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.Play.Color
G2L["175"] = Instance.new("UIGradient", G2L["174"]);
G2L["175"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Music.Frame.Input.UIListLayout
G2L["176"] = Instance.new("UIListLayout", G2L["169"]);
G2L["176"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["176"]["Padding"] = UDim.new(0, 30);
G2L["176"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
G2L["176"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
G2L["176"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Music.Frame.UICorner
G2L["177"] = Instance.new("UICorner", G2L["159"]);
G2L["177"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Logs
G2L["178"] = Instance.new("Frame", G2L["8d"]);
G2L["178"]["ZIndex"] = 0;
G2L["178"]["BorderSizePixel"] = 0;
G2L["178"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["178"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["178"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["178"]["Name"] = [[Logs]];
G2L["178"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs
G2L["179"] = Instance.new("Frame", G2L["178"]);
G2L["179"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["179"]["Size"] = UDim2.new(0, 430, 0, 30);
G2L["179"]["Position"] = UDim2.new(0, 10, 0, 10);
G2L["179"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["179"]["Name"] = [[Tabs]];
G2L["179"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Join
G2L["17a"] = Instance.new("TextButton", G2L["179"]);
G2L["17a"]["BorderSizePixel"] = 0;
G2L["17a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["17a"]["TextTransparency"] = 1;
G2L["17a"]["AutoButtonColor"] = false;
G2L["17a"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["17a"]["TextSize"] = 19;
G2L["17a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17a"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17a"]["ZIndex"] = 6;
G2L["17a"]["Size"] = UDim2.new(0, 52, 0, 30);
G2L["17a"]["BackgroundTransparency"] = 1;
G2L["17a"]["Name"] = [[Join]];
G2L["17a"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17a"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Join.Shadow
G2L["17b"] = Instance.new("ImageLabel", G2L["17a"]);
G2L["17b"]["BorderSizePixel"] = 0;
G2L["17b"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["17b"]["SliceScale"] = 0.096;
G2L["17b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17b"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["17b"]["ImageTransparency"] = 1;
G2L["17b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["17b"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["17b"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["17b"]["BackgroundTransparency"] = 1;
G2L["17b"]["Name"] = [[Shadow]];
G2L["17b"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Join.Shadow.UIGradient
G2L["17c"] = Instance.new("UIGradient", G2L["17b"]);



-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Join.TextLabel
G2L["17d"] = Instance.new("TextLabel", G2L["17a"]);
G2L["17d"]["BorderSizePixel"] = 0;
G2L["17d"]["TextSize"] = 17;
G2L["17d"]["TextTransparency"] = 0.5;
G2L["17d"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17d"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17d"]["BackgroundTransparency"] = 1;
G2L["17d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["17d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["17d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17d"]["Text"] = [[Joins]];
G2L["17d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Join.Color
G2L["17e"] = Instance.new("UIGradient", G2L["17a"]);
G2L["17e"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Join.UICorner
G2L["17f"] = Instance.new("UICorner", G2L["17a"]);
G2L["17f"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Chat
G2L["180"] = Instance.new("TextButton", G2L["179"]);
G2L["180"]["BorderSizePixel"] = 0;
G2L["180"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["180"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["180"]["TextTransparency"] = 1;
G2L["180"]["AutoButtonColor"] = false;
G2L["180"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["180"]["TextSize"] = 19;
G2L["180"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["180"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["180"]["ZIndex"] = 6;
G2L["180"]["Size"] = UDim2.new(0, 48, 0, 30);
G2L["180"]["BackgroundTransparency"] = 1;
G2L["180"]["Name"] = [[Chat]];
G2L["180"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["180"]["Text"] = [[]];


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Chat.Shadow
G2L["181"] = Instance.new("ImageLabel", G2L["180"]);
G2L["181"]["BorderSizePixel"] = 0;
G2L["181"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["181"]["SliceScale"] = 0.096;
G2L["181"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["181"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["181"]["ImageTransparency"] = 1;
G2L["181"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["181"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["181"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["181"]["BackgroundTransparency"] = 1;
G2L["181"]["Name"] = [[Shadow]];
G2L["181"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Chat.Shadow.UIGradient
G2L["182"] = Instance.new("UIGradient", G2L["181"]);



-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Chat.TextLabel
G2L["183"] = Instance.new("TextLabel", G2L["180"]);
G2L["183"]["BorderSizePixel"] = 0;
G2L["183"]["TextSize"] = 17;
G2L["183"]["TextTransparency"] = 0.5;
G2L["183"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["183"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["183"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["183"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["183"]["BackgroundTransparency"] = 1;
G2L["183"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["183"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["183"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["183"]["Text"] = [[Chat]];
G2L["183"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Chat.Color
G2L["184"] = Instance.new("UIGradient", G2L["180"]);
G2L["184"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Chat.UICorner
G2L["185"] = Instance.new("UICorner", G2L["180"]);
G2L["185"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Output
G2L["186"] = Instance.new("TextButton", G2L["179"]);
G2L["186"]["Interactable"] = false;
G2L["186"]["BorderSizePixel"] = 0;
G2L["186"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["186"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["186"]["TextTransparency"] = 1;
G2L["186"]["AutoButtonColor"] = false;
G2L["186"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["186"]["TextSize"] = 19;
G2L["186"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["186"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["186"]["ZIndex"] = 6;
G2L["186"]["Size"] = UDim2.new(0, 62, 0, 30);
G2L["186"]["BackgroundTransparency"] = 1;
G2L["186"]["Name"] = [[Output]];
G2L["186"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["186"]["Text"] = [[]];
G2L["186"]["Visible"] = false;


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Output.Shadow
G2L["187"] = Instance.new("ImageLabel", G2L["186"]);
G2L["187"]["BorderSizePixel"] = 0;
G2L["187"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["187"]["SliceScale"] = 0.096;
G2L["187"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["187"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["187"]["ImageTransparency"] = 1;
G2L["187"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["187"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["187"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["187"]["BackgroundTransparency"] = 1;
G2L["187"]["Name"] = [[Shadow]];
G2L["187"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Output.Shadow.UIGradient
G2L["188"] = Instance.new("UIGradient", G2L["187"]);



-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Output.TextLabel
G2L["189"] = Instance.new("TextLabel", G2L["186"]);
G2L["189"]["BorderSizePixel"] = 0;
G2L["189"]["TextSize"] = 17;
G2L["189"]["TextTransparency"] = 0.5;
G2L["189"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["189"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["189"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["189"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["189"]["BackgroundTransparency"] = 1;
G2L["189"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["189"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["189"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["189"]["Text"] = [[Output]];
G2L["189"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Output.Color
G2L["18a"] = Instance.new("UIGradient", G2L["186"]);
G2L["18a"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.Output.UICorner
G2L["18b"] = Instance.new("UICorner", G2L["186"]);
G2L["18b"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.UIListLayout
G2L["18c"] = Instance.new("UIListLayout", G2L["179"]);
G2L["18c"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["18c"]["Padding"] = UDim.new(0, 4);
G2L["18c"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
G2L["18c"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Logs.Tabs.UICorner
G2L["18d"] = Instance.new("UICorner", G2L["179"]);
G2L["18d"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Logs.ScrollingFrame
G2L["18e"] = Instance.new("ScrollingFrame", G2L["178"]);
G2L["18e"]["Active"] = true;
G2L["18e"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["18e"]["ZIndex"] = 3;
G2L["18e"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["18e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18e"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["18e"]["Size"] = UDim2.new(0, 430, 0, 300);
G2L["18e"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18e"]["Position"] = UDim2.new(0, 10, 0, 50);
G2L["18e"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["18e"]["ScrollBarThickness"] = 0;
G2L["18e"]["BackgroundTransparency"] = 1;
-- Attributes
G2L["18e"]:SetAttribute([[Page]], [[]]);


-- StarterGui.GuiMain.Main.Holder.Logs.ScrollingFrame.UIListLayout
G2L["18f"] = Instance.new("UIListLayout", G2L["18e"]);
G2L["18f"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["18f"]["Padding"] = UDim.new(0, 5);


-- StarterGui.GuiMain.Main.Holder.Logs.Frame
G2L["190"] = Instance.new("Frame", G2L["178"]);
G2L["190"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["190"]["Size"] = UDim2.new(0, 430, 0, 300);
G2L["190"]["Position"] = UDim2.new(0, 10, 0, 50);
G2L["190"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["190"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Logs.Frame.UICorner
G2L["191"] = Instance.new("UICorner", G2L["190"]);
G2L["191"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Logs.Clear
G2L["192"] = Instance.new("TextButton", G2L["178"]);
G2L["192"]["BorderSizePixel"] = 0;
G2L["192"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["192"]["TextSize"] = 21;
G2L["192"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["192"]["RichText"] = true;
G2L["192"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["192"]["ZIndex"] = 2;
G2L["192"]["Size"] = UDim2.new(0, 210, 0, 30);
G2L["192"]["BackgroundTransparency"] = 0.5;
G2L["192"]["Name"] = [[Clear]];
G2L["192"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["192"]["Text"] = [[]];
G2L["192"]["Position"] = UDim2.new(0, 10, 1, -40);


-- StarterGui.GuiMain.Main.Holder.Logs.Clear.Shadow
G2L["193"] = Instance.new("ImageLabel", G2L["192"]);
G2L["193"]["BorderSizePixel"] = 0;
G2L["193"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["193"]["SliceScale"] = 0.09;
G2L["193"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["193"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["193"]["ImageTransparency"] = 0.5;
G2L["193"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["193"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["193"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["193"]["BackgroundTransparency"] = 1;
G2L["193"]["Name"] = [[Shadow]];
G2L["193"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Clear.Shadow.UIGradient
G2L["194"] = Instance.new("UIGradient", G2L["193"]);



-- StarterGui.GuiMain.Main.Holder.Logs.Clear.TextLabel
G2L["195"] = Instance.new("TextLabel", G2L["192"]);
G2L["195"]["BorderSizePixel"] = 0;
G2L["195"]["TextSize"] = 19;
G2L["195"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["195"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["195"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["195"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["195"]["BackgroundTransparency"] = 1;
G2L["195"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["195"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["195"]["Text"] = [[Clear]];


-- StarterGui.GuiMain.Main.Holder.Logs.Clear.UICorner
G2L["196"] = Instance.new("UICorner", G2L["192"]);
G2L["196"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Logs.Clear.Color
G2L["197"] = Instance.new("UIGradient", G2L["192"]);
G2L["197"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Logs.Search
G2L["198"] = Instance.new("Frame", G2L["178"]);
G2L["198"]["ZIndex"] = 3;
G2L["198"]["BorderSizePixel"] = 0;
G2L["198"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["198"]["Size"] = UDim2.new(0, 210, 0, 30);
G2L["198"]["Position"] = UDim2.new(0.5, 5, 1, -40);
G2L["198"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["198"]["Name"] = [[Search]];
G2L["198"]["BackgroundTransparency"] = 0.5;


-- StarterGui.GuiMain.Main.Holder.Logs.Search.Shadow
G2L["199"] = Instance.new("ImageLabel", G2L["198"]);
G2L["199"]["BorderSizePixel"] = 0;
G2L["199"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["199"]["SliceScale"] = 0.09;
G2L["199"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["199"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["199"]["ImageTransparency"] = 0.5;
G2L["199"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["199"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["199"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["199"]["BackgroundTransparency"] = 1;
G2L["199"]["Name"] = [[Shadow]];
G2L["199"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Logs.Search.Shadow.UIGradient
G2L["19a"] = Instance.new("UIGradient", G2L["199"]);



-- StarterGui.GuiMain.Main.Holder.Logs.Search.Search
G2L["19b"] = Instance.new("TextBox", G2L["198"]);
G2L["19b"]["Name"] = [[Search]];
G2L["19b"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19b"]["ZIndex"] = 4;
G2L["19b"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19b"]["TextSize"] = 19;
G2L["19b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19b"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19b"]["PlaceholderText"] = [[Search]];
G2L["19b"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["19b"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["19b"]["Text"] = [[Search]];
G2L["19b"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Logs.Search.Color
G2L["19c"] = Instance.new("UIGradient", G2L["198"]);
G2L["19c"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Logs.Search.UICorner
G2L["19d"] = Instance.new("UICorner", G2L["198"]);
G2L["19d"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.PageSystem
G2L["19e"] = Instance.new("UIPageLayout", G2L["8d"]);
G2L["19e"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["19e"]["EasingStyle"] = Enum.EasingStyle.Cubic;
G2L["19e"]["GamepadInputEnabled"] = false;
G2L["19e"]["EasingDirection"] = Enum.EasingDirection.InOut;
G2L["19e"]["FillDirection"] = Enum.FillDirection.Vertical;
G2L["19e"]["TouchInputEnabled"] = false;
G2L["19e"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
G2L["19e"]["Name"] = [[PageSystem]];
G2L["19e"]["ScrollWheelInputEnabled"] = false;


-- StarterGui.GuiMain.Main.Holder.Hub
G2L["19f"] = Instance.new("Frame", G2L["8d"]);
G2L["19f"]["ZIndex"] = 0;
G2L["19f"]["BorderSizePixel"] = 0;
G2L["19f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["19f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["19f"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["19f"]["Name"] = [[Hub]];
G2L["19f"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs
G2L["1a0"] = Instance.new("Frame", G2L["19f"]);
G2L["1a0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a0"]["Size"] = UDim2.new(0, 430, 0, 30);
G2L["1a0"]["Position"] = UDim2.new(0, 10, 0, 10);
G2L["1a0"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1a0"]["Name"] = [[Tabs]];
G2L["1a0"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Vehicles
G2L["1a1"] = Instance.new("TextButton", G2L["1a0"]);
G2L["1a1"]["BorderSizePixel"] = 0;
G2L["1a1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a1"]["TextTransparency"] = 1;
G2L["1a1"]["AutoButtonColor"] = false;
G2L["1a1"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["1a1"]["TextSize"] = 19;
G2L["1a1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a1"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a1"]["ZIndex"] = 6;
G2L["1a1"]["Size"] = UDim2.new(0, 72, 0, 30);
G2L["1a1"]["BackgroundTransparency"] = 1;
G2L["1a1"]["Name"] = [[Vehicles]];
G2L["1a1"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a1"]["Text"] = [[  Vehicles]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Vehicles.Shadow
G2L["1a2"] = Instance.new("ImageLabel", G2L["1a1"]);
G2L["1a2"]["BorderSizePixel"] = 0;
G2L["1a2"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1a2"]["SliceScale"] = 0.096;
G2L["1a2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a2"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1a2"]["ImageTransparency"] = 1;
G2L["1a2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1a2"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1a2"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1a2"]["BackgroundTransparency"] = 1;
G2L["1a2"]["Name"] = [[Shadow]];
G2L["1a2"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Vehicles.Shadow.UIGradient
G2L["1a3"] = Instance.new("UIGradient", G2L["1a2"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Vehicles.TextLabel
G2L["1a4"] = Instance.new("TextLabel", G2L["1a1"]);
G2L["1a4"]["BorderSizePixel"] = 0;
G2L["1a4"]["TextSize"] = 17;
G2L["1a4"]["TextTransparency"] = 0.5;
G2L["1a4"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a4"]["BackgroundTransparency"] = 1;
G2L["1a4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1a4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a4"]["Text"] = [[Vehicles]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Vehicles.Color
G2L["1a5"] = Instance.new("UIGradient", G2L["1a1"]);
G2L["1a5"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Vehicles.UICorner
G2L["1a6"] = Instance.new("UICorner", G2L["1a1"]);
G2L["1a6"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Utilities
G2L["1a7"] = Instance.new("TextButton", G2L["1a0"]);
G2L["1a7"]["Interactable"] = false;
G2L["1a7"]["BorderSizePixel"] = 0;
G2L["1a7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1a7"]["TextTransparency"] = 1;
G2L["1a7"]["AutoButtonColor"] = false;
G2L["1a7"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["1a7"]["TextSize"] = 19;
G2L["1a7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a7"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1a7"]["ZIndex"] = 6;
G2L["1a7"]["Size"] = UDim2.new(0, 66, 0, 30);
G2L["1a7"]["BackgroundTransparency"] = 1;
G2L["1a7"]["Name"] = [[Utilities]];
G2L["1a7"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a7"]["Text"] = [[  Utilities]];
G2L["1a7"]["Visible"] = false;


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Utilities.Shadow
G2L["1a8"] = Instance.new("ImageLabel", G2L["1a7"]);
G2L["1a8"]["BorderSizePixel"] = 0;
G2L["1a8"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1a8"]["SliceScale"] = 0.096;
G2L["1a8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a8"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1a8"]["ImageTransparency"] = 1;
G2L["1a8"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1a8"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1a8"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1a8"]["BackgroundTransparency"] = 1;
G2L["1a8"]["Name"] = [[Shadow]];
G2L["1a8"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Utilities.Shadow.UIGradient
G2L["1a9"] = Instance.new("UIGradient", G2L["1a8"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Utilities.TextLabel
G2L["1aa"] = Instance.new("TextLabel", G2L["1a7"]);
G2L["1aa"]["BorderSizePixel"] = 0;
G2L["1aa"]["TextSize"] = 17;
G2L["1aa"]["TextTransparency"] = 0.5;
G2L["1aa"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1aa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1aa"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1aa"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1aa"]["BackgroundTransparency"] = 1;
G2L["1aa"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1aa"]["Text"] = [[Utilities]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Utilities.Color
G2L["1ab"] = Instance.new("UIGradient", G2L["1a7"]);
G2L["1ab"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Utilities.UICorner
G2L["1ac"] = Instance.new("UICorner", G2L["1a7"]);
G2L["1ac"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Scripts
G2L["1ad"] = Instance.new("TextButton", G2L["1a0"]);
G2L["1ad"]["BorderSizePixel"] = 0;
G2L["1ad"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ad"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1ad"]["TextTransparency"] = 1;
G2L["1ad"]["AutoButtonColor"] = false;
G2L["1ad"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["1ad"]["TextSize"] = 19;
G2L["1ad"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ad"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ad"]["ZIndex"] = 6;
G2L["1ad"]["Size"] = UDim2.new(0, 62, 0, 30);
G2L["1ad"]["BackgroundTransparency"] = 1;
G2L["1ad"]["Name"] = [[Scripts]];
G2L["1ad"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ad"]["Text"] = [[  Scripts]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Scripts.Shadow
G2L["1ae"] = Instance.new("ImageLabel", G2L["1ad"]);
G2L["1ae"]["BorderSizePixel"] = 0;
G2L["1ae"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1ae"]["SliceScale"] = 0.096;
G2L["1ae"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ae"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1ae"]["ImageTransparency"] = 1;
G2L["1ae"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1ae"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1ae"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1ae"]["BackgroundTransparency"] = 1;
G2L["1ae"]["Name"] = [[Shadow]];
G2L["1ae"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Scripts.Shadow.UIGradient
G2L["1af"] = Instance.new("UIGradient", G2L["1ae"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Scripts.TextLabel
G2L["1b0"] = Instance.new("TextLabel", G2L["1ad"]);
G2L["1b0"]["BorderSizePixel"] = 0;
G2L["1b0"]["TextSize"] = 17;
G2L["1b0"]["TextTransparency"] = 0.5;
G2L["1b0"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b0"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b0"]["BackgroundTransparency"] = 1;
G2L["1b0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1b0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b0"]["Text"] = [[Scripts]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Scripts.Color
G2L["1b1"] = Instance.new("UIGradient", G2L["1ad"]);
G2L["1b1"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Scripts.UICorner
G2L["1b2"] = Instance.new("UICorner", G2L["1ad"]);
G2L["1b2"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Maps
G2L["1b3"] = Instance.new("TextButton", G2L["1a0"]);
G2L["1b3"]["BorderSizePixel"] = 0;
G2L["1b3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b3"]["TextTransparency"] = 1;
G2L["1b3"]["AutoButtonColor"] = false;
G2L["1b3"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["1b3"]["TextSize"] = 19;
G2L["1b3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b3"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b3"]["ZIndex"] = 6;
G2L["1b3"]["Size"] = UDim2.new(0, 52, 0, 30);
G2L["1b3"]["BackgroundTransparency"] = 1;
G2L["1b3"]["Name"] = [[Maps]];
G2L["1b3"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b3"]["Text"] = [[  Maps]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Maps.Shadow
G2L["1b4"] = Instance.new("ImageLabel", G2L["1b3"]);
G2L["1b4"]["BorderSizePixel"] = 0;
G2L["1b4"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1b4"]["SliceScale"] = 0.096;
G2L["1b4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b4"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1b4"]["ImageTransparency"] = 1;
G2L["1b4"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1b4"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1b4"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1b4"]["BackgroundTransparency"] = 1;
G2L["1b4"]["Name"] = [[Shadow]];
G2L["1b4"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Maps.Shadow.UIGradient
G2L["1b5"] = Instance.new("UIGradient", G2L["1b4"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Maps.TextLabel
G2L["1b6"] = Instance.new("TextLabel", G2L["1b3"]);
G2L["1b6"]["BorderSizePixel"] = 0;
G2L["1b6"]["TextSize"] = 17;
G2L["1b6"]["TextTransparency"] = 0.5;
G2L["1b6"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b6"]["BackgroundTransparency"] = 1;
G2L["1b6"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1b6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b6"]["Text"] = [[Maps]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Maps.Color
G2L["1b7"] = Instance.new("UIGradient", G2L["1b3"]);
G2L["1b7"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Maps.UICorner
G2L["1b8"] = Instance.new("UICorner", G2L["1b3"]);
G2L["1b8"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Hubs
G2L["1b9"] = Instance.new("TextButton", G2L["1a0"]);
G2L["1b9"]["Interactable"] = false;
G2L["1b9"]["BorderSizePixel"] = 0;
G2L["1b9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b9"]["TextTransparency"] = 1;
G2L["1b9"]["AutoButtonColor"] = false;
G2L["1b9"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["1b9"]["TextSize"] = 19;
G2L["1b9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b9"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b9"]["ZIndex"] = 6;
G2L["1b9"]["Size"] = UDim2.new(0, 50, 0, 30);
G2L["1b9"]["BackgroundTransparency"] = 1;
G2L["1b9"]["Name"] = [[Hubs]];
G2L["1b9"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b9"]["Text"] = [[  Hubs]];
G2L["1b9"]["Visible"] = false;


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Hubs.Shadow
G2L["1ba"] = Instance.new("ImageLabel", G2L["1b9"]);
G2L["1ba"]["BorderSizePixel"] = 0;
G2L["1ba"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1ba"]["SliceScale"] = 0.096;
G2L["1ba"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ba"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1ba"]["ImageTransparency"] = 1;
G2L["1ba"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1ba"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1ba"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1ba"]["BackgroundTransparency"] = 1;
G2L["1ba"]["Name"] = [[Shadow]];
G2L["1ba"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Hubs.Shadow.UIGradient
G2L["1bb"] = Instance.new("UIGradient", G2L["1ba"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Hubs.TextLabel
G2L["1bc"] = Instance.new("TextLabel", G2L["1b9"]);
G2L["1bc"]["BorderSizePixel"] = 0;
G2L["1bc"]["TextSize"] = 17;
G2L["1bc"]["TextTransparency"] = 0.5;
G2L["1bc"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bc"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bc"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1bc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bc"]["BackgroundTransparency"] = 1;
G2L["1bc"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1bc"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1bc"]["Text"] = [[Hubs]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Hubs.Color
G2L["1bd"] = Instance.new("UIGradient", G2L["1b9"]);
G2L["1bd"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Hubs.UICorner
G2L["1be"] = Instance.new("UICorner", G2L["1b9"]);
G2L["1be"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Guns
G2L["1bf"] = Instance.new("TextButton", G2L["1a0"]);
G2L["1bf"]["BorderSizePixel"] = 0;
G2L["1bf"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bf"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1bf"]["TextTransparency"] = 1;
G2L["1bf"]["AutoButtonColor"] = false;
G2L["1bf"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["1bf"]["TextSize"] = 19;
G2L["1bf"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bf"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1bf"]["ZIndex"] = 6;
G2L["1bf"]["Size"] = UDim2.new(0, 48, 0, 30);
G2L["1bf"]["BackgroundTransparency"] = 1;
G2L["1bf"]["Name"] = [[Guns]];
G2L["1bf"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1bf"]["Text"] = [[  Guns]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Guns.Shadow
G2L["1c0"] = Instance.new("ImageLabel", G2L["1bf"]);
G2L["1c0"]["BorderSizePixel"] = 0;
G2L["1c0"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1c0"]["SliceScale"] = 0.096;
G2L["1c0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c0"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1c0"]["ImageTransparency"] = 1;
G2L["1c0"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1c0"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1c0"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1c0"]["BackgroundTransparency"] = 1;
G2L["1c0"]["Name"] = [[Shadow]];
G2L["1c0"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Guns.Shadow.UIGradient
G2L["1c1"] = Instance.new("UIGradient", G2L["1c0"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Guns.TextLabel
G2L["1c2"] = Instance.new("TextLabel", G2L["1bf"]);
G2L["1c2"]["BorderSizePixel"] = 0;
G2L["1c2"]["TextSize"] = 17;
G2L["1c2"]["TextTransparency"] = 0.5;
G2L["1c2"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c2"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c2"]["BackgroundTransparency"] = 1;
G2L["1c2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1c2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c2"]["Text"] = [[Guns]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Guns.Color
G2L["1c3"] = Instance.new("UIGradient", G2L["1bf"]);
G2L["1c3"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Guns.UICorner
G2L["1c4"] = Instance.new("UICorner", G2L["1bf"]);
G2L["1c4"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Gears
G2L["1c5"] = Instance.new("TextButton", G2L["1a0"]);
G2L["1c5"]["BorderSizePixel"] = 0;
G2L["1c5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c5"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1c5"]["TextTransparency"] = 1;
G2L["1c5"]["AutoButtonColor"] = false;
G2L["1c5"]["TextStrokeColor3"] = Color3.fromRGB(201, 201, 201);
G2L["1c5"]["TextSize"] = 19;
G2L["1c5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c5"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c5"]["ZIndex"] = 6;
G2L["1c5"]["Size"] = UDim2.new(0, 54, 0, 30);
G2L["1c5"]["BackgroundTransparency"] = 1;
G2L["1c5"]["Name"] = [[Gears]];
G2L["1c5"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c5"]["Text"] = [[  Gears]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Gears.Shadow
G2L["1c6"] = Instance.new("ImageLabel", G2L["1c5"]);
G2L["1c6"]["BorderSizePixel"] = 0;
G2L["1c6"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1c6"]["SliceScale"] = 0.096;
G2L["1c6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c6"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1c6"]["ImageTransparency"] = 1;
G2L["1c6"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1c6"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1c6"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1c6"]["BackgroundTransparency"] = 1;
G2L["1c6"]["Name"] = [[Shadow]];
G2L["1c6"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Gears.Shadow.UIGradient
G2L["1c7"] = Instance.new("UIGradient", G2L["1c6"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Gears.TextLabel
G2L["1c8"] = Instance.new("TextLabel", G2L["1c5"]);
G2L["1c8"]["BorderSizePixel"] = 0;
G2L["1c8"]["TextSize"] = 17;
G2L["1c8"]["TextTransparency"] = 0.5;
G2L["1c8"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c8"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c8"]["BackgroundTransparency"] = 1;
G2L["1c8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1c8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c8"]["Text"] = [[Gears]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Gears.Color
G2L["1c9"] = Instance.new("UIGradient", G2L["1c5"]);
G2L["1c9"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.Gears.UICorner
G2L["1ca"] = Instance.new("UICorner", G2L["1c5"]);
G2L["1ca"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.UIListLayout
G2L["1cb"] = Instance.new("UIListLayout", G2L["1a0"]);
G2L["1cb"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["1cb"]["Padding"] = UDim.new(0, 4);
G2L["1cb"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
G2L["1cb"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- StarterGui.GuiMain.Main.Holder.Hub.Tabs.UICorner
G2L["1cc"] = Instance.new("UICorner", G2L["1a0"]);
G2L["1cc"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.ScrollingFrame
G2L["1cd"] = Instance.new("ScrollingFrame", G2L["19f"]);
G2L["1cd"]["Active"] = true;
G2L["1cd"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["1cd"]["ZIndex"] = 3;
G2L["1cd"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["1cd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1cd"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["1cd"]["Size"] = UDim2.new(0, 430, 0, 300);
G2L["1cd"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1cd"]["Position"] = UDim2.new(0, 10, 0, 50);
G2L["1cd"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1cd"]["ScrollBarThickness"] = 0;
G2L["1cd"]["BackgroundTransparency"] = 1;
-- Attributes
G2L["1cd"]:SetAttribute([[Page]], [[]]);


-- StarterGui.GuiMain.Main.Holder.Hub.ScrollingFrame.UIListLayout
G2L["1ce"] = Instance.new("UIListLayout", G2L["1cd"]);
G2L["1ce"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
G2L["1ce"]["Padding"] = UDim.new(0, 5);


-- StarterGui.GuiMain.Main.Holder.Hub.Frame
G2L["1cf"] = Instance.new("Frame", G2L["19f"]);
G2L["1cf"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1cf"]["Size"] = UDim2.new(0, 430, 0, 300);
G2L["1cf"]["Position"] = UDim2.new(0, 10, 0, 50);
G2L["1cf"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1cf"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Hub.Frame.UICorner
G2L["1d0"] = Instance.new("UICorner", G2L["1cf"]);
G2L["1d0"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Username
G2L["1d1"] = Instance.new("Frame", G2L["19f"]);
G2L["1d1"]["ZIndex"] = 3;
G2L["1d1"]["BorderSizePixel"] = 0;
G2L["1d1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d1"]["Size"] = UDim2.new(0, 212, 0, 30);
G2L["1d1"]["Position"] = UDim2.new(0.022, 0, 1, -40);
G2L["1d1"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1d1"]["Name"] = [[Username]];
G2L["1d1"]["BackgroundTransparency"] = 0.5;


-- StarterGui.GuiMain.Main.Holder.Hub.Username.Shadow
G2L["1d2"] = Instance.new("ImageLabel", G2L["1d1"]);
G2L["1d2"]["BorderSizePixel"] = 0;
G2L["1d2"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1d2"]["SliceScale"] = 0.09;
G2L["1d2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d2"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1d2"]["ImageTransparency"] = 0.5;
G2L["1d2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1d2"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1d2"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1d2"]["BackgroundTransparency"] = 1;
G2L["1d2"]["Name"] = [[Shadow]];
G2L["1d2"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Username.Shadow.UIGradient
G2L["1d3"] = Instance.new("UIGradient", G2L["1d2"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Username.Username
G2L["1d4"] = Instance.new("TextBox", G2L["1d1"]);
G2L["1d4"]["Name"] = [[Username]];
G2L["1d4"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d4"]["ZIndex"] = 4;
G2L["1d4"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d4"]["TextSize"] = 19;
G2L["1d4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d4"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d4"]["PlaceholderText"] = [[Username]];
G2L["1d4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1d4"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1d4"]["Text"] = [[Username]];
G2L["1d4"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Hub.Username.Color
G2L["1d5"] = Instance.new("UIGradient", G2L["1d1"]);
G2L["1d5"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Username.UICorner
G2L["1d6"] = Instance.new("UICorner", G2L["1d1"]);
G2L["1d6"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.Search
G2L["1d7"] = Instance.new("Frame", G2L["19f"]);
G2L["1d7"]["ZIndex"] = 3;
G2L["1d7"]["BorderSizePixel"] = 0;
G2L["1d7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d7"]["Size"] = UDim2.new(0, 212, 0, 30);
G2L["1d7"]["Position"] = UDim2.new(0.505, 0, 1, -40);
G2L["1d7"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1d7"]["Name"] = [[Search]];
G2L["1d7"]["BackgroundTransparency"] = 0.5;


-- StarterGui.GuiMain.Main.Holder.Hub.Search.Shadow
G2L["1d8"] = Instance.new("ImageLabel", G2L["1d7"]);
G2L["1d8"]["BorderSizePixel"] = 0;
G2L["1d8"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1d8"]["SliceScale"] = 0.09;
G2L["1d8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d8"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1d8"]["ImageTransparency"] = 0.5;
G2L["1d8"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1d8"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1d8"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1d8"]["BackgroundTransparency"] = 1;
G2L["1d8"]["Name"] = [[Shadow]];
G2L["1d8"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Hub.Search.Shadow.UIGradient
G2L["1d9"] = Instance.new("UIGradient", G2L["1d8"]);



-- StarterGui.GuiMain.Main.Holder.Hub.Search.Search
G2L["1da"] = Instance.new("TextBox", G2L["1d7"]);
G2L["1da"]["Name"] = [[Search]];
G2L["1da"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1da"]["ZIndex"] = 4;
G2L["1da"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1da"]["TextSize"] = 19;
G2L["1da"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1da"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1da"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1da"]["PlaceholderText"] = [[Search]];
G2L["1da"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1da"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1da"]["Text"] = [[Search]];
G2L["1da"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Hub.Search.Color
G2L["1db"] = Instance.new("UIGradient", G2L["1d7"]);
G2L["1db"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Hub.Search.UICorner
G2L["1dc"] = Instance.new("UICorner", G2L["1d7"]);
G2L["1dc"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Hub.button.wav
G2L["1dd"] = Instance.new("Sound", G2L["19f"]);
G2L["1dd"]["Name"] = [[button.wav]];
G2L["1dd"]["SoundId"] = [[rbxassetid://8379220604]];


-- StarterGui.GuiMain.Main.Holder.Executer
G2L["1de"] = Instance.new("Frame", G2L["8d"]);
G2L["1de"]["Visible"] = false;
G2L["1de"]["Interactable"] = false;
G2L["1de"]["ZIndex"] = 0;
G2L["1de"]["BorderSizePixel"] = 0;
G2L["1de"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1de"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1de"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1de"]["Name"] = [[Executer]];
G2L["1de"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Executer.Frame
G2L["1df"] = Instance.new("Frame", G2L["1de"]);
G2L["1df"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1df"]["Size"] = UDim2.new(0, 430, 0, 380);
G2L["1df"]["Position"] = UDim2.new(0, 10, 0, 10);
G2L["1df"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1df"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.CodeBox
G2L["1e0"] = Instance.new("ScrollingFrame", G2L["1df"]);
G2L["1e0"]["Active"] = true;
G2L["1e0"]["ZIndex"] = 2;
G2L["1e0"]["BorderSizePixel"] = 0;
G2L["1e0"]["TopImage"] = [[rbxassetid://13386572]];
G2L["1e0"]["MidImage"] = [[rbxassetid://13386572]];
G2L["1e0"]["VerticalScrollBarInset"] = Enum.ScrollBarInset.ScrollBar;
G2L["1e0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e0"]["Name"] = [[CodeBox]];
G2L["1e0"]["ScrollBarImageTransparency"] = 0.9;
G2L["1e0"]["HorizontalScrollBarInset"] = Enum.ScrollBarInset.ScrollBar;
G2L["1e0"]["BottomImage"] = [[rbxassetid://13386572]];
G2L["1e0"]["AutomaticCanvasSize"] = Enum.AutomaticSize.XY;
G2L["1e0"]["Size"] = UDim2.new(1, 0, 0, 339);
G2L["1e0"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e0"]["ScrollBarThickness"] = 20;
G2L["1e0"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.CodeBox.Lines
G2L["1e1"] = Instance.new("TextLabel", G2L["1e0"]);
G2L["1e1"]["ZIndex"] = 4;
G2L["1e1"]["BorderSizePixel"] = 0;
G2L["1e1"]["TextSize"] = 15;
G2L["1e1"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1e1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e1"]["BackgroundTransparency"] = 1;
G2L["1e1"]["Size"] = UDim2.new(0, 20, 1, 0);
G2L["1e1"]["ClipsDescendants"] = true;
G2L["1e1"]["BorderColor3"] = Color3.fromRGB(26, 26, 26);
G2L["1e1"]["Text"] = [[1]];
G2L["1e1"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["1e1"]["Name"] = [[Lines]];


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.CodeBox.Lines.Frame
G2L["1e2"] = Instance.new("Frame", G2L["1e1"]);
G2L["1e2"]["BorderSizePixel"] = 0;
G2L["1e2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e2"]["AutomaticSize"] = Enum.AutomaticSize.Y;
G2L["1e2"]["Size"] = UDim2.new(1, 8, 1, 0);
G2L["1e2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e2"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.CodeBox.Lines.Frame.UICorner
G2L["1e3"] = Instance.new("UICorner", G2L["1e2"]);
G2L["1e3"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.CodeBox.CodeBox
G2L["1e4"] = Instance.new("TextBox", G2L["1e0"]);
G2L["1e4"]["Name"] = [[CodeBox]];
G2L["1e4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1e4"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
G2L["1e4"]["ZIndex"] = 4;
G2L["1e4"]["BorderSizePixel"] = 0;
G2L["1e4"]["TextSize"] = 15;
G2L["1e4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e4"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["1e4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e4"]["AutomaticSize"] = Enum.AutomaticSize.XY;
G2L["1e4"]["MultiLine"] = true;
G2L["1e4"]["ClearTextOnFocus"] = false;
G2L["1e4"]["Size"] = UDim2.new(1, -25, 1, 0);
G2L["1e4"]["Position"] = UDim2.new(0, 25, 0, 0);
G2L["1e4"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1e4"]["Text"] = [[]];
G2L["1e4"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.CodeBox.UICorner
G2L["1e5"] = Instance.new("UICorner", G2L["1e0"]);
G2L["1e5"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Clear
G2L["1e6"] = Instance.new("TextButton", G2L["1df"]);
G2L["1e6"]["BorderSizePixel"] = 0;
G2L["1e6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e6"]["TextSize"] = 21;
G2L["1e6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e6"]["RichText"] = true;
G2L["1e6"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e6"]["ZIndex"] = 2;
G2L["1e6"]["Size"] = UDim2.new(0, 210, 0, 30);
G2L["1e6"]["BackgroundTransparency"] = 0.5;
G2L["1e6"]["Name"] = [[Clear]];
G2L["1e6"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1e6"]["Text"] = [[]];
G2L["1e6"]["Position"] = UDim2.new(0.5, 5, 1, -30);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Clear.Shadow
G2L["1e7"] = Instance.new("ImageLabel", G2L["1e6"]);
G2L["1e7"]["BorderSizePixel"] = 0;
G2L["1e7"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1e7"]["SliceScale"] = 0.09;
G2L["1e7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e7"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1e7"]["ImageTransparency"] = 0.5;
G2L["1e7"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1e7"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1e7"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1e7"]["BackgroundTransparency"] = 1;
G2L["1e7"]["Name"] = [[Shadow]];
G2L["1e7"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Clear.Shadow.UIGradient
G2L["1e8"] = Instance.new("UIGradient", G2L["1e7"]);



-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Clear.TextLabel
G2L["1e9"] = Instance.new("TextLabel", G2L["1e6"]);
G2L["1e9"]["BorderSizePixel"] = 0;
G2L["1e9"]["TextSize"] = 19;
G2L["1e9"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e9"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1e9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1e9"]["BackgroundTransparency"] = 1;
G2L["1e9"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1e9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1e9"]["Text"] = [[Clear]];


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Clear.UICorner
G2L["1ea"] = Instance.new("UICorner", G2L["1e6"]);
G2L["1ea"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Clear.Color
G2L["1eb"] = Instance.new("UIGradient", G2L["1e6"]);
G2L["1eb"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Execute
G2L["1ec"] = Instance.new("TextButton", G2L["1df"]);
G2L["1ec"]["TextWrapped"] = true;
G2L["1ec"]["BorderSizePixel"] = 0;
G2L["1ec"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ec"]["TextSize"] = 21;
G2L["1ec"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ec"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ec"]["ZIndex"] = 2;
G2L["1ec"]["Size"] = UDim2.new(0, 210, 0, 30);
G2L["1ec"]["BackgroundTransparency"] = 0.5;
G2L["1ec"]["Name"] = [[Execute]];
G2L["1ec"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1ec"]["Text"] = [[]];
G2L["1ec"]["Position"] = UDim2.new(-0.02326, 10, 1, -30);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Execute.Shadow
G2L["1ed"] = Instance.new("ImageLabel", G2L["1ec"]);
G2L["1ed"]["BorderSizePixel"] = 0;
G2L["1ed"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1ed"]["SliceScale"] = 0.09;
G2L["1ed"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ed"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1ed"]["ImageTransparency"] = 0.5;
G2L["1ed"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1ed"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1ed"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["1ed"]["BackgroundTransparency"] = 1;
G2L["1ed"]["Name"] = [[Shadow]];
G2L["1ed"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Execute.Shadow.UIGradient
G2L["1ee"] = Instance.new("UIGradient", G2L["1ed"]);



-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Execute.TextLabel
G2L["1ef"] = Instance.new("TextLabel", G2L["1ec"]);
G2L["1ef"]["BorderSizePixel"] = 0;
G2L["1ef"]["TextSize"] = 19;
G2L["1ef"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ef"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ef"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1ef"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ef"]["BackgroundTransparency"] = 1;
G2L["1ef"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1ef"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ef"]["Text"] = [[Execute]];


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Execute.UICorner
G2L["1f0"] = Instance.new("UICorner", G2L["1ec"]);
G2L["1f0"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.Execute.Color
G2L["1f1"] = Instance.new("UIGradient", G2L["1ec"]);
G2L["1f1"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Holder.Executer.Frame.aa
G2L["1f2"] = Instance.new("Frame", G2L["1df"]);
G2L["1f2"]["Visible"] = false;
G2L["1f2"]["ZIndex"] = 2;
G2L["1f2"]["BorderSizePixel"] = 0;
G2L["1f2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f2"]["Size"] = UDim2.new(1, 0, 0, 339);
G2L["1f2"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1f2"]["Name"] = [[aa]];
G2L["1f2"]["BackgroundTransparency"] = 0.9;


-- StarterGui.GuiMain.Main.Background
G2L["1f3"] = Instance.new("Frame", G2L["8c"]);
G2L["1f3"]["BorderSizePixel"] = 0;
G2L["1f3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f3"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1f3"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
G2L["1f3"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1f3"]["Name"] = [[Background]];
G2L["1f3"]["BackgroundTransparency"] = 0.8;


-- StarterGui.GuiMain.Main.Background.UIGradient
G2L["1f4"] = Instance.new("UIGradient", G2L["1f3"]);



-- StarterGui.GuiMain.Main.Background.UICorner
G2L["1f5"] = Instance.new("UICorner", G2L["1f3"]);
G2L["1f5"]["CornerRadius"] = UDim.new(0.025, 0);


-- StarterGui.GuiMain.Main.Shadow
G2L["1f6"] = Instance.new("ImageLabel", G2L["8c"]);
G2L["1f6"]["BorderSizePixel"] = 0;
G2L["1f6"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["1f6"]["SliceScale"] = 0.095;
G2L["1f6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f6"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["1f6"]["ImageTransparency"] = 0.5;
G2L["1f6"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f6"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["1f6"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["1f6"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["1f6"]["Visible"] = false;
G2L["1f6"]["BackgroundTransparency"] = 1;
G2L["1f6"]["Name"] = [[Shadow]];
G2L["1f6"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Shadow.UIGradient
G2L["1f7"] = Instance.new("UIGradient", G2L["1f6"]);



-- StarterGui.GuiMain.Main.UIGradient
G2L["1f8"] = Instance.new("UIGradient", G2L["8c"]);



-- StarterGui.GuiMain.Main.UICorner
G2L["1f9"] = Instance.new("UICorner", G2L["8c"]);
G2L["1f9"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar
G2L["1fa"] = Instance.new("Frame", G2L["8c"]);
G2L["1fa"]["Visible"] = false;
G2L["1fa"]["BorderSizePixel"] = 0;
G2L["1fa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fa"]["ClipsDescendants"] = true;
G2L["1fa"]["Size"] = UDim2.new(0.25, 0, 1, 0);
G2L["1fa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1fa"]["Name"] = [[Sidebar]];
G2L["1fa"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Sidebar.title
G2L["1fb"] = Instance.new("TextLabel", G2L["1fa"]);
G2L["1fb"]["ZIndex"] = 10;
G2L["1fb"]["BorderSizePixel"] = 0;
G2L["1fb"]["TextSize"] = 23;
G2L["1fb"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1fb"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fb"]["TextYAlignment"] = Enum.TextYAlignment.Bottom;
G2L["1fb"]["BackgroundColor3"] = Color3.fromRGB(41, 41, 41);
G2L["1fb"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["1fb"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fb"]["BackgroundTransparency"] = 1;
G2L["1fb"]["RichText"] = true;
G2L["1fb"]["Size"] = UDim2.new(1, 0, 0, 30);
G2L["1fb"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1fb"]["Text"] = [[     ?S]];
G2L["1fb"]["Name"] = [[title]];
G2L["1fb"]["Position"] = UDim2.new(0, -2, 0, 10);


-- StarterGui.GuiMain.Main.Sidebar.title.UIGradient
G2L["1fc"] = Instance.new("UIGradient", G2L["1fb"]);



-- StarterGui.GuiMain.Main.Sidebar.Title
G2L["1fd"] = Instance.new("TextLabel", G2L["1fa"]);
G2L["1fd"]["ZIndex"] = 10;
G2L["1fd"]["BorderSizePixel"] = 0;
G2L["1fd"]["TextSize"] = 23;
G2L["1fd"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1fd"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fd"]["TextYAlignment"] = Enum.TextYAlignment.Bottom;
G2L["1fd"]["BackgroundColor3"] = Color3.fromRGB(41, 41, 41);
G2L["1fd"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1fd"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fd"]["BackgroundTransparency"] = 1;
G2L["1fd"]["RichText"] = true;
G2L["1fd"]["Size"] = UDim2.new(1, 0, 0, 30);
G2L["1fd"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1fd"]["Text"] = [[       e?n?s?a?t?i?o?n]];
G2L["1fd"]["Name"] = [[Title]];
G2L["1fd"]["Position"] = UDim2.new(0, -1, 0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Time
G2L["1fe"] = Instance.new("TextLabel", G2L["1fa"]);
G2L["1fe"]["TextTruncate"] = Enum.TextTruncate.AtEnd;
G2L["1fe"]["ZIndex"] = 10;
G2L["1fe"]["BorderSizePixel"] = 0;
G2L["1fe"]["TextSize"] = 17;
G2L["1fe"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1fe"]["TextTransparency"] = 0.25;
G2L["1fe"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fe"]["BackgroundColor3"] = Color3.fromRGB(41, 41, 41);
G2L["1fe"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1fe"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1fe"]["BackgroundTransparency"] = 1;
G2L["1fe"]["Size"] = UDim2.new(1, 0, 0, 16);
G2L["1fe"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["1fe"]["Text"] = [[      05:47 PM]];
G2L["1fe"]["Name"] = [[Time]];
G2L["1fe"]["Position"] = UDim2.new(0, -1, 0, 40);


-- StarterGui.GuiMain.Main.Sidebar.Frame
G2L["1ff"] = Instance.new("Frame", G2L["1fa"]);
G2L["1ff"]["BorderSizePixel"] = 0;
G2L["1ff"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1ff"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["1ff"]["ClipsDescendants"] = true;
G2L["1ff"]["Size"] = UDim2.new(0, 150, 0, 275);
G2L["1ff"]["Position"] = UDim2.new(0.5, 0, 0, 70);
G2L["1ff"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1ff"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame
G2L["200"] = Instance.new("ScrollingFrame", G2L["1ff"]);
G2L["200"]["Active"] = true;
G2L["200"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
G2L["200"]["BorderSizePixel"] = 0;
G2L["200"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
G2L["200"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["200"]["Name"] = [[Frame]];
G2L["200"]["ScrollBarImageTransparency"] = 1;
G2L["200"]["AnchorPoint"] = Vector2.new(0.5, 0);
G2L["200"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
G2L["200"]["ClipsDescendants"] = false;
G2L["200"]["Size"] = UDim2.new(0, 125, 0, 275);
G2L["200"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["200"]["Position"] = UDim2.new(0.5, 0, 0, 0);
G2L["200"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["200"]["ScrollBarThickness"] = 0;
G2L["200"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Logs
G2L["201"] = Instance.new("TextButton", G2L["200"]);
G2L["201"]["BorderSizePixel"] = 0;
G2L["201"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["201"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["201"]["TextTransparency"] = 1;
G2L["201"]["AutoButtonColor"] = false;
G2L["201"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["201"]["TextSize"] = 19;
G2L["201"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["201"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["201"]["Size"] = UDim2.new(0, 72, 0, 30);
G2L["201"]["BackgroundTransparency"] = 1;
G2L["201"]["Name"] = [[Logs]];
G2L["201"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["201"]["Text"] = [[          Hub]];
G2L["201"]["Position"] = UDim2.new(0, 0, 0, 105);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Logs.Shadow
G2L["202"] = Instance.new("ImageLabel", G2L["201"]);
G2L["202"]["BorderSizePixel"] = 0;
G2L["202"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["202"]["SliceScale"] = 0.096;
G2L["202"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["202"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["202"]["ImageTransparency"] = 1;
G2L["202"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["202"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["202"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["202"]["BackgroundTransparency"] = 1;
G2L["202"]["Name"] = [[Shadow]];
G2L["202"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Logs.Shadow.UIGradient
G2L["203"] = Instance.new("UIGradient", G2L["202"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Logs.UIGradient
G2L["204"] = Instance.new("UIGradient", G2L["201"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Logs.TextLabel
G2L["205"] = Instance.new("TextLabel", G2L["201"]);
G2L["205"]["BorderSizePixel"] = 0;
G2L["205"]["TextSize"] = 17;
G2L["205"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["205"]["TextTransparency"] = 0.5;
G2L["205"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["205"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["205"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["205"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["205"]["BackgroundTransparency"] = 1;
G2L["205"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["205"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["205"]["Text"] = [[        Logs]];


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Logs.Icon
G2L["206"] = Instance.new("ImageLabel", G2L["201"]);
G2L["206"]["BorderSizePixel"] = 0;
G2L["206"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["206"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["206"]["ImageTransparency"] = 0.5;
G2L["206"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["206"]["Image"] = [[rbxassetid://11422154787]];
G2L["206"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["206"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["206"]["BackgroundTransparency"] = 1;
G2L["206"]["Name"] = [[Icon]];
G2L["206"]["Position"] = UDim2.new(0, 8, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Logs.UICorner
G2L["207"] = Instance.new("UICorner", G2L["201"]);
G2L["207"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Settings
G2L["208"] = Instance.new("TextButton", G2L["200"]);
G2L["208"]["BorderSizePixel"] = 0;
G2L["208"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["208"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["208"]["TextTransparency"] = 1;
G2L["208"]["AutoButtonColor"] = false;
G2L["208"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["208"]["TextSize"] = 19;
G2L["208"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["208"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["208"]["Size"] = UDim2.new(0, 94, 0, 30);
G2L["208"]["BackgroundTransparency"] = 1;
G2L["208"]["Name"] = [[Settings]];
G2L["208"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["208"]["Text"] = [[          Settings]];
G2L["208"]["Position"] = UDim2.new(0, 0, 0, 245);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Settings.Shadow
G2L["209"] = Instance.new("ImageLabel", G2L["208"]);
G2L["209"]["BorderSizePixel"] = 0;
G2L["209"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["209"]["SliceScale"] = 0.096;
G2L["209"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["209"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["209"]["ImageTransparency"] = 1;
G2L["209"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["209"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["209"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["209"]["BackgroundTransparency"] = 1;
G2L["209"]["Name"] = [[Shadow]];
G2L["209"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Settings.Shadow.UIGradient
G2L["20a"] = Instance.new("UIGradient", G2L["209"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Settings.UIGradient
G2L["20b"] = Instance.new("UIGradient", G2L["208"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Settings.TextLabel
G2L["20c"] = Instance.new("TextLabel", G2L["208"]);
G2L["20c"]["BorderSizePixel"] = 0;
G2L["20c"]["TextSize"] = 17;
G2L["20c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["20c"]["TextTransparency"] = 0.5;
G2L["20c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20c"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["20c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20c"]["BackgroundTransparency"] = 1;
G2L["20c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["20c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20c"]["Text"] = [[        Settings]];


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Settings.Icon
G2L["20d"] = Instance.new("ImageLabel", G2L["208"]);
G2L["20d"]["BorderSizePixel"] = 0;
G2L["20d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20d"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["20d"]["ImageTransparency"] = 0.5;
G2L["20d"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["20d"]["Image"] = [[rbxassetid://11293977610]];
G2L["20d"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["20d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20d"]["BackgroundTransparency"] = 1;
G2L["20d"]["Name"] = [[Icon]];
G2L["20d"]["Position"] = UDim2.new(0, 8, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Settings.UICorner
G2L["20e"] = Instance.new("UICorner", G2L["208"]);
G2L["20e"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Players
G2L["20f"] = Instance.new("TextButton", G2L["200"]);
G2L["20f"]["BorderSizePixel"] = 0;
G2L["20f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["20f"]["TextTransparency"] = 1;
G2L["20f"]["AutoButtonColor"] = false;
G2L["20f"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20f"]["TextSize"] = 19;
G2L["20f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20f"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["20f"]["Size"] = UDim2.new(0, 88, 0, 30);
G2L["20f"]["BackgroundTransparency"] = 1;
G2L["20f"]["Name"] = [[Players]];
G2L["20f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20f"]["Text"] = [[          Players]];
G2L["20f"]["Position"] = UDim2.new(0, 0, 0, 210);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Players.Shadow
G2L["210"] = Instance.new("ImageLabel", G2L["20f"]);
G2L["210"]["BorderSizePixel"] = 0;
G2L["210"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["210"]["SliceScale"] = 0.096;
G2L["210"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["210"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["210"]["ImageTransparency"] = 1;
G2L["210"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["210"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["210"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["210"]["BackgroundTransparency"] = 1;
G2L["210"]["Name"] = [[Shadow]];
G2L["210"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Players.Shadow.UIGradient
G2L["211"] = Instance.new("UIGradient", G2L["210"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Players.UIGradient
G2L["212"] = Instance.new("UIGradient", G2L["20f"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Players.TextLabel
G2L["213"] = Instance.new("TextLabel", G2L["20f"]);
G2L["213"]["BorderSizePixel"] = 0;
G2L["213"]["TextSize"] = 17;
G2L["213"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["213"]["TextTransparency"] = 0.5;
G2L["213"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["213"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["213"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["213"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["213"]["BackgroundTransparency"] = 1;
G2L["213"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["213"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["213"]["Text"] = [[        Players]];


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Players.Icon
G2L["214"] = Instance.new("ImageLabel", G2L["20f"]);
G2L["214"]["BorderSizePixel"] = 0;
G2L["214"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["214"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["214"]["ImageTransparency"] = 0.5;
G2L["214"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["214"]["Image"] = [[rbxassetid://11432832657]];
G2L["214"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["214"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["214"]["BackgroundTransparency"] = 1;
G2L["214"]["Name"] = [[Icon]];
G2L["214"]["Position"] = UDim2.new(0, 8, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Players.UICorner
G2L["215"] = Instance.new("UICorner", G2L["20f"]);
G2L["215"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Music
G2L["216"] = Instance.new("TextButton", G2L["200"]);
G2L["216"]["BorderSizePixel"] = 0;
G2L["216"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["216"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["216"]["TextTransparency"] = 1;
G2L["216"]["AutoButtonColor"] = false;
G2L["216"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["216"]["TextSize"] = 19;
G2L["216"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["216"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["216"]["Size"] = UDim2.new(0, 78, 0, 30);
G2L["216"]["BackgroundTransparency"] = 1;
G2L["216"]["Name"] = [[Music]];
G2L["216"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["216"]["Text"] = [[          Music]];
G2L["216"]["Position"] = UDim2.new(0, 0, 0, 175);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Music.Shadow
G2L["217"] = Instance.new("ImageLabel", G2L["216"]);
G2L["217"]["BorderSizePixel"] = 0;
G2L["217"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["217"]["SliceScale"] = 0.096;
G2L["217"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["217"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["217"]["ImageTransparency"] = 1;
G2L["217"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["217"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["217"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["217"]["BackgroundTransparency"] = 1;
G2L["217"]["Name"] = [[Shadow]];
G2L["217"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Music.Shadow.UIGradient
G2L["218"] = Instance.new("UIGradient", G2L["217"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Music.UIGradient
G2L["219"] = Instance.new("UIGradient", G2L["216"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Music.TextLabel
G2L["21a"] = Instance.new("TextLabel", G2L["216"]);
G2L["21a"]["BorderSizePixel"] = 0;
G2L["21a"]["TextSize"] = 17;
G2L["21a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["21a"]["TextTransparency"] = 0.5;
G2L["21a"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21a"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["21a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21a"]["BackgroundTransparency"] = 1;
G2L["21a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["21a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21a"]["Text"] = [[        Music]];


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Music.Icon
G2L["21b"] = Instance.new("ImageLabel", G2L["216"]);
G2L["21b"]["BorderSizePixel"] = 0;
G2L["21b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21b"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["21b"]["ImageTransparency"] = 0.5;
G2L["21b"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["21b"]["Image"] = [[rbxassetid://11432850205]];
G2L["21b"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["21b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21b"]["BackgroundTransparency"] = 1;
G2L["21b"]["Name"] = [[Icon]];
G2L["21b"]["Position"] = UDim2.new(0, 8, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Music.UICorner
G2L["21c"] = Instance.new("UICorner", G2L["216"]);
G2L["21c"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Hub
G2L["21d"] = Instance.new("TextButton", G2L["200"]);
G2L["21d"]["BorderSizePixel"] = 0;
G2L["21d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["21d"]["TextTransparency"] = 1;
G2L["21d"]["AutoButtonColor"] = false;
G2L["21d"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21d"]["TextSize"] = 19;
G2L["21d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21d"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["21d"]["Size"] = UDim2.new(0, 68, 0, 30);
G2L["21d"]["BackgroundTransparency"] = 1;
G2L["21d"]["Name"] = [[Hub]];
G2L["21d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21d"]["Text"] = [[          Hub]];
G2L["21d"]["Position"] = UDim2.new(0, 0, 0, 105);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Hub.Shadow
G2L["21e"] = Instance.new("ImageLabel", G2L["21d"]);
G2L["21e"]["BorderSizePixel"] = 0;
G2L["21e"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["21e"]["SliceScale"] = 0.096;
G2L["21e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21e"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["21e"]["ImageTransparency"] = 1;
G2L["21e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["21e"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["21e"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["21e"]["BackgroundTransparency"] = 1;
G2L["21e"]["Name"] = [[Shadow]];
G2L["21e"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Hub.Shadow.UIGradient
G2L["21f"] = Instance.new("UIGradient", G2L["21e"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Hub.UIGradient
G2L["220"] = Instance.new("UIGradient", G2L["21d"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Hub.TextLabel
G2L["221"] = Instance.new("TextLabel", G2L["21d"]);
G2L["221"]["BorderSizePixel"] = 0;
G2L["221"]["TextSize"] = 17;
G2L["221"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["221"]["TextTransparency"] = 0.5;
G2L["221"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["221"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["221"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["221"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["221"]["BackgroundTransparency"] = 1;
G2L["221"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["221"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["221"]["Text"] = [[        Hub]];


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Hub.Icon
G2L["222"] = Instance.new("ImageLabel", G2L["21d"]);
G2L["222"]["BorderSizePixel"] = 0;
G2L["222"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["222"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["222"]["ImageTransparency"] = 0.5;
G2L["222"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["222"]["Image"] = [[rbxassetid://11419703033]];
G2L["222"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["222"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["222"]["BackgroundTransparency"] = 1;
G2L["222"]["Name"] = [[Icon]];
G2L["222"]["Position"] = UDim2.new(0, 8, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Hub.UICorner
G2L["223"] = Instance.new("UICorner", G2L["21d"]);
G2L["223"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Home
G2L["224"] = Instance.new("TextButton", G2L["200"]);
G2L["224"]["BorderSizePixel"] = 0;
G2L["224"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["224"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["224"]["TextTransparency"] = 1;
G2L["224"]["AutoButtonColor"] = false;
G2L["224"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["224"]["TextSize"] = 19;
G2L["224"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["224"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["224"]["Size"] = UDim2.new(0, 80, 0, 30);
G2L["224"]["BackgroundTransparency"] = 0.5;
G2L["224"]["Name"] = [[Home]];
G2L["224"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["224"]["Text"] = [[          Home]];
G2L["224"]["Position"] = UDim2.new(0, 0, 0, 70);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Home.Shadow
G2L["225"] = Instance.new("ImageLabel", G2L["224"]);
G2L["225"]["BorderSizePixel"] = 0;
G2L["225"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["225"]["SliceScale"] = 0.096;
G2L["225"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["225"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["225"]["ImageTransparency"] = 0.5;
G2L["225"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["225"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["225"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["225"]["BackgroundTransparency"] = 1;
G2L["225"]["Name"] = [[Shadow]];
G2L["225"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Home.Shadow.UIGradient
G2L["226"] = Instance.new("UIGradient", G2L["225"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Home.UIGradient
G2L["227"] = Instance.new("UIGradient", G2L["224"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Home.TextLabel
G2L["228"] = Instance.new("TextLabel", G2L["224"]);
G2L["228"]["BorderSizePixel"] = 0;
G2L["228"]["TextSize"] = 17;
G2L["228"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["228"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["228"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["228"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["228"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["228"]["BackgroundTransparency"] = 1;
G2L["228"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["228"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["228"]["Text"] = [[        Home]];


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Home.Icon
G2L["229"] = Instance.new("ImageLabel", G2L["224"]);
G2L["229"]["BorderSizePixel"] = 0;
G2L["229"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["229"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["229"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["229"]["Image"] = [[rbxassetid://11433532654]];
G2L["229"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["229"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["229"]["BackgroundTransparency"] = 1;
G2L["229"]["Name"] = [[Icon]];
G2L["229"]["Position"] = UDim2.new(0, 8, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Home.UICorner
G2L["22a"] = Instance.new("UICorner", G2L["224"]);
G2L["22a"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.UIListLayout
G2L["22b"] = Instance.new("UIListLayout", G2L["200"]);
G2L["22b"]["Padding"] = UDim.new(0, 5);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Executer
G2L["22c"] = Instance.new("TextButton", G2L["200"]);
G2L["22c"]["Interactable"] = false;
G2L["22c"]["BorderSizePixel"] = 0;
G2L["22c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["22c"]["TextTransparency"] = 1;
G2L["22c"]["AutoButtonColor"] = false;
G2L["22c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22c"]["TextSize"] = 19;
G2L["22c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["22c"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["22c"]["Size"] = UDim2.new(0, 98, 0, 30);
G2L["22c"]["BackgroundTransparency"] = 1;
G2L["22c"]["Name"] = [[Executer]];
G2L["22c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["22c"]["Text"] = [[          Executer]];
G2L["22c"]["Visible"] = false;
G2L["22c"]["Position"] = UDim2.new(0, 0, 0, 35);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Executer.Shadow
G2L["22d"] = Instance.new("ImageLabel", G2L["22c"]);
G2L["22d"]["BorderSizePixel"] = 0;
G2L["22d"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["22d"]["SliceScale"] = 0.096;
G2L["22d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["22d"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["22d"]["ImageTransparency"] = 1;
G2L["22d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["22d"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["22d"]["Size"] = UDim2.new(1, 16, 1, 16);
G2L["22d"]["BackgroundTransparency"] = 1;
G2L["22d"]["Name"] = [[Shadow]];
G2L["22d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Executer.Shadow.UIGradient
G2L["22e"] = Instance.new("UIGradient", G2L["22d"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Executer.UIGradient
G2L["22f"] = Instance.new("UIGradient", G2L["22c"]);



-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Executer.TextLabel
G2L["230"] = Instance.new("TextLabel", G2L["22c"]);
G2L["230"]["BorderSizePixel"] = 0;
G2L["230"]["TextSize"] = 17;
G2L["230"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["230"]["TextTransparency"] = 0.5;
G2L["230"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["230"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["230"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["230"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["230"]["BackgroundTransparency"] = 1;
G2L["230"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["230"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["230"]["Text"] = [[        Executor]];


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Executer.Icon
G2L["231"] = Instance.new("ImageLabel", G2L["22c"]);
G2L["231"]["BorderSizePixel"] = 0;
G2L["231"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["231"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["231"]["ImageTransparency"] = 0.5;
G2L["231"]["AnchorPoint"] = Vector2.new(0, 0.5);
G2L["231"]["Image"] = [[rbxassetid://11422141395]];
G2L["231"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["231"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["231"]["BackgroundTransparency"] = 1;
G2L["231"]["Name"] = [[Icon]];
G2L["231"]["Position"] = UDim2.new(0, 8, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.Frame.Frame.Executer.UICorner
G2L["232"] = Instance.new("UICorner", G2L["22c"]);
G2L["232"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.RIG
G2L["233"] = Instance.new("Frame", G2L["1fa"]);
G2L["233"]["ZIndex"] = 2;
G2L["233"]["BorderSizePixel"] = 0;
G2L["233"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["233"]["Size"] = UDim2.new(0, 30, 0, 30);
G2L["233"]["Position"] = UDim2.new(0, 47, 1, -40);
G2L["233"]["Name"] = [[RIG]];
G2L["233"]["BackgroundTransparency"] = 0.5;


-- StarterGui.GuiMain.Main.Sidebar.RIG.Shadow
G2L["234"] = Instance.new("ImageLabel", G2L["233"]);
G2L["234"]["BorderSizePixel"] = 0;
G2L["234"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["234"]["SliceScale"] = 0.1;
G2L["234"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["234"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["234"]["ImageTransparency"] = 0.5;
G2L["234"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["234"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["234"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["234"]["BackgroundTransparency"] = 1;
G2L["234"]["Name"] = [[Shadow]];
G2L["234"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.RIG.Shadow.UIGradient
G2L["235"] = Instance.new("UIGradient", G2L["234"]);



-- StarterGui.GuiMain.Main.Sidebar.RIG.RIG
G2L["236"] = Instance.new("ImageButton", G2L["233"]);
G2L["236"]["BorderSizePixel"] = 0;
G2L["236"]["BackgroundColor3"] = Color3.fromRGB(34, 34, 34);
G2L["236"]["ZIndex"] = 3;
G2L["236"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["236"]["Image"] = [[rbxassetid://11295273292]];
G2L["236"]["Size"] = UDim2.new(1, -10, 1, -10);
G2L["236"]["BackgroundTransparency"] = 1;
G2L["236"]["Name"] = [[RIG]];
G2L["236"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["236"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
-- Attributes
G2L["236"]:SetAttribute([[Rig]], [[]]);


-- StarterGui.GuiMain.Main.Sidebar.RIG.Color
G2L["237"] = Instance.new("UIGradient", G2L["233"]);
G2L["237"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Sidebar.RIG.UICorner
G2L["238"] = Instance.new("UICorner", G2L["233"]);
G2L["238"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.RE
G2L["239"] = Instance.new("Frame", G2L["1fa"]);
G2L["239"]["ZIndex"] = 2;
G2L["239"]["BorderSizePixel"] = 0;
G2L["239"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["239"]["Size"] = UDim2.new(0, 30, 0, 30);
G2L["239"]["Position"] = UDim2.new(0, 12, 1, -40);
G2L["239"]["Name"] = [[RE]];
G2L["239"]["BackgroundTransparency"] = 0.5;


-- StarterGui.GuiMain.Main.Sidebar.RE.Shadow
G2L["23a"] = Instance.new("ImageLabel", G2L["239"]);
G2L["23a"]["BorderSizePixel"] = 0;
G2L["23a"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["23a"]["SliceScale"] = 0.1;
G2L["23a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23a"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["23a"]["ImageTransparency"] = 0.5;
G2L["23a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["23a"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["23a"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["23a"]["BackgroundTransparency"] = 1;
G2L["23a"]["Name"] = [[Shadow]];
G2L["23a"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.RE.Shadow.UIGradient
G2L["23b"] = Instance.new("UIGradient", G2L["23a"]);



-- StarterGui.GuiMain.Main.Sidebar.RE.RE
G2L["23c"] = Instance.new("ImageButton", G2L["239"]);
G2L["23c"]["BorderSizePixel"] = 0;
G2L["23c"]["BackgroundColor3"] = Color3.fromRGB(34, 34, 34);
G2L["23c"]["ZIndex"] = 3;
G2L["23c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["23c"]["Image"] = [[rbxassetid://11293978505]];
G2L["23c"]["Size"] = UDim2.new(1, -10, 1, -10);
G2L["23c"]["BackgroundTransparency"] = 1;
G2L["23c"]["Name"] = [[RE]];
G2L["23c"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["23c"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Main.Sidebar.RE.Color
G2L["23d"] = Instance.new("UIGradient", G2L["239"]);
G2L["23d"]["Name"] = [[Color]];


-- StarterGui.GuiMain.Main.Sidebar.RE.UICorner
G2L["23e"] = Instance.new("UICorner", G2L["239"]);
G2L["23e"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Main.Sidebar.Background
G2L["23f"] = Instance.new("Frame", G2L["1fa"]);
G2L["23f"]["BorderSizePixel"] = 0;
G2L["23f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23f"]["Size"] = UDim2.new(1, 10, 1, 0);
G2L["23f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["23f"]["Name"] = [[Background]];
G2L["23f"]["BackgroundTransparency"] = 0.85;


-- StarterGui.GuiMain.Main.Sidebar.Background.UICorner
G2L["240"] = Instance.new("UICorner", G2L["23f"]);
G2L["240"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Notifications
G2L["241"] = Instance.new("Frame", G2L["1"]);
G2L["241"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["241"]["Size"] = UDim2.new(0, 500, 1, -20);
G2L["241"]["Position"] = UDim2.new(1, -250, 0, 10);
G2L["241"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["241"]["Name"] = [[Notifications]];
G2L["241"]["BackgroundTransparency"] = 1;


-- StarterGui.GuiMain.Notifications.UIListLayout
G2L["242"] = Instance.new("UIListLayout", G2L["241"]);
G2L["242"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Right;
G2L["242"]["Padding"] = UDim.new(0, 10);
G2L["242"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;


-- StarterGui.GuiMain.PING
G2L["243"] = Instance.new("Frame", G2L["1"]);
G2L["243"]["Visible"] = false;
G2L["243"]["ZIndex"] = 2147483647;
G2L["243"]["BorderSizePixel"] = 0;
G2L["243"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["243"]["AnchorPoint"] = Vector2.new(0, 1);
G2L["243"]["Size"] = UDim2.new(0, 120, 0, 50);
G2L["243"]["Position"] = UDim2.new(0, 10, 1, -250);
G2L["243"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["243"]["Name"] = [[PING]];
G2L["243"]["BackgroundTransparency"] = 0.8;


-- StarterGui.GuiMain.PING.SubLabel
G2L["244"] = Instance.new("TextLabel", G2L["243"]);
G2L["244"]["ZIndex"] = 2147483647;
G2L["244"]["BorderSizePixel"] = 0;
G2L["244"]["TextSize"] = 20;
G2L["244"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["244"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["244"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["244"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["244"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["244"]["BackgroundTransparency"] = 1;
G2L["244"]["Size"] = UDim2.new(1, -60, 1, 0);
G2L["244"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["244"]["Text"] = [[0000]];
G2L["244"]["Name"] = [[SubLabel]];
G2L["244"]["Position"] = UDim2.new(0, 60, 0, 0);


-- StarterGui.GuiMain.PING.MainLabel
G2L["245"] = Instance.new("TextLabel", G2L["243"]);
G2L["245"]["ZIndex"] = 2147483647;
G2L["245"]["BorderSizePixel"] = 0;
G2L["245"]["TextSize"] = 20;
G2L["245"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["245"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["245"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["245"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["245"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["245"]["BackgroundTransparency"] = 1;
G2L["245"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["245"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["245"]["Text"] = [[    PING: ]];
G2L["245"]["Name"] = [[MainLabel]];


-- StarterGui.GuiMain.PING.MainLabel.GradColor
G2L["246"] = Instance.new("UIGradient", G2L["245"]);
G2L["246"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.PING.Shadow
G2L["247"] = Instance.new("ImageLabel", G2L["243"]);
G2L["247"]["BorderSizePixel"] = 0;
G2L["247"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["247"]["SliceScale"] = 0.095;
G2L["247"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["247"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["247"]["ImageTransparency"] = 0.5;
G2L["247"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["247"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["247"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["247"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["247"]["BackgroundTransparency"] = 1;
G2L["247"]["Name"] = [[Shadow]];
G2L["247"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.PING.Shadow.UIGradient
G2L["248"] = Instance.new("UIGradient", G2L["247"]);



-- StarterGui.GuiMain.PING.UIGradient
G2L["249"] = Instance.new("UIGradient", G2L["243"]);



-- StarterGui.GuiMain.PING.UICorner
G2L["24a"] = Instance.new("UICorner", G2L["243"]);
G2L["24a"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.SPS
G2L["24b"] = Instance.new("Frame", G2L["1"]);
G2L["24b"]["Visible"] = false;
G2L["24b"]["ZIndex"] = 2147483647;
G2L["24b"]["BorderSizePixel"] = 0;
G2L["24b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24b"]["AnchorPoint"] = Vector2.new(0, 1);
G2L["24b"]["Size"] = UDim2.new(0, 100, 0, 50);
G2L["24b"]["Position"] = UDim2.new(0, 10, 1, -130);
G2L["24b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24b"]["Name"] = [[SPS]];
G2L["24b"]["BackgroundTransparency"] = 0.8;


-- StarterGui.GuiMain.SPS.SubLabel
G2L["24c"] = Instance.new("TextLabel", G2L["24b"]);
G2L["24c"]["ZIndex"] = 2147483647;
G2L["24c"]["BorderSizePixel"] = 0;
G2L["24c"]["TextSize"] = 20;
G2L["24c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["24c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24c"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["24c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24c"]["BackgroundTransparency"] = 1;
G2L["24c"]["Size"] = UDim2.new(1, -51, 1, 0);
G2L["24c"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["24c"]["Text"] = [[0.00]];
G2L["24c"]["Name"] = [[SubLabel]];
G2L["24c"]["Position"] = UDim2.new(0, 51, 0, 0);


-- StarterGui.GuiMain.SPS.MainLabel
G2L["24d"] = Instance.new("TextLabel", G2L["24b"]);
G2L["24d"]["ZIndex"] = 2147483647;
G2L["24d"]["BorderSizePixel"] = 0;
G2L["24d"]["TextSize"] = 20;
G2L["24d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["24d"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24d"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["24d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["24d"]["BackgroundTransparency"] = 1;
G2L["24d"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["24d"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["24d"]["Text"] = [[    SPS: ]];
G2L["24d"]["Name"] = [[MainLabel]];


-- StarterGui.GuiMain.SPS.MainLabel.GradColor
G2L["24e"] = Instance.new("UIGradient", G2L["24d"]);
G2L["24e"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.SPS.Shadow
G2L["24f"] = Instance.new("ImageLabel", G2L["24b"]);
G2L["24f"]["BorderSizePixel"] = 0;
G2L["24f"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["24f"]["SliceScale"] = 0.095;
G2L["24f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24f"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["24f"]["ImageTransparency"] = 0.5;
G2L["24f"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24f"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["24f"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["24f"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["24f"]["BackgroundTransparency"] = 1;
G2L["24f"]["Name"] = [[Shadow]];
G2L["24f"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.SPS.Shadow.UIGradient
G2L["250"] = Instance.new("UIGradient", G2L["24f"]);



-- StarterGui.GuiMain.SPS.UIGradient
G2L["251"] = Instance.new("UIGradient", G2L["24b"]);



-- StarterGui.GuiMain.SPS.UICorner
G2L["252"] = Instance.new("UICorner", G2L["24b"]);
G2L["252"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Open/Close
G2L["253"] = Instance.new("ImageButton", G2L["1"]);
G2L["253"]["AutoButtonColor"] = false;
G2L["253"]["ScaleType"] = Enum.ScaleType.Fit;
G2L["253"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["253"]["ZIndex"] = 2147483647;
G2L["253"]["Size"] = UDim2.new(0, 50, 0, 50);
G2L["253"]["BackgroundTransparency"] = 0.8;
G2L["253"]["Name"] = [[Open/Close]];
G2L["253"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["253"]["Visible"] = false;
G2L["253"]["Position"] = UDim2.new(0, 10, 1, -60);


-- StarterGui.GuiMain.Open/Close.Shadow
G2L["254"] = Instance.new("ImageLabel", G2L["253"]);
G2L["254"]["BorderSizePixel"] = 0;
G2L["254"]["SliceCenter"] = Rect.new(200, 200, 500, 500);
G2L["254"]["SliceScale"] = 0.095;
G2L["254"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["254"]["ScaleType"] = Enum.ScaleType.Slice;
G2L["254"]["ImageTransparency"] = 0.5;
G2L["254"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["254"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["254"]["Image"] = [[http://www.roblox.com/asset/?id=13960012399]];
G2L["254"]["Size"] = UDim2.new(1, 18, 1, 18);
G2L["254"]["BackgroundTransparency"] = 1;
G2L["254"]["Name"] = [[Shadow]];
G2L["254"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- StarterGui.GuiMain.Open/Close.Shadow.UIGradient
G2L["255"] = Instance.new("UIGradient", G2L["254"]);



-- StarterGui.GuiMain.Open/Close.UIGradient
G2L["256"] = Instance.new("UIGradient", G2L["253"]);



-- StarterGui.GuiMain.Open/Close.TextLabel
G2L["257"] = Instance.new("TextLabel", G2L["253"]);
G2L["257"]["ZIndex"] = 2147483647;
G2L["257"]["BorderSizePixel"] = 0;
G2L["257"]["TextSize"] = 20;
G2L["257"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
G2L["257"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["257"]["FontFace"] = Font.new([[rbxasset://fonts/families/BuilderSans.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["257"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["257"]["BackgroundTransparency"] = 1;
G2L["257"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["257"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
G2L["257"]["Text"] = [[S]];


-- StarterGui.GuiMain.Open/Close.TextLabel.GradColor
G2L["258"] = Instance.new("UIGradient", G2L["257"]);
G2L["258"]["Name"] = [[GradColor]];


-- StarterGui.GuiMain.Open/Close.UICorner
G2L["259"] = Instance.new("UICorner", G2L["253"]);
G2L["259"]["CornerRadius"] = UDim.new(0, 10);


-- StarterGui.GuiMain.Highlights
G2L["25a"] = Instance.new("Folder", G2L["1"]);
G2L["25a"]["Name"] = [[Highlights]];


-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L["3"]] = {
Closure = function()
    local script = G2L["3"];local Lighting          = game:GetService("Lighting")
local runService        = game:FindService("RunService")
local camera			= workspace.CurrentCamera

local BLUR_SIZE         = Vector2.new(10, 10)
local PART_SIZE         = 0.001
local PART_TRANSPARENCY = 1
local START_INTENSITY	= 0.25

local BLUR_OBJ          = Instance.new("DepthOfFieldEffect")
BLUR_OBJ.FarIntensity   = 0
BLUR_OBJ.NearIntensity  = 1
BLUR_OBJ.FocusDistance  = 0
BLUR_OBJ.InFocusRadius  = 0
BLUR_OBJ.Parent         = camera

local PartsList         = {}
local BlursList         = {}
local BlurObjects       = {}
local BlurredGui        = {}

BlurredGui.__index      = BlurredGui

function rayPlaneIntersect(planePos, planeNormal, rayOrigin, rayDirection)
	local n = planeNormal
	local d = rayDirection
	local v = rayOrigin - planePos

	local num = n.x*v.x + n.y*v.y + n.z*v.z
	local den = n.x*d.x + n.y*d.y + n.z*d.z
	local a = -num / den

	return rayOrigin + a * rayDirection, a
end

function rebuildPartsList()
	PartsList = {}
	BlursList = {}
	for blurObj, part in pairs(BlurObjects) do
		table.insert(PartsList, part)
		table.insert(BlursList, blurObj)
	end
end

function BlurredGui.new(frame: GuiObject, shape)
	local blurPart        = Instance.new("Part")
	blurPart.Size         = Vector3.one * PART_SIZE
	blurPart.Anchored     = true
	blurPart.CanCollide   = false
	blurPart.CanTouch     = false
	blurPart.Material     = Enum.Material.Glass
	blurPart.Transparency = PART_TRANSPARENCY
	blurPart.Parent       = workspace.CurrentCamera

	local highlight = Instance.new("Highlight")
	highlight.Enabled = false
	highlight.Parent = blurPart

	local mesh
	if (shape == "Rectangle") then
		mesh        = Instance.new("BlockMesh")
		mesh.Parent = blurPart
	elseif (shape == "Oval") then
		mesh          = Instance.new("SpecialMesh")
		mesh.MeshType = Enum.MeshType.Sphere
		mesh.Parent   = blurPart
	end

	local ignoreInset = false
	local currentObj  = frame

	while true do
		currentObj = currentObj.Parent
		if (currentObj and currentObj:IsA("LayerCollector")) then
			ignoreInset = not currentObj.IgnoreGuiInset
			break
		elseif (currentObj == nil) then
			break
		end
	end

	local new = setmetatable({
		Frame          = frame;
		Part           = blurPart;
		Mesh           = mesh;
		IgnoreGuiInset = ignoreInset;
	}, BlurredGui)

	BlurObjects[new] = blurPart
	rebuildPartsList()

	runService:BindToRenderStep("...", Enum.RenderPriority.Camera.Value + 1, function()
		blurPart.CFrame = camera.CFrame
		BlurredGui.updateAll()
	end)

	frame.Parent:GetPropertyChangedSignal("Visible"):Connect(function(...: any) 
		highlight.Parent = if frame.Parent.Visible then blurPart else BLUR_OBJ
	end)
	
	frame.Destroying:Once(function()
		blurPart:Destroy()
		BlurObjects[new] = nil
		rebuildPartsList()
	end)

	return new
end

function updateGui(blurObj)
	if (not blurObj.Mesh or not blurObj.Frame.Visible) then
		blurObj.Part.Transparency = 1
		return
	end

	local camera = workspace.CurrentCamera
	local frame  = blurObj.Frame
	local part   = blurObj.Part
	local mesh   = blurObj.Mesh

	part.Transparency = PART_TRANSPARENCY

	local corner0 = frame.AbsolutePosition + BLUR_SIZE
	local corner1 = corner0 + frame.AbsoluteSize - BLUR_SIZE*2
	local ray0, ray1

	if (blurObj.IgnoreGuiInset) then
		ray0 = camera:ViewportPointToRay(corner0.X, corner0.Y, 1)
		ray1 = camera:ViewportPointToRay(corner1.X, corner1.Y, 1)
	else
		ray0 = camera:ScreenPointToRay(corner0.X, corner0.Y, 1)
		ray1 = camera:ScreenPointToRay(corner1.X, corner1.Y, 1)
	end

	local planeOrigin = camera.CFrame.Position + camera.CFrame.LookVector * (0.05 - camera.NearPlaneZ)
	local planeNormal = camera.CFrame.LookVector
	local pos0 = rayPlaneIntersect(planeOrigin, planeNormal, ray0.Origin, ray0.Direction)
	local pos1 = rayPlaneIntersect(planeOrigin, planeNormal, ray1.Origin, ray1.Direction)

	local pos0 = camera.CFrame:PointToObjectSpace(pos0)
	local pos1 = camera.CFrame:PointToObjectSpace(pos1)

	local size   = pos1 - pos0
	local center = (pos0 + pos1)/2

	mesh.Offset = center
	mesh.Scale  = size / PART_SIZE
end

function BlurredGui.updateAll()

	for i = 1, #BlursList do
		updateGui(BlursList[i])
	end

	local cframes = table.create(#BlursList, workspace.CurrentCamera.CFrame)
	workspace:BulkMoveTo(PartsList, cframes, Enum.BulkMoveMode.FireCFrameChanged)

	--BLUR_OBJ.FocusDistance = 0.25 - camera.NearPlaneZ
end

function BlurredGui:Destroy()
	self.Part:Destroy()
	BlurObjects[self] = nil
	rebuildPartsList()
end

return BlurredGui
end;
};
G2L_MODULES[G2L["4"]] = {
Closure = function()
    local script = G2L["4"];local fiu = require(script.Interpreter)
local luau = require(script.Compiler)

local function compile(source)
	return luau.luau_compile(source)
end

local function load(bytecode, env, settings)
	return fiu.luau_load(bytecode, env, settings or fiu.luau_newsettings())
end

local function run(source: string, env)
	return load(compile(source), env or getfenv(2))
end

return run
end;
};
G2L_MODULES[G2L["5"]] = {
Closure = function()
    local script = G2L["5"];-- // Environment changes in the VM are not supposed to alter the behaviour of the VM so we localise globals beforehand
local type = type
local pcall = pcall
local error = error
local tonumber = tonumber
local assert = assert
local setmetatable = setmetatable

local string_format = string.format

local table_move = table.move
local table_pack = table.pack
local table_unpack = table.unpack
local table_create = table.create
local table_insert = table.insert
local table_remove = table.remove

local coroutine_create = coroutine.create
local coroutine_yield = coroutine.yield
local coroutine_resume = coroutine.resume
local coroutine_close = coroutine.close

local buffer_fromstring = buffer.fromstring
local buffer_len = buffer.len
local buffer_readu8 = buffer.readu8
local buffer_readu32 = buffer.readu32
local buffer_readstring = buffer.readstring
local buffer_readf32 = buffer.readf32
local buffer_readf64 = buffer.readf64

local bit32_bor = bit32.bor
local bit32_band = bit32.band
local bit32_btest = bit32.btest
local bit32_rshift = bit32.rshift
local bit32_lshift = bit32.lshift
local bit32_extract = bit32.extract

local ttisnumber = function(v) return type(v) == "number" end
local ttisstring = function(v) return type(v) == "string" end
local ttisboolean = function(v) return type(v) == "boolean" end
local ttisfunction = function(v) return type(v) == "function" end

-- // opList contains information about the instruction, each instruction is defined in this format:
-- // {OP_NAME, OP_MODE, K_MODE, HAS_AUX}
-- // OP_MODE specifies what type of registers the instruction uses if any
--		0 = NONE
--		1 = A
--		2 = AB
--		3 = ABC
--		4 = AD
--		5 = AE
-- // K_MODE specifies if the instruction has a register that holds a constant table index, which will be directly converted to the constant in the 2nd pass
--		0 = NONE
--		1 = AUX
--		2 = C
--		3 = D
--		4 = AUX import
--		5 = AUX boolean low 1 bit
--		6 = AUX number low 24 bits
-- // HAS_AUX boolean specifies whether the instruction is followed up with an AUX word, which may be used to execute the instruction.

local opList = {
	{ "NOP", 0, 0, false },
	{ "BREAK", 0, 0, false },
	{ "LOADNIL", 1, 0, false },
	{ "LOADB", 3, 0, false },
	{ "LOADN", 4, 0, false },
	{ "LOADK", 4, 3, false },
	{ "MOVE", 2, 0, false },
	{ "GETGLOBAL", 1, 1, true },
	{ "SETGLOBAL", 1, 1, true },
	{ "GETUPVAL", 2, 0, false },
	{ "SETUPVAL", 2, 0, false },
	{ "CLOSEUPVALS", 1, 0, false },
	{ "GETIMPORT", 4, 4, true },
	{ "GETTABLE", 3, 0, false },
	{ "SETTABLE", 3, 0, false },
	{ "GETTABLEKS", 3, 1, true },
	{ "SETTABLEKS", 3, 1, true },
	{ "GETTABLEN", 3, 0, false },
	{ "SETTABLEN", 3, 0, false },
	{ "NEWCLOSURE", 4, 0, false },
	{ "NAMECALL", 3, 1, true },
	{ "CALL", 3, 0, false },
	{ "RETURN", 2, 0, false },
	{ "JUMP", 4, 0, false },
	{ "JUMPBACK", 4, 0, false },
	{ "JUMPIF", 4, 0, false },
	{ "JUMPIFNOT", 4, 0, false },
	{ "JUMPIFEQ", 4, 0, true },
	{ "JUMPIFLE", 4, 0, true },
	{ "JUMPIFLT", 4, 0, true },
	{ "JUMPIFNOTEQ", 4, 0, true },
	{ "JUMPIFNOTLE", 4, 0, true },
	{ "JUMPIFNOTLT", 4, 0, true },
	{ "ADD", 3, 0, false },
	{ "SUB", 3, 0, false },
	{ "MUL", 3, 0, false },
	{ "DIV", 3, 0, false },
	{ "MOD", 3, 0, false },
	{ "POW", 3, 0, false },
	{ "ADDK", 3, 2, false },
	{ "SUBK", 3, 2, false },
	{ "MULK", 3, 2, false },
	{ "DIVK", 3, 2, false },
	{ "MODK", 3, 2, false },
	{ "POWK", 3, 2, false },
	{ "AND", 3, 0, false },
	{ "OR", 3, 0, false },
	{ "ANDK", 3, 2, false },
	{ "ORK", 3, 2, false },
	{ "CONCAT", 3, 0, false },
	{ "NOT", 2, 0, false },
	{ "MINUS", 2, 0, false },
	{ "LENGTH", 2, 0, false },
	{ "NEWTABLE", 2, 0, true },
	{ "DUPTABLE", 4, 3, false },
	{ "SETLIST", 3, 0, true },
	{ "FORNPREP", 4, 0, false },
	{ "FORNLOOP", 4, 0, false },
	{ "FORGLOOP", 4, 8, true },
	{ "FORGPREP_INEXT", 4, 0, false },
	{ "FASTCALL3", 3, 1, true },
	{ "FORGPREP_NEXT", 4, 0, false },
	{ "DEP_FORGLOOP_NEXT", 0, 0, false },
	{ "GETVARARGS", 2, 0, false },
	{ "DUPCLOSURE", 4, 3, false },
	{ "PREPVARARGS", 1, 0, false },
	{ "LOADKX", 1, 1, true },
	{ "JUMPX", 5, 0, false },
	{ "FASTCALL", 3, 0, false },
	{ "COVERAGE", 5, 0, false },
	{ "CAPTURE", 2, 0, false },
	{ "SUBRK", 3, 7, false },
	{ "DIVRK", 3, 7, false },
	{ "FASTCALL1", 3, 0, false },
	{ "FASTCALL2", 3, 0, true },
	{ "FASTCALL2K", 3, 1, true },
	{ "FORGPREP", 4, 0, false },
	{ "JUMPXEQKNIL", 4, 5, true },
	{ "JUMPXEQKB", 4, 5, true },
	{ "JUMPXEQKN", 4, 6, true },
	{ "JUMPXEQKS", 4, 6, true },
	{ "IDIV", 3, 0, false },
	{ "IDIVK", 3, 2, false },
}

local LUA_MULTRET = -1
local LUA_GENERALIZED_TERMINATOR = -2

local function luau_newsettings()
	return {
		vectorCtor = function() error("vectorCtor was not provided") end,
		vectorSize = 4,
		useNativeNamecall = false,
		namecallHandler = function() error("Native __namecall handler was not provided") end,
		extensions = {},
		callHooks = {},
		errorHandling = true,
		generalizedIteration = true,
		allowProxyErrors = false,
		useImportConstants = false,
		staticEnvironment = {},
		decodeOp = function(op) return op end
	}
end

local function luau_validatesettings(luau_settings)
	assert(type(luau_settings) == "table", "luau_settings should be a table")
	assert(type(luau_settings.vectorCtor) == "function", "luau_settings.vectorCtor should be a function")
	assert(type(luau_settings.vectorSize) == "number", "luau_settings.vectorSize should be a number")
	assert(type(luau_settings.useNativeNamecall) == "boolean", "luau_settings.useNativeNamecall should be a boolean")
	assert(type(luau_settings.namecallHandler) == "function", "luau_settings.namecallHandler should be a function")
	assert(type(luau_settings.extensions) == "table", "luau_settings.extensions should be a table of functions")
	assert(type(luau_settings.callHooks) == "table", "luau_settings.callHooks should be a table of functions")
	assert(type(luau_settings.errorHandling) == "boolean", "luau_settings.errorHandling should be a boolean")
	assert(type(luau_settings.generalizedIteration) == "boolean", "luau_settings.generalizedIteration should be a boolean")
	assert(type(luau_settings.allowProxyErrors) == "boolean", "luau_settings.allowProxyErrors should be a boolean")
	assert(type(luau_settings.staticEnvironment) == "table", "luau_settings.staticEnvironment should be a table")
	assert(type(luau_settings.useImportConstants) == "boolean", "luau_settings.useImportConstants should be a boolean")
	assert(type(luau_settings.decodeOp) == "function", "luau_settings.function should be a function")
end

local function getmaxline(module, protoid)
	local proto = if (protoid == nil) then module.mainProto else module.protoList[protoid]
	local size = -1

	assert(proto.lineinfoenabled, "proto must have debug enabled")

	for pc = 1, proto.sizecode do
		local line = proto.instructionlineinfo[pc]
		size = if (line > size) then line else size
	end

	for i, subid in proto.protos do
		local maxline = getmaxline(module, subid)
		size = if (maxline > size) then maxline else size
	end

	return size
end

local function getcoverage(module, protoid, depth, callback, size)
	local proto = if (protoid == nil) then module.mainProto else module.protoList[protoid]

	assert(proto.lineinfoenabled, "proto must have debug enabled")

	local buffer = {}

	for pc = 1, proto.sizecode do
		local inst = proto.code[pc]
		local line = proto.instructionlineinfo[pc]

		if (inst.opcode ~= 69) then --[[ COVERAGE ]]
			continue
		end

		local hits = inst.E

		buffer[line] = if ((buffer[line] or 0) > hits) then buffer[line] else hits
	end

	callback(proto.debugname, proto.linedefined, depth, buffer, size)

	for i, subid in proto.protos do
		getcoverage(module, subid, depth + 1, callback, size)
	end
end

local function luau_getcoverage(module, protoid, callback)
	assert(type(module) == "table", "module must be a table")
	assert(type(protoid) == "number" or type(protoid) == "nil", "protoid must be a number or nil")
	assert(type(callback) == "function", "callback must be a function")
	getcoverage(module, protoid, 0, callback, getmaxline(module))
end

local function resolveImportConstant(static, count, k0, k1, k2)
	local res = static[k0]
	if count < 2 or res == nil then
		return res
	end
	res = res[k1]
	if count < 3 or res == nil then
		return res
	end
	res = res[k2]
	return res
end

local function luau_deserialize(bytecode, luau_settings)
	if luau_settings == nil then
		luau_settings = luau_newsettings()
	else 
		luau_validatesettings(luau_settings)
	end

	local stream = if type(bytecode) == "string" then buffer_fromstring(bytecode) else bytecode
	local cursor = 0

	local function readByte()
		local byte = buffer_readu8(stream, cursor)
		cursor = cursor + 1
		return byte
	end

	local function readWord()
		local word = buffer_readu32(stream, cursor)
		cursor = cursor + 4
		return word
	end

	local function readFloat()
		local float = buffer_readf32(stream, cursor)
		cursor = cursor + 4
		return float
	end

	local function readDouble()
		local double = buffer_readf64(stream, cursor)
		cursor = cursor + 8
		return double
	end

	local function readVarInt()
		local result = 0

		for i = 0, 4 do
			local value = readByte()
			result = bit32_bor(result, bit32_lshift(bit32_band(value, 0x7F), i * 7))
			if not bit32_btest(value, 0x80) then
				break
			end
		end

		return result
	end

	local function readString()
		local size = readVarInt()

		if size == 0 then
			return ""
		else
			local str = buffer_readstring(stream, cursor, size)
			cursor = cursor + size

			return str
		end
	end

	local luauVersion = readByte()
	local typesVersion = 0
	if luauVersion == 0 then
		error("the provided bytecode is an error message",0)
	elseif luauVersion < 3 or luauVersion > 6 then
		error("the version of the provided bytecode is unsupported",0)
	elseif luauVersion >= 4 then
		typesVersion = readByte()
	end

	local stringCount = readVarInt()
	local stringList = table_create(stringCount)

	for i = 1, stringCount do
		stringList[i] = readString()
	end

	local function readInstruction(codeList)
		local value = luau_settings.decodeOp(readWord())
		local opcode = bit32_band(value, 0xFF)

		local opinfo = opList[opcode + 1]
		local opname = opinfo[1]
		local opmode = opinfo[2]
		local kmode = opinfo[3]
		local usesAux = opinfo[4]

		local inst = {
			opcode = opcode;
			opname = opname;
			opmode = opmode;
			kmode = kmode;
			usesAux = usesAux;
		}

		table_insert(codeList, inst)

		if opmode == 1 then --[[ A ]]
			inst.A = bit32_band(bit32_rshift(value, 8), 0xFF)
		elseif opmode == 2 then --[[ AB ]]
			inst.A = bit32_band(bit32_rshift(value, 8), 0xFF)
			inst.B = bit32_band(bit32_rshift(value, 16), 0xFF)
		elseif opmode == 3 then --[[ ABC ]]
			inst.A = bit32_band(bit32_rshift(value, 8), 0xFF)
			inst.B = bit32_band(bit32_rshift(value, 16), 0xFF)
			inst.C = bit32_band(bit32_rshift(value, 24), 0xFF)
		elseif opmode == 4 then --[[ AD ]]
			inst.A = bit32_band(bit32_rshift(value, 8), 0xFF)
			local temp = bit32_band(bit32_rshift(value, 16), 0xFFFF)
			inst.D = if temp < 0x8000 then temp else temp - 0x10000
		elseif opmode == 5 then --[[ AE ]]
			local temp = bit32_band(bit32_rshift(value, 8), 0xFFFFFF)
			inst.E = if temp < 0x800000 then temp else temp - 0x1000000
		end

		if usesAux then 
			local aux = readWord()
			inst.aux = aux

			table_insert(codeList, {value = aux, opname = "auxvalue" })
		end

		return usesAux
	end

	local function checkkmode(inst, k)
		local kmode = inst.kmode

		if kmode == 1 then --// AUX
			inst.K = k[inst.aux +  1]
		elseif kmode == 2 then --// C
			inst.K = k[inst.C + 1]
		elseif kmode == 3 then--// D
			inst.K = k[inst.D + 1]
		elseif kmode == 4 then --// AUX import
			local extend = inst.aux
			local count = bit32_rshift(extend, 30)
			local id0 = bit32_band(bit32_rshift(extend, 20), 0x3FF)

			inst.K0 = k[id0 + 1]
			inst.KC = count
			if count == 2 then
				local id1 = bit32_band(bit32_rshift(extend, 10), 0x3FF)

				inst.K1 = k[id1 + 1]
			elseif count == 3 then
				local id1 = bit32_band(bit32_rshift(extend, 10), 0x3FF)
				local id2 = bit32_band(bit32_rshift(extend, 0), 0x3FF)

				inst.K1 = k[id1 + 1]
				inst.K2 = k[id2 + 1]
			end
			if luau_settings.useImportConstants then
				inst.K = resolveImportConstant(
					luau_settings.staticEnvironment,
					count, inst.K0, inst.K1, inst.K2
				)
			end
		elseif kmode == 5 then --// AUX boolean low 1 bit
			inst.K = bit32_extract(inst.aux, 0, 1) == 1
			inst.KN = bit32_extract(inst.aux, 31, 1) == 1
		elseif kmode == 6 then --// AUX number low 24 bits
			inst.K = k[bit32_extract(inst.aux, 0, 24) + 1]
			inst.KN = bit32_extract(inst.aux, 31, 1) == 1
		elseif kmode == 7 then --// B
			inst.K = k[inst.B + 1]
		elseif kmode == 8 then --// AUX number low 16 bits
			inst.K = bit32_band(inst.aux, 0xf)
		end
	end

	local function readProto(bytecodeid)
		local maxstacksize = readByte()
		local numparams = readByte()
		local nups = readByte()
		local isvararg = readByte() ~= 0

		if luauVersion >= 4 then
			readByte() --// flags 
			local typesize = readVarInt();
			cursor = cursor + typesize;
		end

		local sizecode = readVarInt()
		local codelist = table_create(sizecode)

		local skipnext = false 
		for i = 1, sizecode do
			if skipnext then 
				skipnext = false
				continue 
			end

			skipnext = readInstruction(codelist)
		end

		local debugcodelist = table_create(sizecode) 
		for i = 1, sizecode do 
			debugcodelist[i] = codelist[i].opcode
		end 

		local sizek = readVarInt()
		local klist = table_create(sizek)

		for i = 1, sizek do
			local kt = readByte()
			local k

			if kt == 0 then --// Nil
				k = nil
			elseif kt == 1 then --// Bool
				k = readByte() ~= 0
			elseif kt == 2 then --// Number
				k = readDouble()
			elseif kt == 3 then --// String
				k = stringList[readVarInt()]
			elseif kt == 4 then --// Import
				k = readWord()
			elseif kt == 5 then --// Table
				local dataLength = readVarInt()
				k = table_create(dataLength)

				for i = 1, dataLength do
					k[i] = readVarInt()
				end
			elseif kt == 6 then --// Closure
				k = readVarInt()
			elseif kt == 7 then --// Vector
				local x,y,z,w = readFloat(), readFloat(), readFloat(), readFloat()

				if luau_settings.vectorSize == 4 then
					k = luau_settings.vectorCtor(x,y,z,w)
				else 
					k = luau_settings.vectorCtor(x,y,z)
				end
			end

			klist[i] = k
		end

		-- // 2nd pass to replace constant references in the instruction
		for i = 1, sizecode do
			checkkmode(codelist[i], klist)
		end

		local sizep = readVarInt()
		local protolist = table_create(sizep)

		for i = 1, sizep do
			protolist[i] = readVarInt() + 1
		end

		local linedefined = readVarInt()

		local debugnameindex = readVarInt()
		local debugname 

		if debugnameindex ~= 0 then
			debugname = stringList[debugnameindex]
		else 
			debugname = "(??)"
		end

		-- // lineinfo
		local lineinfoenabled = readByte() ~= 0
		local instructionlineinfo = nil 

		if lineinfoenabled then
			local linegaplog2 = readByte()

			local intervals = bit32_rshift((sizecode - 1), linegaplog2) + 1

			local lineinfo = table_create(sizecode)
			local abslineinfo = table_create(intervals)

			local lastoffset = 0
			for j = 1, sizecode do
				lastoffset += readByte()
				lineinfo[j] = lastoffset
			end

			local lastline = 0
			for j = 1, intervals do
				lastline += readWord()
				abslineinfo[j] = lastline % (2 ^ 32)
			end

			instructionlineinfo = table_create(sizecode)

			for i = 1, sizecode do 
				--// p->abslineinfo[pc >> p->linegaplog2] + p->lineinfo[pc];
				table_insert(instructionlineinfo, abslineinfo[bit32_rshift(i - 1, linegaplog2) + 1] + lineinfo[i])
			end
		end

		-- // debuginfo
		if readByte() ~= 0 then
			local sizel = readVarInt()
			for i = 1, sizel do
				readVarInt()
				readVarInt()
				readVarInt()
				readByte()
			end
			local sizeupvalues = readVarInt()
			for i = 1, sizeupvalues do
				readVarInt()
			end
		end

		return {
			maxstacksize = maxstacksize;
			numparams = numparams;
			nups = nups;
			isvararg = isvararg;
			linedefined = linedefined;
			debugname = debugname;

			sizecode = sizecode;
			code = codelist;
			debugcode = debugcodelist;

			sizek = sizek;
			k = klist;

			sizep = sizep;
			protos = protolist;

			lineinfoenabled = lineinfoenabled;
			instructionlineinfo = instructionlineinfo;

			bytecodeid = bytecodeid;
		}
	end

	-- userdataRemapping (not used in VM, left unused)
	if typesVersion == 3 then
		local index = readByte()

		while index ~= 0 do
			readVarInt()

			index = readByte()
		end
	end

	local protoCount = readVarInt()
	local protoList = table_create(protoCount)

	for i = 1, protoCount do
		protoList[i] = readProto(i - 1)
	end

	local mainProto = protoList[readVarInt() + 1]

	assert(cursor == buffer_len(stream), "deserializer cursor position mismatch")

	mainProto.debugname = "(main)"

	return {
		stringList = stringList;
		protoList = protoList;

		mainProto = mainProto;

		typesVersion = typesVersion;
	}
end

local function luau_load(module, env, luau_settings)
	if luau_settings == nil then
		luau_settings = luau_newsettings()
	else 
		luau_validatesettings(luau_settings)
	end

	if type(module) ~= "table" then
		module = luau_deserialize(module, luau_settings)
	end

	local protolist = module.protoList
	local mainProto = module.mainProto

	local breakHook = luau_settings.callHooks.breakHook
	local stepHook = luau_settings.callHooks.stepHook
	local interruptHook = luau_settings.callHooks.interruptHook
	local panicHook = luau_settings.callHooks.panicHook

	local alive = true 

	local function luau_close()
		alive = false
	end

	local function luau_wrapclosure(module, proto, upvals)
		local function luau_execute(...)
			local debugging, stack, protos, code, varargs

			if luau_settings.errorHandling then
				debugging, stack, protos, code, varargs = ... 
			else 
				--// Copied from error handling wrapper
				local passed = table_pack(...)
				stack = table_create(proto.maxstacksize)
				varargs = {
					len = 0,
					list = {},
				}

				table_move(passed, 1, proto.numparams, 0, stack)

				if proto.numparams < passed.n then
					local start = proto.numparams + 1
					local len = passed.n - proto.numparams
					varargs.len = len
					table_move(passed, start, start + len - 1, 1, varargs.list)
				end

				passed = nil

				debugging = {pc = 0, name = "NONE"}

				protos = proto.protos 
				code = proto.code
			end 

			local top, pc, open_upvalues, generalized_iterators = -1, 1, setmetatable({}, {__mode = "vs"}), setmetatable({}, {__mode = "ks"})
			local constants = proto.k
			local debugopcodes = proto.debugcode
			local extensions = luau_settings.extensions

			local handlingBreak = false
			local inst, op
			while alive do
				if not handlingBreak then
					inst = code[pc]
					op = inst.opcode
				end

				handlingBreak = false

				debugging.pc = pc
				debugging.top = top
				debugging.name = inst.opname

				pc += 1

				if stepHook then
					stepHook(stack, debugging, proto, module, upvals)
				end

				if op == 0 then --[[ NOP ]]
					--// Do nothing
				elseif op == 1 then --[[ BREAK ]]
					if breakHook then
						local results = table.pack(breakHook(stack, debugging, proto, module, upvals))

						if results[1] then 
							return table_unpack(results, 2, #results)
						end 
					end

					pc -= 1
					op = debugopcodes[pc]
					handlingBreak = true
				elseif op == 2 then --[[ LOADNIL ]]
					stack[inst.A] = nil
				elseif op == 3 then --[[ LOADB ]]
					stack[inst.A] = inst.B == 1
					pc += inst.C
				elseif op == 4 then --[[ LOADN ]]
					stack[inst.A] = inst.D
				elseif op == 5 then --[[ LOADK ]]
					stack[inst.A] = inst.K
				elseif op == 6 then --[[ MOVE ]]
					stack[inst.A] = stack[inst.B]
				elseif op == 7 then --[[ GETGLOBAL ]]
					local kv = inst.K

					stack[inst.A] = extensions[kv] or env[kv]

					pc += 1 --// adjust for aux
				elseif op == 8 then --[[ SETGLOBAL ]]
					local kv = inst.K
					env[kv] = stack[inst.A]

					pc += 1 --// adjust for aux
				elseif op == 9 then --[[ GETUPVAL ]]
					local uv = upvals[inst.B + 1]
					stack[inst.A] = uv.store[uv.index]
				elseif op == 10 then --[[ SETUPVAL ]]
					local uv = upvals[inst.B + 1]
					uv.store[uv.index] = stack[inst.A]
				elseif op == 11 then --[[ CLOSEUPVALS ]]
					for i, uv in open_upvalues do
						if uv.index >= inst.A then
							uv.value = uv.store[uv.index]
							uv.store = uv
							uv.index = "value" --// self reference
							open_upvalues[i] = nil
						end
					end
				elseif op == 12 then --[[ GETIMPORT ]]
					if luau_settings.useImportConstants then
						stack[inst.A] = inst.K
					else
						local count = inst.KC
						local k0 = inst.K0
						local import = extensions[k0] or env[k0]
						if count == 1 then
							stack[inst.A] = import
						elseif count == 2 then
							stack[inst.A] = import[inst.K1]
						elseif count == 3 then
							stack[inst.A] = import[inst.K1][inst.K2]
						end
					end

					pc += 1 --// adjust for aux 
				elseif op == 13 then --[[ GETTABLE ]]
					stack[inst.A] = stack[inst.B][stack[inst.C]]
				elseif op == 14 then --[[ SETTABLE ]]
					stack[inst.B][stack[inst.C]] = stack[inst.A]
				elseif op == 15 then --[[ GETTABLEKS ]]
					local index = inst.K
					stack[inst.A] = stack[inst.B][index]

					pc += 1 --// adjust for aux 
				elseif op == 16 then --[[ SETTABLEKS ]]
					local index = inst.K
					stack[inst.B][index] = stack[inst.A]

					pc += 1 --// adjust for aux
				elseif op == 17 then --[[ GETTABLEN ]]
					stack[inst.A] = stack[inst.B][inst.C + 1]
				elseif op == 18 then --[[ SETTABLEN ]]
					stack[inst.B][inst.C + 1] = stack[inst.A]
				elseif op == 19 then --[[ NEWCLOSURE ]]
					local newPrototype = protolist[protos[inst.D + 1]]

					local nups = newPrototype.nups
					local upvalues = table_create(nups)
					stack[inst.A] = luau_wrapclosure(module, newPrototype, upvalues)

					for i = 1, nups do
						local pseudo = code[pc]

						pc += 1

						local type = pseudo.A

						if type == 0 then --// value
							local upvalue = {
								value = stack[pseudo.B],
								index = "value",--// self reference
							}
							upvalue.store = upvalue

							upvalues[i] = upvalue
						elseif type == 1 then --// reference
							local index = pseudo.B
							local prev = open_upvalues[index]

							if prev == nil then
								prev = {
									index = index,
									store = stack,
								}
								open_upvalues[index] = prev
							end

							upvalues[i] = prev
						elseif type == 2 then --// upvalue
							upvalues[i] = upvals[pseudo.B + 1]
						end
					end
				elseif op == 20 then --[[ NAMECALL ]]
					local A = inst.A
					local B = inst.B

					local kv = inst.K

					local sb = stack[B]

					stack[A + 1] = sb

					pc += 1 --// adjust for aux 

					local useFallback = true

					--// Special handling for native namecall behaviour
					local useNativeHandler = luau_settings.useNativeNamecall

					if useNativeHandler then
						local nativeNamecall = luau_settings.namecallHandler

						local callInst = code[pc]
						local callOp = callInst.opcode

						--// Copied from the CALL handler under
						local callA, callB, callC = callInst.A, callInst.B, callInst.C

						if stepHook then
							stepHook(stack, debugging, proto, module, upvals)
						end

						if interruptHook then
							interruptHook(stack, debugging, proto, module, upvals)	
						end

						local params = if callB == 0 then top - callA else callB - 1
						local ret_list = table_pack(
							nativeNamecall(kv, table_unpack(stack, callA + 1, callA + params))
						)

						if ret_list[1] == true then
							useFallback = false

							pc += 1 --// Skip next CALL instruction

							inst = callInst
							op = callOp
							debugging.pc = pc
							debugging.name = inst.opname

							table_remove(ret_list, 1)

							local ret_num = ret_list.n - 1

							if callC == 0 then
								top = callA + ret_num - 1
							else
								ret_num = callC - 1
							end

							table_move(ret_list, 1, ret_num, callA, stack)
						end
					end

					if useFallback then
						stack[A] = sb[kv]
					end
				elseif op == 21 then --[[ CALL ]]
					if interruptHook then
						interruptHook(stack, debugging, proto, module, upvals)	
					end

					local A, B, C = inst.A, inst.B, inst.C

					local params = if B == 0 then top - A else B - 1
					local func = stack[A]
					local ret_list = table_pack(
						func(table_unpack(stack, A + 1, A + params))
					)

					local ret_num = ret_list.n

					if C == 0 then
						top = A + ret_num - 1
					else
						ret_num = C - 1
					end

					table_move(ret_list, 1, ret_num, A, stack)
				elseif op == 22 then --[[ RETURN ]]
					if interruptHook then
						interruptHook(stack, debugging, proto, module, upvals)	
					end

					local A = inst.A
					local B = inst.B 
					local b = B - 1
					local nresults

					if b == LUA_MULTRET then
						nresults = top - A + 1
					else
						nresults = B - 1
					end

					return table_unpack(stack, A, A + nresults - 1)
				elseif op == 23 then --[[ JUMP ]]
					pc += inst.D
				elseif op == 24 then --[[ JUMPBACK ]]
					if interruptHook then
						interruptHook(stack, debugging, proto, module, upvals)	
					end

					pc += inst.D
				elseif op == 25 then --[[ JUMPIF ]]
					if stack[inst.A] then
						pc += inst.D
					end
				elseif op == 26 then --[[ JUMPIFNOT ]]
					if not stack[inst.A] then
						pc += inst.D
					end
				elseif op == 27 then --[[ JUMPIFEQ ]]
					if stack[inst.A] == stack[inst.aux] then
						pc += inst.D
					else
						pc += 1
					end
				elseif op == 28 then --[[ JUMPIFLE ]]
					if stack[inst.A] <= stack[inst.aux] then
						pc += inst.D
					else
						pc += 1
					end
				elseif op == 29 then --[[ JUMPIFLT ]]
					if stack[inst.A] < stack[inst.aux] then
						pc += inst.D
					else
						pc += 1
					end
				elseif op == 30 then --[[ JUMPIFNOTEQ ]]
					if stack[inst.A] == stack[inst.aux] then
						pc += 1
					else
						pc += inst.D
					end
				elseif op == 31 then --[[ JUMPIFNOTLE ]]
					if stack[inst.A] <= stack[inst.aux] then
						pc += 1
					else
						pc += inst.D
					end
				elseif op == 32 then --[[ JUMPIFNOTLT ]]
					if stack[inst.A] < stack[inst.aux] then
						pc += 1
					else
						pc += inst.D
					end
				elseif op == 33 then --[[ ADD ]]
					stack[inst.A] = stack[inst.B] + stack[inst.C]
				elseif op == 34 then --[[ SUB ]]
					stack[inst.A] = stack[inst.B] - stack[inst.C]
				elseif op == 35 then --[[ MUL ]]
					stack[inst.A] = stack[inst.B] * stack[inst.C]
				elseif op == 36 then --[[ DIV ]]
					stack[inst.A] = stack[inst.B] / stack[inst.C]
				elseif op == 37 then --[[ MOD ]]
					stack[inst.A] = stack[inst.B] % stack[inst.C]
				elseif op == 38 then --[[ POW ]]
					stack[inst.A] = stack[inst.B] ^ stack[inst.C]
				elseif op == 39 then --[[ ADDK ]]
					stack[inst.A] = stack[inst.B] + inst.K
				elseif op == 40 then --[[ SUBK ]]
					stack[inst.A] = stack[inst.B] - inst.K
				elseif op == 41 then --[[ MULK ]]
					stack[inst.A] = stack[inst.B] * inst.K
				elseif op == 42 then --[[ DIVK ]]
					stack[inst.A] = stack[inst.B] / inst.K
				elseif op == 43 then --[[ MODK ]]
					stack[inst.A] = stack[inst.B] % inst.K
				elseif op == 44 then --[[ POWK ]]
					stack[inst.A] = stack[inst.B] ^ inst.K
				elseif op == 45 then --[[ AND ]]
					local value = stack[inst.B]
					stack[inst.A] = if value then stack[inst.C] or false else value
				elseif op == 46 then --[[ OR ]]
					local value = stack[inst.B]
					stack[inst.A] = if value then value else stack[inst.C] or false
				elseif op == 47 then --[[ ANDK ]]
					local value = stack[inst.B]
					stack[inst.A] = if value then inst.K or false else value
				elseif op == 48 then --[[ ORK ]]
					local value = stack[inst.B]
					stack[inst.A] = if value then value else inst.K or false
				elseif op == 49 then --[[ CONCAT ]]
					local s = ""
					for i = inst.B, inst.C do
						s ..= stack[i]
					end
					stack[inst.A] = s
				elseif op == 50 then --[[ NOT ]]
					stack[inst.A] = not stack[inst.B]
				elseif op == 51 then --[[ MINUS ]]
					stack[inst.A] = -stack[inst.B]
				elseif op == 52 then --[[ LENGTH ]]
					stack[inst.A] = #stack[inst.B]
				elseif op == 53 then --[[ NEWTABLE ]]
					stack[inst.A] = table_create(inst.aux)

					pc += 1 --// adjust for aux 
				elseif op == 54 then --[[ DUPTABLE ]]
					local template = inst.K
					local serialized = {}
					for _, id in template do
						serialized[constants[id + 1]] = nil
					end
					stack[inst.A] = serialized
				elseif op == 55 then --[[ SETLIST ]]
					local A = inst.A
					local B = inst.B
					local c = inst.C - 1

					if c == LUA_MULTRET then
						c = top - B + 1
					end

					table_move(stack, B, B + c - 1, inst.aux, stack[A])

					pc += 1 --// adjust for aux 
				elseif op == 56 then --[[ FORNPREP ]]
					local A = inst.A

					local limit = stack[A]
					if not ttisnumber(limit) then
						local number = tonumber(limit)

						if number == nil then
							error("invalid 'for' limit (number expected)")
						end

						stack[A] = number
						limit = number
					end

					local step = stack[A + 1]
					if not ttisnumber(step) then
						local number = tonumber(step)

						if number == nil then
							error("invalid 'for' step (number expected)")
						end

						stack[A + 1] = number
						step = number
					end

					local index = stack[A + 2]
					if not ttisnumber(index) then
						local number = tonumber(index)

						if number == nil then
							error("invalid 'for' index (number expected)")
						end

						stack[A + 2] = number
						index = number
					end

					if step > 0 then
						if not (index <= limit) then
							pc += inst.D
						end
					else
						if not (limit <= index) then
							pc += inst.D
						end
					end
				elseif op == 57 then --[[ FORNLOOP ]]
					if interruptHook then
						interruptHook(stack, debugging, proto, module, upvals)	
					end

					local A = inst.A
					local limit = stack[A]
					local step = stack[A + 1]
					local index = stack[A + 2] + step

					stack[A + 2] = index

					if step > 0 then
						if index <= limit then
							pc += inst.D
						end
					else
						if limit <= index then
							pc += inst.D
						end
					end
				elseif op == 58 then --[[ FORGLOOP ]]
					if interruptHook then
						interruptHook(stack, debugging, proto, module, upvals)	
					end

					local A = inst.A
					local res = inst.K

					top = A + 6

					local it = stack[A]

					if (luau_settings.generalizedIteration == false) or ttisfunction(it) then 
						local vals = { it(stack[A + 1], stack[A + 2]) }
						table_move(vals, 1, res, A + 3, stack)

						if stack[A + 3] ~= nil then
							stack[A + 2] = stack[A + 3]
							pc += inst.D
						else
							pc += 1
						end
					else
						local ok, vals = coroutine_resume(generalized_iterators[inst], it, stack[A + 1], stack[A + 2])
						if not ok then
							error(vals)
						end
						if vals == LUA_GENERALIZED_TERMINATOR then 
							generalized_iterators[inst] = nil
							pc += 1
						else
							table_move(vals, 1, res, A + 3, stack)

							stack[A + 2] = stack[A + 3]
							pc += inst.D
						end
					end
				elseif op == 59 then --[[ FORGPREP_INEXT ]]
					if not ttisfunction(stack[inst.A]) then
						error(string_format("attempt to iterate over a %s value", type(stack[inst.A]))) -- FORGPREP_INEXT encountered non-function value
					end

					pc += inst.D
				elseif op == 60 then --[[ FASTCALL3 ]]
					--[[ Skipped ]]
					pc += 1 --// adjust for aux
				elseif op == 61 then --[[ FORGPREP_NEXT ]]
					if not ttisfunction(stack[inst.A]) then
						error(string_format("attempt to iterate over a %s value", type(stack[inst.A]))) -- FORGPREP_NEXT encountered non-function value
					end

					pc += inst.D
				elseif op == 63 then --[[ GETVARARGS ]]
					local A = inst.A
					local b = inst.B - 1

					if b == LUA_MULTRET then
						b = varargs.len
						top = A + b - 1
					end

					table_move(varargs.list, 1, b, A, stack)
				elseif op == 64 then --[[ DUPCLOSURE ]]
					local newPrototype = protolist[inst.K + 1] --// correct behavior would be to reuse the prototype if possible but it would not be useful here

					local nups = newPrototype.nups
					local upvalues = table_create(nups)
					stack[inst.A] = luau_wrapclosure(module, newPrototype, upvalues)

					for i = 1, nups do
						local pseudo = code[pc]
						pc += 1

						local type = pseudo.A
						if type == 0 then --// value
							local upvalue = {
								value = stack[pseudo.B],
								index = "value",--// self reference
							}
							upvalue.store = upvalue

							upvalues[i] = upvalue

							--// references dont get handled by DUPCLOSURE
						elseif type == 2 then --// upvalue
							upvalues[i] = upvals[pseudo.B + 1]
						end
					end
				elseif op == 65 then --[[ PREPVARARGS ]]
					--[[ Handled by wrapper ]]
				elseif op == 66 then --[[ LOADKX ]]
					local kv = inst.K
					stack[inst.A] = kv

					pc += 1 --// adjust for aux 
				elseif op == 67 then --[[ JUMPX ]]
					if interruptHook then
						interruptHook(stack, debugging, proto, module, upvals)	
					end

					pc += inst.E
				elseif op == 68 then --[[ FASTCALL ]]
					--[[ Skipped ]]
				elseif op == 69 then --[[ COVERAGE ]]
					inst.E += 1
				elseif op == 70 then --[[ CAPTURE ]]
					--[[ Handled by CLOSURE ]]
					error("encountered unhandled CAPTURE")
				elseif op == 71 then --[[ SUBRK ]]
					stack[inst.A] = inst.K - stack[inst.C]
				elseif op == 72 then --[[ DIVRK ]]
					stack[inst.A] = inst.K / stack[inst.C]
				elseif op == 73 then --[[ FASTCALL1 ]]
					--[[ Skipped ]]
				elseif op == 74 then --[[ FASTCALL2 ]]
					--[[ Skipped ]]
					pc += 1 --// adjust for aux
				elseif op == 75 then --[[ FASTCALL2K ]]
					--[[ Skipped ]]
					pc += 1 --// adjust for aux
				elseif op == 76 then --[[ FORGPREP ]]
					local iterator = stack[inst.A]

					if luau_settings.generalizedIteration and not ttisfunction(iterator) then
						local loopInstruction = code[pc + inst.D]
						if generalized_iterators[loopInstruction] == nil then 
							local function gen_iterator(...)
								for r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r135, r136, r137, r138, r139, r140, r141, r142, r143, r144, r145, r146, r147, r148, r149, r150, r151, r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176, r177, r178, r179, r180, r181, r182, r183, r184, r185, r186, r187, r188, r189, r190, r191, r192, r193, r194, r195, r196, r197, r198, r199, r200 in ... do 
									coroutine_yield({r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r135, r136, r137, r138, r139, r140, r141, r142, r143, r144, r145, r146, r147, r148, r149, r150, r151, r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176, r177, r178, r179, r180, r181, r182, r183, r184, r185, r186, r187, r188, r189, r190, r191, r192, r193, r194, r195, r196, r197, r198, r199, r200})
								end

								coroutine_yield(LUA_GENERALIZED_TERMINATOR)
							end

							generalized_iterators[loopInstruction] = coroutine_create(gen_iterator)
						end
					end

					pc += inst.D
				elseif op == 77 then --[[ JUMPXEQKNIL ]]
					local kn = inst.KN

					if (stack[inst.A] == nil) ~= kn then
						pc += inst.D
					else
						pc += 1
					end
				elseif op == 78 then --[[ JUMPXEQKB ]]
					local kv = inst.K
					local kn = inst.KN
					local ra = stack[inst.A]

					if (ttisboolean(ra) and (ra == kv)) ~= kn then
						pc += inst.D
					else
						pc += 1
					end
				elseif op == 79 then --[[ JUMPXEQKN ]]
					local kv = inst.K
					local kn = inst.KN
					local ra = stack[inst.A]

					if (ra == kv) ~= kn then
						pc += inst.D
					else
						pc += 1
					end
				elseif op == 80 then --[[ JUMPXEQKS ]]
					local kv = inst.K
					local kn = inst.KN
					local ra = stack[inst.A]

					if (ra == kv) ~= kn then
						pc += inst.D
					else
						pc += 1
					end
				elseif op == 81 then --[[ IDIV ]]
					stack[inst.A] = stack[inst.B] // stack[inst.C]
				elseif op == 82 then --[[ IDIVK ]]
					stack[inst.A] = stack[inst.B] // inst.K
				else
					error("Unsupported Opcode: " .. inst.opname .. " op: " .. op)
				end
			end

			for i, uv in open_upvalues do
				uv.value = uv.store[uv.index]
				uv.store = uv
				uv.index = "value" --// self reference
				open_upvalues[i] = nil
			end

			for i, iter in generalized_iterators do 
				coroutine_close(iter)
				generalized_iterators[i] = nil
			end
		end

		local function wrapped(...)
			local passed = table_pack(...)
			local stack = table_create(proto.maxstacksize)
			local varargs = {
				len = 0,
				list = {},
			}

			table_move(passed, 1, proto.numparams, 0, stack)

			if proto.numparams < passed.n then
				local start = proto.numparams + 1
				local len = passed.n - proto.numparams
				varargs.len = len
				table_move(passed, start, start + len - 1, 1, varargs.list)
			end

			passed = nil

			local debugging = {pc = 0, name = "NONE"}
			local result
			if luau_settings.errorHandling then 
				result = table_pack(pcall(luau_execute, debugging, stack, proto.protos, proto.code, varargs))
			else
				result = table_pack(true, luau_execute(debugging, stack, proto.protos, proto.code, varargs))
			end

			if result[1] then
				return table_unpack(result, 2, result.n)
			else
				local message = result[2]

				if panicHook then
					panicHook(message, stack, debugging, proto, module, upvals)
				end

				if ttisstring(message) == false then
					if luau_settings.allowProxyErrors then
						error(message)
					else 
						message = type(message)
					end
				end

				if proto.lineinfoenabled then
					return error(string_format("Fiu VM Error { Name: %s Line: %s PC: %s Opcode: %s }: %s", proto.debugname, proto.instructionlineinfo[debugging.pc], debugging.pc, debugging.name, message), 0)
				else 
					return error(string_format("Fiu VM Error { Name: %s PC: %s Opcode: %s }: %s", proto.debugname, debugging.pc, debugging.name, message), 0)
				end
			end
		end

		if luau_settings.errorHandling then 
			return wrapped
		else 
			return luau_execute
		end 
	end

	return luau_wrapclosure(module, mainProto),  luau_close
end

return {
	luau_newsettings = luau_newsettings,
	luau_validatesettings = luau_validatesettings,
	luau_deserialize = luau_deserialize,
	luau_load = luau_load,
	luau_getcoverage = luau_getcoverage,
}
end;
};
G2L_MODULES[G2L["6"]] = {
Closure = function()
    local script = G2L["6"];--!optimize 2
--// LuauCeption - Compiler variant
--// Luau 0.648 (e491128f95ceea762171525fccbb557b84811e1b)
--// https://github.com/RealEthanPlayzDev/LuauCeption/

local STUB_WARN = true

--// Vanilla Luau Vector3 implementation
--// Provides Vector3 lib if no existing implementation is available
--// Missing: xAxis, yAxis, zAxis, Magnitude, Unit, and all namecall functions
--// Last checked: 06 April 2024
local type = type
local typeof = typeof
local Vector3 = Vector3
if not Vector3 then
	local Vector3Internal = {}
	Vector3Internal.__index = Vector3Internal
	Vector3Internal.__type = "Vector3"
	Vector3Internal.__metatable = "This metatable is locked"

	Vector3 = {}
	Vector3.new = function(x, y, z)
		return setmetatable({X = x or 0, Y = y or 0, Z = z or 0}, Vector3Internal)
	end
	Vector3.zero = Vector3.new(0,0,0)
	Vector3.one = Vector3.new(1,1,1)
	table.freeze(Vector3)

	Vector3Internal.__concat = function()
		assert(false, "attempt to concatenate Vector3 with Vector3")
		return
	end
	Vector3Internal.__unm = function(self)
		return Vector3.new(-self.X, -self.Y, -self.Z)
	end
	Vector3Internal.__add = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X + v3_2.X, self.Y + v3_2.Y, self.Z + v3_2.Z)
	end
	Vector3Internal.__sub = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X - v3_2.X, self.Y - v3_2.Y, self.Z - v3_2.Z)
	end
	Vector3Internal.__mul = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X * v3_2.X, self.Y * v3_2.Y, self.Z * v3_2.Z)
	end
	Vector3Internal.__div = function(self, v3_2)
		v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
		return Vector3.new(self.X / v3_2.X, self.Y / v3_2.Y, self.Z / v3_2.Z)
	end
	Vector3Internal.__mod = function(_, t)
		if (typeof(t) == "table") and (t["__type"] == "Vector3") then
			assert(false, "attempt to perform arithmetic (mod) on Vector3")
		else
			assert(false, "attempt to perform arithmetic (mod) on Vector3 and "..typeof(t))
		end
		return
	end
	Vector3Internal.__pow = function(_, t)
		if (typeof(t) == "table") and (t["__type"] == "Vector3") then
			assert(false, "attempt to perform arithmetic (pow) on Vector3")
		else
			assert(false, "attempt to perform arithmetic (pow) on Vector3 and "..typeof(t))
		end
		return
	end
	Vector3Internal.__tostring = function(self)
		return self.X..", "..self.Y..", "..self.Z
	end
	Vector3Internal.__eq = function(self, v3_2)
		if (typeof(v3_2) ~= "Vector3") then return false end
		return (self.X == v3_2.X) and (self.Y == v3_2.Y) and (self.Z == v3_2.Z)
	end
	Vector3Internal.__lt = function(self, v3_2)
		if (typeof(v3_2) ~= "Vector3") then return false end
		return (self.X < v3_2.X) and (self.Y < v3_2.Y) and (self.Z < v3_2.Z)
	end
	Vector3Internal.__le = function(self, v3_2)
		if (typeof(v3_2) ~= "Vector3") then return false end
		return (self.X <= v3_2.X) and (self.Y <= v3_2.Y) and (self.Z <= v3_2.Z)
	end
	Vector3Internal.__len = function()
		assert(false, "attempt to get length of a Vector3 value")
		return
	end

	local oldtype = type
	type = function(v)
		return if (oldtype(v) == "table") and v["__type"] then v["__type"] else oldtype(v)
	end

	local oldtypeof = typeof
	typeof = function(v)
		return if (oldtypeof(v) == "table") and v["__type"] then v["__type"] else oldtypeof(v)
	end
end

local function no_op(num)
	return num
end

local bit_lshift = bit32.lshift
local bit_rshift = bit32.rshift
local bit_arshift = bit32.arshift

local bit_and = bit32.band
local bit_or = bit32.bor
local bit_xor = bit32.bxor
local bit_not = bit32.bnot

local bit_extract = bit32.extract
local bit_replace = bit32.replace

-- X: a[0 __21]
-- Y: a[22__31]
--  | b[0 __11]
-- Z: b[12__31]
local constructor = Vector3.new

local rt_i64_ZERO = constructor(0, 0, 0)

local function rt_i64_from_u32(data_1, data_2)
	local x = bit_and(data_1, 0x3FFFFF)
	local y = bit_and(data_2, 0x3FFFFF)
	local z = bit_replace(bit_rshift(data_1, 22), bit_rshift(data_2, 22), 10, 10)

	return constructor(x, y, z)
end

local function rt_i64_is_zero(value)
	return value == rt_i64_ZERO
end

local function load_d1(value)
	return bit_replace(bit_and(value.X, 0x3FFFFF), value.Z, 22, 10)
end

local function load_d2(value)
	return bit_replace(bit_and(value.Y, 0x3FFFFF), bit_rshift(value.Z, 10), 22, 10)
end

local function rt_i64_into_u32(value)
	local x, y, z = value.X, value.Y, value.Z
	return bit_replace(bit_and(x, 0x3FFFFF), z, 22, 10), bit_replace(bit_and(y, 0x3FFFFF), bit_rshift(z, 10), 22, 10)
end

local function rt_i64_from_u64(value)
	return rt_i64_from_u32(bit_and(value % 0x100000000), bit_and(value / 0x100000000))
end

local function rt_convert_f64_u64(value)
	local value_1, value_2 = rt_i64_into_u32(value)
	return value_1 + value_2 * 0x100000000
end

local rt_i64_ONE = rt_i64_from_u64(1)
local NUM_SIX_FOUR = rt_i64_from_u64(64)
local NUM_BIT_26 = rt_i64_from_u64(0x4000000)
local NUM_BIT_52 = rt_i64_from_u64(0x10000000000000)

local function rt_add_i64(lhs, rhs)
	local lhs_1, lhs_2 = rt_i64_into_u32(lhs)
	local rhs_1, rhs_2 = rt_i64_into_u32(rhs)
	local data_1 = lhs_1 + rhs_1
	local data_2 = lhs_2 + rhs_2

	if data_1 >= 0x100000000 then
		data_1 = data_1 - 0x100000000
		data_2 = data_2 + 1
	end

	if data_2 >= 0x100000000 then
		data_2 = data_2 - 0x100000000
	end

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_sub_i64(lhs, rhs)
	local lhs_1, lhs_2 = rt_i64_into_u32(lhs)
	local rhs_1, rhs_2 = rt_i64_into_u32(rhs)
	local data_1 = lhs_1 - rhs_1
	local data_2 = lhs_2 - rhs_2

	if data_1 < 0 then
		data_1 = data_1 + 0x100000000
		data_2 = data_2 - 1
	end

	if data_2 < 0 then
		data_2 = data_2 + 0x100000000
	end

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_lt_u64(lhs, rhs)
	local data_l_2 = load_d2(lhs)
	local data_r_2 = load_d2(rhs)

	return data_l_2 < data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) < load_d1(rhs))
end

local function rt_mul_i64(lhs, rhs)
	if rt_i64_is_zero(lhs) or rt_i64_is_zero(rhs) then
		return rt_i64_ZERO
	elseif rt_lt_u64(lhs, NUM_BIT_26) and rt_lt_u64(rhs, NUM_BIT_26) then
		return rt_i64_from_u64(load_d1(lhs) * load_d1(rhs))
	end

	-- Divide each long into 4 chunks of 16 bits, and then add up 4x4 products_
	-- We can skip products that would overflow_
	local lhs_1, lhs_2 = rt_i64_into_u32(lhs)
	local rhs_1, rhs_2 = rt_i64_into_u32(rhs)

	local a48 = bit_rshift(lhs_2, 16)
	local a32 = bit_and(lhs_2, 0xFFFF)
	local a16 = bit_rshift(lhs_1, 16)
	local a00 = bit_and(lhs_1, 0xFFFF)

	local b48 = bit_rshift(rhs_2, 16)
	local b32 = bit_and(rhs_2, 0xFFFF)
	local b16 = bit_rshift(rhs_1, 16)
	local b00 = bit_and(rhs_1, 0xFFFF)

	local c00 = a00 * b00
	local c16 = bit_rshift(c00, 16)

	c00 = bit_and(c00, 0xFFFF)
	c16 = c16 + a16 * b00

	local c32 = bit_rshift(c16, 16)

	c16 = bit_and(c16, 0xFFFF)
	c16 = c16 + a00 * b16
	c32 = c32 + bit_rshift(c16, 16)
	c16 = bit_and(c16, 0xFFFF)
	c32 = c32 + a32 * b00

	local c48 = bit_rshift(c32, 16)

	c32 = bit_and(c32, 0xFFFF)
	c32 = c32 + a16 * b16
	c48 = c48 + bit_rshift(c32, 16)
	c32 = bit_and(c32, 0xFFFF)
	c32 = c32 + a00 * b32
	c48 = c48 + bit_rshift(c32, 16)
	c32 = bit_and(c32, 0xFFFF)
	c48 = c48 + a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48
	c48 = bit_and(c48, 0xFFFF)

	local data_1 = bit_replace(c00, c16, 16, 16)
	local data_2 = bit_replace(c32, c48, 16, 16)

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_bit_or_i64(lhs, rhs)
	local x = bit_or(lhs.X, rhs.X)
	local y = bit_or(lhs.Y, rhs.Y)
	local z = bit_or(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

local function rt_shl_i64(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local pad = 32 - count
		local lhs_1, lhs_2 = rt_i64_into_u32(lhs)

		local data_1 = bit_lshift(lhs_1, count)
		local data_2 = bit_replace(bit_rshift(lhs_1, pad), lhs_2, count, pad)

		return rt_i64_from_u32(data_1, data_2)
	else
		local lhs_1 = load_d1(lhs)

		return rt_i64_from_u32(0, bit_lshift(lhs_1, count - 32))
	end
end

local function rt_div_u64(lhs, rhs)
	if rt_i64_is_zero(rhs) then
		error("division by zero")
	elseif rt_i64_is_zero(lhs) then
		return rt_i64_ZERO, rt_i64_ZERO
	elseif rt_lt_u64(lhs, NUM_BIT_52) and rt_lt_u64(rhs, NUM_BIT_52) then
		local lhs_u = rt_convert_f64_u64(lhs)
		local rhs_u = rt_convert_f64_u64(rhs)

		return rt_i64_from_u64(lhs_u / rhs_u), rt_i64_from_u64(lhs_u % rhs_u)
	end

	local quotient = rt_i64_ZERO
	local remainder = rt_i64_ZERO

	local num_1, num_2 = rt_i64_into_u32(lhs)

	for i = 63, 0, -1 do
		local rem_1, rem_2 = rt_i64_into_u32(rt_shl_i64(remainder, rt_i64_ONE))

		if i > 31 then
			rem_1 = bit_or(rem_1, bit_extract(num_2, i - 32, 1))
		else
			rem_1 = bit_or(rem_1, bit_extract(num_1, i, 1))
		end

		remainder = rt_i64_from_u32(rem_1, rem_2)

		if not rt_lt_u64(remainder, rhs) then
			remainder = rt_sub_i64(remainder, rhs)
			quotient = rt_bit_or_i64(quotient, rt_shl_i64(rt_i64_ONE, rt_i64_from_u32(i, 0)))
		end
	end

	return quotient, remainder
end

local function rt_i64_is_negative(value)
	return value.Z >= 0x80000
end

local function rt_i64_negate(value)
	local value_1, value_2 = rt_i64_into_u32(value)
	local data_1 = bit_not(value_1) + 1
	local data_2 = bit_not(value_2)

	if data_1 >= 0x100000000 then
		data_1 = data_1 - 0x100000000
		data_2 = data_2 + 1
	end

	if data_2 >= 0x100000000 then
		data_2 = data_2 - 0x100000000
	end

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_div_i64(lhs, rhs)
	local left_negative = rt_i64_is_negative(lhs)
	local right_negative = rt_i64_is_negative(rhs)

	if left_negative then
		lhs = rt_i64_negate(lhs)
	end

	if right_negative then
		rhs = rt_i64_negate(rhs)
	end

	local quotient, remainder = rt_div_u64(lhs, rhs)

	if left_negative ~= right_negative then
		quotient = rt_i64_negate(quotient)
	end

	if left_negative then
		remainder = rt_i64_negate(remainder)
	end

	return quotient, remainder
end

local function rt_bit_and_i64(lhs, rhs)
	local x = bit_and(lhs.X, rhs.X)
	local y = bit_and(lhs.Y, rhs.Y)
	local z = bit_and(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

local function rt_bit_not_i64(value)
	local x = bit_and(bit_not(value.X), 0xFFFFFF)
	local y = bit_and(bit_not(value.Y), 0xFFFFFF)
	local z = bit_and(bit_not(value.Z), 0xFFFFFF)

	return constructor(x, y, z)
end

local function rt_bit_xor_i64(lhs, rhs)
	local x = bit_xor(lhs.X, rhs.X)
	local y = bit_xor(lhs.Y, rhs.Y)
	local z = bit_xor(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

local function rt_shr_u64(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local lhs_1, lhs_2 = rt_i64_into_u32(lhs)

		local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
		local data_2 = bit_rshift(lhs_2, count)

		return rt_i64_from_u32(data_1, data_2)
	else
		local lhs_2 = load_d2(lhs)

		return rt_i64_from_u32(bit_rshift(lhs_2, count - 32), 0)
	end
end

local function rt_shr_i64(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local lhs_1, lhs_2 = rt_i64_into_u32(lhs)

		local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
		local data_2 = bit_arshift(lhs_2, count)

		return rt_i64_from_u32(data_1, data_2)
	else
		local lhs_2 = load_d2(lhs)

		local data_1 = bit_arshift(lhs_2, count - 32)
		local data_2 = lhs_2 >= 0x80000000 and 0xFFFFFFFF or 0

		return rt_i64_from_u32(data_1, data_2)
	end
end

local function rt_rotl_i64(lhs, rhs)
	if rt_i64_is_zero(rhs) then
		return lhs
	else
		local data_1 = rt_shl_i64(lhs, rhs)
		local data_2 = rt_shr_u64(lhs, rt_sub_i64(NUM_SIX_FOUR, rhs))

		return rt_bit_or_i64(data_1, data_2)
	end
end

local function rt_rotr_i64(lhs, rhs)
	if rt_i64_is_zero(rhs) then
		return lhs
	else
		local data_1 = rt_shr_u64(lhs, rhs)
		local data_2 = rt_shl_i64(lhs, rt_sub_i64(NUM_SIX_FOUR, rhs))

		return rt_bit_or_i64(data_1, data_2)
	end
end

local function rt_eq_i64(lhs, rhs)
	return lhs == rhs
end

local function rt_gt_u64(lhs, rhs)
	local data_l_2 = load_d2(lhs)
	local data_r_2 = load_d2(rhs)

	return data_l_2 > data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) > load_d1(rhs))
end

local function rt_lt_i64(lhs, rhs)
	local neg_a = rt_i64_is_negative(lhs)
	local neg_b = rt_i64_is_negative(rhs)

	if neg_a and not neg_b then
		return true
	elseif not neg_a and neg_b then
		return false
	else
		return rt_i64_is_negative(rt_sub_i64(lhs, rhs))
	end
end

local function rt_gt_i64(lhs, rhs)
	local neg_a = rt_i64_is_negative(lhs)
	local neg_b = rt_i64_is_negative(rhs)

	if neg_a and not neg_b then
		return false
	elseif not neg_a and neg_b then
		return true
	else
		return rt_i64_is_negative(rt_sub_i64(rhs, lhs))
	end
end

local function rt_convert_f64_i32(num)
	return bit_xor(num, 0x80000000) - 0x80000000
end

local assert = assert

local math_abs = math.abs
local math_fmod = math.fmod
local math_modf = math.modf
local math_round = math.round
local math_sign = math.sign
local math_min = math.min
local math_max = math.max

local function rt_add_i32(lhs, rhs)
	return bit_or(lhs + rhs, 0)
end

local function rt_sub_i32(lhs, rhs)
	return bit_or(lhs - rhs, 0)
end

local function rt_mul_i32(lhs, rhs)
	if (lhs + rhs) < 0x8000000 then
		return bit_or(lhs * rhs, 0)
	else
		local a16 = bit_rshift(lhs, 16)
		local a00 = bit_and(lhs, 0xFFFF)
		local b16 = bit_rshift(rhs, 16)
		local b00 = bit_and(rhs, 0xFFFF)

		local c00 = a00 * b00
		local c16 = a16 * b00 + a00 * b16

		return bit_or(c00 + bit_lshift(c16, 16), 0)
	end
end

local function rt_div_i32(lhs, rhs)
	assert(rhs ~= 0, "division by zero")

	lhs = rt_convert_f64_i32(lhs)
	rhs = rt_convert_f64_i32(rhs)

	return bit_or(math_modf(lhs / rhs), 0)
end

local function rt_div_u32(lhs, rhs)
	assert(rhs ~= 0, "division by zero")

	return bit_or(math_modf(lhs / rhs), 0)
end

local function rt_rem_i32(lhs, rhs)
	assert(rhs ~= 0, "division by zero")

	lhs = rt_convert_f64_i32(lhs)
	rhs = rt_convert_f64_i32(rhs)

	return bit_or(math_fmod(lhs, rhs), 0)
end

local function rt_rem_i64(lhs, rhs)
	local _, remainder = rt_div_i64(lhs, rhs)

	return remainder
end

local function rt_rem_u64(lhs, rhs)
	local _, remainder = rt_div_u64(lhs, rhs)

	return remainder
end

local function rt_neg_f64(num)
	return -num
end

local function rt_min_f64(lhs, rhs)
	if rhs == rhs then
		return math_min(lhs, rhs)
	else
		return rhs
	end
end

local function rt_max_f64(lhs, rhs)
	if rhs == rhs then
		return math_max(lhs, rhs)
	else
		return rhs
	end
end

local buffer_create = buffer.create

local CP_INSTANCE = buffer_create(8)

local buffer_write_f64 = buffer.writef64
local buffer_read_i8 = buffer.readi8

local function rt_copysign_f64(lhs, rhs)
	buffer_write_f64(CP_INSTANCE, 0, rhs)

	if buffer_read_i8(CP_INSTANCE, 7) >= 0 then
		return (math_abs(lhs))
	else
		return -math_abs(lhs)
	end
end

local function rt_nearest_f32(num)
	local result = math_round(num)

	if (math_abs(num) + 0.5) % 2 == 1 then
		return result - math_sign(result)
	else
		return result
	end
end

local bit_countlz = bit32.countlz
local bit_countrz = bit32.countrz

local function rt_popcnt_i32(num)
	num = num - bit_and(bit_rshift(num, 1), 0x55555555)
	num = bit_and(num, 0x33333333) + bit_and(bit_rshift(num, 2), 0x33333333)
	num = bit_and((num + bit_rshift(num, 4)), 0x0F0F0F0F)
	num = num + bit_rshift(num, 8)
	num = num + bit_rshift(num, 16)
	return bit_and(num, 0x0000003F)
end

local function rt_clz_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)
	local temp

	if data_2 == 0 then
		temp = bit_countlz(data_1) + 32
	else
		temp = bit_countlz(data_2)
	end

	return rt_i64_from_u32(temp, 0)
end

local function rt_ctz_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)
	local temp

	if data_1 == 0 then
		temp = bit_countrz(data_2) + 32
	else
		temp = bit_countrz(data_1)
	end

	return rt_i64_from_u32(temp, 0)
end

local function rt_popcnt_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)
	local temp = rt_popcnt_i32(data_1) + rt_popcnt_i32(data_2)

	return rt_i64_from_u32(temp, 0)
end

local function rt_le_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) <= rt_convert_f64_i32(rhs)
end

local function rt_lt_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) < rt_convert_f64_i32(rhs)
end

local function rt_ge_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) >= rt_convert_f64_i32(rhs)
end

local function rt_gt_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) > rt_convert_f64_i32(rhs)
end

local function rt_ne_i64(lhs, rhs)
	return not rt_eq_i64(lhs, rhs)
end

local function rt_le_i64(lhs, rhs)
	return rt_lt_i64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local function rt_le_u64(lhs, rhs)
	return rt_lt_u64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local function rt_ge_i64(lhs, rhs)
	return rt_gt_i64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local function rt_ge_u64(lhs, rhs)
	return rt_gt_u64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local bit_lrotate = bit32.lrotate
local bit_rrotate = bit32.rrotate

local function rt_shl_i32(lhs, rhs)
	return bit_lshift(lhs, rhs % 32)
end

local function rt_shr_u32(lhs, rhs)
	return bit_rshift(lhs, rhs % 32)
end

local function rt_shr_i32(lhs, rhs)
	return bit_arshift(lhs, rhs % 32)
end

local function rt_rotl_i32(lhs, rhs)
	return bit_lrotate(lhs, rhs % 32)
end

local function rt_rotr_i32(lhs, rhs)
	return bit_rrotate(lhs, rhs % 32)
end

local math_ceil = math.ceil
local math_floor = math.floor
local math_clamp = math.clamp

local NUM_MIN_I64 = rt_i64_from_u32(0, 0x80000000)
local NUM_MAX_I64 = rt_i64_from_u32(0xFFFFFFFF, 0x7FFFFFFF)
local NUM_MAX_U64 = rt_i64_from_u32(0xFFFFFFFF, 0xFFFFFFFF)

local function rt_truncate_f64(num)
	if num >= 0 then
		return math_floor(num)
	else
		return math_ceil(num)
	end
end

local function rt_wrap_i32_i64(num)
	local data_1, _ = rt_i64_into_u32(num)

	return data_1
end

local function rt_truncate_i32_f64(num)
	return bit_or(rt_truncate_f64(num), 0)
end

local function rt_truncate_i64_f64(num)
	if num < 0 then
		local temp = rt_i64_from_u64(-num)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u64(num)
	end
end

local function rt_truncate_u64_f64(num)
	if num <= 0 then
		return rt_i64_ZERO
	else
		return rt_i64_from_u64(math_floor(num))
	end
end

local function rt_saturate_i32_f64(num)
	local temp = math_clamp(rt_truncate_f64(num), -0x80000000, 0x7FFFFFFF)

	return bit_or(temp, 0)
end

local function rt_saturate_u32_f64(num)
	return math_clamp(rt_truncate_f64(num), 0, 0xFFFFFFFF)
end

local function rt_saturate_i64_f64(num)
	if num >= 2 ^ 63 - 1 then
		return NUM_MAX_I64
	elseif num <= -2 ^ 63 then
		return NUM_MIN_I64
	else
		return rt_truncate_i64_f64(num)
	end
end

local function rt_saturate_u64_f64(num)
	if num >= 2 ^ 64 then
		return NUM_MAX_U64
	elseif num <= 0 then
		return rt_i64_ZERO
	else
		return rt_truncate_i64_f64(num)
	end
end

local function rt_extend_i32_n8(num)
	num = bit_and(num, 0xFF)

	if num >= 0x80 then
		return bit_or(num - 0x100, 0)
	else
		return num
	end
end

local function rt_extend_i32_n16(num)
	num = bit_and(num, 0xFFFF)

	if num >= 0x8000 then
		return bit_or(num - 0x10000, 0)
	else
		return num
	end
end

local function rt_extend_i64_n8(num)
	local data_1, _ = rt_i64_into_u32(num)

	data_1 = bit_and(data_1, 0xFF)

	if data_1 >= 0x80 then
		local temp = rt_i64_from_u32(-data_1 + 0x100, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(data_1, 0)
	end
end

local function rt_extend_i64_n16(num)
	local data_1, _ = rt_i64_into_u32(num)

	data_1 = bit_and(data_1, 0xFFFF)

	if data_1 >= 0x8000 then
		local temp = rt_i64_from_u32(-data_1 + 0x10000, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(data_1, 0)
	end
end

local function rt_extend_i64_n32(num)
	local data_1, _ = rt_i64_into_u32(num)

	if data_1 >= 0x80000000 then
		local temp = rt_i64_from_u32(-data_1 + 0x100000000, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(data_1, 0)
	end
end

local function rt_extend_i64_i32(num)
	if num >= 0x80000000 then
		local temp = rt_i64_from_u32(-num + 0x100000000, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(num, 0)
	end
end

local function rt_extend_i64_u32(num)
	return rt_i64_from_u32(num, 0)
end

local function rt_convert_f64_i64(num)
	if rt_i64_is_negative(num) then
		local temp = rt_i64_negate(num)

		return -rt_convert_f64_u64(temp)
	else
		return rt_convert_f64_u64(num)
	end
end

local RE_INSTANCE = buffer_create(8)

local buffer_read_f32 = buffer.readf32
local buffer_read_f64 = buffer.readf64
local buffer_read_u32 = buffer.readu32

local buffer_write_f32 = buffer.writef32
local buffer_write_u32 = buffer.writeu32

local function rt_reinterpret_i32_f32(num)
	buffer_write_f32(RE_INSTANCE, 0, num)

	return buffer_read_u32(RE_INSTANCE, 0)
end

local function rt_reinterpret_i64_f64(num)
	buffer_write_f64(RE_INSTANCE, 0, num)

	local data_1 = buffer_read_u32(RE_INSTANCE, 0)
	local data_2 = buffer_read_u32(RE_INSTANCE, 4)

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_reinterpret_f32_i32(num)
	buffer_write_u32(RE_INSTANCE, 0, num)

	return buffer_read_f32(RE_INSTANCE, 0)
end

local function rt_reinterpret_f64_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)

	buffer_write_u32(RE_INSTANCE, 0, data_1)
	buffer_write_u32(RE_INSTANCE, 4, data_2)

	return buffer_read_f64(RE_INSTANCE, 0)
end

local string_sub = string.sub

local buffer_to_string = buffer.tostring
local buffer_from_string = buffer.fromstring

local buffer_len = buffer.len
local buffer_copy = buffer.copy
local buffer_fill = buffer.fill

local buffer_read_u8 = buffer.readu8
local buffer_read_i16 = buffer.readi16
local buffer_read_u16 = buffer.readu16
local buffer_read_i32 = buffer.readi32

local buffer_write_u8 = buffer.writeu8
local buffer_write_u16 = buffer.writeu16

local function rt_load_i32_i8(memory, addr)
	return bit_or(buffer_read_i8(memory.data, addr), 0)
end

local function rt_load_i32_u8(memory, addr)
	return buffer_read_u8(memory.data, addr)
end

local function rt_load_i32_i16(memory, addr)
	return bit_or(buffer_read_i16(memory.data, addr), 0)
end

local function rt_load_i32_u16(memory, addr)
	return buffer_read_u16(memory.data, addr)
end

local function rt_load_i32(memory, addr)
	return buffer_read_u32(memory.data, addr)
end

local function rt_load_i64_i8(memory, addr)
	local value = buffer_read_i8(memory.data, addr)

	if value >= 0 then
		return rt_i64_from_u32(value, 0)
	else
		return rt_i64_from_u32(value + 0x100000000, 0xFFFFFFFF)
	end
end

local function rt_load_i64_u8(memory, addr)
	return rt_i64_from_u32(buffer_read_u8(memory.data, addr), 0)
end

local function rt_load_i64_i16(memory, addr)
	local value = buffer_read_i16(memory.data, addr)

	if value >= 0 then
		return rt_i64_from_u32(value, 0)
	else
		return rt_i64_from_u32(value + 0x100000000, 0xFFFFFFFF)
	end
end

local function rt_load_i64_u16(memory, addr)
	return rt_i64_from_u32(buffer_read_u16(memory.data, addr), 0)
end

local function rt_load_i64_i32(memory, addr)
	local value = buffer_read_i32(memory.data, addr)

	if value >= 0 then
		return rt_i64_from_u32(value, 0)
	else
		return rt_i64_from_u32(value + 0x100000000, 0xFFFFFFFF)
	end
end

local function rt_load_i64_u32(memory, addr)
	return rt_i64_from_u32(buffer_read_u32(memory.data, addr), 0)
end

local function rt_load_i64(memory, addr)
	local data = memory.data
	local value_1 = buffer_read_u32(data, addr)
	local value_2 = buffer_read_u32(data, addr + 4)

	return rt_i64_from_u32(value_1, value_2)
end

local function rt_load_f32(memory, addr)
	return buffer_read_f32(memory.data, addr)
end

local function rt_load_f64(memory, addr)
	return buffer_read_f64(memory.data, addr)
end

local function rt_load_string(memory, addr, len)
	local temp = buffer_create(len)

	buffer_copy(temp, 0, memory.data, addr, len)

	return buffer_to_string(temp)
end

local function rt_store_i32_n8(memory, addr, value)
	buffer_write_u8(memory.data, addr, value)
end

local function rt_store_i32_n16(memory, addr, value)
	buffer_write_u16(memory.data, addr, value)
end

local function rt_store_i32(memory, addr, value)
	buffer_write_u32(memory.data, addr, value)
end

local function rt_store_i64_n8(memory, addr, value)
	local value_1, _ = rt_i64_into_u32(value)

	buffer_write_u8(memory.data, addr, value_1)
end

local function rt_store_i64_n16(memory, addr, value)
	local value_1, _ = rt_i64_into_u32(value)

	buffer_write_u16(memory.data, addr, value_1)
end

local function rt_store_i64_n32(memory, addr, value)
	local value_1, _ = rt_i64_into_u32(value)

	buffer_write_u32(memory.data, addr, value_1)
end

local function rt_store_i64(memory, addr, value)
	local data = memory.data
	local value_1, value_2 = rt_i64_into_u32(value)

	buffer_write_u32(data, addr, value_1)
	buffer_write_u32(data, addr + 4, value_2)
end

local function rt_store_f32(memory, addr, value)
	buffer_write_f32(memory.data, addr, value)
end

local function rt_store_f64(memory, addr, value)
	buffer_write_f64(memory.data, addr, value)
end

local function rt_store_string(memory, addr, data, len)
	local content = if not len or len == #data then data else string_sub(data, 1, len)
	local temp = buffer_from_string(content)

	buffer_copy(memory.data, addr, temp)
end

local function rt_store_copy(memory_1, addr_1, memory_2, addr_2, len)
	buffer_copy(memory_1.data, addr_1, memory_2.data, addr_2, len)
end

local function rt_store_fill(memory, addr, len, value)
	buffer_fill(memory.data, addr, value, len)
end

local WASM_PAGE_SIZE = 65536

local function rt_allocator_new(min, max)
	return { max = max, data = buffer_create(min * WASM_PAGE_SIZE) }
end

local function rt_allocator_size(memory)
	return buffer_len(memory.data) / WASM_PAGE_SIZE
end

local function rt_allocator_grow(memory, num)
	local old = rt_allocator_size(memory)
	local new = old + num

	if new <= memory.max then
		local reallocated = buffer_create(new * WASM_PAGE_SIZE)

		buffer_copy(reallocated, 0, memory.data)

		memory.data = reallocated

		return old
	else
		return 0xFFFFFFFF
	end
end

local memory_at_0
local FUNC_LIST = table.create(777)
local TABLE_LIST = table.create(0)
local MEMORY_LIST = table.create(0)
local GLOBAL_LIST = table.create(0)
FUNC_LIST[7] = --[[ Luau::Compile::assignMutable(Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>&, Luau::AstNameTable const&, char const* const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		reg_1 = FUNC_LIST[404](loc_1, 6220)
		loc_3 = reg_1
		rt_store_i32(memory_at_0, loc_4 + 12, loc_3)
		if loc_3 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[8](loc_0, rt_add_i32(loc_4, 12))
				rt_store_i32(memory_at_0, reg_0, 1)
				break
			end
		end
		while true do
			if loc_2 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2)
			if loc_3 == 0 then
				break
			end
			while true do
				reg_1 = FUNC_LIST[404](loc_1, loc_3)
				loc_3 = reg_1
				rt_store_i32(memory_at_0, loc_4 + 8, loc_3)
				if loc_3 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[8](loc_0, rt_add_i32(loc_4, 8))
						rt_store_i32(memory_at_0, reg_0, 1)
						break
					end
				end
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
				loc_2 = rt_add_i32(loc_2, 4)
				if loc_3 ~= 0 then
					continue
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[8] = --[[ Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>::operator[](Luau::AstName const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 3), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[9](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 3))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 3), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[9] = --[[ Luau::detail::DenseHashTable<Luau::AstName, std::__2::pair<Luau::AstName, Luau::Compile::Global>, std::__2::pair<Luau::AstName const, Luau::Compile::Global>, Luau::detail::ItemInterfaceMap<Luau::AstName, Luau::Compile::Global>, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_11 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_10 ~= 0 then rt_shl_i32(loc_10, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 3))
			loc_7 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_7)
						rt_store_i32(memory_at_0, loc_1 + 4, 0)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						rt_store_i32(memory_at_0, loc_1 + 20, 0)
						rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 28, 0)
						rt_store_i32(memory_at_0, loc_1 + 24, loc_3)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_5 = rt_add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_7)
						rt_store_i32(memory_at_0, loc_1 + 4, 0)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_10 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_12 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(loc_9, 3))
					loc_4 = rt_load_i32(memory_at_0, loc_12)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9)))
									loc_5 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_7)
									loc_3 = rt_load_i32(memory_at_0, loc_5)
									if loc_11 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = rt_add_i32(loc_2, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_2))
										loc_5 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_7)
										loc_3 = rt_load_i32(memory_at_0, loc_5)
										if loc_11 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_5, loc_4)
							rt_store_i32(memory_at_0, loc_5 + 4, rt_load_i32(memory_at_0, loc_12 + 4))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[10] = --[[ Luau::Compile::trackValues(Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>&, Luau::AstNode*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
		rt_store_i32(memory_at_0, loc_3 + 4, 8352)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, rt_add_i32(loc_3, 4))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[11] = --[[ Luau::Compile::ValueVisitor::~ValueVisitor() ]] function(loc_0)
	while true do
		FUNC_LIST[653](loc_0, 12)
		break
	end
end
FUNC_LIST[12] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
			if loc_3 == 0 then
				break
			end
			while true do
				if rt_load_i32(memory_at_0, loc_1 + 40) == 0 then
					break
				end
				while true do
					loc_3 = rt_shl_i32(loc_2, 2)
					loc_4 = rt_load_i32(memory_at_0, rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_1 + 36)))
					reg_0 = FUNC_LIST[13](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_1 + 28)))
					rt_store_i32(memory_at_0, reg_0, loc_4)
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
					if loc_2 >= loc_3 then
						desired = 2
						break
					end
					if rt_load_i32(memory_at_0, loc_1 + 40) > loc_2 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 40)
			if loc_3 <= loc_2 then
				break
			end
			while true do
				reg_0 = FUNC_LIST[13](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2)))
				rt_store_i32(memory_at_0, reg_0, 0)
				loc_2 = rt_add_i32(loc_2, 1)
				if loc_2 < rt_load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[13] = --[[ Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::operator[](Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_5, 12), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[18](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_mul_i32(loc_3, 12))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_mul_i32(loc_3, 12), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[14] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		if rt_load_i32(memory_at_0, loc_1 + 32) ~= 0 then
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_3, 2)))
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48612) ~= loc_4 then
								break
							end
							reg_0 = FUNC_LIST[13](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(loc_2, 24))
							rt_store_i32_n8(memory_at_0, reg_0 + 4, 1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48620) ~= loc_4 then
								break
							end
							reg_0 = FUNC_LIST[8](rt_load_i32(memory_at_0, loc_0 + 4), rt_add_i32(loc_2, 24))
							rt_store_i32(memory_at_0, reg_0, 2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					if loc_3 < rt_load_i32(memory_at_0, loc_1 + 32) then
						continue
					end
					break
				end
				break
			end
		end
		if rt_load_i32(memory_at_0, loc_1 + 40) ~= 0 then
			while true do
				loc_2 = 0
				while true do
					loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_2, 2)))
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_2 < rt_load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[15] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatCompoundAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48612) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[13](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(loc_2, 24))
				rt_store_i32_n8(memory_at_0, reg_0 + 4, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48620) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[8](rt_load_i32(memory_at_0, loc_0 + 4), rt_add_i32(loc_2, 24))
				rt_store_i32(memory_at_0, reg_0, 2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 36)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[16] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48612) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[13](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(loc_2, 24))
				rt_store_i32_n8(memory_at_0, reg_0 + 4, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48620) ~= loc_3 then
					break
				end
				reg_0 = FUNC_LIST[8](rt_load_i32(memory_at_0, loc_0 + 4), rt_add_i32(loc_2, 24))
				rt_store_i32(memory_at_0, reg_0, 2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[17] = --[[ Luau::Compile::ValueVisitor::visit(Luau::AstStatLocalFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
		reg_0 = FUNC_LIST[13](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(loc_1, 28))
		rt_store_i32(memory_at_0, reg_0, loc_2)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[18] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, std::__2::pair<Luau::AstLocal*, Luau::Compile::Variable>, std::__2::pair<Luau::AstLocal* const, Luau::Compile::Variable>, Luau::detail::ItemInterfaceMap<Luau::AstLocal*, Luau::Compile::Variable>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_10 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then rt_shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 12))
			loc_4 = reg_0
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
			loc_1 = 0
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 1), 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 2), 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 3), 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_1 = rt_add_i32(loc_1, 4)
						loc_3 = rt_add_i32(loc_3, 4)
						if loc_9 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_3 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
						rt_store_i64(memory_at_0, loc_3 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_3, loc_5)
						loc_1 = rt_add_i32(loc_1, 1)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_8 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_1 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_11 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(loc_9, 12))
					loc_3 = rt_load_i32(memory_at_0, loc_11)
					if loc_3 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9)))
									loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
									loc_7 = rt_load_i32(memory_at_0, loc_2)
									if loc_10 == loc_7 then
										break
									end
									loc_5 = 0
									if loc_3 == loc_7 then
										desired = 4
										break
									end
									while true do
										loc_5 = rt_add_i32(loc_5, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_5))
										loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
										loc_7 = rt_load_i32(memory_at_0, loc_2)
										if loc_10 == loc_7 then
											desired = 5
											break
										end
										if loc_3 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_2, loc_3)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_2, loc_3)
							rt_store_i32_n16(memory_at_0, loc_2 + 8, rt_load_i32_u16(memory_at_0, loc_11 + 8))
							rt_store_i32(memory_at_0, loc_2 + 4, rt_load_i32(memory_at_0, loc_11 + 4))
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = reg_0
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_1 > loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_4)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[19] = --[[ Luau::Compile::getBuiltin(Luau::AstExpr*, Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local desired
	while true do
		loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), 1)
		loc_9 = rt_load_i32(memory_at_0, loc_3)
		loc_6 = rt_load_i32(memory_at_0, loc_3 + 12)
		loc_11 = rt_load_i32(memory_at_0, loc_3 + 8)
		loc_10 = rt_load_i32(memory_at_0, 48612)
		while true do
			while true do
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_1 == 0 then
						desired = 2
						break
					end
					if loc_3 ~= loc_10 then
						desired = 2
						break
					end
					while true do
						if loc_11 == 0 then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
						if loc_6 == loc_4 then
							break
						end
						loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
						loc_1 = 0
						while true do
							loc_7 = bit_and(loc_3, loc_5)
							loc_8 = rt_add_i32(rt_mul_i32(loc_7, 12), loc_9)
							loc_3 = rt_load_i32(memory_at_0, loc_8)
							if loc_3 ~= loc_4 then
								while true do
									if loc_3 == loc_6 then
										desired = 4
										break
									end
									loc_1 = rt_add_i32(loc_1, 1)
									loc_3 = rt_add_i32(loc_7, loc_1)
									if loc_1 <= loc_5 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_8 + 8) ~= 0 then
							break
						end
						loc_1 = rt_load_i32(memory_at_0, loc_8 + 4)
						if loc_1 ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48644) ~= loc_3 then
					break
				end
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
					if loc_3 == 0 then
						break
					end
					if rt_load_i32(memory_at_0, loc_3 + 4) ~= rt_load_i32(memory_at_0, 48620) then
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_3 + 24)
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_2 + 8) == 0 then
								break
							end
							loc_9 = rt_load_i32(memory_at_0, loc_2 + 12)
							if loc_9 == loc_6 then
								break
							end
							loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
							loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), 1)
							loc_8 = rt_load_i32(memory_at_0, loc_2)
							loc_3 = 0
							while true do
								loc_4 = bit_and(loc_5, loc_7)
								loc_10 = rt_add_i32(rt_shl_i32(loc_4, 3), loc_8)
								loc_5 = rt_load_i32(memory_at_0, loc_10)
								if loc_5 ~= loc_6 then
									while true do
										if loc_5 == loc_9 then
											desired = 5
											break
										end
										loc_3 = rt_add_i32(loc_3, 1)
										loc_5 = rt_add_i32(loc_4, loc_3)
										if loc_3 <= loc_7 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_10 + 4) ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0, loc_6)
						rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, loc_1 + 28))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48620) ~= loc_3 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
				while true do
					while true do
						if rt_load_i32(memory_at_0, loc_2 + 8) == 0 then
							break
						end
						loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
						if loc_6 == loc_4 then
							break
						end
						loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
						loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), 1)
						loc_9 = rt_load_i32(memory_at_0, loc_2)
						loc_1 = 0
						while true do
							loc_7 = bit_and(loc_3, loc_5)
							loc_8 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_9)
							loc_3 = rt_load_i32(memory_at_0, loc_8)
							if loc_3 ~= loc_4 then
								while true do
									if loc_3 == loc_6 then
										desired = 4
										break
									end
									loc_1 = rt_add_i32(loc_1, 1)
									loc_3 = rt_add_i32(loc_7, loc_1)
									if loc_1 <= loc_5 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_8 + 4) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
					rt_store_i32(memory_at_0, loc_0, 0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		break
	end
end
FUNC_LIST[20] = --[[ Luau::Compile::analyzeBuiltins(Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>&, Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>> const&, Luau::CompileOptions const&, Luau::AstNode*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_5 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_5 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_5 + 16, loc_0)
		rt_store_i32(memory_at_0, loc_5 + 12, 8640)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, rt_add_i32(loc_5, 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
		break
	end
end
FUNC_LIST[21] = --[[ Luau::Compile::getBuiltinInfo(int) ]] function(loc_0, loc_1)
	while true do
		loc_1 = rt_shl_i32(loc_1, 2)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, rt_add_i32(loc_1, 9544)))
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, rt_add_i32(loc_1, 9232)))
		rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, rt_add_i32(loc_1, 8920)))
		break
	end
end
FUNC_LIST[22] = --[[ Luau::Compile::BuiltinVisitor::~BuiltinVisitor() ]] function(loc_0)
	while true do
		FUNC_LIST[653](loc_0, 20)
		break
	end
end
FUNC_LIST[23] = --[[ Luau::Compile::BuiltinVisitor::visit(Luau::AstExprCall*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 12, loc_1)
		while true do
			if rt_load_i32_u8(memory_at_0, loc_1 + 36) ~= 0 then
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[19](rt_add_i32(loc_4, 4), rt_load_i32(memory_at_0, loc_1 + 24), rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 12))
					loc_3 = rt_load_i32(memory_at_0, loc_4 + 4)
					reg_0 = rt_load_i32(memory_at_0, loc_4 + 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			if bit_or(loc_2, loc_3) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												if loc_3 == 0 then
													while true do
														if loc_2 == 0 then
															desired = 3
															break
														end
														reg_0 = FUNC_LIST[584](loc_2, 1407)
														if reg_0 == 0 then
															while true do
																loc_1 = 1
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 4172)
														if reg_0 == 0 then
															while true do
																loc_1 = 40
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 3908)
														if reg_0 == 0 then
															while true do
																loc_1 = 44
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 1772)
														if reg_0 == 0 then
															while true do
																loc_1 = 49
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 1835)
														if reg_0 == 0 then
															while true do
																loc_1 = 50
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 3528)
														if reg_0 == 0 then
															while true do
																loc_1 = 51
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 3423)
														if reg_0 == 0 then
															while true do
																loc_1 = 58
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 3563)
														if reg_0 == 0 then
															while true do
																loc_1 = 53
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 1842)
														if reg_0 == 0 then
															desired = 10
															break
														end
														reg_0 = FUNC_LIST[584](loc_2, 4814)
														if reg_0 == 0 then
															while true do
																loc_1 = 60
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 4801)
														if reg_0 == 0 then
															while true do
																loc_1 = 61
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 3000)
														if reg_0 == 0 then
															while true do
																loc_1 = 62
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_2, 3695)
														if reg_0 ~= 0 then
															desired = 3
															break
														end
														loc_1 = 63
														desired = 2
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												while true do
													while true do
														while true do
															reg_0 = FUNC_LIST[584](loc_3, 3620)
															if reg_0 == 0 then
																while true do
																	if loc_2 == 0 then
																		desired = 3
																		break
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 2384)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 2
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 2093)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 3
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3409)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 4
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 7042)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 5
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3435)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 6
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3523)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 7
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3625)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 8
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 2094)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 9
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3904)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 10
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3039)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 11
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 2830)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 12
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 5030)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 13
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3031)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 14
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3037)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 15
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 7174)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 16
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3640)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 17
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 1067)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 18
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3414)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 19
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3931)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 20
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 1123)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 21
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 5320)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 22
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3630)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 23
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3410)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 24
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 1395)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 25
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3635)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 26
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3436)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 27
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3142)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 46
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 3418)
																	if reg_0 == 0 then
																		while true do
																			loc_1 = 47
																			desired = 2
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[584](loc_2, 5035)
																	if reg_0 ~= 0 then
																		desired = 13
																		break
																	end
																	loc_1 = 48
																	desired = 2
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															reg_0 = FUNC_LIST[584](loc_3, 7078)
															if reg_0 ~= 0 then
																desired = 9
																break
															end
															if loc_2 ~= 0 then
																desired = 12
																break
															end
															desired = 9
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[584](loc_3, 7078)
														if reg_0 ~= 0 then
															desired = 11
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = FUNC_LIST[584](loc_2, 1757)
													if reg_0 == 0 then
														while true do
															loc_1 = 28
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 5045)
													if reg_0 == 0 then
														while true do
															loc_1 = 29
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 1451)
													if reg_0 == 0 then
														while true do
															loc_1 = 30
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 2840)
													if reg_0 == 0 then
														while true do
															loc_1 = 31
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 2818)
													if reg_0 == 0 then
														while true do
															loc_1 = 32
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 1389)
													if reg_0 == 0 then
														while true do
															loc_1 = 33
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 1849)
													if reg_0 == 0 then
														while true do
															loc_1 = 34
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 4012)
													if reg_0 == 0 then
														while true do
															loc_1 = 35
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 1765)
													if reg_0 == 0 then
														while true do
															loc_1 = 36
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 5022)
													if reg_0 == 0 then
														while true do
															loc_1 = 37
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 4004)
													if reg_0 == 0 then
														while true do
															loc_1 = 38
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 1758)
													if reg_0 == 0 then
														while true do
															loc_1 = 39
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 1046)
													if reg_0 == 0 then
														while true do
															loc_1 = 55
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 1038)
													if reg_0 == 0 then
														while true do
															loc_1 = 56
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[584](loc_2, 3148)
													if reg_0 ~= 0 then
														desired = 9
														break
													end
													loc_1 = 64
													desired = 2
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[584](loc_3, 3838)
												if reg_0 == 0 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_load_i32(memory_at_0, loc_1 + 32) ~= 2 then
												desired = 1
												break
											end
											if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28) + 4) + 4) ~= rt_load_i32(memory_at_0, 48628) then
												desired = 1
												break
											end
											loc_1 = 57
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[584](loc_3, 3838)
										if reg_0 ~= 0 then
											desired = 7
											break
										end
										if loc_2 == 0 then
											desired = 3
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[584](loc_2, 3963)
									if reg_0 == 0 then
										while true do
											loc_1 = 41
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[584](loc_2, 3026)
									if reg_0 == 0 then
										while true do
											loc_1 = 42
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[584](loc_2, 3426)
									if reg_0 == 0 then
										while true do
											loc_1 = 43
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[584](loc_2, 6198)
									if reg_0 ~= 0 then
										desired = 6
										break
									end
									loc_1 = 45
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[584](loc_3, 4821)
								if reg_0 ~= 0 then
									desired = 4
									break
								end
								if loc_2 ~= 0 then
									desired = 5
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[584](loc_3, 4821)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[584](loc_2, 1414)
						if reg_0 == 0 then
							while true do
								loc_1 = 52
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[584](loc_2, 3563)
						if reg_0 ~= 0 then
							break
						end
						loc_1 = 53
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[584](loc_3, 2993)
					if reg_0 ~= 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					reg_0 = FUNC_LIST[584](loc_2, 6927)
					if reg_0 == 0 then
						while true do
							loc_1 = 65
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_2, 6912)
					if reg_0 == 0 then
						while true do
							loc_1 = 66
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = 67
					reg_0 = FUNC_LIST[584](loc_2, 6919)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[584](loc_2, 6904)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[584](loc_2, 6960)
					if reg_0 == 0 then
						while true do
							loc_1 = 68
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_2, 6943)
					if reg_0 == 0 then
						while true do
							loc_1 = 69
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = 70
					reg_0 = FUNC_LIST[584](loc_2, 6951)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[584](loc_2, 6934)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[584](loc_2, 7093)
					if reg_0 == 0 then
						while true do
							loc_1 = 71
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_2, 7070)
					if reg_0 == 0 then
						while true do
							loc_1 = 72
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = 73
					reg_0 = FUNC_LIST[584](loc_2, 7084)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[584](loc_2, 7061)
					if reg_0 == 0 then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[584](loc_2, 7110)
					if reg_0 == 0 then
						while true do
							loc_1 = 74
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_2, 7101)
					if reg_0 == 0 then
						while true do
							loc_1 = 75
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_2, 6977)
					if reg_0 == 0 then
						while true do
							loc_1 = 76
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_2, 6968)
					if reg_0 ~= 0 then
						break
					end
					loc_1 = 77
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_5 + 20)
				if loc_1 == 0 then
					desired = 1
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_5 + 16)
				if loc_5 ~= 0 then
					while true do
						if loc_3 == 0 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[584](loc_3, loc_5)
						if reg_0 ~= 0 then
							desired = 1
							break
						end
						if loc_2 == 0 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[584](loc_2, loc_1)
						if reg_0 ~= 0 then
							desired = 1
							break
						end
						loc_1 = 54
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 ~= 0 then
					desired = 1
					break
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[584](loc_2, loc_1)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				loc_1 = 54
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[24](rt_load_i32(memory_at_0, loc_0 + 4), rt_add_i32(loc_4, 12))
			rt_store_i32(memory_at_0, reg_0, loc_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[24] = --[[ Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>::operator[](Luau::AstExprCall* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 3), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[25](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 3))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 3), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[25] = --[[ Luau::detail::DenseHashTable<Luau::AstExprCall*, std::__2::pair<Luau::AstExprCall*, int>, std::__2::pair<Luau::AstExprCall* const, int>, Luau::detail::ItemInterfaceMap<Luau::AstExprCall*, int>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_12 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_11 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_11 ~= 0 then rt_shl_i32(loc_11, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 3))
			loc_7 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_7)
						rt_store_i32(memory_at_0, loc_1 + 4, 0)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						rt_store_i32(memory_at_0, loc_1 + 20, 0)
						rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 28, 0)
						rt_store_i32(memory_at_0, loc_1 + 24, loc_3)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_5 = rt_add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_7)
						rt_store_i32(memory_at_0, loc_1 + 4, 0)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_10 = rt_load_i32(memory_at_0, loc_0)
		if loc_11 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_13 = rt_add_i32(rt_shl_i32(loc_9, 3), loc_10)
					loc_4 = rt_load_i32(memory_at_0, loc_13)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9)))
									loc_5 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_7)
									loc_3 = rt_load_i32(memory_at_0, loc_5)
									if loc_12 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = rt_add_i32(loc_2, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_2))
										loc_5 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_7)
										loc_3 = rt_load_i32(memory_at_0, loc_5)
										if loc_12 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_5, loc_4)
							rt_store_i32(memory_at_0, loc_5 + 4, rt_load_i32(memory_at_0, loc_13 + 4))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_11 ~= loc_9 then
						continue
					end
					break
				end
				reg_0 = rt_load_i32(memory_at_0, loc_0)
				break
			end
		else
			while true do
				reg_0 = loc_10
				break
			end
		end
		loc_10 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		rt_store_i32(memory_at_0, loc_0, loc_7)
		if loc_10 ~= 0 then
			while true do
				FUNC_LIST[652](loc_10)
				break
			end
		end
		break
	end
end
FUNC_LIST[26] = --[[ Luau::Compile::foldBuiltin(int, Luau::Compile::Constant const*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					while true do
																																						while true do
																																							while true do
																																								while true do
																																									while true do
																																										while true do
																																											while true do
																																												while true do
																																													while true do
																																														while true do
																																															while true do
																																																while true do
																																																	while true do
																																																		while true do
																																																			while true do
																																																				while true do
																																																					if not br_map[1] then
																																																						br_map[1] = (function()
																																																							return { [0] = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 44, 12, 13, 14, 15, 16, 44, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 38, 39, 44, 40, 41, 42, 44, 44, 44, 44, 44, 43, }
																																																						end)()
																																																					end
																																																					temp = br_map[1][rt_sub_i32(loc_1, 2)] or 44
																																																					if temp < 22 then
																																																						if temp < 11 then
																																																							if temp < 5 then
																																																								if temp < 2 then
																																																									if temp < 1 then
																																																										break
																																																									else
																																																										desired = 50
																																																										break
																																																									end
																																																								elseif temp > 2 then
																																																									if temp < 4 then
																																																										desired = 48
																																																										break
																																																									else
																																																										desired = 47
																																																										break
																																																									end
																																																								else
																																																									desired = 49
																																																									break
																																																								end
																																																							elseif temp > 5 then
																																																								if temp < 8 then
																																																									if temp < 7 then
																																																										desired = 45
																																																										break
																																																									else
																																																										desired = 44
																																																										break
																																																									end
																																																								elseif temp > 8 then
																																																									if temp < 10 then
																																																										desired = 42
																																																										break
																																																									else
																																																										desired = 41
																																																										break
																																																									end
																																																								else
																																																									desired = 43
																																																									break
																																																								end
																																																							else
																																																								desired = 46
																																																								break
																																																							end
																																																						elseif temp > 11 then
																																																							if temp < 17 then
																																																								if temp < 14 then
																																																									if temp < 13 then
																																																										desired = 39
																																																										break
																																																									else
																																																										desired = 38
																																																										break
																																																									end
																																																								elseif temp > 14 then
																																																									if temp < 16 then
																																																										desired = 36
																																																										break
																																																									else
																																																										desired = 35
																																																										break
																																																									end
																																																								else
																																																									desired = 37
																																																									break
																																																								end
																																																							elseif temp > 17 then
																																																								if temp < 20 then
																																																									if temp < 19 then
																																																										desired = 33
																																																										break
																																																									else
																																																										desired = 32
																																																										break
																																																									end
																																																								elseif temp > 20 then
																																																									desired = 30
																																																									break
																																																								else
																																																									desired = 31
																																																									break
																																																								end
																																																							else
																																																								desired = 34
																																																								break
																																																							end
																																																						else
																																																							desired = 40
																																																							break
																																																						end
																																																					elseif temp > 22 then
																																																						if temp < 34 then
																																																							if temp < 28 then
																																																								if temp < 25 then
																																																									if temp < 24 then
																																																										desired = 28
																																																										break
																																																									else
																																																										desired = 27
																																																										break
																																																									end
																																																								elseif temp > 25 then
																																																									if temp < 27 then
																																																										desired = 25
																																																										break
																																																									else
																																																										desired = 24
																																																										break
																																																									end
																																																								else
																																																									desired = 26
																																																									break
																																																								end
																																																							elseif temp > 28 then
																																																								if temp < 31 then
																																																									if temp < 30 then
																																																										desired = 22
																																																										break
																																																									else
																																																										desired = 21
																																																										break
																																																									end
																																																								elseif temp > 31 then
																																																									if temp < 33 then
																																																										desired = 19
																																																										break
																																																									else
																																																										desired = 18
																																																										break
																																																									end
																																																								else
																																																									desired = 20
																																																									break
																																																								end
																																																							else
																																																								desired = 23
																																																								break
																																																							end
																																																						elseif temp > 34 then
																																																							if temp < 40 then
																																																								if temp < 37 then
																																																									if temp < 36 then
																																																										desired = 16
																																																										break
																																																									else
																																																										desired = 15
																																																										break
																																																									end
																																																								elseif temp > 37 then
																																																									if temp < 39 then
																																																										desired = 13
																																																										break
																																																									else
																																																										desired = 12
																																																										break
																																																									end
																																																								else
																																																									desired = 14
																																																									break
																																																								end
																																																							elseif temp > 40 then
																																																								if temp < 43 then
																																																									if temp < 42 then
																																																										desired = 10
																																																										break
																																																									else
																																																										desired = 9
																																																										break
																																																									end
																																																								elseif temp > 43 then
																																																									desired = 7
																																																									break
																																																								else
																																																									desired = 8
																																																									break
																																																								end
																																																							else
																																																								desired = 11
																																																								break
																																																							end
																																																						else
																																																							desired = 17
																																																							break
																																																						end
																																																					else
																																																						desired = 29
																																																						break
																																																					end
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				if loc_3 ~= 1 then
																																																					desired = 7
																																																					break
																																																				end
																																																				if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																																					desired = 7
																																																					break
																																																				end
																																																				loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																																				rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																																				rt_store_f64(memory_at_0, loc_0 + 8, math_abs(loc_4))
																																																				desired = 0
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			if loc_3 ~= 1 then
																																																				desired = 7
																																																				break
																																																			end
																																																			if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																																				desired = 7
																																																				break
																																																			end
																																																			loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																																			rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																																			reg_1 = FUNC_LIST[585](loc_4)
																																																			rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																			desired = 0
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																		if loc_3 ~= 1 then
																																																			desired = 7
																																																			break
																																																		end
																																																		if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																																			desired = 7
																																																			break
																																																		end
																																																		loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																																		rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																																		reg_1 = FUNC_LIST[588](loc_4)
																																																		rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																		desired = 0
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	if loc_3 ~= 2 then
																																																		desired = 7
																																																		break
																																																	end
																																																	if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																																		desired = 7
																																																		break
																																																	end
																																																	if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																																		desired = 7
																																																		break
																																																	end
																																																	reg_1 = FUNC_LIST[591](rt_load_f64(memory_at_0, loc_2 + 8), rt_load_f64(memory_at_0, loc_2 + 32))
																																																	rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																	rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																																	desired = 0
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																if loc_3 ~= 1 then
																																																	desired = 7
																																																	break
																																																end
																																																if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																																	desired = 7
																																																	break
																																																end
																																																loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																																rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																																reg_1 = FUNC_LIST[590](loc_4)
																																																rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																																desired = 0
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															if loc_3 ~= 1 then
																																																desired = 7
																																																break
																																															end
																																															if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																																desired = 7
																																																break
																																															end
																																															loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																															rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																															rt_store_f64(memory_at_0, loc_0 + 8, math_ceil(loc_4))
																																															desired = 0
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														if loc_3 ~= 1 then
																																															desired = 7
																																															break
																																														end
																																														if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																															desired = 7
																																															break
																																														end
																																														loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																														rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																														reg_1 = FUNC_LIST[600](loc_4)
																																														rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																														desired = 0
																																														break
																																													end
																																													if desired then
																																														if desired == 43 then
																																															desired = nil
																																														end
																																														break
																																													end
																																													if loc_3 ~= 1 then
																																														desired = 7
																																														break
																																													end
																																													if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																														desired = 7
																																														break
																																													end
																																													loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																													rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																													reg_1 = FUNC_LIST[594](loc_4)
																																													rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																													desired = 0
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												if loc_3 ~= 1 then
																																													desired = 7
																																													break
																																												end
																																												if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																													desired = 7
																																													break
																																												end
																																												loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																												rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																												rt_store_f64(memory_at_0, loc_0 + 8, (loc_4 / 1.7453292519943295e-2))
																																												desired = 0
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											if loc_3 ~= 1 then
																																												desired = 7
																																												break
																																											end
																																											if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																												desired = 7
																																												break
																																											end
																																											loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																											rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																											reg_1 = FUNC_LIST[522](loc_4)
																																											rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																											desired = 0
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										if loc_3 ~= 1 then
																																											desired = 7
																																											break
																																										end
																																										if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																											desired = 7
																																											break
																																										end
																																										loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																										rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																										rt_store_f64(memory_at_0, loc_0 + 8, math_floor(loc_4))
																																										desired = 0
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									if loc_3 ~= 2 then
																																										desired = 7
																																										break
																																									end
																																									if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																										desired = 7
																																										break
																																									end
																																									if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																										desired = 7
																																										break
																																									end
																																									loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																																									loc_5 = rt_load_f64(memory_at_0, loc_2 + 8)
																																									rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																									reg_1 = FUNC_LIST[527](loc_5, loc_4)
																																									rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																									desired = 0
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								if loc_3 ~= 2 then
																																									desired = 7
																																									break
																																								end
																																								if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																									desired = 7
																																									break
																																								end
																																								if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																									desired = 7
																																									break
																																								end
																																								loc_5 = rt_load_f64(memory_at_0, loc_2 + 8)
																																								loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																																								rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																								reg_0 = loc_0
																																								reg_1 = loc_5
																																								while true do
																																									if math_abs(loc_4) < 2.147483648e9 then
																																										while true do
																																											reg_2 = rt_truncate_f64(loc_4)
																																											desired = 39
																																											break
																																										end
																																										if desired then
																																											if desired == 39 then
																																												desired = nil
																																											end
																																											break
																																										end
																																									end
																																									reg_2 = 2147483648
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								loc_3 = reg_2
																																								reg_1 = FUNC_LIST[529](reg_1, loc_3)
																																								rt_store_f64(memory_at_0, reg_0 + 8, reg_1)
																																								desired = 0
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							if loc_3 ~= 1 then
																																								desired = 7
																																								break
																																							end
																																							if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																								desired = 7
																																								break
																																							end
																																							loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																							rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																							reg_1 = FUNC_LIST[535](loc_4)
																																							rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																							desired = 0
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						while true do
																																							while true do
																																								if not br_map[2] then
																																									br_map[2] = (function()
																																										return { [0] = 0, 1, }
																																									end)()
																																								end
																																								temp = br_map[2][rt_sub_i32(loc_3, 1)] or 31
																																								if temp < 1 then
																																									break
																																								elseif temp > 1 then
																																									desired = 7
																																									break
																																								else
																																									desired = 37
																																									break
																																								end
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																								desired = 7
																																								break
																																							end
																																							loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																							rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																							reg_1 = FUNC_LIST[533](loc_4)
																																							rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																							desired = 0
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																							desired = 7
																																							break
																																						end
																																						if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																							desired = 7
																																							break
																																						end
																																						loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																																						if loc_4 == 2e0 then
																																							while true do
																																								loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																								rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																								reg_1 = FUNC_LIST[536](loc_4)
																																								rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																								desired = 0
																																								break
																																							end
																																							if desired then
																																								if desired == 36 then
																																									desired = nil
																																								end
																																								break
																																							end
																																						end
																																						loc_5 = rt_load_f64(memory_at_0, loc_2 + 8)
																																						if loc_4 == 1e1 then
																																							while true do
																																								rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																								reg_1 = FUNC_LIST[535](loc_5)
																																								rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																								desired = 0
																																								break
																																							end
																																							if desired then
																																								if desired == 36 then
																																									desired = nil
																																								end
																																								break
																																							end
																																						end
																																						rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																						reg_1 = FUNC_LIST[533](loc_5)
																																						reg_2 = FUNC_LIST[533](loc_4)
																																						rt_store_f64(memory_at_0, loc_0 + 8, (reg_1 / reg_2))
																																						desired = 0
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					if loc_3 == 0 then
																																						desired = 7
																																						break
																																					end
																																					if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																						desired = 7
																																						break
																																					end
																																					loc_1 = 1
																																					loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																					if loc_3 ~= 1 then
																																						while true do
																																							while true do
																																								loc_8 = rt_add_i32(rt_mul_i32(loc_1, 24), loc_2)
																																								if rt_load_i32(memory_at_0, loc_8) ~= 3 then
																																									while true do
																																										desired = 5
																																										break
																																									end
																																									if desired then
																																										if desired == 37 then
																																											desired = nil
																																											continue
																																										end
																																										break
																																									end
																																								end
																																								loc_5 = rt_load_f64(memory_at_0, loc_8 + 8)
																																								loc_4 = (if loc_4 < loc_5 then loc_5 else loc_4)
																																								loc_1 = rt_add_i32(loc_1, 1)
																																								if loc_3 ~= loc_1 then
																																									continue
																																								end
																																								break
																																							end
																																							if desired then
																																								break
																																							end
																																							break
																																						end
																																						if desired then
																																							if desired == 35 then
																																								desired = nil
																																							end
																																							break
																																						end
																																					end
																																					desired = 6
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				if loc_3 == 0 then
																																					desired = 7
																																					break
																																				end
																																				if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																					desired = 7
																																					break
																																				end
																																				loc_1 = 1
																																				loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																				if loc_3 ~= 1 then
																																					while true do
																																						while true do
																																							loc_8 = rt_add_i32(rt_mul_i32(loc_1, 24), loc_2)
																																							if rt_load_i32(memory_at_0, loc_8) ~= 3 then
																																								while true do
																																									desired = 5
																																									break
																																								end
																																								if desired then
																																									if desired == 36 then
																																										desired = nil
																																										continue
																																									end
																																									break
																																								end
																																							end
																																							loc_5 = rt_load_f64(memory_at_0, loc_8 + 8)
																																							loc_4 = (if loc_4 > loc_5 then loc_5 else loc_4)
																																							loc_1 = rt_add_i32(loc_1, 1)
																																							if loc_3 ~= loc_1 then
																																								continue
																																							end
																																							break
																																						end
																																						if desired then
																																							break
																																						end
																																						break
																																					end
																																					if desired then
																																						if desired == 34 then
																																							desired = nil
																																						end
																																						break
																																					end
																																				end
																																				desired = 6
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			if loc_3 ~= 2 then
																																				desired = 7
																																				break
																																			end
																																			if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																				desired = 7
																																				break
																																			end
																																			if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																																				desired = 7
																																				break
																																			end
																																			loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																																			loc_5 = rt_load_f64(memory_at_0, loc_2 + 8)
																																			rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																			reg_1 = FUNC_LIST[537](loc_5, loc_4)
																																			rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																			desired = 0
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		if loc_3 ~= 1 then
																																			desired = 7
																																			break
																																		end
																																		if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																			desired = 7
																																			break
																																		end
																																		loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																		rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																		rt_store_f64(memory_at_0, loc_0 + 8, (loc_4 * 1.7453292519943295e-2))
																																		desired = 0
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	if loc_3 ~= 1 then
																																		desired = 7
																																		break
																																	end
																																	if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																		desired = 7
																																		break
																																	end
																																	loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																	rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																	reg_1 = FUNC_LIST[607](loc_4)
																																	rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																	desired = 0
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																if loc_3 ~= 1 then
																																	desired = 7
																																	break
																																end
																																if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																	desired = 7
																																	break
																																end
																																loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																																rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																																reg_1 = FUNC_LIST[606](loc_4)
																																rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																																desired = 0
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															if loc_3 ~= 1 then
																																desired = 7
																																break
																															end
																															if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																																desired = 7
																																break
																															end
																															loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																															rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																															rt_store_f64(memory_at_0, loc_0 + 8, math_sqrt(loc_4))
																															desired = 0
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														if loc_3 ~= 1 then
																															desired = 7
																															break
																														end
																														if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																															desired = 7
																															break
																														end
																														loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																														rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																														reg_1 = FUNC_LIST[629](loc_4)
																														rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																														desired = 0
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													if loc_3 ~= 1 then
																														desired = 7
																														break
																													end
																													if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																														desired = 7
																														break
																													end
																													loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																													rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																													reg_1 = FUNC_LIST[627](loc_4)
																													rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
																													desired = 0
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												if loc_3 ~= 2 then
																													desired = 7
																													break
																												end
																												if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																													desired = 7
																													break
																												end
																												if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																													desired = 7
																													break
																												end
																												while true do
																													loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																													if math_abs(loc_4) < 2.147483648e9 then
																														while true do
																															reg_0 = rt_truncate_f64(loc_4)
																															desired = 27
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																													end
																													reg_0 = 2147483648
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_3 = reg_0
																												if loc_3 > 31 then
																													desired = 7
																													break
																												end
																												loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																												rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																												reg_0 = loc_0
																												while true do
																													if math_abs(loc_4) < 9.223372036854776e18 then
																														while true do
																															reg_1 = rt_truncate_i64_f64(loc_4)
																															desired = 27
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																													end
																													reg_1 = rt_i64_from_u32(0, 2147483648)
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												rt_store_f64(memory_at_0, reg_0 + 8, no_op(rt_shr_i32(rt_wrap_i32_i64(reg_1), loc_3)))
																												desired = 0
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											if loc_3 == 0 then
																												desired = 7
																												break
																											end
																											if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																												desired = 7
																												break
																											end
																											loc_1 = 1
																											loc_9 = (if loc_3 == 1 then 1 else 0)
																											while true do
																												loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																												if math_abs(loc_4) < 9.223372036854776e18 then
																													while true do
																														reg_0 = rt_truncate_i64_f64(loc_4)
																														desired = 26
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																												end
																												reg_0 = rt_i64_from_u32(0, 2147483648)
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											loc_8 = rt_wrap_i32_i64(reg_0)
																											if loc_9 == 0 then
																												while true do
																													while true do
																														loc_9 = rt_add_i32(rt_mul_i32(loc_1, 24), loc_2)
																														if rt_load_i32(memory_at_0, loc_9) ~= 3 then
																															while true do
																																desired = 5
																																break
																															end
																															if desired then
																																if desired == 27 then
																																	desired = nil
																																	continue
																																end
																																break
																															end
																														end
																														while true do
																															loc_4 = rt_load_f64(memory_at_0, loc_9 + 8)
																															if math_abs(loc_4) < 9.223372036854776e18 then
																																while true do
																																	reg_0 = rt_truncate_i64_f64(loc_4)
																																	desired = 28
																																	break
																																end
																																if desired then
																																	if desired == 28 then
																																		desired = nil
																																	end
																																	break
																																end
																															end
																															reg_0 = rt_i64_from_u32(0, 2147483648)
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																																continue
																															end
																															break
																														end
																														loc_8 = bit_and(rt_wrap_i32_i64(reg_0), loc_8)
																														loc_1 = rt_add_i32(loc_1, 1)
																														if loc_3 ~= loc_1 then
																															continue
																														end
																														break
																													end
																													if desired then
																														break
																													end
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																											end
																											desired = 4
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										if loc_3 ~= 1 then
																											desired = 7
																											break
																										end
																										if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																											desired = 7
																											break
																										end
																										loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																										rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																										reg_0 = loc_0
																										while true do
																											if math_abs(loc_4) < 9.223372036854776e18 then
																												while true do
																													reg_1 = rt_truncate_i64_f64(loc_4)
																													desired = 25
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																											end
																											reg_1 = rt_i64_from_u32(0, 2147483648)
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										rt_store_f64(memory_at_0, reg_0 + 8, no_op(bit_xor(rt_wrap_i32_i64(reg_1), 4294967295)))
																										desired = 0
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									if loc_3 == 0 then
																										desired = 7
																										break
																									end
																									if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																										desired = 7
																										break
																									end
																									loc_1 = 1
																									loc_9 = (if loc_3 == 1 then 1 else 0)
																									while true do
																										loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																										if math_abs(loc_4) < 9.223372036854776e18 then
																											while true do
																												reg_0 = rt_truncate_i64_f64(loc_4)
																												desired = 24
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																										end
																										reg_0 = rt_i64_from_u32(0, 2147483648)
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_8 = rt_wrap_i32_i64(reg_0)
																									if loc_9 == 0 then
																										while true do
																											while true do
																												loc_9 = rt_add_i32(rt_mul_i32(loc_1, 24), loc_2)
																												if rt_load_i32(memory_at_0, loc_9) ~= 3 then
																													while true do
																														desired = 5
																														break
																													end
																													if desired then
																														if desired == 25 then
																															desired = nil
																															continue
																														end
																														break
																													end
																												end
																												while true do
																													loc_4 = rt_load_f64(memory_at_0, loc_9 + 8)
																													if math_abs(loc_4) < 9.223372036854776e18 then
																														while true do
																															reg_0 = rt_truncate_i64_f64(loc_4)
																															desired = 26
																															break
																														end
																														if desired then
																															if desired == 26 then
																																desired = nil
																															end
																															break
																														end
																													end
																													reg_0 = rt_i64_from_u32(0, 2147483648)
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																														continue
																													end
																													break
																												end
																												loc_8 = bit_or(rt_wrap_i32_i64(reg_0), loc_8)
																												loc_1 = rt_add_i32(loc_1, 1)
																												if loc_3 ~= loc_1 then
																													continue
																												end
																												break
																											end
																											if desired then
																												break
																											end
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																									end
																									desired = 4
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								if loc_3 == 0 then
																									desired = 7
																									break
																								end
																								if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																									desired = 7
																									break
																								end
																								loc_1 = 1
																								loc_9 = (if loc_3 == 1 then 1 else 0)
																								while true do
																									loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																									if math_abs(loc_4) < 9.223372036854776e18 then
																										while true do
																											reg_0 = rt_truncate_i64_f64(loc_4)
																											desired = 23
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																									end
																									reg_0 = rt_i64_from_u32(0, 2147483648)
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_8 = rt_wrap_i32_i64(reg_0)
																								if loc_9 == 0 then
																									while true do
																										while true do
																											loc_9 = rt_add_i32(rt_mul_i32(loc_1, 24), loc_2)
																											if rt_load_i32(memory_at_0, loc_9) ~= 3 then
																												while true do
																													desired = 5
																													break
																												end
																												if desired then
																													if desired == 24 then
																														desired = nil
																														continue
																													end
																													break
																												end
																											end
																											while true do
																												loc_4 = rt_load_f64(memory_at_0, loc_9 + 8)
																												if math_abs(loc_4) < 9.223372036854776e18 then
																													while true do
																														reg_0 = rt_truncate_i64_f64(loc_4)
																														desired = 25
																														break
																													end
																													if desired then
																														if desired == 25 then
																															desired = nil
																														end
																														break
																													end
																												end
																												reg_0 = rt_i64_from_u32(0, 2147483648)
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																													continue
																												end
																												break
																											end
																											loc_8 = bit_xor(rt_wrap_i32_i64(reg_0), loc_8)
																											loc_1 = rt_add_i32(loc_1, 1)
																											if loc_3 ~= loc_1 then
																												continue
																											end
																											break
																										end
																										if desired then
																											break
																										end
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								desired = 4
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							if loc_3 == 0 then
																								desired = 7
																								break
																							end
																							if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																								desired = 7
																								break
																							end
																							loc_1 = 1
																							loc_9 = (if loc_3 == 1 then 1 else 0)
																							while true do
																								loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																								if math_abs(loc_4) < 9.223372036854776e18 then
																									while true do
																										reg_0 = rt_truncate_i64_f64(loc_4)
																										desired = 22
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																								end
																								reg_0 = rt_i64_from_u32(0, 2147483648)
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_8 = rt_wrap_i32_i64(reg_0)
																							if loc_9 == 0 then
																								while true do
																									while true do
																										loc_9 = rt_add_i32(rt_mul_i32(loc_1, 24), loc_2)
																										if rt_load_i32(memory_at_0, loc_9) ~= 3 then
																											while true do
																												desired = 5
																												break
																											end
																											if desired then
																												if desired == 23 then
																													desired = nil
																													continue
																												end
																												break
																											end
																										end
																										while true do
																											loc_4 = rt_load_f64(memory_at_0, loc_9 + 8)
																											if math_abs(loc_4) < 9.223372036854776e18 then
																												while true do
																													reg_0 = rt_truncate_i64_f64(loc_4)
																													desired = 24
																													break
																												end
																												if desired then
																													if desired == 24 then
																														desired = nil
																													end
																													break
																												end
																											end
																											reg_0 = rt_i64_from_u32(0, 2147483648)
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																												continue
																											end
																											break
																										end
																										loc_8 = bit_and(rt_wrap_i32_i64(reg_0), loc_8)
																										loc_1 = rt_add_i32(loc_1, 1)
																										if loc_3 ~= loc_1 then
																											continue
																										end
																										break
																									end
																									if desired then
																										break
																									end
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							rt_store_i32(memory_at_0, loc_0 + 8, 0)
																							rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(2, 0))
																							rt_store_i32_n8(memory_at_0, loc_0 + 8, (if loc_8 ~= 0 then 1 else 0))
																							desired = 0
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						if loc_3 < 2 then
																							desired = 7
																							break
																						end
																						if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																							desired = 7
																							break
																						end
																						if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																							desired = 7
																							break
																						end
																						while true do
																							loc_1 = 1
																							reg_0 = loc_1
																							if loc_3 == 2 then
																								break
																							end
																							if rt_load_i32(memory_at_0, loc_2 + 48) ~= 3 then
																								desired = 7
																								break
																							end
																							loc_4 = rt_load_f64(memory_at_0, loc_2 + 56)
																							if math_abs(loc_4) < 2.147483648e9 then
																								while true do
																									reg_0 = rt_truncate_f64(loc_4)
																									desired = 21
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							reg_0 = 2147483648
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_1 = reg_0
																						while true do
																							loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																							if math_abs(loc_4) < 2.147483648e9 then
																								while true do
																									reg_0 = rt_truncate_f64(loc_4)
																									desired = 21
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							reg_0 = 2147483648
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_3 = reg_0
																						if rt_lt_i32(loc_3, 0) then
																							desired = 7
																							break
																						end
																						if rt_le_i32(loc_1, 0) then
																							desired = 7
																							break
																						end
																						if rt_gt_i32(rt_add_i32(loc_1, loc_3), 32) then
																							desired = 7
																							break
																						end
																						loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																						rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																						loc_2 = bit_xor(rt_shl_i32(4294967294, rt_sub_i32(loc_1, 1)), 4294967295)
																						reg_0 = loc_0
																						reg_1 = loc_2
																						while true do
																							if math_abs(loc_4) < 9.223372036854776e18 then
																								while true do
																									reg_2 = rt_truncate_i64_f64(loc_4)
																									desired = 21
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																							end
																							reg_2 = rt_i64_from_u32(0, 2147483648)
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						rt_store_f64(memory_at_0, reg_0 + 8, no_op(bit_and(reg_1, rt_shr_u32(rt_wrap_i32_i64(reg_2), loc_3))))
																						desired = 0
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					if loc_3 ~= 2 then
																						desired = 7
																						break
																					end
																					if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																						desired = 7
																						break
																					end
																					if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																						desired = 7
																						break
																					end
																					loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																					loc_5 = rt_load_f64(memory_at_0, loc_2 + 32)
																					rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																					while true do
																						if math_abs(loc_5) < 2.147483648e9 then
																							while true do
																								reg_0 = rt_truncate_f64(loc_5)
																								desired = 20
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_0 = 2147483648
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_3 = reg_0
																					reg_0 = loc_0
																					while true do
																						if math_abs(loc_4) < 9.223372036854776e18 then
																							while true do
																								reg_1 = rt_truncate_i64_f64(loc_4)
																								desired = 20
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_1 = rt_i64_from_u32(0, 2147483648)
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					rt_store_f64(memory_at_0, reg_0 + 8, no_op(rt_rotl_i32(rt_wrap_i32_i64(reg_1), loc_3)))
																					desired = 0
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				if loc_3 ~= 2 then
																					desired = 7
																					break
																				end
																				if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																					desired = 7
																					break
																				end
																				if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																					desired = 7
																					break
																				end
																				while true do
																					loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																					if math_abs(loc_4) < 2.147483648e9 then
																						while true do
																							reg_0 = rt_truncate_f64(loc_4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_0 = 2147483648
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_3 = reg_0
																				if loc_3 > 31 then
																					desired = 7
																					break
																				end
																				loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																				rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																				reg_0 = loc_0
																				while true do
																					if math_abs(loc_4) < 9.223372036854776e18 then
																						while true do
																							reg_1 = rt_truncate_i64_f64(loc_4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					reg_1 = rt_i64_from_u32(0, 2147483648)
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				rt_store_f64(memory_at_0, reg_0 + 8, no_op(rt_shl_i32(rt_wrap_i32_i64(reg_1), loc_3)))
																				desired = 0
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			if loc_3 < 3 then
																				desired = 7
																				break
																			end
																			if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																				desired = 7
																				break
																			end
																			if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																				desired = 7
																				break
																			end
																			if rt_load_i32(memory_at_0, loc_2 + 48) ~= 3 then
																				desired = 7
																				break
																			end
																			while true do
																				loc_1 = 1
																				reg_0 = loc_1
																				if loc_3 == 3 then
																					break
																				end
																				if rt_load_i32(memory_at_0, loc_2 + 72) ~= 3 then
																					desired = 7
																					break
																				end
																				loc_4 = rt_load_f64(memory_at_0, loc_2 + 80)
																				if math_abs(loc_4) < 2.147483648e9 then
																					while true do
																						reg_0 = rt_truncate_f64(loc_4)
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				reg_0 = 2147483648
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_1 = reg_0
																			while true do
																				loc_4 = rt_load_f64(memory_at_0, loc_2 + 56)
																				if math_abs(loc_4) < 2.147483648e9 then
																					while true do
																						reg_0 = rt_truncate_f64(loc_4)
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				reg_0 = 2147483648
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_3 = reg_0
																			if rt_lt_i32(loc_3, 0) then
																				desired = 7
																				break
																			end
																			if rt_le_i32(loc_1, 0) then
																				desired = 7
																				break
																			end
																			if rt_gt_i32(rt_add_i32(loc_1, loc_3), 32) then
																				desired = 7
																				break
																			end
																			loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																			loc_5 = rt_load_f64(memory_at_0, loc_2 + 32)
																			rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																			loc_2 = bit_xor(rt_shl_i32(4294967294, rt_sub_i32(loc_1, 1)), 4294967295)
																			reg_0 = loc_0
																			reg_1 = loc_2
																			while true do
																				if math_abs(loc_5) < 9.223372036854776e18 then
																					while true do
																						reg_2 = rt_truncate_i64_f64(loc_5)
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				reg_2 = rt_i64_from_u32(0, 2147483648)
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_1 = rt_shl_i32(bit_and(reg_1, rt_wrap_i32_i64(reg_2)), loc_3)
																			loc_3 = bit_xor(rt_shl_i32(loc_2, loc_3), 4294967295)
																			reg_1 = loc_1
																			reg_2 = loc_3
																			while true do
																				if math_abs(loc_4) < 9.223372036854776e18 then
																					while true do
																						reg_3 = rt_truncate_i64_f64(loc_4)
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				reg_3 = rt_i64_from_u32(0, 2147483648)
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			rt_store_f64(memory_at_0, reg_0 + 8, no_op(bit_or(reg_1, bit_and(reg_2, rt_wrap_i32_i64(reg_3)))))
																			desired = 0
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		if loc_3 ~= 2 then
																			desired = 7
																			break
																		end
																		if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																			desired = 7
																			break
																		end
																		if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																			desired = 7
																			break
																		end
																		loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																		loc_5 = rt_load_f64(memory_at_0, loc_2 + 32)
																		rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																		while true do
																			if math_abs(loc_5) < 2.147483648e9 then
																				while true do
																					reg_0 = rt_truncate_f64(loc_5)
																					desired = 17
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_0 = 2147483648
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_3 = reg_0
																		reg_0 = loc_0
																		while true do
																			if math_abs(loc_4) < 9.223372036854776e18 then
																				while true do
																					reg_1 = rt_truncate_i64_f64(loc_4)
																					desired = 17
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_1 = rt_i64_from_u32(0, 2147483648)
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		rt_store_f64(memory_at_0, reg_0 + 8, no_op(rt_rotr_i32(rt_wrap_i32_i64(reg_1), loc_3)))
																		desired = 0
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if loc_3 ~= 2 then
																		desired = 7
																		break
																	end
																	if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																		desired = 7
																		break
																	end
																	if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																		desired = 7
																		break
																	end
																	while true do
																		loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																		if math_abs(loc_4) < 2.147483648e9 then
																			while true do
																				reg_0 = rt_truncate_f64(loc_4)
																				desired = 16
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_0 = 2147483648
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_3 = reg_0
																	if loc_3 > 31 then
																		desired = 7
																		break
																	end
																	loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
																	rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
																	reg_0 = loc_0
																	while true do
																		if math_abs(loc_4) < 9.223372036854776e18 then
																			while true do
																				reg_1 = rt_truncate_i64_f64(loc_4)
																				desired = 16
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_1 = rt_i64_from_u32(0, 2147483648)
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	rt_store_f64(memory_at_0, reg_0 + 8, no_op(rt_shr_u32(rt_wrap_i32_i64(reg_1), loc_3)))
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																if loc_3 ~= 1 then
																	desired = 7
																	break
																end
																if rt_load_i32(memory_at_0, loc_2) == 0 then
																	desired = 7
																	break
																end
																FUNC_LIST[27](loc_0, loc_2)
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															while true do
																while true do
																	if not br_map[3] then
																		br_map[3] = (function()
																			return { [0] = 0, 1, }
																		end)()
																	end
																	temp = br_map[3][rt_sub_i32(loc_3, 1)] or 8
																	if temp < 1 then
																		break
																	elseif temp > 1 then
																		desired = 7
																		break
																	else
																		desired = 14
																		break
																	end
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																if rt_load_i32(memory_at_0, loc_2) ~= 5 then
																	desired = 7
																	break
																end
																if rt_load_i32(memory_at_0, loc_2 + 4) == 0 then
																	desired = 7
																	break
																end
																loc_3 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 8))
																desired = 3
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if rt_load_i32(memory_at_0, loc_2) ~= 5 then
																desired = 7
																break
															end
															if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
																desired = 7
																break
															end
															while true do
																loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
																if math_abs(loc_4) < 2.147483648e9 then
																	while true do
																		reg_0 = rt_truncate_f64(loc_4)
																		desired = 14
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																reg_0 = 2147483648
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_3 = reg_0
															if rt_le_i32(loc_3, 0) then
																desired = 7
																break
															end
															if loc_3 > rt_load_i32(memory_at_0, loc_2 + 4) then
																desired = 7
																break
															end
															loc_3 = rt_load_i32_u8(memory_at_0, rt_sub_i32(rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_2 + 8)), 1))
															desired = 3
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if loc_3 ~= 1 then
															desired = 7
															break
														end
														if rt_load_i32(memory_at_0, loc_2) ~= 5 then
															desired = 7
															break
														end
														loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
														desired = 3
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if loc_3 ~= 1 then
														desired = 7
														break
													end
													if rt_load_i32(memory_at_0, loc_2) == 0 then
														desired = 7
														break
													end
													FUNC_LIST[27](loc_0, loc_2)
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_3 ~= 3 then
													desired = 7
													break
												end
												if rt_load_i32(memory_at_0, loc_2) ~= 3 then
													desired = 7
													break
												end
												if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
													desired = 7
													break
												end
												if rt_load_i32(memory_at_0, loc_2 + 48) ~= 3 then
													desired = 7
													break
												end
												loc_4 = rt_load_f64(memory_at_0, loc_2 + 32)
												loc_5 = rt_load_f64(memory_at_0, loc_2 + 56)
												if (if loc_4 <= loc_5 then 1 else 0) == 0 then
													desired = 7
													break
												end
												loc_6 = rt_load_f64(memory_at_0, loc_2 + 8)
												rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
												loc_4 = (if loc_4 > loc_6 then loc_4 else loc_6)
												rt_store_f64(memory_at_0, loc_0 + 8, (if loc_4 > loc_5 then loc_5 else loc_4))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_3 ~= 1 then
												desired = 7
												break
											end
											if rt_load_i32(memory_at_0, loc_2) ~= 3 then
												desired = 7
												break
											end
											loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
											rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
											rt_store_f64(memory_at_0, loc_0 + 8, (if loc_4 > 0e0 then 1e0 else (if loc_4 < 0e0 then -1e0 else 0e0)))
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_3 ~= 1 then
											desired = 7
											break
										end
										if rt_load_i32(memory_at_0, loc_2) ~= 3 then
											desired = 7
											break
										end
										loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
										rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
										reg_1 = FUNC_LIST[605](loc_4)
										rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_3 < 3 then
										break
									end
									if rt_load_i32(memory_at_0, loc_2) ~= 3 then
										break
									end
									if rt_load_i32(memory_at_0, loc_2 + 24) ~= 3 then
										break
									end
									if rt_load_i32(memory_at_0, loc_2 + 48) ~= 3 then
										break
									end
									while true do
										while true do
											if not br_map[4] then
												br_map[4] = (function()
													return { [0] = 0, 1, }
												end)()
											end
											temp = br_map[4][rt_sub_i32(loc_3, 3)] or 2
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 7
												break
											else
												desired = 8
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
										loc_5 = rt_load_f64(memory_at_0, loc_2 + 32)
										loc_6 = rt_load_f64(memory_at_0, loc_2 + 56)
										rt_store_i32(memory_at_0, loc_0 + 20, 0)
										rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(4, 0))
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32(memory_at_0, loc_2 + 72) ~= 3 then
										break
									end
									loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
									loc_5 = rt_load_f64(memory_at_0, loc_2 + 32)
									loc_6 = rt_load_f64(memory_at_0, loc_2 + 56)
									loc_7 = rt_load_f64(memory_at_0, loc_2 + 80)
									rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(4, 0))
									rt_store_f32(memory_at_0, loc_0 + 20, no_op(loc_7))
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_f64(memory_at_0, loc_0 + 8, loc_4)
							rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
					rt_store_f64(memory_at_0, loc_0 + 8, no_op(loc_8))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
				rt_store_f64(memory_at_0, loc_0 + 8, no_op(loc_3))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f32(memory_at_0, loc_0 + 16, no_op(loc_6))
			rt_store_f32(memory_at_0, loc_0 + 12, no_op(loc_5))
			rt_store_f32(memory_at_0, loc_0 + 8, no_op(loc_4))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
		break
	end
end
FUNC_LIST[27] = --[[ Luau::Compile::ctype(Luau::Compile::Constant const&) ]] function(loc_0, loc_1)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 2, 3, 4, }
										end)()
									end
									temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1), 1)] or 5
									if temp < 3 then
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									elseif temp > 3 then
										if temp < 5 then
											desired = 3
											break
										else
											desired = 2
											break
										end
									else
										desired = 4
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_0 + 8, 3519)
								rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(5, 3))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 8, 3444)
							rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(5, 7))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 8, 3019)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 8, 2823)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, 3838)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(5, 6))
		break
	end
end
FUNC_LIST[28] = --[[ Luau::Compile::foldBuiltinMath(Luau::AstName) ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if loc_1 == 0 then
				break
			end
			while true do
				if rt_load_i32_u8(memory_at_0, loc_1) ~= 112 then
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_1 + 1) ~= 105 then
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_1 + 2) ~= 0 then
					break
				end
				rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_from_u32(1413754136, 1074340347))
				rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[584](loc_1, 4869)
			if reg_0 ~= 0 then
				break
			end
			rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_from_u32(0, 2146435072))
			rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
		break
	end
end
FUNC_LIST[29] = --[[ Luau::Compile::foldConstants(Luau::DenseHashMap<Luau::AstExpr*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExpr*>>&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Variable, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>&, Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>&, Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>> const*, bool, Luau::AstNode*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 44, 0)
		rt_store_i64(memory_at_0, loc_6 + 36, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, loc_6 + 32, loc_4)
		rt_store_i32(memory_at_0, loc_6 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_6 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_6 + 12, 9864)
		rt_store_i32(memory_at_0, loc_6 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_6 + 16, loc_0)
		rt_store_i32_n8(memory_at_0, loc_6 + 33, (if bit_or(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_2 + 8)) == 0 then 1 else 0))
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, rt_add_i32(loc_6, 12))
		rt_store_i32(memory_at_0, loc_6 + 12, 9864)
		loc_2 = rt_load_i32(memory_at_0, loc_6 + 36)
		if loc_2 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_6 + 40, loc_2)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 44), loc_2))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 48)
		break
	end
end
FUNC_LIST[30] = --[[ Luau::Compile::ConstantVisitor::~ConstantVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 9864)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 24)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 32), loc_1))
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[31] = --[[ Luau::Compile::ConstantVisitor::~ConstantVisitor()_32 ]] function(loc_0)
	local loc_1 = 0
	while true do
		rt_store_i32(memory_at_0, loc_0, 9864)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 24)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 32), loc_1))
				break
			end
		end
		FUNC_LIST[653](loc_0, 36)
		break
	end
end
FUNC_LIST[32] = --[[ Luau::Compile::ConstantVisitor::visit(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[33](rt_add_i32(loc_2, 8), loc_0, loc_1)
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 32)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[33] = --[[ Luau::Compile::ConstantVisitor::analyze(Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 8, 0)
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48572) ~= loc_3 then
								break
							end
							FUNC_LIST[33](loc_0, loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_3 == rt_load_i32(memory_at_0, 48580) then
							while true do
								rt_store_i32(memory_at_0, loc_0, 1)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48588) ~= loc_3 then
								break
							end
							rt_store_i32(memory_at_0, loc_0, 2)
							rt_store_i32_n8(memory_at_0, loc_0 + 8, rt_load_i32_u8(memory_at_0, loc_2 + 24))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48596) ~= loc_3 then
								break
							end
							rt_store_i32(memory_at_0, loc_0, 3)
							rt_store_f64(memory_at_0, loc_0 + 8, rt_load_f64(memory_at_0, loc_2 + 24))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48604) ~= loc_3 then
								break
							end
							rt_store_i32(memory_at_0, loc_0, 5)
							rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_2 + 24))
							rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, loc_2 + 28))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48612) ~= loc_3 then
								break
							end
							reg_0 = FUNC_LIST[36](rt_load_i32(memory_at_0, loc_1 + 12), rt_add_i32(loc_2, 24))
							loc_3 = reg_0
							if loc_3 == 0 then
								desired = 4
								break
							end
							rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_3))
							rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
							rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, 48620) == loc_3 then
							break
						end
						if rt_load_i32(memory_at_0, 48628) == loc_3 then
							break
						end
						loc_5 = (if rt_load_i32(memory_at_0, 48636) == loc_3 then loc_2 else 0)
						rt_store_i32(memory_at_0, loc_4 + 76, loc_5)
						if loc_5 ~= 0 then
							while true do
								FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_5 + 24))
								while true do
									loc_3 = rt_load_i32(memory_at_0, loc_1 + 16)
									if loc_3 ~= 0 then
										while true do
											reg_0 = FUNC_LIST[37](loc_3, rt_add_i32(loc_4, 76))
											loc_9 = reg_0
											if loc_9 ~= 0 then
												desired = 6
												break
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_5 = rt_load_i32(memory_at_0, loc_4 + 76)
									if rt_load_i32(memory_at_0, loc_5 + 32) == 0 then
										desired = 4
										break
									end
									loc_3 = 0
									while true do
										FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 28), rt_shl_i32(loc_3, 2))))
										loc_3 = rt_add_i32(loc_3, 1)
										loc_5 = rt_load_i32(memory_at_0, loc_4 + 76)
										if loc_3 < rt_load_i32(memory_at_0, loc_5 + 32) then
											continue
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									break
								end
								loc_7 = rt_add_i32(loc_1, 24)
								loc_10 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_load_i32(memory_at_0, loc_1 + 24))
								loc_11 = rt_div_i32(loc_10, 24)
								FUNC_LIST[38](loc_7, rt_add_i32(loc_11, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 76) + 32)))
								loc_3 = 0
								while true do
									while true do
										loc_5 = rt_load_i32(memory_at_0, loc_4 + 76)
										if rt_load_i32(memory_at_0, loc_5 + 32) == 0 then
											while true do
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_8 = 1
										while true do
											FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 28), rt_shl_i32(loc_3, 2))))
											while true do
												if rt_load_i32(memory_at_0, loc_4 + 48) == 0 then
													while true do
														loc_8 = 0
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												FUNC_LIST[39](loc_7, rt_add_i32(loc_4, 48))
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											loc_3 = rt_add_i32(loc_3, 1)
											loc_5 = rt_load_i32(memory_at_0, loc_4 + 76)
											loc_6 = rt_load_i32(memory_at_0, loc_5 + 32)
											if loc_3 < loc_6 then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if bit_and(loc_8, 1) == 0 then
											desired = 6
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									FUNC_LIST[26](loc_0, rt_load_i32(memory_at_0, loc_9), rt_add_i32(loc_10, rt_load_i32(memory_at_0, loc_7)), loc_6)
									break
								end
								if desired then
									break
								end
								FUNC_LIST[40](loc_7, loc_11)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48644) ~= loc_3 then
								break
							end
							FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
							if rt_load_i32_u8(memory_at_0, loc_1 + 20) ~= 1 then
								desired = 4
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 24)
							if loc_3 == 0 then
								desired = 4
								break
							end
							if rt_load_i32(memory_at_0, loc_3 + 4) ~= rt_load_i32(memory_at_0, 48620) then
								desired = 4
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
							if loc_3 == 0 then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[584](loc_3, 3620)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							FUNC_LIST[28](loc_0, rt_load_i32(memory_at_0, loc_2 + 28))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48652) ~= loc_3 then
								break
							end
							FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
							FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_2 + 28))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48660) ~= loc_3 then
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 100)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if rt_load_i32(memory_at_0, 48668) ~= loc_3 then
								break
							end
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, loc_2 + 28) == 0 then
								desired = 4
								break
							end
							loc_3 = 0
							while true do
								loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 24), rt_mul_i32(loc_3, 12))
								loc_6 = rt_load_i32(memory_at_0, loc_5 + 4)
								if loc_6 ~= 0 then
									while true do
										FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, loc_6)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_5 + 8))
								loc_3 = rt_add_i32(loc_3, 1)
								if loc_3 < rt_load_i32(memory_at_0, loc_2 + 28) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48676) ~= loc_3 then
								break
							end
							FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_2 + 28))
							if rt_load_i32(memory_at_0, loc_4 + 48) == 0 then
								desired = 4
								break
							end
							FUNC_LIST[41](loc_0, rt_load_i32(memory_at_0, loc_2 + 24), rt_add_i32(loc_4, 48))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48684) ~= loc_3 then
								break
							end
							FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_2 + 28))
							FUNC_LIST[33](rt_add_i32(loc_4, 24), loc_1, rt_load_i32(memory_at_0, loc_2 + 32))
							if rt_load_i32(memory_at_0, loc_4 + 48) == 0 then
								desired = 4
								break
							end
							FUNC_LIST[42](loc_0, rt_load_i32(memory_at_0, loc_2 + 24), rt_add_i32(loc_4, 48), rt_add_i32(loc_4, 24))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48692) ~= loc_3 then
								break
							end
							FUNC_LIST[33](loc_0, loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48700) ~= loc_3 then
								break
							end
							FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
							FUNC_LIST[33](rt_add_i32(loc_4, 24), loc_1, rt_load_i32(memory_at_0, loc_2 + 32))
							FUNC_LIST[33](loc_4, loc_1, rt_load_i32(memory_at_0, loc_2 + 40))
							while true do
								while true do
									while true do
										loc_3 = loc_4
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 4, 2, 0, }
											end)()
										end
										temp = br_map[1][rt_load_i32(memory_at_0, loc_3 + 48)] or 1
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 4
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32_u8(memory_at_0, loc_4 + 56) == 0 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = rt_add_i32(loc_4, 24)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_3))
							rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
							rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48708) ~= loc_3 then
							break
						end
						loc_5 = rt_load_i32(memory_at_0, loc_2 + 36)
						if loc_5 == 0 then
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 32)
						loc_5 = rt_add_i32(loc_3, rt_shl_i32(loc_5, 2))
						while true do
							FUNC_LIST[33](rt_add_i32(loc_4, 48), loc_1, rt_load_i32(memory_at_0, loc_3))
							loc_3 = rt_add_i32(loc_3, 4)
							if loc_5 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
					loc_5 = rt_load_i32(memory_at_0, loc_0)
					rt_store_i32(memory_at_0, loc_4 + 48, loc_2)
					if loc_5 ~= 0 then
						desired = 2
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_1 + 21) ~= 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_3 + 8) == 0 then
						desired = 1
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_3 + 12)
					if loc_6 == loc_2 then
						desired = 1
						break
					end
					loc_1 = bit_xor(rt_shr_u32(loc_2, 4), rt_shr_u32(loc_2, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), 1)
					loc_7 = rt_load_i32(memory_at_0, loc_3)
					loc_0 = 0
					while true do
						loc_3 = bit_and(loc_1, loc_5)
						loc_8 = rt_add_i32(rt_shl_i32(loc_3, 5), loc_7)
						loc_1 = rt_load_i32(memory_at_0, loc_8)
						if loc_1 ~= loc_2 then
							while true do
								if loc_1 == loc_6 then
									desired = 1
									break
								end
								loc_0 = rt_add_i32(loc_0, 1)
								loc_1 = rt_add_i32(loc_3, loc_0)
								if loc_0 <= loc_5 then
									desired = 4
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_8 + 8, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
				rt_store_i32(memory_at_0, loc_4 + 48, loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[43](loc_3, rt_add_i32(loc_4, 48))
			loc_2 = reg_0
			rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_0 + 16))
			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_0 + 8))
			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_0))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 80)
		break
	end
end
FUNC_LIST[34] = --[[ Luau::Compile::ConstantVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 40)
		while true do
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_1 + 32)
					if loc_5 == 0 then
						while true do
							loc_5 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_2 == 0 then
							break
						end
						while true do
							loc_2 = rt_shl_i32(loc_3, 2)
							FUNC_LIST[33](rt_add_i32(loc_4, 8), loc_0, rt_load_i32(memory_at_0, rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_1 + 36))))
							FUNC_LIST[35](loc_0, rt_load_i32(memory_at_0, rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_1 + 28))), rt_add_i32(loc_4, 8))
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 40)
							loc_3 = rt_add_i32(loc_3, 1)
							loc_5 = rt_load_i32(memory_at_0, loc_1 + 32)
							if loc_3 >= loc_5 then
								desired = 4
								break
							end
							if loc_2 > loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 < loc_5 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 <= loc_5 then
					desired = 1
					break
				end
				while true do
					FUNC_LIST[33](rt_add_i32(loc_4, 8), loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_5, 2))))
					loc_5 = rt_add_i32(loc_5, 1)
					if loc_5 < rt_load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_2, 2)), 4))
				if loc_3 == 0 then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_3 + 4)
				if loc_3 == rt_load_i32(memory_at_0, 48636) then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, 48628) == loc_3 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				rt_store_i32(memory_at_0, loc_4 + 16, 0)
				rt_store_i64(memory_at_0, loc_4 + 8, rt_i64_ONE)
				FUNC_LIST[35](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2))), rt_add_i32(loc_4, 8))
				loc_2 = rt_add_i32(loc_2, 1)
				if loc_2 < rt_load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[35] = --[[ Luau::Compile::ConstantVisitor::recordValue(Luau::AstLocal*, Luau::Compile::Constant const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			if rt_load_i32(memory_at_0, loc_3 + 8) == 0 then
				break
			end
			loc_8 = rt_load_i32(memory_at_0, loc_3 + 12)
			if loc_8 == loc_1 then
				break
			end
			loc_5 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), 1)
			loc_9 = rt_load_i32(memory_at_0, loc_3)
			loc_3 = 0
			while true do
				loc_10 = bit_and(loc_5, loc_6)
				loc_4 = rt_add_i32(rt_mul_i32(loc_10, 12), loc_9)
				loc_5 = rt_load_i32(memory_at_0, loc_4)
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_4 = 0
				if loc_5 == loc_8 then
					desired = 1
					break
				end
				loc_3 = rt_add_i32(loc_3, 1)
				loc_5 = rt_add_i32(loc_10, loc_3)
				if loc_3 <= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_3 = (if loc_4 ~= 0 then rt_add_i32(loc_4, 4) else 0)
			if rt_load_i32_u8(memory_at_0, loc_3 + 4) ~= 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_2)
			rt_store_i32_n8(memory_at_0, loc_3 + 5, (if loc_4 ~= 0 then 1 else 0))
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			rt_store_i32(memory_at_0, loc_7 + 12, loc_1)
			if loc_4 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[43](loc_3, rt_add_i32(loc_7, 12))
					loc_3 = reg_0
					rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
					rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
					rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_load_i32_u8(memory_at_0, loc_0 + 21) ~= 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_3 + 8) == 0 then
				break
			end
			loc_10 = rt_load_i32(memory_at_0, loc_3 + 12)
			if loc_10 == loc_1 then
				break
			end
			loc_4 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), 1)
			loc_8 = rt_load_i32(memory_at_0, loc_3)
			loc_3 = 0
			while true do
				loc_6 = bit_and(loc_4, loc_5)
				loc_9 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_8)
				loc_4 = rt_load_i32(memory_at_0, loc_9)
				if loc_4 ~= loc_1 then
					while true do
						if loc_4 == loc_10 then
							desired = 1
							break
						end
						loc_3 = rt_add_i32(loc_3, 1)
						loc_4 = rt_add_i32(loc_6, loc_3)
						if loc_3 <= loc_5 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_9 + 8, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
		break
	end
end
FUNC_LIST[36] = --[[ Luau::DenseHashMap<Luau::AstLocal*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::find(Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_3 == loc_5 then
				break
			end
			loc_1 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				loc_7 = bit_and(loc_1, loc_4)
				loc_2 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_6)
				loc_1 = rt_load_i32(memory_at_0, loc_2)
				if loc_3 == loc_1 then
					desired = 1
					break
				end
				loc_2 = 0
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_0 = rt_add_i32(loc_0, 1)
				loc_1 = rt_add_i32(loc_7, loc_0)
				if loc_0 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = (if loc_2 ~= 0 then rt_add_i32(loc_2, 8) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[37] = --[[ Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>>::find(Luau::AstExprCall* const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_3 == loc_5 then
				break
			end
			loc_1 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				loc_7 = bit_and(loc_1, loc_4)
				loc_2 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_6)
				loc_1 = rt_load_i32(memory_at_0, loc_2)
				if loc_3 == loc_1 then
					desired = 1
					break
				end
				loc_2 = 0
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_0 = rt_add_i32(loc_0, 1)
				loc_1 = rt_add_i32(loc_7, loc_0)
				if loc_0 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = (if loc_2 ~= 0 then rt_add_i32(loc_2, 4) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[38] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::reserve(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_0)
				loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_3)
				if rt_div_i32(loc_5, 24) >= loc_1 then
					break
				end
				if loc_1 >= 178956971 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				loc_1 = rt_mul_i32(loc_1, 24)
				reg_0 = FUNC_LIST[646](loc_1)
				loc_4 = reg_0
				loc_6 = rt_add_i32(loc_4, loc_1)
				loc_4 = rt_add_i32(rt_sub_i32(loc_2, loc_3), loc_4)
				loc_1 = loc_4
				if loc_2 ~= loc_3 then
					while true do
						while true do
							loc_1 = rt_sub_i32(loc_1, 24)
							loc_2 = rt_sub_i32(loc_2, 24)
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
							rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
							if loc_2 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 8, loc_6)
				rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
				rt_store_i32(memory_at_0, loc_0, loc_1)
				if loc_3 == 0 then
					break
				end
				FUNC_LIST[653](loc_3, loc_5)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[39] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::push_back[abi:ne180100](Luau::Compile::Constant const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_2 < loc_6 then
			while true do
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
				rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
				rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_2, 24))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			loc_8 = rt_div_i32(rt_sub_i32(loc_2, loc_4), 24)
			loc_3 = rt_add_i32(loc_8, 1)
			if loc_3 < 178956971 then
				while true do
					loc_5 = rt_div_i32(rt_sub_i32(loc_6, loc_4), 24)
					loc_7 = rt_shl_i32(loc_5, 1)
					loc_5 = (if loc_5 >= 89478485 then 178956970 else (if loc_3 < loc_7 then loc_7 else loc_3))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 178956971 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_5, 24))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_7 = reg_0
					loc_3 = rt_add_i32(loc_7, rt_mul_i32(loc_8, 24))
					rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
					rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_5 = rt_add_i32(rt_mul_i32(loc_5, 24), loc_7)
					loc_1 = rt_add_i32(loc_3, 24)
					if loc_2 ~= loc_4 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 24)
								loc_2 = rt_sub_i32(loc_2, 24)
								rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
								rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_4
							break
						end
						if desired then
							break
						end
					end
					loc_4 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 8, loc_5)
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_3)
					if loc_4 ~= 0 then
						while true do
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_6, loc_4))
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[40] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::resize(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0)
		loc_2 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_3), 24)
		if loc_1 > loc_2 then
			while true do
				FUNC_LIST[45](loc_0, rt_sub_i32(loc_1, loc_2))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 < loc_2 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(rt_mul_i32(loc_1, 24), loc_3))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[41] = --[[ Luau::Compile::foldUnary(Luau::Compile::Constant&, Luau::AstExprUnary::Op, Luau::Compile::Constant const&) ]] function(loc_0, loc_1, loc_2)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 1, 2, }
							end)()
						end
						temp = br_map[1][loc_1] or 3
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_2) == 0 then
						desired = 1
						break
					end
					rt_store_i32(memory_at_0, loc_0, 2)
					loc_1 = 1
					while true do
						while true do
							while true do
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 2, 0, }
									end)()
								end
								temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_2), 1)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32_n8(memory_at_0, loc_0 + 8, (if rt_load_i32_u8(memory_at_0, loc_2 + 8) == 0 then 1 else 0))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32_n8(memory_at_0, loc_0 + 8, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32(memory_at_0, loc_2) ~= 3 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_0, 3)
				rt_store_f64(memory_at_0, loc_0 + 8, rt_neg_f64(rt_load_f64(memory_at_0, loc_2 + 8)))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_load_i32(memory_at_0, loc_2) ~= 5 then
				break
			end
			rt_store_i32(memory_at_0, loc_0, 3)
			rt_store_f64(memory_at_0, loc_0 + 8, no_op(rt_load_i32(memory_at_0, loc_2 + 4)))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[42] = --[[ Luau::Compile::foldBinary(Luau::Compile::Constant&, Luau::AstExprBinary::Op, Luau::Compile::Constant const&, Luau::Compile::Constant const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if not br_map[1] then
																			br_map[1] = (function()
																				return { [0] = 0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, }
																			end)()
																		end
																		temp = br_map[1][loc_1] or 15
																		if temp < 8 then
																			if temp < 4 then
																				if temp < 2 then
																					if temp < 1 then
																						break
																					else
																						desired = 15
																						break
																					end
																				elseif temp > 2 then
																					desired = 13
																					break
																				else
																					desired = 14
																					break
																				end
																			elseif temp > 4 then
																				if temp < 6 then
																					desired = 11
																					break
																				elseif temp > 6 then
																					desired = 9
																					break
																				else
																					desired = 10
																					break
																				end
																			else
																				desired = 12
																				break
																			end
																		elseif temp > 8 then
																			if temp < 12 then
																				if temp < 10 then
																					desired = 7
																					break
																				elseif temp > 10 then
																					desired = 5
																					break
																				else
																					desired = 6
																					break
																				end
																			elseif temp > 12 then
																				if temp < 14 then
																					desired = 3
																					break
																				elseif temp > 14 then
																					desired = 1
																					break
																				else
																					desired = 2
																					break
																				end
																			else
																				desired = 4
																				break
																			end
																		else
																			desired = 8
																			break
																		end
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																		desired = 1
																		break
																	end
																	if rt_load_i32(memory_at_0, loc_3) ~= 3 then
																		desired = 1
																		break
																	end
																	rt_store_i32(memory_at_0, loc_0, 3)
																	rt_store_f64(memory_at_0, loc_0 + 8, (rt_load_f64(memory_at_0, loc_2 + 8) + rt_load_f64(memory_at_0, loc_3 + 8)))
																	desired = 0
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																	desired = 1
																	break
																end
																if rt_load_i32(memory_at_0, loc_3) ~= 3 then
																	desired = 1
																	break
																end
																rt_store_i32(memory_at_0, loc_0, 3)
																rt_store_f64(memory_at_0, loc_0 + 8, (rt_load_f64(memory_at_0, loc_2 + 8) - rt_load_f64(memory_at_0, loc_3 + 8)))
																desired = 0
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if rt_load_i32(memory_at_0, loc_2) ~= 3 then
																desired = 1
																break
															end
															if rt_load_i32(memory_at_0, loc_3) ~= 3 then
																desired = 1
																break
															end
															rt_store_i32(memory_at_0, loc_0, 3)
															rt_store_f64(memory_at_0, loc_0 + 8, (rt_load_f64(memory_at_0, loc_2 + 8) * rt_load_f64(memory_at_0, loc_3 + 8)))
															desired = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if rt_load_i32(memory_at_0, loc_2) ~= 3 then
															desired = 1
															break
														end
														if rt_load_i32(memory_at_0, loc_3) ~= 3 then
															desired = 1
															break
														end
														rt_store_i32(memory_at_0, loc_0, 3)
														rt_store_f64(memory_at_0, loc_0 + 8, (rt_load_f64(memory_at_0, loc_2 + 8) / rt_load_f64(memory_at_0, loc_3 + 8)))
														desired = 0
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if rt_load_i32(memory_at_0, loc_2) ~= 3 then
														desired = 1
														break
													end
													if rt_load_i32(memory_at_0, loc_3) ~= 3 then
														desired = 1
														break
													end
													rt_store_i32(memory_at_0, loc_0, 3)
													rt_store_f64(memory_at_0, loc_0 + 8, math_floor((rt_load_f64(memory_at_0, loc_2 + 8) / rt_load_f64(memory_at_0, loc_3 + 8))))
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if rt_load_i32(memory_at_0, loc_2) ~= 3 then
													desired = 1
													break
												end
												if rt_load_i32(memory_at_0, loc_3) ~= 3 then
													desired = 1
													break
												end
												rt_store_i32(memory_at_0, loc_0, 3)
												loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
												loc_5 = rt_load_f64(memory_at_0, loc_3 + 8)
												rt_store_f64(memory_at_0, loc_0 + 8, (loc_4 - (math_floor((loc_4 / loc_5)) * loc_5)))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_load_i32(memory_at_0, loc_2) ~= 3 then
												desired = 1
												break
											end
											if rt_load_i32(memory_at_0, loc_3) ~= 3 then
												desired = 1
												break
											end
											rt_store_i32(memory_at_0, loc_0, 3)
											reg_1 = FUNC_LIST[537](rt_load_f64(memory_at_0, loc_2 + 8), rt_load_f64(memory_at_0, loc_3 + 8))
											rt_store_f64(memory_at_0, loc_0 + 8, reg_1)
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if rt_load_i32(memory_at_0, loc_2) == 0 then
											desired = 1
											break
										end
										if rt_load_i32(memory_at_0, loc_3) == 0 then
											desired = 1
											break
										end
										rt_store_i32(memory_at_0, loc_0, 2)
										reg_1 = FUNC_LIST[46](loc_2, loc_3)
										rt_store_i32_n8(memory_at_0, loc_0 + 8, bit_xor(reg_1, 1))
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32(memory_at_0, loc_2) == 0 then
										desired = 1
										break
									end
									if rt_load_i32(memory_at_0, loc_3) == 0 then
										desired = 1
										break
									end
									rt_store_i32(memory_at_0, loc_0, 2)
									reg_1 = FUNC_LIST[46](loc_2, loc_3)
									rt_store_i32_n8(memory_at_0, loc_0 + 8, reg_1)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32(memory_at_0, loc_2) ~= 3 then
									desired = 1
									break
								end
								if rt_load_i32(memory_at_0, loc_3) ~= 3 then
									desired = 1
									break
								end
								rt_store_i32(memory_at_0, loc_0, 2)
								rt_store_i32_n8(memory_at_0, loc_0 + 8, (if rt_load_f64(memory_at_0, loc_2 + 8) < rt_load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_2) ~= 3 then
								desired = 1
								break
							end
							if rt_load_i32(memory_at_0, loc_3) ~= 3 then
								desired = 1
								break
							end
							rt_store_i32(memory_at_0, loc_0, 2)
							rt_store_i32_n8(memory_at_0, loc_0 + 8, (if rt_load_f64(memory_at_0, loc_2 + 8) <= rt_load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_2) ~= 3 then
							desired = 1
							break
						end
						if rt_load_i32(memory_at_0, loc_3) ~= 3 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_0, 2)
						rt_store_i32_n8(memory_at_0, loc_0 + 8, (if rt_load_f64(memory_at_0, loc_2 + 8) > rt_load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_2) ~= 3 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_3) ~= 3 then
						desired = 1
						break
					end
					rt_store_i32(memory_at_0, loc_0, 2)
					rt_store_i32_n8(memory_at_0, loc_0 + 8, (if rt_load_f64(memory_at_0, loc_2 + 8) >= rt_load_f64(memory_at_0, loc_3 + 8) then 1 else 0))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 4, 2, 0, }
								end)()
							end
							temp = br_map[2][rt_load_i32(memory_at_0, loc_2)] or 1
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_2 + 8) == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = loc_3
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_2))
				rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
				rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						if not br_map[3] then
							br_map[3] = (function()
								return { [0] = 3, 2, 0, }
							end)()
						end
						temp = br_map[3][rt_load_i32(memory_at_0, loc_2)] or 1
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_2 + 8) == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = loc_2
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_3))
			rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
			rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[43] = --[[ Luau::DenseHashMap<Luau::AstExpr*, Luau::Compile::Constant, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExpr*>>::operator[](Luau::AstExpr* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 5), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[47](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 5))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 5), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 8)
		break
	end
	return reg_0
end
FUNC_LIST[44] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::__throw_length_error[abi:ne180100]() const ]] function(loc_0)
	while true do
		FUNC_LIST[277](2823)
		error("out of code bounds")
	end
end
FUNC_LIST[45] = --[[ std::__2::vector<Luau::Compile::Constant, std::__2::allocator<Luau::Compile::Constant>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
		if rt_div_i32(rt_sub_i32(loc_7, loc_3), 24) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_2 = rt_sub_i32(rt_mul_i32(loc_1, 24), 24)
						loc_2 = rt_add_i32(rt_sub_i32(loc_2, (loc_2 % 24)), 24)
						reg_1 = FUNC_LIST[519](loc_3, 0, loc_2)
						reg_1 = rt_add_i32(reg_1, loc_2)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_3
						break
					end
					if desired then
						break
					end
				end
				loc_3 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 4, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			loc_8 = rt_div_i32(rt_sub_i32(loc_3, loc_4), 24)
			loc_2 = rt_add_i32(loc_1, loc_8)
			if loc_2 < 178956971 then
				while true do
					loc_6 = rt_div_i32(rt_sub_i32(loc_7, loc_4), 24)
					loc_9 = rt_shl_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 89478485 then 178956970 else (if loc_2 < loc_9 then loc_9 else loc_2))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 178956971 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 24))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_2 = rt_add_i32(loc_5, rt_mul_i32(loc_8, 24))
					loc_1 = rt_sub_i32(rt_mul_i32(loc_1, 24), 24)
					loc_1 = rt_add_i32(rt_sub_i32(loc_1, (loc_1 % 24)), 24)
					reg_0 = FUNC_LIST[519](loc_2, 0, loc_1)
					loc_1 = rt_add_i32(reg_0, loc_1)
					loc_5 = rt_add_i32(rt_mul_i32(loc_6, 24), loc_5)
					if loc_3 ~= loc_4 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 24)
								loc_3 = rt_sub_i32(loc_3, 24)
								rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
								rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
								rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
								if loc_3 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_4
							break
						end
						if desired then
							break
						end
					end
					loc_4 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 8, loc_5)
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_2)
					if loc_4 ~= 0 then
						while true do
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_7, loc_4))
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[46] = --[[ Luau::Compile::constantsEqual(Luau::Compile::Constant const&, Luau::Compile::Constant const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, 3, 4, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_0), 1)] or 5
								if temp < 3 then
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								elseif temp > 3 then
									if temp < 5 then
										desired = 2
										break
									else
										desired = 1
										break
									end
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = (if rt_load_i32(memory_at_0, loc_1) == 1 then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = bit_and((if rt_load_i32(memory_at_0, loc_1) == 2 then 1 else 0), (if rt_load_i32_u8(memory_at_0, loc_0 + 8) == rt_load_i32_u8(memory_at_0, loc_1 + 8) then 1 else 0))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = bit_and((if rt_load_i32(memory_at_0, loc_1) == 3 then 1 else 0), (if rt_load_f64(memory_at_0, loc_0 + 8) == rt_load_f64(memory_at_0, loc_1 + 8) then 1 else 0))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32(memory_at_0, loc_1) ~= 4 then
					desired = 1
					break
				end
				if rt_load_f32(memory_at_0, loc_0 + 8) ~= rt_load_f32(memory_at_0, loc_1 + 8) then
					desired = 1
					break
				end
				if rt_load_f32(memory_at_0, loc_0 + 12) ~= rt_load_f32(memory_at_0, loc_1 + 12) then
					desired = 1
					break
				end
				if rt_load_f32(memory_at_0, loc_0 + 16) ~= rt_load_f32(memory_at_0, loc_1 + 16) then
					desired = 1
					break
				end
				reg_0 = (if rt_load_f32(memory_at_0, loc_0 + 20) == rt_load_f32(memory_at_0, loc_1 + 20) then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_load_i32(memory_at_0, loc_1) ~= 5 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 ~= rt_load_i32(memory_at_0, loc_1 + 4) then
				break
			end
			reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_1 + 8), loc_3)
			loc_2 = (if reg_0 == 0 then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[47] = --[[ Luau::detail::DenseHashTable<Luau::AstExpr*, std::__2::pair<Luau::AstExpr*, Luau::Compile::Constant>, std::__2::pair<Luau::AstExpr* const, Luau::Compile::Constant>, Luau::detail::ItemInterfaceMap<Luau::AstExpr*, Luau::Compile::Constant>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExpr*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_11 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then rt_shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 5))
			loc_7 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 5), loc_7)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
						rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 56, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 48, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 72, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 80, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 88, rt_i64_ZERO)
						rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 4294967232), loc_3)
						rt_store_i64(memory_at_0, loc_1 + 104, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 112, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 120, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 96, loc_3)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_5 = rt_add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 5), loc_7)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_1 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_10 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(loc_9, 5))
					loc_4 = rt_load_i32(memory_at_0, loc_10)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9)))
									loc_5 = rt_add_i32(rt_shl_i32(loc_1, 5), loc_7)
									loc_3 = rt_load_i32(memory_at_0, loc_5)
									if loc_11 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = rt_add_i32(loc_2, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_2))
										loc_5 = rt_add_i32(rt_shl_i32(loc_1, 5), loc_7)
										loc_3 = rt_load_i32(memory_at_0, loc_5)
										if loc_11 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_5, loc_4)
							rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_10 + 24))
							rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_10 + 16))
							rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_10 + 8))
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = reg_0
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_1 > loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[48] = --[[ Luau::Compile::predictTableShapes(Luau::DenseHashMap<Luau::AstExprTable*, Luau::Compile::TableShape, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprTable*>>&, Luau::AstNode*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 44, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_2 + 52, 0)
		rt_store_i64(memory_at_0, loc_2 + 68, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_2 + 12, loc_0)
		rt_store_i32(memory_at_0, loc_2 + 8, 10156)
		rt_store_i64(memory_at_0, loc_2 + 36, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 60, rt_i64_ZERO)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1))](loc_1, rt_add_i32(loc_2, 8))
		rt_store_i32(memory_at_0, loc_2 + 8, 10156)
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 60)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_2 + 60, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 36)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_2 + 36, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 80)
		break
	end
end
FUNC_LIST[49] = --[[ Luau::Compile::ShapeVisitor::~ShapeVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 10156)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 52)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 52, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 28)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 28, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[50] = --[[ Luau::Compile::ShapeVisitor::~ShapeVisitor()_51 ]] function(loc_0)
	local loc_1 = 0
	while true do
		rt_store_i32(memory_at_0, loc_0, 10156)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 52)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 52, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 28)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 28, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		FUNC_LIST[653](loc_0, 72)
		break
	end
end
FUNC_LIST[51] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 32) ~= 1 then
				break
			end
			if rt_load_i32(memory_at_0, loc_1 + 40) ~= 1 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 36))
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
			loc_4 = rt_load_i32(memory_at_0, 48668)
			if (if loc_4 == loc_3 then loc_2 else 0) == 0 then
				while true do
					if rt_load_i32(memory_at_0, 48636) ~= loc_3 then
						desired = 1
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_2 + 36) ~= 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_2 + 32) ~= 2 then
						desired = 1
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 24)
					if loc_3 == 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_3 + 4) ~= rt_load_i32(memory_at_0, 48620) then
						desired = 1
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
					if loc_3 == 0 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[584](loc_3, 4801)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 28))
					loc_2 = (if loc_4 == rt_load_i32(memory_at_0, loc_2 + 4) then loc_2 else 0)
					if loc_2 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_load_i32(memory_at_0, loc_2 + 28) ~= 0 then
				break
			end
			reg_0 = FUNC_LIST[24](rt_add_i32(loc_0, 8), rt_load_i32(memory_at_0, loc_1 + 28))
			rt_store_i32(memory_at_0, reg_0, loc_2)
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[52] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatFor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
			reg_0 = loc_2
			reg_2 = rt_load_i32(memory_at_0, loc_2 + 4)
			loc_2 = rt_load_i32(memory_at_0, 48596)
			loc_3 = (if reg_2 == loc_2 then reg_0 else 0)
			if loc_3 == 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 36)
			loc_2 = (if loc_2 == rt_load_i32(memory_at_0, loc_4 + 4) then loc_4 else 0)
			if loc_2 == 0 then
				break
			end
			if rt_load_f64(memory_at_0, loc_3 + 24) ~= 1e0 then
				break
			end
			loc_5 = rt_load_f64(memory_at_0, loc_2 + 24)
			if (if loc_5 >= 1e0 then 1 else 0) == 0 then
				break
			end
			if (if loc_5 <= 1.6e1 then 1 else 0) == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_1 + 40) ~= 0 then
				break
			end
			loc_1 = rt_add_i32(loc_1, 28)
			loc_2 = rt_add_i32(loc_0, 52)
			while true do
				if bit_and((if loc_5 < 4.294967296e9 then 1 else 0), (if loc_5 >= 0e0 then 1 else 0)) ~= 0 then
					while true do
						reg_0 = rt_truncate_f64(loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			reg_0 = FUNC_LIST[24](loc_2, loc_1)
			rt_store_i32(memory_at_0, reg_0, loc_3)
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[53] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		if rt_load_i32(memory_at_0, loc_1 + 32) ~= 0 then
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_3, 2)))
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48644) ~= loc_4 then
								break
							end
							FUNC_LIST[54](loc_0, rt_load_i32(memory_at_0, loc_2 + 24), rt_load_i32(memory_at_0, loc_2 + 28))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48652) ~= loc_4 then
							break
						end
						FUNC_LIST[55](loc_0, rt_load_i32(memory_at_0, loc_2 + 24), rt_load_i32(memory_at_0, loc_2 + 28))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					if loc_3 < rt_load_i32(memory_at_0, loc_1 + 32) then
						continue
					end
					break
				end
				break
			end
		end
		if rt_load_i32(memory_at_0, loc_1 + 40) ~= 0 then
			while true do
				loc_2 = 0
				while true do
					loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_2, 2)))
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_2 < rt_load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[54] = --[[ Luau::Compile::ShapeVisitor::assignField(Luau::AstExpr*, Luau::AstName) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			if loc_1 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_1 + 4) ~= rt_load_i32(memory_at_0, 48612) then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 16) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_5 == loc_4 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 12), 1)
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_1 = 0
			while true do
				loc_7 = bit_and(loc_3, loc_6)
				loc_10 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_9)
				loc_3 = rt_load_i32(memory_at_0, loc_10)
				if loc_3 ~= loc_5 then
					while true do
						if loc_3 == loc_4 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						loc_3 = rt_add_i32(loc_7, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_10 + 4)
			rt_store_i32(memory_at_0, loc_8 + 12, loc_2)
			rt_store_i32(memory_at_0, loc_8 + 8, loc_4)
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 36) == 0 then
					break
				end
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 40)
				loc_11 = rt_load_i32(memory_at_0, loc_0 + 44)
				if bit_and((if loc_4 == loc_9 then 1 else 0), (if loc_2 == loc_11 then 1 else 0)) ~= 0 then
					break
				end
				loc_1 = bit_xor(loc_2, loc_4)
				loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
				loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 32), 1)
				loc_12 = rt_load_i32(memory_at_0, loc_0 + 28)
				loc_1 = 0
				while true do
					loc_5 = bit_and(loc_3, loc_6)
					loc_7 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_12)
					loc_3 = rt_load_i32(memory_at_0, loc_7 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_7)
					if bit_and((if loc_7 == loc_4 then 1 else 0), (if loc_2 == loc_3 then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					if bit_and((if loc_7 == loc_9 then 1 else 0), (if loc_3 == loc_11 then 1 else 0)) ~= 0 then
						desired = 2
						break
					end
					loc_1 = rt_add_i32(loc_1, 1)
					loc_3 = rt_add_i32(loc_5, loc_1)
					if loc_1 <= loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[57](rt_add_i32(loc_0, 28), rt_add_i32(loc_8, 8))
			reg_0 = FUNC_LIST[253](rt_load_i32(memory_at_0, loc_0 + 4), rt_add_i32(loc_10, 4))
			loc_1 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
		break
	end
end
FUNC_LIST[55] = --[[ Luau::Compile::ShapeVisitor::assignField(Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		while true do
			if loc_1 == 0 then
				break
			end
			loc_10 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_10 ~= rt_load_i32(memory_at_0, 48612) then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 16) == 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_4 == loc_5 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 12), 1)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_1 = 0
			while true do
				loc_8 = bit_and(loc_3, loc_6)
				loc_9 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_7)
				loc_3 = rt_load_i32(memory_at_0, loc_9)
				if loc_3 ~= loc_4 then
					while true do
						if loc_3 == loc_5 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						loc_3 = rt_add_i32(loc_8, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_add_i32(loc_9, 4)
			loc_1 = rt_load_i32(memory_at_0, loc_2 + 4)
			while true do
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48596) ~= loc_1 then
					break
				end
				reg_0 = FUNC_LIST[253](rt_load_i32(memory_at_0, loc_0 + 4), loc_4)
				loc_1 = reg_0
				loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 1)
				if rt_load_f64(memory_at_0, loc_2 + 24) ~= no_op(loc_3) then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_1, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			if loc_1 ~= loc_10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 60) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 24)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 64)
			if loc_5 == loc_7 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 56), 1)
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 52)
			loc_1 = 0
			while true do
				loc_8 = bit_and(loc_3, loc_6)
				loc_2 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_9)
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				if loc_3 ~= loc_5 then
					while true do
						if loc_3 == loc_7 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						loc_3 = rt_add_i32(loc_8, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[253](rt_load_i32(memory_at_0, loc_0 + 4), loc_4)
			loc_1 = reg_0
			if rt_load_i32(memory_at_0, loc_1) ~= 0 then
				break
			end
			rt_store_i32(memory_at_0, loc_1, rt_load_i32(memory_at_0, loc_2 + 4))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[56] = --[[ Luau::Compile::ShapeVisitor::visit(Luau::AstStatFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48644) ~= loc_3 then
					break
				end
				FUNC_LIST[54](loc_0, rt_load_i32(memory_at_0, loc_2 + 24), rt_load_i32(memory_at_0, loc_2 + 28))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, 48652) ~= loc_3 then
				break
			end
			FUNC_LIST[55](loc_0, rt_load_i32(memory_at_0, loc_2 + 24), rt_load_i32(memory_at_0, loc_2 + 28))
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[57] = --[[ Luau::DenseHashSet<std::__2::pair<Luau::AstExprTable*, Luau::AstName>, Luau::Compile::ShapeVisitor::Hasher, std::__2::equal_to<std::__2::pair<Luau::AstExprTable*, Luau::AstName>>>::insert(std::__2::pair<Luau::AstExprTable*, Luau::AstName> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_2 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_11 = rt_load_i32(memory_at_0, loc_0 + 12)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_10 = rt_load_i32(memory_at_0, loc_1 + 4)
				if bit_and((if loc_5 == loc_11 then 1 else 0), (if loc_9 == loc_10 then 1 else 0)) ~= 0 then
					break
				end
				loc_2 = bit_xor(loc_5, loc_10)
				loc_4 = bit_xor(rt_shr_u32(loc_2, 4), rt_shr_u32(loc_2, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_12 = rt_load_i32(memory_at_0, loc_0)
				loc_2 = 0
				while true do
					loc_8 = bit_and(loc_4, loc_7)
					loc_3 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_12)
					loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
					loc_3 = rt_load_i32(memory_at_0, loc_3)
					if bit_and((if loc_3 == loc_5 then 1 else 0), (if loc_4 == loc_10 then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					if bit_and((if loc_3 == loc_11 then 1 else 0), (if loc_4 == loc_9 then 1 else 0)) ~= 0 then
						desired = 2
						break
					end
					loc_2 = rt_add_i32(loc_2, 1)
					loc_4 = rt_add_i32(loc_8, loc_2)
					if loc_2 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[58](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_11 = rt_load_i32(memory_at_0, loc_0)
		loc_6 = rt_sub_i32(loc_6, 1)
		loc_5 = rt_load_i32(memory_at_0, loc_1)
		loc_9 = rt_load_i32(memory_at_0, loc_1 + 4)
		loc_2 = bit_xor(loc_5, loc_9)
		loc_4 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_2, 4), rt_shr_u32(loc_2, 9)))
		loc_2 = rt_add_i32(loc_11, rt_shl_i32(loc_4, 3))
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_2)
				loc_12 = rt_load_i32(memory_at_0, loc_0 + 12)
				loc_10 = rt_load_i32(memory_at_0, loc_0 + 16)
				if bit_and((if loc_8 == loc_12 then 1 else 0), (if loc_10 == loc_3 then 1 else 0)) ~= 0 then
					break
				end
				loc_7 = 0
				if bit_and((if loc_5 == loc_8 then 1 else 0), (if loc_3 == loc_9 then 1 else 0)) ~= 0 then
					desired = 1
					break
				end
				while true do
					loc_7 = rt_add_i32(loc_7, 1)
					loc_4 = bit_and(loc_6, rt_add_i32(loc_4, loc_7))
					loc_2 = rt_add_i32(rt_shl_i32(loc_4, 3), loc_11)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					loc_8 = rt_load_i32(memory_at_0, loc_2)
					if bit_and((if loc_8 == loc_12 then 1 else 0), (if loc_3 == loc_10 then 1 else 0)) ~= 0 then
						desired = 2
						break
					end
					if loc_5 ~= loc_8 then
						continue
					end
					if loc_3 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_2, loc_5)
			rt_store_i32(memory_at_0, loc_2 + 4, rt_load_i32(memory_at_0, loc_1 + 4))
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[58] = --[[ Luau::detail::DenseHashTable<std::__2::pair<Luau::AstExprTable*, Luau::AstName>, std::__2::pair<Luau::AstExprTable*, Luau::AstName>, std::__2::pair<Luau::AstExprTable*, Luau::AstName>, Luau::detail::ItemInterfaceSet<std::__2::pair<Luau::AstExprTable*, Luau::AstName>>, Luau::Compile::ShapeVisitor::Hasher, std::__2::equal_to<std::__2::pair<Luau::AstExprTable*, Luau::AstName>>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_13 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_14 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_4 = (if loc_10 ~= 0 then rt_shl_i32(loc_10, 1) else 16)
			if loc_4 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = bit_and(loc_4, 6)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 3))
			loc_5 = reg_0
			loc_16 = rt_load_i64(memory_at_0, loc_0 + 12)
			if loc_4 >= 8 then
				while true do
					loc_7 = bit_and(loc_4, 4294967288)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_5)
						rt_store_i64(memory_at_0, loc_1, loc_16)
						rt_store_i64(memory_at_0, loc_1 + 8, loc_16)
						rt_store_i64(memory_at_0, loc_1 + 16, loc_16)
						rt_store_i64(memory_at_0, loc_1 + 24, loc_16)
						rt_store_i64(memory_at_0, loc_1 + 32, loc_16)
						rt_store_i64(memory_at_0, loc_1 + 40, loc_16)
						rt_store_i64(memory_at_0, loc_1 + 48, loc_16)
						rt_store_i64(memory_at_0, loc_1 + 56, loc_16)
						loc_2 = rt_add_i32(loc_2, 8)
						loc_8 = rt_add_i32(loc_8, 8)
						if loc_7 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 ~= 0 then
				while true do
					while true do
						rt_store_i64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), loc_5), loc_16)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_6 = rt_add_i32(loc_6, 1)
						if loc_3 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_10 ~= 0 then
			while true do
				loc_15 = rt_sub_i32(loc_4, 1)
				while true do
					loc_12 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(loc_11, 3))
					loc_9 = rt_load_i32(memory_at_0, loc_12 + 4)
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_12)
						if loc_2 == rt_load_i32(memory_at_0, loc_0 + 12) then
							while true do
								if rt_load_i32(memory_at_0, loc_0 + 16) == loc_9 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_1 = bit_xor(loc_2, loc_9)
						loc_6 = bit_and(loc_15, bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9)))
						loc_1 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_5)
						loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
						while true do
							while true do
								loc_7 = rt_load_i32(memory_at_0, loc_1)
								if bit_and((if loc_7 == loc_14 then 1 else 0), (if loc_3 == loc_13 then 1 else 0)) ~= 0 then
									break
								end
								loc_8 = 0
								if bit_and((if loc_2 == loc_7 then 1 else 0), (if loc_3 == loc_9 then 1 else 0)) ~= 0 then
									desired = 4
									break
								end
								while true do
									loc_8 = rt_add_i32(loc_8, 1)
									loc_6 = bit_and(loc_15, rt_add_i32(loc_6, loc_8))
									loc_1 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_5)
									loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
									loc_7 = rt_load_i32(memory_at_0, loc_1)
									if bit_and((if loc_7 == loc_14 then 1 else 0), (if loc_3 == loc_13 then 1 else 0)) ~= 0 then
										desired = 5
										break
									end
									if loc_2 ~= loc_7 then
										continue
									end
									if loc_3 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_1 + 4, loc_9)
							rt_store_i32(memory_at_0, loc_1, loc_2)
							loc_2 = rt_load_i32(memory_at_0, loc_12)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_1, loc_2)
						rt_store_i32(memory_at_0, loc_1 + 4, rt_load_i32(memory_at_0, loc_12 + 4))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_11 = rt_add_i32(loc_11, 1)
					if loc_10 ~= loc_11 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_5)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[59] = --[[ Luau::BytecodeBuilder::BytecodeBuilder(Luau::BytecodeEncoder*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	while true do
		rt_store_i32(memory_at_0, loc_0 + 120, 0)
		rt_store_i32(memory_at_0, loc_0 + 112, 0)
		rt_store_i64(memory_at_0, loc_0 + 104, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 16, 4294967295)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_from_u32(0, 4294967295))
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		reg_0 = FUNC_LIST[519](rt_add_i32(loc_0, 20), 0, 77)
		rt_store_i64(memory_at_0, loc_0 + 136, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 128, rt_i64_from_u32(4294967295, 4294967295))
		reg_0 = FUNC_LIST[519](rt_add_i32(loc_0, 152), 0, 144)
		rt_store_i64(memory_at_0, loc_0 + 308, rt_i64_from_u32(0, 4294967295))
		rt_store_i64(memory_at_0, loc_0 + 300, rt_i64_ZERO)
		reg_0 = FUNC_LIST[519](rt_add_i32(loc_0, 320), 0, 84)
		rt_store_i32(memory_at_0, loc_0 + 440, 0)
		rt_store_i64(memory_at_0, loc_0 + 432, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 424, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 416, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 408, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 448, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 444, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 456, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 464, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 472, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 480, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 488, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 496, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 504, 0)
		reg_1 = FUNC_LIST[646](128)
		loc_1 = reg_1
		rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 32, rt_add_i32(loc_1, 128))
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 36)
			loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), loc_3)
			if loc_5 > 127 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 40)
			reg_0 = FUNC_LIST[646](128)
			loc_2 = reg_0
			loc_6 = rt_add_i32(loc_2, 128)
			loc_4 = rt_add_i32(rt_sub_i32(loc_1, loc_3), loc_2)
			loc_2 = loc_4
			if loc_1 ~= loc_3 then
				while true do
					while true do
						loc_2 = rt_sub_i32(loc_2, 4)
						loc_1 = rt_sub_i32(loc_1, 4)
						rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
						if loc_1 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 44, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 40, loc_4)
			rt_store_i32(memory_at_0, loc_0 + 36, loc_2)
			if loc_3 == 0 then
				break
			end
			FUNC_LIST[653](loc_3, loc_5)
			break
		end
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 48)
			loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 56), loc_3)
			if rt_div_i32(loc_5, 24) > 15 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 52)
			reg_0 = FUNC_LIST[646](384)
			loc_2 = reg_0
			loc_6 = rt_add_i32(loc_2, 384)
			loc_4 = rt_add_i32(rt_sub_i32(loc_1, loc_3), loc_2)
			loc_2 = loc_4
			if loc_1 ~= loc_3 then
				while true do
					while true do
						loc_2 = rt_sub_i32(loc_2, 24)
						loc_1 = rt_sub_i32(loc_1, 24)
						rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
						rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
						rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
						if loc_1 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 56, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 52, loc_4)
			rt_store_i32(memory_at_0, loc_0 + 48, loc_2)
			if loc_3 == 0 then
				break
			end
			FUNC_LIST[653](loc_3, loc_5)
			break
		end
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
			loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 68), loc_3)
			if loc_5 > 63 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 64)
			reg_0 = FUNC_LIST[646](64)
			loc_2 = reg_0
			loc_6 = rt_sub_i32(loc_2, 4294967232)
			loc_4 = rt_add_i32(rt_sub_i32(loc_1, loc_3), loc_2)
			loc_2 = loc_4
			if loc_1 ~= loc_3 then
				while true do
					while true do
						loc_2 = rt_sub_i32(loc_2, 4)
						loc_1 = rt_sub_i32(loc_1, 4)
						rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
						if loc_1 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 68, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 64, loc_4)
			rt_store_i32(memory_at_0, loc_0 + 60, loc_2)
			if loc_3 == 0 then
				break
			end
			FUNC_LIST[653](loc_3, loc_5)
			break
		end
		FUNC_LIST[60](loc_0, 8)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[60] = --[[ std::__2::vector<Luau::BytecodeBuilder::Function, std::__2::allocator<Luau::BytecodeBuilder::Function>>::reserve(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_4 = rt_load_i32(memory_at_0, loc_0)
				if rt_div_i32(rt_sub_i32(loc_5, loc_4), 72) >= loc_1 then
					break
				end
				if loc_1 >= 59652324 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				loc_1 = rt_mul_i32(loc_1, 72)
				reg_0 = FUNC_LIST[646](loc_1)
				loc_7 = reg_0
				loc_9 = rt_add_i32(loc_7, loc_1)
				loc_8 = rt_add_i32(rt_sub_i32(loc_2, loc_4), loc_7)
				while true do
					if loc_2 == loc_4 then
						while true do
							loc_7 = loc_8
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = loc_8
					while true do
						loc_7 = rt_sub_i32(loc_1, 72)
						loc_5 = rt_sub_i32(loc_2, 72)
						rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_5))
						loc_3 = rt_add_i32(loc_5, 8)
						rt_store_i32(memory_at_0, loc_7 + 8, rt_load_i32(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_5, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_5 + 8, 0)
						loc_3 = rt_sub_i32(loc_1, 60)
						loc_6 = rt_sub_i32(loc_2, 60)
						rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_6 + 8))
						rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_6))
						loc_6 = rt_sub_i32(loc_1, 48)
						loc_3 = rt_sub_i32(loc_2, 48)
						loc_10 = loc_3
						rt_store_i32(memory_at_0, loc_6 + 8, rt_load_i32(memory_at_0, rt_add_i32(loc_10, 8)))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_10 + 8, 0)
						loc_6 = rt_sub_i32(loc_1, 36)
						loc_3 = rt_sub_i32(loc_2, 36)
						loc_11 = loc_3
						rt_store_i32(memory_at_0, loc_6 + 8, rt_load_i32(memory_at_0, rt_add_i32(loc_11, 8)))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_11 + 8, 0)
						loc_3 = rt_sub_i32(loc_2, 24)
						rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 24), rt_load_i32(memory_at_0, loc_3))
						rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 20), rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 20)))
						loc_6 = rt_sub_i32(loc_2, 16)
						rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 16), rt_load_i32(memory_at_0, loc_6))
						rt_store_i32(memory_at_0, loc_6, 0)
						rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
						loc_1 = rt_sub_i32(loc_1, 12)
						loc_2 = rt_sub_i32(loc_2, 12)
						loc_12 = loc_2
						loc_3 = rt_add_i32(loc_12, 8)
						rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
						rt_store_i64(memory_at_0, loc_2, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_12 + 8, 0)
						loc_1 = loc_7
						loc_2 = loc_5
						if loc_2 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, loc_9)
				rt_store_i32(memory_at_0, loc_0 + 4, loc_8)
				rt_store_i32(memory_at_0, loc_0, loc_7)
				if loc_2 ~= loc_4 then
					while true do
						loc_1 = rt_add_i32(loc_0, 8)
						while true do
							loc_2 = rt_sub_i32(loc_2, 72)
							FUNC_LIST[192](loc_1, loc_2)
							if loc_2 ~= loc_4 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_4 == 0 then
					break
				end
				FUNC_LIST[653](loc_4, rt_sub_i32(loc_5, loc_4))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[61] = --[[ Luau::BytecodeBuilder::beginFunction(unsigned char, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = rt_load_i32(memory_at_0, loc_0)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
		reg_0 = FUNC_LIST[519](rt_add_i32(loc_3, 8), 0, 72)
		rt_store_i32_n8(memory_at_0, loc_3 + 23, loc_2)
		rt_store_i32_n8(memory_at_0, loc_3 + 21, loc_1)
		loc_2 = rt_div_i32(rt_sub_i32(loc_4, loc_5), 72)
		while true do
			if loc_4 < rt_load_i32(memory_at_0, loc_0 + 8) then
				while true do
					reg_0 = FUNC_LIST[62](loc_4, rt_add_i32(loc_3, 8))
					reg_0 = rt_add_i32(reg_0, 72)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[63](loc_0, rt_add_i32(loc_3, 8))
			break
		end
		loc_4 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 320, 0)
		rt_store_i32_n8(memory_at_0, loc_0 + 96, 0)
		rt_store_i32(memory_at_0, loc_0 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 79), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 68), bit_and(rt_load_i32(memory_at_0, loc_3 + 76), 2147483647))
				break
			end
		end
		loc_0 = rt_load_i32(memory_at_0, loc_3 + 56)
		if loc_0 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_3 + 60, loc_0)
				FUNC_LIST[653](loc_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 64), loc_0))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 55), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 44), bit_and(rt_load_i32(memory_at_0, loc_3 + 52), 2147483647))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 43), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 32), bit_and(rt_load_i32(memory_at_0, loc_3 + 40), 2147483647))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 19), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 8), bit_and(rt_load_i32(memory_at_0, loc_3 + 16), 2147483647))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 80)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[62] = --[[ Luau::BytecodeBuilder::Function::Function(Luau::BytecodeBuilder::Function const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 11), 0) then
				while true do
					rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[716](loc_0, rt_load_i32(memory_at_0, loc_1), rt_load_i32(memory_at_0, loc_1 + 4))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0 + 12, rt_load_i64(memory_at_0, loc_1 + 12))
		rt_store_i32(memory_at_0, loc_0 + 20, rt_load_i32(memory_at_0, loc_1 + 20))
		loc_2 = rt_add_i32(loc_0, 24)
		while true do
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 35), 0) then
				while true do
					loc_3 = rt_add_i32(loc_1, 24)
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
					rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[716](loc_2, rt_load_i32(memory_at_0, loc_1 + 24), rt_load_i32(memory_at_0, loc_1 + 28))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = rt_add_i32(loc_0, 36)
		while true do
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 47), 0) then
				while true do
					loc_3 = rt_add_i32(loc_1, 36)
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
					rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[716](loc_2, rt_load_i32(memory_at_0, loc_1 + 36), rt_load_i32(memory_at_0, loc_1 + 40))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 56, 0)
		rt_store_i64(memory_at_0, loc_0 + 48, rt_i64_ZERO)
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 52)
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 48)
			if loc_2 ~= loc_4 then
				while true do
					loc_2 = rt_sub_i32(loc_2, loc_4)
					if rt_lt_i32(loc_2, 0) then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[646](loc_2)
					loc_3 = reg_1
					rt_store_i32(memory_at_0, loc_0 + 52, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 48, loc_3)
					loc_5 = rt_add_i32(loc_2, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 56, loc_5)
					reg_0 = FUNC_LIST[517](loc_3, loc_4, loc_2)
					rt_store_i32(memory_at_0, loc_0 + 52, loc_5)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_add_i32(loc_0, 60)
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 71), 0) then
				while true do
					loc_1 = rt_add_i32(loc_1, 60)
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
					reg_0 = loc_0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[716](loc_2, rt_load_i32(memory_at_0, loc_1 + 60), rt_load_i32(memory_at_0, loc_1 + 64))
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](rt_add_i32(loc_0, 48))
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[63] = --[[ Luau::BytecodeBuilder::Function* std::__2::vector<Luau::BytecodeBuilder::Function, std::__2::allocator<Luau::BytecodeBuilder::Function>>::__push_back_slow_path<Luau::BytecodeBuilder::Function const&>(Luau::BytecodeBuilder::Function const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0)
			loc_7 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_3), 72)
			loc_2 = rt_add_i32(loc_7, 1)
			if loc_2 < 59652324 then
				while true do
					loc_10 = rt_add_i32(loc_0, 8)
					loc_3 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_10), loc_3), 72)
					loc_4 = rt_shl_i32(loc_3, 1)
					loc_2 = (if loc_3 >= 29826161 then 59652323 else (if loc_2 < loc_4 then loc_4 else loc_2))
					if loc_2 ~= 0 then
						while true do
							if loc_2 >= 59652324 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_2, 72))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_3 = reg_0
					loc_11 = rt_add_i32(loc_3, rt_mul_i32(loc_2, 72))
					reg_0 = FUNC_LIST[62](rt_add_i32(rt_mul_i32(loc_7, 72), loc_3), loc_1)
					loc_3 = reg_0
					loc_9 = rt_add_i32(loc_3, 72)
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_6 = rt_load_i32(memory_at_0, loc_0)
						if loc_2 == loc_6 then
							while true do
								loc_7 = loc_3
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_7 = rt_sub_i32(loc_3, 72)
							loc_1 = rt_sub_i32(loc_2, 72)
							rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_1))
							loc_4 = rt_add_i32(loc_1, 8)
							rt_store_i32(memory_at_0, loc_7 + 8, rt_load_i32(memory_at_0, loc_4))
							rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_1 + 8, 0)
							loc_4 = rt_sub_i32(loc_3, 60)
							loc_5 = rt_sub_i32(loc_2, 60)
							rt_store_i32(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_5 + 8))
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
							loc_5 = rt_sub_i32(loc_3, 48)
							loc_4 = rt_sub_i32(loc_2, 48)
							loc_12 = loc_4
							loc_8 = rt_add_i32(loc_12, 8)
							rt_store_i32(memory_at_0, loc_5 + 8, rt_load_i32(memory_at_0, loc_8))
							rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
							rt_store_i64(memory_at_0, loc_4, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_12 + 8, 0)
							loc_5 = rt_sub_i32(loc_3, 36)
							loc_4 = rt_sub_i32(loc_2, 36)
							loc_13 = loc_4
							loc_8 = rt_add_i32(loc_13, 8)
							rt_store_i32(memory_at_0, loc_5 + 8, rt_load_i32(memory_at_0, loc_8))
							rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
							rt_store_i64(memory_at_0, loc_4, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_13 + 8, 0)
							loc_4 = rt_sub_i32(loc_3, 16)
							rt_store_i32(memory_at_0, loc_4, 0)
							loc_5 = rt_sub_i32(loc_3, 24)
							rt_store_i64(memory_at_0, loc_5, rt_i64_ZERO)
							loc_8 = rt_sub_i32(loc_2, 24)
							rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_8))
							rt_store_i32(memory_at_0, rt_sub_i32(loc_3, 20), rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 20)))
							loc_5 = rt_sub_i32(loc_2, 16)
							rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_5))
							rt_store_i32(memory_at_0, loc_5, 0)
							rt_store_i64(memory_at_0, loc_8, rt_i64_ZERO)
							loc_3 = rt_sub_i32(loc_3, 12)
							loc_2 = rt_sub_i32(loc_2, 12)
							loc_14 = loc_2
							loc_4 = rt_add_i32(loc_14, 8)
							rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_4))
							rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_2, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_14 + 8, 0)
							loc_3 = loc_7
							loc_2 = loc_1
							if loc_2 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_6 = rt_load_i32(memory_at_0, loc_0)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_9)
					rt_store_i32(memory_at_0, loc_0, loc_7)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_11)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 72)
								FUNC_LIST[192](loc_10, loc_2)
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					if loc_6 ~= 0 then
						while true do
							FUNC_LIST[653](loc_6, rt_sub_i32(loc_3, loc_6))
							break
						end
						if desired then
							break
						end
					end
					reg_0 = loc_9
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[64] = --[[ Luau::BytecodeBuilder::endFunction(unsigned char, unsigned char, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 12), 72))
		rt_store_i32_n8(memory_at_0, loc_4 + 14, loc_2)
		rt_store_i32_n8(memory_at_0, loc_4 + 12, loc_1)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 504)
		loc_5 = bit_and(loc_1, 1)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 500)
		if bit_or(loc_5, loc_2) ~= 0 then
			while true do
				loc_13 = rt_add_i32(loc_4, 48)
				loc_1 = rt_add_i32(rt_shr_i32(loc_1, 1), loc_0)
				reg_0 = rt_add_i32(loc_8, 4)
				reg_1 = loc_1
				reg_2 = loc_13
				if loc_5 ~= 0 then
					while true do
						reg_3 = rt_load_i32(memory_at_0, rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_1)))
						break
					end
				else
					while true do
						reg_3 = loc_2
						break
					end
				end
				loc_2 = reg_3
				TABLE_LIST[0].data[loc_2](reg_0, reg_1, reg_2)
				loc_10 = loc_4
				loc_2 = rt_add_i32(loc_10, 24)
				if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 35), 0) then
					while true do
						FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 24), bit_and(rt_load_i32(memory_at_0, loc_4 + 32), 2147483647))
						break
					end
				end
				rt_store_i64(memory_at_0, loc_10 + 24, rt_load_i64(memory_at_0, loc_8 + 4))
				rt_store_i32(memory_at_0, loc_10 + 32, rt_load_i32(memory_at_0, loc_8 + 12))
				break
			end
		end
		FUNC_LIST[719](loc_4, rt_add_i32(rt_mul_i32(rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_load_i32(memory_at_0, loc_0 + 24)), 2), 7), 32))
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 444)
		if loc_2 ~= 0 then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 8)](loc_2, loc_1, rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 28), loc_1), 2))
				break
			end
		end
		FUNC_LIST[65](loc_0, loc_4, rt_load_i32(memory_at_0, loc_0 + 12), loc_3)
		rt_store_i32(memory_at_0, loc_0 + 12, 4294967295)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 40, rt_load_i32(memory_at_0, loc_0 + 36))
		rt_store_i32(memory_at_0, loc_0 + 52, rt_load_i32(memory_at_0, loc_0 + 48))
		rt_store_i32(memory_at_0, loc_0 + 64, rt_load_i32(memory_at_0, loc_0 + 60))
		rt_store_i32(memory_at_0, loc_0 + 76, rt_load_i32(memory_at_0, loc_0 + 72))
		rt_store_i32(memory_at_0, loc_0 + 88, rt_load_i32(memory_at_0, loc_0 + 84))
		rt_store_i32(memory_at_0, loc_0 + 328, rt_load_i32(memory_at_0, loc_0 + 324))
		rt_store_i32(memory_at_0, loc_0 + 20, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 20), rt_shr_i32(rt_sub_i32(loc_4, loc_2), 2)))
		rt_store_i32(memory_at_0, loc_0 + 340, rt_load_i32(memory_at_0, loc_0 + 336))
		rt_store_i32(memory_at_0, loc_0 + 352, rt_load_i32(memory_at_0, loc_0 + 348))
		rt_store_i32(memory_at_0, loc_0 + 364, rt_load_i32(memory_at_0, loc_0 + 360))
		if rt_load_i32(memory_at_0, loc_0 + 112) ~= 0 then
			while true do
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 104)
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 108)
					if loc_4 >= 33 then
						while true do
							FUNC_LIST[652](loc_6)
							rt_store_i64(memory_at_0, loc_0 + 104, rt_i64_ZERO)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_4 == 0 then
						break
					end
					loc_2 = rt_add_i32(loc_0, 120)
					loc_11 = bit_and(loc_4, 3)
					loc_1 = 0
					if loc_4 >= 4 then
						while true do
							loc_12 = bit_and(loc_4, 60)
							while true do
								loc_4 = rt_add_i32(rt_shl_i32(loc_1, 5), loc_6)
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
								loc_3 = rt_add_i32(loc_2, 8)
								loc_14 = rt_load_i64(memory_at_0, loc_3)
								loc_5 = rt_add_i32(loc_2, 16)
								loc_15 = rt_load_i64(memory_at_0, loc_5)
								rt_store_i32(memory_at_0, loc_4 + 24, 0)
								rt_store_i64(memory_at_0, loc_4 + 16, loc_15)
								rt_store_i64(memory_at_0, loc_4 + 8, loc_14)
								rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
								rt_store_i64(memory_at_0, loc_4 + 48, rt_load_i64(memory_at_0, loc_2 + 16))
								rt_store_i32(memory_at_0, loc_4 + 56, 0)
								rt_store_i64(memory_at_0, rt_sub_i32(loc_4, 4294967232), rt_load_i64(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_4 + 72, rt_load_i64(memory_at_0, loc_2 + 8))
								rt_store_i64(memory_at_0, loc_4 + 80, rt_load_i64(memory_at_0, loc_2 + 16))
								rt_store_i32(memory_at_0, loc_4 + 88, 0)
								rt_store_i64(memory_at_0, loc_4 + 96, rt_load_i64(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_4 + 104, rt_load_i64(memory_at_0, loc_2 + 8))
								rt_store_i64(memory_at_0, loc_4 + 112, rt_load_i64(memory_at_0, loc_2 + 16))
								rt_store_i32(memory_at_0, loc_4 + 120, 0)
								loc_1 = rt_add_i32(loc_1, 4)
								loc_9 = rt_add_i32(loc_9, 4)
								if loc_12 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_11 == 0 then
						break
					end
					while true do
						loc_4 = rt_add_i32(rt_shl_i32(loc_1, 5), loc_6)
						rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
						loc_14 = rt_load_i64(memory_at_0, loc_2 + 8)
						loc_15 = rt_load_i64(memory_at_0, loc_2 + 16)
						rt_store_i32(memory_at_0, loc_4 + 24, 0)
						rt_store_i64(memory_at_0, loc_4 + 16, loc_15)
						rt_store_i64(memory_at_0, loc_4 + 8, loc_14)
						loc_1 = rt_add_i32(loc_1, 1)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_11 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 112, 0)
				break
			end
		end
		if rt_load_i32(memory_at_0, loc_0 + 160) ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 152)
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 156)
					if loc_5 >= 33 then
						while true do
							FUNC_LIST[652](loc_2)
							rt_store_i64(memory_at_0, loc_0 + 152, rt_i64_ZERO)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_5 == 0 then
						break
					end
					loc_1 = rt_add_i32(loc_0, 164)
					loc_7 = bit_and(loc_5, 3)
					loc_3 = 0
					loc_4 = 0
					if loc_5 >= 4 then
						while true do
							loc_6 = bit_and(loc_5, 60)
							loc_5 = 0
							while true do
								reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(loc_4, 136), loc_2), loc_1, 132)
								rt_store_i32(memory_at_0, reg_0 + 132, 0)
								reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(bit_or(loc_4, 1), 136), loc_2), loc_1, 132)
								rt_store_i32(memory_at_0, reg_0 + 132, 0)
								reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(bit_or(loc_4, 2), 136), loc_2), loc_1, 132)
								rt_store_i32(memory_at_0, reg_0 + 132, 0)
								reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(bit_or(loc_4, 3), 136), loc_2), loc_1, 132)
								rt_store_i32(memory_at_0, reg_0 + 132, 0)
								loc_4 = rt_add_i32(loc_4, 4)
								loc_5 = rt_add_i32(loc_5, 4)
								if loc_6 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_7 == 0 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(loc_4, 136), loc_2), loc_1, 132)
						rt_store_i32(memory_at_0, reg_0 + 132, 0)
						loc_4 = rt_add_i32(loc_4, 1)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 160, 0)
				break
			end
		end
		if rt_load_i32(memory_at_0, loc_0 + 308) ~= 0 then
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 300)
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 304)
					if loc_4 >= 33 then
						while true do
							FUNC_LIST[652](loc_5)
							rt_store_i64(memory_at_0, loc_0 + 300, rt_i64_ZERO)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_4 == 0 then
						break
					end
					loc_6 = bit_and(loc_4, 3)
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 312)
					loc_3 = 0
					loc_2 = 0
					if loc_4 >= 4 then
						while true do
							loc_9 = bit_and(loc_4, 60)
							loc_7 = 0
							while true do
								loc_4 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_5)
								rt_store_i32_n16(memory_at_0, loc_4 + 4, 0)
								rt_store_i32(memory_at_0, loc_4, loc_1)
								rt_store_i32(memory_at_0, loc_4 + 8, loc_1)
								rt_store_i32_n16(memory_at_0, loc_4 + 12, 0)
								rt_store_i32_n16(memory_at_0, loc_4 + 20, 0)
								rt_store_i32(memory_at_0, loc_4 + 16, loc_1)
								rt_store_i32_n16(memory_at_0, loc_4 + 28, 0)
								rt_store_i32(memory_at_0, loc_4 + 24, loc_1)
								loc_2 = rt_add_i32(loc_2, 4)
								loc_7 = rt_add_i32(loc_7, 4)
								if loc_9 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_6 == 0 then
						break
					end
					while true do
						loc_4 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_5)
						rt_store_i32_n16(memory_at_0, loc_4 + 4, 0)
						rt_store_i32(memory_at_0, loc_4, loc_1)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_6 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 308, 0)
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 424, rt_load_i32(memory_at_0, loc_0 + 420))
		while true do
			if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 443), 0) then
				while true do
					rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 432), 0)
					rt_store_i32(memory_at_0, loc_0 + 436, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 443, 0)
			rt_store_i32_n8(memory_at_0, loc_0 + 432, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
		break
	end
end
FUNC_LIST[65] = --[[ Luau::BytecodeBuilder::writeFunction(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&, unsigned int, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_8 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(loc_2, 72))
		rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32_u8(memory_at_0, loc_8 + 12))
		reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
		rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32_u8(memory_at_0, loc_8 + 13))
		reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
		rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32_u8(memory_at_0, loc_8 + 14))
		reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
		rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32_u8(memory_at_0, loc_8 + 15))
		reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
		rt_store_i32_n8(memory_at_0, loc_4 + 8, loc_3)
		reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
		while true do
			while true do
				while true do
					loc_2 = rt_load_i32_i8(memory_at_0, loc_8 + 71)
					if (if rt_lt_i32(loc_2, 0) then rt_load_i32(memory_at_0, loc_8 + 64) else loc_2) ~= 0 then
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 360) ~= rt_load_i32(memory_at_0, loc_0 + 364) then
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 348) == rt_load_i32(memory_at_0, loc_0 + 352) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 499), 0) then
						while true do
							rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 488), 0)
							rt_store_i32(memory_at_0, loc_0 + 492, 0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32_n8(memory_at_0, loc_0 + 499, 0)
					rt_store_i32_n8(memory_at_0, loc_0 + 488, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_add_i32(loc_8, 60)
				loc_3 = rt_add_i32(loc_0, 488)
				loc_2 = rt_load_i32_i8(memory_at_0, loc_8 + 71)
				loc_2 = (if rt_lt_i32(loc_2, 0) then rt_load_i32(memory_at_0, loc_8 + 64) else loc_2)
				while true do
					loc_5 = (if loc_2 > 127 then 1 else 0)
					rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_5, 7)))
					reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
					loc_2 = rt_shr_u32(loc_2, 7)
					if loc_5 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 364), rt_load_i32(memory_at_0, loc_0 + 360)), 2)
				while true do
					loc_5 = (if loc_2 > 127 then 1 else 0)
					rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_5, 7)))
					reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
					loc_2 = rt_shr_u32(loc_2, 7)
					if loc_5 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 352), rt_load_i32(memory_at_0, loc_0 + 348)), 4)
				while true do
					loc_5 = (if loc_2 > 127 then 1 else 0)
					rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_5, 7)))
					reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
					loc_2 = rt_shr_u32(loc_2, 7)
					if loc_5 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_load_i32_i8(memory_at_0, loc_8 + 71)
				loc_5 = (if rt_lt_i32(loc_2, 0) then 1 else 0)
				reg_0 = FUNC_LIST[721](loc_3, (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_8 + 60) else loc_6), (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_8 + 64) else loc_2))
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 360)
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 364)
				if loc_2 ~= loc_5 then
					while true do
						while true do
							rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_2))
							reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
							loc_2 = rt_add_i32(loc_2, 4)
							if loc_5 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 348)
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 352)
				if loc_6 ~= loc_7 then
					while true do
						while true do
							rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_6))
							reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
							rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32_u8(memory_at_0, loc_6 + 4))
							reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
							loc_2 = rt_load_i32(memory_at_0, loc_6 + 8)
							while true do
								loc_5 = (if loc_2 > 127 then 1 else 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_5, 7)))
								reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
								loc_2 = rt_shr_u32(loc_2, 7)
								if loc_5 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 12), rt_load_i32(memory_at_0, loc_6 + 8))
							while true do
								loc_5 = (if loc_2 > 127 then 1 else 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_5, 7)))
								reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 8), 1)
								loc_2 = rt_shr_u32(loc_2, 7)
								if loc_5 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_6 = rt_add_i32(loc_6, 16)
							if loc_7 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32_i8(memory_at_0, loc_0 + 499)
				loc_2 = (if rt_lt_i32(loc_2, 0) then rt_load_i32(memory_at_0, loc_0 + 492) else loc_2)
				while true do
					loc_5 = (if loc_2 > 127 then 1 else 0)
					rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_5, 7)))
					reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
					loc_2 = rt_shr_u32(loc_2, 7)
					if loc_5 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_load_i32_i8(memory_at_0, loc_0 + 499)
				loc_5 = (if rt_lt_i32(loc_2, 0) then 1 else 0)
				reg_0 = FUNC_LIST[721](loc_1, (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_0 + 488) else loc_3), (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_0 + 492) else loc_2))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_4 + 8, 0)
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			break
		end
		loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_load_i32(memory_at_0, loc_0 + 24)), 2)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			loc_2 = rt_shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
		if loc_2 ~= loc_3 then
			while true do
				while true do
					rt_store_i32(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_2))
					reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 4)
					loc_2 = rt_add_i32(loc_2, 4)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 52), rt_load_i32(memory_at_0, loc_0 + 48)), 24)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			loc_2 = rt_shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 48)
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 52)
		if loc_7 ~= loc_9 then
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 0, 1, 2, 3, 4, 5, 6, 7, }
															end)()
														end
														temp = br_map[1][rt_load_i32(memory_at_0, loc_7)] or 8
														if temp < 4 then
															if temp < 2 then
																if temp < 1 then
																	break
																else
																	desired = 10
																	break
																end
															elseif temp > 2 then
																desired = 8
																break
															else
																desired = 9
																break
															end
														elseif temp > 4 then
															if temp < 7 then
																if temp < 6 then
																	desired = 6
																	break
																else
																	desired = 5
																	break
																end
															elseif temp > 7 then
																desired = 3
																break
															else
																desired = 4
																break
															end
														else
															desired = 7
															break
														end
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													rt_store_i32_n8(memory_at_0, loc_4 + 8, 0)
													reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
													desired = 3
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												rt_store_i32_n8(memory_at_0, loc_4 + 8, 1)
												reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
												rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32_u8(memory_at_0, loc_7 + 8))
												reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
												desired = 3
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											rt_store_i32_n8(memory_at_0, loc_4 + 8, 2)
											reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
											rt_store_f64(memory_at_0, loc_4 + 8, rt_load_f64(memory_at_0, loc_7 + 8))
											reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 8)
											desired = 3
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										rt_store_i32_n8(memory_at_0, loc_4 + 8, 7)
										reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
										rt_store_f32(memory_at_0, loc_4 + 8, rt_load_f32(memory_at_0, loc_7 + 8))
										reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 4)
										rt_store_f32(memory_at_0, loc_4 + 8, rt_load_f32(memory_at_0, loc_7 + 12))
										reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 4)
										rt_store_f32(memory_at_0, loc_4 + 8, rt_load_f32(memory_at_0, loc_7 + 16))
										reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 4)
										rt_store_f32(memory_at_0, loc_4 + 8, rt_load_f32(memory_at_0, loc_7 + 20))
										reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 4)
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									rt_store_i32_n8(memory_at_0, loc_4 + 8, 3)
									reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
									loc_2 = rt_load_i32(memory_at_0, loc_7 + 8)
									while true do
										rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32((if loc_2 > 127 then 1 else 0), 7)))
										reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
										loc_3 = (if loc_2 < 128 then 1 else 0)
										loc_2 = rt_shr_u32(loc_2, 7)
										if loc_3 == 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i32_n8(memory_at_0, loc_4 + 8, 4)
								reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
								rt_store_i32(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_7 + 8))
								reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 4)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_0 + 84)
							loc_3 = rt_load_i32(memory_at_0, loc_7 + 8)
							rt_store_i32_n8(memory_at_0, loc_4 + 8, 5)
							reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
							loc_6 = rt_add_i32(rt_mul_i32(loc_3, 132), loc_2)
							loc_2 = rt_load_i32(memory_at_0, loc_6 + 128)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
								loc_2 = rt_shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_5 = 0
							if rt_load_i32(memory_at_0, loc_6 + 128) == 0 then
								desired = 3
								break
							end
							while true do
								loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_6))
								while true do
									loc_3 = (if loc_2 > 127 then 1 else 0)
									rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
									reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
									loc_2 = rt_shr_u32(loc_2, 7)
									if loc_3 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_5 = rt_add_i32(loc_5, 1)
								if loc_5 < rt_load_i32(memory_at_0, loc_6 + 128) then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						rt_store_i32_n8(memory_at_0, loc_4 + 8, 6)
						reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
						loc_2 = rt_load_i32(memory_at_0, loc_7 + 8)
						while true do
							loc_3 = (if loc_2 > 127 then 1 else 0)
							rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
							reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
							loc_2 = rt_shr_u32(loc_2, 7)
							if loc_3 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_7 = rt_add_i32(loc_7, 24)
					if loc_9 ~= loc_7 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), rt_load_i32(memory_at_0, loc_0 + 60)), 2)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			loc_2 = rt_shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 60)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 64)
		if loc_5 ~= loc_6 then
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_5)
					while true do
						loc_3 = (if loc_2 > 127 then 1 else 0)
						rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
						reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
						loc_2 = rt_shr_u32(loc_2, 7)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_5 = rt_add_i32(loc_5, 4)
					if loc_6 ~= loc_5 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_8 + 20)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			loc_2 = rt_shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_8 + 16)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			loc_2 = rt_shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 36)
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 40)
				if loc_2 == loc_3 then
					break
				end
				while true do
					if rt_load_i32(memory_at_0, loc_2) ~= 0 then
						while true do
							loc_2 = rt_add_i32(loc_2, 4)
							if loc_2 ~= loc_3 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32_n8(memory_at_0, loc_4 + 8, 0)
				reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_4 + 8, 1)
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			FUNC_LIST[66](loc_0, loc_1)
			break
		end
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 324) == rt_load_i32(memory_at_0, loc_0 + 328) then
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 336) == rt_load_i32(memory_at_0, loc_0 + 340) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32_n8(memory_at_0, loc_4 + 8, 1)
				reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
				loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 328), rt_load_i32(memory_at_0, loc_0 + 324)), 4)
				while true do
					loc_3 = (if loc_2 > 127 then 1 else 0)
					rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
					reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
					loc_2 = rt_shr_u32(loc_2, 7)
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 324)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 328)
				if loc_5 ~= loc_6 then
					while true do
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_5)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
								loc_2 = rt_shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_5 + 8)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
								loc_2 = rt_shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_5 + 12)
							while true do
								loc_3 = (if loc_2 > 127 then 1 else 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
								reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
								loc_2 = rt_shr_u32(loc_2, 7)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							rt_store_i32_n8(memory_at_0, loc_4 + 8, rt_load_i32_u8(memory_at_0, loc_5 + 4))
							reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
							loc_5 = rt_add_i32(loc_5, 16)
							if loc_6 ~= loc_5 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 340), rt_load_i32(memory_at_0, loc_0 + 336)), 2)
				while true do
					loc_3 = (if loc_2 > 127 then 1 else 0)
					rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
					reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
					loc_2 = rt_shr_u32(loc_2, 7)
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 336)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 340)
				if loc_5 == loc_6 then
					desired = 1
					break
				end
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_5)
					while true do
						loc_3 = (if loc_2 > 127 then 1 else 0)
						rt_store_i32_n8(memory_at_0, loc_4 + 8, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
						reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
						loc_2 = rt_shr_u32(loc_2, 7)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_5 = rt_add_i32(loc_5, 4)
					if loc_6 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_4 + 8, 0)
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_4, 8), 1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[66] = --[[ Luau::BytecodeBuilder::writeLineInfo(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_10 = rt_load_i32(memory_at_0, loc_0 + 40)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 36)
		loc_8 = rt_shr_i32(rt_sub_i32(loc_10, loc_6), 2)
		loc_9 = 16777216
		if loc_6 ~= loc_10 then
			while true do
				while true do
					while true do
						while true do
							loc_12 = loc_7
							loc_2 = loc_12
							loc_7 = rt_add_i32(loc_9, loc_2)
							if loc_7 <= loc_2 then
								break
							end
							loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), loc_6))
							loc_11 = loc_4
							while true do
								loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), loc_6))
								loc_4 = (if rt_lt_i32(loc_3, loc_4) then loc_4 else loc_3)
								loc_11 = (if rt_lt_i32(loc_3, loc_11) then loc_3 else loc_11)
								if rt_gt_i32(rt_sub_i32(loc_4, loc_11), 255) then
									desired = 4
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = (if loc_8 <= loc_2 then 1 else 0)
								if bit_and((if loc_3 == 0 then 1 else 0), (if loc_2 < loc_7 then 1 else 0)) ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_3 ~= 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = 0
						loc_4 = rt_sub_i32(loc_2, loc_12)
						if loc_9 <= loc_4 then
							break
						end
						while true do
							loc_2 = loc_3
							loc_3 = rt_add_i32(loc_2, 1)
							if rt_le_i32(rt_shl_i32(2, loc_2), loc_4) then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_9 = rt_shl_i32(1, loc_2)
						loc_7 = rt_add_i32(loc_12, loc_9)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					if loc_7 < loc_8 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_5 + 24, 0)
		rt_store_i32(memory_at_0, loc_5 + 20, 0)
		rt_store_i64(memory_at_0, loc_5 + 12, rt_i64_ZERO)
		loc_13 = rt_add_i32(loc_5, 24)
		loc_17 = rt_add_i32(rt_div_u32(rt_sub_i32(loc_8, 1), loc_9), 1)
		if loc_17 > 1 then
			while true do
				FUNC_LIST[111](rt_add_i32(loc_5, 12), loc_17)
				loc_13 = rt_load_i32(memory_at_0, loc_5 + 12)
				loc_10 = rt_load_i32(memory_at_0, loc_0 + 40)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 36)
				reg_0 = rt_shr_i32(rt_sub_i32(loc_10, loc_6), 2)
				break
			end
		else
			while true do
				reg_0 = loc_8
				break
			end
		end
		loc_8 = reg_0
		if loc_6 ~= loc_10 then
			while true do
				while true do
					loc_15 = loc_14
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_15, 2), loc_6))
					while true do
						loc_14 = rt_add_i32(loc_9, loc_15)
						loc_10 = (if loc_8 < loc_14 then loc_8 else loc_14)
						if loc_10 <= loc_15 then
							break
						end
						loc_4 = 0
						loc_3 = loc_15
						loc_12 = rt_mul_i32(loc_9, loc_16)
						loc_7 = bit_and(rt_sub_i32(loc_10, loc_12), 3)
						if loc_7 ~= 0 then
							while true do
								while true do
									loc_11 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_6))
									loc_2 = (if rt_gt_i32(loc_2, loc_11) then loc_11 else loc_2)
									loc_3 = rt_add_i32(loc_3, 1)
									loc_4 = rt_add_i32(loc_4, 1)
									if loc_7 ~= loc_4 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if rt_sub_i32(loc_12, loc_10) > 4294967292 then
							break
						end
						while true do
							loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_6)
							loc_11 = rt_load_i32(memory_at_0, loc_4 + 12)
							loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
							loc_12 = rt_load_i32(memory_at_0, loc_4 + 4)
							loc_4 = rt_load_i32(memory_at_0, loc_4)
							loc_2 = (if rt_gt_i32(loc_2, loc_4) then loc_4 else loc_2)
							loc_2 = (if rt_gt_i32(loc_2, loc_12) then loc_12 else loc_2)
							loc_2 = (if rt_gt_i32(loc_2, loc_7) then loc_7 else loc_2)
							loc_2 = (if rt_gt_i32(loc_2, loc_11) then loc_11 else loc_2)
							loc_3 = rt_add_i32(loc_3, 4)
							if loc_10 > loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_div_u32(loc_15, loc_9), 2), loc_13), loc_2)
					loc_16 = rt_add_i32(loc_16, 1)
					if loc_8 > loc_14 then
						continue
					end
					break
				end
				break
			end
		end
		loc_3 = 0
		while true do
			loc_2 = loc_3
			loc_3 = rt_add_i32(loc_2, 1)
			if rt_le_i32(rt_shl_i32(2, loc_2), loc_9) then
				continue
			end
			break
		end
		rt_store_i32_n8(memory_at_0, loc_5 + 28, loc_2)
		reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_5, 28), 1)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 36)
		if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 40) then
			while true do
				loc_3 = 0
				loc_6 = 0
				while true do
					loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_4)), rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_shr_u32(loc_3, loc_2), 2), loc_13)))
					rt_store_i32_n8(memory_at_0, loc_5 + 28, rt_sub_i32(loc_4, loc_6))
					reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_5, 28), 1)
					loc_6 = loc_4
					loc_3 = rt_add_i32(loc_3, 1)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 36)
					if loc_3 < rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 40), loc_4), 2) then
						continue
					end
					break
				end
				break
			end
		end
		if loc_17 ~= 0 then
			while true do
				loc_2 = 0
				loc_3 = 0
				while true do
					loc_4 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_13)
					rt_store_i32(memory_at_0, loc_5 + 28, rt_sub_i32(rt_load_i32(memory_at_0, loc_4), loc_3))
					reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_5, 28), 4)
					loc_3 = rt_load_i32(memory_at_0, loc_4)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_17 > loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_5 + 12)
		if loc_2 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_5 + 16, loc_2)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 20), loc_2))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
		break
	end
end
FUNC_LIST[67] = --[[ Luau::BytecodeBuilder::setMainFunction(unsigned int) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
		break
	end
end
FUNC_LIST[68] = --[[ Luau::BytecodeBuilder::addConstant(Luau::BytecodeBuilder::ConstantKey const&, Luau::BytecodeBuilder::Constant const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_add_i32(loc_0, 104)
		reg_0 = FUNC_LIST[69](loc_4, loc_1)
		loc_3 = reg_0
		if loc_3 ~= 0 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, loc_3 + 24)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = 4294967295
		while true do
			while true do
				loc_8 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 52), rt_load_i32(memory_at_0, loc_0 + 48)), 24)
				if loc_8 <= 8388607 then
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 112) < rt_shr_u32(rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 108), 3), 2) then
								break
							end
							reg_0 = FUNC_LIST[69](loc_4, loc_1)
							if reg_0 ~= 0 then
								break
							end
							FUNC_LIST[70](loc_4)
							break
						end
						if desired then
							break
						end
						reg_0 = FUNC_LIST[71](loc_4, loc_1)
						rt_store_i32(memory_at_0, reg_0 + 24, loc_8)
						while true do
							loc_1 = rt_load_i32(memory_at_0, loc_0 + 52)
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 56)
							if loc_1 < loc_6 then
								while true do
									rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
									rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
									rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
									loc_2 = rt_add_i32(loc_1, 24)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_add_i32(loc_0, 48)
							loc_4 = rt_load_i32(memory_at_0, loc_5)
							loc_9 = rt_div_i32(rt_sub_i32(loc_1, loc_4), 24)
							loc_3 = rt_add_i32(loc_9, 1)
							if loc_3 >= 178956971 then
								desired = 2
								break
							end
							loc_5 = rt_div_i32(rt_sub_i32(loc_6, loc_4), 24)
							loc_7 = rt_shl_i32(loc_5, 1)
							loc_5 = (if loc_5 >= 89478485 then 178956970 else (if loc_3 < loc_7 then loc_7 else loc_3))
							if loc_5 ~= 0 then
								while true do
									if loc_5 >= 178956971 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[646](rt_mul_i32(loc_5, 24))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_7 = reg_0
							loc_3 = rt_add_i32(loc_7, rt_mul_i32(loc_9, 24))
							rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
							rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
							loc_5 = rt_add_i32(rt_mul_i32(loc_5, 24), loc_7)
							loc_2 = rt_add_i32(loc_3, 24)
							if loc_1 ~= loc_4 then
								while true do
									while true do
										loc_3 = rt_sub_i32(loc_3, 24)
										loc_1 = rt_sub_i32(loc_1, 24)
										rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
										rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
										rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
										if loc_1 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									loc_6 = rt_load_i32(memory_at_0, loc_0 + 56)
									reg_0 = rt_load_i32(memory_at_0, loc_0 + 48)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_4 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 56, loc_5)
							rt_store_i32(memory_at_0, loc_0 + 52, loc_2)
							rt_store_i32(memory_at_0, loc_0 + 48, loc_3)
							if loc_4 == 0 then
								break
							end
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_6, loc_4))
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 52, loc_2)
						reg_0 = loc_8
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = reg_0
				reg_0 = loc_3
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_5)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[69] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::ConstantKey, std::__2::pair<Luau::BytecodeBuilder::ConstantKey, int>, std::__2::pair<Luau::BytecodeBuilder::ConstantKey const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::ConstantKey, int>, Luau::BytecodeBuilder::ConstantKeyHash, std::__2::equal_to<Luau::BytecodeBuilder::ConstantKey>>::find(Luau::BytecodeBuilder::ConstantKey const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 16)
				if loc_4 ~= loc_6 then
					break
				end
				if rt_ne_i64(rt_load_i64(memory_at_0, loc_1 + 8), rt_load_i64(memory_at_0, loc_0 + 24)) then
					break
				end
				if rt_eq_i64(rt_load_i64(memory_at_0, loc_1 + 16), rt_load_i64(memory_at_0, loc_0 + 32)) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
			while true do
				if loc_4 == 3 then
					while true do
						loc_8 = rt_load_i64(memory_at_0, loc_1 + 8)
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 12)
						reg_0 = rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 19349663)
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
						reg_0 = bit_xor(reg_0, rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 73856093))
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
						reg_0 = bit_xor(reg_0, rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 83492791))
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 20)
						reg_0 = bit_xor(reg_0, rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 39916801))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_8 = rt_load_i64(memory_at_0, loc_1 + 8)
				loc_2 = bit_xor(rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(32, 0))), rt_mul_i32(loc_4, 1540483477))
				loc_5 = rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 18), rt_wrap_i32_i64(loc_8)), 1540483477)
				loc_2 = rt_mul_i32(bit_xor(rt_shr_u32(loc_5, 22), loc_2), 1540483477)
				reg_0 = rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_5), 1540483477), 19), loc_2), 1540483477)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			loc_3 = rt_sub_i32(loc_3, 1)
			loc_9 = rt_load_i64(memory_at_0, loc_0 + 32)
			loc_10 = rt_load_i64(memory_at_0, loc_0 + 24)
			loc_11 = rt_load_i64(memory_at_0, loc_1 + 16)
			loc_7 = rt_load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				while true do
					loc_5 = bit_and(loc_2, loc_3)
					loc_2 = rt_add_i32(rt_shl_i32(loc_5, 5), loc_7)
					loc_1 = rt_load_i32(memory_at_0, loc_2)
					if loc_4 ~= loc_1 then
						break
					end
					if rt_ne_i64(loc_8, rt_load_i64(memory_at_0, loc_2 + 8)) then
						break
					end
					if rt_eq_i64(loc_11, rt_load_i64(memory_at_0, loc_2 + 16)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					while true do
						if loc_1 ~= loc_6 then
							break
						end
						if rt_ne_i64(loc_10, rt_load_i64(memory_at_0, loc_2 + 8)) then
							break
						end
						if rt_eq_i64(loc_9, rt_load_i64(memory_at_0, loc_2 + 16)) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = rt_add_i32(loc_0, 1)
					loc_2 = rt_add_i32(loc_5, loc_0)
					if loc_0 <= loc_3 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[70] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::ConstantKey, std::__2::pair<Luau::BytecodeBuilder::ConstantKey, int>, std::__2::pair<Luau::BytecodeBuilder::ConstantKey const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::ConstantKey, int>, Luau::BytecodeBuilder::ConstantKeyHash, std::__2::equal_to<Luau::BytecodeBuilder::ConstantKey>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_3 + 8, 0)
		rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_0 + 24))
		rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_0 + 32))
		rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_0 + 16))
		loc_5 = (if loc_2 ~= 0 then rt_shl_i32(loc_2, 1) else 16)
		if loc_5 ~= 0 then
			while true do
				loc_2 = rt_add_i32(loc_0, 16)
				reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 5))
				loc_6 = reg_0
				rt_store_i32(memory_at_0, loc_3 + 4, loc_5)
				rt_store_i32(memory_at_0, loc_3, loc_6)
				if loc_5 >= 4 then
					while true do
						loc_11 = bit_and(loc_5, 4294967292)
						while true do
							loc_1 = rt_add_i32(rt_shl_i32(loc_4, 5), loc_6)
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
							loc_10 = rt_add_i32(loc_2, 8)
							loc_13 = rt_load_i64(memory_at_0, loc_10)
							loc_14 = rt_load_i64(memory_at_0, rt_add_i32(loc_2, 16))
							rt_store_i32(memory_at_0, loc_1 + 24, 0)
							rt_store_i64(memory_at_0, loc_1 + 16, loc_14)
							rt_store_i64(memory_at_0, loc_1 + 8, loc_13)
							rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
							rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_2 + 16))
							rt_store_i32(memory_at_0, loc_1 + 56, 0)
							rt_store_i64(memory_at_0, rt_sub_i32(loc_1, 4294967232), rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_1 + 72, rt_load_i64(memory_at_0, loc_2 + 8))
							rt_store_i64(memory_at_0, loc_1 + 80, rt_load_i64(memory_at_0, loc_2 + 16))
							rt_store_i32(memory_at_0, loc_1 + 88, 0)
							rt_store_i64(memory_at_0, loc_1 + 96, rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_1 + 104, rt_load_i64(memory_at_0, loc_2 + 8))
							rt_store_i64(memory_at_0, loc_1 + 112, rt_load_i64(memory_at_0, loc_2 + 16))
							rt_store_i32(memory_at_0, loc_1 + 120, 0)
							loc_4 = rt_add_i32(loc_4, 4)
							loc_9 = rt_add_i32(loc_9, 4)
							if loc_11 ~= loc_9 then
								continue
							end
							break
						end
						break
					end
				end
				loc_12 = bit_and(loc_5, 2)
				if loc_12 ~= 0 then
					while true do
						while true do
							loc_1 = rt_add_i32(rt_shl_i32(loc_4, 5), loc_6)
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
							loc_13 = rt_load_i64(memory_at_0, loc_2 + 8)
							loc_14 = rt_load_i64(memory_at_0, loc_2 + 16)
							rt_store_i32(memory_at_0, loc_1 + 24, 0)
							rt_store_i64(memory_at_0, loc_1 + 16, loc_14)
							rt_store_i64(memory_at_0, loc_1 + 8, loc_13)
							loc_4 = rt_add_i32(loc_4, 1)
							loc_8 = rt_add_i32(loc_8, 1)
							if loc_12 ~= loc_8 then
								continue
							end
							break
						end
						break
					end
				end
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		if loc_2 ~= 0 then
			while true do
				loc_4 = 0
				while true do
					while true do
						while true do
							loc_10 = rt_shl_i32(loc_4, 5)
							loc_1 = rt_add_i32(loc_10, rt_load_i32(memory_at_0, loc_0))
							if rt_load_i32(memory_at_0, loc_1) ~= rt_load_i32(memory_at_0, loc_0 + 16) then
								break
							end
							if rt_ne_i64(rt_load_i64(memory_at_0, loc_1 + 8), rt_load_i64(memory_at_0, loc_0 + 24)) then
								break
							end
							if rt_eq_i64(rt_load_i64(memory_at_0, loc_1 + 16), rt_load_i64(memory_at_0, loc_0 + 32)) then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[71](loc_3, loc_1)
						loc_1 = reg_0
						loc_2 = rt_add_i32(loc_10, rt_load_i32(memory_at_0, loc_0))
						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
						rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
						rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
						rt_store_i32(memory_at_0, loc_1 + 24, rt_load_i32(memory_at_0, loc_2 + 24))
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = rt_add_i32(loc_4, 1)
					if loc_2 > loc_4 then
						continue
					end
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_3)
				loc_7 = loc_2
				reg_0 = rt_load_i32(memory_at_0, loc_3 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_6)
		rt_store_i32(memory_at_0, loc_3, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_5)
		rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 48)
		break
	end
end
FUNC_LIST[71] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::ConstantKey, std::__2::pair<Luau::BytecodeBuilder::ConstantKey, int>, std::__2::pair<Luau::BytecodeBuilder::ConstantKey const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::ConstantKey, int>, Luau::BytecodeBuilder::ConstantKeyHash, std::__2::equal_to<Luau::BytecodeBuilder::ConstantKey>>::insert_unsafe(Luau::BytecodeBuilder::ConstantKey const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_1)
			if loc_5 == 3 then
				while true do
					loc_10 = rt_load_i64(memory_at_0, loc_1 + 8)
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 12)
					reg_0 = rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 19349663)
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
					reg_0 = bit_xor(reg_0, rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 73856093))
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
					reg_0 = bit_xor(reg_0, rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 83492791))
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 20)
					reg_0 = bit_xor(reg_0, rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 39916801))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_load_i64(memory_at_0, loc_1 + 8)
			loc_2 = bit_xor(rt_wrap_i32_i64(rt_shr_u64(loc_10, rt_i64_from_u32(32, 0))), rt_mul_i32(loc_5, 1540483477))
			loc_4 = rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 18), rt_wrap_i32_i64(loc_10)), 1540483477)
			loc_2 = rt_mul_i32(bit_xor(rt_shr_u32(loc_4, 22), loc_2), 1540483477)
			reg_0 = rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_4), 1540483477), 19), loc_2), 1540483477)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_0
		loc_4 = rt_sub_i32(loc_3, 1)
		loc_11 = rt_load_i64(memory_at_0, loc_1 + 16)
		loc_12 = rt_load_i64(memory_at_0, loc_0 + 32)
		loc_13 = rt_load_i64(memory_at_0, loc_0 + 24)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_7 = rt_load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			while true do
				while true do
					loc_8 = bit_and(loc_2, loc_4)
					loc_2 = rt_add_i32(rt_shl_i32(loc_8, 5), loc_7)
					loc_9 = rt_load_i32(memory_at_0, loc_2)
					if loc_6 ~= loc_9 then
						break
					end
					if rt_ne_i64(loc_13, rt_load_i64(memory_at_0, loc_2 + 8)) then
						break
					end
					if rt_ne_i64(loc_12, rt_load_i64(memory_at_0, loc_2 + 16)) then
						break
					end
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					if loc_5 ~= loc_9 then
						break
					end
					if rt_ne_i64(loc_10, rt_load_i64(memory_at_0, loc_2 + 8)) then
						break
					end
					if rt_eq_i64(loc_11, rt_load_i64(memory_at_0, loc_2 + 16)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = rt_add_i32(loc_3, 1)
				loc_2 = rt_add_i32(loc_8, loc_3)
				if loc_3 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[72] = --[[ Luau::BytecodeBuilder::addStringTableEntry(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_add_i32(loc_0, 384)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 392) < rt_shr_u32(rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 388), 3), 2) then
				break
			end
			reg_0 = FUNC_LIST[73](loc_2, loc_1)
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[74](loc_2)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				while true do
					reg_0 = FUNC_LIST[75](loc_2, loc_1)
					loc_8 = reg_0
					loc_2 = rt_load_i32(memory_at_0, loc_8 + 8)
					if loc_2 ~= 0 then
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 392)
					rt_store_i32(memory_at_0, loc_8 + 8, loc_2)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 460), 1) == 0 then
						break
					end
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 412)
						loc_6 = rt_load_i32(memory_at_0, loc_0 + 416)
						if loc_2 < loc_6 then
							while true do
								rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
								loc_1 = rt_add_i32(loc_2, 8)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_add_i32(loc_0, 408)
						loc_4 = rt_load_i32(memory_at_0, loc_3)
						loc_9 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 3)
						loc_5 = rt_add_i32(loc_9, 1)
						if loc_5 >= 536870912 then
							desired = 2
							break
						end
						loc_3 = rt_sub_i32(loc_6, loc_4)
						loc_7 = rt_shr_i32(loc_3, 2)
						loc_3 = (if loc_3 >= 2147483640 then 536870911 else (if loc_5 < loc_7 then loc_7 else loc_5))
						if loc_3 ~= 0 then
							while true do
								if loc_3 >= 536870912 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_3, 3))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_7 = reg_0
						loc_5 = rt_add_i32(loc_7, rt_shl_i32(loc_9, 3))
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_1))
						loc_3 = rt_add_i32(rt_shl_i32(loc_3, 3), loc_7)
						loc_1 = rt_add_i32(loc_5, 8)
						if loc_2 ~= loc_4 then
							while true do
								while true do
									loc_5 = rt_sub_i32(loc_5, 8)
									loc_2 = rt_sub_i32(loc_2, 8)
									rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_2))
									if loc_2 ~= loc_4 then
										continue
									end
									break
								end
								if desired then
									break
								end
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 416)
								reg_0 = rt_load_i32(memory_at_0, loc_0 + 408)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 416, loc_3)
						rt_store_i32(memory_at_0, loc_0 + 412, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 408, loc_5)
						if loc_4 == 0 then
							break
						end
						FUNC_LIST[653](loc_4, rt_sub_i32(loc_6, loc_4))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 412, loc_1)
					loc_2 = rt_load_i32(memory_at_0, loc_8 + 8)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = loc_2
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_3)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[73] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::StringRef, std::__2::pair<Luau::BytecodeBuilder::StringRef, unsigned int>, std::__2::pair<Luau::BytecodeBuilder::StringRef const, unsigned int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::StringRef, unsigned int>, Luau::BytecodeBuilder::StringRefHash, std::__2::equal_to<Luau::BytecodeBuilder::StringRef>>::find(Luau::BytecodeBuilder::StringRef const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
			while true do
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_1)
					if loc_3 == 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 16) then
						desired = 2
						break
					end
					reg_0 = FUNC_LIST[575](loc_3, loc_2, loc_4)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 == loc_3 then
					desired = 1
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1)
			reg_0 = FUNC_LIST[515](loc_3, loc_4)
			loc_2 = reg_0
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 16)
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 12)
			loc_8 = rt_load_i32(memory_at_0, loc_1 + 4)
			loc_3 = rt_load_i32(memory_at_0, loc_1)
			loc_9 = rt_load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				while true do
					while true do
						loc_1 = bit_and(loc_2, loc_6)
						loc_5 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_9)
						loc_2 = rt_load_i32(memory_at_0, loc_5)
						if loc_2 == 0 then
							break
						end
						if loc_3 == 0 then
							break
						end
						if loc_8 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[575](loc_2, loc_3, loc_8)
						if reg_0 ~= 0 then
							desired = 3
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == loc_3 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if loc_4 == 0 then
								break
							end
							if loc_7 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[575](loc_2, loc_4, loc_7)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == loc_4 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = rt_add_i32(loc_0, 1)
					loc_2 = rt_add_i32(loc_1, loc_0)
					if loc_0 <= loc_6 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = 0
			break
		end
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[74] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::StringRef, std::__2::pair<Luau::BytecodeBuilder::StringRef, unsigned int>, std::__2::pair<Luau::BytecodeBuilder::StringRef const, unsigned int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::StringRef, unsigned int>, Luau::BytecodeBuilder::StringRefHash, std::__2::equal_to<Luau::BytecodeBuilder::StringRef>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_4 + 16, 0)
		rt_store_i64(memory_at_0, loc_4 + 8, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 20, rt_load_i64(memory_at_0, loc_0 + 12))
		loc_6 = (if loc_3 ~= 0 then rt_shl_i32(loc_3, 1) else 16)
		if loc_6 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 12))
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_4 + 12, loc_6)
				rt_store_i32(memory_at_0, loc_4 + 8, loc_2)
				loc_8 = bit_and(loc_6, 2)
				loc_11 = rt_load_i64(memory_at_0, loc_0 + 12)
				if loc_6 >= 4 then
					while true do
						loc_9 = bit_and(loc_6, 4294967292)
						loc_3 = 0
						while true do
							loc_5 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_2)
							rt_store_i32(memory_at_0, loc_5 + 8, 0)
							rt_store_i64(memory_at_0, loc_5, loc_11)
							loc_5 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 1), 12), loc_2)
							rt_store_i32(memory_at_0, loc_5 + 8, 0)
							rt_store_i64(memory_at_0, loc_5, loc_11)
							loc_5 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 2), 12), loc_2)
							rt_store_i32(memory_at_0, loc_5 + 8, 0)
							rt_store_i64(memory_at_0, loc_5, loc_11)
							loc_5 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 3), 12), loc_2)
							rt_store_i32(memory_at_0, loc_5 + 8, 0)
							rt_store_i64(memory_at_0, loc_5, loc_11)
							loc_1 = rt_add_i32(loc_1, 4)
							loc_3 = rt_add_i32(loc_3, 4)
							if loc_9 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_8 ~= 0 then
					while true do
						while true do
							loc_3 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_2)
							rt_store_i32(memory_at_0, loc_3 + 8, 0)
							rt_store_i64(memory_at_0, loc_3, loc_11)
							loc_1 = rt_add_i32(loc_1, 1)
							loc_7 = rt_add_i32(loc_7, 1)
							if loc_8 ~= loc_7 then
								continue
							end
							break
						end
						break
					end
				end
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		if loc_3 ~= 0 then
			while true do
				loc_1 = 0
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
					while true do
						while true do
							while true do
								loc_8 = rt_mul_i32(loc_1, 12)
								loc_7 = rt_add_i32(loc_8, rt_load_i32(memory_at_0, loc_0))
								loc_5 = rt_load_i32(memory_at_0, loc_7)
								if loc_5 == 0 then
									break
								end
								if loc_2 == 0 then
									break
								end
								loc_9 = rt_load_i32(memory_at_0, loc_7 + 4)
								if loc_9 ~= rt_load_i32(memory_at_0, loc_0 + 16) then
									desired = 4
									break
								end
								reg_0 = FUNC_LIST[575](loc_5, loc_2, loc_9)
								if reg_0 ~= 0 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_2 == loc_5 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[75](rt_add_i32(loc_4, 8), loc_7)
						loc_2 = reg_0
						loc_7 = rt_add_i32(loc_8, rt_load_i32(memory_at_0, loc_0))
						rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_7))
						rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_7 + 8))
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_3 > loc_1 then
						continue
					end
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_4 + 12)
				loc_10 = loc_3
				reg_0 = rt_load_i32(memory_at_0, loc_4 + 8)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_2)
		rt_store_i32(memory_at_0, loc_4 + 8, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		rt_store_i32(memory_at_0, loc_4 + 12, loc_10)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[75] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::StringRef, std::__2::pair<Luau::BytecodeBuilder::StringRef, unsigned int>, std::__2::pair<Luau::BytecodeBuilder::StringRef const, unsigned int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::StringRef, unsigned int>, Luau::BytecodeBuilder::StringRefHash, std::__2::equal_to<Luau::BytecodeBuilder::StringRef>>::insert_unsafe(Luau::BytecodeBuilder::StringRef const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1)
		reg_0 = FUNC_LIST[515](rt_load_i32(memory_at_0, loc_1), rt_load_i32(memory_at_0, loc_1 + 4))
		loc_2 = reg_0
		loc_8 = rt_load_i32(memory_at_0, loc_1 + 4)
		loc_4 = rt_load_i32(memory_at_0, loc_1)
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_10 = rt_load_i32(memory_at_0, loc_0)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_11 = bit_and(loc_2, loc_7)
							loc_3 = rt_add_i32(rt_mul_i32(loc_11, 12), loc_10)
							loc_2 = rt_load_i32(memory_at_0, loc_3)
							if loc_2 == 0 then
								break
							end
							if loc_5 == 0 then
								break
							end
							if loc_9 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[575](loc_2, loc_5, loc_9)
							if reg_0 ~= 0 then
								desired = 4
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == loc_5 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					while true do
						while true do
							if loc_2 == 0 then
								break
							end
							if loc_4 == 0 then
								break
							end
							if loc_8 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[575](loc_2, loc_4, loc_8)
							if reg_0 == 0 then
								desired = 2
								break
							end
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == loc_4 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = rt_add_i32(loc_6, 1)
					loc_2 = rt_add_i32(loc_11, loc_6)
					if loc_6 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[76] = --[[ Luau::BytecodeBuilder::addConstantNil() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_1 + 8, 0)
		reg_0 = FUNC_LIST[68](loc_0, rt_add_i32(loc_1, 8), 10440)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 32)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[77] = --[[ Luau::BytecodeBuilder::addConstantBoolean(bool) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, 10472))
		rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, 10480))
		rt_store_i32_n8(memory_at_0, loc_2 + 32, loc_1)
		rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, 10464))
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 8, rt_extend_i64_u32(loc_1))
		rt_store_i32(memory_at_0, loc_2, 1)
		reg_0 = FUNC_LIST[68](loc_0, loc_2, rt_add_i32(loc_2, 24))
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[78] = --[[ Luau::BytecodeBuilder::addConstantNumber(double) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, 10504))
		rt_store_f64(memory_at_0, loc_2 + 32, loc_1)
		rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, 10488))
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_2, 2)
		rt_store_f64(memory_at_0, loc_2 + 8, loc_1)
		reg_0 = FUNC_LIST[68](loc_0, loc_2, rt_add_i32(loc_2, 24))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[79] = --[[ Luau::BytecodeBuilder::addConstantVector(float, float, float, float) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		rt_store_f32(memory_at_0, loc_5 + 44, loc_4)
		rt_store_f32(memory_at_0, loc_5 + 40, loc_3)
		rt_store_f32(memory_at_0, loc_5 + 36, loc_2)
		rt_store_f32(memory_at_0, loc_5 + 32, loc_1)
		rt_store_i64(memory_at_0, loc_5 + 24, rt_i64_from_u32(3, 0))
		rt_store_f32(memory_at_0, loc_5 + 20, loc_4)
		rt_store_f32(memory_at_0, loc_5 + 16, loc_3)
		rt_store_f32(memory_at_0, loc_5 + 12, loc_2)
		rt_store_f32(memory_at_0, loc_5 + 8, loc_1)
		rt_store_i32(memory_at_0, loc_5, 3)
		reg_0 = FUNC_LIST[68](loc_0, loc_5, rt_add_i32(loc_5, 24))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[80] = --[[ Luau::BytecodeBuilder::addConstantString(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = rt_i64_ZERO
	local reg_0
	while true do
		loc_2 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = rt_load_i64(memory_at_0, loc_1)
		rt_store_i64(memory_at_0, loc_2, loc_3)
		rt_store_i64(memory_at_0, loc_2 + 56, loc_3)
		reg_0 = FUNC_LIST[72](loc_0, loc_2)
		loc_1 = reg_0
		rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, 10520))
		rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, 10528))
		rt_store_i32(memory_at_0, loc_2 + 40, loc_1)
		rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, 10512))
		rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 16, rt_extend_i64_u32(loc_1))
		rt_store_i32(memory_at_0, loc_2 + 8, 4)
		reg_0 = FUNC_LIST[68](loc_0, rt_add_i32(loc_2, 8), rt_add_i32(loc_2, 32))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_sub_i32(loc_2, 4294967232)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[81] = --[[ Luau::BytecodeBuilder::addImport(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, 10544))
		rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, 10552))
		rt_store_i32(memory_at_0, loc_2 + 32, loc_1)
		rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, 10536))
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 8, rt_extend_i64_u32(loc_1))
		rt_store_i32(memory_at_0, loc_2, 5)
		reg_0 = FUNC_LIST[68](loc_0, loc_2, rt_add_i32(loc_2, 24))
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[82] = --[[ Luau::BytecodeBuilder::addConstantTable(Luau::BytecodeBuilder::TableShape const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_add_i32(loc_0, 152)
		reg_0 = FUNC_LIST[83](loc_2, loc_1)
		loc_3 = reg_0
		if loc_3 ~= 0 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, loc_3 + 132)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = 4294967295
		while true do
			while true do
				while true do
					loc_10 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 52), rt_load_i32(memory_at_0, loc_0 + 48)), 24)
					if loc_10 <= 8388607 then
						while true do
							loc_8 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 88), rt_load_i32(memory_at_0, loc_0 + 84)), 132)
							while true do
								if rt_load_i32(memory_at_0, loc_0 + 160) < rt_shr_u32(rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 156), 3), 2) then
									break
								end
								reg_0 = FUNC_LIST[83](loc_2, loc_1)
								if reg_0 ~= 0 then
									break
								end
								FUNC_LIST[84](loc_2)
								break
							end
							if desired then
								break
							end
							reg_0 = FUNC_LIST[85](loc_2, loc_1)
							rt_store_i32(memory_at_0, reg_0 + 132, loc_10)
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_0 + 88)
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 92)
								if loc_3 < loc_6 then
									while true do
										reg_0 = FUNC_LIST[517](loc_3, loc_1, 132)
										loc_1 = rt_add_i32(reg_0, 132)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_5 = rt_add_i32(loc_0, 84)
								loc_4 = rt_load_i32(memory_at_0, loc_5)
								loc_9 = rt_div_i32(rt_sub_i32(loc_3, loc_4), 132)
								loc_2 = rt_add_i32(loc_9, 1)
								if loc_2 >= 32537632 then
									desired = 3
									break
								end
								loc_5 = rt_div_i32(rt_sub_i32(loc_6, loc_4), 132)
								loc_7 = rt_shl_i32(loc_5, 1)
								loc_2 = (if loc_5 >= 16268815 then 32537631 else (if loc_2 < loc_7 then loc_7 else loc_2))
								if loc_2 ~= 0 then
									while true do
										if loc_2 >= 32537632 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[646](rt_mul_i32(loc_2, 132))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_5 = reg_0
								loc_7 = rt_add_i32(loc_5, rt_mul_i32(loc_2, 132))
								loc_2 = rt_add_i32(rt_mul_i32(loc_9, 132), loc_5)
								reg_0 = FUNC_LIST[517](loc_2, loc_1, 132)
								loc_1 = rt_add_i32(reg_0, 132)
								if loc_3 ~= loc_4 then
									while true do
										while true do
											loc_2 = rt_sub_i32(loc_2, 132)
											loc_3 = rt_sub_i32(loc_3, 132)
											reg_0 = FUNC_LIST[517](loc_2, loc_3, 132)
											if loc_3 ~= loc_4 then
												continue
											end
											break
										end
										if desired then
											break
										end
										loc_6 = rt_load_i32(memory_at_0, loc_0 + 92)
										reg_0 = rt_load_i32(memory_at_0, loc_0 + 84)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_4
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_4 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 92, loc_7)
								rt_store_i32(memory_at_0, loc_0 + 88, loc_1)
								rt_store_i32(memory_at_0, loc_0 + 84, loc_2)
								if loc_4 == 0 then
									break
								end
								FUNC_LIST[653](loc_4, rt_sub_i32(loc_6, loc_4))
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 88, loc_1)
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_0 + 52)
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 56)
								if loc_3 < loc_6 then
									while true do
										rt_store_i64(memory_at_0, loc_3 + 12, rt_i64_ZERO)
										rt_store_i32(memory_at_0, loc_3 + 8, loc_8)
										rt_store_i64(memory_at_0, loc_3, rt_i64_from_u32(6, 0))
										rt_store_i32(memory_at_0, loc_3 + 20, 0)
										loc_4 = rt_add_i32(loc_3, 24)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_4 = rt_add_i32(loc_0, 48)
								loc_1 = rt_load_i32(memory_at_0, loc_4)
								loc_9 = rt_div_i32(rt_sub_i32(loc_3, loc_1), 24)
								loc_2 = rt_add_i32(loc_9, 1)
								if loc_2 >= 178956971 then
									desired = 1
									break
								end
								loc_4 = 0
								loc_5 = rt_div_i32(rt_sub_i32(loc_6, loc_1), 24)
								loc_7 = rt_shl_i32(loc_5, 1)
								loc_5 = (if loc_5 >= 89478485 then 178956970 else (if loc_2 < loc_7 then loc_7 else loc_2))
								if loc_5 ~= 0 then
									while true do
										if loc_5 >= 178956971 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[646](rt_mul_i32(loc_5, 24))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_4
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_4 = reg_0
								loc_2 = rt_add_i32(loc_4, rt_mul_i32(loc_9, 24))
								rt_store_i64(memory_at_0, loc_2 + 12, rt_i64_ZERO)
								rt_store_i32(memory_at_0, loc_2 + 8, loc_8)
								rt_store_i64(memory_at_0, loc_2, rt_i64_from_u32(6, 0))
								rt_store_i32(memory_at_0, loc_2 + 20, 0)
								loc_8 = rt_add_i32(rt_mul_i32(loc_5, 24), loc_4)
								loc_4 = rt_add_i32(loc_2, 24)
								if loc_1 ~= loc_3 then
									while true do
										while true do
											loc_2 = rt_sub_i32(loc_2, 24)
											loc_3 = rt_sub_i32(loc_3, 24)
											rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
											rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
											rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
											if loc_1 ~= loc_3 then
												continue
											end
											break
										end
										if desired then
											break
										end
										loc_6 = rt_load_i32(memory_at_0, loc_0 + 56)
										reg_0 = rt_load_i32(memory_at_0, loc_0 + 48)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_1
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_1 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 56, loc_8)
								rt_store_i32(memory_at_0, loc_0 + 52, loc_4)
								rt_store_i32(memory_at_0, loc_0 + 48, loc_2)
								if loc_1 == 0 then
									break
								end
								FUNC_LIST[653](loc_1, rt_sub_i32(loc_6, loc_1))
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 52, loc_4)
							reg_0 = loc_10
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = reg_0
					reg_0 = loc_3
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](loc_4)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[83] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::TableShape, std::__2::pair<Luau::BytecodeBuilder::TableShape, int>, std::__2::pair<Luau::BytecodeBuilder::TableShape const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::TableShape, int>, Luau::BytecodeBuilder::TableShapeHash, std::__2::equal_to<Luau::BytecodeBuilder::TableShape>>::find(Luau::BytecodeBuilder::TableShape const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_11 = rt_add_i32(loc_0, 12)
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 128)
			loc_12 = rt_load_i32(memory_at_0, loc_0 + 140)
			if loc_4 == loc_12 then
				while true do
					reg_0 = FUNC_LIST[575](loc_1, loc_11, rt_shl_i32(loc_4, 2))
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 4)
			while true do
				if loc_4 == 0 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = bit_and(loc_4, 3)
				while true do
					if loc_4 < 4 then
						while true do
							loc_2 = 2166136261
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_10 = bit_and(loc_4, 4294967292)
					loc_2 = 2166136261
					while true do
						loc_5 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_1)
						loc_2 = rt_mul_i32(bit_xor(rt_load_i32(memory_at_0, loc_5 + 12), rt_mul_i32(bit_xor(rt_load_i32(memory_at_0, loc_5 + 8), rt_mul_i32(bit_xor(rt_load_i32(memory_at_0, loc_5 + 4), rt_mul_i32(bit_xor(loc_2, rt_load_i32(memory_at_0, loc_5)), 16777619)), 16777619)), 16777619)), 16777619)
						loc_3 = rt_add_i32(loc_3, 4)
						loc_8 = rt_add_i32(loc_8, 4)
						if loc_10 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_2 = rt_mul_i32(bit_xor(loc_2, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_1))), 16777619)
					loc_3 = rt_add_i32(loc_3, 1)
					loc_7 = rt_add_i32(loc_7, 1)
					if loc_6 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_sub_i32(loc_9, 1)
			loc_9 = rt_shl_i32(loc_12, 2)
			loc_10 = rt_shl_i32(loc_4, 2)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			loc_3 = 0
			while true do
				loc_8 = bit_and(loc_2, loc_5)
				loc_2 = rt_add_i32(rt_mul_i32(loc_8, 136), loc_6)
				loc_7 = rt_load_i32(memory_at_0, loc_2 + 128)
				if loc_7 == loc_4 then
					while true do
						reg_0 = FUNC_LIST[575](loc_2, loc_1, loc_10)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				while true do
					if loc_7 == loc_12 then
						while true do
							reg_0 = FUNC_LIST[575](loc_2, loc_11, loc_9)
							if reg_0 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_8, loc_3)
					if loc_3 <= loc_5 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[84] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::TableShape, std::__2::pair<Luau::BytecodeBuilder::TableShape, int>, std::__2::pair<Luau::BytecodeBuilder::TableShape const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::TableShape, int>, Luau::BytecodeBuilder::TableShapeHash, std::__2::equal_to<Luau::BytecodeBuilder::TableShape>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_3 + 20, 0)
		rt_store_i64(memory_at_0, loc_3 + 12, rt_i64_ZERO)
		loc_6 = rt_add_i32(loc_0, 12)
		reg_0 = FUNC_LIST[517](rt_add_i32(loc_3, 24), loc_6, 132)
		loc_5 = (if loc_4 ~= 0 then rt_shl_i32(loc_4, 1) else 16)
		if loc_5 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[646](rt_mul_i32(loc_5, 136))
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_3 + 16, loc_5)
				rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
				loc_7 = bit_and(loc_5, 2)
				loc_4 = 0
				if loc_5 >= 4 then
					while true do
						loc_10 = bit_and(loc_5, 4294967292)
						while true do
							reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(loc_1, 136), loc_2), loc_6, 132)
							rt_store_i32(memory_at_0, reg_0 + 132, 0)
							reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(bit_or(loc_1, 1), 136), loc_2), loc_6, 132)
							rt_store_i32(memory_at_0, reg_0 + 132, 0)
							reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(bit_or(loc_1, 2), 136), loc_2), loc_6, 132)
							rt_store_i32(memory_at_0, reg_0 + 132, 0)
							reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(bit_or(loc_1, 3), 136), loc_2), loc_6, 132)
							rt_store_i32(memory_at_0, reg_0 + 132, 0)
							loc_1 = rt_add_i32(loc_1, 4)
							loc_8 = rt_add_i32(loc_8, 4)
							if loc_10 ~= loc_8 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 ~= 0 then
					while true do
						while true do
							reg_0 = FUNC_LIST[517](rt_add_i32(rt_mul_i32(loc_1, 136), loc_2), loc_6, 132)
							rt_store_i32(memory_at_0, reg_0 + 132, 0)
							loc_1 = rt_add_i32(loc_1, 1)
							loc_4 = rt_add_i32(loc_4, 1)
							if loc_7 ~= loc_4 then
								continue
							end
							break
						end
						break
					end
				end
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_4
				break
			end
		end
		loc_4 = reg_0
		if loc_4 ~= 0 then
			while true do
				loc_1 = 0
				while true do
					while true do
						loc_8 = rt_mul_i32(loc_1, 136)
						loc_2 = rt_add_i32(loc_8, rt_load_i32(memory_at_0, loc_0))
						loc_7 = rt_load_i32(memory_at_0, loc_2 + 128)
						if loc_7 == rt_load_i32(memory_at_0, loc_0 + 140) then
							while true do
								reg_0 = FUNC_LIST[575](loc_2, loc_6, rt_shl_i32(loc_7, 2))
								if reg_0 == 0 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[85](rt_add_i32(loc_3, 12), loc_2)
						loc_2 = rt_add_i32(loc_8, rt_load_i32(memory_at_0, loc_0))
						reg_0 = FUNC_LIST[517](reg_0, loc_2, 132)
						rt_store_i32(memory_at_0, reg_0 + 132, rt_load_i32(memory_at_0, loc_2 + 132))
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_4 > loc_1 then
						continue
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 16)
				loc_9 = loc_4
				reg_0 = rt_load_i32(memory_at_0, loc_3 + 12)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_5)
		rt_store_i32(memory_at_0, loc_3 + 16, loc_9)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 160)
		break
	end
end
FUNC_LIST[85] = --[[ Luau::detail::DenseHashTable<Luau::BytecodeBuilder::TableShape, std::__2::pair<Luau::BytecodeBuilder::TableShape, int>, std::__2::pair<Luau::BytecodeBuilder::TableShape const, int>, Luau::detail::ItemInterfaceMap<Luau::BytecodeBuilder::TableShape, int>, Luau::BytecodeBuilder::TableShapeHash, std::__2::equal_to<Luau::BytecodeBuilder::TableShape>>::insert_unsafe(Luau::BytecodeBuilder::TableShape const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 4)
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 128)
			if loc_5 == 0 then
				while true do
					loc_2 = 2166136261
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = bit_and(loc_5, 3)
			while true do
				if loc_5 < 4 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_10 = bit_and(loc_5, 4294967292)
				loc_2 = 2166136261
				while true do
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_1)
					loc_2 = rt_mul_i32(bit_xor(rt_load_i32(memory_at_0, loc_4 + 12), rt_mul_i32(bit_xor(rt_load_i32(memory_at_0, loc_4 + 8), rt_mul_i32(bit_xor(rt_load_i32(memory_at_0, loc_4 + 4), rt_mul_i32(bit_xor(loc_2, rt_load_i32(memory_at_0, loc_4)), 16777619)), 16777619)), 16777619)), 16777619)
					loc_3 = rt_add_i32(loc_3, 4)
					loc_8 = rt_add_i32(loc_8, 4)
					if loc_10 ~= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_6 == 0 then
				break
			end
			while true do
				loc_2 = rt_mul_i32(bit_xor(loc_2, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_1))), 16777619)
				loc_3 = rt_add_i32(loc_3, 1)
				loc_7 = rt_add_i32(loc_7, 1)
				if loc_6 ~= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = rt_sub_i32(loc_9, 1)
		loc_11 = rt_shl_i32(loc_5, 2)
		loc_9 = rt_add_i32(loc_0, 12)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 140)
		loc_12 = rt_shl_i32(loc_6, 2)
		loc_10 = rt_load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			while true do
				while true do
					loc_8 = bit_and(loc_2, loc_4)
					loc_2 = rt_add_i32(rt_mul_i32(loc_8, 136), loc_10)
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 128)
					if loc_6 ~= loc_7 then
						break
					end
					reg_0 = FUNC_LIST[575](loc_2, loc_9, loc_12)
					if reg_0 ~= 0 then
						break
					end
					reg_0 = FUNC_LIST[517](loc_2, loc_1, 132)
					loc_2 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_5 == loc_7 then
					while true do
						reg_0 = FUNC_LIST[575](loc_2, loc_1, loc_11)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_3 = rt_add_i32(loc_3, 1)
				loc_2 = rt_add_i32(loc_8, loc_3)
				if loc_3 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[86] = --[[ Luau::BytecodeBuilder::addConstantClosure(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, 10568))
		rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, 10576))
		rt_store_i32(memory_at_0, loc_2 + 32, loc_1)
		rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, 10560))
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 8, rt_extend_i64_u32(loc_1))
		rt_store_i32(memory_at_0, loc_2, 7)
		reg_0 = FUNC_LIST[68](loc_0, loc_2, rt_add_i32(loc_2, 24))
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[87] = --[[ Luau::BytecodeBuilder::addChildFunction(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 12, loc_1)
		while true do
			while true do
				while true do
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 308) == 0 then
								break
							end
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 312)
							if loc_5 == loc_1 then
								break
							end
							loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 304), 1)
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 300)
							loc_4 = loc_1
							while true do
								loc_8 = bit_and(loc_3, loc_4)
								loc_9 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_7)
								loc_4 = rt_load_i32(memory_at_0, loc_9)
								if loc_1 == loc_4 then
									desired = 4
									break
								end
								if loc_4 == loc_5 then
									desired = 5
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_4 = rt_add_i32(loc_8, loc_2)
								if loc_2 <= loc_3 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 65535
						loc_8 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), rt_load_i32(memory_at_0, loc_0 + 60)), 2)
						if loc_8 > 32767 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[88](rt_add_i32(loc_0, 300), rt_add_i32(loc_6, 12))
						rt_store_i32_n16(memory_at_0, reg_0, loc_8)
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_0 + 64)
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 68)
							if loc_2 < loc_3 then
								while true do
									rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_6 + 12))
									loc_1 = rt_add_i32(loc_2, 4)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_add_i32(loc_0, 60)
							loc_4 = rt_load_i32(memory_at_0, loc_5)
							loc_9 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 2)
							loc_1 = rt_add_i32(loc_9, 1)
							if loc_1 >= 1073741824 then
								desired = 3
								break
							end
							loc_7 = rt_sub_i32(loc_3, loc_4)
							loc_3 = rt_shr_i32(loc_7, 1)
							loc_1 = (if loc_7 >= 2147483644 then 1073741823 else (if loc_1 < loc_3 then loc_3 else loc_1))
							if loc_1 ~= 0 then
								while true do
									if loc_1 >= 1073741824 then
										desired = 2
										break
									end
									reg_0 = FUNC_LIST[646](rt_shl_i32(loc_1, 2))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = reg_0
							loc_3 = rt_add_i32(loc_5, rt_shl_i32(loc_9, 2))
							rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_6 + 12))
							loc_5 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_5)
							loc_1 = rt_add_i32(loc_3, 4)
							if loc_2 ~= loc_4 then
								while true do
									while true do
										loc_3 = rt_sub_i32(loc_3, 4)
										loc_2 = rt_sub_i32(loc_2, 4)
										rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_2))
										if loc_2 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_0 + 68, loc_5)
							rt_store_i32(memory_at_0, loc_0 + 64, loc_1)
							rt_store_i32(memory_at_0, loc_0 + 60, loc_3)
							if loc_4 == 0 then
								break
							end
							FUNC_LIST[653](loc_4, loc_7)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 64, loc_1)
						loc_2 = loc_8
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_load_i32_u16(memory_at_0, loc_9 + 4)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = rt_extend_i32_n16(loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[88] = --[[ Luau::DenseHashMap<unsigned int, short, std::__2::hash<unsigned int>, std::__2::equal_to<unsigned int>>::operator[](unsigned int const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_2 < rt_shr_u32(rt_mul_i32(loc_5, 3), 2) then
				break
			end
			while true do
				if loc_2 == 0 then
					break
				end
				loc_7 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_7 == loc_8 then
					break
				end
				loc_3 = rt_sub_i32(loc_5, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_2 = 0
				loc_4 = loc_7
				while true do
					loc_6 = bit_and(loc_3, loc_4)
					loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 3), loc_9))
					if loc_7 == loc_4 then
						desired = 1
						break
					end
					if loc_4 == loc_8 then
						desired = 2
						break
					end
					loc_2 = rt_add_i32(loc_2, 1)
					loc_4 = rt_add_i32(loc_6, loc_2)
					if loc_2 <= loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[89](loc_0)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_7 = rt_load_i32(memory_at_0, loc_0)
				loc_1 = rt_load_i32(memory_at_0, loc_1)
				loc_5 = rt_sub_i32(loc_5, 1)
				loc_2 = bit_and(loc_1, loc_5)
				loc_6 = rt_add_i32(loc_7, rt_shl_i32(loc_2, 3))
				loc_3 = rt_load_i32(memory_at_0, loc_6)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_3 == loc_8 then
					break
				end
				if loc_1 == loc_3 then
					desired = 1
					break
				end
				loc_3 = 0
				while true do
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = bit_and(loc_5, rt_add_i32(loc_2, loc_3))
					loc_6 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_7)
					loc_4 = rt_load_i32(memory_at_0, loc_6)
					if loc_8 == loc_4 then
						desired = 2
						break
					end
					if loc_1 ~= loc_4 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_6, loc_1)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_6, 4)
		break
	end
	return reg_0
end
FUNC_LIST[89] = --[[ Luau::detail::DenseHashTable<unsigned int, std::__2::pair<unsigned int, short>, std::__2::pair<unsigned int const, short>, Luau::detail::ItemInterfaceMap<unsigned int, short>, std::__2::hash<unsigned int>, std::__2::equal_to<unsigned int>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_12 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_4 = (if loc_9 ~= 0 then rt_shl_i32(loc_9, 1) else 16)
			if loc_4 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = bit_and(loc_4, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 3))
			loc_5 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_4 >= 4 then
				while true do
					loc_10 = bit_and(loc_4, 4294967292)
					while true do
						loc_2 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_5)
						rt_store_i32_n16(memory_at_0, loc_2 + 4, 0)
						rt_store_i32(memory_at_0, loc_2, loc_3)
						rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
						rt_store_i32_n16(memory_at_0, loc_2 + 12, 0)
						rt_store_i32_n16(memory_at_0, loc_2 + 20, 0)
						rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
						rt_store_i32_n16(memory_at_0, loc_2 + 28, 0)
						rt_store_i32(memory_at_0, loc_2 + 24, loc_3)
						loc_1 = rt_add_i32(loc_1, 4)
						loc_6 = rt_add_i32(loc_6, 4)
						if loc_10 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 ~= 0 then
				while true do
					while true do
						loc_2 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_5)
						rt_store_i32_n16(memory_at_0, loc_2 + 4, 0)
						rt_store_i32(memory_at_0, loc_2, loc_3)
						loc_1 = rt_add_i32(loc_1, 1)
						loc_8 = rt_add_i32(loc_8, 1)
						if loc_7 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_11 = rt_load_i32(memory_at_0, loc_0)
		while true do
			while true do
				if loc_9 ~= 0 then
					while true do
						loc_10 = rt_sub_i32(loc_4, 1)
						loc_7 = 0
						while true do
							loc_13 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_11)
							loc_1 = rt_load_i32(memory_at_0, loc_13)
							if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
								while true do
									while true do
										while true do
											loc_2 = bit_and(loc_1, loc_10)
											loc_6 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_5)
											loc_8 = rt_load_i32(memory_at_0, loc_6)
											if loc_12 == loc_8 then
												break
											end
											loc_3 = 0
											if loc_1 == loc_8 then
												desired = 6
												break
											end
											while true do
												loc_3 = rt_add_i32(loc_3, 1)
												loc_2 = bit_and(loc_10, rt_add_i32(loc_2, loc_3))
												loc_6 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_5)
												loc_8 = rt_load_i32(memory_at_0, loc_6)
												if loc_12 == loc_8 then
													desired = 7
													break
												end
												if loc_1 ~= loc_8 then
													continue
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										rt_store_i32(memory_at_0, loc_6, loc_1)
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_6, loc_1)
									rt_store_i32_n16(memory_at_0, loc_6 + 4, rt_load_i32_u16(memory_at_0, loc_13 + 4))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_7 = rt_add_i32(loc_7, 1)
							if loc_9 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
						rt_store_i32(memory_at_0, loc_0, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
				rt_store_i32(memory_at_0, loc_0, loc_5)
				if loc_11 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[652](loc_11)
			break
		end
		break
	end
end
FUNC_LIST[90] = --[[ Luau::BytecodeBuilder::emitABC(LuauOpcode, unsigned char, unsigned char, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_4 = bit_or(bit_or(bit_or(loc_1, rt_shl_i32(loc_2, 8)), rt_shl_i32(loc_3, 16)), rt_shl_i32(loc_4, 24))
		while true do
			while true do
				while true do
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
						if loc_3 < loc_2 then
							while true do
								rt_store_i32(memory_at_0, loc_3, loc_4)
								loc_4 = rt_add_i32(loc_3, 4)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_add_i32(loc_0, 24)
						loc_1 = rt_load_i32(memory_at_0, loc_6)
						loc_8 = rt_shr_i32(rt_sub_i32(loc_3, loc_1), 2)
						loc_5 = rt_add_i32(loc_8, 1)
						if loc_5 >= 1073741824 then
							desired = 3
							break
						end
						loc_7 = rt_sub_i32(loc_2, loc_1)
						loc_2 = rt_shr_i32(loc_7, 1)
						loc_5 = (if loc_7 >= 2147483644 then 1073741823 else (if loc_2 > loc_5 then loc_2 else loc_5))
						if loc_5 ~= 0 then
							while true do
								if loc_5 >= 1073741824 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = reg_0
						loc_2 = rt_add_i32(loc_6, rt_shl_i32(loc_8, 2))
						rt_store_i32(memory_at_0, loc_2, loc_4)
						loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_6)
						loc_4 = rt_add_i32(loc_2, 4)
						if loc_1 ~= loc_3 then
							while true do
								while true do
									loc_2 = rt_sub_i32(loc_2, 4)
									loc_3 = rt_sub_i32(loc_3, 4)
									rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
									if loc_1 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_0 + 32, loc_5)
						rt_store_i32(memory_at_0, loc_0 + 28, loc_4)
						rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
						if loc_1 == 0 then
							break
						end
						FUNC_LIST[653](loc_1, loc_7)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 28, loc_4)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 40)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
					if loc_3 < loc_2 then
						while true do
							rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_0 + 320))
							rt_store_i32(memory_at_0, loc_0 + 40, rt_add_i32(loc_3, 4))
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_add_i32(loc_0, 36)
					loc_1 = rt_load_i32(memory_at_0, loc_5)
					loc_7 = rt_shr_i32(rt_sub_i32(loc_3, loc_1), 2)
					loc_4 = rt_add_i32(loc_7, 1)
					if loc_4 >= 1073741824 then
						desired = 1
						break
					end
					loc_6 = rt_sub_i32(loc_2, loc_1)
					loc_2 = rt_shr_i32(loc_6, 1)
					loc_4 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_2 > loc_4 then loc_2 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					loc_2 = rt_add_i32(loc_5, rt_shl_i32(loc_7, 2))
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_0 + 320))
					loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_5)
					loc_4 = rt_add_i32(loc_2, 4)
					if loc_1 ~= loc_3 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 4)
								loc_3 = rt_sub_i32(loc_3, 4)
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
								if loc_1 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 44, loc_5)
					rt_store_i32(memory_at_0, loc_0 + 40, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 36, loc_2)
					if loc_1 ~= 0 then
						while true do
							FUNC_LIST[653](loc_1, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 40, loc_4)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](loc_5)
		error("out of code bounds")
	end
end
FUNC_LIST[91] = --[[ Luau::BytecodeBuilder::emitAD(LuauOpcode, unsigned char, short) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_4 = bit_or(bit_or(loc_1, rt_shl_i32(loc_2, 8)), rt_shl_i32(loc_3, 16))
		while true do
			while true do
				while true do
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
						if loc_3 < loc_2 then
							while true do
								rt_store_i32(memory_at_0, loc_3, loc_4)
								loc_4 = rt_add_i32(loc_3, 4)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_add_i32(loc_0, 24)
						loc_1 = rt_load_i32(memory_at_0, loc_6)
						loc_8 = rt_shr_i32(rt_sub_i32(loc_3, loc_1), 2)
						loc_5 = rt_add_i32(loc_8, 1)
						if loc_5 >= 1073741824 then
							desired = 3
							break
						end
						loc_7 = rt_sub_i32(loc_2, loc_1)
						loc_2 = rt_shr_i32(loc_7, 1)
						loc_5 = (if loc_7 >= 2147483644 then 1073741823 else (if loc_2 > loc_5 then loc_2 else loc_5))
						if loc_5 ~= 0 then
							while true do
								if loc_5 >= 1073741824 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = reg_0
						loc_2 = rt_add_i32(loc_6, rt_shl_i32(loc_8, 2))
						rt_store_i32(memory_at_0, loc_2, loc_4)
						loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_6)
						loc_4 = rt_add_i32(loc_2, 4)
						if loc_1 ~= loc_3 then
							while true do
								while true do
									loc_2 = rt_sub_i32(loc_2, 4)
									loc_3 = rt_sub_i32(loc_3, 4)
									rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
									if loc_1 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_0 + 32, loc_5)
						rt_store_i32(memory_at_0, loc_0 + 28, loc_4)
						rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
						if loc_1 == 0 then
							break
						end
						FUNC_LIST[653](loc_1, loc_7)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 28, loc_4)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 40)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
					if loc_3 < loc_2 then
						while true do
							rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_0 + 320))
							rt_store_i32(memory_at_0, loc_0 + 40, rt_add_i32(loc_3, 4))
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_add_i32(loc_0, 36)
					loc_1 = rt_load_i32(memory_at_0, loc_5)
					loc_7 = rt_shr_i32(rt_sub_i32(loc_3, loc_1), 2)
					loc_4 = rt_add_i32(loc_7, 1)
					if loc_4 >= 1073741824 then
						desired = 1
						break
					end
					loc_6 = rt_sub_i32(loc_2, loc_1)
					loc_2 = rt_shr_i32(loc_6, 1)
					loc_4 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_2 > loc_4 then loc_2 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					loc_2 = rt_add_i32(loc_5, rt_shl_i32(loc_7, 2))
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_0 + 320))
					loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_5)
					loc_4 = rt_add_i32(loc_2, 4)
					if loc_1 ~= loc_3 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 4)
								loc_3 = rt_sub_i32(loc_3, 4)
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
								if loc_1 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 44, loc_5)
					rt_store_i32(memory_at_0, loc_0 + 40, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 36, loc_2)
					if loc_1 ~= 0 then
						while true do
							FUNC_LIST[653](loc_1, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 40, loc_4)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](loc_5)
		error("out of code bounds")
	end
end
FUNC_LIST[92] = --[[ Luau::BytecodeBuilder::emitAux(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
						if loc_3 < loc_2 then
							while true do
								rt_store_i32(memory_at_0, loc_3, loc_1)
								loc_1 = rt_add_i32(loc_3, 4)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_add_i32(loc_0, 24)
						loc_5 = rt_load_i32(memory_at_0, loc_6)
						loc_8 = rt_shr_i32(rt_sub_i32(loc_3, loc_5), 2)
						loc_4 = rt_add_i32(loc_8, 1)
						if loc_4 >= 1073741824 then
							desired = 3
							break
						end
						loc_7 = rt_sub_i32(loc_2, loc_5)
						loc_2 = rt_shr_i32(loc_7, 1)
						loc_4 = (if loc_7 >= 2147483644 then 1073741823 else (if loc_2 > loc_4 then loc_2 else loc_4))
						if loc_4 ~= 0 then
							while true do
								if loc_4 >= 1073741824 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = reg_0
						loc_2 = rt_add_i32(loc_6, rt_shl_i32(loc_8, 2))
						rt_store_i32(memory_at_0, loc_2, loc_1)
						loc_4 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
						loc_1 = rt_add_i32(loc_2, 4)
						if loc_3 ~= loc_5 then
							while true do
								while true do
									loc_2 = rt_sub_i32(loc_2, 4)
									loc_3 = rt_sub_i32(loc_3, 4)
									rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
									if loc_3 ~= loc_5 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_0 + 32, loc_4)
						rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
						if loc_5 == 0 then
							break
						end
						FUNC_LIST[653](loc_5, loc_7)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 40)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
					if loc_3 < loc_2 then
						while true do
							rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_0 + 320))
							rt_store_i32(memory_at_0, loc_0 + 40, rt_add_i32(loc_3, 4))
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = rt_add_i32(loc_0, 36)
					loc_5 = rt_load_i32(memory_at_0, loc_4)
					loc_7 = rt_shr_i32(rt_sub_i32(loc_3, loc_5), 2)
					loc_1 = rt_add_i32(loc_7, 1)
					if loc_1 >= 1073741824 then
						desired = 1
						break
					end
					loc_6 = rt_sub_i32(loc_2, loc_5)
					loc_2 = rt_shr_i32(loc_6, 1)
					loc_1 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_1 < loc_2 then loc_2 else loc_1))
					if loc_1 ~= 0 then
						while true do
							if loc_1 >= 1073741824 then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_1, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = reg_0
					loc_2 = rt_add_i32(loc_4, rt_shl_i32(loc_7, 2))
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_0 + 320))
					loc_4 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_4)
					loc_1 = rt_add_i32(loc_2, 4)
					if loc_3 ~= loc_5 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 4)
								loc_3 = rt_sub_i32(loc_3, 4)
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 44, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 40, loc_1)
					rt_store_i32(memory_at_0, loc_0 + 36, loc_2)
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[653](loc_5, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 40, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[93] = --[[ Luau::BytecodeBuilder::emitLabel() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_load_i32(memory_at_0, loc_0 + 24)), 2)
		break
	end
	return reg_0
end
FUNC_LIST[94] = --[[ Luau::BytecodeBuilder::patchJumpD(unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = rt_add_i32(bit_xor(loc_1, 4294967295), loc_2)
						if rt_add_i32(loc_3, 32768) <= 65535 then
							while true do
								loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), rt_shl_i32(loc_1, 2))
								rt_store_i32(memory_at_0, loc_4, bit_or(rt_load_i32(memory_at_0, loc_4), rt_shl_i32(loc_3, 16)))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = rt_shr_i32(loc_3, 31)
						reg_0 = 0
						if rt_sub_i32(bit_xor(loc_5, loc_3), loc_5) > 8388607 then
							desired = 3
							break
						end
						rt_store_i32_n8(memory_at_0, loc_0 + 96, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 76)
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 80)
						if loc_3 < loc_7 then
							while true do
								rt_store_i64(memory_at_0, loc_3, rt_bit_or_i64(rt_extend_i64_u32(loc_1), rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(32, 0))))
								loc_1 = rt_add_i32(loc_3, 8)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_add_i32(loc_0, 72)
						loc_5 = rt_load_i32(memory_at_0, loc_6)
						loc_9 = rt_shr_i32(rt_sub_i32(loc_3, loc_5), 3)
						loc_4 = rt_add_i32(loc_9, 1)
						if loc_4 >= 536870912 then
							desired = 2
							break
						end
						loc_6 = rt_sub_i32(loc_7, loc_5)
						loc_8 = rt_shr_i32(loc_6, 2)
						loc_6 = (if loc_6 >= 2147483640 then 536870911 else (if loc_4 < loc_8 then loc_8 else loc_4))
						if loc_6 ~= 0 then
							while true do
								if loc_6 >= 536870912 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 3))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = reg_0
						loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_9, 3))
						rt_store_i64(memory_at_0, loc_4, rt_bit_or_i64(rt_extend_i64_u32(loc_1), rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(32, 0))))
						loc_2 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_8)
						loc_1 = rt_add_i32(loc_4, 8)
						if loc_3 ~= loc_5 then
							while true do
								while true do
									loc_4 = rt_sub_i32(loc_4, 8)
									loc_3 = rt_sub_i32(loc_3, 8)
									rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
									if loc_3 ~= loc_5 then
										continue
									end
									break
								end
								if desired then
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 80)
								reg_0 = rt_load_i32(memory_at_0, loc_0 + 72)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_5
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 80, loc_2)
						rt_store_i32(memory_at_0, loc_0 + 76, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 72, loc_4)
						if loc_5 == 0 then
							break
						end
						FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 76, loc_1)
					reg_0 = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = reg_0
				reg_0 = loc_4
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_6)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[95] = --[[ Luau::BytecodeBuilder::patchSkipC(unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		loc_2 = rt_add_i32(bit_xor(loc_1, 4294967295), loc_2)
		if loc_2 <= 255 then
			while true do
				loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), rt_shl_i32(loc_1, 2))
				rt_store_i32(memory_at_0, loc_1, bit_or(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_2, 24)))
				break
			end
		end
		reg_0 = (if loc_2 < 256 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[96] = --[[ Luau::BytecodeBuilder::setFunctionTypeInfo(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 12), 72))
		loc_0 = rt_add_i32(loc_2, 60)
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_2 + 71), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0), bit_and(rt_load_i32(memory_at_0, loc_0 + 8), 2147483647))
				break
			end
		end
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_1 + 11, 0)
		rt_store_i32_n8(memory_at_0, loc_1, 0)
		break
	end
end
FUNC_LIST[97] = --[[ Luau::BytecodeBuilder::pushLocalTypeInfo(LuauBytecodeType, unsigned char, unsigned int, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 352)
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 356)
		if loc_5 < loc_9 then
			while true do
				rt_store_i32(memory_at_0, loc_5 + 12, loc_4)
				rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
				rt_store_i32_n8(memory_at_0, loc_5 + 4, loc_2)
				rt_store_i32(memory_at_0, loc_5, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 352, rt_add_i32(loc_5, 16))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_8 = rt_add_i32(loc_0, 348)
			loc_7 = rt_load_i32(memory_at_0, loc_8)
			loc_11 = rt_shr_i32(rt_sub_i32(loc_5, loc_7), 4)
			loc_6 = rt_add_i32(loc_11, 1)
			if loc_6 < 268435456 then
				while true do
					loc_8 = rt_sub_i32(loc_9, loc_7)
					loc_10 = rt_shr_i32(loc_8, 3)
					loc_8 = (if loc_8 >= 2147483632 then 268435455 else (if loc_6 < loc_10 then loc_10 else loc_6))
					if loc_8 ~= 0 then
						while true do
							if loc_8 >= 268435456 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_8, 4))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_10 = reg_0
					loc_6 = rt_add_i32(loc_10, rt_shl_i32(loc_11, 4))
					rt_store_i32(memory_at_0, loc_6 + 12, loc_4)
					rt_store_i32(memory_at_0, loc_6 + 8, loc_3)
					rt_store_i32_n8(memory_at_0, loc_6 + 4, loc_2)
					rt_store_i32(memory_at_0, loc_6, loc_1)
					loc_3 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_10)
					loc_4 = rt_add_i32(loc_6, 16)
					if loc_5 ~= loc_7 then
						while true do
							while true do
								loc_6 = rt_sub_i32(loc_6, 16)
								loc_5 = rt_sub_i32(loc_5, 16)
								rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
								rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
								if loc_5 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_9 = rt_load_i32(memory_at_0, loc_0 + 356)
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 348)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_7
							break
						end
						if desired then
							break
						end
					end
					loc_7 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 356, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 352, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 348, loc_6)
					if loc_7 ~= 0 then
						while true do
							FUNC_LIST[653](loc_7, rt_sub_i32(loc_9, loc_7))
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 352, loc_4)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_8)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[98] = --[[ Luau::BytecodeBuilder::pushUpvalTypeInfo(LuauBytecodeType) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 364)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 368)
		if loc_4 < loc_2 then
			while true do
				rt_store_i32(memory_at_0, loc_4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 364, rt_add_i32(loc_4, 4))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_6 = rt_add_i32(loc_0, 360)
			loc_5 = rt_load_i32(memory_at_0, loc_6)
			loc_8 = rt_shr_i32(rt_sub_i32(loc_4, loc_5), 2)
			loc_3 = rt_add_i32(loc_8, 1)
			if loc_3 < 1073741824 then
				while true do
					loc_7 = rt_sub_i32(loc_2, loc_5)
					loc_2 = rt_shr_i32(loc_7, 1)
					loc_3 = (if loc_7 >= 2147483644 then 1073741823 else (if loc_2 > loc_3 then loc_2 else loc_3))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_3, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					loc_2 = rt_add_i32(loc_6, rt_shl_i32(loc_8, 2))
					rt_store_i32(memory_at_0, loc_2, loc_1)
					loc_3 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_6)
					loc_1 = rt_add_i32(loc_2, 4)
					if loc_4 ~= loc_5 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 4)
								loc_4 = rt_sub_i32(loc_4, 4)
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_4))
								if loc_4 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 368, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 364, loc_1)
					rt_store_i32(memory_at_0, loc_0 + 360, loc_2)
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[653](loc_5, loc_7)
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 364, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_6)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[99] = --[[ Luau::BytecodeBuilder::addUserdataType(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = rt_add_i32(loc_2, 24)
		rt_store_i32_n8(memory_at_0, loc_3, 0)
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 8, rt_i64_ZERO)
		reg_0 = FUNC_LIST[718](rt_add_i32(loc_2, 8), loc_1)
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 376)
			if loc_1 < rt_load_i32(memory_at_0, loc_0 + 380) then
				while true do
					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2 + 8))
					rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_2 + 16))
					rt_store_i32_n8(memory_at_0, loc_1 + 16, rt_load_i32_u8(memory_at_0, loc_2 + 24))
					rt_store_i32(memory_at_0, loc_1 + 12, rt_load_i32(memory_at_0, loc_2 + 20))
					loc_1 = rt_add_i32(loc_1, 20)
					rt_store_i32(memory_at_0, loc_0 + 376, loc_1)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 372)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[100](rt_add_i32(loc_0, 372), rt_add_i32(loc_2, 8))
			loc_1 = reg_0
			loc_3 = rt_load_i32_i8(memory_at_0, loc_2 + 19)
			rt_store_i32(memory_at_0, loc_0 + 376, loc_1)
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 372)
			if rt_ge_i32(loc_3, 0) then
				break
			end
			FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2 + 8), bit_and(rt_load_i32(memory_at_0, loc_2 + 16), 2147483647))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 32)
		reg_0 = rt_sub_i32(rt_div_i32(rt_sub_i32(loc_1, loc_0), 20), 1)
		break
	end
	return reg_0
end
FUNC_LIST[100] = --[[ Luau::BytecodeBuilder::UserdataType* std::__2::vector<Luau::BytecodeBuilder::UserdataType, std::__2::allocator<Luau::BytecodeBuilder::UserdataType>>::__push_back_slow_path<Luau::BytecodeBuilder::UserdataType>(Luau::BytecodeBuilder::UserdataType&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0)
			loc_5 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_3), 20)
			loc_2 = rt_add_i32(loc_5, 1)
			if loc_2 < 214748365 then
				while true do
					loc_3 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_3), 20)
					loc_6 = rt_shl_i32(loc_3, 1)
					loc_3 = (if loc_3 >= 107374182 then 214748364 else (if loc_2 < loc_6 then loc_6 else loc_2))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 214748365 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_3, 20))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_4
							break
						end
						if desired then
							break
						end
					end
					loc_4 = reg_0
					loc_2 = rt_add_i32(loc_4, rt_mul_i32(loc_5, 20))
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					loc_5 = rt_add_i32(loc_1, 8)
					rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_5))
					rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
					rt_store_i32(memory_at_0, loc_1 + 8, 0)
					rt_store_i32_n8(memory_at_0, loc_2 + 16, rt_load_i32_u8(memory_at_0, loc_1 + 16))
					rt_store_i32(memory_at_0, loc_2 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
					loc_8 = rt_add_i32(rt_mul_i32(loc_3, 20), loc_4)
					loc_7 = rt_add_i32(loc_2, 20)
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_5 = rt_load_i32(memory_at_0, loc_0)
						if loc_1 == loc_5 then
							while true do
								loc_3 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_3 = rt_sub_i32(loc_2, 20)
							loc_4 = rt_sub_i32(loc_1, 20)
							rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4))
							loc_6 = rt_add_i32(loc_4, 8)
							rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_6))
							rt_store_i64(memory_at_0, loc_4, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_4 + 8, 0)
							loc_2 = rt_sub_i32(loc_2, 8)
							loc_1 = rt_sub_i32(loc_1, 8)
							rt_store_i32_n8(memory_at_0, loc_2 + 4, rt_load_i32_u8(memory_at_0, loc_1 + 4))
							rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
							loc_2 = loc_3
							loc_1 = loc_4
							if loc_5 ~= loc_1 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_5 = rt_load_i32(memory_at_0, loc_0)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_7)
					rt_store_i32(memory_at_0, loc_0, loc_3)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_8)
					if loc_1 ~= loc_5 then
						while true do
							while true do
								loc_4 = rt_sub_i32(loc_1, 20)
								if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_1, 9)), 0) then
									while true do
										FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12)), 2147483647))
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_1 = loc_4
								if loc_5 ~= loc_1 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[653](loc_5, rt_sub_i32(loc_2, loc_5))
							break
						end
						if desired then
							break
						end
					end
					reg_0 = loc_7
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[101] = --[[ Luau::BytecodeBuilder::useUserdataType(unsigned int) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32_n8(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 372), rt_mul_i32(loc_1, 20)) + 16, 1)
		break
	end
end
FUNC_LIST[102] = --[[ Luau::BytecodeBuilder::setDebugFunctionName(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		loc_5 = rt_load_i64(memory_at_0, loc_1)
		rt_store_i64(memory_at_0, loc_2, loc_5)
		rt_store_i64(memory_at_0, loc_2 + 24, loc_5)
		reg_0 = FUNC_LIST[72](loc_0, loc_2)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 12), 72)) + 16, loc_1)
		while true do
			if bit_or(rt_load_i32(memory_at_0, loc_0 + 500), bit_and(rt_load_i32(memory_at_0, loc_0 + 504), 1)) ~= 0 then
				while true do
					if rt_ge_u64(loc_5, rt_i64_from_u32(0, 2147483640)) then
						desired = 1
						break
					end
					loc_6 = rt_shr_u64(loc_5, rt_i64_from_u32(32, 0))
					loc_1 = rt_wrap_i32_i64(loc_6)
					while true do
						while true do
							if rt_ge_u64(loc_5, rt_i64_from_u32(0, 11)) then
								while true do
									loc_4 = rt_add_i32(bit_or(loc_1, 7), 1)
									reg_0 = FUNC_LIST[646](loc_4)
									loc_3 = reg_0
									rt_store_i32(memory_at_0, loc_2 + 20, bit_or(loc_4, 2147483648))
									rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
									rt_store_i32(memory_at_0, loc_2 + 16, loc_1)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							rt_store_i64_n8(memory_at_0, loc_2 + 23, loc_6)
							loc_3 = rt_add_i32(loc_2, 12)
							if rt_lt_u64(loc_5, rt_i64_from_u32(0, 1)) then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[518](loc_3, rt_wrap_i32_i64(loc_5), loc_1)
						break
					end
					if desired then
						break
					end
					rt_store_i32_n8(memory_at_0, rt_add_i32(loc_1, loc_3), 0)
					loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 12), 72))
					loc_0 = rt_add_i32(loc_1, 36)
					if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 47), 0) then
						while true do
							FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0), bit_and(rt_load_i32(memory_at_0, loc_0 + 8), 2147483647))
							break
						end
						if desired then
							break
						end
					end
					rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_2 + 12))
					rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_2 + 20))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_2, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[276](rt_add_i32(loc_2, 12))
		error("out of code bounds")
	end
end
FUNC_LIST[103] = --[[ Luau::BytecodeBuilder::setDebugFunctionLineDefined(int) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 12), 72)) + 20, loc_1)
		break
	end
end
FUNC_LIST[104] = --[[ Luau::BytecodeBuilder::setDebugLine(int) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_0 + 320, loc_1)
		break
	end
end
FUNC_LIST[105] = --[[ Luau::BytecodeBuilder::pushDebugLocal(Luau::BytecodeBuilder::StringRef, unsigned char, unsigned int, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		loc_13 = rt_load_i64(memory_at_0, loc_1)
		rt_store_i64(memory_at_0, loc_8, loc_13)
		rt_store_i64(memory_at_0, loc_8 + 8, loc_13)
		reg_0 = FUNC_LIST[72](loc_0, loc_8)
		loc_11 = reg_0
		while true do
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 328)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 332)
					if loc_1 < loc_9 then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 12, loc_4)
							rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
							rt_store_i32_n8(memory_at_0, loc_1 + 4, loc_2)
							rt_store_i32(memory_at_0, loc_1, loc_11)
							loc_4 = rt_add_i32(loc_1, 16)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_add_i32(loc_0, 324)
					loc_6 = rt_load_i32(memory_at_0, loc_7)
					loc_12 = rt_shr_i32(rt_sub_i32(loc_1, loc_6), 4)
					loc_5 = rt_add_i32(loc_12, 1)
					if loc_5 >= 268435456 then
						desired = 2
						break
					end
					loc_7 = rt_sub_i32(loc_9, loc_6)
					loc_10 = rt_shr_i32(loc_7, 3)
					loc_7 = (if loc_7 >= 2147483632 then 268435455 else (if loc_5 < loc_10 then loc_10 else loc_5))
					if loc_7 ~= 0 then
						while true do
							if loc_7 >= 268435456 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_7, 4))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_10 = reg_0
					loc_5 = rt_add_i32(loc_10, rt_shl_i32(loc_12, 4))
					rt_store_i32(memory_at_0, loc_5 + 12, loc_4)
					rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
					rt_store_i32_n8(memory_at_0, loc_5 + 4, loc_2)
					rt_store_i32(memory_at_0, loc_5, loc_11)
					loc_3 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_10)
					loc_4 = rt_add_i32(loc_5, 16)
					if loc_1 ~= loc_6 then
						while true do
							while true do
								loc_5 = rt_sub_i32(loc_5, 16)
								loc_1 = rt_sub_i32(loc_1, 16)
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_1))
								rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
								if loc_1 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_9 = rt_load_i32(memory_at_0, loc_0 + 332)
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 324)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 332, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 328, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 324, loc_5)
					if loc_6 == 0 then
						break
					end
					FUNC_LIST[653](loc_6, rt_sub_i32(loc_9, loc_6))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 328, loc_4)
				GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_7)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[106] = --[[ Luau::BytecodeBuilder::pushDebugUpval(Luau::BytecodeBuilder::StringRef) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_10 = rt_load_i64(memory_at_0, loc_1)
		rt_store_i64(memory_at_0, loc_6, loc_10)
		rt_store_i64(memory_at_0, loc_6 + 8, loc_10)
		reg_0 = FUNC_LIST[72](loc_0, loc_6)
		loc_4 = reg_0
		while true do
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 340)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 344)
					if loc_1 < loc_2 then
						while true do
							rt_store_i32(memory_at_0, loc_1, loc_4)
							loc_4 = rt_add_i32(loc_1, 4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_add_i32(loc_0, 336)
					loc_5 = rt_load_i32(memory_at_0, loc_7)
					loc_9 = rt_shr_i32(rt_sub_i32(loc_1, loc_5), 2)
					loc_3 = rt_add_i32(loc_9, 1)
					if loc_3 >= 1073741824 then
						desired = 2
						break
					end
					loc_8 = rt_sub_i32(loc_2, loc_5)
					loc_2 = rt_shr_i32(loc_8, 1)
					loc_3 = (if loc_8 >= 2147483644 then 1073741823 else (if loc_2 > loc_3 then loc_2 else loc_3))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_3, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = reg_0
					loc_2 = rt_add_i32(loc_7, rt_shl_i32(loc_9, 2))
					rt_store_i32(memory_at_0, loc_2, loc_4)
					loc_3 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_7)
					loc_4 = rt_add_i32(loc_2, 4)
					if loc_1 ~= loc_5 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 4)
								loc_1 = rt_sub_i32(loc_1, 4)
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
								if loc_1 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 344, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 340, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 336, loc_2)
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[653](loc_5, loc_8)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 340, loc_4)
				GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_7)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[107] = --[[ Luau::BytecodeBuilder::addDebugRemark(char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			while true do
				while true do
					if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 460), 16) ~= 0 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 436)
							loc_3 = rt_load_i32_i8(memory_at_0, loc_0 + 443)
							rt_store_i32(memory_at_0, loc_8 + 12, loc_2)
							loc_5 = rt_add_i32(loc_0, 432)
							FUNC_LIST[512](loc_5, loc_1, loc_2)
							FUNC_LIST[726](loc_5, 0)
							loc_6 = (if rt_lt_i32(loc_3, 0) then loc_6 else loc_3)
							loc_7 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_load_i32(memory_at_0, loc_0 + 24)), 2)
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 424)
								loc_9 = rt_load_i32(memory_at_0, loc_0 + 428)
								if loc_2 < loc_9 then
									while true do
										rt_store_i32(memory_at_0, loc_2 + 4, loc_6)
										rt_store_i32(memory_at_0, loc_2, loc_7)
										loc_7 = rt_add_i32(loc_2, 8)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_4 = rt_add_i32(loc_0, 420)
								loc_3 = rt_load_i32(memory_at_0, loc_4)
								loc_11 = rt_shr_i32(rt_sub_i32(loc_2, loc_3), 3)
								loc_1 = rt_add_i32(loc_11, 1)
								if loc_1 >= 536870912 then
									desired = 3
									break
								end
								loc_4 = rt_sub_i32(loc_9, loc_3)
								loc_10 = rt_shr_i32(loc_4, 2)
								loc_4 = (if loc_4 >= 2147483640 then 536870911 else (if loc_1 < loc_10 then loc_10 else loc_1))
								if loc_4 ~= 0 then
									while true do
										if loc_4 >= 536870912 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 3))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_10 = reg_0
								loc_1 = rt_add_i32(loc_10, rt_shl_i32(loc_11, 3))
								rt_store_i32(memory_at_0, loc_1 + 4, loc_6)
								rt_store_i32(memory_at_0, loc_1, loc_7)
								loc_4 = rt_add_i32(rt_shl_i32(loc_4, 3), loc_10)
								loc_7 = rt_add_i32(loc_1, 8)
								if loc_2 ~= loc_3 then
									while true do
										while true do
											loc_1 = rt_sub_i32(loc_1, 8)
											loc_2 = rt_sub_i32(loc_2, 8)
											rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
											if loc_2 ~= loc_3 then
												continue
											end
											break
										end
										if desired then
											break
										end
										loc_9 = rt_load_i32(memory_at_0, loc_0 + 428)
										reg_0 = rt_load_i32(memory_at_0, loc_0 + 420)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_3
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_3 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 428, loc_4)
								rt_store_i32(memory_at_0, loc_0 + 424, loc_7)
								rt_store_i32(memory_at_0, loc_0 + 420, loc_1)
								if loc_3 == 0 then
									break
								end
								FUNC_LIST[653](loc_3, rt_sub_i32(loc_9, loc_3))
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 424, loc_7)
							loc_3 = rt_add_i32(loc_6, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 443), 0) then rt_load_i32(memory_at_0, loc_0 + 432) else loc_5))
							rt_store_i32(memory_at_0, loc_8 + 8, loc_3)
							loc_1 = rt_add_i32(loc_0, 320)
							reg_0 = loc_0
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 480)
								if loc_2 < rt_load_i32(memory_at_0, loc_0 + 484) then
									while true do
										rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
										loc_5 = rt_add_i32(loc_2, 4)
										reg_1 = FUNC_LIST[544](loc_3)
										loc_1 = reg_1
										if loc_1 >= 2147483640 then
											desired = 1
											break
										end
										while true do
											while true do
												if loc_1 >= 11 then
													while true do
														loc_6 = rt_add_i32(bit_or(loc_1, 7), 1)
														reg_1 = FUNC_LIST[646](loc_6)
														loc_5 = reg_1
														rt_store_i32(memory_at_0, loc_2 + 12, bit_or(loc_6, 2147483648))
														rt_store_i32(memory_at_0, loc_2 + 4, loc_5)
														rt_store_i32(memory_at_0, loc_2 + 8, loc_1)
														desired = 8
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												end
												rt_store_i32_n8(memory_at_0, loc_2 + 15, loc_1)
												if loc_1 == 0 then
													desired = 7
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											reg_1 = FUNC_LIST[518](loc_5, loc_3, loc_1)
											break
										end
										if desired then
											break
										end
										rt_store_i32_n8(memory_at_0, rt_add_i32(loc_1, loc_5), 0)
										reg_1 = rt_add_i32(loc_2, 16)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_1 = FUNC_LIST[108](rt_add_i32(loc_0, 476), loc_1, rt_add_i32(loc_8, 8))
								break
							end
							if desired then
								break
							end
							loc_2 = reg_1
							rt_store_i32(memory_at_0, reg_0 + 480, loc_2)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_4)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[276](loc_5)
		error("out of code bounds")
	end
end
FUNC_LIST[108] = --[[ std::__2::pair<int, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>* std::__2::vector<std::__2::pair<int, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, std::__2::allocator<std::__2::pair<int, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>>>::__emplace_back_slow_path<int&, char const*>(int&, char const*&&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_4), 4)
				loc_3 = rt_add_i32(loc_6, 1)
				if loc_3 < 268435456 then
					while true do
						loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_4)
						loc_5 = rt_shr_i32(loc_4, 3)
						loc_5 = (if loc_4 >= 2147483632 then 268435455 else (if loc_3 < loc_5 then loc_5 else loc_3))
						if loc_5 ~= 0 then
							while true do
								if loc_5 >= 268435456 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 4))
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								break
							end
						end
						loc_7 = reg_0
						loc_4 = rt_add_i32(loc_7, rt_shl_i32(loc_6, 4))
						rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_1))
						loc_1 = rt_add_i32(loc_4, 4)
						loc_2 = rt_load_i32(memory_at_0, loc_2)
						reg_0 = FUNC_LIST[544](loc_2)
						loc_3 = reg_0
						if loc_3 >= 2147483640 then
							desired = 1
							break
						end
						loc_5 = rt_shl_i32(loc_5, 4)
						while true do
							while true do
								if loc_3 >= 11 then
									while true do
										loc_6 = rt_add_i32(bit_or(loc_3, 7), 1)
										reg_0 = FUNC_LIST[646](loc_6)
										loc_1 = reg_0
										rt_store_i32(memory_at_0, loc_4 + 12, bit_or(loc_6, 2147483648))
										rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
										rt_store_i32(memory_at_0, loc_4 + 8, loc_3)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32_n8(memory_at_0, loc_4 + 15, loc_3)
								if loc_3 == 0 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[518](loc_1, loc_2, loc_3)
							break
						end
						if desired then
							break
						end
						loc_8 = rt_add_i32(loc_5, loc_7)
						rt_store_i32_n8(memory_at_0, rt_add_i32(loc_1, loc_3), 0)
						loc_6 = rt_add_i32(loc_4, 16)
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
							loc_5 = rt_load_i32(memory_at_0, loc_0)
							if loc_3 == loc_5 then
								while true do
									loc_7 = loc_4
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							while true do
								loc_7 = rt_sub_i32(loc_4, 16)
								loc_1 = rt_sub_i32(loc_3, 16)
								rt_store_i32(memory_at_0, loc_7, rt_load_i32(memory_at_0, loc_1))
								loc_4 = rt_sub_i32(loc_4, 12)
								loc_3 = rt_sub_i32(loc_3, 12)
								loc_9 = loc_3
								loc_2 = rt_add_i32(loc_9, 8)
								rt_store_i32(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
								rt_store_i32(memory_at_0, loc_9 + 8, 0)
								loc_4 = loc_7
								loc_3 = loc_1
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
							loc_5 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
						rt_store_i32(memory_at_0, loc_0, loc_7)
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
						rt_store_i32(memory_at_0, loc_0 + 8, loc_8)
						if loc_3 ~= loc_5 then
							while true do
								while true do
									if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_3, 1)), 0) then
										while true do
											FUNC_LIST[653](rt_load_i32(memory_at_0, rt_sub_i32(loc_3, 12)), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_3, 4)), 2147483647))
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_3 = rt_sub_i32(loc_3, 16)
									if loc_3 ~= loc_5 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								break
							end
						end
						if loc_5 ~= 0 then
							while true do
								FUNC_LIST[653](loc_5, rt_sub_i32(loc_4, loc_5))
								break
							end
							if desired then
								break
							end
						end
						reg_0 = loc_6
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[44](loc_0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[276](loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[109] = --[[ Luau::BytecodeBuilder::finalize() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 372)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 376)
		if loc_1 ~= loc_2 then
			while true do
				while true do
					if rt_load_i32_u8(memory_at_0, loc_1 + 16) == 1 then
						while true do
							loc_3 = rt_load_i32_i8(memory_at_0, loc_1 + 11)
							loc_5 = (if rt_lt_i32(loc_3, 0) then 1 else 0)
							rt_store_i32(memory_at_0, loc_4 + 20, (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_1) else loc_1))
							rt_store_i32(memory_at_0, loc_4 + 24, (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_1 + 4) else loc_3))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_4 + 20))
							reg_1 = FUNC_LIST[72](loc_0, rt_add_i32(loc_4, 8))
							rt_store_i32(memory_at_0, loc_1 + 12, reg_1)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = rt_add_i32(loc_1, 20)
					if loc_2 ~= loc_1 then
						continue
					end
					break
				end
				break
			end
		end
		while true do
			while true do
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 388)
					if loc_3 == 0 then
						while true do
							loc_1 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 400)
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 396)
					loc_8 = rt_load_i32(memory_at_0, loc_0 + 384)
					loc_1 = 0
					while true do
						while true do
							while true do
								loc_6 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_8)
								loc_2 = rt_load_i32(memory_at_0, loc_6)
								if loc_2 == 0 then
									break
								end
								if loc_5 == 0 then
									break
								end
								if loc_7 ~= rt_load_i32(memory_at_0, loc_6 + 4) then
									desired = 3
									break
								end
								reg_0 = FUNC_LIST[575](loc_2, loc_5, loc_7)
								if reg_0 ~= 0 then
									desired = 3
									break
								end
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_2 ~= loc_5 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_3 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_1 == loc_3 then
					break
				end
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 400)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 396)
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 384)
				loc_2 = 16
				while true do
					loc_2 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_1, 12), loc_7) + 4), loc_2), 2)
					while true do
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_3 <= loc_1 then
							break
						end
						while true do
							while true do
								while true do
									loc_8 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_7)
									loc_5 = rt_load_i32(memory_at_0, loc_8)
									if loc_5 == 0 then
										break
									end
									if loc_6 == 0 then
										break
									end
									if loc_9 ~= rt_load_i32(memory_at_0, loc_8 + 4) then
										desired = 4
										break
									end
									reg_0 = FUNC_LIST[575](loc_5, loc_6, loc_9)
									if reg_0 == 0 then
										desired = 6
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_5 ~= loc_6 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_1 = rt_add_i32(loc_1, 1)
							if loc_3 ~= loc_1 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if loc_1 ~= loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 16
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 4)
		if loc_1 ~= loc_5 then
			while true do
				while true do
					loc_3 = rt_load_i32_i8(memory_at_0, loc_1 + 11)
					loc_2 = rt_add_i32(loc_2, (if rt_lt_i32(loc_3, 0) then rt_load_i32(memory_at_0, loc_1 + 4) else loc_3))
					loc_1 = rt_add_i32(loc_1, 72)
					if loc_5 ~= loc_1 then
						continue
					end
					break
				end
				break
			end
		end
		loc_3 = rt_add_i32(loc_0, 448)
		FUNC_LIST[719](loc_3, loc_2)
		reg_0 = FUNC_LIST[715](loc_3, 6)
		rt_store_i32_n8(memory_at_0, loc_4 + 31, 3)
		reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 31), 1)
		FUNC_LIST[110](loc_0, loc_3)
		if rt_load_i32(memory_at_0, loc_0 + 376) ~= rt_load_i32(memory_at_0, loc_0 + 372) then
			while true do
				loc_1 = 0
				while true do
					loc_5 = rt_add_i32(loc_1, 1)
					rt_store_i32_n8(memory_at_0, loc_4 + 31, loc_5)
					reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 31), 1)
					loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 372), rt_mul_i32(loc_1, 20)) + 12)
					while true do
						loc_2 = (if loc_1 > 127 then 1 else 0)
						rt_store_i32_n8(memory_at_0, loc_4 + 31, bit_or(bit_and(loc_1, 127), rt_shl_i32(loc_2, 7)))
						reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 31), 1)
						loc_1 = rt_shr_u32(loc_1, 7)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_1 = loc_5
					if loc_1 < rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 376), rt_load_i32(memory_at_0, loc_0 + 372)), 20) then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32_n8(memory_at_0, loc_4 + 31, 0)
		reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 31), 1)
		loc_1 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32(memory_at_0, loc_0)), 72)
		while true do
			loc_2 = (if loc_1 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 31, bit_or(bit_and(loc_1, 127), rt_shl_i32(loc_2, 7)))
			reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 31), 1)
			loc_1 = rt_shr_u32(loc_1, 7)
			if loc_2 ~= 0 then
				continue
			end
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
		if loc_1 ~= loc_6 then
			while true do
				while true do
					loc_2 = rt_load_i32_i8(memory_at_0, loc_1 + 11)
					loc_5 = (if rt_lt_i32(loc_2, 0) then 1 else 0)
					reg_0 = FUNC_LIST[721](loc_3, (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_1) else loc_1), (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_1 + 4) else loc_2))
					loc_1 = rt_add_i32(loc_1, 72)
					if loc_6 ~= loc_1 then
						continue
					end
					break
				end
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			loc_2 = (if loc_1 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 31, bit_or(bit_and(loc_1, 127), rt_shl_i32(loc_2, 7)))
			reg_0 = FUNC_LIST[721](loc_3, rt_add_i32(loc_4, 31), 1)
			loc_1 = rt_shr_u32(loc_1, 7)
			if loc_2 ~= 0 then
				continue
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[110] = --[[ Luau::BytecodeBuilder::writeStringTable(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 392)
		rt_store_i32(memory_at_0, loc_5 + 8, 0)
		rt_store_i64(memory_at_0, loc_5, rt_i64_ZERO)
		while true do
			while true do
				while true do
					while true do
						if loc_3 == 0 then
							while true do
								reg_0 = 0
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_3 >= 536870912 then
							desired = 3
							break
						end
						loc_3 = rt_shl_i32(loc_3, 3)
						reg_0 = FUNC_LIST[646](loc_3)
						loc_6 = reg_0
						reg_0 = FUNC_LIST[519](loc_6, 0, loc_3)
						loc_12 = rt_add_i32(reg_0, loc_3)
						reg_0 = loc_12
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_10 = reg_0
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 388)
					if loc_3 == 0 then
						desired = 2
						break
					end
					loc_8 = rt_load_i32(memory_at_0, loc_0 + 400)
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 396)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 384)
					while true do
						while true do
							while true do
								loc_11 = rt_add_i32(rt_mul_i32(loc_2, 12), loc_9)
								loc_4 = rt_load_i32(memory_at_0, loc_11)
								if loc_4 == 0 then
									break
								end
								if loc_7 == 0 then
									break
								end
								if loc_8 ~= rt_load_i32(memory_at_0, loc_11 + 4) then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[575](loc_4, loc_7, loc_8)
								if reg_0 == 0 then
									desired = 5
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_4 ~= loc_7 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_3 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == loc_3 then
				break
			end
			loc_13 = rt_sub_i32(loc_6, 8)
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 400)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 396)
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 384)
			while true do
				loc_4 = rt_add_i32(rt_mul_i32(loc_2, 12), loc_9)
				rt_store_i64(memory_at_0, rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_4 + 8), 3), loc_13), rt_load_i64(memory_at_0, loc_4))
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_3 <= loc_2 then
						break
					end
					while true do
						while true do
							while true do
								loc_11 = rt_add_i32(rt_mul_i32(loc_2, 12), loc_9)
								loc_4 = rt_load_i32(memory_at_0, loc_11)
								if loc_4 == 0 then
									break
								end
								if loc_7 == 0 then
									break
								end
								if loc_8 ~= rt_load_i32(memory_at_0, loc_11 + 4) then
									desired = 3
									break
								end
								reg_0 = FUNC_LIST[575](loc_4, loc_7, loc_8)
								if reg_0 == 0 then
									desired = 5
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_4 ~= loc_7 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_3 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_2 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_2 = rt_shr_i32(rt_sub_i32(loc_10, loc_6), 3)
		while true do
			loc_3 = (if loc_2 > 127 then 1 else 0)
			rt_store_i32_n8(memory_at_0, loc_5 + 14, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
			reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_5, 14), 1)
			loc_2 = rt_shr_u32(loc_2, 7)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		if loc_6 ~= loc_10 then
			while true do
				loc_4 = loc_6
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
					while true do
						loc_3 = (if loc_2 > 127 then 1 else 0)
						rt_store_i32_n8(memory_at_0, loc_5 + 15, bit_or(bit_and(loc_2, 127), rt_shl_i32(loc_3, 7)))
						reg_0 = FUNC_LIST[721](loc_1, rt_add_i32(loc_5, 15), 1)
						loc_2 = rt_shr_u32(loc_2, 7)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					reg_0 = FUNC_LIST[721](loc_1, rt_load_i32(memory_at_0, loc_4), rt_load_i32(memory_at_0, loc_4 + 4))
					loc_4 = rt_add_i32(loc_4, 8)
					if loc_10 ~= loc_4 then
						continue
					end
					break
				end
				break
			end
		end
		if loc_6 ~= 0 then
			while true do
				FUNC_LIST[653](loc_6, rt_sub_i32(loc_12, loc_6))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[111] = --[[ std::__2::vector<int, std::__2::allocator<int>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
		if rt_shr_i32(rt_sub_i32(loc_2, loc_3), 2) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_2 = rt_shl_i32(loc_1, 2)
						reg_1 = FUNC_LIST[519](loc_3, 0, loc_2)
						reg_1 = rt_add_i32(reg_1, loc_2)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_3
						break
					end
					if desired then
						break
					end
				end
				loc_3 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 4, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_0)
			loc_8 = rt_shr_i32(rt_sub_i32(loc_3, loc_5), 2)
			loc_4 = rt_add_i32(loc_1, loc_8)
			if loc_4 < 1073741824 then
				while true do
					loc_7 = rt_sub_i32(loc_2, loc_5)
					loc_2 = rt_shr_i32(loc_7, 1)
					loc_4 = (if loc_7 >= 2147483644 then 1073741823 else (if loc_2 > loc_4 then loc_2 else loc_4))
					if loc_4 ~= 0 then
						while true do
							if loc_4 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					loc_2 = rt_add_i32(loc_6, rt_shl_i32(loc_8, 2))
					loc_1 = rt_shl_i32(loc_1, 2)
					reg_0 = FUNC_LIST[519](loc_2, 0, loc_1)
					loc_1 = rt_add_i32(reg_0, loc_1)
					loc_6 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
					if loc_3 ~= loc_5 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 4)
								loc_3 = rt_sub_i32(loc_3, 4)
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_2)
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[653](loc_5, loc_7)
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[112] = --[[ Luau::BytecodeBuilder::getImportId(int) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_or(rt_shl_i32(loc_0, 20), 1073741824)
		break
	end
	return reg_0
end
FUNC_LIST[113] = --[[ Luau::BytecodeBuilder::getImportId(int, int) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = bit_or(bit_or(rt_shl_i32(loc_0, 20), rt_shl_i32(loc_1, 10)), 2147483648)
		break
	end
	return reg_0
end
FUNC_LIST[114] = --[[ Luau::BytecodeBuilder::getImportId(int, int, int) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = bit_or(bit_or(loc_2, bit_or(rt_shl_i32(loc_0, 20), rt_shl_i32(loc_1, 10))), 3221225472)
		break
	end
	return reg_0
end
FUNC_LIST[115] = --[[ Luau::BytecodeBuilder::getStringHash(Luau::BytecodeBuilder::StringRef) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
		if loc_1 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0), 1)
		loc_2 = loc_1
		loc_0 = loc_1
		if bit_and(loc_1, 1) ~= 0 then
			while true do
				loc_2 = rt_sub_i32(loc_1, 1)
				reg_0 = bit_xor(loc_1, rt_add_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_3)), rt_add_i32(rt_shl_i32(loc_1, 5), rt_shr_u32(loc_1, 2))))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		if loc_1 ~= 1 then
			while true do
				loc_1 = rt_sub_i32(loc_3, 1)
				while true do
					loc_0 = bit_xor(loc_0, rt_add_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3)), rt_add_i32(rt_shl_i32(loc_0, 5), rt_shr_u32(loc_0, 2))))
					loc_0 = bit_xor(rt_add_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)), rt_add_i32(rt_shl_i32(loc_0, 5), rt_shr_u32(loc_0, 2))), loc_0)
					loc_2 = rt_sub_i32(loc_2, 2)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[116] = --[[ Luau::BytecodeBuilder::foldJumps() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			if rt_load_i32_u8(memory_at_0, loc_0 + 96) ~= 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 72)
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 76)
			if loc_2 == loc_8 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 24)
			while true do
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_2)
					loc_9 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_3)
					loc_5 = rt_load_i32(memory_at_0, loc_9)
					loc_0 = rt_add_i32(rt_add_i32(loc_4, rt_shr_i32(loc_5, 16)), 1)
					loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_0, 2), loc_3))
					loc_6 = bit_and(loc_1, 255)
					if loc_6 ~= 23 then
						break
					end
					loc_7 = rt_shr_i32(loc_1, 16)
					if rt_lt_i32(loc_7, 0) then
						break
					end
					while true do
						loc_0 = rt_add_i32(rt_add_i32(loc_0, loc_7), 1)
						loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_0, 2), loc_3))
						loc_6 = bit_and(loc_1, 255)
						if loc_6 ~= 23 then
							desired = 3
							break
						end
						loc_7 = rt_shr_i32(loc_1, 16)
						if rt_ge_i32(loc_7, 0) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					reg_0 = loc_9
					if bit_and((if bit_and(loc_5, 255) == 23 then 1 else 0), (if loc_6 == 22 then 1 else 0)) ~= 0 then
						while true do
							reg_1 = loc_1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							loc_1 = rt_add_i32(bit_xor(loc_4, 4294967295), loc_0)
							if rt_add_i32(loc_1, 32768) > 65535 then
								desired = 3
								break
							end
							reg_1 = bit_or(bit_and(loc_5, 65535), rt_shl_i32(loc_1, 16))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = reg_1
					rt_store_i32(memory_at_0, reg_0, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 4, loc_0)
				loc_2 = rt_add_i32(loc_2, 8)
				if loc_8 ~= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[117] = --[[ Luau::BytecodeBuilder::expandJumps() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if rt_load_i32_u8(memory_at_0, loc_0 + 96) ~= 1 then
										break
									end
									loc_3 = rt_load_i32(memory_at_0, loc_0 + 72)
									loc_4 = rt_load_i32(memory_at_0, loc_0 + 76)
									FUNC_LIST[118](loc_3, loc_4, (if loc_3 ~= loc_4 then rt_sub_i32(62, rt_shl_i32(bit_countlz(rt_shr_i32(rt_sub_i32(loc_4, loc_3), 3)), 1)) else 0), 1)
									loc_12 = rt_load_i32(memory_at_0, loc_0 + 24)
									loc_15 = rt_load_i32(memory_at_0, loc_0 + 28)
									rt_store_i32(memory_at_0, loc_1 + 44, 0)
									rt_store_i64(memory_at_0, loc_1 + 36, rt_i64_ZERO)
									loc_2 = rt_sub_i32(loc_15, loc_12)
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	if loc_12 == loc_15 then
																		while true do
																			rt_store_i32(memory_at_0, loc_1 + 32, 0)
																			rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
																			rt_store_i32(memory_at_0, loc_1 + 20, 0)
																			rt_store_i64(memory_at_0, loc_1 + 12, rt_i64_ZERO)
																			loc_3 = 0
																			desired = 15
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	if rt_lt_i32(loc_2, 0) then
																		desired = 14
																		break
																	end
																	reg_1 = FUNC_LIST[646](loc_2)
																	loc_16 = reg_1
																	rt_store_i32(memory_at_0, loc_1 + 36, loc_16)
																	loc_18 = rt_add_i32(loc_2, loc_16)
																	rt_store_i32(memory_at_0, loc_1 + 44, loc_18)
																	reg_0 = FUNC_LIST[519](loc_16, 0, loc_2)
																	rt_store_i32(memory_at_0, loc_1 + 40, loc_18)
																	rt_store_i32(memory_at_0, loc_1 + 20, 0)
																	rt_store_i64(memory_at_0, loc_1 + 12, rt_i64_ZERO)
																	reg_1 = FUNC_LIST[646](loc_2)
																	loc_3 = reg_1
																	rt_store_i32(memory_at_0, loc_1 + 28, loc_3)
																	rt_store_i32(memory_at_0, loc_1 + 24, loc_3)
																	loc_10 = rt_add_i32(loc_2, loc_3)
																	rt_store_i32(memory_at_0, loc_1 + 32, loc_10)
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																while true do
																	loc_5 = (if loc_12 == loc_15 then 1 else 0)
																	if loc_5 ~= 0 then
																		while true do
																			loc_4 = 0
																			desired = 15
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	if rt_lt_i32(loc_2, 0) then
																		desired = 13
																		break
																	end
																	reg_1 = FUNC_LIST[646](loc_2)
																	loc_4 = reg_1
																	rt_store_i32(memory_at_0, loc_1 + 16, loc_4)
																	rt_store_i32(memory_at_0, loc_1 + 12, loc_4)
																	loc_11 = rt_add_i32(loc_2, loc_4)
																	rt_store_i32(memory_at_0, loc_1 + 20, loc_11)
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																while true do
																	if loc_5 ~= 0 then
																		while true do
																			loc_7 = loc_4
																			loc_5 = loc_3
																			desired = 15
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_5 = loc_3
																	loc_7 = loc_4
																	while true do
																		loc_8 = rt_shl_i32(loc_14, 2)
																		loc_12 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_8, loc_12))
																		while true do
																			loc_2 = rt_load_i32(memory_at_0, loc_0 + 72)
																			if rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 76), loc_2), 3) <= loc_17 then
																				break
																			end
																			loc_2 = rt_add_i32(rt_shl_i32(loc_17, 3), loc_2)
																			if loc_14 ~= rt_load_i32(memory_at_0, loc_2) then
																				break
																			end
																			while true do
																				loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 4), bit_xor(loc_14, 4294967295))
																				reg_0 = loc_2
																				loc_2 = rt_shr_i32(loc_2, 31)
																				if rt_sub_i32(bit_xor(reg_0, loc_2), loc_2) < 10923 then
																					break
																				end
																				while true do
																					if loc_3 < loc_10 then
																						while true do
																							rt_store_i32(memory_at_0, loc_3, 65559)
																							loc_3 = rt_add_i32(loc_3, 4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_6 = rt_shr_i32(rt_sub_i32(loc_3, loc_5), 2)
																					loc_2 = rt_add_i32(loc_6, 1)
																					if loc_2 >= 1073741824 then
																						desired = 3
																						break
																					end
																					loc_9 = rt_sub_i32(loc_10, loc_5)
																					loc_13 = rt_shr_i32(loc_9, 1)
																					loc_2 = (if loc_9 >= 2147483644 then 1073741823 else (if loc_2 < loc_13 then loc_13 else loc_2))
																					if loc_2 ~= 0 then
																						while true do
																							if loc_2 >= 1073741824 then
																								desired = 6
																								break
																							end
																							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_2, 2))
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					else
																						while true do
																							reg_0 = 0
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_10 = reg_0
																					loc_6 = rt_add_i32(loc_10, rt_shl_i32(loc_6, 2))
																					rt_store_i32(memory_at_0, loc_6, 65559)
																					loc_13 = rt_shl_i32(loc_2, 2)
																					loc_2 = loc_6
																					if loc_3 ~= loc_5 then
																						while true do
																							while true do
																								loc_2 = rt_sub_i32(loc_2, 4)
																								loc_3 = rt_sub_i32(loc_3, 4)
																								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
																								if loc_3 ~= loc_5 then
																									continue
																								end
																								break
																							end
																							if desired then
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_10 = rt_add_i32(loc_10, loc_13)
																					loc_3 = rt_add_i32(loc_6, 4)
																					if loc_5 ~= 0 then
																						while true do
																							FUNC_LIST[653](loc_5, loc_9)
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_5 = loc_2
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				while true do
																					if loc_3 < loc_10 then
																						while true do
																							rt_store_i32(memory_at_0, loc_3, 67)
																							loc_3 = rt_add_i32(loc_3, 4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_6 = rt_shr_i32(rt_sub_i32(loc_3, loc_5), 2)
																					loc_2 = rt_add_i32(loc_6, 1)
																					if loc_2 >= 1073741824 then
																						desired = 3
																						break
																					end
																					loc_9 = rt_sub_i32(loc_10, loc_5)
																					loc_13 = rt_shr_i32(loc_9, 1)
																					loc_2 = (if loc_9 >= 2147483644 then 1073741823 else (if loc_2 < loc_13 then loc_13 else loc_2))
																					if loc_2 ~= 0 then
																						while true do
																							if loc_2 >= 1073741824 then
																								while true do
																									desired = 6
																									break
																								end
																								if desired then
																									break
																								end
																							end
																							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_2, 2))
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					else
																						while true do
																							reg_0 = 0
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_10 = reg_0
																					loc_6 = rt_add_i32(loc_10, rt_shl_i32(loc_6, 2))
																					rt_store_i32(memory_at_0, loc_6, 67)
																					loc_13 = rt_shl_i32(loc_2, 2)
																					loc_2 = loc_6
																					if loc_3 ~= loc_5 then
																						while true do
																							while true do
																								loc_2 = rt_sub_i32(loc_2, 4)
																								loc_3 = rt_sub_i32(loc_3, 4)
																								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
																								if loc_3 ~= loc_5 then
																									continue
																								end
																								break
																							end
																							if desired then
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_10 = rt_add_i32(loc_10, loc_13)
																					loc_3 = rt_add_i32(loc_6, 4)
																					if loc_5 ~= 0 then
																						while true do
																							FUNC_LIST[653](loc_5, loc_9)
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_5 = loc_2
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_6 = rt_load_i32(memory_at_0, loc_0 + 36)
																				loc_2 = rt_add_i32(loc_8, loc_6)
																				while true do
																					if loc_4 < loc_11 then
																						while true do
																							rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_2))
																							loc_4 = rt_add_i32(loc_4, 4)
																							desired = 19
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_13 = rt_shr_i32(rt_sub_i32(loc_4, loc_7), 2)
																					loc_9 = rt_add_i32(loc_13, 1)
																					if loc_9 >= 1073741824 then
																						desired = 5
																						break
																					end
																					loc_15 = rt_sub_i32(loc_11, loc_7)
																					loc_19 = rt_shr_i32(loc_15, 1)
																					loc_9 = (if loc_15 >= 2147483644 then 1073741823 else (if loc_9 < loc_19 then loc_19 else loc_9))
																					if loc_9 ~= 0 then
																						while true do
																							if loc_9 >= 1073741824 then
																								desired = 6
																								break
																							end
																							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_9, 2))
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					else
																						while true do
																							reg_0 = 0
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_11 = reg_0
																					loc_13 = rt_add_i32(loc_11, rt_shl_i32(loc_13, 2))
																					rt_store_i32(memory_at_0, loc_13, rt_load_i32(memory_at_0, loc_2))
																					loc_9 = rt_shl_i32(loc_9, 2)
																					loc_2 = loc_13
																					if loc_4 ~= loc_7 then
																						while true do
																							while true do
																								loc_2 = rt_sub_i32(loc_2, 4)
																								loc_4 = rt_sub_i32(loc_4, 4)
																								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_4))
																								if loc_4 ~= loc_7 then
																									continue
																								end
																								break
																							end
																							if desired then
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_11 = rt_add_i32(loc_9, loc_11)
																					loc_4 = rt_add_i32(loc_13, 4)
																					if loc_7 ~= 0 then
																						while true do
																							FUNC_LIST[653](loc_7, loc_15)
																							reg_0 = rt_load_i32(memory_at_0, loc_0 + 36)
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					else
																						while true do
																							reg_0 = loc_6
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					loc_6 = reg_0
																					loc_7 = loc_2
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_2 = rt_add_i32(loc_6, loc_8)
																				if loc_4 < loc_11 then
																					while true do
																						rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_2))
																						loc_4 = rt_add_i32(loc_4, 4)
																						desired = 18
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_6 = rt_shr_i32(rt_sub_i32(loc_4, loc_7), 2)
																				loc_8 = rt_add_i32(loc_6, 1)
																				if loc_8 >= 1073741824 then
																					desired = 5
																					break
																				end
																				loc_9 = rt_sub_i32(loc_11, loc_7)
																				loc_13 = rt_shr_i32(loc_9, 1)
																				loc_8 = (if loc_9 >= 2147483644 then 1073741823 else (if loc_8 < loc_13 then loc_13 else loc_8))
																				if loc_8 ~= 0 then
																					while true do
																						if loc_8 >= 1073741824 then
																							desired = 12
																							break
																						end
																						reg_0 = FUNC_LIST[646](rt_shl_i32(loc_8, 2))
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				else
																					while true do
																						reg_0 = 0
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_11 = reg_0
																				loc_6 = rt_add_i32(loc_11, rt_shl_i32(loc_6, 2))
																				rt_store_i32(memory_at_0, loc_6, rt_load_i32(memory_at_0, loc_2))
																				loc_8 = rt_shl_i32(loc_8, 2)
																				loc_2 = loc_6
																				if loc_4 ~= loc_7 then
																					while true do
																						while true do
																							loc_2 = rt_sub_i32(loc_2, 4)
																							loc_4 = rt_sub_i32(loc_4, 4)
																							rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_4))
																							if loc_4 ~= loc_7 then
																								continue
																							end
																							break
																						end
																						if desired then
																							break
																						end
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_11 = rt_add_i32(loc_8, loc_11)
																				loc_4 = rt_add_i32(loc_6, 4)
																				if loc_7 ~= 0 then
																					while true do
																						FUNC_LIST[653](loc_7, loc_9)
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_7 = loc_2
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_17 = rt_add_i32(loc_17, 1)
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																				continue
																			end
																			break
																		end
																		reg_0 = FUNC_LIST[119](loc_12)
																		loc_2 = reg_0
																		if rt_gt_i32(loc_2, 0) then
																			while true do
																				loc_15 = rt_add_i32(loc_2, loc_14)
																				while true do
																					loc_12 = rt_shl_i32(loc_14, 2)
																					loc_2 = rt_shr_i32(rt_sub_i32(loc_3, loc_5), 2)
																					rt_store_i32(memory_at_0, rt_add_i32(loc_12, loc_16), loc_2)
																					loc_8 = rt_add_i32(loc_12, rt_load_i32(memory_at_0, loc_0 + 24))
																					while true do
																						if loc_3 < loc_10 then
																							while true do
																								rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_8))
																								loc_3 = rt_add_i32(loc_3, 4)
																								desired = 19
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_6 = rt_add_i32(loc_2, 1)
																						if loc_6 >= 1073741824 then
																							desired = 11
																							break
																						end
																						loc_13 = rt_sub_i32(loc_10, loc_5)
																						loc_9 = rt_shr_i32(loc_13, 1)
																						loc_6 = (if loc_13 >= 2147483644 then 1073741823 else (if loc_6 < loc_9 then loc_9 else loc_6))
																						if loc_6 ~= 0 then
																							while true do
																								if loc_6 >= 1073741824 then
																									desired = 6
																									break
																								end
																								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 2))
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						else
																							while true do
																								reg_0 = 0
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_10 = reg_0
																						loc_9 = rt_add_i32(loc_10, rt_shl_i32(loc_2, 2))
																						rt_store_i32(memory_at_0, loc_9, rt_load_i32(memory_at_0, loc_8))
																						loc_8 = rt_shl_i32(loc_6, 2)
																						loc_2 = loc_9
																						if loc_3 ~= loc_5 then
																							while true do
																								while true do
																									loc_2 = rt_sub_i32(loc_2, 4)
																									loc_3 = rt_sub_i32(loc_3, 4)
																									rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3))
																									if loc_3 ~= loc_5 then
																										continue
																									end
																									break
																								end
																								if desired then
																									break
																								end
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_10 = rt_add_i32(loc_8, loc_10)
																						loc_3 = rt_add_i32(loc_9, 4)
																						if loc_5 ~= 0 then
																							while true do
																								FUNC_LIST[653](loc_5, loc_13)
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_5 = loc_2
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																							continue
																						end
																						break
																					end
																					loc_2 = rt_add_i32(loc_12, rt_load_i32(memory_at_0, loc_0 + 36))
																					while true do
																						if loc_4 < loc_11 then
																							while true do
																								rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_2))
																								loc_4 = rt_add_i32(loc_4, 4)
																								desired = 19
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_8 = rt_shr_i32(rt_sub_i32(loc_4, loc_7), 2)
																						loc_12 = rt_add_i32(loc_8, 1)
																						if loc_12 >= 1073741824 then
																							desired = 10
																							break
																						end
																						loc_6 = rt_sub_i32(loc_11, loc_7)
																						loc_9 = rt_shr_i32(loc_6, 1)
																						loc_12 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_9 > loc_12 then loc_9 else loc_12))
																						if loc_12 ~= 0 then
																							while true do
																								if loc_12 >= 1073741824 then
																									desired = 6
																									break
																								end
																								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_12, 2))
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						else
																							while true do
																								reg_0 = 0
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_11 = reg_0
																						loc_8 = rt_add_i32(loc_11, rt_shl_i32(loc_8, 2))
																						rt_store_i32(memory_at_0, loc_8, rt_load_i32(memory_at_0, loc_2))
																						loc_12 = rt_shl_i32(loc_12, 2)
																						loc_2 = loc_8
																						if loc_4 ~= loc_7 then
																							while true do
																								while true do
																									loc_2 = rt_sub_i32(loc_2, 4)
																									loc_4 = rt_sub_i32(loc_4, 4)
																									rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_4))
																									if loc_4 ~= loc_7 then
																										continue
																									end
																									break
																								end
																								if desired then
																									break
																								end
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_11 = rt_add_i32(loc_11, loc_12)
																						loc_4 = rt_add_i32(loc_8, 4)
																						if loc_7 ~= 0 then
																							while true do
																								FUNC_LIST[653](loc_7, loc_6)
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_7 = loc_2
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																							continue
																						end
																						break
																					end
																					loc_14 = rt_add_i32(loc_14, 1)
																					if loc_15 ~= loc_14 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				reg_0 = loc_15
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		else
																			while true do
																				reg_0 = loc_14
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		loc_14 = reg_0
																		loc_15 = rt_load_i32(memory_at_0, loc_0 + 28)
																		loc_12 = rt_load_i32(memory_at_0, loc_0 + 24)
																		if loc_14 < rt_shr_i32(rt_sub_i32(loc_15, loc_12), 2) then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_1 + 24, loc_5)
																loc_2 = rt_load_i32(memory_at_0, loc_0 + 72)
																loc_16 = rt_load_i32(memory_at_0, loc_0 + 76)
																if loc_2 == loc_16 then
																	desired = 8
																	break
																end
																loc_17 = rt_sub_i32(loc_5, 4)
																loc_14 = rt_load_i32(memory_at_0, loc_1 + 36)
																while true do
																	loc_8 = rt_load_i32(memory_at_0, loc_2 + 4)
																	loc_6 = rt_load_i32(memory_at_0, loc_2)
																	loc_9 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 2), loc_14))
																	loc_13 = rt_sub_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 2), loc_14)), loc_9)
																	while true do
																		loc_8 = rt_add_i32(bit_xor(loc_6, 4294967295), loc_8)
																		reg_0 = loc_8
																		loc_8 = rt_shr_i32(loc_8, 31)
																		if rt_sub_i32(bit_xor(reg_0, loc_8), loc_8) >= 10923 then
																			while true do
																				loc_8 = rt_shl_i32(loc_9, 2)
																				loc_6 = rt_add_i32(loc_8, loc_17)
																				rt_store_i32(memory_at_0, loc_6, bit_or(rt_load_i32_u8(memory_at_0, loc_6), rt_shl_i32(loc_13, 8)))
																				rt_store_i32_n16(memory_at_0, rt_add_i32(loc_5, loc_8) + 2, 65534)
																				desired = 16
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		rt_store_i32_n16(memory_at_0, rt_add_i32(rt_shl_i32(loc_9, 2), loc_5) + 2, rt_shr_u32(rt_sub_i32(rt_shl_i32(loc_13, 16), 65536), 16))
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																			continue
																		end
																		break
																	end
																	loc_2 = rt_add_i32(loc_2, 8)
																	if loc_2 ~= loc_16 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																desired = 9
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															FUNC_LIST[44](rt_add_i32(loc_1, 36))
															error("out of code bounds")
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														FUNC_LIST[44](rt_add_i32(loc_1, 12))
														error("out of code bounds")
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													desired = 2
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												rt_store_i32(memory_at_0, loc_1 + 32, loc_10)
												rt_store_i32(memory_at_0, loc_1 + 24, loc_5)
												rt_store_i32(memory_at_0, loc_1 + 28, loc_3)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											rt_store_i32(memory_at_0, loc_1 + 32, loc_10)
											rt_store_i32(memory_at_0, loc_1 + 24, loc_5)
											rt_store_i32(memory_at_0, loc_1 + 28, loc_3)
											desired = 4
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_5 = rt_load_i32(memory_at_0, loc_1 + 24)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
									rt_store_i32(memory_at_0, loc_0 + 24, loc_5)
									rt_store_i32(memory_at_0, loc_1 + 28, loc_15)
									loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
									rt_store_i32(memory_at_0, loc_0 + 32, loc_10)
									rt_store_i32(memory_at_0, loc_1 + 32, loc_2)
									loc_3 = rt_load_i32(memory_at_0, loc_0 + 36)
									rt_store_i32(memory_at_0, loc_0 + 36, loc_7)
									loc_5 = rt_load_i32(memory_at_0, loc_0 + 40)
									rt_store_i32(memory_at_0, loc_0 + 40, loc_4)
									rt_store_i32(memory_at_0, loc_1 + 16, loc_5)
									loc_4 = rt_load_i32(memory_at_0, loc_0 + 44)
									rt_store_i32(memory_at_0, loc_0 + 44, loc_11)
									rt_store_i32(memory_at_0, loc_1 + 20, loc_4)
									if loc_3 ~= 0 then
										while true do
											rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
											FUNC_LIST[653](loc_3, rt_sub_i32(loc_4, loc_3))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_12 ~= 0 then
										while true do
											rt_store_i32(memory_at_0, loc_1 + 28, loc_12)
											FUNC_LIST[653](loc_12, rt_sub_i32(loc_2, loc_12))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_3 = rt_load_i32(memory_at_0, loc_1 + 36)
									if loc_3 == 0 then
										break
									end
									FUNC_LIST[653](loc_3, rt_sub_i32(loc_18, loc_3))
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								GLOBAL_LIST[0].value = rt_add_i32(loc_1, 48)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 32, loc_10)
						rt_store_i32(memory_at_0, loc_1 + 28, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 24, loc_5)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 20, loc_11)
					rt_store_i32(memory_at_0, loc_1 + 16, loc_4)
					rt_store_i32(memory_at_0, loc_1 + 12, loc_7)
					FUNC_LIST[44](rt_add_i32(loc_1, 12))
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 32, loc_10)
				rt_store_i32(memory_at_0, loc_1 + 28, loc_3)
				rt_store_i32(memory_at_0, loc_1 + 24, loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 32, loc_10)
			rt_store_i32(memory_at_0, loc_1 + 28, loc_3)
			rt_store_i32(memory_at_0, loc_1 + 20, loc_11)
			rt_store_i32(memory_at_0, loc_1 + 16, loc_4)
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_1 + 20, loc_11)
		rt_store_i32(memory_at_0, loc_1 + 16, loc_4)
		rt_store_i32(memory_at_0, loc_1 + 12, loc_7)
		FUNC_LIST[44](rt_add_i32(loc_1, 24))
		error("out of code bounds")
	end
end
FUNC_LIST[118] = --[[ void std::__2::__introsort<std::__2::_ClassicAlgPolicy, Luau::BytecodeBuilder::expandJumps()::$_0&, Luau::BytecodeBuilder::Jump*, false>(Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::expandJumps()::$_0&, std::__2::iterator_traits<Luau::BytecodeBuilder::Jump*>::difference_type, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					loc_10 = rt_sub_i32(loc_1, 8)
					loc_11 = rt_sub_i32(loc_1, 24)
					loc_12 = rt_sub_i32(loc_1, 16)
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_5 = loc_0
													loc_6 = rt_shr_i32(rt_sub_i32(loc_1, loc_5), 3)
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 6, 6, 0, 1, 4, 2, }
														end)()
													end
													temp = br_map[1][loc_6] or 3
													if temp < 3 then
														if temp < 1 then
															break
														elseif temp > 1 then
															desired = 9
															break
														else
															desired = 10
															break
														end
													elseif temp > 3 then
														if temp < 6 then
															desired = 7
															break
														else
															desired = 5
															break
														end
													else
														desired = 8
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_4 = rt_sub_i32(loc_1, 8)
												if rt_load_i32(memory_at_0, loc_4) >= rt_load_i32(memory_at_0, loc_5) then
													desired = 5
													break
												end
												loc_15 = rt_load_i64(memory_at_0, loc_5)
												desired = 2
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_4 = rt_sub_i32(loc_1, 8)
											loc_0 = rt_load_i32(memory_at_0, loc_4)
											loc_6 = rt_load_i32(memory_at_0, loc_5 + 8)
											if loc_6 >= rt_load_i32(memory_at_0, loc_5) then
												while true do
													if loc_0 >= loc_6 then
														desired = 5
														break
													end
													loc_15 = rt_load_i64(memory_at_0, loc_5 + 8)
													rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4))
													rt_store_i64(memory_at_0, loc_4, loc_15)
													if rt_load_i32(memory_at_0, loc_5 + 8) >= rt_load_i32(memory_at_0, loc_5) then
														desired = 5
														break
													end
													loc_15 = rt_load_i64(memory_at_0, loc_5 + 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_15 = rt_load_i64(memory_at_0, loc_5)
											if loc_0 < loc_6 then
												while true do
													desired = 2
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_16 = rt_load_i64(memory_at_0, loc_5 + 8)
											rt_store_i64(memory_at_0, loc_5 + 8, loc_15)
											rt_store_i64(memory_at_0, loc_5, loc_16)
											if rt_load_i32(memory_at_0, loc_4) >= rt_wrap_i32_i64(loc_15) then
												desired = 5
												break
											end
											rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4))
											rt_store_i64(memory_at_0, loc_4, loc_15)
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_7 = rt_add_i32(loc_5, 8)
										loc_6 = rt_add_i32(loc_5, 16)
										loc_4 = rt_add_i32(loc_5, 24)
										FUNC_LIST[121](loc_5, loc_7, loc_6, loc_4)
										loc_0 = rt_sub_i32(loc_1, 8)
										if rt_load_i32(memory_at_0, loc_0) >= rt_load_i32(memory_at_0, loc_5 + 24) then
											desired = 5
											break
										end
										loc_15 = rt_load_i64(memory_at_0, loc_5 + 24)
										rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_0))
										rt_store_i64(memory_at_0, loc_0, loc_15)
										if rt_load_i32(memory_at_0, loc_5 + 24) >= rt_load_i32(memory_at_0, loc_5 + 16) then
											desired = 5
											break
										end
										loc_16 = rt_load_i64(memory_at_0, loc_5 + 16)
										loc_15 = rt_load_i64(memory_at_0, loc_5 + 24)
										rt_store_i64(memory_at_0, loc_5 + 16, loc_15)
										rt_store_i64(memory_at_0, loc_5 + 24, loc_16)
										loc_4 = rt_wrap_i32_i64(loc_15)
										if loc_4 >= rt_load_i32(memory_at_0, loc_5 + 8) then
											desired = 5
											break
										end
										rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_5 + 8))
										rt_store_i64(memory_at_0, loc_5 + 8, loc_15)
										if loc_4 >= rt_load_i32(memory_at_0, loc_5) then
											desired = 5
											break
										end
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_le_i32(loc_6, 23) then
										while true do
											loc_4 = rt_add_i32(loc_5, 8)
											loc_0 = bit_or((if loc_1 == loc_5 then 1 else 0), (if loc_1 == loc_4 then 1 else 0))
											if bit_and(loc_3, 1) ~= 0 then
												while true do
													if loc_0 ~= 0 then
														desired = 5
														break
													end
													loc_0 = loc_5
													while true do
														loc_8 = loc_4
														if rt_load_i32(memory_at_0, loc_0 + 8) < rt_load_i32(memory_at_0, loc_0) then
															while true do
																loc_15 = rt_load_i64(memory_at_0, loc_4)
																loc_7 = rt_wrap_i32_i64(loc_15)
																loc_6 = loc_4
																while true do
																	while true do
																		loc_4 = loc_0
																		rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
																		if loc_4 == loc_5 then
																			while true do
																				loc_4 = loc_5
																				desired = 13
																				break
																			end
																			if desired then
																				if desired == 13 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_6 = loc_4
																		loc_0 = rt_sub_i32(loc_4, 8)
																		if loc_7 < rt_load_i32(memory_at_0, loc_0) then
																			desired = 12
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																			continue
																		end
																		break
																	end
																	break
																end
																if desired then
																	break
																end
																rt_store_i64(memory_at_0, loc_4, loc_15)
																break
															end
															if desired then
																if desired == 10 then
																	desired = nil
																	continue
																end
																break
															end
														end
														loc_0 = loc_8
														loc_4 = rt_add_i32(loc_0, 8)
														if loc_1 ~= loc_4 then
															continue
														end
														break
													end
													if desired then
														break
													end
													desired = 5
													break
												end
												if desired then
													break
												end
											end
											if loc_0 ~= 0 then
												desired = 5
												break
											end
											while true do
												loc_7 = loc_4
												if rt_load_i32(memory_at_0, loc_5 + 8) < rt_load_i32(memory_at_0, loc_5) then
													while true do
														loc_15 = rt_load_i64(memory_at_0, loc_4)
														loc_6 = rt_wrap_i32_i64(loc_15)
														loc_0 = loc_4
														while true do
															loc_4 = loc_5
															rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_4))
															loc_0 = loc_5
															loc_5 = rt_sub_i32(loc_5, 8)
															if loc_6 < rt_load_i32(memory_at_0, loc_5) then
																continue
															end
															break
														end
														if desired then
															break
														end
														rt_store_i64(memory_at_0, loc_4, loc_15)
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
															continue
														end
														break
													end
												end
												loc_5 = loc_7
												loc_4 = rt_add_i32(loc_5, 8)
												if loc_1 ~= loc_4 then
													continue
												end
												break
											end
											if desired then
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 0 then
										while true do
											if loc_1 == loc_5 then
												desired = 5
												break
											end
											loc_10 = rt_shr_u32(rt_sub_i32(loc_6, 2), 1)
											loc_4 = loc_10
											while true do
												while true do
													loc_12 = loc_4
													if rt_gt_i32(loc_12, loc_10) then
														break
													end
													loc_7 = rt_add_i32(rt_shl_i32(loc_4, 3), loc_5)
													loc_8 = bit_and(rt_shl_i32(loc_4, 1), 1073741822)
													loc_0 = bit_or(loc_8, 1)
													loc_4 = rt_add_i32(rt_shl_i32(loc_0, 3), loc_5)
													while true do
														loc_8 = rt_add_i32(loc_8, 2)
														if rt_ge_i32(loc_8, loc_6) then
															while true do
																reg_0 = rt_load_i32(memory_at_0, loc_4)
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_9 = rt_load_i32(memory_at_0, loc_4)
														loc_2 = rt_load_i32(memory_at_0, loc_4 + 8)
														loc_11 = (if loc_9 < loc_2 then 1 else 0)
														loc_4 = (if loc_11 ~= 0 then rt_add_i32(loc_4, 8) else loc_4)
														loc_0 = (if loc_11 ~= 0 then loc_8 else loc_0)
														reg_0 = (if loc_2 < loc_9 then loc_9 else loc_2)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													loc_8 = reg_0
													if loc_8 < rt_load_i32(memory_at_0, loc_7) then
														break
													end
													loc_15 = rt_load_i64(memory_at_0, loc_7)
													loc_11 = rt_wrap_i32_i64(loc_15)
													while true do
														while true do
															loc_8 = loc_4
															rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_8))
															if rt_gt_i32(loc_0, loc_10) then
																break
															end
															loc_7 = rt_shl_i32(loc_0, 1)
															loc_0 = bit_or(loc_7, 1)
															loc_4 = rt_add_i32(rt_shl_i32(loc_0, 3), loc_5)
															while true do
																loc_7 = rt_add_i32(loc_7, 2)
																if rt_ge_i32(loc_7, loc_6) then
																	while true do
																		reg_0 = rt_load_i32(memory_at_0, loc_4)
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_9 = rt_load_i32(memory_at_0, loc_4)
																loc_2 = rt_load_i32(memory_at_0, loc_4 + 8)
																loc_3 = (if loc_9 < loc_2 then 1 else 0)
																loc_4 = (if loc_3 ~= 0 then rt_add_i32(loc_4, 8) else loc_4)
																loc_0 = (if loc_3 ~= 0 then loc_7 else loc_0)
																reg_0 = (if loc_2 < loc_9 then loc_9 else loc_2)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															loc_9 = reg_0
															loc_7 = loc_8
															if loc_9 >= loc_11 then
																desired = 11
																break
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													rt_store_i64(memory_at_0, loc_8, loc_15)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												loc_4 = rt_sub_i32(loc_12, 1)
												if rt_gt_i32(loc_12, 0) then
													continue
												end
												break
											end
											if desired then
												break
											end
											while true do
												loc_9 = loc_6
												loc_2 = rt_shr_u32(rt_sub_i32(loc_9, 2), 1)
												loc_15 = rt_load_i64(memory_at_0, loc_5)
												loc_0 = 0
												loc_6 = loc_5
												while true do
													loc_7 = rt_shl_i32(loc_0, 1)
													loc_8 = bit_or(loc_7, 1)
													loc_0 = rt_add_i32(rt_shl_i32(loc_0, 3), loc_6)
													loc_4 = rt_add_i32(loc_0, 8)
													while true do
														loc_7 = rt_add_i32(loc_7, 2)
														if rt_ge_i32(loc_7, loc_9) then
															while true do
																loc_0 = loc_8
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_10 = rt_add_i32(loc_0, 16)
														loc_11 = (if rt_load_i32(memory_at_0, loc_4) < rt_load_i32(memory_at_0, loc_10) then 1 else 0)
														loc_0 = (if loc_11 ~= 0 then loc_7 else loc_8)
														loc_4 = (if loc_11 ~= 0 then loc_10 else loc_4)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
													rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
													loc_6 = loc_4
													if rt_le_i32(loc_0, loc_2) then
														continue
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												while true do
													loc_1 = rt_sub_i32(loc_1, 8)
													if loc_4 == loc_1 then
														while true do
															rt_store_i64(memory_at_0, loc_4, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
													rt_store_i64(memory_at_0, loc_1, loc_15)
													loc_0 = rt_shr_i32(rt_add_i32(rt_sub_i32(loc_4, loc_5), 8), 3)
													if rt_lt_i32(loc_0, 2) then
														break
													end
													loc_0 = rt_shr_u32(rt_sub_i32(loc_0, 2), 1)
													loc_6 = rt_add_i32(rt_shl_i32(loc_0, 3), loc_5)
													if rt_load_i32(memory_at_0, loc_6) >= rt_load_i32(memory_at_0, loc_4) then
														break
													end
													loc_15 = rt_load_i64(memory_at_0, loc_4)
													loc_8 = rt_wrap_i32_i64(loc_15)
													while true do
														while true do
															loc_7 = loc_6
															rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_7))
															if loc_0 == 0 then
																break
															end
															loc_4 = loc_6
															loc_0 = rt_shr_u32(rt_sub_i32(loc_0, 1), 1)
															loc_6 = rt_add_i32(rt_shl_i32(loc_0, 3), loc_5)
															if loc_8 > rt_load_i32(memory_at_0, loc_6) then
																desired = 11
																break
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													rt_store_i64(memory_at_0, loc_7, loc_15)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												loc_6 = rt_sub_i32(loc_9, 1)
												if rt_gt_i32(loc_9, 2) then
													continue
												end
												break
											end
											if desired then
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_4 = rt_add_i32(rt_shl_i32(rt_shr_u32(loc_6, 1), 3), loc_5)
									loc_0 = rt_load_i32(memory_at_0, loc_10)
									while true do
										if loc_6 >= 129 then
											while true do
												while true do
													loc_6 = rt_load_i32(memory_at_0, loc_4)
													if loc_6 >= rt_load_i32(memory_at_0, loc_5) then
														while true do
															if loc_0 >= loc_6 then
																desired = 10
																break
															end
															loc_15 = rt_load_i64(memory_at_0, loc_4)
															rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_10))
															rt_store_i64(memory_at_0, loc_10, loc_15)
															if rt_load_i32(memory_at_0, loc_4) >= rt_load_i32(memory_at_0, loc_5) then
																desired = 10
																break
															end
															loc_15 = rt_load_i64(memory_at_0, loc_5)
															rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
															rt_store_i64(memory_at_0, loc_4, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = rt_load_i64(memory_at_0, loc_5)
													while true do
														if loc_0 < loc_6 then
															while true do
																rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_10))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
														rt_store_i64(memory_at_0, loc_4, loc_15)
														if rt_load_i32(memory_at_0, loc_10) >= rt_wrap_i32_i64(loc_15) then
															desired = 10
															break
														end
														rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_10))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													rt_store_i64(memory_at_0, loc_10, loc_15)
													break
												end
												if desired then
													break
												end
												loc_6 = rt_load_i32(memory_at_0, loc_12)
												while true do
													loc_0 = rt_sub_i32(loc_4, 8)
													loc_7 = rt_load_i32(memory_at_0, loc_0)
													if loc_7 >= rt_load_i32(memory_at_0, loc_5 + 8) then
														while true do
															if loc_6 >= loc_7 then
																desired = 10
																break
															end
															loc_15 = rt_load_i64(memory_at_0, loc_0)
															rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_12))
															rt_store_i64(memory_at_0, loc_12, loc_15)
															if rt_load_i32(memory_at_0, loc_0) >= rt_load_i32(memory_at_0, loc_5 + 8) then
																desired = 10
																break
															end
															loc_15 = rt_load_i64(memory_at_0, loc_5 + 8)
															rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_0))
															rt_store_i64(memory_at_0, loc_0, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = rt_load_i64(memory_at_0, loc_5 + 8)
													while true do
														if loc_6 < loc_7 then
															while true do
																rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_12))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_0))
														rt_store_i64(memory_at_0, loc_0, loc_15)
														if rt_load_i32(memory_at_0, loc_12) >= rt_wrap_i32_i64(loc_15) then
															desired = 10
															break
														end
														rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_12))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													rt_store_i64(memory_at_0, loc_12, loc_15)
													break
												end
												if desired then
													break
												end
												loc_7 = rt_load_i32(memory_at_0, loc_11)
												while true do
													loc_13 = loc_4
													loc_6 = rt_add_i32(loc_13, 8)
													loc_8 = rt_load_i32(memory_at_0, loc_6)
													if loc_8 >= rt_load_i32(memory_at_0, loc_5 + 16) then
														while true do
															if loc_7 >= loc_8 then
																desired = 10
																break
															end
															loc_15 = rt_load_i64(memory_at_0, loc_4 + 8)
															rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_11))
															rt_store_i64(memory_at_0, loc_11, loc_15)
															if rt_load_i32(memory_at_0, loc_4 + 8) >= rt_load_i32(memory_at_0, loc_5 + 16) then
																desired = 10
																break
															end
															loc_15 = rt_load_i64(memory_at_0, loc_5 + 16)
															rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_4 + 8))
															rt_store_i64(memory_at_0, loc_4 + 8, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = rt_load_i64(memory_at_0, loc_5 + 16)
													while true do
														if loc_7 < loc_8 then
															while true do
																rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_11))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_13 + 8))
														rt_store_i64(memory_at_0, loc_13 + 8, loc_15)
														if rt_load_i32(memory_at_0, loc_11) >= rt_wrap_i32_i64(loc_15) then
															desired = 10
															break
														end
														rt_store_i64(memory_at_0, loc_13 + 8, rt_load_i64(memory_at_0, loc_11))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													rt_store_i64(memory_at_0, loc_11, loc_15)
													break
												end
												if desired then
													break
												end
												loc_7 = rt_load_i32(memory_at_0, loc_13 + 8)
												while true do
													loc_8 = rt_load_i32(memory_at_0, loc_4)
													loc_9 = rt_load_i32(memory_at_0, loc_0)
													if loc_8 >= loc_9 then
														while true do
															loc_15 = rt_load_i64(memory_at_0, loc_4)
															if loc_7 >= loc_8 then
																desired = 10
																break
															end
															loc_16 = rt_load_i64(memory_at_0, loc_13 + 8)
															rt_store_i64(memory_at_0, loc_4, loc_16)
															rt_store_i64(memory_at_0, loc_13 + 8, loc_15)
															if loc_9 <= rt_wrap_i32_i64(loc_16) then
																while true do
																	loc_15 = loc_16
																	desired = 10
																	break
																end
																if desired then
																	break
																end
															end
															loc_15 = rt_load_i64(memory_at_0, loc_0)
															rt_store_i64(memory_at_0, loc_0, loc_16)
															rt_store_i64(memory_at_0, loc_4, loc_15)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_16 = rt_load_i64(memory_at_0, loc_0)
													if loc_7 < loc_8 then
														while true do
															rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_13 + 8))
															rt_store_i64(memory_at_0, loc_13 + 8, loc_16)
															loc_15 = rt_load_i64(memory_at_0, loc_4)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_4))
													rt_store_i64(memory_at_0, loc_4, loc_16)
													if loc_7 >= rt_wrap_i32_i64(loc_16) then
														while true do
															loc_15 = loc_16
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_15 = rt_load_i64(memory_at_0, loc_13 + 8)
													rt_store_i64(memory_at_0, loc_4, loc_15)
													rt_store_i64(memory_at_0, loc_13 + 8, loc_16)
													break
												end
												if desired then
													break
												end
												loc_16 = rt_load_i64(memory_at_0, loc_5)
												rt_store_i64(memory_at_0, loc_5, loc_15)
												rt_store_i64(memory_at_0, loc_4, loc_16)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_6 = rt_load_i32(memory_at_0, loc_5)
										if loc_6 >= rt_load_i32(memory_at_0, loc_4) then
											while true do
												if loc_0 >= loc_6 then
													desired = 8
													break
												end
												loc_15 = rt_load_i64(memory_at_0, loc_5)
												rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_10))
												rt_store_i64(memory_at_0, loc_10, loc_15)
												if rt_load_i32(memory_at_0, loc_5) >= rt_load_i32(memory_at_0, loc_4) then
													desired = 8
													break
												end
												loc_15 = rt_load_i64(memory_at_0, loc_4)
												rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
												rt_store_i64(memory_at_0, loc_5, loc_15)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_15 = rt_load_i64(memory_at_0, loc_4)
										while true do
											if loc_0 < loc_6 then
												while true do
													rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_10))
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
											rt_store_i64(memory_at_0, loc_5, loc_15)
											if rt_load_i32(memory_at_0, loc_10) >= rt_wrap_i32_i64(loc_15) then
												desired = 8
												break
											end
											rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_10))
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i64(memory_at_0, loc_10, loc_15)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = rt_sub_i32(loc_2, 1)
									loc_14 = bit_and(loc_3, 1)
									if loc_14 ~= 0 then
										while true do
											loc_16 = rt_load_i64(memory_at_0, loc_5)
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_16 = rt_load_i64(memory_at_0, loc_5)
									if rt_load_i32(memory_at_0, rt_sub_i32(loc_5, 8)) < rt_load_i32(memory_at_0, loc_5) then
										desired = 6
										break
									end
									loc_4 = loc_5
									loc_0 = loc_5
									while true do
										loc_6 = rt_wrap_i32_i64(loc_16)
										if loc_6 < rt_load_i32(memory_at_0, loc_10) then
											while true do
												while true do
													loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
													loc_0 = rt_add_i32(loc_4, 8)
													loc_4 = loc_0
													if loc_6 >= loc_7 then
														continue
													end
													desired = 8
													break
												end
												if desired then
													break
												end
												error("out of code bounds")
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										while true do
											loc_0 = rt_add_i32(loc_0, 8)
											if loc_1 <= loc_0 then
												desired = 8
												break
											end
											if loc_6 >= rt_load_i32(memory_at_0, loc_0) then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = loc_1
									if loc_0 < loc_4 then
										while true do
											while true do
												loc_4 = rt_sub_i32(loc_4, 8)
												if loc_6 < rt_load_i32(memory_at_0, loc_4) then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_0 < loc_4 then
										while true do
											while true do
												loc_15 = rt_load_i64(memory_at_0, loc_0)
												rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_4))
												rt_store_i64(memory_at_0, loc_4, loc_15)
												while true do
													loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
													loc_8 = rt_add_i32(loc_0, 8)
													loc_0 = loc_8
													if loc_6 >= loc_7 then
														continue
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												while true do
													loc_4 = rt_sub_i32(loc_4, 8)
													if loc_6 < rt_load_i32(memory_at_0, loc_4) then
														continue
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												if loc_4 > loc_8 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_4 = rt_sub_i32(loc_0, 8)
									if loc_5 ~= loc_4 then
										while true do
											rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									rt_store_i64(memory_at_0, loc_4, loc_16)
									loc_3 = 0
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[121](loc_5, rt_add_i32(loc_5, 8), rt_add_i32(loc_5, 16), rt_sub_i32(loc_1, 8))
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_0 = rt_wrap_i32_i64(loc_16)
							loc_8 = loc_5
							while true do
								loc_4 = loc_8
								loc_8 = rt_add_i32(loc_4, 8)
								if loc_0 > rt_load_i32(memory_at_0, loc_4 + 8) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_9 = loc_1
							while true do
								if loc_4 == loc_5 then
									while true do
										while true do
											if loc_8 >= loc_9 then
												desired = 6
												break
											end
											loc_9 = rt_sub_i32(loc_9, 8)
											if loc_0 <= rt_load_i32(memory_at_0, loc_9) then
												continue
											end
											desired = 6
											break
										end
										if desired then
											break
										end
										error("out of code bounds")
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								while true do
									loc_9 = rt_sub_i32(loc_9, 8)
									if loc_0 <= rt_load_i32(memory_at_0, loc_9) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = loc_8
							loc_7 = loc_9
							if loc_6 < loc_7 then
								while true do
									while true do
										loc_15 = rt_load_i64(memory_at_0, loc_6)
										rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
										rt_store_i64(memory_at_0, loc_7, loc_15)
										while true do
											loc_4 = loc_6
											loc_6 = rt_add_i32(loc_4, 8)
											if loc_0 > rt_load_i32(memory_at_0, loc_4 + 8) then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										while true do
											loc_7 = rt_sub_i32(loc_7, 8)
											if loc_0 <= rt_load_i32(memory_at_0, loc_7) then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										if loc_6 < loc_7 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 ~= loc_5 then
								while true do
									rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i64(memory_at_0, loc_4, loc_16)
							if loc_8 >= loc_9 then
								while true do
									reg_0 = FUNC_LIST[122](loc_5, loc_4)
									loc_6 = reg_0
									loc_0 = rt_add_i32(loc_4, 8)
									reg_0 = FUNC_LIST[122](loc_0, loc_1)
									if reg_0 ~= 0 then
										while true do
											loc_1 = loc_4
											loc_0 = loc_5
											if loc_6 == 0 then
												desired = 3
												break
											end
											desired = 5
											break
										end
										if desired then
											break
										end
									end
									if loc_6 ~= 0 then
										desired = 4
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[118](loc_5, loc_4, loc_2, loc_14)
							loc_0 = rt_add_i32(loc_4, 8)
							loc_3 = 0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
			rt_store_i64(memory_at_0, loc_4, loc_15)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_5, loc_15)
		break
	end
end
FUNC_LIST[119] = --[[ Luau::getOpLength(LuauOpcode) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = 2
		while true do
			while true do
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, }
					end)()
				end
				temp = br_map[1][rt_sub_i32(loc_0, 7)] or 0
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 1
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[120] = --[[ Luau::BytecodeBuilder::getError(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 8, 0)
		FUNC_LIST[726](loc_0, 0)
		loc_2 = rt_load_i32_i8(memory_at_0, loc_1 + 11)
		loc_3 = (if rt_lt_i32(loc_2, 0) then 1 else 0)
		reg_0 = FUNC_LIST[721](loc_0, (if loc_3 ~= 0 then rt_load_i32(memory_at_0, loc_1) else loc_1), (if loc_3 ~= 0 then rt_load_i32(memory_at_0, loc_1 + 4) else loc_2))
		break
	end
end
FUNC_LIST[121] = --[[ void std::__2::__sort4[abi:ne180100]<std::__2::_ClassicAlgPolicy, Luau::BytecodeBuilder::expandJumps()::$_0&, Luau::BytecodeBuilder::Jump*>(Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::expandJumps()::$_0&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local loc_5 = 0
	local loc_6 = 0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_2)
		while true do
			loc_6 = rt_load_i32(memory_at_0, loc_1)
			if loc_6 >= rt_load_i32(memory_at_0, loc_0) then
				while true do
					if loc_5 >= loc_6 then
						desired = 1
						break
					end
					loc_4 = rt_load_i64(memory_at_0, loc_1)
					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
					rt_store_i64(memory_at_0, loc_2, loc_4)
					if rt_load_i32(memory_at_0, loc_1) >= rt_load_i32(memory_at_0, loc_0) then
						while true do
							loc_5 = rt_wrap_i32_i64(loc_4)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_4 = rt_load_i64(memory_at_0, loc_0)
					rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_1, loc_4)
					loc_5 = rt_load_i32(memory_at_0, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_load_i64(memory_at_0, loc_0)
			if loc_5 < loc_6 then
				while true do
					rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_2))
					rt_store_i64(memory_at_0, loc_2, loc_4)
					loc_5 = rt_wrap_i32_i64(loc_4)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
			rt_store_i64(memory_at_0, loc_1, loc_4)
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			loc_6 = rt_wrap_i32_i64(loc_4)
			if loc_5 >= loc_6 then
				break
			end
			rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
			rt_store_i64(memory_at_0, loc_2, loc_4)
			loc_5 = loc_6
			break
		end
		while true do
			if loc_5 <= rt_load_i32(memory_at_0, loc_3) then
				break
			end
			loc_4 = rt_load_i64(memory_at_0, loc_2)
			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
			rt_store_i64(memory_at_0, loc_3, loc_4)
			if rt_load_i32(memory_at_0, loc_2) >= rt_load_i32(memory_at_0, loc_1) then
				break
			end
			loc_4 = rt_load_i64(memory_at_0, loc_1)
			rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
			rt_store_i64(memory_at_0, loc_2, loc_4)
			if rt_load_i32(memory_at_0, loc_1) >= rt_load_i32(memory_at_0, loc_0) then
				break
			end
			loc_4 = rt_load_i64(memory_at_0, loc_0)
			rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
			rt_store_i64(memory_at_0, loc_1, loc_4)
			break
		end
		break
	end
end
FUNC_LIST[122] = --[[ bool std::__2::__insertion_sort_incomplete[abi:ne180100]<std::__2::_ClassicAlgPolicy, Luau::BytecodeBuilder::expandJumps()::$_0&, Luau::BytecodeBuilder::Jump*>(Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::Jump*, Luau::BytecodeBuilder::expandJumps()::$_0&) ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 5, 5, 0, 1, 2, 3, }
											end)()
										end
										temp = br_map[1][rt_shr_i32(rt_sub_i32(loc_1, loc_0), 3)] or 4
										if temp < 3 then
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 6
												break
											else
												desired = 7
												break
											end
										elseif temp > 3 then
											if temp < 5 then
												desired = 4
												break
											else
												desired = 3
												break
											end
										else
											desired = 5
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = rt_sub_i32(loc_1, 8)
									if rt_load_i32(memory_at_0, loc_4) >= rt_load_i32(memory_at_0, loc_0) then
										desired = 3
										break
									end
									loc_2 = rt_load_i64(memory_at_0, loc_0)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = rt_sub_i32(loc_1, 8)
								loc_5 = rt_load_i32(memory_at_0, loc_4)
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
								if loc_6 >= rt_load_i32(memory_at_0, loc_0) then
									while true do
										if loc_5 >= loc_6 then
											desired = 3
											break
										end
										loc_2 = rt_load_i64(memory_at_0, loc_0 + 8)
										rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_4))
										rt_store_i64(memory_at_0, loc_4, loc_2)
										if rt_load_i32(memory_at_0, loc_0 + 8) >= rt_load_i32(memory_at_0, loc_0) then
											desired = 3
											break
										end
										loc_2 = rt_load_i64(memory_at_0, loc_0 + 8)
										desired = 1
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_2 = rt_load_i64(memory_at_0, loc_0)
								if loc_5 < loc_6 then
									while true do
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_3 = rt_load_i64(memory_at_0, loc_0 + 8)
								rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
								rt_store_i64(memory_at_0, loc_0, loc_3)
								if rt_load_i32(memory_at_0, loc_4) >= rt_wrap_i32_i64(loc_2) then
									desired = 3
									break
								end
								rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_4))
								rt_store_i64(memory_at_0, loc_4, loc_2)
								reg_0 = 1
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[121](loc_0, rt_add_i32(loc_0, 8), rt_add_i32(loc_0, 16), rt_sub_i32(loc_1, 8))
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = rt_add_i32(loc_0, 8)
						loc_5 = rt_add_i32(loc_0, 16)
						loc_4 = rt_add_i32(loc_0, 24)
						FUNC_LIST[121](loc_0, loc_8, loc_5, loc_4)
						loc_6 = rt_sub_i32(loc_1, 8)
						if rt_load_i32(memory_at_0, loc_6) >= rt_load_i32(memory_at_0, loc_0 + 24) then
							desired = 3
							break
						end
						loc_2 = rt_load_i64(memory_at_0, loc_0 + 24)
						rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_6))
						rt_store_i64(memory_at_0, loc_6, loc_2)
						if rt_load_i32(memory_at_0, loc_0 + 24) >= rt_load_i32(memory_at_0, loc_0 + 16) then
							desired = 3
							break
						end
						loc_3 = rt_load_i64(memory_at_0, loc_0 + 16)
						loc_2 = rt_load_i64(memory_at_0, loc_0 + 24)
						rt_store_i64(memory_at_0, loc_0 + 16, loc_2)
						rt_store_i64(memory_at_0, loc_0 + 24, loc_3)
						loc_4 = rt_wrap_i32_i64(loc_2)
						if loc_4 >= rt_load_i32(memory_at_0, loc_0 + 8) then
							desired = 3
							break
						end
						rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_0 + 8))
						rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
						if loc_4 >= rt_load_i32(memory_at_0, loc_0) then
							desired = 3
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 16)
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
						loc_6 = rt_load_i32(memory_at_0, loc_0)
						if loc_5 >= loc_6 then
							while true do
								if loc_4 >= loc_5 then
									desired = 4
									break
								end
								loc_2 = rt_load_i64(memory_at_0, loc_0 + 16)
								rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_0 + 8))
								rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
								if rt_wrap_i32_i64(loc_2) >= loc_6 then
									desired = 4
									break
								end
								rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_0))
								rt_store_i64(memory_at_0, loc_0, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = rt_load_i64(memory_at_0, loc_0)
						if loc_4 < loc_5 then
							while true do
								loc_3 = rt_load_i64(memory_at_0, loc_0 + 16)
								rt_store_i64(memory_at_0, loc_0 + 16, loc_2)
								rt_store_i64(memory_at_0, loc_0, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_load_i64(memory_at_0, loc_0 + 8)
						rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
						rt_store_i64(memory_at_0, loc_0, loc_3)
						if rt_wrap_i32_i64(loc_2) <= loc_4 then
							break
						end
						loc_3 = rt_load_i64(memory_at_0, loc_0 + 16)
						rt_store_i64(memory_at_0, loc_0 + 16, loc_2)
						rt_store_i64(memory_at_0, loc_0 + 8, loc_3)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = rt_add_i32(loc_0, 24)
					if loc_1 == loc_8 then
						break
					end
					loc_4 = rt_add_i32(loc_0, 16)
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_8) >= rt_load_i32(memory_at_0, loc_4) then
								break
							end
							loc_2 = rt_load_i64(memory_at_0, loc_8)
							loc_6 = rt_wrap_i32_i64(loc_2)
							loc_5 = loc_8
							while true do
								while true do
									loc_7 = loc_4
									rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_7))
									if loc_0 == loc_4 then
										while true do
											loc_7 = loc_0
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_5 = loc_7
									loc_4 = rt_sub_i32(loc_5, 8)
									if loc_6 < rt_load_i32(memory_at_0, loc_4) then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i64(memory_at_0, loc_7, loc_2)
							loc_9 = rt_add_i32(loc_9, 1)
							if loc_9 ~= 8 then
								break
							end
							reg_0 = (if loc_1 == rt_add_i32(loc_8, 8) then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_4 = loc_8
						loc_7 = rt_add_i32(loc_4, 8)
						loc_8 = loc_7
						if loc_1 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_4))
			rt_store_i64(memory_at_0, loc_4, loc_2)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_0))
		rt_store_i64(memory_at_0, loc_0, loc_2)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[123] = --[[ Luau::buildTypeMap(Luau::DenseHashMap<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>&, Luau::DenseHashMap<Luau::AstLocal*, LuauBytecodeType, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>&, Luau::DenseHashMap<Luau::AstExpr*, LuauBytecodeType, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExpr*>>&, Luau::AstNode*, char const*, Luau::DenseHashMap<Luau::AstName, unsigned char, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, Luau::BuiltinAstTypes const&, Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>> const&, Luau::DenseHashMap<Luau::AstName, Luau::Compile::Global, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, Luau::BytecodeBuilder&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8, loc_9)
	local loc_10 = 0
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_10
		rt_store_i64(memory_at_0, loc_10 + 48, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_10 + 68, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_10 + 76, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_10 + 84, 0)
		rt_store_i64(memory_at_0, loc_10 + 100, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_10 + 40, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_10 + 36, loc_9)
		rt_store_i32(memory_at_0, loc_10 + 32, loc_8)
		rt_store_i32(memory_at_0, loc_10 + 28, loc_7)
		rt_store_i32(memory_at_0, loc_10 + 24, loc_6)
		rt_store_i32(memory_at_0, loc_10 + 20, loc_5)
		rt_store_i32(memory_at_0, loc_10 + 16, loc_4)
		rt_store_i32(memory_at_0, loc_10 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_10 + 8, loc_1)
		rt_store_i32(memory_at_0, loc_10 + 4, loc_0)
		rt_store_i32(memory_at_0, loc_10, 10592)
		rt_store_i64(memory_at_0, loc_10 + 60, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_10 + 92, rt_i64_ZERO)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_10)
		rt_store_i32(memory_at_0, loc_10, 10592)
		loc_3 = rt_load_i32(memory_at_0, loc_10 + 92)
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[652](loc_3)
				rt_store_i64(memory_at_0, loc_10 + 92, rt_i64_ZERO)
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_10 + 72)
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[652](loc_3)
				rt_store_i64(memory_at_0, loc_10 + 72, rt_i64_ZERO)
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_10 + 60)
		if loc_3 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_10 + 64, loc_3)
				FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_10 + 68), loc_3))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_10 + 40)
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[652](loc_3)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_10, 112)
		break
	end
end
FUNC_LIST[124] = --[[ Luau::TypeMapVisitor::~TypeMapVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 10592)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 92)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 92, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 72, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 64, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 68), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 40)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[125] = --[[ Luau::TypeMapVisitor::~TypeMapVisitor()_146 ]] function(loc_0)
	local loc_1 = 0
	while true do
		rt_store_i32(memory_at_0, loc_0, 10592)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 92)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 92, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 72, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 64, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 68), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 40)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		FUNC_LIST[653](loc_0, 112)
		break
	end
end
FUNC_LIST[126] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprGroup*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 104)
			if loc_4 == loc_6 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
			loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 92)
			loc_2 = 0
			while true do
				loc_8 = bit_and(loc_3, loc_5)
				loc_9 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_7)
				loc_3 = rt_load_i32(memory_at_0, loc_9)
				if loc_3 ~= loc_4 then
					while true do
						if loc_3 == loc_6 then
							desired = 1
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_3 = rt_add_i32(loc_8, loc_2)
						if loc_2 <= loc_5 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_9 + 4))
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[127] = --[[ Luau::TypeMapVisitor::recordResolvedType(Luau::AstExpr*, Luau::AstType const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
		while true do
			if loc_2 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48876) then
				break
			end
			if rt_load_i32_u8(memory_at_0, loc_2 + 32) ~= 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 56)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 52)
			if loc_5 == loc_7 then
				break
			end
			loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), 1)
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 40)
			loc_1 = 0
			while true do
				loc_9 = bit_and(loc_4, loc_6)
				loc_10 = rt_add_i32(rt_shl_i32(loc_9, 3), loc_8)
				loc_4 = rt_load_i32(memory_at_0, loc_10)
				if loc_4 ~= loc_5 then
					while true do
						if loc_4 == loc_7 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						loc_4 = rt_add_i32(loc_9, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_10 + 4)
			if loc_1 == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 64)
			break
		end
		reg_0 = FUNC_LIST[24](rt_add_i32(loc_0, 92), rt_add_i32(loc_3, 12))
		rt_store_i32(memory_at_0, reg_0, loc_2)
		rt_store_i64(memory_at_0, loc_3 + 4, rt_i64_ZERO)
		reg_0 = FUNC_LIST[136](loc_2, rt_add_i32(loc_3, 4), rt_add_i32(loc_0, 40), 1, rt_load_i32(memory_at_0, loc_0 + 16), rt_load_i32(memory_at_0, loc_0 + 20), rt_load_i32(memory_at_0, loc_0 + 36))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[24](rt_load_i32(memory_at_0, loc_0 + 12), rt_add_i32(loc_3, 12))
		rt_store_i32(memory_at_0, reg_0, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[128] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprConstantBool*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_0 + 24))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[129] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprConstantNumber*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 84))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[130] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprConstantString*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 168))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[131] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
		rt_store_i32(memory_at_0, loc_5 + 12, loc_3)
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 32)
				if loc_2 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[127](loc_0, loc_1, loc_2)
						loc_2 = reg_0
						if loc_2 ~= 15 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_load_i32(memory_at_0, loc_0 + 80) == 0 then
					desired = 1
					break
				end
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 84)
				if loc_7 == loc_3 then
					desired = 1
					break
				end
				loc_4 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
				loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 76), 1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 72)
				loc_2 = 0
				while true do
					loc_9 = bit_and(loc_4, loc_6)
					loc_10 = rt_add_i32(rt_shl_i32(loc_9, 3), loc_8)
					loc_4 = rt_load_i32(memory_at_0, loc_10)
					if loc_4 ~= loc_3 then
						while true do
							if loc_4 == loc_7 then
								desired = 1
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_4 = rt_add_i32(loc_9, loc_2)
							if loc_2 <= loc_6 then
								desired = 3
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_10 + 4))
				loc_2 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[24](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(loc_5, 12))
			rt_store_i32(memory_at_0, reg_0, loc_2)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[132] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprCall*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
			if rt_load_i32(memory_at_0, loc_2 + 8) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 12)
			if loc_5 == loc_1 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), 1)
			loc_6 = rt_load_i32(memory_at_0, loc_2)
			loc_2 = 0
			while true do
				loc_7 = bit_and(loc_3, loc_4)
				loc_8 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_6)
				loc_3 = rt_load_i32(memory_at_0, loc_8)
				if loc_3 ~= loc_1 then
					while true do
						if loc_3 == loc_5 then
							desired = 1
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_3 = rt_add_i32(loc_7, loc_2)
						if loc_2 <= loc_4 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 4, 4, 2, 4, 4, 3, 0, 0, 4, 0, 0, 4, 4, 0, 1, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 4, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_8 + 4), 2)] or 4
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								if temp < 4 then
									desired = 2
									break
								else
									desired = 1
									break
								end
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 84))
						reg_0 = 1
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 168))
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_0 + 24))
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 252))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[133] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprIndexName*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 104)
				if loc_4 == loc_6 then
					break
				end
				loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 92)
				loc_2 = 0
				while true do
					loc_8 = bit_and(loc_3, loc_5)
					loc_9 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_7)
					loc_3 = rt_load_i32(memory_at_0, loc_9)
					if loc_3 ~= loc_4 then
						while true do
							if loc_3 == loc_6 then
								desired = 2
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_3 = rt_add_i32(loc_8, loc_2)
							if loc_2 <= loc_5 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_9 + 4)
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48884) then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 28)
				if loc_3 == 0 then
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_2 + 24)
				loc_5 = rt_add_i32(loc_2, rt_mul_i32(loc_3, 48))
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 28)
				while true do
					if loc_3 == rt_load_i32(memory_at_0, loc_2) then
						desired = 1
						break
					end
					loc_2 = rt_add_i32(loc_2, 48)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				if rt_load_i32(memory_at_0, loc_2 + 8) == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
				loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
				if loc_4 == loc_6 then
					break
				end
				loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), 1)
				loc_7 = rt_load_i32(memory_at_0, loc_2)
				loc_2 = 0
				while true do
					loc_8 = bit_and(loc_3, loc_5)
					loc_9 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_7)
					loc_3 = rt_load_i32(memory_at_0, loc_9)
					if loc_3 ~= loc_4 then
						while true do
							if loc_3 == loc_6 then
								desired = 2
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_3 = rt_add_i32(loc_8, loc_2)
							if loc_2 <= loc_5 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32(memory_at_0, loc_9 + 4) ~= 8 then
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
				if loc_2 == 0 then
					break
				end
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_2), 88)] or 4
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 2
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_2 + 1) == 0 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_2 + 1) == 0 then
							desired = 3
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_2 + 1) ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 84))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_2 + 20))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[134] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprIndexExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 104)
			if loc_4 == loc_6 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
			loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 92)
			loc_2 = 0
			while true do
				loc_8 = bit_and(loc_3, loc_5)
				loc_9 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_7)
				loc_3 = rt_load_i32(memory_at_0, loc_9)
				if loc_3 ~= loc_4 then
					while true do
						if loc_3 == loc_6 then
							desired = 1
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_3 = rt_add_i32(loc_8, loc_2)
						if loc_2 <= loc_5 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_9 + 4)
			if loc_2 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48884) then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_2 + 32)
			if loc_2 == 0 then
				break
			end
			reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_2 + 4))
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[135] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 36)
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 20)
		loc_8 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 48)
		rt_store_i32(memory_at_0, loc_2 + 24, 0)
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		FUNC_LIST[719](rt_add_i32(loc_2, 16), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 56), (if loc_3 ~= 0 then 3 else 2)))
		FUNC_LIST[726](rt_add_i32(loc_2, 16), 5)
		FUNC_LIST[726](rt_add_i32(loc_2, 16), rt_extend_i32_n8(rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 56), (if loc_3 ~= 0 then 1 else 0))))
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[726](rt_add_i32(loc_2, 16), 4)
				break
			end
		end
		while true do
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 56)
				if loc_4 ~= 0 then
					while true do
						loc_9 = rt_add_i32(loc_0, 40)
						loc_3 = rt_load_i32(memory_at_0, loc_1 + 52)
						loc_5 = rt_add_i32(loc_3, rt_shl_i32(loc_4, 2))
						loc_10 = rt_add_i32(loc_1, 32)
						loc_4 = 0
						while true do
							while true do
								loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 32)
								if loc_1 == 0 then
									while true do
										loc_1 = 15
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_1 = FUNC_LIST[136](loc_1, loc_10, loc_9, 1, loc_8, loc_7, loc_6)
								loc_1 = reg_1
								loc_4 = bit_or(loc_4, (if loc_1 ~= 15 then 1 else 0))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							FUNC_LIST[726](rt_add_i32(loc_2, 16), rt_extend_i32_n8(loc_1))
							loc_3 = rt_add_i32(loc_3, 4)
							if loc_5 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						if bit_and(loc_4, 1) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_2 + 27), 0) then
					desired = 1
					break
				end
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2 + 16), bit_and(rt_load_i32(memory_at_0, loc_2 + 24), 2147483647))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 16)
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 20)
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 24)
			if (if rt_lt_i32(loc_3, 0) then loc_5 else rt_shr_u32(loc_3, 24)) ~= 0 then
				while true do
					reg_0 = FUNC_LIST[137](rt_load_i32(memory_at_0, loc_0 + 4), rt_add_i32(loc_2, 12))
					loc_1 = reg_0
					if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 11), 0) then
						while true do
							FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1), bit_and(rt_load_i32(memory_at_0, loc_1 + 8), 2147483647))
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_1 + 4, loc_5)
					rt_store_i32(memory_at_0, loc_1, loc_4)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_3, 0) then
				break
			end
			FUNC_LIST[653](loc_4, bit_and(loc_3, 2147483647))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 32)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[136] = --[[ Luau::getType(Luau::AstType const*, Luau::AstArray<Luau::AstGenericType> const&, Luau::DenseHashMap<Luau::AstName, Luau::AstStatTypeAlias*, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, bool, char const*, Luau::DenseHashMap<Luau::AstName, unsigned char, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>> const&, Luau::BytecodeBuilder&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local desired
	while true do
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 4)
		while true do
			while true do
				while true do
					while true do
						while true do
							if loc_0 == 0 then
								while true do
									loc_9 = loc_1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_16 = rt_load_i32(memory_at_0, 48876)
							if loc_7 ~= loc_16 then
								while true do
									loc_9 = loc_1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_10 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), 1)
							loc_15 = rt_load_i32(memory_at_0, loc_2)
							loc_12 = rt_load_i32(memory_at_0, loc_2 + 12)
							loc_17 = rt_load_i32(memory_at_0, loc_2 + 8)
							loc_9 = loc_1
							while true do
								loc_13 = 15
								if rt_load_i32_u8(memory_at_0, loc_0 + 32) ~= 0 then
									desired = 1
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 56)
								if loc_17 == 0 then
									while true do
										loc_9 = loc_1
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								if loc_7 == loc_12 then
									desired = 3
									break
								end
								loc_8 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
								loc_0 = 0
								while true do
									loc_11 = bit_and(loc_8, loc_10)
									loc_14 = rt_add_i32(rt_shl_i32(loc_11, 3), loc_15)
									loc_8 = rt_load_i32(memory_at_0, loc_14)
									if loc_8 ~= loc_7 then
										while true do
											if loc_8 == loc_12 then
												desired = 3
												break
											end
											loc_0 = rt_add_i32(loc_0, 1)
											loc_8 = rt_add_i32(loc_11, loc_0)
											if loc_0 <= loc_10 then
												desired = 7
												break
											end
											desired = 3
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_0 = rt_load_i32(memory_at_0, loc_14 + 4)
								if bit_and(bit_or((if loc_0 == 0 then 1 else 0), bit_xor(loc_3, 4294967295)), 1) ~= 0 then
									desired = 4
									break
								end
								loc_9 = rt_add_i32(loc_0, 48)
								loc_0 = rt_load_i32(memory_at_0, loc_0 + 64)
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 4)
								loc_3 = 0
								if loc_0 == 0 then
									desired = 5
									break
								end
								if loc_7 == loc_16 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, 48884) ~= loc_7 then
							desired = 2
							break
						end
						reg_0 = 4
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_0 ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = rt_load_i32(memory_at_0, loc_9 + 4)
				if loc_8 ~= 0 then
					while true do
						loc_0 = rt_load_i32(memory_at_0, loc_9)
						loc_8 = rt_add_i32(loc_0, rt_mul_i32(loc_8, 24))
						while true do
							if loc_7 == rt_load_i32(memory_at_0, loc_0) then
								desired = 1
								break
							end
							loc_0 = rt_add_i32(loc_0, 24)
							if loc_8 ~= loc_0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					while true do
						if loc_4 ~= 0 then
							while true do
								if loc_7 == 0 then
									desired = 3
									break
								end
								reg_0 = FUNC_LIST[584](loc_7, loc_4)
								if reg_0 ~= 0 then
									desired = 4
									break
								end
								reg_0 = 8
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_7 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[584](loc_7, 3519)
					if reg_0 == 0 then
						while true do
							reg_0 = 0
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_7, 3444)
					if reg_0 == 0 then
						while true do
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_7, 3019)
					if reg_0 == 0 then
						while true do
							reg_0 = 2
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_7, 3838)
					if reg_0 == 0 then
						while true do
							reg_0 = 3
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_7, 5807)
					if reg_0 == 0 then
						while true do
							reg_0 = 6
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_7, 2993)
					if reg_0 == 0 then
						while true do
							reg_0 = 9
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[584](loc_7, 1063)
					if reg_0 == 0 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[584](loc_7, 3160)
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_13 = 7
				if rt_load_i32(memory_at_0, loc_5 + 8) == 0 then
					desired = 1
					break
				end
				loc_12 = rt_load_i32(memory_at_0, loc_5 + 12)
				if loc_12 == loc_7 then
					desired = 1
					break
				end
				loc_8 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
				loc_10 = rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 4), 1)
				loc_15 = rt_load_i32(memory_at_0, loc_5)
				loc_0 = 0
				while true do
					loc_11 = bit_and(loc_8, loc_10)
					loc_14 = rt_add_i32(rt_shl_i32(loc_11, 3), loc_15)
					loc_8 = rt_load_i32(memory_at_0, loc_14)
					if loc_8 ~= loc_7 then
						while true do
							if loc_8 == loc_12 then
								desired = 1
								break
							end
							loc_0 = rt_add_i32(loc_0, 1)
							loc_8 = rt_add_i32(loc_11, loc_0)
							if loc_0 <= loc_10 then
								desired = 3
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[101](loc_6, rt_load_i32_u8(memory_at_0, loc_14 + 4))
				reg_0 = rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_14 + 4), 4294967232)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_7 == rt_load_i32(memory_at_0, 48892) then
				while true do
					reg_0 = 5
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_13 = 15
			if rt_load_i32(memory_at_0, 48908) ~= loc_7 then
				break
			end
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 28)
			if loc_7 == 0 then
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 24)
			loc_10 = rt_add_i32(loc_0, rt_shl_i32(loc_7, 2))
			loc_8 = 256
			loc_11 = 0
			while true do
				while true do
					reg_0 = FUNC_LIST[136](rt_load_i32(memory_at_0, loc_0), loc_9, loc_2, loc_3, loc_4, loc_5, loc_6)
					loc_7 = reg_0
					if loc_7 == 0 then
						while true do
							loc_11 = 1
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 == 256 then
						while true do
							loc_8 = loc_7
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_7 ~= loc_8 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_0 = rt_add_i32(loc_0, 4)
				if loc_10 ~= loc_0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_8 == 256 then
				break
			end
			loc_13 = bit_or(loc_8, (if bit_and(loc_11, 1) ~= 0 then rt_shl_i32((if loc_8 ~= 15 then 1 else 0), 7) else 0))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_13
		break
	end
	return reg_0
end
FUNC_LIST[137] = --[[ Luau::DenseHashMap<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::operator[](Luau::AstExprFunction* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 4), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[149](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 4))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[138] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprUnary*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, 2, }
								end)()
							end
							temp = br_map[1][rt_load_i32(memory_at_0, loc_1 + 24)] or 3
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_0 + 24))
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 28)
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 104)
						if loc_4 == loc_7 then
							break
						end
						loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
						loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
						loc_8 = rt_load_i32(memory_at_0, loc_0 + 92)
						loc_2 = 0
						while true do
							loc_9 = bit_and(loc_3, loc_6)
							loc_5 = rt_add_i32(rt_shl_i32(loc_9, 3), loc_8)
							loc_3 = rt_load_i32(memory_at_0, loc_5)
							if loc_4 == loc_3 then
								desired = 4
								break
							end
							loc_5 = 0
							if loc_3 == loc_7 then
								desired = 4
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_3 = rt_add_i32(loc_9, loc_2)
							if loc_2 <= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
					if rt_load_i32(memory_at_0, loc_2 + 8) == 0 then
						desired = 2
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 28)
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 12)
					if loc_4 == loc_7 then
						desired = 2
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
					loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), 1)
					loc_8 = rt_load_i32(memory_at_0, loc_2)
					loc_2 = 0
					while true do
						loc_9 = bit_and(loc_3, loc_6)
						loc_10 = rt_add_i32(rt_shl_i32(loc_9, 3), loc_8)
						loc_3 = rt_load_i32(memory_at_0, loc_10)
						if loc_3 ~= loc_4 then
							while true do
								if loc_3 == loc_7 then
									desired = 2
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_9, loc_2)
								if loc_2 <= loc_6 then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_5 == 0 then
						desired = 2
						break
					end
					while true do
						if not br_map[2] then
							br_map[2] = (function()
								return { [0] = 0, 2, 2, 2, 2, 2, 3, }
							end)()
						end
						temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_10 + 4), 2)] or 2
						if temp < 2 then
							break
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 84))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_5 + 4))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[139] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprBinary*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
				if loc_2 <= 15 then
					while true do
						loc_2 = rt_shl_i32(1, loc_2)
						if bit_and(loc_2, 16128) ~= 0 then
							desired = 1
							break
						end
						if bit_and(loc_2, 49280) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_12 = rt_load_i32(memory_at_0, loc_0 + 100)
					if loc_12 == 0 then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 28)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 104)
					if loc_4 == loc_9 then
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
					loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 92)
					loc_2 = 0
					while true do
						loc_7 = bit_and(loc_5, loc_6)
						loc_3 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_10)
						loc_5 = rt_load_i32(memory_at_0, loc_3)
						if loc_4 == loc_5 then
							desired = 3
							break
						end
						loc_3 = 0
						if loc_5 == loc_9 then
							desired = 3
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_5 = rt_add_i32(loc_7, loc_2)
						if loc_2 <= loc_6 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if rt_load_i32(memory_at_0, loc_8 + 8) == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 28)
				loc_9 = rt_load_i32(memory_at_0, loc_8 + 12)
				if loc_4 == loc_9 then
					break
				end
				loc_11 = (if loc_3 ~= 0 then rt_add_i32(loc_3, 4) else 0)
				loc_5 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_8 + 4), 1)
				loc_10 = rt_load_i32(memory_at_0, loc_8)
				loc_2 = 0
				while true do
					loc_7 = bit_and(loc_5, loc_6)
					loc_13 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_10)
					loc_5 = rt_load_i32(memory_at_0, loc_13)
					if loc_5 ~= loc_4 then
						while true do
							if loc_5 == loc_9 then
								desired = 2
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_5 = rt_add_i32(loc_7, loc_2)
							if loc_2 <= loc_6 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 == 0 then
					break
				end
				loc_7 = 0
				while true do
					if loc_12 == 0 then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 32)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 104)
					if loc_4 == loc_9 then
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 92)
					loc_2 = 0
					while true do
						loc_6 = bit_and(loc_3, loc_5)
						loc_7 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_10)
						loc_3 = rt_load_i32(memory_at_0, loc_7)
						if loc_4 == loc_3 then
							desired = 3
							break
						end
						loc_7 = 0
						if loc_3 == loc_9 then
							desired = 3
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_3 = rt_add_i32(loc_6, loc_2)
						if loc_2 <= loc_5 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 32)
				loc_9 = rt_load_i32(memory_at_0, loc_8 + 12)
				if loc_4 == loc_9 then
					break
				end
				loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_8 + 4), 1)
				loc_10 = rt_load_i32(memory_at_0, loc_8)
				loc_2 = 0
				while true do
					loc_6 = bit_and(loc_3, loc_5)
					loc_8 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_10)
					loc_3 = rt_load_i32(memory_at_0, loc_8)
					if loc_3 ~= loc_4 then
						while true do
							if loc_3 == loc_9 then
								desired = 2
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_3 = rt_add_i32(loc_6, loc_2)
							if loc_2 <= loc_5 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_7 == 0 then
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_13 + 4)
				if loc_2 == 8 then
					while true do
						reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_11))
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = rt_load_i32(memory_at_0, loc_8 + 4)
				if loc_3 == 8 then
					while true do
						reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_7 + 4))
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 ~= 2 then
					break
				end
				if loc_3 ~= 2 then
					break
				end
				reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_11))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_0 + 24))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[140] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprTypeAssertion*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_1 + 28))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[141] = --[[ Luau::TypeMapVisitor::visit(Luau::AstExprIfElse*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 40)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 32)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 104)
			if loc_5 == loc_7 then
				break
			end
			loc_6 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
			loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 92)
			loc_2 = 0
			while true do
				loc_4 = bit_and(loc_3, loc_6)
				loc_10 = rt_add_i32(rt_shl_i32(loc_4, 3), loc_8)
				loc_6 = rt_load_i32(memory_at_0, loc_10)
				if loc_5 == loc_6 then
					desired = 1
					break
				end
				loc_10 = 0
				if loc_6 == loc_7 then
					desired = 1
					break
				end
				loc_2 = rt_add_i32(loc_2, 1)
				loc_6 = rt_add_i32(loc_4, loc_2)
				if loc_2 <= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
			if rt_load_i32(memory_at_0, loc_9 + 8) == 0 then
				break
			end
			loc_8 = rt_load_i32(memory_at_0, loc_1 + 32)
			loc_6 = rt_load_i32(memory_at_0, loc_9 + 12)
			if loc_8 == loc_6 then
				while true do
					reg_0 = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_4 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_9 + 4), 1)
					loc_11 = rt_load_i32(memory_at_0, loc_9)
					loc_2 = 0
					while true do
						while true do
							loc_7 = bit_and(loc_4, loc_5)
							loc_3 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_11)
							loc_4 = rt_load_i32(memory_at_0, loc_3)
							if loc_8 == loc_4 then
								break
							end
							loc_3 = 0
							if loc_4 == loc_6 then
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_4 = rt_add_i32(loc_7, loc_2)
							if loc_2 <= loc_5 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						break
					end
					reg_0 = (if loc_3 ~= 0 then rt_add_i32(loc_3, 4) else 0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_12 = reg_0
			loc_7 = rt_load_i32(memory_at_0, loc_1 + 40)
			if loc_6 == loc_7 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_9 + 4), 1)
			loc_8 = rt_load_i32(memory_at_0, loc_9)
			loc_2 = 0
			while true do
				loc_5 = bit_and(loc_3, loc_4)
				loc_11 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_8)
				loc_3 = rt_load_i32(memory_at_0, loc_11)
				if loc_3 ~= loc_7 then
					while true do
						if loc_3 == loc_6 then
							desired = 1
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_3 = rt_add_i32(loc_5, loc_2)
						if loc_2 <= loc_4 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_10 == 0 then
				break
			end
			if loc_12 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_12) ~= rt_load_i32(memory_at_0, loc_11 + 4) then
				break
			end
			reg_0 = FUNC_LIST[127](loc_0, loc_1, rt_load_i32(memory_at_0, loc_10 + 4))
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[142] = --[[ Luau::TypeMapVisitor::visit(Luau::AstStatBlock*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[143](loc_0, loc_1)
		loc_5 = reg_0
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 32)
			if loc_4 == 0 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
			loc_1 = loc_6
			loc_7 = bit_and(loc_4, 3)
			if loc_7 ~= 0 then
				while true do
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_1)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
						loc_1 = rt_add_i32(loc_1, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_7 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_4, 1), 1073741823) <= 2 then
				break
			end
			loc_3 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
				loc_1 = rt_add_i32(loc_1, 16)
				if loc_3 ~= loc_1 then
					continue
				end
				break
			end
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 64)
		if rt_shr_i32(rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 60)), 3) > loc_5 then
			while true do
				loc_3 = rt_add_i32(loc_0, 40)
				while true do
					loc_2 = rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4))
					reg_0 = FUNC_LIST[8](loc_3, rt_sub_i32(loc_1, 8))
					rt_store_i32(memory_at_0, reg_0, loc_2)
					loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 8)
					rt_store_i32(memory_at_0, loc_0 + 64, loc_1)
					if loc_5 < rt_shr_i32(rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 60)), 3) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[143] = --[[ Luau::TypeMapVisitor::pushTypeAliases(Luau::AstStatBlock*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local desired
	while true do
		loc_12 = rt_load_i32(memory_at_0, loc_0 + 60)
		loc_13 = rt_load_i32(memory_at_0, loc_0 + 64)
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
				if loc_2 ~= 0 then
					while true do
						loc_11 = rt_add_i32(loc_0, 60)
						loc_8 = rt_load_i32(memory_at_0, loc_1 + 28)
						loc_14 = rt_add_i32(loc_8, rt_shl_i32(loc_2, 2))
						loc_15 = rt_add_i32(loc_0, 40)
						while true do
							while true do
								loc_6 = rt_load_i32(memory_at_0, loc_8)
								if loc_6 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, loc_6 + 4) ~= rt_load_i32(memory_at_0, 48836) then
									break
								end
								reg_0 = FUNC_LIST[8](loc_15, rt_add_i32(loc_6, 28))
								loc_16 = reg_0
								loc_4 = rt_load_i32(memory_at_0, loc_16)
								loc_7 = rt_load_i32(memory_at_0, loc_6 + 28)
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 64)
									loc_9 = rt_load_i32(memory_at_0, loc_0 + 68)
									if loc_1 < loc_9 then
										while true do
											rt_store_i32(memory_at_0, loc_1 + 4, loc_4)
											rt_store_i32(memory_at_0, loc_1, loc_7)
											loc_4 = rt_add_i32(loc_1, 8)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_3 = rt_load_i32(memory_at_0, loc_11)
									loc_17 = rt_shr_i32(rt_sub_i32(loc_1, loc_3), 3)
									loc_2 = rt_add_i32(loc_17, 1)
									if loc_2 >= 536870912 then
										desired = 2
										break
									end
									loc_5 = rt_sub_i32(loc_9, loc_3)
									loc_10 = rt_shr_i32(loc_5, 2)
									loc_5 = (if loc_5 >= 2147483640 then 536870911 else (if loc_2 < loc_10 then loc_10 else loc_2))
									if loc_5 ~= 0 then
										while true do
											if loc_5 >= 536870912 then
												desired = 1
												break
											end
											reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 3))
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = 0
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_10 = reg_0
									loc_2 = rt_add_i32(loc_10, rt_shl_i32(loc_17, 3))
									rt_store_i32(memory_at_0, loc_2 + 4, loc_4)
									rt_store_i32(memory_at_0, loc_2, loc_7)
									loc_7 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_10)
									loc_4 = rt_add_i32(loc_2, 8)
									if loc_1 ~= loc_3 then
										while true do
											while true do
												loc_2 = rt_sub_i32(loc_2, 8)
												loc_1 = rt_sub_i32(loc_1, 8)
												rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
												if loc_1 ~= loc_3 then
													continue
												end
												break
											end
											if desired then
												break
											end
											loc_9 = rt_load_i32(memory_at_0, loc_0 + 68)
											reg_0 = rt_load_i32(memory_at_0, loc_0 + 60)
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_3
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_3 = reg_0
									rt_store_i32(memory_at_0, loc_0 + 68, loc_7)
									rt_store_i32(memory_at_0, loc_0 + 64, loc_4)
									rt_store_i32(memory_at_0, loc_0 + 60, loc_2)
									if loc_3 == 0 then
										break
									end
									FUNC_LIST[653](loc_3, rt_sub_i32(loc_9, loc_3))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_0 + 64, loc_4)
								rt_store_i32(memory_at_0, loc_16, loc_6)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_8 = rt_add_i32(loc_8, 4)
							if loc_14 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_shr_i32(rt_sub_i32(loc_13, loc_12), 3)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_11)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[144] = --[[ Luau::TypeMapVisitor::visit(Luau::AstStatRepeat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[143](loc_0, rt_load_i32(memory_at_0, loc_1 + 32))
		loc_6 = reg_0
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 32)
			if loc_5 == 0 then
				break
			end
			loc_7 = rt_load_i32(memory_at_0, loc_2 + 28)
			loc_2 = loc_7
			loc_8 = bit_and(loc_5, 3)
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_0)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_8 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_5, 1), 1073741823) <= 2 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_7)
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_2 = rt_add_i32(loc_2, 16)
				if loc_4 ~= loc_2 then
					continue
				end
				break
			end
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 64)
		if rt_shr_i32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 60)), 3) > loc_6 then
			while true do
				loc_4 = rt_add_i32(loc_0, 40)
				while true do
					loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4))
					reg_0 = FUNC_LIST[8](loc_4, rt_sub_i32(loc_2, 8))
					rt_store_i32(memory_at_0, reg_0, loc_3)
					loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 8)
					rt_store_i32(memory_at_0, loc_0 + 64, loc_2)
					if loc_6 < rt_shr_i32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 60)), 3) then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[145] = --[[ Luau::TypeMapVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			loc_6 = rt_load_i32(memory_at_0, loc_1 + 40)
			if loc_6 == 0 then
				break
			end
			loc_9 = bit_and(rt_sub_i32(loc_6, 1), 1073741823)
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 36)
			loc_2 = loc_5
			loc_7 = bit_and(loc_6, 3)
			if loc_7 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_0)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_9 <= 2 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_5)
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_2 = rt_add_i32(loc_2, 16)
				if loc_4 ~= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_10 = rt_load_i32(memory_at_0, loc_1 + 32)
		if loc_10 ~= 0 then
			while true do
				loc_11 = rt_add_i32(loc_0, 72)
				loc_3 = 0
				while true do
					loc_4 = rt_shl_i32(loc_3, 2)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_1 + 28)))
					rt_store_i32(memory_at_0, loc_8 + 12, loc_2)
					while true do
						if rt_load_i32(memory_at_0, loc_2 + 32) ~= 0 then
							break
						end
						if rt_load_i32(memory_at_0, loc_1 + 40) <= loc_3 then
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
							break
						end
						loc_5 = rt_load_i32(memory_at_0, rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_1 + 36)))
						loc_9 = rt_load_i32(memory_at_0, loc_0 + 104)
						if loc_5 == loc_9 then
							break
						end
						loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
						loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
						loc_12 = rt_load_i32(memory_at_0, loc_0 + 92)
						loc_2 = 0
						while true do
							loc_6 = bit_and(loc_4, loc_7)
							loc_13 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_12)
							loc_4 = rt_load_i32(memory_at_0, loc_13)
							if loc_4 ~= loc_5 then
								while true do
									if loc_4 == loc_9 then
										desired = 3
										break
									end
									loc_2 = rt_add_i32(loc_2, 1)
									loc_4 = rt_add_i32(loc_6, loc_2)
									if loc_2 <= loc_7 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_2 = rt_load_i32(memory_at_0, loc_13 + 4)
						reg_0 = FUNC_LIST[24](loc_11, rt_add_i32(loc_8, 12))
						rt_store_i32(memory_at_0, reg_0, loc_2)
						loc_10 = rt_load_i32(memory_at_0, loc_1 + 32)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					if loc_10 > loc_3 then
						continue
					end
					break
				end
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[146] = --[[ Luau::TypeMapVisitor::visit(Luau::AstStatForIn*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_6 = rt_load_i32(memory_at_0, loc_1 + 40)
			if loc_6 == 0 then
				break
			end
			loc_8 = bit_and(rt_sub_i32(loc_6, 1), 1073741823)
			loc_7 = rt_load_i32(memory_at_0, loc_1 + 36)
			loc_2 = loc_7
			loc_5 = bit_and(loc_6, 3)
			if loc_5 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_0)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_5 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 <= 2 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_7)
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_0)
				loc_2 = rt_add_i32(loc_2, 16)
				if loc_4 ~= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
				if loc_3 == 2 then
					while true do
						loc_3 = 2
						if rt_load_i32(memory_at_0, loc_1 + 40) ~= 1 then
							desired = 2
							break
						end
						while true do
							while true do
								while true do
									loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 36))
									if loc_3 == 0 then
										break
									end
									if rt_load_i32(memory_at_0, loc_3 + 4) ~= rt_load_i32(memory_at_0, 48636) then
										break
									end
									if rt_load_i32(memory_at_0, loc_3 + 32) ~= 1 then
										break
									end
									loc_2 = rt_load_i32(memory_at_0, loc_3 + 24)
									if loc_2 == 0 then
										desired = 4
										break
									end
									if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48620) then
										desired = 4
										break
									end
									loc_10 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 28))
									loc_2 = rt_load_i32(memory_at_0, loc_2 + 24)
									while true do
										while true do
											loc_9 = rt_load_i32(memory_at_0, loc_0 + 32)
											loc_12 = rt_load_i32(memory_at_0, loc_9 + 8)
											if loc_12 == 0 then
												break
											end
											loc_7 = rt_load_i32(memory_at_0, loc_9 + 12)
											if loc_7 == loc_2 then
												break
											end
											loc_4 = bit_xor(rt_shr_u32(loc_2, 4), rt_shr_u32(loc_2, 9))
											loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_9 + 4), 1)
											loc_8 = rt_load_i32(memory_at_0, loc_9)
											loc_3 = 0
											while true do
												loc_6 = bit_and(loc_4, loc_5)
												loc_11 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_8)
												loc_4 = rt_load_i32(memory_at_0, loc_11)
												if loc_4 ~= loc_2 then
													while true do
														if loc_4 == loc_7 then
															desired = 8
															break
														end
														loc_3 = rt_add_i32(loc_3, 1)
														loc_4 = rt_add_i32(loc_6, loc_3)
														if loc_3 <= loc_5 then
															desired = 9
															break
														end
														desired = 8
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											if rt_load_i32(memory_at_0, loc_11 + 4) ~= 0 then
												desired = 7
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if loc_2 == 0 then
											break
										end
										reg_0 = FUNC_LIST[584](loc_2, 2066)
										if reg_0 ~= 0 then
											break
										end
										if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
											desired = 4
											break
										end
										loc_6 = rt_load_i32(memory_at_0, loc_0 + 104)
										if loc_6 == loc_10 then
											desired = 4
											break
										end
										loc_3 = bit_xor(rt_shr_u32(loc_10, 4), rt_shr_u32(loc_10, 9))
										loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
										loc_7 = rt_load_i32(memory_at_0, loc_0 + 92)
										loc_2 = 0
										while true do
											loc_5 = bit_and(loc_3, loc_4)
											loc_8 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_7)
											loc_3 = rt_load_i32(memory_at_0, loc_8)
											if loc_3 ~= loc_10 then
												while true do
													if loc_3 == loc_6 then
														desired = 4
														break
													end
													loc_2 = rt_add_i32(loc_2, 1)
													loc_3 = rt_add_i32(loc_5, loc_2)
													if loc_2 <= loc_4 then
														desired = 8
														break
													end
													desired = 4
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										loc_2 = rt_load_i32(memory_at_0, loc_8 + 4)
										if loc_2 == 0 then
											desired = 4
											break
										end
										if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48884) then
											desired = 4
											break
										end
										loc_2 = rt_load_i32(memory_at_0, loc_2 + 32)
										if loc_2 == 0 then
											desired = 4
											break
										end
										reg_0 = FUNC_LIST[147](loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28)), rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), 84))
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									while true do
										if loc_12 == 0 then
											break
										end
										loc_7 = rt_load_i32(memory_at_0, loc_9 + 12)
										if loc_7 == loc_2 then
											break
										end
										loc_4 = bit_xor(rt_shr_u32(loc_2, 4), rt_shr_u32(loc_2, 9))
										loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_9 + 4), 1)
										loc_8 = rt_load_i32(memory_at_0, loc_9)
										loc_3 = 0
										while true do
											loc_6 = bit_and(loc_4, loc_5)
											loc_11 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_8)
											loc_4 = rt_load_i32(memory_at_0, loc_11)
											if loc_4 ~= loc_2 then
												while true do
													if loc_4 == loc_7 then
														desired = 7
														break
													end
													loc_3 = rt_add_i32(loc_3, 1)
													loc_4 = rt_add_i32(loc_6, loc_3)
													if loc_3 <= loc_5 then
														desired = 8
														break
													end
													desired = 7
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if rt_load_i32(memory_at_0, loc_11 + 4) ~= 0 then
											desired = 4
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									if loc_2 == 0 then
										desired = 4
										break
									end
									reg_0 = FUNC_LIST[584](loc_2, 2067)
									if reg_0 ~= 0 then
										desired = 4
										break
									end
									reg_0 = FUNC_LIST[148](loc_0, loc_10)
									loc_2 = reg_0
									if loc_2 == 0 then
										desired = 4
										break
									end
									reg_0 = FUNC_LIST[147](loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28)), rt_load_i32(memory_at_0, loc_2))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
									desired = 4
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 104)
								if loc_7 == loc_3 then
									desired = 4
									break
								end
								loc_4 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
								loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
								loc_8 = rt_load_i32(memory_at_0, loc_0 + 92)
								loc_2 = 0
								while true do
									loc_6 = bit_and(loc_4, loc_5)
									loc_11 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_8)
									loc_4 = rt_load_i32(memory_at_0, loc_11)
									if loc_4 ~= loc_3 then
										while true do
											if loc_4 == loc_7 then
												desired = 4
												break
											end
											loc_2 = rt_add_i32(loc_2, 1)
											loc_4 = rt_add_i32(loc_6, loc_2)
											if loc_2 <= loc_5 then
												desired = 6
												break
											end
											desired = 4
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_11 + 4)
								if loc_2 == 0 then
									desired = 4
									break
								end
								if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48884) then
									desired = 4
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_2 + 32)
								if loc_2 == 0 then
									desired = 4
									break
								end
								reg_0 = FUNC_LIST[147](loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28)), rt_load_i32(memory_at_0, loc_2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[147](loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28) + 4), rt_load_i32(memory_at_0, loc_2 + 4))
							break
						end
						if desired then
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_1 + 32)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = reg_0
				if loc_3 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			while true do
				loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2)))
				loc_5 = rt_load_i32(memory_at_0, loc_4 + 32)
				if loc_5 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[147](loc_0, loc_4, loc_5)
						reg_0 = rt_load_i32(memory_at_0, loc_1 + 32)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_3 = reg_0
				loc_2 = rt_add_i32(loc_2, 1)
				if loc_3 > loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 44)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[147] = --[[ Luau::TypeMapVisitor::recordResolvedType(Luau::AstLocal*, Luau::AstType const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
		while true do
			if loc_2 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48876) then
				break
			end
			if rt_load_i32_u8(memory_at_0, loc_2 + 32) ~= 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 56)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 52)
			if loc_5 == loc_7 then
				break
			end
			loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), 1)
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 40)
			loc_1 = 0
			while true do
				loc_9 = bit_and(loc_4, loc_6)
				loc_10 = rt_add_i32(rt_shl_i32(loc_9, 3), loc_8)
				loc_4 = rt_load_i32(memory_at_0, loc_10)
				if loc_4 ~= loc_5 then
					while true do
						if loc_4 == loc_7 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						loc_4 = rt_add_i32(loc_9, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_10 + 4)
			if loc_1 == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 64)
			break
		end
		reg_0 = FUNC_LIST[24](rt_add_i32(loc_0, 72), rt_add_i32(loc_3, 12))
		rt_store_i32(memory_at_0, reg_0, loc_2)
		rt_store_i64(memory_at_0, loc_3 + 4, rt_i64_ZERO)
		reg_0 = FUNC_LIST[136](loc_2, rt_add_i32(loc_3, 4), rt_add_i32(loc_0, 40), 1, rt_load_i32(memory_at_0, loc_0 + 16), rt_load_i32(memory_at_0, loc_0 + 20), rt_load_i32(memory_at_0, loc_0 + 36))
		loc_2 = reg_0
		if loc_2 ~= 15 then
			while true do
				reg_0 = FUNC_LIST[24](rt_load_i32(memory_at_0, loc_0 + 8), rt_add_i32(loc_3, 12))
				rt_store_i32(memory_at_0, reg_0, loc_2)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[148] = --[[ Luau::TypeMapVisitor::tryGetTableIndexer(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 100) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 104)
			if loc_5 == loc_1 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 96), 1)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 92)
			loc_0 = 0
			while true do
				loc_7 = bit_and(loc_3, loc_4)
				loc_8 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_6)
				loc_3 = rt_load_i32(memory_at_0, loc_8)
				if loc_3 ~= loc_1 then
					while true do
						if loc_3 == loc_5 then
							desired = 1
							break
						end
						loc_0 = rt_add_i32(loc_0, 1)
						loc_3 = rt_add_i32(loc_7, loc_0)
						if loc_0 <= loc_4 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_8 + 4)
			if loc_0 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 4) ~= rt_load_i32(memory_at_0, 48884) then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[149] = --[[ Luau::detail::DenseHashTable<Luau::AstExprFunction*, std::__2::pair<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, std::__2::pair<Luau::AstExprFunction* const, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, Luau::detail::ItemInterfaceMap<Luau::AstExprFunction*, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_12 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_7 = (if loc_1 ~= 0 then rt_shl_i32(loc_1, 1) else 16)
			if loc_7 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = bit_and(loc_7, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_7, 4))
			loc_8 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_7 >= 4 then
				while true do
					loc_9 = bit_and(loc_7, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_8)
						rt_store_i64(memory_at_0, loc_1 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
						rt_store_i64(memory_at_0, loc_1 + 20, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 28, 0)
						rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 44, 0)
						rt_store_i64(memory_at_0, loc_1 + 36, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 48, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 60, 0)
						rt_store_i64(memory_at_0, loc_1 + 52, rt_i64_ZERO)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_6 = rt_add_i32(loc_6, 4)
						if loc_9 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_4 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_8)
						rt_store_i64(memory_at_0, loc_1 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_5 = rt_add_i32(loc_5, 1)
						if loc_4 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				if loc_1 ~= 0 then
					while true do
						loc_3 = rt_sub_i32(loc_7, 1)
						while true do
							loc_9 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(loc_10, 4))
							loc_6 = rt_load_i32(memory_at_0, loc_9)
							if loc_6 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
								while true do
									loc_2 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
									loc_1 = 0
									while true do
										while true do
											loc_5 = bit_and(loc_2, loc_3)
											loc_4 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_8)
											loc_2 = rt_load_i32(memory_at_0, loc_4)
											if loc_2 == loc_12 then
												while true do
													rt_store_i32(memory_at_0, loc_4, loc_6)
													desired = 6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											end
											if loc_2 == loc_6 then
												desired = 6
												break
											end
											loc_1 = rt_add_i32(loc_1, 1)
											loc_2 = rt_add_i32(loc_5, loc_1)
											if loc_1 <= loc_3 then
												continue
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										loc_4 = 0
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_4, loc_6)
									loc_11 = loc_4
									loc_1 = rt_add_i32(loc_11, 4)
									if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 15), 0) then
										while true do
											FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 4), bit_and(rt_load_i32(memory_at_0, loc_4 + 12), 2147483647))
											break
										end
										if desired then
											break
										end
									end
									rt_store_i64(memory_at_0, loc_11 + 4, rt_load_i64(memory_at_0, loc_9 + 4))
									rt_store_i32(memory_at_0, loc_11 + 12, rt_load_i32(memory_at_0, loc_9 + 12))
									rt_store_i32_n8(memory_at_0, loc_9 + 15, 0)
									rt_store_i32_n8(memory_at_0, loc_9 + 4, 0)
									reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									reg_0 = loc_1
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_1 = reg_0
							loc_10 = rt_add_i32(loc_10, 1)
							if loc_1 > loc_10 then
								continue
							end
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, loc_7)
						loc_5 = rt_load_i32(memory_at_0, loc_0)
						rt_store_i32(memory_at_0, loc_0, loc_8)
						if loc_5 == 0 then
							desired = 1
							break
						end
						if loc_1 == 0 then
							desired = 2
							break
						end
						loc_2 = 0
						while true do
							loc_3 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_5)
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 15), 0) then
								while true do
									loc_13 = loc_3
									loc_3 = rt_add_i32(loc_13, 4)
									FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3), bit_and(rt_load_i32(memory_at_0, loc_13 + 12), 2147483647))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_2 = rt_add_i32(loc_2, 1)
							if loc_2 ~= loc_1 then
								continue
							end
							break
						end
						if desired then
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 4, loc_7)
				loc_5 = rt_load_i32(memory_at_0, loc_0)
				rt_store_i32(memory_at_0, loc_0, loc_8)
				if loc_5 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[652](loc_5)
			break
		end
		break
	end
end
FUNC_LIST[150] = --[[ Luau::Compile::modelCost(Luau::AstNode*, Luau::AstLocal* const*, unsigned long, Luau::DenseHashMap<Luau::AstExprCall*, int, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprCall*>> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i64(memory_at_0, loc_4 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 40, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 8, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_4 + 4, loc_3)
		rt_store_i32(memory_at_0, loc_4, 10872)
		rt_store_i64(memory_at_0, loc_4 + 32, rt_i64_ZERO)
		if loc_2 ~= 0 then
			while true do
				loc_3 = rt_add_i32(loc_4, 8)
				loc_6 = rt_extend_i64_u32((if loc_2 >= 7 then 7 else loc_2))
				while true do
					reg_0 = FUNC_LIST[151](loc_3, rt_add_i32(rt_shl_i32(rt_wrap_i32_i64(loc_5), 2), loc_1))
					rt_store_i64(memory_at_0, reg_0, rt_shl_i64(rt_i64_from_u32(65280, 0), rt_shl_i64(loc_5, rt_i64_from_u32(3, 0))))
					loc_5 = rt_add_i64(loc_5, rt_i64_ONE)
					if rt_ne_i64(loc_6, loc_5) then
						continue
					end
					break
				end
				break
			end
		end
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_4)
		rt_store_i32(memory_at_0, loc_4, 10872)
		loc_5 = rt_load_i64(memory_at_0, loc_4 + 32)
		loc_1 = rt_load_i32(memory_at_0, loc_4 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 48)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[151] = --[[ Luau::DenseHashMap<Luau::AstLocal*, unsigned long long, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::operator[](Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 4), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[152](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 4))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 8)
		break
	end
	return reg_0
end
FUNC_LIST[152] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, std::__2::pair<Luau::AstLocal*, unsigned long long>, std::__2::pair<Luau::AstLocal* const, unsigned long long>, Luau::detail::ItemInterfaceMap<Luau::AstLocal*, unsigned long long>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_12 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_11 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_11 ~= 0 then rt_shl_i32(loc_11, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 4))
			loc_7 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_7)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
						rt_store_i64(memory_at_0, loc_1 + 56, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 48, loc_3)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_5 = rt_add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_7)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		loc_10 = rt_load_i32(memory_at_0, loc_0)
		if loc_11 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_13 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_10)
					loc_4 = rt_load_i32(memory_at_0, loc_13)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9)))
									loc_5 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_7)
									loc_3 = rt_load_i32(memory_at_0, loc_5)
									if loc_12 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = rt_add_i32(loc_2, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_2))
										loc_5 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_7)
										loc_3 = rt_load_i32(memory_at_0, loc_5)
										if loc_12 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_5, loc_4)
							rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_13 + 8))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_11 ~= loc_9 then
						continue
					end
					break
				end
				reg_0 = rt_load_i32(memory_at_0, loc_0)
				break
			end
		else
			while true do
				reg_0 = loc_10
				break
			end
		end
		loc_10 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		rt_store_i32(memory_at_0, loc_0, loc_7)
		if loc_10 ~= 0 then
			while true do
				FUNC_LIST[652](loc_10)
				break
			end
		end
		break
	end
end
FUNC_LIST[153] = --[[ Luau::Compile::CostVisitor::~CostVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 10872)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[154] = --[[ Luau::Compile::computeCost(unsigned long long, bool const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = 127
			loc_4 = rt_wrap_i32_i64(loc_0)
			loc_5 = bit_and(loc_4, 127)
			reg_0 = loc_3
			if loc_5 == 127 then
				break
			end
			if loc_2 == 0 then
				while true do
					reg_0 = loc_5
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_sub_i32(loc_5, rt_mul_i32(rt_load_i32_u8(memory_at_0, loc_1), bit_and(rt_shr_u32(loc_4, 8), 127)))
			reg_0 = loc_3
			if loc_2 == 1 then
				break
			end
			loc_3 = rt_sub_i32(loc_3, rt_mul_i32(rt_load_i32_u8(memory_at_0, loc_1 + 1), bit_and(rt_shr_u32(loc_4, 16), 127)))
			reg_0 = loc_3
			if loc_2 == 2 then
				break
			end
			loc_3 = rt_sub_i32(loc_3, rt_mul_i32(rt_load_i32_u8(memory_at_0, loc_1 + 2), bit_and(rt_shr_u32(loc_4, 24), 127)))
			reg_0 = loc_3
			if loc_2 == 3 then
				break
			end
			loc_3 = rt_sub_i32(loc_3, rt_mul_i32(rt_load_i32_u8(memory_at_0, loc_1 + 3), bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(32, 0))), 127)))
			reg_0 = loc_3
			if loc_2 == 4 then
				break
			end
			loc_3 = rt_sub_i32(loc_3, rt_mul_i32(rt_load_i32_u8(memory_at_0, loc_1 + 4), bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(40, 0))), 127)))
			reg_0 = loc_3
			if loc_2 == 5 then
				break
			end
			loc_3 = rt_sub_i32(loc_3, rt_mul_i32(rt_load_i32_u8(memory_at_0, loc_1 + 5), bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(48, 0))), 127)))
			reg_0 = loc_3
			if loc_2 == 6 then
				break
			end
			reg_0 = rt_sub_i32(loc_3, rt_mul_i32(rt_load_i32_u8(memory_at_0, loc_1 + 6), bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(56, 0))), 127)))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[155] = --[[ Luau::Compile::getTripCount(double, double, double) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = 2147483648
		while true do
			loc_4 = 2147483648
			loc_7 = math_abs(loc_0)
			reg_0 = loc_4
			if (if loc_7 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			reg_0 = 2147483648
			while true do
				if loc_7 < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_0)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_convert_f64_i32(loc_3) ~= loc_0 then
				break
			end
			reg_0 = loc_3
			break
		end
		loc_4 = reg_0
		while true do
			loc_0 = math_abs(loc_1)
			if (if loc_0 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			while true do
				if loc_0 < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			if rt_convert_f64_i32(loc_3) ~= loc_1 then
				break
			end
			loc_5 = loc_3
			break
		end
		loc_3 = 4294967295
		while true do
			loc_0 = math_abs(loc_2)
			if (if loc_0 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			while true do
				if loc_0 < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_0
			if rt_convert_f64_i32(loc_6) ~= loc_2 then
				break
			end
			if bit_and(loc_6, 2147483647) == 0 then
				break
			end
			if loc_4 == 2147483648 then
				break
			end
			if loc_5 == 2147483648 then
				break
			end
			loc_3 = 0
			if bit_and((if rt_lt_i32(loc_6, 0) then 1 else 0), (if rt_lt_i32(loc_4, loc_5) then 1 else 0)) ~= 0 then
				break
			end
			if bit_and((if rt_gt_i32(loc_6, 0) then 1 else 0), (if rt_gt_i32(loc_4, loc_5) then 1 else 0)) ~= 0 then
				break
			end
			loc_3 = rt_add_i32(rt_div_i32(rt_sub_i32(loc_5, loc_4), loc_6), 1)
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[156] = --[[ Luau::Compile::CostVisitor::~CostVisitor()_189 ]] function(loc_0)
	local loc_1 = 0
	while true do
		rt_store_i32(memory_at_0, loc_0, 10872)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		FUNC_LIST[653](loc_0, 48)
		break
	end
end
FUNC_LIST[157] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[158](loc_2, loc_0, loc_1)
		loc_3 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_3 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), loc_3)
		loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[158] = --[[ Luau::Compile::CostVisitor::model(Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_6
		loc_7 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			if loc_2 == 0 then
				break
			end
			loc_8 = rt_load_i32(memory_at_0, 48572)
			if loc_8 ~= loc_7 then
				break
			end
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_2 + 24)
				loc_7 = rt_load_i32(memory_at_0, loc_2 + 4)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_7 == loc_8 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			while true do
				while true do
					if rt_load_i32(memory_at_0, 48580) == loc_7 then
						break
					end
					if rt_load_i32(memory_at_0, 48588) == loc_7 then
						break
					end
					if rt_load_i32(memory_at_0, 48596) == loc_7 then
						break
					end
					if rt_load_i32(memory_at_0, 48604) ~= loc_7 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_from_u32(4294967295, 4294967295))
				rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_7 == rt_load_i32(memory_at_0, 48612) then
				while true do
					reg_1 = FUNC_LIST[167](rt_add_i32(loc_1, 8), rt_add_i32(loc_2, 24))
					loc_2 = reg_1
					reg_0 = loc_0
					if loc_2 ~= 0 then
						while true do
							reg_1 = rt_load_i64(memory_at_0, loc_2)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_1 = loc_3
							break
						end
						if desired then
							break
						end
					end
					loc_3 = reg_1
					rt_store_i64(memory_at_0, reg_0 + 8, loc_3)
					rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48620) then
				while true do
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_0, rt_i64_ONE)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48628) then
				while true do
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = (if rt_load_i32(memory_at_0, 48636) == loc_7 then loc_2 else 0)
			rt_store_i32(memory_at_0, loc_6 + 60, loc_8)
			if loc_8 ~= 0 then
				while true do
					while true do
						reg_0 = FUNC_LIST[37](rt_load_i32(memory_at_0, loc_1 + 4), rt_add_i32(loc_6, 60))
						if reg_0 ~= 0 then
							while true do
								loc_7 = rt_load_i32(memory_at_0, loc_6 + 60)
								loc_2 = rt_load_i32(memory_at_0, loc_7 + 32)
								rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
								loc_4 = rt_i64_from_u32(2, 0)
								rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(2, 0))
								reg_0 = (if loc_2 < 3 then 1 else 0)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 60) + 24))
						loc_3 = rt_load_i64(memory_at_0, loc_6 + 40)
						rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
						loc_3 = rt_add_i64(loc_3, rt_i64_from_u32(3, 0))
						loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
						loc_4 = rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143)))
						rt_store_i64(memory_at_0, loc_0, loc_4)
						loc_7 = rt_load_i32(memory_at_0, loc_6 + 60)
						loc_2 = rt_load_i32(memory_at_0, loc_7 + 32)
						reg_0 = 0
						break
					end
					if desired then
						break
					end
					loc_8 = reg_0
					if loc_2 == 0 then
						desired = 1
						break
					end
					loc_2 = 0
					loc_8 = bit_and(loc_8, 1)
					while true do
						FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_7 + 28), rt_shl_i32(loc_2, 2))))
						loc_3 = rt_load_i64(memory_at_0, loc_6 + 40)
						rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
						loc_3 = rt_add_i64(loc_4, (if rt_ne_i64(loc_3, rt_i64_ZERO) then loc_3 else (if loc_8 ~= 0 then loc_3 else rt_i64_ONE)))
						loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
						loc_4 = rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143)))
						rt_store_i64(memory_at_0, loc_0, loc_4)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_7 = rt_load_i32(memory_at_0, loc_6 + 60)
						if loc_2 < rt_load_i32(memory_at_0, loc_7 + 32) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48644) then
				while true do
					FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					loc_3 = rt_add_i64(rt_load_i64(memory_at_0, loc_6 + 40), rt_i64_ONE)
					loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
					rt_store_i64(memory_at_0, loc_0, rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48652) then
				while true do
					FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
					FUNC_LIST[158](rt_add_i32(loc_6, 24), loc_1, rt_load_i32(memory_at_0, loc_2 + 28))
					loc_3 = rt_load_i64(memory_at_0, loc_6 + 24)
					loc_4 = rt_load_i64(memory_at_0, loc_6 + 40)
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					loc_3 = rt_add_i64(loc_3, loc_4)
					loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
					loc_3 = rt_add_i64(rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))), rt_i64_ONE)
					loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
					rt_store_i64(memory_at_0, loc_0, rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48660) then
				while true do
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(10, 0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48668) then
				while true do
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					loc_3 = rt_i64_from_u32(10, 0)
					rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(10, 0))
					if rt_load_i32(memory_at_0, loc_2 + 28) == 0 then
						desired = 1
						break
					end
					loc_7 = 0
					while true do
						loc_8 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 24), rt_mul_i32(loc_7, 12))
						loc_9 = rt_load_i32(memory_at_0, loc_8 + 4)
						if loc_9 ~= 0 then
							while true do
								FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, loc_9)
								loc_3 = rt_add_i64(loc_3, rt_load_i64(memory_at_0, loc_6 + 40))
								loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
								reg_0 = rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143)))
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_3 = reg_0
						FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, loc_8 + 8))
						loc_4 = rt_load_i64(memory_at_0, loc_6 + 40)
						rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
						loc_3 = rt_add_i64(loc_3, loc_4)
						loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
						loc_3 = rt_add_i64(rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))), rt_i64_ONE)
						loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
						loc_3 = rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143)))
						rt_store_i64(memory_at_0, loc_0, loc_3)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_7 < rt_load_i32(memory_at_0, loc_2 + 28) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48676) then
				while true do
					FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, loc_2 + 28))
					rt_store_i64(memory_at_0, loc_6 + 32, rt_i64_from_u32(4294967295, 4294967295))
					rt_store_i64(memory_at_0, loc_6 + 24, rt_i64_ZERO)
					FUNC_LIST[168](loc_0, rt_add_i32(loc_6, 40), rt_add_i32(loc_6, 24))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48684) then
				while true do
					FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, loc_2 + 28))
					FUNC_LIST[158](rt_add_i32(loc_6, 24), loc_1, rt_load_i32(memory_at_0, loc_2 + 32))
					FUNC_LIST[168](loc_0, rt_add_i32(loc_6, 40), rt_add_i32(loc_6, 24))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48692) then
				while true do
					FUNC_LIST[158](loc_0, loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48700) then
				while true do
					FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, loc_2 + 24))
					FUNC_LIST[158](rt_add_i32(loc_6, 24), loc_1, rt_load_i32(memory_at_0, loc_2 + 32))
					loc_3 = rt_load_i64(memory_at_0, loc_6 + 24)
					loc_4 = rt_load_i64(memory_at_0, loc_6 + 40)
					FUNC_LIST[158](rt_add_i32(loc_6, 8), loc_1, rt_load_i32(memory_at_0, loc_2 + 40))
					loc_5 = rt_load_i64(memory_at_0, loc_6 + 8)
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					loc_3 = rt_add_i64(loc_3, loc_4)
					loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
					loc_3 = rt_add_i64(rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))), loc_5)
					loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
					loc_3 = rt_add_i64(rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))), rt_i64_from_u32(2, 0))
					loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
					rt_store_i64(memory_at_0, loc_0, rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == rt_load_i32(memory_at_0, 48708) then
				while true do
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 36)
					if loc_7 == 0 then
						desired = 1
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_2 + 32)
					loc_7 = rt_add_i32(loc_2, rt_shl_i32(loc_7, 2))
					while true do
						FUNC_LIST[158](rt_add_i32(loc_6, 40), loc_1, rt_load_i32(memory_at_0, loc_2))
						loc_3 = rt_load_i64(memory_at_0, loc_6 + 40)
						rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
						loc_3 = rt_add_i64(rt_load_i64(memory_at_0, loc_0), loc_3)
						loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
						rt_store_i64(memory_at_0, loc_0, rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
						loc_2 = rt_add_i32(loc_2, 4)
						if loc_7 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_6, 4294967232)
		break
	end
end
FUNC_LIST[159] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatIf*) ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 36)
		if loc_1 ~= 0 then
			while true do
				reg_0 = (if rt_load_i32(memory_at_0, loc_1 + 4) == rt_load_i32(memory_at_0, 48724) then rt_i64_ONE else rt_i64_from_u32(2, 0))
				break
			end
		else
			while true do
				reg_0 = rt_i64_ONE
				break
			end
		end
		loc_2 = reg_0
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_2 = rt_add_i64(loc_2, rt_load_i64(memory_at_0, loc_0 + 32))
		loc_3 = rt_bit_and_i64(loc_2, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_3, rt_shr_u64(loc_3, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_2, rt_i64_from_u32(2139062143, 2139062143))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[160] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatWhile*) ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = 0
	local reg_0
	local reg_1
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[158](loc_5, loc_0, rt_load_i32(memory_at_0, loc_1 + 28))
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 32)
		loc_2 = rt_load_i64(memory_at_0, loc_5)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_3 = rt_load_i64(memory_at_0, loc_0 + 32)
		rt_store_i64(memory_at_0, loc_0 + 32, rt_i64_ZERO)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1))](loc_1, loc_0)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_2 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), loc_2)
		loc_4 = rt_bit_and_i64(loc_2, rt_i64_from_u32(2155905152, 2155905152))
		loc_2 = rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), loc_2)
		loc_4 = rt_bit_and_i64(rt_shr_u64(loc_2, rt_i64_from_u32(8, 0)), rt_i64_from_u32(8323199, 8323199))
		loc_2 = rt_mul_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(8323199, 8323199)), rt_i64_from_u32(3, 0))
		reg_1 = rt_bit_or_i64(rt_bit_and_i64(rt_mul_i64(loc_4, rt_i64_from_u32(768, 0)), rt_i64_from_u32(2130738944, 2130738944)), rt_bit_and_i64(loc_2, rt_i64_from_u32(8323199, 8323199)))
		loc_2 = rt_bit_or_i64(rt_bit_and_i64(rt_shr_u64(rt_add_i64(loc_2, rt_i64_from_u32(2139127680, 2139127680)), rt_i64_from_u32(8, 0)), rt_i64_from_u32(8388736, 8388736)), rt_bit_and_i64(rt_add_i64(rt_mul_i64(loc_4, rt_i64_from_u32(3, 0)), rt_i64_from_u32(2139127680, 2139127680)), rt_i64_from_u32(2147516416, 2147516416)))
		loc_2 = rt_add_i64(rt_bit_or_i64(reg_1, rt_sub_i64(loc_2, rt_shr_u64(loc_2, rt_i64_from_u32(7, 0)))), loc_3)
		loc_3 = rt_bit_and_i64(loc_2, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_3, rt_shr_u64(loc_3, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_2, rt_i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[161] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatBreak*) ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_2 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), rt_i64_ONE)
		loc_3 = rt_bit_and_i64(loc_2, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_3, rt_shr_u64(loc_3, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_2, rt_i64_from_u32(2139062143, 2139062143))))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[162] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		if rt_load_i32(memory_at_0, loc_1 + 40) ~= 0 then
			while true do
				loc_6 = rt_add_i32(loc_0, 8)
				while true do
					loc_7 = rt_shl_i32(loc_5, 2)
					FUNC_LIST[158](loc_4, loc_0, rt_load_i32(memory_at_0, rt_add_i32(loc_7, rt_load_i32(memory_at_0, loc_1 + 36))))
					while true do
						loc_2 = rt_load_i64(memory_at_0, loc_4 + 8)
						if rt_eq_i64(loc_2, rt_i64_ZERO) then
							break
						end
						if rt_load_i32(memory_at_0, loc_1 + 32) <= loc_5 then
							break
						end
						reg_0 = FUNC_LIST[151](loc_6, rt_add_i32(loc_7, rt_load_i32(memory_at_0, loc_1 + 28)))
						rt_store_i64(memory_at_0, reg_0, loc_2)
						break
					end
					loc_2 = rt_load_i64(memory_at_0, loc_4)
					rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
					loc_2 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), loc_2)
					loc_3 = rt_bit_and_i64(loc_2, rt_i64_from_u32(2155905152, 2155905152))
					rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_3, rt_shr_u64(loc_3, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_2, rt_i64_from_u32(2139062143, 2139062143))))
					loc_5 = rt_add_i32(loc_5, 1)
					if loc_5 < rt_load_i32(memory_at_0, loc_1 + 40) then
						continue
					end
					break
				end
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[163] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatFor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = 0.0
	local loc_13 = 0.0
	local loc_14 = 0.0
	local loc_15 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		FUNC_LIST[158](loc_6, loc_0, rt_load_i32(memory_at_0, loc_1 + 32))
		loc_8 = rt_load_i64(memory_at_0, loc_6)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_8 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), loc_8)
		loc_9 = rt_bit_and_i64(loc_8, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_9, rt_shr_u64(loc_9, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_8, rt_i64_from_u32(2139062143, 2139062143))))
		FUNC_LIST[158](loc_6, loc_0, rt_load_i32(memory_at_0, loc_1 + 36))
		loc_8 = rt_load_i64(memory_at_0, loc_6)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_8 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), loc_8)
		loc_9 = rt_bit_and_i64(loc_8, rt_i64_from_u32(2155905152, 2155905152))
		loc_8 = rt_bit_or_i64(rt_sub_i64(loc_9, rt_shr_u64(loc_9, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_8, rt_i64_from_u32(2139062143, 2139062143)))
		rt_store_i64(memory_at_0, loc_0 + 32, loc_8)
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 40)
		if loc_2 ~= 0 then
			while true do
				FUNC_LIST[158](loc_6, loc_0, loc_2)
				loc_8 = rt_add_i64(rt_load_i64(memory_at_0, loc_6), rt_load_i64(memory_at_0, loc_0 + 32))
				loc_9 = rt_bit_and_i64(loc_8, rt_i64_from_u32(2155905152, 2155905152))
				reg_0 = rt_bit_or_i64(rt_sub_i64(loc_9, rt_shr_u64(loc_9, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_8, rt_i64_from_u32(2139062143, 2139062143)))
				break
			end
		else
			while true do
				reg_0 = loc_8
				break
			end
		end
		loc_8 = reg_0
		loc_7 = rt_add_i32(loc_0, 32)
		loc_3 = rt_load_i32(memory_at_0, 48596)
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
		loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					if loc_3 ~= loc_4 then
						break
					end
					reg_0 = rt_load_f64(memory_at_0, loc_2 + 24)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = 3
				if loc_2 == 0 then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, 48676) ~= loc_4 then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, loc_2 + 24) ~= 1 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_2 + 28)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_3 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
					desired = 1
					break
				end
				reg_0 = rt_neg_f64(rt_load_f64(memory_at_0, loc_2 + 24))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_12 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 36)
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					if loc_3 ~= loc_4 then
						break
					end
					reg_0 = rt_load_f64(memory_at_0, loc_2 + 24)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = 3
				if loc_2 == 0 then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, 48676) ~= loc_4 then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, loc_2 + 24) ~= 1 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_2 + 28)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_3 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
					desired = 1
					break
				end
				reg_0 = rt_neg_f64(rt_load_f64(memory_at_0, loc_2 + 24))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_13 = reg_0
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 40)
				reg_0 = 1e0
				if loc_2 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
				if loc_4 == loc_3 then
					while true do
						reg_0 = rt_load_f64(memory_at_0, loc_2 + 24)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = 3
				if rt_load_i32(memory_at_0, 48676) ~= loc_4 then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, loc_2 + 24) ~= 1 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_2 + 28)
				if loc_2 == 0 then
					desired = 1
					break
				end
				if loc_3 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
					desired = 1
					break
				end
				reg_0 = rt_neg_f64(rt_load_f64(memory_at_0, loc_2 + 24))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_14 = reg_0
			loc_3 = 2147483648
			while true do
				loc_2 = 2147483648
				loc_15 = math_abs(loc_12)
				reg_0 = loc_2
				if (if loc_15 <= 3.2767e4 then 1 else 0) == 0 then
					break
				end
				reg_0 = 2147483648
				while true do
					if loc_15 < 2.147483648e9 then
						while true do
							reg_1 = rt_truncate_f64(loc_12)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = reg_1
				if rt_convert_f64_i32(loc_5) ~= loc_12 then
					break
				end
				reg_0 = loc_5
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			while true do
				loc_12 = math_abs(loc_13)
				if (if loc_12 <= 3.2767e4 then 1 else 0) == 0 then
					break
				end
				while true do
					if loc_12 < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_13)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = reg_0
				if rt_convert_f64_i32(loc_5) ~= loc_13 then
					break
				end
				loc_3 = loc_5
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = 3
			loc_12 = math_abs(loc_14)
			if (if loc_12 <= 3.2767e4 then 1 else 0) == 0 then
				break
			end
			while true do
				if loc_12 < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_14)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			if rt_convert_f64_i32(loc_4) ~= loc_14 then
				break
			end
			if bit_and(loc_4, 2147483647) == 0 then
				break
			end
			if loc_2 == 2147483648 then
				break
			end
			if loc_3 == 2147483648 then
				break
			end
			loc_5 = 0
			if bit_and((if rt_lt_i32(loc_4, 0) then 1 else 0), (if rt_lt_i32(loc_2, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			if bit_and((if rt_gt_i32(loc_4, 0) then 1 else 0), (if rt_gt_i32(loc_2, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			loc_2 = rt_div_i32(rt_sub_i32(loc_3, loc_2), loc_4)
			loc_5 = (if rt_lt_i32(loc_2, 4294967295) then 3 else rt_add_i32(loc_2, 1))
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 44)
		rt_store_i64(memory_at_0, loc_7 + 8, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_7, rt_i64_ZERO)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1))](loc_1, loc_0)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_9 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), rt_i64_ONE)
		loc_10 = rt_bit_and_i64(loc_9, rt_i64_from_u32(2155905152, 2155905152))
		loc_9 = rt_bit_or_i64(rt_sub_i64(loc_10, rt_shr_u64(loc_10, rt_i64_from_u32(7, 0))), loc_9)
		loc_10 = rt_extend_i64_u32((if loc_5 >= 127 then 127 else loc_5))
		loc_11 = rt_mul_i64(rt_bit_and_i64(rt_shr_u64(loc_9, rt_i64_from_u32(8, 0)), rt_i64_from_u32(8323199, 8323199)), loc_10)
		loc_9 = rt_mul_i64(loc_10, rt_bit_and_i64(loc_9, rt_i64_from_u32(8323199, 8323199)))
		reg_2 = rt_bit_or_i64(rt_bit_and_i64(rt_shl_i64(loc_11, rt_i64_from_u32(8, 0)), rt_i64_from_u32(2130738944, 2130738944)), rt_bit_and_i64(loc_9, rt_i64_from_u32(8323199, 8323199)))
		loc_9 = rt_bit_or_i64(rt_bit_and_i64(rt_shr_u64(rt_add_i64(loc_9, rt_i64_from_u32(2139127680, 2139127680)), rt_i64_from_u32(8, 0)), rt_i64_from_u32(8388736, 8388736)), rt_bit_and_i64(rt_add_i64(loc_11, rt_i64_from_u32(2139127680, 2139127680)), rt_i64_from_u32(2147516416, 2147516416)))
		loc_8 = rt_add_i64(loc_8, rt_bit_or_i64(reg_2, rt_sub_i64(loc_9, rt_shr_u64(loc_9, rt_i64_from_u32(7, 0)))))
		loc_9 = rt_bit_and_i64(loc_8, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_9, rt_shr_u64(loc_9, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_8, rt_i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[164] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatForIn*) ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 40) == 0 then
				while true do
					loc_3 = rt_load_i64(memory_at_0, loc_0 + 32)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				FUNC_LIST[158](loc_6, loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_5, 2))))
				loc_3 = rt_load_i64(memory_at_0, loc_6)
				rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
				loc_3 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), loc_3)
				loc_2 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
				loc_3 = rt_bit_or_i64(rt_sub_i64(loc_2, rt_shr_u64(loc_2, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143)))
				rt_store_i64(memory_at_0, loc_0 + 32, loc_3)
				loc_5 = rt_add_i32(loc_5, 1)
				if loc_5 < rt_load_i32(memory_at_0, loc_1 + 40) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 44)
		loc_1 = rt_add_i32(loc_0, 40)
		rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 32, rt_i64_ZERO)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_0)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_2 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), rt_i64_ONE)
		loc_4 = rt_bit_and_i64(loc_2, rt_i64_from_u32(2155905152, 2155905152))
		loc_2 = rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), loc_2)
		loc_4 = rt_bit_and_i64(rt_shr_u64(loc_2, rt_i64_from_u32(8, 0)), rt_i64_from_u32(8323199, 8323199))
		loc_2 = rt_mul_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(8323199, 8323199)), rt_i64_from_u32(3, 0))
		reg_2 = rt_bit_or_i64(rt_bit_and_i64(rt_mul_i64(loc_4, rt_i64_from_u32(768, 0)), rt_i64_from_u32(2130738944, 2130738944)), rt_bit_and_i64(loc_2, rt_i64_from_u32(8323199, 8323199)))
		loc_2 = rt_bit_or_i64(rt_bit_and_i64(rt_shr_u64(rt_add_i64(loc_2, rt_i64_from_u32(2139127680, 2139127680)), rt_i64_from_u32(8, 0)), rt_i64_from_u32(8388736, 8388736)), rt_bit_and_i64(rt_add_i64(rt_mul_i64(loc_4, rt_i64_from_u32(3, 0)), rt_i64_from_u32(2139127680, 2139127680)), rt_i64_from_u32(2147516416, 2147516416)))
		loc_3 = rt_add_i64(loc_3, rt_bit_or_i64(reg_2, rt_sub_i64(loc_2, rt_shr_u64(loc_2, rt_i64_from_u32(7, 0)))))
		loc_2 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_2, rt_shr_u64(loc_2, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[165] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
		if loc_3 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 12), 1)
				loc_10 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 20)
				loc_11 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_12 = rt_load_i32(memory_at_0, 48612)
				loc_13 = rt_load_i32(memory_at_0, loc_1 + 28)
				while true do
					while true do
						loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 2), loc_13))
						if loc_2 == 0 then
							break
						end
						if loc_12 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
							break
						end
						if loc_11 == 0 then
							break
						end
						loc_7 = rt_load_i32(memory_at_0, loc_2 + 24)
						if loc_9 == loc_7 then
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
						loc_2 = 0
						while true do
							loc_14 = bit_and(loc_5, loc_8)
							loc_15 = rt_add_i32(rt_shl_i32(loc_14, 4), loc_10)
							loc_5 = rt_load_i32(memory_at_0, loc_15)
							if loc_5 ~= loc_7 then
								while true do
									if loc_5 == loc_9 then
										desired = 3
										break
									end
									loc_2 = rt_add_i32(loc_2, 1)
									loc_5 = rt_add_i32(loc_14, loc_2)
									if loc_2 <= loc_8 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						rt_store_i64(memory_at_0, loc_15 + 8, rt_i64_ZERO)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = rt_add_i32(loc_6, 1)
					if loc_3 ~= loc_6 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = 0
		while true do
			while true do
				if loc_2 >= loc_3 then
					while true do
						loc_16 = rt_i64_ZERO
						loc_3 = rt_load_i32(memory_at_0, loc_1 + 40)
						reg_0 = loc_16
						if loc_3 > loc_2 then
							desired = 2
							break
						end
						GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[158](loc_4, loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2))))
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 40)
				loc_16 = rt_load_i64(memory_at_0, loc_4)
				loc_17 = rt_bit_and_i64(loc_16, rt_i64_from_u32(2155905152, 2155905152))
				reg_0 = rt_bit_or_i64(rt_sub_i64(loc_17, rt_shr_u64(loc_17, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_16, rt_i64_from_u32(2139062143, 2139062143)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_16 = reg_0
			if loc_2 < loc_3 then
				while true do
					FUNC_LIST[158](loc_4, loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_2, 2))))
					loc_16 = rt_add_i64(loc_16, rt_load_i64(memory_at_0, loc_4))
					loc_17 = rt_bit_and_i64(loc_16, rt_i64_from_u32(2155905152, 2155905152))
					reg_0 = rt_bit_or_i64(rt_sub_i64(loc_17, rt_shr_u64(loc_17, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_16, rt_i64_from_u32(2139062143, 2139062143)))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			else
				while true do
					reg_0 = loc_16
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			loc_16 = reg_0
			rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
			loc_16 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), (if rt_le_u64(loc_16, rt_i64_ONE) then rt_i64_ONE else loc_16))
			loc_17 = rt_bit_and_i64(loc_16, rt_i64_from_u32(2155905152, 2155905152))
			rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_17, rt_shr_u64(loc_17, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_16, rt_i64_from_u32(2139062143, 2139062143))))
			loc_2 = rt_add_i32(loc_2, 1)
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[166] = --[[ Luau::Compile::CostVisitor::visit(Luau::AstStatCompoundAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = rt_load_i32(memory_at_0, 48612)
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 32)
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
		while true do
			if loc_1 == 0 then
				break
			end
			if loc_4 ~= loc_5 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 16) == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_3 == loc_7 then
				break
			end
			loc_2 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 12), 1)
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_1 = 0
			while true do
				loc_9 = bit_and(loc_2, loc_6)
				loc_10 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_8)
				loc_2 = rt_load_i32(memory_at_0, loc_10)
				if loc_2 ~= loc_3 then
					while true do
						if loc_2 == loc_7 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						loc_2 = rt_add_i32(loc_9, loc_1)
						if loc_1 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_10 + 8, rt_i64_ZERO)
			break
		end
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		loc_11 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 32), (if loc_4 == loc_5 then rt_i64_ONE else rt_i64_from_u32(2, 0)))
		loc_12 = rt_bit_and_i64(loc_11, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_bit_or_i64(rt_sub_i64(loc_12, rt_shr_u64(loc_12, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_11, rt_i64_from_u32(2139062143, 2139062143))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[167] = --[[ Luau::DenseHashMap<Luau::AstLocal*, unsigned long long, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::find(Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_3 == loc_5 then
				break
			end
			loc_1 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			loc_0 = 0
			while true do
				loc_7 = bit_and(loc_1, loc_4)
				loc_2 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_6)
				loc_1 = rt_load_i32(memory_at_0, loc_2)
				if loc_3 == loc_1 then
					desired = 1
					break
				end
				loc_2 = 0
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_0 = rt_add_i32(loc_0, 1)
				loc_1 = rt_add_i32(loc_7, loc_0)
				if loc_0 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = (if loc_2 ~= 0 then rt_add_i32(loc_2, 8) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[168] = --[[ Luau::Compile::Cost::fold(Luau::Compile::Cost const&, Luau::Compile::Cost const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	while true do
		loc_4 = rt_load_i64(memory_at_0, loc_2)
		loc_5 = rt_load_i64(memory_at_0, loc_1)
		loc_3 = rt_bit_and_i64(rt_load_i64(memory_at_0, loc_2 + 8), rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_0 + 8, loc_3)
		reg_1 = (if rt_ne_i64(loc_3, rt_i64_from_u32(4294967295, 4294967295)) then rt_bit_or_i64(rt_bit_and_i64(loc_3, rt_i64_from_u32(16843008, 16843009)), rt_i64_ONE) else rt_i64_ZERO)
		loc_3 = rt_add_i64(loc_4, loc_5)
		loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
		loc_3 = rt_add_i64(reg_1, rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
		loc_4 = rt_bit_and_i64(loc_3, rt_i64_from_u32(2155905152, 2155905152))
		rt_store_i64(memory_at_0, loc_0, rt_bit_or_i64(rt_sub_i64(loc_4, rt_shr_u64(loc_4, rt_i64_from_u32(7, 0))), rt_bit_and_i64(loc_3, rt_i64_from_u32(2139062143, 2139062143))))
		break
	end
end
FUNC_LIST[169] = --[[ Luau::CompileError::CompileError(Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		rt_store_i32(memory_at_0, loc_0, 11160)
		rt_store_i64(memory_at_0, loc_0 + 12, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_0 + 4, rt_load_i64(memory_at_0, loc_1))
		loc_1 = rt_add_i32(loc_0, 20)
		if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_2 + 11), 0) then
			while true do
				rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
				rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[716](loc_1, rt_load_i32(memory_at_0, loc_2), rt_load_i32(memory_at_0, loc_2 + 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[170] = --[[ Luau::CompileError::~CompileError() ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 11160)
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 31), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 20), bit_and(rt_load_i32(memory_at_0, loc_0 + 28), 2147483647))
				break
			end
		end
		reg_0 = FUNC_LIST[188](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[171] = --[[ Luau::CompileError::~CompileError()_206 ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 11160)
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 31), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 20), bit_and(rt_load_i32(memory_at_0, loc_0 + 28), 2147483647))
				break
			end
		end
		reg_0 = FUNC_LIST[188](loc_0)
		FUNC_LIST[653](reg_0, 32)
		break
	end
end
FUNC_LIST[172] = --[[ Luau::CompileError::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 31), 0) then rt_load_i32(memory_at_0, loc_0 + 20) else rt_add_i32(loc_0, 20))
		break
	end
	return reg_0
end
FUNC_LIST[173] = --[[ Luau::CompileError::raise(Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		FUNC_LIST[514](loc_3, loc_1, loc_2)
		reg_0 = FUNC_LIST[578](32)
		reg_0 = FUNC_LIST[169](reg_0, loc_0, loc_3)
		FUNC_LIST[0](reg_0, 11196, 110)
		error("out of code bounds")
	end
end
FUNC_LIST[174] = --[[ Luau::compileOrThrow(Luau::BytecodeBuilder&, Luau::ParseResult const&, Luau::AstNameTable const&, Luau::CompileOptions const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 1024)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 1016, rt_load_i32(memory_at_0, loc_3 + 32))
		rt_store_i64(memory_at_0, loc_4 + 1008, rt_load_i64(memory_at_0, loc_3 + 24))
		rt_store_i64(memory_at_0, loc_4 + 1000, rt_load_i64(memory_at_0, loc_3 + 16))
		rt_store_i64(memory_at_0, loc_4 + 992, rt_load_i64(memory_at_0, loc_3 + 8))
		loc_20 = rt_load_i64(memory_at_0, loc_3)
		rt_store_i64(memory_at_0, loc_4 + 984, loc_20)
		rt_store_i32_n8(memory_at_0, loc_4 + 983, 0)
		loc_6 = rt_wrap_i32_i64(loc_20)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
			loc_7 = rt_load_i32(memory_at_0, loc_1 + 12)
			if loc_3 == loc_7 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = rt_load_i32(memory_at_0, loc_4 + 992)
			while true do
				while true do
					if rt_load_i32_u8(memory_at_0, loc_3) ~= 1 then
						break
					end
					loc_5 = rt_add_i32(loc_3, 20)
					reg_0 = FUNC_LIST[731](loc_5, 0, 9, 8334)
					if reg_0 ~= 0 then
						break
					end
					reg_1 = FUNC_LIST[592](rt_add_i32((if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 31), 0) then rt_load_i32(memory_at_0, loc_3 + 20) else loc_5), 9))
					loc_5 = reg_1
					loc_5 = (if rt_ge_i32(loc_5, 2) then 2 else loc_5)
					loc_6 = (if rt_gt_i32(loc_5, 0) then loc_5 else 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				while true do
					if rt_load_i32_u8(memory_at_0, loc_3) ~= 1 then
						break
					end
					loc_5 = rt_load_i32_i8(memory_at_0, loc_3 + 31)
					reg_1 = loc_5
					loc_5 = (if rt_lt_i32(loc_5, 0) then 1 else 0)
					if (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_3 + 24) else reg_1) ~= 6 then
						break
					end
					reg_0 = FUNC_LIST[575]((if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_3 + 20) else rt_add_i32(loc_3, 20)), 3942, 6)
					if reg_0 ~= 0 then
						break
					end
					loc_8 = 1
					rt_store_i32_n8(memory_at_0, loc_4 + 983, 1)
					loc_6 = 2
					loc_9 = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = rt_add_i32(loc_3, 32)
				if loc_7 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4 + 992, loc_8)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_4 + 984, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_1)
		rt_store_i32_n16(memory_at_0, loc_4 + 964, 0)
		rt_store_i32(memory_at_0, loc_4 + 956, 11216)
		rt_store_i32(memory_at_0, loc_4 + 960, rt_add_i32(loc_4, 968))
		reg_1 = FUNC_LIST[646](64)
		loc_3 = reg_1
		rt_store_i32(memory_at_0, loc_4 + 972, loc_3)
		rt_store_i32(memory_at_0, loc_4 + 968, loc_3)
		rt_store_i32(memory_at_0, loc_4 + 976, rt_sub_i32(loc_3, 4294967232))
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1))](loc_1, rt_add_i32(loc_4, 956))
		if rt_load_i32_u8(memory_at_0, loc_4 + 965) ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_4 + 992, 1)
				rt_store_i32(memory_at_0, loc_4 + 984, 2)
				reg_0 = 2
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_6
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_6 = reg_0
		rt_store_i64(memory_at_0, loc_4 + 280, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 300, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 320, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 340, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 244, rt_load_i64(memory_at_0, loc_4 + 992))
		rt_store_i64(memory_at_0, loc_4 + 252, rt_load_i64(memory_at_0, loc_4 + 1000))
		loc_3 = rt_add_i32(loc_4, 1008)
		rt_store_i64(memory_at_0, loc_4 + 260, rt_load_i64(memory_at_0, loc_3))
		rt_store_i32(memory_at_0, loc_4 + 268, rt_load_i32(memory_at_0, loc_4 + 1016))
		rt_store_i32(memory_at_0, loc_4 + 232, loc_0)
		rt_store_i64(memory_at_0, loc_4 + 236, rt_load_i64(memory_at_0, loc_4 + 984))
		rt_store_i64(memory_at_0, loc_4 + 272, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 292, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 312, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 332, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 360, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 380, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 400, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 420, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 440, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 460, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 480, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 500, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 352, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 372, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 392, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 412, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 432, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 452, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 472, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 492, rt_i64_ZERO)
		reg_0 = FUNC_LIST[175](rt_add_i32(loc_4, 512), rt_load_i32(memory_at_0, loc_4 + 1008))
		loc_14 = reg_0
		rt_store_i64(memory_at_0, loc_4 + 863, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 904, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 912, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 920, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 928, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 936, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 944, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_4 + 952, 0)
		rt_store_i64(memory_at_0, loc_4 + 856, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, loc_4 + 852, 0)
		rt_store_i32(memory_at_0, loc_4 + 848, 0)
		rt_store_i64(memory_at_0, loc_4 + 896, rt_i64_ZERO)
		reg_1 = FUNC_LIST[646](64)
		loc_3 = reg_1
		rt_store_i32(memory_at_0, loc_4 + 876, loc_3)
		rt_store_i32(memory_at_0, loc_4 + 872, loc_3)
		rt_store_i32(memory_at_0, loc_4 + 880, rt_sub_i32(loc_3, 4294967232))
		reg_1 = FUNC_LIST[646](64)
		loc_3 = reg_1
		rt_store_i32(memory_at_0, loc_4 + 888, loc_3)
		rt_store_i32(memory_at_0, loc_4 + 884, loc_3)
		rt_store_i32(memory_at_0, loc_4 + 892, rt_sub_i32(loc_3, 4294967232))
		loc_8 = rt_add_i32(loc_4, 312)
		FUNC_LIST[7](loc_8, loc_2, rt_load_i32(memory_at_0, loc_4 + 1012))
		loc_3 = rt_add_i32(loc_4, 332)
		FUNC_LIST[10](loc_8, loc_3, loc_1)
		loc_12 = rt_add_i32(loc_4, 412)
		if rt_gt_i32(loc_6, 0) then
			while true do
				while true do
					reg_0 = FUNC_LIST[404](loc_2, 1172)
					if reg_0 == 0 then
						while true do
							reg_0 = FUNC_LIST[404](loc_2, 1164)
							if reg_0 == 0 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_4 + 100, 11536)
					rt_store_i32(memory_at_0, loc_4 + 108, rt_add_i32(loc_4, 870))
					rt_store_i32(memory_at_0, loc_4 + 104, rt_add_i32(loc_4, 869))
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1))](loc_1, rt_add_i32(loc_4, 100))
					break
				end
				if desired then
					break
				end
				loc_7 = rt_add_i32(loc_4, 392)
				loc_5 = rt_add_i32(loc_4, 372)
				loc_15 = rt_add_i32(loc_4, 352)
				while true do
					if loc_6 == 1 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_4 + 869) ~= 0 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_4 + 870) ~= 0 then
						break
					end
					rt_store_i32(memory_at_0, loc_4 + 848, loc_12)
					reg_0 = FUNC_LIST[404](loc_2, 3620)
					loc_10 = reg_0
					if loc_10 == 0 then
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_4 + 320) == 0 then
							break
						end
						loc_16 = rt_load_i32(memory_at_0, loc_4 + 324)
						if loc_16 == loc_10 then
							break
						end
						loc_11 = bit_xor(rt_shr_u32(loc_10, 4), rt_shr_u32(loc_10, 9))
						loc_13 = rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 316), 1)
						loc_6 = 0
						loc_17 = rt_load_i32(memory_at_0, loc_4 + 312)
						while true do
							loc_18 = bit_and(loc_11, loc_13)
							loc_19 = rt_add_i32(rt_shl_i32(loc_18, 3), loc_17)
							loc_11 = rt_load_i32(memory_at_0, loc_19)
							if loc_11 ~= loc_10 then
								while true do
									if loc_11 == loc_16 then
										desired = 3
										break
									end
									loc_6 = rt_add_i32(loc_6, 1)
									loc_11 = rt_add_i32(loc_18, loc_6)
									if loc_6 <= loc_13 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_19 + 4) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					rt_store_i32_n8(memory_at_0, loc_4 + 852, 1)
					break
				end
				if desired then
					break
				end
				FUNC_LIST[20](loc_12, loc_8, loc_3, rt_add_i32(loc_4, 984), loc_1)
				FUNC_LIST[29](loc_15, loc_3, loc_5, rt_load_i32(memory_at_0, loc_4 + 848), rt_load_i32_u8(memory_at_0, loc_4 + 852), loc_1)
				FUNC_LIST[48](loc_7, loc_1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_6 = rt_add_i32(loc_4, 432)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_4 + 1016)
			if loc_3 ~= 0 then
				while true do
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_3)
						if loc_7 == 0 then
							while true do
								loc_5 = loc_3
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							reg_1 = FUNC_LIST[404](loc_2, loc_7)
							loc_7 = reg_1
							rt_store_i32(memory_at_0, loc_4 + 100, loc_7)
							if loc_7 ~= 0 then
								while true do
									reg_0 = FUNC_LIST[99](loc_0, loc_7)
									loc_7 = reg_0
									reg_0 = FUNC_LIST[176](loc_6, rt_add_i32(loc_4, 100))
									rt_store_i32_n8(memory_at_0, reg_0, loc_7)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_7 = rt_load_i32(memory_at_0, loc_3 + 4)
							loc_5 = rt_add_i32(loc_3, 4)
							loc_3 = loc_5
							if loc_7 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_4 + 1016)
						break
					end
					if desired then
						break
					end
					if rt_sub_i32(loc_5, loc_3) >= 129 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_gt_i32(rt_load_i32(memory_at_0, loc_4 + 992), 0) then
				while true do
					FUNC_LIST[123](rt_add_i32(loc_4, 452), rt_add_i32(loc_4, 472), rt_add_i32(loc_4, 492), loc_1, rt_load_i32(memory_at_0, loc_4 + 1008), loc_6, loc_14, loc_12, loc_8, loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_4 + 968)
			loc_5 = rt_load_i32(memory_at_0, loc_4 + 972)
			if loc_3 ~= loc_5 then
				while true do
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_3)
						rt_store_i32_n8(memory_at_0, loc_4 + 100, 0)
						reg_0 = FUNC_LIST[177](rt_add_i32(loc_4, 232), loc_7, rt_add_i32(loc_4, 100))
						while true do
							if rt_load_i32_u8(memory_at_0, 49068) ~= 1 then
								break
							end
							if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 100), 4) == 0 then
								break
							end
							if bit_and(loc_9, 1) ~= 0 then
								break
							end
							loc_9 = bit_or(loc_9, 4)
							rt_store_i32_n8(memory_at_0, loc_4 + 983, loc_9)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_3 = rt_add_i32(loc_3, 4)
						if loc_5 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i64(memory_at_0, loc_4 + 92, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_4 + 80, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_4 + 72, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_4 + 64, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_4 + 56, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_4 + 48, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_4 + 44, 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 40, 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 28, 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 24, 0)
			rt_store_i32_n8(memory_at_0, loc_4 + 8, 0)
			reg_2 = FUNC_LIST[303](rt_add_i32(loc_4, 100), rt_add_i32(loc_1, 8), rt_add_i32(loc_4, 92), rt_add_i32(loc_4, 80), rt_add_i32(loc_4, 72), 0, rt_sub_i32(loc_4, 4294967232), 1, rt_add_i32(loc_4, 48), loc_1, 0, rt_add_i32(loc_4, 44), rt_add_i32(loc_4, 28), 0, rt_add_i32(loc_4, 8))
			reg_1 = FUNC_LIST[177](rt_add_i32(loc_4, 232), reg_2, rt_add_i32(loc_4, 983))
			FUNC_LIST[67](loc_0, reg_1)
			FUNC_LIST[109](loc_0)
			reg_0 = FUNC_LIST[178](rt_add_i32(loc_4, 232))
			loc_3 = rt_load_i32(memory_at_0, loc_4 + 968)
			if loc_3 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_4 + 972, loc_3)
					FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 976), loc_3))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_4, 1024)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 2098, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[175] = --[[ Luau::BuiltinAstTypes::BuiltinAstTypes(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 288)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i64(memory_at_0, loc_2 + 280, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, 260), 0)
		rt_store_i64(memory_at_0, loc_2 + 272, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, loc_2 + 268, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 264, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 244, 0)
		rt_store_i64(memory_at_0, loc_2 + 232, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 104, rt_load_i64(memory_at_0, loc_2 + 252))
		rt_store_i32(memory_at_0, loc_2 + 112, rt_load_i32(memory_at_0, loc_2 + 260))
		rt_store_i64(memory_at_0, loc_2 + 224, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 120, rt_load_i64(memory_at_0, loc_2 + 264))
		rt_store_i64(memory_at_0, loc_2 + 96, rt_load_i64(memory_at_0, loc_2 + 244))
		rt_store_i64(memory_at_0, loc_2 + 216, rt_i64_ZERO)
		reg_0 = FUNC_LIST[362](loc_0, rt_add_i32(loc_2, 272), rt_add_i32(loc_2, 120), 3444, rt_add_i32(loc_2, 96), rt_add_i32(loc_2, 224), 0, rt_add_i32(loc_2, 216))
		loc_0 = reg_0
		rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, 204), 0)
		rt_store_i64(memory_at_0, loc_2 + 280, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, loc_2 + 212, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 208, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 188, 0)
		rt_store_i64(memory_at_0, loc_2 + 272, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 232, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 224, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 88, rt_load_i64(memory_at_0, loc_2 + 208))
		rt_store_i64(memory_at_0, loc_2 + 216, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_2 + 80, rt_load_i32(memory_at_0, loc_2 + 204))
		rt_store_i64(memory_at_0, loc_2 + 72, rt_load_i64(memory_at_0, loc_2 + 196))
		rt_store_i64(memory_at_0, loc_2 + 64, rt_load_i64(memory_at_0, loc_2 + 188))
		reg_0 = FUNC_LIST[362](rt_add_i32(loc_0, 84), rt_add_i32(loc_2, 272), rt_add_i32(loc_2, 88), 3019, rt_sub_i32(loc_2, 4294967232), rt_add_i32(loc_2, 224), 0, rt_add_i32(loc_2, 216))
		rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, 176), 0)
		rt_store_i64(memory_at_0, loc_2 + 280, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, loc_2 + 184, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 180, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 160, 0)
		rt_store_i64(memory_at_0, loc_2 + 272, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 232, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 224, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_2 + 180))
		rt_store_i64(memory_at_0, loc_2 + 216, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_2 + 48, rt_load_i32(memory_at_0, loc_2 + 176))
		rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_2 + 168))
		rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_2 + 160))
		reg_0 = FUNC_LIST[362](rt_add_i32(loc_0, 168), rt_add_i32(loc_2, 272), rt_add_i32(loc_2, 56), 3838, rt_add_i32(loc_2, 32), rt_add_i32(loc_2, 224), 0, rt_add_i32(loc_2, 216))
		rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, 148), 0)
		rt_store_i64(memory_at_0, loc_2 + 280, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, loc_2 + 156, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 152, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 132, 0)
		rt_store_i64(memory_at_0, loc_2 + 272, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 232, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 224, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_2 + 152))
		rt_store_i64(memory_at_0, loc_2 + 216, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_2 + 148))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_2 + 140))
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_2 + 132))
		reg_0 = FUNC_LIST[362](rt_add_i32(loc_0, 252), rt_add_i32(loc_2, 272), rt_add_i32(loc_2, 24), loc_1, loc_2, rt_add_i32(loc_2, 224), 0, rt_add_i32(loc_2, 216))
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 288)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[176] = --[[ Luau::DenseHashMap<Luau::AstName, unsigned char, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>::operator[](Luau::AstName const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 3), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[179](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 3))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 3), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[177] = --[[ Luau::Compiler::compileFunction(Luau::AstExprFunction*, unsigned char&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 56, loc_1)
		loc_16 = rt_load_i32(memory_at_0, loc_0 + 624)
		loc_5 = (if rt_load_i32(memory_at_0, loc_1 + 48) ~= 0 then 1 else 0)
		reg_0 = FUNC_LIST[61](rt_load_i32(memory_at_0, loc_0), bit_and(rt_add_i32(loc_5, rt_load_i32(memory_at_0, loc_1 + 56)), 255), rt_load_i32_u8(memory_at_0, loc_1 + 76))
		loc_13 = reg_0
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if rt_load_i32_u8(memory_at_0, loc_1 + 76) == 1 then
			while true do
				FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 65, bit_and(rt_add_i32(loc_5, rt_load_i32(memory_at_0, loc_1 + 56)), 255), 0, 0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 624)
			loc_6 = rt_load_i32(memory_at_0, loc_1 + 56)
			loc_8 = rt_add_i32(loc_5, loc_6)
			loc_3 = rt_add_i32(loc_7, loc_8)
			if loc_3 < 256 then
				while true do
					rt_store_i32(memory_at_0, loc_0 + 624, loc_3)
					loc_8 = rt_load_i32(memory_at_0, loc_0 + 628)
					rt_store_i32(memory_at_0, loc_0 + 628, (if loc_3 < loc_8 then loc_8 else loc_3))
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 48)
					if loc_3 ~= 0 then
						while true do
							FUNC_LIST[180](loc_0, loc_3, bit_and(loc_7, 255), 4294967295)
							reg_0 = rt_load_i32(memory_at_0, loc_1 + 56)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					if loc_6 ~= 0 then
						while true do
							loc_5 = rt_add_i32(loc_5, loc_7)
							loc_3 = 0
							while true do
								FUNC_LIST[180](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 52), rt_shl_i32(loc_3, 2))), bit_and(rt_add_i32(loc_3, loc_5), 255), 4294967295)
								loc_3 = rt_add_i32(loc_3, 1)
								if loc_3 < rt_load_i32(memory_at_0, loc_1 + 56) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 632, rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2))
					loc_9 = rt_load_i32(memory_at_0, loc_1 + 100)
					if rt_load_i32(memory_at_0, loc_9 + 32) ~= 0 then
						while true do
							loc_3 = 0
							while true do
								FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_9 + 28), rt_shl_i32(loc_3, 2))))
								loc_3 = rt_add_i32(loc_3, 1)
								if loc_3 < rt_load_i32(memory_at_0, loc_9 + 32) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = FUNC_LIST[182](loc_0, loc_9)
					if reg_0 == 0 then
						while true do
							if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
								while true do
									FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_9 + 16), 1))
									break
								end
								if desired then
									break
								end
							end
							FUNC_LIST[183](loc_0, 0)
							FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 22, 0, 1, 0)
							break
						end
						if desired then
							break
						end
					end
					while true do
						if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 4), 0) then
							break
						end
						if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 2) then
							break
						end
						rt_store_i32(memory_at_0, loc_4 + 76, 0)
						rt_store_i64(memory_at_0, loc_4 + 68, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_4 + 64, loc_0)
						rt_store_i32(memory_at_0, loc_4 + 60, 12528)
						loc_3 = rt_load_i32(memory_at_0, loc_1 + 100)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, rt_add_i32(loc_4, 60))
						loc_3 = rt_load_i32(memory_at_0, loc_4 + 68)
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 72)
						if loc_3 ~= loc_5 then
							while true do
								while true do
									reg_0 = FUNC_LIST[184](loc_0, rt_load_i32(memory_at_0, loc_3))
									loc_3 = rt_add_i32(loc_3, 4)
									if loc_5 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								reg_0 = rt_load_i32(memory_at_0, loc_4 + 68)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_3 = reg_0
						rt_store_i32(memory_at_0, loc_4 + 60, 12528)
						if loc_3 == 0 then
							break
						end
						rt_store_i32(memory_at_0, loc_4 + 72, loc_3)
						FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 76), loc_3))
						break
					end
					if desired then
						break
					end
					FUNC_LIST[103](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
						if rt_le_i32(loc_3, 0) then
							break
						end
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 108)
						if loc_5 ~= 0 then
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_0)
								rt_store_i32(memory_at_0, loc_4 + 48, loc_5)
								reg_1 = FUNC_LIST[544](loc_5)
								rt_store_i32(memory_at_0, loc_4 + 52, reg_1)
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_4 + 48))
								FUNC_LIST[102](loc_3, rt_add_i32(loc_4, 16))
								reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_3 = reg_0
						if rt_lt_i32(loc_3, 2) then
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 652)
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 656)
						if loc_3 == loc_7 then
							break
						end
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_0)
							loc_6 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))
							rt_store_i32(memory_at_0, loc_4 + 40, loc_6)
							reg_1 = FUNC_LIST[544](loc_6)
							rt_store_i32(memory_at_0, loc_4 + 44, reg_1)
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_4 + 40))
							FUNC_LIST[106](loc_5, rt_add_i32(loc_4, 8))
							loc_3 = rt_add_i32(loc_3, 4)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					while true do
						if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 12), 0) then
							break
						end
						loc_11 = rt_load_i32(memory_at_0, loc_0 + 652)
						loc_17 = rt_load_i32(memory_at_0, loc_0 + 656)
						if loc_11 == loc_17 then
							break
						end
						while true do
							loc_14 = 15
							while true do
								if rt_load_i32(memory_at_0, loc_0 + 248) == 0 then
									break
								end
								loc_8 = rt_load_i32(memory_at_0, loc_11)
								loc_10 = rt_load_i32(memory_at_0, loc_0 + 252)
								if loc_8 == loc_10 then
									break
								end
								loc_5 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
								loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 244), 1)
								loc_12 = rt_load_i32(memory_at_0, loc_0 + 240)
								loc_3 = 0
								while true do
									loc_7 = bit_and(loc_5, loc_6)
									loc_18 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_12)
									loc_5 = rt_load_i32(memory_at_0, loc_18)
									if loc_5 ~= loc_8 then
										while true do
											if loc_5 == loc_10 then
												desired = 5
												break
											end
											loc_3 = rt_add_i32(loc_3, 1)
											loc_5 = rt_add_i32(loc_7, loc_3)
											if loc_3 <= loc_6 then
												desired = 6
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_14 = rt_load_i32(memory_at_0, loc_18 + 4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							FUNC_LIST[98](rt_load_i32(memory_at_0, loc_0), loc_14)
							loc_11 = rt_add_i32(loc_11, 4)
							if loc_17 ~= loc_11 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 0) then
						while true do
							FUNC_LIST[116](rt_load_i32(memory_at_0, loc_0))
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[117](rt_load_i32(memory_at_0, loc_0))
					FUNC_LIST[185](loc_0, 0)
					reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
					if reg_0 >= 1000000001 then
						desired = 1
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 228) == 0 then
							break
						end
						loc_8 = rt_load_i32(memory_at_0, loc_0 + 232)
						if loc_8 == loc_1 then
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
						loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 224), 1)
						loc_12 = rt_load_i32(memory_at_0, loc_0 + 220)
						loc_3 = 0
						while true do
							loc_7 = bit_and(loc_5, loc_6)
							loc_10 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_12)
							loc_5 = rt_load_i32(memory_at_0, loc_10)
							if loc_5 ~= loc_1 then
								while true do
									if loc_5 == loc_8 then
										desired = 3
										break
									end
									loc_3 = rt_add_i32(loc_3, 1)
									loc_5 = rt_add_i32(loc_7, loc_3)
									if loc_3 <= loc_6 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_0)
						loc_5 = rt_add_i32(loc_10, 12)
						rt_store_i32(memory_at_0, loc_4 + 32, rt_load_i32(memory_at_0, loc_5))
						rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_10 + 4))
						rt_store_i64(memory_at_0, loc_10 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_10 + 12, 0)
						FUNC_LIST[96](loc_3, rt_add_i32(loc_4, 24))
						if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_4 + 35), 0) then
							break
						end
						FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 24), bit_and(rt_load_i32(memory_at_0, loc_4 + 32), 2147483647))
						break
					end
					if desired then
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 104) ~= 0 then
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_0 + 636) ~= 0 then
							break
						end
						rt_store_i32_n8(memory_at_0, loc_2, bit_or(rt_load_i32_u8(memory_at_0, loc_2), 2))
						break
					end
					if desired then
						break
					end
					while true do
						if rt_load_i32_u8(memory_at_0, 49068) == 0 then
							while true do
								loc_3 = rt_load_i32_u8(memory_at_0, loc_2)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[305](loc_1)
						loc_5 = reg_0
						loc_3 = rt_load_i32_u8(memory_at_0, loc_2)
						if loc_5 == 0 then
							break
						end
						loc_3 = bit_or(loc_3, 4)
						rt_store_i32_n8(memory_at_0, loc_2, loc_3)
						break
					end
					if desired then
						break
					end
					FUNC_LIST[64](rt_load_i32(memory_at_0, loc_0), rt_load_i32_u8(memory_at_0, loc_0 + 628), bit_and(rt_shr_u32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 656), rt_load_i32(memory_at_0, loc_0 + 652)), 2), 255), bit_and(loc_3, 255))
					reg_0 = FUNC_LIST[186](rt_add_i32(loc_0, 40), rt_add_i32(loc_4, 56))
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_5, loc_13)
					loc_3 = rt_add_i32(loc_5, 4)
					if loc_3 ~= rt_add_i32(loc_0, 652) then
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 652)
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 656)
							FUNC_LIST[187](loc_3, loc_6, loc_7, rt_shr_i32(rt_sub_i32(loc_7, loc_6), 2))
							break
						end
						if desired then
							break
						end
					end
					loc_15 = loc_0
					loc_3 = rt_add_i32(loc_15, 628)
					while true do
						if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 2) then
							break
						end
						loc_6 = rt_load_i32(memory_at_0, loc_4 + 56)
						if rt_load_i32_u8(memory_at_0, loc_6 + 76) ~= 0 then
							break
						end
						if rt_load_i32(memory_at_0, loc_6 + 48) ~= 0 then
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_0 + 637) ~= 0 then
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_0 + 638) ~= 0 then
							break
						end
						rt_store_i32_n8(memory_at_0, loc_5 + 28, 1)
						rt_store_i32(memory_at_0, loc_5 + 24, rt_load_i32(memory_at_0, loc_0 + 628))
						reg_1 = FUNC_LIST[150](rt_load_i32(memory_at_0, loc_6 + 100), rt_load_i32(memory_at_0, loc_6 + 52), rt_load_i32(memory_at_0, loc_6 + 56), rt_add_i32(loc_0, 180))
						rt_store_i64(memory_at_0, loc_5 + 16, reg_1)
						reg_0 = FUNC_LIST[182](loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 56) + 100))
						if reg_0 == 0 then
							break
						end
						rt_store_i32_n8(memory_at_0, loc_4 + 68, 1)
						rt_store_i32(memory_at_0, loc_4 + 64, loc_0)
						rt_store_i32(memory_at_0, loc_4 + 60, 12824)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_9))](loc_9, rt_add_i32(loc_4, 60))
						rt_store_i32_n8(memory_at_0, loc_5 + 29, rt_load_i32_u8(memory_at_0, loc_4 + 68))
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 656, rt_load_i32(memory_at_0, loc_0 + 652))
					rt_store_i32_n8(memory_at_0, loc_15 + 636, 0)
					rt_store_i64(memory_at_0, loc_15 + 628, rt_i64_ZERO)
					rt_store_i32(memory_at_0, loc_0 + 624, loc_16)
					GLOBAL_LIST[0].value = rt_add_i32(loc_4, 80)
					reg_0 = loc_13
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_4 + 4, 255)
			rt_store_i32(memory_at_0, loc_4, loc_8)
			FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4390, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[178] = --[[ Luau::Compiler::~Compiler() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 712)
		if loc_3 ~= 0 then
			while true do
				loc_2 = loc_3
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 716)
				if loc_2 ~= loc_1 then
					while true do
						while true do
							loc_1 = rt_sub_i32(loc_1, 4)
							loc_2 = rt_load_i32(memory_at_0, loc_1)
							rt_store_i32(memory_at_0, loc_1, 0)
							if loc_2 ~= 0 then
								while true do
									FUNC_LIST[654](loc_2)
									break
								end
							end
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 712)
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
				end
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 716, loc_3)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 720), loc_2))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 700)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 704, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 708), loc_1))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 688)
		if loc_3 ~= 0 then
			while true do
				loc_2 = loc_3
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 692)
				if loc_2 ~= loc_1 then
					while true do
						while true do
							loc_2 = rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12))
							if loc_2 ~= 0 then
								while true do
									rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 8), loc_2)
									FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), loc_2))
									break
								end
							end
							loc_1 = rt_sub_i32(loc_1, 24)
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 688)
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
				end
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 692, loc_3)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 696), loc_2))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 676)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 680, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 684), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 664)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 668, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 672), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 652)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 656, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 660), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 640)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 644, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 648), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 260)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 260, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 240)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 240, rt_i64_ZERO)
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 220)
		if loc_3 ~= 0 then
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
				if loc_4 ~= 0 then
					while true do
						loc_1 = 0
						while true do
							loc_2 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_3)
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_2 + 15), 0) then
								while true do
									loc_5 = loc_2
									loc_2 = rt_add_i32(loc_5, 4)
									FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2), bit_and(rt_load_i32(memory_at_0, loc_5 + 12), 2147483647))
									break
								end
							end
							loc_1 = rt_add_i32(loc_1, 1)
							if loc_4 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 220)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				FUNC_LIST[652](loc_3)
				rt_store_i64(memory_at_0, loc_0 + 220, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 200)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 200, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 180)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 180, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 160)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 160, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 140)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 140, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 120)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 120, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 100)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 100, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 80)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 80, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 60, rt_i64_ZERO)
				break
			end
		end
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 40)
		if loc_4 ~= 0 then
			while true do
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 44)
				if loc_6 ~= 0 then
					while true do
						loc_1 = 0
						while true do
							loc_3 = rt_add_i32(rt_mul_i32(loc_1, 40), loc_4)
							loc_2 = rt_load_i32(memory_at_0, loc_3 + 12)
							if loc_2 ~= 0 then
								while true do
									loc_7 = loc_3
									loc_3 = rt_add_i32(loc_7, 8)
									rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
									FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_7 + 20), loc_2))
									break
								end
							end
							loc_1 = rt_add_i32(loc_1, 1)
							if loc_6 ~= loc_1 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 40)
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
				end
				loc_4 = reg_0
				FUNC_LIST[652](loc_4)
				rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[179] = --[[ Luau::detail::DenseHashTable<Luau::AstName, std::__2::pair<Luau::AstName, unsigned char>, std::__2::pair<Luau::AstName const, unsigned char>, Luau::detail::ItemInterfaceMap<Luau::AstName, unsigned char>, std::__2::hash<Luau::AstName>, std::__2::equal_to<Luau::AstName>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_11 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_10 ~= 0 then rt_shl_i32(loc_10, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 3))
			loc_7 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_7)
						rt_store_i32_n8(memory_at_0, loc_1 + 4, 0)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
						rt_store_i32_n8(memory_at_0, loc_1 + 12, 0)
						rt_store_i32_n8(memory_at_0, loc_1 + 20, 0)
						rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
						rt_store_i32_n8(memory_at_0, loc_1 + 28, 0)
						rt_store_i32(memory_at_0, loc_1 + 24, loc_3)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_5 = rt_add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_7)
						rt_store_i32_n8(memory_at_0, loc_1 + 4, 0)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_10 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_12 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(loc_9, 3))
					loc_4 = rt_load_i32(memory_at_0, loc_12)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9)))
									loc_5 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_7)
									loc_3 = rt_load_i32(memory_at_0, loc_5)
									if loc_11 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = rt_add_i32(loc_2, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_2))
										loc_5 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_7)
										loc_3 = rt_load_i32(memory_at_0, loc_5)
										if loc_11 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_5, loc_4)
							rt_store_i32_n8(memory_at_0, loc_5 + 4, rt_load_i32_u8(memory_at_0, loc_12 + 4))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[180] = --[[ Luau::Compiler::pushLocal(Luau::AstLocal*, unsigned char, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 12, loc_1)
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 644)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 640)
			loc_9 = rt_sub_i32(loc_4, loc_7)
			loc_5 = rt_shr_i32(loc_9, 2)
			if loc_5 < 200 then
				while true do
					while true do
						loc_8 = rt_load_i32(memory_at_0, loc_0 + 648)
						if loc_4 < loc_8 then
							while true do
								rt_store_i32(memory_at_0, loc_4, loc_1)
								loc_1 = rt_add_i32(loc_4, 4)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_8 = rt_sub_i32(loc_8, loc_7)
						loc_10 = rt_shr_i32(loc_8, 1)
						loc_5 = rt_add_i32(loc_5, 1)
						loc_5 = (if loc_8 >= 2147483644 then 1073741823 else (if loc_5 < loc_10 then loc_10 else loc_5))
						if loc_5 >= 1073741824 then
							desired = 1
							break
						end
						loc_10 = rt_shl_i32(loc_5, 2)
						reg_1 = FUNC_LIST[646](loc_10)
						loc_11 = reg_1
						loc_5 = rt_add_i32(loc_9, loc_11)
						rt_store_i32(memory_at_0, loc_5, loc_1)
						loc_9 = rt_add_i32(loc_10, loc_11)
						loc_1 = rt_add_i32(loc_5, 4)
						if loc_4 ~= loc_7 then
							while true do
								while true do
									loc_5 = rt_sub_i32(loc_5, 4)
									loc_4 = rt_sub_i32(loc_4, 4)
									rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_4))
									if loc_4 ~= loc_7 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_0 + 648, loc_9)
						rt_store_i32(memory_at_0, loc_0 + 644, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 640, loc_5)
						if loc_7 == 0 then
							break
						end
						FUNC_LIST[653](loc_7, loc_8)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 644, loc_1)
					reg_0 = FUNC_LIST[204](rt_add_i32(loc_0, 60), rt_add_i32(loc_6, 12))
					loc_4 = reg_0
					rt_store_i32_n8(memory_at_0, loc_4 + 1, 1)
					rt_store_i32_n8(memory_at_0, loc_4, loc_2)
					reg_1 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
					loc_5 = reg_1
					rt_store_i32(memory_at_0, loc_4 + 4, loc_5)
					rt_store_i32(memory_at_0, loc_4 + 8, (if loc_3 == 4294967295 then loc_5 else loc_3))
					GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_load_i32(memory_at_0, loc_1)
			rt_store_i32(memory_at_0, loc_6 + 4, 200)
			rt_store_i32(memory_at_0, loc_6, loc_4)
			FUNC_LIST[173](rt_add_i32(loc_1, 4), 5949, loc_6)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[181] = --[[ Luau::Compiler::compileStat(Luau::AstStat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, 48716)
		while true do
			if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 16), 0) then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_3 == loc_2 then
				break
			end
			if rt_load_i32(memory_at_0, 48836) == loc_2 then
				break
			end
			FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 69, 0, 0, 0)
			loc_3 = rt_load_i32(memory_at_0, 48716)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
		while true do
			while true do
				while true do
					while true do
						if loc_1 == 0 then
							break
						end
						if loc_2 ~= loc_3 then
							break
						end
						loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2)
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 624)
						if rt_load_i32(memory_at_0, loc_1 + 32) ~= 0 then
							while true do
								loc_3 = 0
								while true do
									FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_3, 2))))
									loc_3 = rt_add_i32(loc_3, 1)
									if loc_3 < rt_load_i32(memory_at_0, loc_1 + 32) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[183](loc_0, loc_2)
						FUNC_LIST[185](loc_0, loc_2)
						rt_store_i32(memory_at_0, loc_0 + 624, loc_5)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48724) ~= loc_2 then
							break
						end
						FUNC_LIST[205](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48732) ~= loc_2 then
							break
						end
						FUNC_LIST[206](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48740) ~= loc_2 then
							break
						end
						FUNC_LIST[207](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == rt_load_i32(memory_at_0, 48748) then
						while true do
							FUNC_LIST[183](loc_0, rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 680), 12)))
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_6 = reg_0
							FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 23, 0, 0)
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 668)
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 672)
							if loc_3 < loc_5 then
								while true do
									rt_store_i64(memory_at_0, loc_3, rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(32, 0)))
									rt_store_i32(memory_at_0, loc_0 + 668, rt_add_i32(loc_3, 8))
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							loc_4 = rt_add_i32(loc_0, 664)
							loc_2 = rt_load_i32(memory_at_0, loc_4)
							loc_9 = rt_shr_i32(rt_sub_i32(loc_3, loc_2), 3)
							loc_1 = rt_add_i32(loc_9, 1)
							if loc_1 >= 536870912 then
								desired = 2
								break
							end
							loc_4 = rt_sub_i32(loc_5, loc_2)
							loc_8 = rt_shr_i32(loc_4, 2)
							loc_4 = (if loc_4 >= 2147483640 then 536870911 else (if loc_1 < loc_8 then loc_8 else loc_1))
							if loc_4 ~= 0 then
								while true do
									if loc_4 >= 536870912 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 3))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									break
								end
							end
							loc_8 = reg_0
							loc_1 = rt_add_i32(loc_8, rt_shl_i32(loc_9, 3))
							rt_store_i64(memory_at_0, loc_1, rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(32, 0)))
							loc_4 = rt_add_i32(rt_shl_i32(loc_4, 3), loc_8)
							loc_6 = rt_add_i32(loc_1, 8)
							if loc_2 ~= loc_3 then
								while true do
									while true do
										loc_1 = rt_sub_i32(loc_1, 8)
										loc_3 = rt_sub_i32(loc_3, 8)
										rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
										if loc_2 ~= loc_3 then
											continue
										end
										break
									end
									if desired then
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_0 + 672)
									reg_0 = rt_load_i32(memory_at_0, loc_0 + 664)
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_2
									break
								end
								if desired then
									break
								end
							end
							loc_2 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 672, loc_4)
							rt_store_i32(memory_at_0, loc_0 + 668, loc_6)
							rt_store_i32(memory_at_0, loc_0 + 664, loc_1)
							if loc_2 ~= 0 then
								while true do
									FUNC_LIST[653](loc_2, rt_sub_i32(loc_5, loc_2))
									break
								end
								if desired then
									break
								end
							end
							rt_store_i32(memory_at_0, loc_0 + 668, loc_6)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48756) ~= loc_2 then
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 680)
						loc_2 = rt_sub_i32(loc_3, 4)
						if rt_load_i32(memory_at_0, loc_2) == 0 then
							while true do
								rt_store_i32(memory_at_0, loc_2, loc_1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[183](loc_0, rt_load_i32(memory_at_0, rt_sub_i32(loc_3, 8)))
						reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
						loc_3 = reg_0
						FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 23, 0, 0)
						rt_store_i32(memory_at_0, loc_7 + 12, loc_3)
						rt_store_i32(memory_at_0, loc_7 + 8, 1)
						FUNC_LIST[208](rt_add_i32(loc_0, 664), rt_add_i32(loc_7, 8))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48764) ~= loc_2 then
							break
						end
						while true do
							if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 2) then
								break
							end
							if rt_load_i32(memory_at_0, loc_0 + 688) == rt_load_i32(memory_at_0, loc_0 + 692) then
								break
							end
							FUNC_LIST[209](loc_0, loc_1, 0)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[210](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48772) ~= loc_2 then
							break
						end
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_1 + 28)
							if loc_3 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, loc_3 + 4) ~= rt_load_i32(memory_at_0, 48636) then
								break
							end
							FUNC_LIST[211](loc_0, loc_3, rt_load_i32_u8(memory_at_0, loc_0 + 624), 0, 0, 0)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[212](loc_0, loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48780) ~= loc_2 then
							break
						end
						FUNC_LIST[213](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48788) ~= loc_2 then
							break
						end
						FUNC_LIST[214](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48796) ~= loc_2 then
							break
						end
						FUNC_LIST[215](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48804) ~= loc_2 then
							break
						end
						FUNC_LIST[216](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48812) ~= loc_2 then
							break
						end
						FUNC_LIST[217](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_1 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48820) ~= loc_2 then
							break
						end
						FUNC_LIST[218](loc_0, loc_1)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_1 == 0 then
						break
					end
					if rt_load_i32(memory_at_0, 48828) ~= loc_2 then
						break
					end
					reg_0 = FUNC_LIST[203](loc_0, loc_1, 1)
					loc_3 = reg_0
					FUNC_LIST[180](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), loc_3, 4294967295)
					FUNC_LIST[219](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), loc_3)
					reg_0 = FUNC_LIST[204](rt_add_i32(loc_0, 60), rt_add_i32(loc_1, 28))
					reg_1 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
					rt_store_i32(memory_at_0, reg_0 + 4, reg_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[182] = --[[ Luau::Compiler::alwaysTerminates(Luau::AstStat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, 48716)
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
				while true do
					if loc_1 == 0 then
						break
					end
					if loc_2 ~= loc_3 then
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
					if loc_2 == 0 then
						while true do
							loc_3 = 0
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2)), 4))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 1
				if rt_load_i32(memory_at_0, 48764) == loc_2 then
					break
				end
				if rt_load_i32(memory_at_0, 48748) == loc_2 then
					break
				end
				if rt_load_i32(memory_at_0, 48756) == loc_2 then
					break
				end
				loc_3 = 0
				if loc_1 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48724) ~= loc_2 then
					break
				end
				if rt_load_i32(memory_at_0, loc_1 + 36) == 0 then
					break
				end
				reg_0 = FUNC_LIST[182](loc_0, rt_load_i32(memory_at_0, loc_1 + 32))
				if reg_0 == 0 then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, 48716)
				loc_1 = rt_load_i32(memory_at_0, loc_1 + 36)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[183] = --[[ Luau::Compiler::closeLocals(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 640)
			loc_11 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), loc_10), 2)
			if loc_11 <= loc_1 then
				break
			end
			loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
			loc_12 = rt_load_i32(memory_at_0, loc_0 + 60)
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 72)
			loc_13 = rt_load_i32(memory_at_0, loc_0 + 68)
			loc_4 = 255
			while true do
				loc_2 = 0
				while true do
					if loc_13 == 0 then
						break
					end
					loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), loc_10))
					if loc_8 == loc_6 then
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
					loc_3 = 0
					while true do
						loc_14 = bit_and(loc_5, loc_7)
						loc_2 = rt_add_i32(rt_shl_i32(loc_14, 4), loc_12)
						loc_5 = rt_load_i32(memory_at_0, loc_2)
						if loc_6 == loc_5 then
							desired = 3
							break
						end
						loc_2 = 0
						if loc_5 == loc_8 then
							desired = 3
							break
						end
						loc_3 = rt_add_i32(loc_3, 1)
						loc_5 = rt_add_i32(loc_14, loc_3)
						if loc_3 <= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = (if loc_2 ~= 0 then rt_add_i32(loc_2, 4) else 0)
				if rt_load_i32_u8(memory_at_0, loc_3 + 2) == 1 then
					while true do
						loc_9 = 1
						loc_3 = rt_load_i32_u8(memory_at_0, loc_3)
						loc_2 = bit_and(loc_4, 255)
						reg_0 = (if loc_2 > loc_3 then loc_3 else loc_2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_4 = reg_0
				loc_1 = rt_add_i32(loc_1, 1)
				if loc_11 ~= loc_1 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_9 == 0 then
				break
			end
			FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 11, bit_and(loc_4, 255), 0, 0)
			break
		end
		break
	end
end
FUNC_LIST[184] = --[[ Luau::Compiler::getUpval(Luau::AstLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 12, loc_1)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 656)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 652)
		loc_4 = rt_shr_i32(rt_sub_i32(loc_5, loc_2), 2)
		while true do
			while true do
				while true do
					while true do
						if loc_2 ~= loc_5 then
							while true do
								loc_7 = (if loc_4 <= 1 then 1 else loc_4)
								while true do
									if loc_1 == rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_2)) then
										desired = 4
										break
									end
									loc_3 = rt_add_i32(loc_3, 1)
									if loc_7 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_4 >= 200 then
							desired = 3
							break
						end
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 108) == 0 then
								break
							end
							loc_8 = rt_load_i32(memory_at_0, loc_0 + 112)
							if loc_8 == loc_1 then
								break
							end
							loc_2 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
							loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
							loc_9 = rt_load_i32(memory_at_0, loc_0 + 100)
							loc_3 = 0
							while true do
								loc_4 = bit_and(loc_2, loc_7)
								loc_10 = rt_add_i32(rt_mul_i32(loc_4, 12), loc_9)
								loc_2 = rt_load_i32(memory_at_0, loc_10)
								if loc_2 ~= loc_1 then
									while true do
										if loc_2 == loc_8 then
											desired = 5
											break
										end
										loc_3 = rt_add_i32(loc_3, 1)
										loc_2 = rt_add_i32(loc_4, loc_3)
										if loc_3 <= loc_7 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_10 + 8) ~= 1 then
								break
							end
							reg_0 = FUNC_LIST[204](rt_add_i32(loc_0, 60), rt_add_i32(loc_6, 12))
							rt_store_i32_n8(memory_at_0, reg_0 + 2, 1)
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 656)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 660)
							if loc_5 < loc_7 then
								while true do
									rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_6 + 12))
									loc_2 = rt_add_i32(loc_5, 4)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = rt_add_i32(loc_0, 652)
							loc_1 = rt_load_i32(memory_at_0, loc_2)
							loc_8 = rt_shr_i32(rt_sub_i32(loc_5, loc_1), 2)
							loc_3 = rt_add_i32(loc_8, 1)
							if loc_3 >= 1073741824 then
								desired = 2
								break
							end
							loc_2 = rt_sub_i32(loc_7, loc_1)
							loc_4 = rt_shr_i32(loc_2, 1)
							loc_2 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_3 < loc_4 then loc_4 else loc_3))
							if loc_2 ~= 0 then
								while true do
									if loc_2 >= 1073741824 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[646](rt_shl_i32(loc_2, 2))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = reg_0
							loc_3 = rt_add_i32(loc_4, rt_shl_i32(loc_8, 2))
							rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_6 + 12))
							loc_4 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_4)
							loc_2 = rt_add_i32(loc_3, 4)
							if loc_1 ~= loc_5 then
								while true do
									while true do
										loc_3 = rt_sub_i32(loc_3, 4)
										loc_5 = rt_sub_i32(loc_5, 4)
										rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_5))
										if loc_1 ~= loc_5 then
											continue
										end
										break
									end
									if desired then
										break
									end
									loc_7 = rt_load_i32(memory_at_0, loc_0 + 660)
									reg_0 = rt_load_i32(memory_at_0, loc_0 + 652)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 660, loc_4)
							rt_store_i32(memory_at_0, loc_0 + 656, loc_2)
							rt_store_i32(memory_at_0, loc_0 + 652, loc_3)
							if loc_1 == 0 then
								break
							end
							FUNC_LIST[653](loc_1, rt_sub_i32(loc_7, loc_1))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 656, loc_2)
						loc_3 = rt_sub_i32(rt_shr_u32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 652)), 2), 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
					reg_0 = bit_and(loc_3, 255)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_1)
				rt_store_i32(memory_at_0, loc_6 + 4, 200)
				rt_store_i32(memory_at_0, loc_6, loc_3)
				FUNC_LIST[173](rt_add_i32(loc_1, 4), 6018, loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_2)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[185] = --[[ Luau::Compiler::popLocals(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 640)
		loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), loc_3), 2)
		if loc_1 < loc_2 then
			while true do
				loc_7 = loc_1
				while true do
					loc_2 = 0
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
							break
						end
						loc_5 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 2), loc_3))
						loc_10 = rt_load_i32(memory_at_0, loc_0 + 72)
						if loc_5 == loc_10 then
							break
						end
						loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
						loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
						loc_11 = rt_load_i32(memory_at_0, loc_0 + 60)
						loc_3 = 0
						while true do
							loc_9 = bit_and(loc_4, loc_8)
							loc_2 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_11)
							loc_4 = rt_load_i32(memory_at_0, loc_2)
							if loc_5 == loc_4 then
								desired = 3
								break
							end
							loc_2 = 0
							if loc_4 == loc_10 then
								desired = 3
								break
							end
							loc_3 = rt_add_i32(loc_3, 1)
							loc_4 = rt_add_i32(loc_9, loc_3)
							if loc_3 <= loc_8 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_9 = (if loc_2 ~= 0 then rt_add_i32(loc_2, 4) else 0)
					rt_store_i32_n8(memory_at_0, loc_9 + 1, 0)
					if rt_ge_i32(rt_load_i32(memory_at_0, loc_0 + 8), 2) then
						while true do
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_3 = reg_0
							loc_2 = rt_load_i32(memory_at_0, loc_0)
							loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 640), rt_shl_i32(loc_7, 2))))
							rt_store_i32(memory_at_0, loc_6 + 8, loc_4)
							reg_1 = FUNC_LIST[544](loc_4)
							rt_store_i32(memory_at_0, loc_6 + 12, reg_1)
							loc_4 = rt_load_i32(memory_at_0, loc_9 + 4)
							loc_8 = rt_load_i32_u8(memory_at_0, loc_9)
							rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_6 + 8))
							FUNC_LIST[105](loc_2, loc_6, loc_8, loc_4, loc_3)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					while true do
						if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 12), 0) then
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 632) > loc_7 then
							break
						end
						reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
						loc_13 = reg_0
						loc_12 = 15
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 248) == 0 then
								break
							end
							loc_5 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 640), rt_shl_i32(loc_7, 2)))
							loc_10 = rt_load_i32(memory_at_0, loc_0 + 252)
							if loc_5 == loc_10 then
								break
							end
							loc_2 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
							loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 244), 1)
							loc_11 = rt_load_i32(memory_at_0, loc_0 + 240)
							loc_3 = 0
							while true do
								loc_8 = bit_and(loc_2, loc_4)
								loc_14 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_11)
								loc_2 = rt_load_i32(memory_at_0, loc_14)
								if loc_2 ~= loc_5 then
									while true do
										if loc_2 == loc_10 then
											desired = 4
											break
										end
										loc_3 = rt_add_i32(loc_3, 1)
										loc_2 = rt_add_i32(loc_8, loc_3)
										if loc_3 <= loc_4 then
											desired = 5
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_12 = rt_load_i32(memory_at_0, loc_14 + 4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						FUNC_LIST[97](rt_load_i32(memory_at_0, loc_0), loc_12, rt_load_i32_u8(memory_at_0, loc_9), rt_load_i32(memory_at_0, loc_9 + 8), loc_13)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_7 = rt_add_i32(loc_7, 1)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 640)
					loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), loc_3), 2)
					if loc_7 < loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		while true do
			if loc_1 > loc_2 then
				while true do
					FUNC_LIST[220](rt_add_i32(loc_0, 640), rt_sub_i32(loc_1, loc_2))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_1 >= loc_2 then
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 644, rt_add_i32(rt_shl_i32(loc_1, 2), loc_3))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		break
	end
end
FUNC_LIST[186] = --[[ Luau::DenseHashMap<Luau::AstExprFunction*, Luau::Compiler::Function, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::operator[](Luau::AstExprFunction* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_5, 40), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[221](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_mul_i32(loc_3, 40))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_mul_i32(loc_3, 40), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 8)
		break
	end
	return reg_0
end
FUNC_LIST[187] = --[[ void std::__2::vector<Luau::AstLocal*, std::__2::allocator<Luau::AstLocal*>>::__assign_with_size[abi:ne180100]<Luau::AstLocal**, Luau::AstLocal**>(Luau::AstLocal**, Luau::AstLocal**, long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			loc_6 = rt_sub_i32(loc_5, loc_4)
			if loc_3 <= rt_shr_i32(loc_6, 2) then
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 4)
					loc_6 = rt_sub_i32(loc_5, loc_4)
					if loc_3 > rt_shr_i32(loc_6, 2) then
						while true do
							loc_3 = rt_add_i32(loc_1, loc_6)
							if loc_4 ~= loc_5 then
								while true do
									reg_0 = FUNC_LIST[518](loc_4, loc_1, loc_6)
									reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_5
									break
								end
								if desired then
									break
								end
							end
							loc_5 = reg_0
							loc_4 = rt_sub_i32(loc_2, loc_3)
							if loc_2 ~= loc_3 then
								while true do
									reg_0 = FUNC_LIST[518](loc_5, loc_3, loc_4)
									break
								end
								if desired then
									break
								end
							end
							rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_4, loc_5))
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					loc_3 = rt_sub_i32(loc_2, loc_1)
					if loc_1 ~= loc_2 then
						while true do
							reg_0 = FUNC_LIST[518](loc_4, loc_1, loc_3)
							break
						end
						if desired then
							break
						end
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_4 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
					FUNC_LIST[653](loc_4, loc_6)
					rt_store_i32(memory_at_0, loc_0 + 8, 0)
					rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
					reg_0 = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_5
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = reg_0
			while true do
				if loc_3 >= 1073741824 then
					break
				end
				loc_4 = rt_shr_i32(loc_5, 1)
				loc_3 = (if loc_5 >= 2147483644 then 1073741823 else (if loc_3 < loc_4 then loc_4 else loc_3))
				if loc_3 >= 1073741824 then
					break
				end
				loc_4 = rt_shl_i32(loc_3, 2)
				reg_1 = FUNC_LIST[646](loc_4)
				loc_3 = reg_1
				rt_store_i32(memory_at_0, loc_0 + 4, loc_3)
				rt_store_i32(memory_at_0, loc_0, loc_3)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_3, loc_4))
				loc_4 = rt_sub_i32(loc_2, loc_1)
				if loc_1 ~= loc_2 then
					while true do
						reg_0 = FUNC_LIST[517](loc_3, loc_1, loc_4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_3, loc_4))
		break
	end
end
FUNC_LIST[188] = --[[ Luau::AstVisitor::~AstVisitor() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[189] = --[[ Luau::FragmentParseResumeSettings* std::__2::__construct_at[abi:ne180100]<Luau::FragmentParseResumeSettings, Luau::FragmentParseResumeSettings const&, Luau::FragmentParseResumeSettings*>(Luau::FragmentParseResumeSettings*, Luau::FragmentParseResumeSettings const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_2 == 0 then
				break
			end
			reg_1 = FUNC_LIST[646](rt_shl_i32(loc_2, 3))
			rt_store_i32(memory_at_0, loc_0, reg_1)
			if rt_load_i32(memory_at_0, loc_1 + 4) == 0 then
				break
			end
			loc_2 = 0
			while true do
				loc_3 = rt_shl_i32(loc_2, 3)
				rt_store_i64(memory_at_0, rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_0)), rt_load_i64(memory_at_0, rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_1))))
				loc_2 = rt_add_i32(loc_2, 1)
				rt_store_i32(memory_at_0, loc_0 + 4, loc_2)
				if rt_load_i32(memory_at_0, loc_1 + 4) > loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 28, 0)
		rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 20)
			if loc_2 ~= loc_3 then
				while true do
					loc_2 = rt_sub_i32(loc_2, loc_3)
					if rt_lt_i32(loc_2, 0) then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[646](loc_2)
					loc_1 = reg_1
					rt_store_i32(memory_at_0, loc_0 + 24, loc_1)
					rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
					loc_4 = rt_add_i32(loc_1, loc_2)
					rt_store_i32(memory_at_0, loc_0 + 28, loc_4)
					reg_0 = FUNC_LIST[517](loc_1, loc_3, loc_2)
					rt_store_i32(memory_at_0, loc_0 + 24, loc_4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](rt_add_i32(loc_0, 20))
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[190] = --[[ Luau::compile(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&, Luau::CompileOptions const&, Luau::ParseOptions const&, Luau::BytecodeEncoder*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 656)
		GLOBAL_LIST[0].value = loc_5
		reg_1 = FUNC_LIST[390](rt_add_i32(loc_5, 648))
		loc_9 = reg_1
		reg_0 = FUNC_LIST[397](rt_add_i32(loc_5, 616), loc_9)
		loc_7 = reg_0
		loc_10 = rt_load_i32(memory_at_0, loc_1)
		loc_11 = rt_load_i32(memory_at_0, loc_1 + 4)
		loc_6 = rt_load_i32_i8(memory_at_0, loc_1 + 11)
		loc_8 = rt_load_i32_u16(memory_at_0, loc_3)
		rt_store_i32_n8(memory_at_0, loc_5 + 568, 0)
		rt_store_i32_n8(memory_at_0, loc_5 + 536, 0)
		rt_store_i32_n16(memory_at_0, loc_5 + 532, loc_8)
		loc_8 = (if rt_lt_i32(loc_6, 0) then 1 else 0)
		loc_6 = (if loc_8 ~= 0 then loc_11 else loc_6)
		loc_1 = (if loc_8 ~= 0 then loc_10 else loc_1)
		if rt_load_i32_u8(memory_at_0, loc_3 + 36) == 1 then
			while true do
				reg_0 = FUNC_LIST[189](rt_add_i32(loc_5, 536), rt_add_i32(loc_3, 4))
				rt_store_i32_n8(memory_at_0, loc_5 + 568, 1)
				break
			end
		end
		FUNC_LIST[429](rt_add_i32(loc_5, 572), loc_1, loc_6, loc_7, loc_9, rt_add_i32(loc_5, 532))
		while true do
			if rt_load_i32_u8(memory_at_0, loc_5 + 568) ~= 1 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_5 + 556)
			if loc_1 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_5 + 560, loc_1)
					FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 564), loc_1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_5 + 536)
			if loc_1 == 0 then
				break
			end
			FUNC_LIST[652](loc_1)
			rt_store_i64(memory_at_0, loc_5 + 536, rt_i64_ZERO)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_5 + 592)
			if loc_1 ~= rt_load_i32(memory_at_0, loc_5 + 596) then
				while true do
					reg_0 = FUNC_LIST[426](loc_1)
					loc_3 = rt_load_i32(memory_at_0, reg_0)
					reg_1 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 8)](loc_1)
					rt_store_i32(memory_at_0, loc_5 + 4, reg_1)
					rt_store_i32(memory_at_0, loc_5, rt_add_i32(loc_3, 1))
					FUNC_LIST[513](rt_add_i32(loc_5, 16), 2783, loc_5)
					FUNC_LIST[120](loc_0, rt_add_i32(loc_5, 16))
					if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_5 + 27), 0) then
						desired = 1
						break
					end
					FUNC_LIST[653](rt_load_i32(memory_at_0, loc_5 + 16), bit_and(rt_load_i32(memory_at_0, loc_5 + 24), 2147483647))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[59](rt_add_i32(loc_5, 16), loc_4)
			loc_1 = reg_0
			FUNC_LIST[174](loc_1, rt_add_i32(loc_5, 572), loc_7, loc_2)
			while true do
				if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 459), 0) then
					while true do
						loc_3 = rt_add_i32(loc_1, 448)
						rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_3))
						rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[716](loc_0, rt_load_i32(memory_at_0, loc_1 + 448), rt_load_i32(memory_at_0, loc_1 + 452))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[191](loc_1)
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_5 + 604)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_5 + 608, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 612), loc_1))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_5 + 592)
		if loc_3 ~= 0 then
			while true do
				loc_6 = loc_3
				loc_1 = rt_load_i32(memory_at_0, loc_5 + 596)
				if loc_3 ~= loc_1 then
					while true do
						while true do
							loc_1 = rt_sub_i32(loc_1, 32)
							reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1))](loc_1)
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_5 + 592)
						break
					end
				else
					while true do
						reg_0 = loc_6
						break
					end
				end
				loc_6 = reg_0
				rt_store_i32(memory_at_0, loc_5 + 596, loc_3)
				FUNC_LIST[653](loc_6, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 600), loc_6))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_5 + 580)
		if loc_3 ~= 0 then
			while true do
				loc_6 = loc_3
				loc_1 = rt_load_i32(memory_at_0, loc_5 + 584)
				if loc_3 ~= loc_1 then
					while true do
						while true do
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_1, 1)), 0) then
								while true do
									FUNC_LIST[653](rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12)), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), 2147483647))
									break
								end
								if desired then
									if desired == 3 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_1 = rt_sub_i32(loc_1, 32)
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_5 + 580)
						break
					end
				else
					while true do
						reg_0 = loc_6
						break
					end
				end
				loc_6 = reg_0
				rt_store_i32(memory_at_0, loc_5 + 584, loc_3)
				FUNC_LIST[653](loc_6, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 588), loc_6))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		reg_0 = FUNC_LIST[391](loc_9)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 656)
		break
	end
end
FUNC_LIST[191] = --[[ Luau::BytecodeBuilder::~BytecodeBuilder() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 499), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 488), bit_and(rt_load_i32(memory_at_0, loc_0 + 496), 2147483647))
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 476)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 480)
				if loc_2 ~= loc_1 then
					while true do
						while true do
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_1, 1)), 0) then
								while true do
									FUNC_LIST[653](rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12)), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), 2147483647))
									break
								end
							end
							loc_1 = rt_sub_i32(loc_1, 16)
							if loc_1 ~= loc_2 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 476)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 480, loc_2)
				FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 484), loc_3))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 464)
		if loc_3 ~= 0 then
			while true do
				loc_2 = loc_3
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 468)
				if loc_2 ~= loc_1 then
					while true do
						while true do
							loc_2 = rt_sub_i32(loc_1, 12)
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_1, 1)), 0) then
								while true do
									FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), 2147483647))
									break
								end
							end
							loc_1 = loc_2
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 464)
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
				end
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 468, loc_3)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 472), loc_2))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 459), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 448), bit_and(rt_load_i32(memory_at_0, loc_0 + 456), 2147483647))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 443), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 432), bit_and(rt_load_i32(memory_at_0, loc_0 + 440), 2147483647))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 420)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 424, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 428), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 408)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 412, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 416), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 384)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 384, rt_i64_ZERO)
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 372)
		if loc_3 ~= 0 then
			while true do
				loc_2 = loc_3
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 376)
				if loc_2 ~= loc_1 then
					while true do
						while true do
							loc_2 = rt_sub_i32(loc_1, 20)
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_1, 9)), 0) then
								while true do
									FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12)), 2147483647))
									break
								end
							end
							loc_1 = loc_2
							if loc_1 ~= loc_3 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 372)
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
				end
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 376, loc_3)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 380), loc_2))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 360)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 364, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 368), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 348)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 352, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 356), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 336)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 340, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 344), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 324)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 328, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 332), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 300)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 300, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 152)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 152, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 104)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 104, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 84)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 88, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 92), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 76, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 80), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 64, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 68), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 48)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 52, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 56), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 36)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 40, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 24)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 32), loc_1))
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
				if loc_2 ~= loc_1 then
					while true do
						loc_3 = rt_add_i32(loc_0, 8)
						while true do
							loc_1 = rt_sub_i32(loc_1, 72)
							FUNC_LIST[192](loc_3, loc_1)
							if loc_1 ~= loc_2 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 4, loc_2)
				FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_3))
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[192] = --[[ std::__2::allocator<Luau::BytecodeBuilder::Function>::destroy[abi:ne180100](Luau::BytecodeBuilder::Function*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 71), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1 + 60), bit_and(rt_load_i32(memory_at_0, loc_1 + 68), 2147483647))
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 48)
		if loc_2 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_1 + 52, loc_2)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 56), loc_2))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 47), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1 + 36), bit_and(rt_load_i32(memory_at_0, loc_1 + 44), 2147483647))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 35), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1 + 24), bit_and(rt_load_i32(memory_at_0, loc_1 + 32), 2147483647))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 11), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1), bit_and(rt_load_i32(memory_at_0, loc_1 + 8), 2147483647))
				break
			end
		end
		break
	end
end
FUNC_LIST[193] = --[[ Luau::AstVisitor::visit(Luau::AstNode*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[194] = --[[ Luau::AstVisitor::visit(Luau::AstAttr*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 8)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[195] = --[[ Luau::AstVisitor::visit(Luau::AstExprGroup*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 16)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[196] = --[[ Luau::Compiler::FunctionVisitor::visit(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 100)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_0)
		loc_8 = rt_load_i32(memory_at_0, loc_1 + 56)
		if loc_8 ~= 0 then
			while true do
				loc_7 = rt_load_i32(memory_at_0, loc_1 + 52)
				loc_9 = bit_and(rt_sub_i32(loc_8, 1), 1073741823)
				loc_4 = rt_load_i32_u8(memory_at_0, loc_0 + 8)
				while true do
					loc_6 = bit_and(loc_8, 3)
					if loc_6 == 0 then
						while true do
							loc_2 = loc_7
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_3 = loc_7
					while true do
						loc_4 = bit_or((if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 32) ~= 0 then 1 else 0), loc_4)
						loc_2 = rt_add_i32(loc_3, 4)
						loc_3 = loc_2
						loc_5 = rt_add_i32(loc_5, 1)
						if loc_6 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				if loc_9 > 2 then
					while true do
						loc_3 = rt_add_i32(rt_shl_i32(loc_8, 2), loc_7)
						while true do
							loc_4 = bit_or(bit_or(bit_or(bit_or((if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 32) ~= 0 then 1 else 0), loc_4), (if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 4) + 32) ~= 0 then 1 else 0)), (if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 8) + 32) ~= 0 then 1 else 0)), (if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 12) + 32) ~= 0 then 1 else 0))
							loc_2 = rt_add_i32(loc_2, 16)
							if loc_3 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				rt_store_i32_n8(memory_at_0, loc_0 + 8, loc_4)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 4)
					loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
					loc_8 = rt_load_i32(memory_at_0, loc_5 + 8)
					if loc_2 < loc_8 then
						while true do
							rt_store_i32(memory_at_0, loc_2, loc_1)
							loc_6 = rt_add_i32(loc_2, 4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_5)
					loc_9 = rt_shr_i32(rt_sub_i32(loc_2, loc_3), 2)
					loc_4 = rt_add_i32(loc_9, 1)
					if loc_4 >= 1073741824 then
						desired = 2
						break
					end
					loc_6 = rt_sub_i32(loc_8, loc_3)
					loc_7 = rt_shr_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_4 < loc_7 then loc_7 else loc_4))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = reg_0
					loc_4 = rt_add_i32(loc_7, rt_shl_i32(loc_9, 2))
					rt_store_i32(memory_at_0, loc_4, loc_1)
					loc_7 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_7)
					loc_6 = rt_add_i32(loc_4, 4)
					if loc_2 ~= loc_3 then
						while true do
							while true do
								loc_4 = rt_sub_i32(loc_4, 4)
								loc_2 = rt_sub_i32(loc_2, 4)
								rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_2))
								if loc_2 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_8 = rt_load_i32(memory_at_0, loc_5 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_5)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = reg_0
					rt_store_i32(memory_at_0, loc_5 + 8, loc_7)
					rt_store_i32(memory_at_0, loc_5 + 4, loc_6)
					rt_store_i32(memory_at_0, loc_5, loc_4)
					if loc_3 == 0 then
						break
					end
					FUNC_LIST[653](loc_3, rt_sub_i32(loc_8, loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_5 + 4, loc_6)
				while true do
					if rt_load_i32_u8(memory_at_0, 49068) == 0 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_0 + 9) ~= 0 then
						break
					end
					reg_0 = FUNC_LIST[305](loc_1)
					if reg_0 == 0 then
						break
					end
					rt_store_i32_n8(memory_at_0, loc_0 + 9, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_5)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[197] = --[[ std::__throw_bad_array_new_length[abi:ne180100]() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[578](4)
		reg_0 = FUNC_LIST[761](reg_0)
		FUNC_LIST[0](reg_0, 47872, 111)
		error("out of code bounds")
	end
end
FUNC_LIST[198] = --[[ Luau::AstVisitor::visit(Luau::AstStatBlock*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 96)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[199] = --[[ Luau::AstVisitor::visit(Luau::AstType*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[200] = --[[ Luau::AstVisitor::visit(Luau::AstTypeReference*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 180)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[201] = --[[ Luau::AstVisitor::visit(Luau::AstTypePackExplicit*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 220)](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[202] = --[[ Luau::Compiler::FenvVisitor::visit(Luau::AstExprGlobal*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
			if loc_1 == 0 then
				break
			end
			reg_0 = FUNC_LIST[584](loc_1, 1172)
			if reg_0 == 0 then
				while true do
					rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 4), 1)
					break
				end
			end
			reg_0 = FUNC_LIST[584](loc_1, 1164)
			if reg_0 ~= 0 then
				break
			end
			rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 8), 1)
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[203] = --[[ Luau::Compiler::allocReg(Luau::AstNode*, unsigned int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 624)
		loc_4 = rt_add_i32(loc_2, loc_5)
		if loc_4 >= 256 then
			while true do
				rt_store_i32(memory_at_0, loc_3 + 4, 255)
				rt_store_i32(memory_at_0, loc_3, loc_2)
				FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_3)
				error("out of code bounds")
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 624, loc_4)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 628)
		rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 > loc_4 then loc_2 else loc_4))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = bit_and(loc_5, 255)
		break
	end
	return reg_0
end
FUNC_LIST[204] = --[[ Luau::DenseHashMap<Luau::AstLocal*, Luau::Compiler::Local, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::operator[](Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 4), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[222](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 4))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[205] = --[[ Luau::Compiler::compileStatIf(Luau::AstStatIf*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_8 = rt_load_i32(memory_at_0, loc_1 + 28)
		while true do
			while true do
				while true do
					loc_12 = rt_load_i32(memory_at_0, loc_0 + 128)
					if loc_12 == 0 then
						break
					end
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 132)
					if loc_9 == loc_8 then
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
					loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 120)
					while true do
						loc_6 = bit_and(loc_3, loc_4)
						loc_10 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_7)
						loc_3 = rt_load_i32(memory_at_0, loc_10)
						if loc_3 ~= loc_8 then
							while true do
								if loc_3 == loc_9 then
									desired = 3
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_6, loc_2)
								if loc_2 <= loc_4 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_10 + 8), 1)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_10 + 16) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 36)
					if loc_2 == 0 then
						desired = 2
						break
					end
					FUNC_LIST[181](loc_0, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_load_i32(memory_at_0, loc_8 + 4) ~= rt_load_i32(memory_at_0, 48684) then
						break
					end
					if loc_8 == 0 then
						break
					end
					if rt_load_i32(memory_at_0, loc_8 + 24) ~= 14 then
						break
					end
					if loc_12 == 0 then
						break
					end
					loc_9 = rt_load_i32(memory_at_0, loc_8 + 32)
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 132)
					if loc_9 == loc_7 then
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_9, 4), rt_shr_u32(loc_9, 9))
					loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 120)
					loc_2 = 0
					while true do
						loc_6 = bit_and(loc_3, loc_4)
						loc_12 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_10)
						loc_3 = rt_load_i32(memory_at_0, loc_12)
						if loc_3 ~= loc_9 then
							while true do
								if loc_3 == loc_7 then
									desired = 3
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_6, loc_2)
								if loc_2 <= loc_4 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_12 + 8), 1)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_12 + 16) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[212](loc_0, rt_load_i32(memory_at_0, loc_8 + 28))
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 36)
					if loc_2 == 0 then
						desired = 2
						break
					end
					FUNC_LIST[181](loc_0, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_11 = rt_load_i32(memory_at_0, loc_1 + 32)
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												loc_14 = rt_load_i32(memory_at_0, loc_1 + 36)
												if loc_14 ~= 0 then
													break
												end
												loc_2 = rt_load_i32(memory_at_0, loc_11 + 4)
												while true do
													while true do
														if loc_11 == 0 then
															break
														end
														if rt_load_i32(memory_at_0, 48716) ~= loc_2 then
															break
														end
														if rt_load_i32(memory_at_0, loc_11 + 32) ~= 1 then
															desired = 10
															break
														end
														if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_11 + 28)) + 4) ~= rt_load_i32(memory_at_0, 48748) then
															desired = 10
															break
														end
														desired = 11
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if rt_load_i32(memory_at_0, 48748) ~= loc_2 then
														desired = 10
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_13 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 680), 12))
												loc_15 = rt_load_i32(memory_at_0, loc_0 + 640)
												loc_16 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), loc_15), 2)
												if loc_13 < loc_16 then
													while true do
														loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
														loc_12 = rt_load_i32(memory_at_0, loc_0 + 60)
														loc_10 = rt_load_i32(memory_at_0, loc_0 + 72)
														loc_17 = rt_load_i32(memory_at_0, loc_0 + 68)
														while true do
															loc_3 = 0
															while true do
																if loc_17 == 0 then
																	break
																end
																loc_7 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_13, 2), loc_15))
																if loc_10 == loc_7 then
																	break
																end
																loc_4 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
																loc_2 = 0
																while true do
																	loc_9 = bit_and(loc_4, loc_6)
																	loc_3 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_12)
																	loc_4 = rt_load_i32(memory_at_0, loc_3)
																	if loc_7 == loc_4 then
																		desired = 13
																		break
																	end
																	loc_3 = 0
																	if loc_4 == loc_10 then
																		desired = 13
																		break
																	end
																	loc_2 = rt_add_i32(loc_2, 1)
																	loc_4 = rt_add_i32(loc_9, loc_2)
																	if loc_2 <= loc_6 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															if rt_load_i32_u8(memory_at_0, (if loc_3 ~= 0 then rt_add_i32(loc_3, 4) else 0) + 2) ~= 0 then
																desired = 10
																break
															end
															loc_13 = rt_add_i32(loc_13, 1)
															if loc_16 ~= loc_13 then
																continue
															end
															break
														end
														if desired then
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												rt_store_i32(memory_at_0, loc_5 + 12, 0)
												rt_store_i64(memory_at_0, loc_5 + 4, rt_i64_ZERO)
												FUNC_LIST[223](loc_0, loc_8, 0, rt_add_i32(loc_5, 4), 1)
												loc_6 = rt_load_i32(memory_at_0, loc_5 + 4)
												loc_12 = rt_load_i32(memory_at_0, loc_5 + 8)
												if loc_6 == loc_12 then
													desired = 3
													break
												end
												loc_11 = rt_add_i32(loc_0, 664)
												loc_2 = rt_load_i32(memory_at_0, loc_0 + 668)
												while true do
													loc_8 = rt_load_i32(memory_at_0, loc_6)
													reg_0 = loc_0
													while true do
														loc_9 = rt_load_i32(memory_at_0, loc_0 + 672)
														if loc_2 < loc_9 then
															while true do
																rt_store_i64(memory_at_0, loc_2, rt_shl_i64(rt_extend_i64_u32(loc_8), rt_i64_from_u32(32, 0)))
																reg_1 = rt_add_i32(loc_2, 8)
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_4 = rt_load_i32(memory_at_0, loc_11)
														loc_1 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 3)
														loc_3 = rt_add_i32(loc_1, 1)
														if loc_3 >= 536870912 then
															desired = 9
															break
														end
														loc_7 = rt_sub_i32(loc_9, loc_4)
														loc_10 = rt_shr_i32(loc_7, 2)
														loc_7 = (if loc_7 >= 2147483640 then 536870911 else (if loc_3 < loc_10 then loc_10 else loc_3))
														if loc_7 ~= 0 then
															while true do
																if loc_7 >= 536870912 then
																	desired = 8
																	break
																end
																reg_1 = FUNC_LIST[646](rt_shl_i32(loc_7, 3))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																reg_1 = 0
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_10 = reg_1
														loc_3 = rt_add_i32(loc_10, rt_shl_i32(loc_1, 3))
														rt_store_i64(memory_at_0, loc_3, rt_shl_i64(rt_extend_i64_u32(loc_8), rt_i64_from_u32(32, 0)))
														loc_7 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_10)
														loc_8 = rt_add_i32(loc_3, 8)
														if loc_2 ~= loc_4 then
															while true do
																while true do
																	loc_3 = rt_sub_i32(loc_3, 8)
																	loc_2 = rt_sub_i32(loc_2, 8)
																	rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
																	if loc_2 ~= loc_4 then
																		continue
																	end
																	break
																end
																if desired then
																	break
																end
																loc_9 = rt_load_i32(memory_at_0, loc_0 + 672)
																reg_1 = rt_load_i32(memory_at_0, loc_0 + 664)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																reg_1 = loc_4
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_4 = reg_1
														rt_store_i32(memory_at_0, loc_0 + 672, loc_7)
														rt_store_i32(memory_at_0, loc_0 + 668, loc_8)
														rt_store_i32(memory_at_0, loc_0 + 664, loc_3)
														if loc_4 ~= 0 then
															while true do
																FUNC_LIST[653](loc_4, rt_sub_i32(loc_9, loc_4))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														reg_1 = loc_8
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
															continue
														end
														break
													end
													loc_2 = reg_1
													rt_store_i32(memory_at_0, reg_0 + 668, loc_2)
													loc_6 = rt_add_i32(loc_6, 4)
													if loc_6 ~= loc_12 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												desired = 4
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	if rt_load_i32(memory_at_0, loc_11 + 32) ~= 1 then
																		break
																	end
																	if loc_14 ~= 0 then
																		break
																	end
																	loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_11 + 28))
																	loc_17 = (if rt_load_i32(memory_at_0, loc_2 + 4) == rt_load_i32(memory_at_0, 48756) then loc_2 else 0)
																	if loc_17 == 0 then
																		break
																	end
																	loc_15 = rt_load_i32(memory_at_0, loc_0 + 680)
																	loc_11 = rt_load_i32(memory_at_0, rt_sub_i32(loc_15, 8))
																	loc_16 = rt_load_i32(memory_at_0, loc_0 + 640)
																	loc_13 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), loc_16), 2)
																	if loc_11 >= loc_13 then
																		desired = 14
																		break
																	end
																	loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
																	loc_12 = rt_load_i32(memory_at_0, loc_0 + 60)
																	loc_10 = rt_load_i32(memory_at_0, loc_0 + 72)
																	loc_14 = rt_load_i32(memory_at_0, loc_0 + 68)
																	while true do
																		loc_3 = 0
																		while true do
																			if loc_14 == 0 then
																				break
																			end
																			loc_7 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_11, 2), loc_16))
																			if loc_10 == loc_7 then
																				break
																			end
																			loc_4 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
																			loc_2 = 0
																			while true do
																				loc_9 = bit_and(loc_4, loc_6)
																				loc_3 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_12)
																				loc_4 = rt_load_i32(memory_at_0, loc_3)
																				if loc_7 == loc_4 then
																					desired = 17
																					break
																				end
																				loc_3 = 0
																				if loc_4 == loc_10 then
																					desired = 17
																					break
																				end
																				loc_2 = rt_add_i32(loc_2, 1)
																				loc_4 = rt_add_i32(loc_9, loc_2)
																				if loc_2 <= loc_6 then
																					continue
																				end
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																				continue
																			end
																			break
																		end
																		if rt_load_i32_u8(memory_at_0, (if loc_3 ~= 0 then rt_add_i32(loc_3, 4) else 0) + 2) ~= 0 then
																			desired = 15
																			break
																		end
																		loc_11 = rt_add_i32(loc_11, 1)
																		if loc_11 ~= loc_13 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	desired = 14
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_5 + 12, 0)
																rt_store_i64(memory_at_0, loc_5 + 4, rt_i64_ZERO)
																FUNC_LIST[223](loc_0, loc_8, 0, rt_add_i32(loc_5, 4), 0)
																FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, loc_1 + 32))
																if rt_load_i32(memory_at_0, loc_1 + 36) ~= 0 then
																	while true do
																		if rt_load_i32(memory_at_0, loc_5 + 8) ~= rt_load_i32(memory_at_0, loc_5 + 4) then
																			desired = 13
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
																loc_3 = reg_0
																loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
																loc_4 = rt_load_i32(memory_at_0, loc_5 + 8)
																if loc_2 == loc_4 then
																	desired = 10
																	break
																end
																desired = 12
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_2 = rt_sub_i32(loc_15, 4)
															if rt_load_i32(memory_at_0, loc_2) == 0 then
																while true do
																	rt_store_i32(memory_at_0, loc_2, loc_17)
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															rt_store_i32(memory_at_0, loc_5 + 12, 0)
															rt_store_i64(memory_at_0, loc_5 + 4, rt_i64_ZERO)
															FUNC_LIST[223](loc_0, loc_8, 0, rt_add_i32(loc_5, 4), 1)
															loc_6 = rt_load_i32(memory_at_0, loc_5 + 4)
															loc_12 = rt_load_i32(memory_at_0, loc_5 + 8)
															if loc_6 == loc_12 then
																desired = 5
																break
															end
															loc_11 = rt_add_i32(loc_0, 664)
															loc_2 = rt_load_i32(memory_at_0, loc_0 + 668)
															while true do
																loc_8 = rt_load_i32(memory_at_0, loc_6)
																reg_0 = loc_0
																while true do
																	loc_9 = rt_load_i32(memory_at_0, loc_0 + 672)
																	if loc_2 < loc_9 then
																		while true do
																			rt_store_i64(memory_at_0, loc_2, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(loc_8), rt_i64_from_u32(32, 0)), rt_i64_ONE))
																			reg_1 = rt_add_i32(loc_2, 8)
																			desired = 15
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_4 = rt_load_i32(memory_at_0, loc_11)
																	loc_1 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 3)
																	loc_3 = rt_add_i32(loc_1, 1)
																	if loc_3 >= 536870912 then
																		desired = 7
																		break
																	end
																	loc_7 = rt_sub_i32(loc_9, loc_4)
																	loc_10 = rt_shr_i32(loc_7, 2)
																	loc_7 = (if loc_7 >= 2147483640 then 536870911 else (if loc_3 < loc_10 then loc_10 else loc_3))
																	if loc_7 ~= 0 then
																		while true do
																			if loc_7 >= 536870912 then
																				desired = 8
																				break
																			end
																			reg_1 = FUNC_LIST[646](rt_shl_i32(loc_7, 3))
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	else
																		while true do
																			reg_1 = 0
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_10 = reg_1
																	loc_3 = rt_add_i32(loc_10, rt_shl_i32(loc_1, 3))
																	rt_store_i64(memory_at_0, loc_3, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(loc_8), rt_i64_from_u32(32, 0)), rt_i64_ONE))
																	loc_7 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_10)
																	loc_8 = rt_add_i32(loc_3, 8)
																	if loc_2 ~= loc_4 then
																		while true do
																			while true do
																				loc_3 = rt_sub_i32(loc_3, 8)
																				loc_2 = rt_sub_i32(loc_2, 8)
																				rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
																				if loc_2 ~= loc_4 then
																					continue
																				end
																				break
																			end
																			if desired then
																				break
																			end
																			loc_9 = rt_load_i32(memory_at_0, loc_0 + 672)
																			reg_1 = rt_load_i32(memory_at_0, loc_0 + 664)
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	else
																		while true do
																			reg_1 = loc_4
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_4 = reg_1
																	rt_store_i32(memory_at_0, loc_0 + 672, loc_7)
																	rt_store_i32(memory_at_0, loc_0 + 668, loc_8)
																	rt_store_i32(memory_at_0, loc_0 + 664, loc_3)
																	if loc_4 ~= 0 then
																		while true do
																			FUNC_LIST[653](loc_4, rt_sub_i32(loc_9, loc_4))
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	reg_1 = loc_8
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																		continue
																	end
																	break
																end
																loc_2 = reg_1
																rt_store_i32(memory_at_0, reg_0 + 668, loc_2)
																loc_6 = rt_add_i32(loc_6, 4)
																if loc_6 ~= loc_12 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															desired = 6
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[182](loc_0, rt_load_i32(memory_at_0, loc_1 + 32))
														loc_2 = reg_0
														reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
														loc_3 = reg_0
														if loc_2 ~= 0 then
															while true do
																FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, loc_1 + 36))
																loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
																loc_4 = rt_load_i32(memory_at_0, loc_5 + 8)
																if loc_2 == loc_4 then
																	desired = 10
																	break
																end
																while true do
																	reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_2), loc_3)
																	if reg_0 ~= 0 then
																		while true do
																			loc_2 = rt_add_i32(loc_2, 4)
																			if loc_2 ~= loc_4 then
																				desired = 14
																				break
																			end
																			desired = 11
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																				continue
																			end
																			break
																		end
																	end
																	break
																end
																if desired then
																	break
																end
																desired = 1
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 23, 0, 0)
														reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
														loc_4 = reg_0
														FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, loc_1 + 36))
														reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
														loc_9 = reg_0
														while true do
															loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
															loc_6 = rt_load_i32(memory_at_0, loc_5 + 8)
															if loc_2 == loc_6 then
																break
															end
															while true do
																reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_2), loc_4)
																if reg_0 ~= 0 then
																	while true do
																		loc_2 = rt_add_i32(loc_2, 4)
																		if loc_2 ~= loc_6 then
																			desired = 14
																			break
																		end
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																			continue
																		end
																		break
																	end
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_3, loc_9)
														if reg_0 ~= 0 then
															desired = 11
															break
														end
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													while true do
														reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_2), loc_3)
														if reg_0 ~= 0 then
															while true do
																loc_2 = rt_add_i32(loc_2, 4)
																if loc_2 ~= loc_4 then
																	desired = 12
																	break
																end
																desired = 11
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_2 == 0 then
												desired = 2
												break
											end
											rt_store_i32(memory_at_0, loc_5 + 8, loc_2)
											FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 12), loc_2))
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[44](loc_11)
										error("out of code bounds")
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[197]()
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[44](loc_11)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_5 + 4)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_6 == 0 then
							desired = 2
							break
						end
						rt_store_i32(memory_at_0, loc_5 + 8, loc_6)
						FUNC_LIST[653](loc_6, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 12), loc_6))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_5 + 4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_5 + 8, loc_6)
				FUNC_LIST[653](loc_6, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 12), loc_6))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[206] = --[[ Luau::Compiler::compileStatWhile(Luau::AstStatWhile*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
								break
							end
							loc_8 = rt_load_i32(memory_at_0, loc_1 + 28)
							loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
							if loc_8 == loc_10 then
								break
							end
							loc_3 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
							loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
							loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
							while true do
								loc_5 = bit_and(loc_3, loc_4)
								loc_6 = rt_add_i32(rt_shl_i32(loc_5, 5), loc_11)
								loc_3 = rt_load_i32(memory_at_0, loc_6)
								if loc_3 ~= loc_8 then
									while true do
										if loc_3 == loc_10 then
											desired = 5
											break
										end
										loc_2 = rt_add_i32(loc_2, 1)
										loc_3 = rt_add_i32(loc_5, loc_2)
										if loc_2 <= loc_4 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 2, 0, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 8), 1)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_6 + 16) == 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2)
						loc_10 = rt_load_i32(memory_at_0, loc_0 + 664)
						loc_11 = rt_load_i32(memory_at_0, loc_0 + 668)
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_0 + 680)
							loc_8 = rt_load_i32(memory_at_0, loc_0 + 684)
							if loc_2 < loc_8 then
								while true do
									rt_store_i32(memory_at_0, loc_2 + 8, 0)
									rt_store_i32(memory_at_0, loc_2 + 4, loc_5)
									rt_store_i32(memory_at_0, loc_2, loc_5)
									loc_5 = rt_add_i32(loc_2, 12)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_6 = rt_add_i32(loc_0, 676)
							loc_4 = rt_load_i32(memory_at_0, loc_6)
							loc_12 = rt_div_i32(rt_sub_i32(loc_2, loc_4), 12)
							loc_3 = rt_add_i32(loc_12, 1)
							if loc_3 >= 357913942 then
								desired = 3
								break
							end
							loc_6 = 0
							loc_9 = rt_div_i32(rt_sub_i32(loc_8, loc_4), 12)
							loc_13 = rt_shl_i32(loc_9, 1)
							loc_9 = (if loc_9 >= 178956970 then 357913941 else (if loc_3 < loc_13 then loc_13 else loc_3))
							if loc_9 ~= 0 then
								while true do
									if loc_9 >= 357913942 then
										desired = 2
										break
									end
									reg_0 = FUNC_LIST[646](rt_mul_i32(loc_9, 12))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_6
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_6 = reg_0
							loc_3 = rt_add_i32(loc_6, rt_mul_i32(loc_12, 12))
							rt_store_i32(memory_at_0, loc_3 + 8, 0)
							rt_store_i32(memory_at_0, loc_3 + 4, loc_5)
							rt_store_i32(memory_at_0, loc_3, loc_5)
							loc_6 = rt_add_i32(rt_mul_i32(loc_9, 12), loc_6)
							loc_5 = rt_add_i32(loc_3, 12)
							if loc_2 ~= loc_4 then
								while true do
									while true do
										loc_3 = rt_sub_i32(loc_3, 12)
										loc_2 = rt_sub_i32(loc_2, 12)
										rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
										rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
										if loc_2 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									loc_8 = rt_load_i32(memory_at_0, loc_0 + 684)
									reg_0 = rt_load_i32(memory_at_0, loc_0 + 676)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 684, loc_6)
							rt_store_i32(memory_at_0, loc_0 + 680, loc_5)
							rt_store_i32(memory_at_0, loc_0 + 676, loc_3)
							if loc_4 == 0 then
								break
							end
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_8, loc_4))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32_n8(memory_at_0, loc_0 + 636, 1)
						rt_store_i32(memory_at_0, loc_0 + 680, loc_5)
						reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
						loc_2 = reg_0
						rt_store_i32(memory_at_0, loc_7 + 12, 0)
						rt_store_i64(memory_at_0, loc_7 + 4, rt_i64_ZERO)
						FUNC_LIST[223](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), 0, rt_add_i32(loc_7, 4), 0)
						FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, loc_1 + 32))
						reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
						loc_5 = reg_0
						reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
						loc_4 = reg_0
						if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
							while true do
								FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28) + 8), 1))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 24, 0, 0)
						reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
						loc_3 = reg_0
						reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_4, loc_2)
						if reg_0 == 0 then
							desired = 1
							break
						end
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_7 + 4)
							loc_4 = rt_load_i32(memory_at_0, loc_7 + 8)
							if loc_2 == loc_4 then
								break
							end
							while true do
								reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_2), loc_3)
								if reg_0 ~= 0 then
									while true do
										loc_2 = rt_add_i32(loc_2, 4)
										if loc_2 ~= loc_4 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = rt_sub_i32(loc_11, loc_10)
						loc_2 = rt_shr_i32(loc_4, 3)
						FUNC_LIST[224](loc_0, loc_1, loc_2, loc_3, loc_5)
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 664)
							loc_3 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 668), loc_5), 3)
							if loc_2 > loc_3 then
								while true do
									FUNC_LIST[225](rt_add_i32(loc_0, 664), rt_sub_i32(loc_2, loc_3))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_2 >= loc_3 then
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 668, rt_add_i32(loc_4, loc_5))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 680, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 680), 12))
						loc_2 = rt_load_i32(memory_at_0, loc_7 + 4)
						if loc_2 == 0 then
							break
						end
						rt_store_i32(memory_at_0, loc_7 + 8, loc_2)
						FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_7 + 12), loc_2))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[207] = --[[ Luau::Compiler::compileStatRepeat(Luau::AstStatRepeat*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		loc_9 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2)
		loc_12 = rt_load_i32(memory_at_0, loc_0 + 664)
		loc_13 = rt_load_i32(memory_at_0, loc_0 + 668)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 680)
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 684)
								if loc_2 < loc_6 then
									while true do
										rt_store_i32(memory_at_0, loc_2 + 8, 0)
										rt_store_i32(memory_at_0, loc_2 + 4, loc_9)
										rt_store_i32(memory_at_0, loc_2, loc_9)
										loc_4 = rt_add_i32(loc_2, 12)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_4 = rt_add_i32(loc_0, 676)
								loc_5 = rt_load_i32(memory_at_0, loc_4)
								loc_11 = rt_div_i32(rt_sub_i32(loc_2, loc_5), 12)
								loc_3 = rt_add_i32(loc_11, 1)
								if loc_3 >= 357913942 then
									desired = 5
									break
								end
								loc_4 = 0
								loc_8 = rt_div_i32(rt_sub_i32(loc_6, loc_5), 12)
								loc_10 = rt_shl_i32(loc_8, 1)
								loc_8 = (if loc_8 >= 178956970 then 357913941 else (if loc_3 < loc_10 then loc_10 else loc_3))
								if loc_8 ~= 0 then
									while true do
										if loc_8 >= 357913942 then
											desired = 4
											break
										end
										reg_0 = FUNC_LIST[646](rt_mul_i32(loc_8, 12))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_4 = reg_0
								loc_3 = rt_add_i32(loc_4, rt_mul_i32(loc_11, 12))
								rt_store_i32(memory_at_0, loc_3 + 8, 0)
								rt_store_i32(memory_at_0, loc_3 + 4, loc_9)
								rt_store_i32(memory_at_0, loc_3, loc_9)
								loc_8 = rt_add_i32(rt_mul_i32(loc_8, 12), loc_4)
								loc_4 = rt_add_i32(loc_3, 12)
								if loc_2 ~= loc_5 then
									while true do
										while true do
											loc_3 = rt_sub_i32(loc_3, 12)
											loc_2 = rt_sub_i32(loc_2, 12)
											rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
											rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
											if loc_2 ~= loc_5 then
												continue
											end
											break
										end
										if desired then
											break
										end
										loc_6 = rt_load_i32(memory_at_0, loc_0 + 684)
										reg_0 = rt_load_i32(memory_at_0, loc_0 + 676)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_5 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 684, loc_8)
								rt_store_i32(memory_at_0, loc_0 + 680, loc_4)
								rt_store_i32(memory_at_0, loc_0 + 676, loc_3)
								if loc_5 == 0 then
									break
								end
								FUNC_LIST[653](loc_5, rt_sub_i32(loc_6, loc_5))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32_n8(memory_at_0, loc_0 + 636, 1)
							rt_store_i32(memory_at_0, loc_0 + 680, loc_4)
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_14 = reg_0
							loc_15 = rt_load_i32(memory_at_0, loc_0 + 624)
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
								if rt_load_i32(memory_at_0, loc_3 + 32) == 0 then
									break
								end
								loc_5 = 0
								loc_6 = 0
								loc_2 = 0
								while true do
									FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 28), rt_shl_i32(loc_2, 2))))
									loc_4 = rt_load_i32(memory_at_0, loc_0 + 680)
									rt_store_i32(memory_at_0, rt_sub_i32(loc_4, 8), rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2))
									while true do
										loc_4 = rt_load_i32(memory_at_0, rt_sub_i32(loc_4, 4))
										if (if bit_and(loc_5, 1) ~= 0 then 0 else loc_4) == 0 then
											while true do
												loc_2 = rt_add_i32(loc_2, 1)
												reg_0 = bit_or(loc_5, (if loc_4 ~= 0 then 1 else 0))
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_2 = rt_add_i32(loc_2, 1)
										FUNC_LIST[226](loc_0, loc_4, rt_load_i32(memory_at_0, loc_1 + 28), loc_3, loc_2)
										loc_6 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2)
										reg_0 = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_5 = reg_0
									loc_4 = rt_load_i32(memory_at_0, loc_3 + 32)
									if loc_4 > loc_2 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if bit_and(loc_5, 1) == 0 then
									break
								end
								if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
									while true do
										FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 28), rt_shl_i32(loc_4, 2)), 4)) + 16), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[183](loc_0, loc_6)
								FUNC_LIST[185](loc_0, loc_6)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_16 = reg_0
							if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
								while true do
									FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28) + 8), 1))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
							if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
								desired = 3
								break
							end
							loc_8 = rt_load_i32(memory_at_0, loc_0 + 132)
							if loc_8 == loc_6 then
								desired = 3
								break
							end
							loc_3 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
							loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
							loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
							loc_2 = 0
							while true do
								loc_4 = bit_and(loc_3, loc_5)
								loc_10 = rt_add_i32(rt_shl_i32(loc_4, 5), loc_11)
								loc_3 = rt_load_i32(memory_at_0, loc_10)
								if loc_3 ~= loc_6 then
									while true do
										if loc_3 == loc_8 then
											desired = 3
											break
										end
										loc_2 = rt_add_i32(loc_2, 1)
										loc_3 = rt_add_i32(loc_4, loc_2)
										if loc_2 <= loc_5 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 4, 4, 0, }
										end)()
									end
									temp = br_map[1][rt_load_i32(memory_at_0, loc_10 + 8)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 3
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_10 + 16) == 0 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[183](loc_0, loc_9)
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_4 = reg_0
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[44](loc_4)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[197]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_7 + 12, 0)
				rt_store_i64(memory_at_0, loc_7 + 4, rt_i64_ZERO)
				FUNC_LIST[223](loc_0, loc_6, 0, rt_add_i32(loc_7, 4), 1)
				FUNC_LIST[183](loc_0, loc_9)
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_2 = reg_0
				FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 24, 0, 0)
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_3 = reg_0
				FUNC_LIST[183](loc_0, loc_9)
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_4 = reg_0
				reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_2, loc_14)
				if reg_0 == 0 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_7 + 4)
				loc_5 = rt_load_i32(memory_at_0, loc_7 + 8)
				if loc_2 ~= loc_5 then
					while true do
						while true do
							while true do
								reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_2), loc_3)
								if reg_0 ~= 0 then
									while true do
										loc_2 = rt_add_i32(loc_2, 4)
										if loc_2 ~= loc_5 then
											desired = 5
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							desired = 1
							break
						end
						if desired then
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_7 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				if loc_2 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_7 + 8, loc_2)
				FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_7 + 12), loc_2))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[185](loc_0, loc_9)
			loc_5 = rt_sub_i32(loc_13, loc_12)
			loc_2 = rt_shr_i32(loc_5, 3)
			FUNC_LIST[224](loc_0, loc_1, loc_2, loc_4, loc_16)
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 664)
				loc_3 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 668), loc_4), 3)
				if loc_2 > loc_3 then
					while true do
						FUNC_LIST[225](rt_add_i32(loc_0, 664), rt_sub_i32(loc_2, loc_3))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 >= loc_3 then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 668, rt_add_i32(loc_4, loc_5))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 624, loc_15)
			rt_store_i32(memory_at_0, loc_0 + 680, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 680), 12))
			GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[208] = --[[ std::__2::vector<Luau::Compiler::LoopJump, std::__2::allocator<Luau::Compiler::LoopJump>>::push_back[abi:ne180100](Luau::Compiler::LoopJump&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_3 < loc_6 then
			while true do
				rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
				rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_3, 8))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0)
			loc_8 = rt_shr_i32(rt_sub_i32(loc_3, loc_2), 3)
			loc_4 = rt_add_i32(loc_8, 1)
			if loc_4 < 536870912 then
				while true do
					loc_5 = rt_sub_i32(loc_6, loc_2)
					loc_7 = rt_shr_i32(loc_5, 2)
					loc_5 = (if loc_5 >= 2147483640 then 536870911 else (if loc_4 < loc_7 then loc_7 else loc_4))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 3))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_7 = reg_0
					loc_4 = rt_add_i32(loc_7, rt_shl_i32(loc_8, 3))
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
					loc_5 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_7)
					loc_1 = rt_add_i32(loc_4, 8)
					if loc_2 ~= loc_3 then
						while true do
							while true do
								loc_4 = rt_sub_i32(loc_4, 8)
								loc_3 = rt_sub_i32(loc_3, 8)
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								if loc_2 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 8, loc_5)
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_4)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[653](loc_2, rt_sub_i32(loc_6, loc_2))
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[209] = --[[ Luau::Compiler::compileInlineReturn(Luau::AstStatReturn*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 692)
		loc_6 = rt_sub_i32(loc_3, 24)
		rt_store_i32_n16(memory_at_0, loc_4 + 16, rt_load_i32_u16(memory_at_0, loc_6 + 8))
		rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_6))
		rt_store_i32(memory_at_0, loc_4 + 28, 0)
		rt_store_i64(memory_at_0, loc_4 + 20, rt_i64_ZERO)
		while true do
			while true do
				while true do
					while true do
						loc_6 = rt_load_i32(memory_at_0, rt_sub_i32(loc_3, 8))
						loc_8 = rt_load_i32(memory_at_0, rt_sub_i32(loc_3, 12))
						if loc_6 == loc_8 then
							while true do
								loc_6 = 0
								reg_0 = 0
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_sub_i32(loc_6, loc_8)
						if rt_lt_i32(loc_3, 0) then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[646](loc_3)
						loc_6 = reg_0
						reg_0 = FUNC_LIST[517](loc_6, loc_8, loc_3)
						reg_0 = rt_add_i32(reg_0, loc_3)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = reg_0
					FUNC_LIST[227](loc_0, rt_add_i32(loc_1, 28), rt_load_i32_u8(memory_at_0, loc_4 + 16), rt_load_i32_u8(memory_at_0, loc_4 + 17), 0)
					FUNC_LIST[183](loc_0, rt_load_i32(memory_at_0, loc_4 + 12))
					if loc_2 == 0 then
						while true do
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_7 = reg_0
							FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 23, 0, 0)
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_0 + 692)
								loc_2 = rt_sub_i32(loc_3, 8)
								loc_0 = rt_load_i32(memory_at_0, loc_2)
								loc_11 = rt_sub_i32(loc_3, 4)
								loc_5 = rt_load_i32(memory_at_0, loc_11)
								if loc_0 < loc_5 then
									while true do
										rt_store_i32(memory_at_0, loc_0, loc_7)
										loc_7 = rt_add_i32(loc_0, 4)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_9 = rt_sub_i32(loc_3, 12)
								loc_1 = rt_load_i32(memory_at_0, loc_9)
								loc_12 = rt_shr_i32(rt_sub_i32(loc_0, loc_1), 2)
								loc_3 = rt_add_i32(loc_12, 1)
								if loc_3 >= 1073741824 then
									desired = 2
									break
								end
								loc_10 = rt_sub_i32(loc_5, loc_1)
								loc_5 = rt_shr_i32(loc_10, 1)
								loc_5 = (if loc_10 >= 2147483644 then 1073741823 else (if loc_3 < loc_5 then loc_5 else loc_3))
								if loc_5 ~= 0 then
									while true do
										if loc_5 >= 1073741824 then
											desired = 1
											break
										end
										reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 2))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_13 = reg_0
								loc_3 = rt_add_i32(loc_13, rt_shl_i32(loc_12, 2))
								rt_store_i32(memory_at_0, loc_3, loc_7)
								loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_13)
								loc_7 = rt_add_i32(loc_3, 4)
								if loc_0 ~= loc_1 then
									while true do
										while true do
											loc_3 = rt_sub_i32(loc_3, 4)
											loc_0 = rt_sub_i32(loc_0, 4)
											rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_0))
											if loc_0 ~= loc_1 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_9, loc_3)
								rt_store_i32(memory_at_0, loc_2, loc_7)
								rt_store_i32(memory_at_0, loc_11, loc_5)
								if loc_1 == 0 then
									break
								end
								FUNC_LIST[653](loc_1, loc_10)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_2, loc_7)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_6 ~= 0 then
						while true do
							FUNC_LIST[653](loc_6, rt_sub_i32(loc_8, loc_6))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](rt_add_i32(loc_4, 20))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_9)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[210] = --[[ Luau::Compiler::compileStatReturn(Luau::AstStatReturn*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local reg_0
	local desired
	while true do
		loc_9 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		loc_10 = rt_load_i32(memory_at_0, loc_0 + 624)
		while true do
			while true do
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 32)
					if loc_4 == 0 then
						break
					end
					loc_18 = rt_load_i32(memory_at_0, loc_1 + 28)
					loc_2 = rt_load_i32(memory_at_0, loc_18)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					while true do
						loc_8 = rt_load_i32(memory_at_0, 48612)
						if (if loc_8 == loc_3 then loc_2 else 0) == 0 then
							while true do
								loc_7 = rt_load_i32(memory_at_0, 48692)
								loc_5 = rt_load_i32(memory_at_0, 48572)
								while true do
									if bit_and((if loc_3 ~= loc_5 then 1 else 0), (if loc_3 ~= loc_7 then 1 else 0)) ~= 0 then
										desired = 4
										break
									end
									loc_2 = rt_load_i32(memory_at_0, loc_2 + 24)
									loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
									if loc_2 == 0 then
										continue
									end
									if loc_3 ~= loc_8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
							break
						end
						loc_6 = rt_load_i32(memory_at_0, loc_2 + 24)
						loc_13 = rt_load_i32(memory_at_0, loc_0 + 72)
						if loc_6 == loc_13 then
							break
						end
						loc_3 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
						loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
						loc_16 = rt_load_i32(memory_at_0, loc_0 + 60)
						loc_2 = 0
						while true do
							loc_7 = bit_and(loc_3, loc_5)
							loc_11 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_16)
							loc_3 = rt_load_i32(memory_at_0, loc_11)
							if loc_3 ~= loc_6 then
								while true do
									if loc_3 == loc_13 then
										desired = 4
										break
									end
									loc_2 = rt_add_i32(loc_2, 1)
									loc_3 = rt_add_i32(loc_7, loc_2)
									if loc_2 <= loc_5 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_11 + 5) ~= 1 then
							break
						end
						loc_6 = rt_load_i32_u8(memory_at_0, loc_11 + 4)
						if loc_4 == 1 then
							desired = 3
							break
						end
						loc_19 = (if loc_4 <= 2 then 2 else loc_4)
						loc_20 = rt_load_i32(memory_at_0, 48692)
						loc_11 = rt_load_i32(memory_at_0, 48572)
						loc_12 = 1
						while true do
							loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_12, 2), loc_18))
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
							while true do
								if (if loc_3 == loc_8 then loc_2 else 0) == 0 then
									while true do
										while true do
											while true do
												if loc_3 == loc_11 then
													break
												end
												if loc_3 == loc_20 then
													break
												end
												loc_14 = 4294967295
												desired = 6
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											loc_2 = rt_load_i32(memory_at_0, loc_2 + 24)
											loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
											if loc_2 == 0 then
												continue
											end
											if loc_3 ~= loc_8 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_14 = 4294967295
								loc_15 = rt_load_i32(memory_at_0, loc_2 + 24)
								if loc_13 == loc_15 then
									break
								end
								loc_3 = bit_xor(rt_shr_u32(loc_15, 4), rt_shr_u32(loc_15, 9))
								loc_2 = 0
								while true do
									loc_7 = bit_and(loc_3, loc_5)
									loc_17 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_16)
									loc_3 = rt_load_i32(memory_at_0, loc_17)
									if loc_3 ~= loc_15 then
										while true do
											if loc_3 == loc_13 then
												desired = 6
												break
											end
											loc_2 = rt_add_i32(loc_2, 1)
											loc_3 = rt_add_i32(loc_7, loc_2)
											if loc_2 <= loc_5 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_17 + 5) ~= 1 then
									break
								end
								loc_14 = rt_load_i32_u8(memory_at_0, loc_17 + 4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							if rt_add_i32(loc_6, loc_12) ~= loc_14 then
								desired = 4
								break
							end
							loc_12 = rt_add_i32(loc_12, 1)
							if loc_12 ~= loc_19 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_add_i32(loc_4, loc_10)
					if loc_2 < 256 then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 628)
							rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_3 then loc_3 else loc_2))
							loc_2 = 0
							loc_7 = 0
							while true do
								loc_5 = rt_add_i32(loc_2, loc_10)
								loc_8 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2)))
								while true do
									loc_3 = rt_add_i32(loc_2, 1)
									if loc_3 == loc_4 then
										while true do
											reg_0 = FUNC_LIST[228](loc_0, loc_8, bit_and(loc_5, 255))
											loc_7 = reg_0
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_2 = rt_load_i32(memory_at_0, loc_0 + 624)
									loc_4 = bit_and(loc_5, 255)
									rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_4, 1))
									FUNC_LIST[229](loc_0, loc_8, loc_4, 1)
									rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_4 = rt_load_i32(memory_at_0, loc_1 + 32)
								loc_2 = loc_3
								if loc_4 > loc_2 then
									continue
								end
								break
							end
							if desired then
								break
							end
							FUNC_LIST[183](loc_0, 0)
							loc_3 = rt_load_i32(memory_at_0, loc_0)
							loc_6 = loc_10
							loc_2 = 0
							reg_0 = loc_2
							if bit_and(loc_7, 1) ~= 0 then
								desired = 1
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_9 + 4, 255)
					rt_store_i32(memory_at_0, loc_9, loc_4)
					FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_9)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[183](loc_0, 0)
				loc_3 = rt_load_i32(memory_at_0, loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_add_i32(rt_load_i32_u8(memory_at_0, loc_1 + 32), 1)
			break
		end
		loc_2 = reg_0
		FUNC_LIST[90](loc_3, 22, bit_and(loc_6, 255), bit_and(loc_2, 255), 0)
		rt_store_i32(memory_at_0, loc_0 + 624, loc_10)
		GLOBAL_LIST[0].value = rt_add_i32(loc_9, 16)
		break
	end
end
FUNC_LIST[211] = --[[ Luau::Compiler::compileExprCall(Luau::AstExprCall*, unsigned char, unsigned char, bool, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_10
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				while true do
					while true do
						if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 2) then
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_1 + 36) ~= 0 then
							break
						end
						loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
						loc_15 = rt_load_i32(memory_at_0, 48692)
						loc_14 = rt_load_i32(memory_at_0, 48572)
						loc_16 = rt_load_i32(memory_at_0, loc_0 + 100)
						loc_12 = rt_load_i32(memory_at_0, loc_0 + 112)
						loc_17 = rt_load_i32(memory_at_0, loc_0 + 108)
						loc_19 = rt_load_i32(memory_at_0, 48612)
						loc_6 = rt_load_i32(memory_at_0, loc_1 + 24)
						while true do
							loc_7 = rt_load_i32(memory_at_0, loc_6 + 4)
							while true do
								if loc_6 == 0 then
									break
								end
								if loc_7 ~= loc_19 then
									break
								end
								if loc_17 == 0 then
									desired = 4
									break
								end
								loc_9 = rt_load_i32(memory_at_0, loc_6 + 24)
								if loc_12 == loc_9 then
									desired = 4
									break
								end
								loc_7 = bit_xor(rt_shr_u32(loc_9, 4), rt_shr_u32(loc_9, 9))
								loc_6 = 0
								while true do
									loc_11 = bit_and(loc_7, loc_8)
									loc_13 = rt_add_i32(rt_mul_i32(loc_11, 12), loc_16)
									loc_7 = rt_load_i32(memory_at_0, loc_13)
									if loc_7 ~= loc_9 then
										while true do
											if loc_7 == loc_12 then
												desired = 4
												break
											end
											loc_6 = rt_add_i32(loc_6, 1)
											loc_7 = rt_add_i32(loc_11, loc_6)
											if loc_6 <= loc_8 then
												desired = 7
												break
											end
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_13 + 8) ~= 0 then
									desired = 4
									break
								end
								loc_6 = rt_load_i32(memory_at_0, loc_13 + 4)
								if loc_6 ~= 0 then
									desired = 5
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							while true do
								if loc_6 == 0 then
									break
								end
								if bit_and((if loc_7 ~= loc_14 then 1 else 0), (if loc_7 ~= loc_15 then 1 else 0)) ~= 0 then
									break
								end
								loc_6 = rt_load_i32(memory_at_0, loc_6 + 24)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, 48660) ~= loc_7 then
							break
						end
						while true do
							while true do
								while true do
									if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
										break
									end
									loc_12 = rt_load_i32(memory_at_0, loc_0 + 52)
									if loc_12 == loc_6 then
										break
									end
									loc_8 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
									loc_11 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), 1)
									loc_16 = rt_load_i32(memory_at_0, loc_0 + 40)
									loc_7 = 0
									while true do
										loc_9 = bit_and(loc_8, loc_11)
										loc_13 = rt_add_i32(rt_mul_i32(loc_9, 40), loc_16)
										loc_8 = rt_load_i32(memory_at_0, loc_13)
										if loc_6 == loc_8 then
											desired = 6
											break
										end
										if loc_8 == loc_12 then
											desired = 7
											break
										end
										loc_7 = rt_add_i32(loc_7, 1)
										loc_8 = rt_add_i32(loc_9, loc_7)
										if loc_7 <= loc_11 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = (if rt_load_i32_u8(memory_at_0, loc_6 + 76) ~= 0 then 6160 else 2154)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								loc_7 = rt_load_i32_u8(memory_at_0, loc_13 + 36)
								if loc_7 == 1 then
									while true do
										reg_0 = FUNC_LIST[230](loc_0, loc_1, loc_6, loc_2, loc_3, loc_5, rt_load_i32(memory_at_0, 48512), rt_load_i32(memory_at_0, 48528), rt_load_i32(memory_at_0, 48544))
										if reg_0 ~= 0 then
											desired = 3
											break
										end
										if bit_and(rt_load_i32_u8(memory_at_0, loc_13 + 36), 1) == 0 then
											desired = 6
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_7 ~= 0 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = 6160
							if rt_load_i32_u8(memory_at_0, loc_6 + 76) ~= 0 then
								break
							end
							loc_7 = 1127
							if rt_load_i32_u8(memory_at_0, loc_0 + 637) ~= 0 then
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_0 + 638) ~= 1 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), loc_7, 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = rt_load_i32_u8(memory_at_0, loc_1 + 36)
					loc_6 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 32), bit_and(rt_add_i32(loc_8, 1), 3))
					loc_6 = (if loc_3 < loc_6 then loc_6 else loc_3)
					loc_19 = rt_load_i32(memory_at_0, loc_0 + 624)
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if loc_4 ~= 0 then
																			while true do
																				loc_7 = rt_sub_i32(loc_6, loc_3)
																				loc_6 = rt_add_i32(loc_19, loc_7)
																				if loc_6 >= 256 then
																					desired = 15
																					break
																				end
																				rt_store_i32(memory_at_0, loc_0 + 624, loc_6)
																				loc_7 = rt_load_i32(memory_at_0, loc_0 + 628)
																				rt_store_i32(memory_at_0, loc_0 + 628, (if loc_6 < loc_7 then loc_7 else loc_6))
																				reg_0 = rt_sub_i32(loc_19, loc_3)
																				desired = 16
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_7 = rt_add_i32(loc_6, loc_19)
																		if loc_7 >= 256 then
																			desired = 14
																			break
																		end
																		rt_store_i32(memory_at_0, loc_0 + 624, loc_7)
																		loc_6 = rt_load_i32(memory_at_0, loc_0 + 628)
																		rt_store_i32(memory_at_0, loc_0 + 628, (if loc_6 > loc_7 then loc_6 else loc_7))
																		reg_0 = loc_19
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_16 = reg_0
																	loc_15 = 0
																	loc_17 = 4294967295
																	if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 4), 0) then
																		desired = 5
																		break
																	end
																	if bit_and(loc_8, 1) ~= 0 then
																		desired = 5
																		break
																	end
																	if rt_load_i32(memory_at_0, loc_0 + 188) == 0 then
																		desired = 5
																		break
																	end
																	loc_9 = rt_load_i32(memory_at_0, loc_0 + 192)
																	if loc_9 == loc_1 then
																		desired = 5
																		break
																	end
																	loc_7 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
																	loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 184), 1)
																	loc_12 = rt_load_i32(memory_at_0, loc_0 + 180)
																	loc_6 = 0
																	while true do
																		loc_11 = bit_and(loc_7, loc_8)
																		loc_13 = rt_add_i32(rt_shl_i32(loc_11, 3), loc_12)
																		loc_7 = rt_load_i32(memory_at_0, loc_13)
																		if loc_7 ~= loc_1 then
																			while true do
																				if loc_7 == loc_9 then
																					desired = 5
																					break
																				end
																				loc_6 = rt_add_i32(loc_6, 1)
																				loc_7 = rt_add_i32(loc_11, loc_6)
																				if loc_6 <= loc_8 then
																					desired = 16
																					break
																				end
																				desired = 5
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_6 = rt_load_i32(memory_at_0, loc_13 + 4)
																	if rt_lt_i32(loc_6, 0) then
																		while true do
																			loc_17 = loc_6
																			desired = 5
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	while true do
																		if bit_and(rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 460), 16) == 0 then
																			break
																		end
																		FUNC_LIST[19](rt_add_i32(loc_10, 96), rt_load_i32(memory_at_0, loc_1 + 24), rt_add_i32(loc_0, 80), rt_add_i32(loc_0, 100))
																		loc_7 = rt_load_i32(memory_at_0, loc_1 + 32)
																		if loc_7 ~= 0 then
																			while true do
																				reg_2 = FUNC_LIST[231](loc_0, rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_7, 2)), 4)))
																				reg_0 = (if reg_2 ~= 0 then 7315 else 8343)
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		else
																			while true do
																				reg_0 = 8343
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_7 = reg_0
																		loc_8 = rt_load_i32(memory_at_0, loc_10 + 96)
																		if loc_8 ~= 0 then
																			while true do
																				loc_11 = rt_load_i32(memory_at_0, loc_0)
																				loc_9 = rt_load_i32(memory_at_0, loc_1 + 32)
																				rt_store_i32(memory_at_0, loc_10 + 48, loc_8)
																				rt_store_i32(memory_at_0, loc_10 + 52, rt_load_i32(memory_at_0, loc_10 + 100))
																				rt_store_i32(memory_at_0, loc_10 + 56, loc_9)
																				rt_store_i32(memory_at_0, loc_10 + 60, loc_7)
																				FUNC_LIST[107](loc_11, 2495, rt_add_i32(loc_10, 48))
																				desired = 16
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_8 = rt_load_i32(memory_at_0, loc_10 + 100)
																		if loc_8 == 0 then
																			break
																		end
																		loc_11 = rt_load_i32(memory_at_0, loc_0)
																		loc_9 = rt_load_i32(memory_at_0, loc_1 + 32)
																		rt_store_i32(memory_at_0, loc_10 + 40, loc_7)
																		rt_store_i32(memory_at_0, loc_10 + 36, loc_9)
																		rt_store_i32(memory_at_0, loc_10 + 32, loc_8)
																		FUNC_LIST[107](loc_11, 2514, rt_add_i32(loc_10, 32))
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_17 = 34
																	while true do
																		if loc_6 ~= 34 then
																			while true do
																				if loc_6 ~= 57 then
																					desired = 16
																					break
																				end
																				loc_17 = 4294967295
																				if loc_3 ~= 1 then
																					desired = 5
																					break
																				end
																				if loc_5 ~= 0 then
																					desired = 5
																					break
																				end
																				FUNC_LIST[232](loc_0, loc_1, loc_2, 1, loc_4, 0, bit_and(loc_16, 255))
																				desired = 4
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_7 = rt_load_i32(memory_at_0, loc_1 + 32)
																		reg_0 = 2
																		if loc_7 ~= 3 then
																			desired = 6
																			break
																		end
																		if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
																			desired = 10
																			break
																		end
																		loc_14 = rt_load_i32(memory_at_0, loc_1 + 28)
																		loc_9 = rt_load_i32(memory_at_0, loc_14 + 4)
																		loc_12 = rt_load_i32(memory_at_0, loc_0 + 132)
																		if loc_9 == loc_12 then
																			desired = 10
																			break
																		end
																		loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
																		loc_13 = rt_load_i32(memory_at_0, loc_0 + 120)
																		loc_6 = 0
																		loc_18 = bit_xor(rt_shr_u32(loc_9, 4), rt_shr_u32(loc_9, 9))
																		loc_8 = loc_18
																		while true do
																			loc_11 = bit_and(loc_7, loc_8)
																			loc_15 = rt_add_i32(rt_shl_i32(loc_11, 5), loc_13)
																			loc_8 = rt_load_i32(memory_at_0, loc_15)
																			if loc_8 ~= loc_9 then
																				while true do
																					if loc_8 == loc_12 then
																						desired = 10
																						break
																					end
																					loc_6 = rt_add_i32(loc_6, 1)
																					loc_8 = rt_add_i32(loc_11, loc_6)
																					if loc_6 <= loc_7 then
																						desired = 17
																						break
																					end
																					desired = 10
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																						continue
																					end
																					break
																				end
																			end
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		if rt_load_i32(memory_at_0, loc_15 + 8) == 0 then
																			desired = 10
																			break
																		end
																		loc_15 = rt_load_i32(memory_at_0, loc_14 + 8)
																		if loc_12 == loc_15 then
																			desired = 10
																			break
																		end
																		loc_6 = 0
																		loc_20 = bit_xor(rt_shr_u32(loc_15, 4), rt_shr_u32(loc_15, 9))
																		loc_8 = loc_20
																		while true do
																			loc_11 = bit_and(loc_7, loc_8)
																			loc_14 = rt_add_i32(rt_shl_i32(loc_11, 5), loc_13)
																			loc_8 = rt_load_i32(memory_at_0, loc_14)
																			if loc_8 ~= loc_15 then
																				while true do
																					if loc_8 == loc_12 then
																						desired = 10
																						break
																					end
																					loc_6 = rt_add_i32(loc_6, 1)
																					loc_8 = rt_add_i32(loc_11, loc_6)
																					if loc_6 <= loc_7 then
																						desired = 17
																						break
																					end
																					desired = 10
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																						continue
																					end
																					break
																				end
																			end
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		if rt_load_i32(memory_at_0, loc_14 + 8) == 0 then
																			desired = 10
																			break
																		end
																		loc_6 = 0
																		while true do
																			loc_11 = bit_and(loc_7, loc_18)
																			loc_14 = rt_add_i32(rt_shl_i32(loc_11, 5), loc_13)
																			loc_8 = rt_load_i32(memory_at_0, loc_14)
																			if loc_9 == loc_8 then
																				desired = 13
																				break
																			end
																			if loc_8 ~= loc_12 then
																				while true do
																					loc_6 = rt_add_i32(loc_6, 1)
																					loc_18 = rt_add_i32(loc_11, loc_6)
																					if loc_6 <= loc_7 then
																						desired = 17
																						break
																					end
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																						continue
																					end
																					break
																				end
																			end
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_14 = 0
																		rt_store_i32(memory_at_0, loc_10 + 96, 0)
																		desired = 11
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_7 = rt_load_i32(memory_at_0, loc_1 + 32)
																	if loc_7 ~= 3 then
																		desired = 12
																		break
																	end
																	loc_17 = loc_6
																	desired = 10
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_10 + 4, 255)
																rt_store_i32(memory_at_0, loc_10, loc_7)
																FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_10)
																error("out of code bounds")
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															rt_store_i32(memory_at_0, loc_10 + 68, 255)
															rt_store_i32(memory_at_0, loc_10 + 64, loc_6)
															FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_sub_i32(loc_10, 4294967232))
															error("out of code bounds")
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_6 = rt_load_i32(memory_at_0, loc_14 + 8)
														rt_store_f64(memory_at_0, loc_10 + 96, rt_load_f64(memory_at_0, loc_14 + 16))
														loc_14 = (if loc_6 == 3 then 1 else 0)
														desired = 11
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_17 = loc_6
													reg_0 = 2
													desired = 6
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_6 = 0
												while true do
													loc_11 = bit_and(loc_7, loc_20)
													loc_9 = rt_add_i32(rt_shl_i32(loc_11, 5), loc_13)
													loc_8 = rt_load_i32(memory_at_0, loc_9)
													if loc_8 ~= loc_15 then
														while true do
															if loc_8 == loc_12 then
																desired = 10
																break
															end
															loc_6 = rt_add_i32(loc_6, 1)
															loc_20 = rt_add_i32(loc_11, loc_6)
															if loc_6 <= loc_7 then
																desired = 11
																break
															end
															desired = 10
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												while true do
													loc_23 = rt_load_f64(memory_at_0, loc_10 + 96)
													if math_abs(loc_23) < 2.147483648e9 then
														while true do
															reg_0 = rt_truncate_f64(loc_23)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = 2147483648
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_8 = reg_0
												loc_7 = (if rt_load_i32(memory_at_0, loc_9 + 8) ~= 3 then 1 else 0)
												while true do
													loc_23 = rt_load_f64(memory_at_0, loc_9 + 16)
													if math_abs(loc_23) < 2.147483648e9 then
														while true do
															reg_0 = rt_truncate_f64(loc_23)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = 2147483648
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_6 = reg_0
												if loc_7 ~= 0 then
													break
												end
												loc_7 = (if loc_14 ~= 0 then loc_8 else 4294967295)
												if rt_lt_i32(loc_7, 0) then
													break
												end
												if rt_le_i32(loc_6, 0) then
													break
												end
												if rt_gt_i32(rt_add_i32(loc_6, loc_7), 32) then
													break
												end
												reg_0 = FUNC_LIST[78](rt_load_i32(memory_at_0, loc_0), rt_convert_f64_i32(bit_or(loc_7, rt_sub_i32(rt_shl_i32(loc_6, 5), 32))))
												loc_6 = reg_0
												if rt_lt_i32(loc_6, 0) then
													desired = 9
													break
												end
												FUNC_LIST[233](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, bit_and(loc_16, 255), 59, loc_6)
												desired = 4
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_11 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
											loc_15 = rt_load_i32(memory_at_0, loc_0 + 60)
											loc_13 = rt_load_i32(memory_at_0, loc_0 + 72)
											loc_21 = rt_load_i32(memory_at_0, loc_0 + 68)
											loc_12 = rt_load_i32(memory_at_0, 48692)
											loc_8 = rt_load_i32(memory_at_0, 48572)
											loc_22 = rt_load_i32(memory_at_0, loc_1 + 28)
											loc_6 = rt_load_i32(memory_at_0, loc_22)
											loc_7 = rt_load_i32(memory_at_0, loc_6 + 4)
											loc_9 = rt_load_i32(memory_at_0, 48612)
											if (if loc_7 == loc_9 then loc_6 else 0) == 0 then
												while true do
													while true do
														if bit_and((if loc_7 ~= loc_8 then 1 else 0), (if loc_7 ~= loc_12 then 1 else 0)) ~= 0 then
															desired = 8
															break
														end
														loc_6 = rt_load_i32(memory_at_0, loc_6 + 24)
														loc_7 = rt_load_i32(memory_at_0, loc_6 + 4)
														if loc_6 == 0 then
															continue
														end
														if loc_7 ~= loc_9 then
															continue
														end
														break
													end
													if desired then
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											if loc_21 == 0 then
												desired = 8
												break
											end
											loc_18 = rt_load_i32(memory_at_0, loc_6 + 24)
											if loc_13 == loc_18 then
												desired = 8
												break
											end
											loc_7 = bit_xor(rt_shr_u32(loc_18, 4), rt_shr_u32(loc_18, 9))
											loc_6 = 0
											while true do
												loc_14 = bit_and(loc_7, loc_11)
												loc_20 = rt_add_i32(rt_shl_i32(loc_14, 4), loc_15)
												loc_7 = rt_load_i32(memory_at_0, loc_20)
												if loc_7 ~= loc_18 then
													while true do
														if loc_7 == loc_13 then
															desired = 8
															break
														end
														loc_6 = rt_add_i32(loc_6, 1)
														loc_7 = rt_add_i32(loc_14, loc_6)
														if loc_6 <= loc_11 then
															desired = 10
															break
														end
														desired = 8
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_load_i32_u8(memory_at_0, loc_20 + 5) == 0 then
												desired = 8
												break
											end
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
										error("out of code bounds")
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_6 = rt_load_i32(memory_at_0, loc_22 + 4)
									loc_7 = rt_load_i32(memory_at_0, loc_6 + 4)
									while true do
										if (if loc_7 == loc_9 then loc_6 else 0) == 0 then
											while true do
												while true do
													if bit_and((if loc_7 ~= loc_8 then 1 else 0), (if loc_7 ~= loc_12 then 1 else 0)) ~= 0 then
														desired = 8
														break
													end
													loc_6 = rt_load_i32(memory_at_0, loc_6 + 24)
													loc_7 = rt_load_i32(memory_at_0, loc_6 + 4)
													if loc_6 == 0 then
														continue
													end
													if loc_7 ~= loc_9 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										if loc_21 == 0 then
											break
										end
										loc_18 = rt_load_i32(memory_at_0, loc_6 + 24)
										if loc_13 == loc_18 then
											break
										end
										loc_7 = bit_xor(rt_shr_u32(loc_18, 4), rt_shr_u32(loc_18, 9))
										loc_6 = 0
										while true do
											loc_14 = bit_and(loc_7, loc_11)
											loc_20 = rt_add_i32(rt_shl_i32(loc_14, 4), loc_15)
											loc_7 = rt_load_i32(memory_at_0, loc_20)
											if loc_7 ~= loc_18 then
												while true do
													if loc_7 == loc_13 then
														desired = 8
														break
													end
													loc_6 = rt_add_i32(loc_6, 1)
													loc_7 = rt_add_i32(loc_14, loc_6)
													if loc_6 <= loc_11 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if rt_load_i32_u8(memory_at_0, loc_20 + 5) ~= 0 then
											desired = 7
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_6 = rt_load_i32(memory_at_0, loc_22 + 8)
									loc_7 = rt_load_i32(memory_at_0, loc_6 + 4)
									while true do
										if (if loc_7 == loc_9 then loc_6 else 0) == 0 then
											while true do
												while true do
													if bit_and((if loc_7 ~= loc_8 then 1 else 0), (if loc_7 ~= loc_12 then 1 else 0)) ~= 0 then
														desired = 8
														break
													end
													loc_6 = rt_load_i32(memory_at_0, loc_6 + 24)
													loc_7 = rt_load_i32(memory_at_0, loc_6 + 4)
													if loc_6 == 0 then
														continue
													end
													if loc_7 ~= loc_9 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										if loc_21 == 0 then
											break
										end
										loc_9 = rt_load_i32(memory_at_0, loc_6 + 24)
										if loc_13 == loc_9 then
											break
										end
										loc_7 = bit_xor(rt_shr_u32(loc_9, 4), rt_shr_u32(loc_9, 9))
										loc_6 = 0
										while true do
											loc_8 = bit_and(loc_7, loc_11)
											loc_12 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_15)
											loc_7 = rt_load_i32(memory_at_0, loc_12)
											if loc_7 ~= loc_9 then
												while true do
													if loc_7 == loc_13 then
														desired = 8
														break
													end
													loc_6 = rt_add_i32(loc_6, 1)
													loc_7 = rt_add_i32(loc_8, loc_6)
													if loc_6 <= loc_11 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if rt_load_i32_u8(memory_at_0, loc_12 + 5) ~= 0 then
											desired = 7
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_7 = 3
									reg_0 = 2
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = 3
								reg_0 = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_8 = reg_0
							loc_15 = 1
							if loc_8 <= rt_sub_i32(loc_7, 1) then
								break
							end
							reg_0 = FUNC_LIST[231](loc_0, rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_7, 2)), 4)))
							if reg_0 == 0 then
								while true do
									FUNC_LIST[233](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, bit_and(loc_16, 255), loc_17, 4294967295)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 2) then
								break
							end
							FUNC_LIST[21](rt_add_i32(loc_10, 96), loc_17)
							if rt_load_i32(memory_at_0, loc_1 + 32) ~= rt_load_i32(memory_at_0, loc_10 + 96) then
								break
							end
							if bit_and(rt_load_i32_u8(memory_at_0, loc_10 + 104), 1) == 0 then
								break
							end
							FUNC_LIST[233](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, bit_and(loc_16, 255), loc_17, 4294967295)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								if rt_load_i32_u8(memory_at_0, loc_1 + 36) == 1 then
									while true do
										loc_6 = rt_load_i32(memory_at_0, loc_1 + 24)
										loc_12 = rt_load_i32(memory_at_0, (if rt_load_i32(memory_at_0, loc_6 + 4) == rt_load_i32(memory_at_0, 48644) then loc_6 else 0) + 24)
										loc_6 = rt_load_i32(memory_at_0, loc_12 + 4)
										loc_11 = rt_load_i32(memory_at_0, 48612)
										while true do
											if loc_12 ~= 0 then
												while true do
													loc_7 = loc_12
													if loc_6 == loc_11 then
														desired = 8
														break
													end
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											loc_9 = rt_load_i32(memory_at_0, 48692)
											loc_8 = rt_load_i32(memory_at_0, 48572)
											loc_7 = loc_12
											while true do
												if bit_and((if loc_6 ~= loc_8 then 1 else 0), (if loc_6 ~= loc_9 then 1 else 0)) ~= 0 then
													desired = 6
													break
												end
												loc_7 = rt_load_i32(memory_at_0, loc_7 + 24)
												loc_6 = rt_load_i32(memory_at_0, loc_7 + 4)
												if loc_7 == 0 then
													continue
												end
												if loc_6 ~= loc_11 then
													continue
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											break
										end
										if desired then
											break
										end
										if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
											desired = 6
											break
										end
										loc_9 = rt_load_i32(memory_at_0, loc_7 + 24)
										loc_13 = rt_load_i32(memory_at_0, loc_0 + 72)
										if loc_9 == loc_13 then
											desired = 6
											break
										end
										loc_7 = bit_xor(rt_shr_u32(loc_9, 4), rt_shr_u32(loc_9, 9))
										loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
										loc_14 = rt_load_i32(memory_at_0, loc_0 + 60)
										loc_6 = 0
										while true do
											loc_11 = bit_and(loc_7, loc_8)
											loc_18 = rt_add_i32(rt_shl_i32(loc_11, 4), loc_14)
											loc_7 = rt_load_i32(memory_at_0, loc_18)
											if loc_7 ~= loc_9 then
												while true do
													if loc_7 == loc_13 then
														desired = 6
														break
													end
													loc_6 = rt_add_i32(loc_6, 1)
													loc_7 = rt_add_i32(loc_11, loc_6)
													if loc_6 <= loc_8 then
														desired = 8
														break
													end
													desired = 6
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											break
										end
										if rt_load_i32_u8(memory_at_0, loc_18 + 5) ~= 1 then
											desired = 6
											break
										end
										loc_14 = rt_load_i32_u8(memory_at_0, loc_18 + 4)
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_14 = 0
								if rt_ge_i32(loc_17, 0) then
									desired = 5
									break
								end
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 624)
								loc_7 = rt_load_i32(memory_at_0, loc_1 + 24)
								loc_8 = bit_and(loc_16, 255)
								rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_8, 1))
								FUNC_LIST[229](loc_0, loc_7, loc_8, 1)
								rt_store_i32(memory_at_0, loc_0 + 624, loc_6)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 624)
							loc_7 = bit_and(loc_16, 255)
							rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_7, 1))
							FUNC_LIST[229](loc_0, loc_12, loc_7, 1)
							rt_store_i32(memory_at_0, loc_0 + 624, loc_6)
							loc_14 = loc_16
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_8 = rt_load_i32(memory_at_0, loc_1 + 32)
							if loc_8 == 0 then
								while true do
									loc_13 = 0
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_12 = rt_add_i32(bit_and(loc_16, 255), 1)
							loc_6 = 0
							loc_13 = 0
							while true do
								loc_11 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_6, 2)))
								loc_9 = rt_load_i32_u8(memory_at_0, loc_1 + 36)
								while true do
									loc_7 = rt_add_i32(loc_6, 1)
									if loc_7 == loc_8 then
										while true do
											reg_0 = FUNC_LIST[228](loc_0, loc_11, bit_and(rt_add_i32(rt_add_i32(loc_6, loc_12), loc_9), 255))
											loc_13 = reg_0
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_8 = rt_load_i32(memory_at_0, loc_0 + 624)
									loc_6 = bit_and(rt_add_i32(loc_9, rt_add_i32(loc_6, loc_12)), 255)
									rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_6, 1))
									FUNC_LIST[229](loc_0, loc_11, loc_6, 1)
									rt_store_i32(memory_at_0, loc_0 + 624, loc_8)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_8 = rt_load_i32(memory_at_0, loc_1 + 32)
								loc_6 = loc_7
								if loc_8 > loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
							while true do
								FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 24) + 16), 1))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if rt_load_i32_u8(memory_at_0, loc_1 + 36) ~= 0 then
								while true do
									loc_6 = rt_load_i32(memory_at_0, loc_1 + 24)
									loc_6 = (if rt_load_i32(memory_at_0, loc_6 + 4) == rt_load_i32(memory_at_0, 48644) then loc_6 else 0)
									loc_7 = rt_load_i32(memory_at_0, loc_0)
									if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
										while true do
											FUNC_LIST[104](loc_7, rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 32), 1))
											reg_0 = rt_load_i32(memory_at_0, loc_0)
											break
										end
										if desired then
											break
										end
									else
										while true do
											reg_0 = loc_7
											break
										end
										if desired then
											break
										end
									end
									loc_7 = reg_0
									loc_8 = rt_load_i32(memory_at_0, loc_6 + 28)
									reg_1 = FUNC_LIST[544](loc_8)
									loc_11 = reg_1
									rt_store_i32(memory_at_0, loc_10 + 92, loc_11)
									rt_store_i32(memory_at_0, loc_10 + 88, loc_8)
									rt_store_i64(memory_at_0, loc_10 + 24, rt_load_i64(memory_at_0, loc_10 + 88))
									reg_0 = FUNC_LIST[80](loc_7, rt_add_i32(loc_10, 24))
									loc_7 = reg_0
									if rt_lt_i32(loc_7, 0) then
										desired = 2
										break
									end
									loc_9 = rt_load_i32(memory_at_0, loc_0)
									rt_store_i32(memory_at_0, loc_10 + 84, loc_11)
									rt_store_i32(memory_at_0, loc_10 + 80, loc_8)
									rt_store_i64(memory_at_0, loc_10 + 16, rt_load_i64(memory_at_0, loc_10 + 80))
									loc_8 = bit_and(loc_14, 255)
									reg_4 = FUNC_LIST[115](rt_add_i32(loc_10, 16))
									FUNC_LIST[90](loc_9, 20, bit_and(loc_16, 255), loc_8, bit_and(reg_4, 255))
									FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_7)
									FUNC_LIST[234](loc_0, rt_load_i32(memory_at_0, loc_6 + 24), loc_8, 4, 2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_15 == 0 then
								break
							end
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_6 = reg_0
							FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 68, bit_and(loc_17, 255), 0, 0)
							FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), bit_and(loc_16, 255), 1)
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_7 = reg_0
							reg_0 = FUNC_LIST[95](rt_load_i32(memory_at_0, loc_0), loc_6, loc_7)
							if reg_0 == 0 then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = 0
						loc_7 = 0
						loc_8 = rt_load_i32(memory_at_0, loc_0)
						reg_0 = loc_8
						reg_1 = 21
						reg_2 = bit_and(loc_16, 255)
						if bit_and(loc_13, 1) ~= 0 then
							while true do
								reg_3 = loc_7
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_3 = rt_add_i32(rt_add_i32(rt_load_i32_u8(memory_at_0, loc_1 + 36), rt_load_i32_u8(memory_at_0, loc_1 + 32)), 1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_7 = reg_3
						FUNC_LIST[90](reg_0, reg_1, reg_2, bit_and(loc_7, 255), bit_and((if loc_5 ~= 0 then 0 else rt_add_i32(loc_3, 1)), 255))
						if loc_3 == 0 then
							break
						end
						if loc_4 ~= 0 then
							break
						end
						while true do
							FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, bit_and(rt_add_i32(loc_2, loc_6), 255), bit_and(rt_add_i32(loc_6, loc_16), 255), 0)
							loc_6 = rt_add_i32(loc_6, 1)
							if loc_3 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 624, loc_19)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_10, 112)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[173](rt_add_i32(loc_6, 8), 4468, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[212] = --[[ Luau::Compiler::compileExprSide(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_9 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
				loc_6 = rt_load_i32(memory_at_0, 48612)
				if loc_2 == loc_6 then
					break
				end
				if rt_load_i32(memory_at_0, 48620) == loc_2 then
					break
				end
				if rt_load_i32(memory_at_0, 48628) == loc_2 then
					break
				end
				if rt_load_i32(memory_at_0, 48660) == loc_2 then
					break
				end
				while true do
					if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
						break
					end
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 132)
					if loc_7 == loc_1 then
						break
					end
					loc_4 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 120)
					while true do
						loc_8 = bit_and(loc_4, loc_5)
						loc_11 = rt_add_i32(rt_shl_i32(loc_8, 5), loc_10)
						loc_4 = rt_load_i32(memory_at_0, loc_11)
						if loc_4 ~= loc_1 then
							while true do
								if loc_4 == loc_7 then
									desired = 3
									break
								end
								loc_3 = rt_add_i32(loc_3, 1)
								loc_4 = rt_add_i32(loc_8, loc_3)
								if loc_3 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_11 + 8) ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 ~= rt_load_i32(memory_at_0, 48636) then
					while true do
						FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), 2018, 0)
						loc_6 = rt_load_i32(memory_at_0, 48612)
						reg_0 = rt_load_i32(memory_at_0, loc_1 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 624)
				while true do
					while true do
						while true do
							if loc_1 ~= 0 then
								while true do
									loc_3 = loc_1
									if loc_2 == loc_6 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_load_i32(memory_at_0, 48692)
							loc_4 = rt_load_i32(memory_at_0, 48572)
							loc_3 = loc_1
							while true do
								if bit_and((if loc_2 ~= loc_4 then 1 else 0), (if loc_2 ~= loc_5 then 1 else 0)) ~= 0 then
									desired = 4
									break
								end
								loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
								loc_2 = rt_load_i32(memory_at_0, loc_3 + 4)
								if loc_3 == 0 then
									continue
								end
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
							break
						end
						loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
						loc_6 = rt_load_i32(memory_at_0, loc_0 + 72)
						if loc_8 == loc_6 then
							break
						end
						loc_3 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
						loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
						loc_10 = rt_load_i32(memory_at_0, loc_0 + 60)
						loc_2 = 0
						while true do
							loc_5 = bit_and(loc_3, loc_4)
							loc_11 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_10)
							loc_3 = rt_load_i32(memory_at_0, loc_11)
							if loc_3 ~= loc_8 then
								while true do
									if loc_3 == loc_6 then
										desired = 4
										break
									end
									loc_2 = rt_add_i32(loc_2, 1)
									loc_3 = rt_add_i32(loc_5, loc_2)
									if loc_2 <= loc_4 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_11 + 5) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_add_i32(loc_7, 1)
					if loc_2 >= 256 then
						desired = 1
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 628)
					rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_3 then loc_3 else loc_2))
					FUNC_LIST[229](loc_0, loc_1, bit_and(loc_7, 255), 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 624, loc_7)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_9, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_9, rt_i64_from_u32(1, 255))
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_9)
		error("out of code bounds")
	end
end
FUNC_LIST[213] = --[[ Luau::Compiler::compileStatLocal(Luau::AstStatLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	while true do
		loc_12 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_12
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_9 = rt_load_i32(memory_at_0, loc_0 + 4)
								if rt_le_i32(loc_9, 0) then
									break
								end
								if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1) then
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
								if loc_2 < rt_load_i32(memory_at_0, loc_1 + 40) then
									desired = 4
									break
								end
								if loc_2 == 0 then
									desired = 2
									break
								end
								if rt_load_i32(memory_at_0, loc_0 + 108) == 0 then
									desired = 5
									break
								end
								loc_10 = rt_load_i32(memory_at_0, loc_1 + 28)
								loc_13 = rt_add_i32(loc_10, rt_shl_i32(loc_2, 2))
								loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
								loc_11 = rt_load_i32(memory_at_0, loc_0 + 100)
								loc_5 = rt_load_i32(memory_at_0, loc_0 + 112)
								while true do
									loc_6 = rt_load_i32(memory_at_0, loc_10)
									if loc_5 == loc_6 then
										desired = 6
										break
									end
									loc_3 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
									loc_2 = 0
									while true do
										loc_7 = bit_and(loc_3, loc_4)
										loc_8 = rt_add_i32(rt_mul_i32(loc_7, 12), loc_11)
										loc_3 = rt_load_i32(memory_at_0, loc_8)
										if loc_3 ~= loc_6 then
											while true do
												if loc_3 == loc_5 then
													desired = 6
													break
												end
												loc_2 = rt_add_i32(loc_2, 1)
												loc_3 = rt_add_i32(loc_7, loc_2)
												if loc_2 <= loc_4 then
													desired = 8
													break
												end
												desired = 6
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									if rt_load_i32_u8(memory_at_0, loc_8 + 9) == 0 then
										desired = 6
										break
									end
									loc_10 = rt_add_i32(loc_10, 4)
									if loc_10 ~= loc_13 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_gt_i32(loc_9, 0) then
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 ~= 1 then
						break
					end
					if rt_load_i32(memory_at_0, loc_1 + 40) ~= 1 then
						while true do
							loc_2 = 1
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 36))
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					loc_7 = rt_load_i32(memory_at_0, 48612)
					if (if loc_3 == loc_7 then loc_2 else 0) == 0 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, 48692)
							loc_4 = rt_load_i32(memory_at_0, 48572)
							while true do
								while true do
									if loc_3 == loc_4 then
										break
									end
									if loc_3 == loc_6 then
										break
									end
									loc_2 = 1
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_2 + 24)
								loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
								if loc_2 == 0 then
									continue
								end
								if loc_3 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_13 = rt_load_i32(memory_at_0, loc_1 + 28)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 108) == 0 then
							while true do
								loc_10 = 1
								loc_6 = 0
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = 0
						while true do
							loc_8 = rt_load_i32(memory_at_0, loc_13)
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 112)
							if loc_8 == loc_7 then
								while true do
									reg_0 = 1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
							loc_11 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
							loc_10 = rt_load_i32(memory_at_0, loc_0 + 100)
							loc_3 = 0
							while true do
								while true do
									loc_9 = bit_and(loc_5, loc_11)
									loc_4 = rt_add_i32(rt_mul_i32(loc_9, 12), loc_10)
									loc_5 = rt_load_i32(memory_at_0, loc_4)
									if loc_8 == loc_5 then
										break
									end
									loc_4 = 0
									if loc_5 == loc_7 then
										break
									end
									loc_3 = rt_add_i32(loc_3, 1)
									loc_5 = rt_add_i32(loc_9, loc_3)
									if loc_3 <= loc_11 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_14 = (if loc_4 ~= 0 then rt_add_i32(loc_4, 4) else 0)
							reg_0 = (if loc_4 == 0 then 1 else 0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = reg_0
						loc_9 = rt_load_i32(memory_at_0, loc_2 + 24)
						if loc_7 == loc_9 then
							break
						end
						loc_4 = bit_xor(rt_shr_u32(loc_9, 4), rt_shr_u32(loc_9, 9))
						loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
						loc_8 = rt_load_i32(memory_at_0, loc_0 + 100)
						loc_3 = 0
						while true do
							loc_11 = bit_and(loc_4, loc_5)
							loc_6 = rt_add_i32(rt_mul_i32(loc_11, 12), loc_8)
							loc_4 = rt_load_i32(memory_at_0, loc_6)
							if loc_9 == loc_4 then
								desired = 4
								break
							end
							loc_6 = 0
							if loc_4 == loc_7 then
								desired = 4
								break
							end
							loc_3 = rt_add_i32(loc_3, 1)
							loc_4 = rt_add_i32(loc_11, loc_3)
							if loc_3 <= loc_5 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
						while true do
							loc_2 = 1
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_load_i32(memory_at_0, loc_2 + 24)
					loc_11 = rt_load_i32(memory_at_0, loc_0 + 72)
					if loc_5 == loc_11 then
						while true do
							loc_2 = 1
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
					loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 60)
					loc_3 = 0
					while true do
						while true do
							loc_4 = bit_and(loc_4, loc_7)
							loc_8 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_9)
							loc_2 = rt_load_i32(memory_at_0, loc_8)
							if loc_2 ~= loc_5 then
								while true do
									if loc_2 ~= loc_11 then
										desired = 5
										break
									end
									loc_2 = 1
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = 1
							if rt_load_i32_u8(memory_at_0, loc_8 + 5) ~= 1 then
								desired = 3
								break
							end
							loc_3 = rt_load_i32_u8(memory_at_0, loc_8 + 4)
							if loc_10 == 0 then
								while true do
									if rt_load_i32_u8(memory_at_0, loc_14 + 4) ~= 0 then
										desired = 3
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_6 ~= 0 then
								while true do
									if rt_load_i32_u8(memory_at_0, loc_6 + 8) ~= 0 then
										desired = 3
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[180](loc_0, rt_load_i32(memory_at_0, loc_13), bit_and(loc_3, 255), 4294967295)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = 1
						loc_3 = rt_add_i32(loc_3, 1)
						loc_4 = rt_add_i32(loc_4, loc_3)
						if loc_3 <= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
				loc_4 = rt_add_i32(loc_2, loc_3)
				if loc_4 >= 256 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 624, loc_4)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 628)
				rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 > loc_4 then loc_2 else loc_4))
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_4 = reg_0
				FUNC_LIST[227](loc_0, rt_add_i32(loc_1, 36), bit_and(loc_3, 255), rt_load_i32_u8(memory_at_0, loc_1 + 32), 1)
				if rt_load_i32(memory_at_0, loc_1 + 32) == 0 then
					break
				end
				loc_2 = 0
				while true do
					FUNC_LIST[180](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2))), bit_and(rt_add_i32(loc_2, loc_3), 255), loc_4)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_2 < rt_load_i32(memory_at_0, loc_1 + 32) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_12, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_12 + 4, 255)
		rt_store_i32(memory_at_0, loc_12, loc_2)
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_12)
		error("out of code bounds")
	end
end
FUNC_LIST[214] = --[[ Luau::Compiler::compileStatFor(Luau::AstStatFor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local reg_0
	local desired
	while true do
		loc_11 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_11
		loc_13 = rt_load_i32(memory_at_0, loc_0 + 624)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 2) then
										break
									end
									if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_1 + 36)
									loc_8 = rt_load_i32(memory_at_0, loc_0 + 132)
									if loc_5 == loc_8 then
										break
									end
									loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
									loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
									loc_7 = rt_load_i32(memory_at_0, loc_0 + 120)
									while true do
										loc_6 = bit_and(loc_3, loc_4)
										loc_9 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_7)
										loc_4 = rt_load_i32(memory_at_0, loc_9)
										if loc_4 ~= loc_5 then
											while true do
												if loc_4 == loc_8 then
													desired = 7
													break
												end
												loc_2 = rt_add_i32(loc_2, 1)
												loc_4 = rt_add_i32(loc_6, loc_2)
												if loc_2 <= loc_3 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32(memory_at_0, loc_9 + 8) == 0 then
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_1 + 32)
									if loc_8 == loc_5 then
										break
									end
									loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
									loc_2 = 0
									while true do
										loc_6 = bit_and(loc_3, loc_4)
										loc_9 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_7)
										loc_4 = rt_load_i32(memory_at_0, loc_9)
										if loc_4 ~= loc_5 then
											while true do
												if loc_4 == loc_8 then
													desired = 7
													break
												end
												loc_2 = rt_add_i32(loc_2, 1)
												loc_4 = rt_add_i32(loc_6, loc_2)
												if loc_2 <= loc_3 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32(memory_at_0, loc_9 + 8) == 0 then
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_1 + 40)
									if loc_5 ~= 0 then
										while true do
											if loc_5 == loc_8 then
												desired = 7
												break
											end
											loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
											loc_2 = 0
											while true do
												loc_6 = bit_and(loc_3, loc_4)
												loc_9 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_7)
												loc_4 = rt_load_i32(memory_at_0, loc_9)
												if loc_4 ~= loc_5 then
													while true do
														if loc_4 == loc_8 then
															desired = 7
															break
														end
														loc_2 = rt_add_i32(loc_2, 1)
														loc_4 = rt_add_i32(loc_6, loc_2)
														if loc_2 <= loc_3 then
															desired = 9
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												break
											end
											if rt_load_i32(memory_at_0, loc_9 + 8) == 0 then
												desired = 7
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[235](loc_0, loc_1, rt_load_i32(memory_at_0, 48480), rt_load_i32(memory_at_0, 48496))
									if reg_0 ~= 0 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_14 = rt_load_i32(memory_at_0, loc_0 + 664)
								loc_15 = rt_load_i32(memory_at_0, loc_0 + 668)
								loc_8 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2)
								while true do
									loc_2 = rt_load_i32(memory_at_0, loc_0 + 680)
									loc_5 = rt_load_i32(memory_at_0, loc_0 + 684)
									if loc_2 < loc_5 then
										while true do
											rt_store_i32(memory_at_0, loc_2 + 8, 0)
											rt_store_i32(memory_at_0, loc_2 + 4, loc_8)
											rt_store_i32(memory_at_0, loc_2, loc_8)
											loc_6 = rt_add_i32(loc_2, 12)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_6 = rt_add_i32(loc_0, 676)
									loc_4 = rt_load_i32(memory_at_0, loc_6)
									loc_9 = rt_div_i32(rt_sub_i32(loc_2, loc_4), 12)
									loc_3 = rt_add_i32(loc_9, 1)
									if loc_3 >= 357913942 then
										desired = 5
										break
									end
									loc_6 = 0
									loc_7 = rt_div_i32(rt_sub_i32(loc_5, loc_4), 12)
									loc_12 = rt_shl_i32(loc_7, 1)
									loc_7 = (if loc_7 >= 178956970 then 357913941 else (if loc_3 < loc_12 then loc_12 else loc_3))
									if loc_7 ~= 0 then
										while true do
											if loc_7 >= 357913942 then
												desired = 4
												break
											end
											reg_0 = FUNC_LIST[646](rt_mul_i32(loc_7, 12))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_6 = reg_0
									loc_3 = rt_add_i32(loc_6, rt_mul_i32(loc_9, 12))
									rt_store_i32(memory_at_0, loc_3 + 8, 0)
									rt_store_i32(memory_at_0, loc_3 + 4, loc_8)
									rt_store_i32(memory_at_0, loc_3, loc_8)
									loc_7 = rt_add_i32(rt_mul_i32(loc_7, 12), loc_6)
									loc_6 = rt_add_i32(loc_3, 12)
									if loc_2 ~= loc_4 then
										while true do
											while true do
												loc_3 = rt_sub_i32(loc_3, 12)
												loc_2 = rt_sub_i32(loc_2, 12)
												rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
												rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
												if loc_2 ~= loc_4 then
													continue
												end
												break
											end
											if desired then
												break
											end
											loc_5 = rt_load_i32(memory_at_0, loc_0 + 684)
											reg_0 = rt_load_i32(memory_at_0, loc_0 + 676)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_4 = reg_0
									rt_store_i32(memory_at_0, loc_0 + 684, loc_7)
									rt_store_i32(memory_at_0, loc_0 + 680, loc_6)
									rt_store_i32(memory_at_0, loc_0 + 676, loc_3)
									if loc_4 == 0 then
										break
									end
									FUNC_LIST[653](loc_4, rt_sub_i32(loc_5, loc_4))
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32_n8(memory_at_0, loc_0 + 636, 1)
								rt_store_i32(memory_at_0, loc_0 + 680, loc_6)
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 624)
								loc_2 = rt_add_i32(loc_7, 3)
								if loc_2 >= 256 then
									desired = 3
									break
								end
								rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
								loc_3 = rt_load_i32(memory_at_0, loc_0 + 628)
								rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_3 then loc_3 else loc_2))
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_16 = reg_0
								loc_17 = bit_and(loc_7, 255)
								loc_10 = rt_add_i32(loc_17, 2)
								loc_2 = loc_10
								while true do
									if rt_load_i32(memory_at_0, loc_0 + 108) == 0 then
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_1 + 28)
									loc_9 = rt_load_i32(memory_at_0, loc_0 + 112)
									if loc_5 == loc_9 then
										while true do
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_3 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
									loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
									loc_12 = rt_load_i32(memory_at_0, loc_0 + 100)
									loc_2 = 0
									while true do
										while true do
											loc_6 = bit_and(loc_3, loc_4)
											loc_18 = rt_add_i32(rt_mul_i32(loc_6, 12), loc_12)
											loc_3 = rt_load_i32(memory_at_0, loc_18)
											if loc_5 == loc_3 then
												desired = 8
												break
											end
											if loc_3 == loc_9 then
												while true do
													loc_2 = loc_10
													desired = 7
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											loc_2 = rt_add_i32(loc_2, 1)
											loc_3 = rt_add_i32(loc_6, loc_2)
											if loc_2 <= loc_4 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = loc_10
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32_u8(memory_at_0, loc_18 + 8) ~= 1 then
										while true do
											loc_2 = loc_10
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_2 = rt_load_i32(memory_at_0, loc_0 + 624)
									loc_3 = rt_add_i32(loc_2, 1)
									if loc_3 >= 256 then
										desired = 2
										break
									end
									rt_store_i32(memory_at_0, loc_0 + 624, loc_3)
									loc_4 = rt_load_i32(memory_at_0, loc_0 + 628)
									rt_store_i32(memory_at_0, loc_0 + 628, (if loc_3 < loc_4 then loc_4 else loc_3))
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), bit_and(loc_10, 255), 1)
								FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 36), loc_17, 1)
								while true do
									loc_3 = rt_load_i32(memory_at_0, loc_1 + 40)
									if loc_3 ~= 0 then
										while true do
											FUNC_LIST[229](loc_0, loc_3, bit_and(rt_add_i32(loc_7, 1), 255), 1)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 4, bit_and(rt_add_i32(loc_7, 1), 255), 1, 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_3 = reg_0
								FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 56, bit_and(loc_7, 255), 0)
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_4 = reg_0
								loc_2 = bit_and(loc_2, 255)
								if loc_10 ~= loc_2 then
									while true do
										FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, loc_2, bit_and(loc_10, 255), 0)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[180](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), loc_2, loc_16)
								FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, loc_1 + 44))
								FUNC_LIST[183](loc_0, loc_8)
								FUNC_LIST[185](loc_0, loc_8)
								if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
									while true do
										FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_5 = reg_0
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_6 = reg_0
								FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 57, bit_and(loc_7, 255), 0)
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_2 = reg_0
								reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_3, loc_2)
								if reg_0 == 0 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_6, loc_4)
								if reg_0 == 0 then
									desired = 1
									break
								end
								loc_4 = rt_sub_i32(loc_15, loc_14)
								loc_3 = rt_shr_i32(loc_4, 3)
								FUNC_LIST[224](loc_0, loc_1, loc_3, loc_2, loc_5)
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 664)
									loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 668), loc_1), 3)
									if loc_3 > loc_2 then
										while true do
											FUNC_LIST[225](rt_add_i32(loc_0, 664), rt_sub_i32(loc_3, loc_2))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 <= loc_3 then
										break
									end
									rt_store_i32(memory_at_0, loc_0 + 668, rt_add_i32(loc_1, loc_4))
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_0 + 680, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 680), 12))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 624, loc_13)
							GLOBAL_LIST[0].value = rt_add_i32(loc_11, 32)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[44](loc_6)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[197]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i64(memory_at_0, loc_11, rt_i64_from_u32(3, 255))
				FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_11)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_11 + 16, rt_i64_from_u32(1, 255))
			FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_11, 16))
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[215] = --[[ Luau::Compiler::compileStatForIn(Luau::AstStatForIn*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_6
		loc_12 = rt_load_i32(memory_at_0, loc_0 + 664)
		loc_13 = rt_load_i32(memory_at_0, loc_0 + 668)
		loc_9 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2)
		loc_14 = rt_load_i32(memory_at_0, loc_0 + 624)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 680)
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 684)
								if loc_2 < loc_7 then
									while true do
										rt_store_i32(memory_at_0, loc_2 + 8, 0)
										rt_store_i32(memory_at_0, loc_2 + 4, loc_9)
										rt_store_i32(memory_at_0, loc_2, loc_9)
										loc_5 = rt_add_i32(loc_2, 12)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_5 = rt_add_i32(loc_0, 676)
								loc_4 = rt_load_i32(memory_at_0, loc_5)
								loc_10 = rt_div_i32(rt_sub_i32(loc_2, loc_4), 12)
								loc_3 = rt_add_i32(loc_10, 1)
								if loc_3 >= 357913942 then
									desired = 5
									break
								end
								loc_5 = 0
								loc_8 = rt_div_i32(rt_sub_i32(loc_7, loc_4), 12)
								loc_15 = rt_shl_i32(loc_8, 1)
								loc_8 = (if loc_8 >= 178956970 then 357913941 else (if loc_3 < loc_15 then loc_15 else loc_3))
								if loc_8 ~= 0 then
									while true do
										if loc_8 >= 357913942 then
											desired = 4
											break
										end
										reg_0 = FUNC_LIST[646](rt_mul_i32(loc_8, 12))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_5 = reg_0
								loc_3 = rt_add_i32(loc_5, rt_mul_i32(loc_10, 12))
								rt_store_i32(memory_at_0, loc_3 + 8, 0)
								rt_store_i32(memory_at_0, loc_3 + 4, loc_9)
								rt_store_i32(memory_at_0, loc_3, loc_9)
								loc_8 = rt_add_i32(rt_mul_i32(loc_8, 12), loc_5)
								loc_5 = rt_add_i32(loc_3, 12)
								if loc_2 ~= loc_4 then
									while true do
										while true do
											loc_3 = rt_sub_i32(loc_3, 12)
											loc_2 = rt_sub_i32(loc_2, 12)
											rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
											rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
											if loc_2 ~= loc_4 then
												continue
											end
											break
										end
										if desired then
											break
										end
										loc_7 = rt_load_i32(memory_at_0, loc_0 + 684)
										reg_0 = rt_load_i32(memory_at_0, loc_0 + 676)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_4 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 684, loc_8)
								rt_store_i32(memory_at_0, loc_0 + 680, loc_5)
								rt_store_i32(memory_at_0, loc_0 + 676, loc_3)
								if loc_4 == 0 then
									break
								end
								FUNC_LIST[653](loc_4, rt_sub_i32(loc_7, loc_4))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32_n8(memory_at_0, loc_0 + 636, 1)
							rt_store_i32(memory_at_0, loc_0 + 680, loc_5)
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 624)
							loc_2 = rt_add_i32(loc_5, 3)
							if loc_2 >= 256 then
								desired = 3
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 628)
							rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_3 then loc_3 else loc_2))
							loc_11 = loc_1
							loc_8 = rt_add_i32(loc_11, 36)
							FUNC_LIST[227](loc_0, loc_8, bit_and(loc_5, 255), 3, 1)
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
							loc_4 = (if loc_2 <= 2 then 2 else loc_2)
							loc_2 = rt_add_i32(loc_3, loc_4)
							if loc_2 >= 256 then
								desired = 2
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
							loc_4 = rt_load_i32(memory_at_0, loc_0 + 628)
							rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_4 then loc_4 else loc_2))
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_4 = reg_0
							loc_7 = 76
							while true do
								if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 4), 0) then
									break
								end
								if rt_load_i32(memory_at_0, loc_1 + 32) > 2 then
									break
								end
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 1, }
											end)()
										end
										temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 40), 1)] or 2
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_11 + 36))
									if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48636) then
										desired = 6
										break
									end
									FUNC_LIST[19](rt_add_i32(loc_6, 24), rt_load_i32(memory_at_0, loc_2 + 24), rt_add_i32(loc_0, 80), rt_add_i32(loc_0, 100))
									if rt_load_i32(memory_at_0, loc_6 + 24) ~= 0 then
										desired = 6
										break
									end
									loc_2 = rt_load_i32(memory_at_0, loc_6 + 28)
									if loc_2 == 0 then
										desired = 6
										break
									end
									reg_0 = FUNC_LIST[584](loc_2, 2066)
									if reg_0 == 0 then
										while true do
											loc_7 = 59
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_2 = FUNC_LIST[584](loc_2, 2067)
									loc_7 = (if reg_2 ~= 0 then 76 else 61)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[19](rt_add_i32(loc_6, 24), rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_11 + 36)), rt_add_i32(loc_0, 80), rt_add_i32(loc_0, 100))
								if rt_load_i32(memory_at_0, loc_6 + 24) ~= 0 then
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_6 + 28)
								if loc_2 == 0 then
									break
								end
								reg_2 = FUNC_LIST[584](loc_2, 1310)
								loc_7 = (if reg_2 ~= 0 then 76 else 61)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_8 = reg_0
							loc_2 = 0
							FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), loc_7, bit_and(loc_5, 255), 0)
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_10 = reg_0
							if rt_load_i32(memory_at_0, loc_1 + 32) ~= 0 then
								while true do
									while true do
										FUNC_LIST[180](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2))), bit_and(rt_add_i32(loc_2, loc_3), 255), loc_4)
										loc_2 = rt_add_i32(loc_2, 1)
										if loc_2 < rt_load_i32(memory_at_0, loc_1 + 32) then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, loc_1 + 44))
							FUNC_LIST[183](loc_0, loc_9)
							FUNC_LIST[185](loc_0, loc_9)
							if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
								while true do
									FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_3 = reg_0
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_2 = reg_0
							FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 58, bit_and(loc_5, 255), 0)
							FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), bit_or(rt_load_i32(memory_at_0, loc_1 + 32), rt_shl_i32((if loc_7 == 59 then 1 else 0), 31)))
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_4 = reg_0
							reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_8, loc_2)
							if reg_0 == 0 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_2, loc_10)
							if reg_0 == 0 then
								desired = 1
								break
							end
							loc_9 = rt_sub_i32(loc_13, loc_12)
							loc_2 = rt_shr_i32(loc_9, 3)
							FUNC_LIST[224](loc_0, loc_1, loc_2, loc_4, loc_3)
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_0 + 664)
								loc_1 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 668), loc_3), 3)
								if loc_2 > loc_1 then
									while true do
										FUNC_LIST[225](rt_add_i32(loc_0, 664), rt_sub_i32(loc_2, loc_1))
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_1 <= loc_2 then
									break
								end
								rt_store_i32(memory_at_0, loc_0 + 668, rt_add_i32(loc_3, loc_9))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 624, loc_14)
							rt_store_i32(memory_at_0, loc_0 + 680, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 680), 12))
							GLOBAL_LIST[0].value = rt_add_i32(loc_6, 32)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[44](loc_5)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[197]()
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i64(memory_at_0, loc_6, rt_i64_from_u32(3, 255))
				FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_6)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_6 + 20, 255)
			rt_store_i32(memory_at_0, loc_6 + 16, loc_4)
			FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_6, 16))
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[216] = --[[ Luau::Compiler::compileStatAssign(Luau::AstStatAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 88, loc_0)
		rt_store_i32(memory_at_0, loc_4 + 92, rt_load_i32(memory_at_0, loc_0 + 624))
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_7 = rt_load_i32(memory_at_0, loc_1 + 32)
										if loc_7 == 1 then
											while true do
												if rt_load_i32(memory_at_0, loc_1 + 40) ~= 1 then
													while true do
														rt_store_i64(memory_at_0, loc_4 + 48, rt_i64_ZERO)
														desired = 8
														break
													end
													if desired then
														break
													end
												end
												FUNC_LIST[236](rt_add_i32(loc_4, 56), loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28)), rt_add_i32(loc_4, 88))
												loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 36))
												if rt_load_i32(memory_at_0, loc_4 + 56) == 0 then
													while true do
														FUNC_LIST[229](loc_0, loc_5, rt_load_i32_u8(memory_at_0, loc_4 + 60), 0)
														desired = 1
														break
													end
													if desired then
														break
													end
												end
												loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
												loc_8 = rt_load_i32(memory_at_0, 48612)
												while true do
													if loc_5 ~= 0 then
														while true do
															loc_3 = loc_5
															if loc_2 == loc_8 then
																desired = 10
																break
															end
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_7 = rt_load_i32(memory_at_0, 48692)
													loc_6 = rt_load_i32(memory_at_0, 48572)
													loc_3 = loc_5
													while true do
														if bit_and((if loc_2 ~= loc_6 then 1 else 0), (if loc_2 ~= loc_7 then 1 else 0)) ~= 0 then
															desired = 4
															break
														end
														loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
														loc_2 = rt_load_i32(memory_at_0, loc_3 + 4)
														if loc_3 == 0 then
															continue
														end
														if loc_2 ~= loc_8 then
															continue
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													break
												end
												if desired then
													break
												end
												if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
													desired = 4
													break
												end
												loc_7 = rt_load_i32(memory_at_0, loc_3 + 24)
												loc_9 = rt_load_i32(memory_at_0, loc_0 + 72)
												if loc_7 == loc_9 then
													desired = 4
													break
												end
												loc_3 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
												loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
												loc_10 = rt_load_i32(memory_at_0, loc_0 + 60)
												loc_2 = 0
												while true do
													loc_8 = bit_and(loc_3, loc_6)
													loc_11 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_10)
													loc_3 = rt_load_i32(memory_at_0, loc_11)
													if loc_3 ~= loc_7 then
														while true do
															if loc_3 == loc_9 then
																desired = 4
																break
															end
															loc_2 = rt_add_i32(loc_2, 1)
															loc_3 = rt_add_i32(loc_8, loc_2)
															if loc_2 <= loc_6 then
																desired = 10
																break
															end
															desired = 4
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													break
												end
												if rt_load_i32_u8(memory_at_0, loc_11 + 5) ~= 1 then
													desired = 4
													break
												end
												loc_3 = rt_load_i32_u8(memory_at_0, loc_11 + 4)
												desired = 3
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										rt_store_i32(memory_at_0, loc_4 + 52, 0)
										rt_store_i64(memory_at_0, loc_4 + 44, rt_i64_ZERO)
										if loc_7 == 0 then
											desired = 7
											break
										end
										if loc_7 >= 119304648 then
											desired = 6
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_3 = rt_mul_i32(loc_7, 36)
									reg_1 = FUNC_LIST[646](loc_3)
									loc_2 = reg_1
									rt_store_i32(memory_at_0, loc_4 + 44, loc_2)
									loc_8 = rt_add_i32(loc_2, loc_3)
									rt_store_i32(memory_at_0, loc_4 + 52, loc_8)
									loc_9 = rt_sub_i32(loc_3, 36)
									loc_5 = bit_and(rt_add_i32(rt_div_u32(loc_9, 36), 1), 7)
									if loc_5 ~= 0 then
										while true do
											loc_3 = 0
											while true do
												loc_6 = rt_add_i32(loc_2, 32)
												rt_store_i32(memory_at_0, loc_6, 0)
												rt_store_i64(memory_at_0, loc_2, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 8, rt_i64_ZERO)
												rt_store_i32_n16(memory_at_0, loc_2 + 32, 65535)
												loc_2 = rt_add_i32(loc_2, 36)
												loc_3 = rt_add_i32(loc_3, 1)
												if loc_5 ~= loc_3 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_9 >= 252 then
										while true do
											while true do
												loc_3 = rt_add_i32(loc_2, 32)
												rt_store_i32(memory_at_0, loc_3, 0)
												loc_6 = rt_add_i32(loc_2, 68)
												rt_store_i32(memory_at_0, loc_6, 0)
												loc_5 = rt_add_i32(loc_2, 104)
												rt_store_i32(memory_at_0, loc_5, 0)
												rt_store_i64(memory_at_0, loc_2, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 36, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 72, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 8, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 44, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 52, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 60, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 80, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 88, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 96, rt_i64_ZERO)
												rt_store_i32_n16(memory_at_0, loc_2 + 32, 65535)
												rt_store_i32_n16(memory_at_0, loc_2 + 68, 65535)
												rt_store_i32_n16(memory_at_0, loc_2 + 104, 65535)
												loc_3 = rt_add_i32(loc_2, 140)
												rt_store_i32(memory_at_0, loc_3, 0)
												rt_store_i64(memory_at_0, loc_2 + 132, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 124, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 116, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 108, rt_i64_ZERO)
												rt_store_i32_n16(memory_at_0, loc_2 + 140, 65535)
												loc_3 = rt_add_i32(loc_2, 176)
												rt_store_i32(memory_at_0, loc_3, 0)
												rt_store_i64(memory_at_0, loc_2 + 168, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 160, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 152, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 144, rt_i64_ZERO)
												rt_store_i32_n16(memory_at_0, loc_2 + 176, 65535)
												loc_3 = rt_add_i32(loc_2, 212)
												rt_store_i32(memory_at_0, loc_3, 0)
												rt_store_i64(memory_at_0, loc_2 + 204, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 196, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 188, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 180, rt_i64_ZERO)
												rt_store_i32_n16(memory_at_0, loc_2 + 212, 65535)
												loc_3 = rt_add_i32(loc_2, 248)
												rt_store_i32(memory_at_0, loc_3, 0)
												rt_store_i64(memory_at_0, loc_2 + 240, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 232, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 224, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 216, rt_i64_ZERO)
												rt_store_i32_n16(memory_at_0, loc_2 + 248, 65535)
												loc_3 = rt_add_i32(loc_2, 284)
												rt_store_i32(memory_at_0, loc_3, 0)
												rt_store_i64(memory_at_0, loc_2 + 276, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 268, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 260, rt_i64_ZERO)
												rt_store_i64(memory_at_0, loc_2 + 252, rt_i64_ZERO)
												rt_store_i32_n16(memory_at_0, loc_2 + 284, 65535)
												loc_2 = rt_add_i32(loc_2, 288)
												if loc_8 ~= loc_2 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									rt_store_i32(memory_at_0, loc_4 + 48, loc_8)
									if loc_7 == 0 then
										break
									end
									loc_2 = 0
									while true do
										FUNC_LIST[236](rt_add_i32(loc_4, 56), loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_2, 2))), rt_add_i32(loc_4, 88))
										loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_4 + 44), rt_mul_i32(loc_2, 36))
										rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4 + 56))
										rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_4 + 80))
										rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_4 + 72))
										rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, rt_sub_i32(loc_4, 4294967232)))
										loc_2 = rt_add_i32(loc_2, 1)
										if loc_2 < rt_load_i32(memory_at_0, loc_1 + 32) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[237](loc_0, loc_1, rt_add_i32(loc_4, 44), rt_add_i32(loc_1, 36))
								loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
								if loc_2 == 0 then
									while true do
										loc_2 = 0
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								while true do
									loc_5 = loc_10
									loc_3 = rt_load_i32(memory_at_0, loc_1 + 40)
									if loc_5 >= loc_3 then
										desired = 5
										break
									end
									loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_5, 2)))
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															loc_10 = rt_add_i32(loc_5, 1)
															if loc_3 ~= loc_10 then
																break
															end
															if loc_2 <= loc_3 then
																break
															end
															loc_8 = rt_load_i32(memory_at_0, loc_0 + 624)
															loc_3 = bit_and(rt_add_i32(rt_sub_i32(loc_2, loc_3), 1), 255)
															loc_2 = rt_add_i32(loc_8, loc_3)
															if loc_2 >= 256 then
																desired = 12
																break
															end
															rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
															loc_7 = rt_load_i32(memory_at_0, loc_0 + 628)
															rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_7 then loc_7 else loc_2))
															FUNC_LIST[238](loc_0, loc_6, bit_and(loc_8, 255), loc_3, 1)
															loc_9 = rt_load_i32(memory_at_0, loc_1 + 32)
															if loc_9 <= loc_5 then
																desired = 9
																break
															end
															loc_3 = 0
															loc_7 = rt_load_i32(memory_at_0, loc_4 + 44)
															loc_2 = loc_5
															loc_6 = bit_and(rt_sub_i32(loc_9, loc_2), 3)
															if loc_6 ~= 0 then
																while true do
																	while true do
																		rt_store_i32_n8(memory_at_0, rt_add_i32(rt_mul_i32(loc_2, 36), loc_7) + 33, rt_add_i32(loc_8, rt_sub_i32(loc_2, loc_5)))
																		loc_2 = rt_add_i32(loc_2, 1)
																		loc_3 = rt_add_i32(loc_3, 1)
																		if loc_6 ~= loc_3 then
																			continue
																		end
																		break
																	end
																	if desired then
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															if rt_sub_i32(loc_5, loc_9) > 4294967292 then
																desired = 9
																break
															end
															while true do
																loc_3 = rt_add_i32(rt_mul_i32(loc_2, 36), loc_7)
																loc_6 = rt_add_i32(loc_8, rt_sub_i32(loc_2, loc_5))
																rt_store_i32_n8(memory_at_0, loc_3 + 33, loc_6)
																rt_store_i32_n8(memory_at_0, loc_3 + 69, rt_add_i32(loc_6, 1))
																rt_store_i32_n8(memory_at_0, loc_3 + 105, rt_add_i32(loc_6, 2))
																rt_store_i32_n8(memory_at_0, loc_3 + 141, rt_add_i32(loc_6, 3))
																loc_2 = rt_add_i32(loc_2, 4)
																if loc_9 ~= loc_2 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															desired = 9
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_9 = rt_add_i32(rt_load_i32(memory_at_0, loc_4 + 44), rt_mul_i32(loc_5, 36))
														if rt_load_i32(memory_at_0, loc_9) == 0 then
															while true do
																loc_2 = rt_load_i32_u8(memory_at_0, loc_9 + 32)
																loc_2 = (if loc_2 == 255 then rt_load_i32_u8(memory_at_0, loc_9 + 4) else loc_2)
																rt_store_i32_n8(memory_at_0, loc_9 + 33, loc_2)
																FUNC_LIST[229](loc_0, loc_6, bit_and(loc_2, 255), 0)
																desired = 9
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_2 = rt_load_i32(memory_at_0, loc_6 + 4)
														loc_8 = rt_load_i32(memory_at_0, 48612)
														while true do
															if loc_6 ~= 0 then
																while true do
																	loc_3 = loc_6
																	if loc_2 == loc_8 then
																		desired = 13
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_7 = rt_load_i32(memory_at_0, 48692)
															loc_5 = rt_load_i32(memory_at_0, 48572)
															loc_3 = loc_6
															while true do
																if bit_and((if loc_2 ~= loc_5 then 1 else 0), (if loc_2 ~= loc_7 then 1 else 0)) ~= 0 then
																	desired = 11
																	break
																end
																loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
																loc_2 = rt_load_i32(memory_at_0, loc_3 + 4)
																if loc_3 == 0 then
																	continue
																end
																if loc_2 ~= loc_8 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
															desired = 11
															break
														end
														loc_7 = rt_load_i32(memory_at_0, loc_3 + 24)
														loc_11 = rt_load_i32(memory_at_0, loc_0 + 72)
														if loc_7 == loc_11 then
															desired = 11
															break
														end
														loc_3 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
														loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
														loc_13 = rt_load_i32(memory_at_0, loc_0 + 60)
														loc_2 = 0
														while true do
															loc_8 = bit_and(loc_3, loc_5)
															loc_12 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_13)
															loc_3 = rt_load_i32(memory_at_0, loc_12)
															if loc_3 ~= loc_7 then
																while true do
																	if loc_3 == loc_11 then
																		desired = 11
																		break
																	end
																	loc_2 = rt_add_i32(loc_2, 1)
																	loc_3 = rt_add_i32(loc_8, loc_2)
																	if loc_2 <= loc_5 then
																		desired = 13
																		break
																	end
																	desired = 11
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if rt_load_i32_u8(memory_at_0, loc_12 + 5) ~= 1 then
															desired = 11
															break
														end
														loc_3 = rt_load_i32_u8(memory_at_0, loc_12 + 4)
														desired = 10
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													rt_store_i32(memory_at_0, loc_4 + 20, 255)
													rt_store_i32(memory_at_0, loc_4 + 16, loc_3)
													FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_4, 16))
													error("out of code bounds")
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
												loc_2 = rt_add_i32(loc_3, 1)
												if loc_2 >= 256 then
													desired = 8
													break
												end
												rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
												loc_5 = rt_load_i32(memory_at_0, loc_0 + 628)
												rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_5 then loc_5 else loc_2))
												FUNC_LIST[229](loc_0, loc_6, bit_and(loc_3, 255), 1)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											rt_store_i32_n8(memory_at_0, loc_9 + 33, loc_3)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
										if loc_2 > loc_10 then
											desired = 7
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i64(memory_at_0, loc_4 + 32, rt_i64_from_u32(1, 255))
								FUNC_LIST[173](rt_add_i32(loc_6, 8), 5876, rt_add_i32(loc_4, 32))
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[44](rt_add_i32(loc_4, 44))
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 < rt_load_i32(memory_at_0, loc_1 + 40) then
							while true do
								while true do
									FUNC_LIST[212](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(loc_2, 2))))
									loc_2 = rt_add_i32(loc_2, 1)
									if loc_2 < rt_load_i32(memory_at_0, loc_1 + 40) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_4 + 44)
							loc_3 = rt_load_i32(memory_at_0, loc_4 + 48)
							if loc_2 == loc_3 then
								break
							end
							while true do
								if rt_load_i32(memory_at_0, loc_2) ~= 0 then
									while true do
										if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
											while true do
												FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 16), 1))
												break
											end
											if desired then
												break
											end
										end
										FUNC_LIST[239](loc_0, loc_2, rt_load_i32_u8(memory_at_0, loc_2 + 33), 1)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_2 = rt_add_i32(loc_2, 36)
								if loc_3 ~= loc_2 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_4 + 44)
							loc_3 = rt_load_i32(memory_at_0, loc_4 + 48)
							if loc_2 == loc_3 then
								break
							end
							while true do
								while true do
									if rt_load_i32(memory_at_0, loc_2) ~= 0 then
										break
									end
									loc_6 = rt_load_i32_u8(memory_at_0, loc_2 + 33)
									loc_5 = rt_load_i32_u8(memory_at_0, loc_2 + 4)
									if loc_6 == loc_5 then
										break
									end
									FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, loc_5, loc_6, 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_2 = rt_add_i32(loc_2, 36)
								if loc_3 ~= loc_2 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_4 + 44)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_4 + 48, loc_2)
						FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 52), loc_2))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
					loc_2 = rt_add_i32(loc_3, 1)
					if loc_2 >= 256 then
						desired = 2
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 628)
					rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_6 then loc_6 else loc_2))
					FUNC_LIST[229](loc_0, loc_5, bit_and(loc_3, 255), 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
					while true do
						FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28)) + 8), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[239](loc_0, rt_add_i32(loc_4, 56), bit_and(loc_3, 255), 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_4, rt_i64_from_u32(1, 255))
			FUNC_LIST[173](rt_add_i32(loc_5, 8), 5876, loc_4)
			error("out of code bounds")
		end
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 88) + 624, rt_load_i32(memory_at_0, loc_4 + 92))
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 96)
		break
	end
end
FUNC_LIST[217] = --[[ Luau::Compiler::compileStatCompoundAssign(Luau::AstStatCompoundAssign*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 88, loc_0)
		rt_store_i32(memory_at_0, loc_4 + 92, rt_load_i32(memory_at_0, loc_0 + 624))
		FUNC_LIST[236](rt_add_i32(loc_4, 56), loc_0, rt_load_i32(memory_at_0, loc_1 + 32), rt_add_i32(loc_4, 88))
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_4 + 56)
											if loc_3 == 0 then
												while true do
													loc_9 = rt_load_i32_u8(memory_at_0, loc_4 + 60)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_9 = rt_load_i32(memory_at_0, loc_0 + 624)
											loc_2 = rt_add_i32(loc_9, 1)
											if loc_2 >= 256 then
												desired = 8
												break
											end
											rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
											loc_5 = rt_load_i32(memory_at_0, loc_0 + 628)
											rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_5 then loc_5 else loc_2))
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
											if loc_2 >= 7 then
												while true do
													if loc_2 == 7 then
														desired = 9
														break
													end
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											if loc_3 ~= 0 then
												while true do
													FUNC_LIST[239](loc_0, rt_add_i32(loc_4, 56), bit_and(loc_9, 255), 0)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_5 = rt_load_i32(memory_at_0, loc_1 + 36)
											while true do
												while true do
													while true do
														if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
															break
														end
														loc_8 = rt_load_i32(memory_at_0, loc_0 + 132)
														if loc_8 == loc_5 then
															break
														end
														loc_3 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
														loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
														loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
														loc_2 = 0
														while true do
															loc_7 = bit_and(loc_3, loc_6)
															loc_10 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_11)
															loc_3 = rt_load_i32(memory_at_0, loc_10)
															if loc_3 ~= loc_5 then
																while true do
																	if loc_3 == loc_8 then
																		desired = 12
																		break
																	end
																	loc_2 = rt_add_i32(loc_2, 1)
																	loc_3 = rt_add_i32(loc_7, loc_2)
																	if loc_2 <= loc_6 then
																		desired = 13
																		break
																	end
																	desired = 12
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if rt_load_i32(memory_at_0, loc_10 + 8) ~= 3 then
															break
														end
														reg_0 = FUNC_LIST[78](rt_load_i32(memory_at_0, loc_0), rt_load_f64(memory_at_0, loc_10 + 16))
														loc_2 = reg_0
														if rt_lt_i32(loc_2, 0) then
															desired = 7
															break
														end
														if loc_2 < 256 then
															desired = 11
															break
														end
														loc_5 = rt_load_i32(memory_at_0, loc_1 + 36)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
													loc_7 = rt_load_i32(memory_at_0, 48612)
													while true do
														if loc_5 ~= 0 then
															while true do
																loc_3 = loc_5
																if loc_2 == loc_7 then
																	desired = 12
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_8 = rt_load_i32(memory_at_0, 48692)
														loc_6 = rt_load_i32(memory_at_0, 48572)
														loc_3 = loc_5
														while true do
															if bit_and((if loc_2 ~= loc_6 then 1 else 0), (if loc_2 ~= loc_8 then 1 else 0)) ~= 0 then
																desired = 4
																break
															end
															loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
															loc_2 = rt_load_i32(memory_at_0, loc_3 + 4)
															if loc_3 == 0 then
																continue
															end
															if loc_2 ~= loc_7 then
																continue
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
														desired = 4
														break
													end
													loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
													loc_11 = rt_load_i32(memory_at_0, loc_0 + 72)
													if loc_8 == loc_11 then
														desired = 4
														break
													end
													loc_3 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
													loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
													loc_10 = rt_load_i32(memory_at_0, loc_0 + 60)
													loc_2 = 0
													while true do
														loc_7 = bit_and(loc_3, loc_6)
														loc_12 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_10)
														loc_3 = rt_load_i32(memory_at_0, loc_12)
														if loc_8 == loc_3 then
															desired = 10
															break
														end
														if loc_3 == loc_11 then
															desired = 4
															break
														end
														loc_2 = rt_add_i32(loc_2, 1)
														loc_3 = rt_add_i32(loc_7, loc_2)
														if loc_2 <= loc_6 then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													desired = 4
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = 0
												loc_5 = rt_load_i32(memory_at_0, loc_0)
												loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
												reg_0 = loc_5
												if loc_6 <= 6 then
													while true do
														reg_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 2), 13104))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_1 = loc_3
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_3 = reg_1
												loc_6 = bit_and(loc_9, 255)
												FUNC_LIST[90](reg_0, loc_3, loc_6, loc_6, bit_and(loc_2, 255))
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_load_i32_u8(memory_at_0, loc_12 + 5) ~= 1 then
												desired = 4
												break
											end
											loc_3 = rt_load_i32_u8(memory_at_0, loc_12 + 4)
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = rt_load_i32(memory_at_0, loc_1 + 36)
										reg_1 = FUNC_LIST[646](4)
										loc_2 = reg_1
										rt_store_i32(memory_at_0, loc_4 + 44, loc_2)
										loc_5 = rt_add_i32(loc_2, 4)
										rt_store_i32(memory_at_0, loc_4 + 52, loc_5)
										rt_store_i32(memory_at_0, loc_2, loc_3)
										rt_store_i32(memory_at_0, loc_4 + 48, loc_5)
										FUNC_LIST[240](rt_add_i32(loc_4, 44))
										loc_3 = rt_add_i32(rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 48), rt_load_i32(memory_at_0, loc_4 + 44)), 2), 1)
										loc_7 = rt_load_i32(memory_at_0, loc_0 + 624)
										loc_2 = rt_add_i32(loc_3, loc_7)
										if loc_2 >= 256 then
											desired = 6
											break
										end
										rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
										loc_3 = rt_load_i32(memory_at_0, loc_0 + 628)
										rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_3 then loc_3 else loc_2))
										loc_2 = 0
										loc_1 = bit_and(loc_7, 255)
										FUNC_LIST[239](loc_0, rt_add_i32(loc_4, 56), loc_1, 0)
										loc_5 = rt_load_i32(memory_at_0, loc_4 + 48)
										loc_3 = rt_load_i32(memory_at_0, loc_4 + 44)
										if loc_5 == loc_3 then
											while true do
												loc_5 = rt_shr_i32(rt_sub_i32(loc_5, loc_3), 2)
												desired = 5
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_6 = rt_add_i32(loc_7, 1)
										while true do
											FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), loc_3)), bit_and(rt_add_i32(loc_2, loc_6), 255), 1)
											loc_2 = rt_add_i32(loc_2, 1)
											loc_3 = rt_load_i32(memory_at_0, loc_4 + 44)
											loc_5 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 48), loc_3), 2)
											if loc_2 < loc_5 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i64(memory_at_0, loc_4 + 32, rt_i64_from_u32(1, 255))
									FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_4, 32))
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[173](rt_add_i32(loc_5, 8), 4468, 0)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_4 + 20, 255)
							rt_store_i32(memory_at_0, loc_4 + 16, loc_3)
							FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_4, 16))
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 49, bit_and(loc_9, 255), loc_1, bit_and(rt_add_i32(loc_5, loc_7), 255))
						loc_2 = rt_load_i32(memory_at_0, loc_4 + 44)
						if loc_2 == 0 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_4 + 48, loc_2)
						FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 52), loc_2))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
					loc_2 = rt_add_i32(loc_3, 1)
					if loc_2 >= 256 then
						desired = 2
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 628)
					rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_6 then loc_6 else loc_2))
					FUNC_LIST[229](loc_0, loc_5, bit_and(loc_3, 255), 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				loc_5 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
				reg_0 = loc_5
				if loc_6 <= 6 then
					while true do
						reg_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 2), 13132))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_1
				loc_6 = bit_and(loc_9, 255)
				loc_12 = bit_and(loc_3, 255)
				FUNC_LIST[90](reg_0, loc_2, loc_6, loc_6, loc_12)
				while true do
					if rt_load_i32(memory_at_0, loc_4 + 56) == 0 then
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 268) == 0 then
						break
					end
					loc_7 = rt_load_i32(memory_at_0, loc_1 + 32)
					loc_8 = rt_load_i32(memory_at_0, loc_0 + 272)
					if loc_7 == loc_8 then
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 264), 1)
					loc_11 = rt_load_i32(memory_at_0, loc_0 + 260)
					loc_2 = 0
					while true do
						loc_6 = bit_and(loc_3, loc_5)
						loc_10 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_11)
						loc_3 = rt_load_i32(memory_at_0, loc_10)
						if loc_3 ~= loc_7 then
							while true do
								if loc_3 == loc_8 then
									desired = 3
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_6, loc_2)
								if loc_2 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_10 + 4)
					if loc_2 == 2 then
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_0)
					reg_3 = FUNC_LIST[93](loc_3)
					reg_4 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
					FUNC_LIST[97](loc_3, loc_2, bit_and(loc_9, 255), rt_sub_i32(reg_3, 1), reg_4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[234](loc_0, rt_load_i32(memory_at_0, loc_1 + 36), loc_12, 2, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_4, rt_i64_from_u32(1, 255))
			FUNC_LIST[173](rt_add_i32(loc_5, 8), 5876, loc_4)
			error("out of code bounds")
		end
		if rt_load_i32(memory_at_0, loc_4 + 56) ~= 0 then
			while true do
				FUNC_LIST[239](loc_0, rt_add_i32(loc_4, 56), bit_and(loc_9, 255), 1)
				break
			end
		end
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 88) + 624, rt_load_i32(memory_at_0, loc_4 + 92))
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 96)
		break
	end
end
FUNC_LIST[218] = --[[ Luau::Compiler::compileStatFunction(Luau::AstStatFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					loc_7 = rt_load_i32(memory_at_0, 48612)
					if (if loc_7 == loc_3 then loc_2 else 0) == 0 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, 48692)
							loc_5 = rt_load_i32(memory_at_0, 48572)
							while true do
								if bit_and((if loc_3 ~= loc_5 then 1 else 0), (if loc_3 ~= loc_6 then 1 else 0)) ~= 0 then
									desired = 3
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_2 + 24)
								loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
								if loc_2 == 0 then
									continue
								end
								if loc_3 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_2 + 24)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 72)
					if loc_6 == loc_9 then
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 60)
					loc_2 = 0
					while true do
						loc_7 = bit_and(loc_3, loc_5)
						loc_8 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_10)
						loc_3 = rt_load_i32(memory_at_0, loc_8)
						if loc_3 ~= loc_6 then
							while true do
								if loc_3 == loc_9 then
									desired = 3
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_7, loc_2)
								if loc_2 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_8 + 5) ~= 1 then
						break
					end
					FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), rt_load_i32_u8(memory_at_0, loc_8 + 4), 0)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_4 + 40, loc_0)
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
				rt_store_i32(memory_at_0, loc_4 + 44, loc_3)
				loc_2 = rt_add_i32(loc_3, 1)
				if loc_2 >= 256 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 628)
				rt_store_i32(memory_at_0, loc_0 + 628, (if loc_2 < loc_5 then loc_5 else loc_2))
				loc_2 = bit_and(loc_3, 255)
				FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), loc_2, 1)
				FUNC_LIST[236](rt_add_i32(loc_4, 8), loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_4, 40))
				FUNC_LIST[239](loc_0, rt_add_i32(loc_4, 8), loc_2, 1)
				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 40) + 624, rt_load_i32(memory_at_0, loc_4 + 44))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_4, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_4, rt_i64_from_u32(1, 255))
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[219] = --[[ Luau::Compiler::compileExprFunction(Luau::AstExprFunction*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_11 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_11
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
				break
			end
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 52)
			if loc_7 == loc_1 then
				break
			end
			loc_4 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), 1)
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 40)
			while true do
				loc_8 = bit_and(loc_4, loc_6)
				loc_5 = rt_add_i32(rt_mul_i32(loc_8, 40), loc_9)
				loc_4 = rt_load_i32(memory_at_0, loc_5)
				if loc_1 == loc_4 then
					desired = 1
					break
				end
				loc_5 = 0
				if loc_4 == loc_7 then
					desired = 1
					break
				end
				loc_3 = rt_add_i32(loc_3, 1)
				loc_4 = rt_add_i32(loc_8, loc_3)
				if loc_3 <= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_16 = rt_load_i32(memory_at_0, loc_0 + 624)
		loc_12 = (if loc_5 ~= 0 then rt_add_i32(loc_5, 8) else 0)
		reg_0 = FUNC_LIST[87](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_12))
		loc_17 = reg_0
		if rt_ge_i32(loc_17, 0) then
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 700)
				rt_store_i32(memory_at_0, loc_0 + 704, loc_3)
				loc_13 = rt_add_i32(loc_0, 700)
				while true do
					while true do
						while true do
							loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_12 + 8), rt_load_i32(memory_at_0, loc_12 + 4))
							loc_5 = rt_shr_i32(loc_4, 2)
							loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 708), loc_3)
							if loc_5 <= rt_shr_i32(loc_6, 3) then
								break
							end
							if loc_5 >= 536870912 then
								desired = 3
								break
							end
							reg_1 = FUNC_LIST[646](rt_shl_i32(loc_4, 1))
							loc_4 = reg_1
							rt_store_i32(memory_at_0, loc_0 + 704, loc_4)
							rt_store_i32(memory_at_0, loc_0 + 700, loc_4)
							rt_store_i32(memory_at_0, loc_0 + 708, rt_add_i32(rt_shl_i32(loc_5, 3), loc_4))
							if loc_3 == 0 then
								break
							end
							FUNC_LIST[653](loc_3, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_15 = rt_load_i32(memory_at_0, loc_12 + 4)
						loc_18 = rt_load_i32(memory_at_0, loc_12 + 8)
						if loc_15 ~= loc_18 then
							while true do
								while true do
									loc_3 = rt_load_i32(memory_at_0, loc_15)
									while true do
										while true do
											if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
												break
											end
											loc_7 = rt_load_i32(memory_at_0, loc_0 + 72)
											if loc_7 == loc_3 then
												break
											end
											loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
											loc_9 = rt_load_i32(memory_at_0, loc_0 + 60)
											loc_5 = 0
											loc_14 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
											loc_6 = loc_14
											while true do
												loc_8 = bit_and(loc_4, loc_6)
												loc_10 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_9)
												loc_6 = rt_load_i32(memory_at_0, loc_10)
												if loc_6 ~= loc_3 then
													while true do
														if loc_6 == loc_7 then
															desired = 7
															break
														end
														loc_5 = rt_add_i32(loc_5, 1)
														loc_6 = rt_add_i32(loc_8, loc_5)
														if loc_4 >= loc_5 then
															desired = 8
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											if rt_load_i32_u8(memory_at_0, loc_10 + 5) ~= 1 then
												break
											end
											loc_19 = rt_i64_ZERO
											while true do
												if rt_load_i32(memory_at_0, loc_0 + 108) == 0 then
													break
												end
												loc_7 = rt_load_i32(memory_at_0, loc_0 + 112)
												if loc_7 == loc_3 then
													break
												end
												loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
												loc_9 = rt_load_i32(memory_at_0, loc_0 + 100)
												loc_5 = 0
												while true do
													loc_8 = bit_and(loc_4, loc_14)
													loc_14 = rt_add_i32(rt_mul_i32(loc_8, 12), loc_9)
													loc_6 = rt_load_i32(memory_at_0, loc_14)
													if loc_6 ~= loc_3 then
														while true do
															if loc_6 == loc_7 then
																desired = 8
																break
															end
															loc_5 = rt_add_i32(loc_5, 1)
															loc_14 = rt_add_i32(loc_8, loc_5)
															if loc_4 >= loc_5 then
																desired = 9
																break
															end
															desired = 8
															break
														end
														if desired then
															if desired == 9 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
												loc_19 = rt_load_i64_u8(memory_at_0, loc_14 + 8)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											loc_20 = rt_load_i64_u8(memory_at_0, loc_10 + 4)
											loc_3 = rt_load_i32(memory_at_0, loc_0 + 704)
											loc_8 = rt_load_i32(memory_at_0, loc_0 + 708)
											if loc_3 < loc_8 then
												while true do
													rt_store_i64(memory_at_0, loc_3, rt_bit_or_i64(rt_shl_i64(loc_20, rt_i64_from_u32(32, 0)), loc_19))
													loc_6 = rt_add_i32(loc_3, 8)
													desired = 6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											loc_4 = rt_load_i32(memory_at_0, loc_13)
											loc_9 = rt_shr_i32(rt_sub_i32(loc_3, loc_4), 3)
											loc_5 = rt_add_i32(loc_9,1)
											if loc_5 >= 536870912 then
												desired = 3
												break
											end
											loc_6 = rt_sub_i32(loc_8, loc_4)
											loc_7 = rt_shr_i32(loc_6, 2)
											loc_6 = (if loc_6 >= 2147483640 then 536870911 else (if loc_5 < loc_7 then loc_7 else loc_5))
											if loc_6 ~= 0 then
												while true do
													if loc_6 >= 536870912 then
														desired = 2
														break
													end
													reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 3))
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											else
												while true do
													reg_0 = 0
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											loc_7 = reg_0
											loc_5 = rt_add_i32(loc_7, rt_shl_i32(loc_9, 3))
											rt_store_i64(memory_at_0, loc_5, rt_bit_or_i64(rt_shl_i64(loc_20, rt_i64_from_u32(32, 0)), loc_19))
											loc_7 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_7)
											loc_6 = rt_add_i32(loc_5, 8)
											if loc_3 ~= loc_4 then
												while true do
													while true do
														loc_5 = rt_sub_i32(loc_5, 8)
														loc_3 = rt_sub_i32(loc_3, 8)
														rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
														if loc_3 ~= loc_4 then
															continue
														end
														break
													end
													if desired then
														break
													end
													loc_8 = rt_load_i32(memory_at_0, loc_0 + 708)
													reg_0 = rt_load_i32(memory_at_0, loc_0 + 700)
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											else
												while true do
													reg_0 = loc_4
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											loc_4 = reg_0
											rt_store_i32(memory_at_0, loc_0 + 708, loc_7)
											rt_store_i32(memory_at_0, loc_0 + 704, loc_6)
											rt_store_i32(memory_at_0, loc_0 + 700, loc_5)
											if loc_4 == 0 then
												desired = 6
												break
											end
											FUNC_LIST[653](loc_4, rt_sub_i32(loc_8, loc_4))
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										while true do
											if rt_load_i32(memory_at_0, loc_0 + 148) == 0 then
												break
											end
											loc_7 = rt_load_i32(memory_at_0, loc_0 + 152)
											if loc_7 == loc_3 then
												break
											end
											loc_4 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
											loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 144), 1)
											loc_9 = rt_load_i32(memory_at_0, loc_0 + 140)
											loc_5 = 0
											while true do
												loc_8 = bit_and(loc_4, loc_6)
												loc_10 = rt_add_i32(rt_shl_i32(loc_8, 5), loc_9)
												loc_4 = rt_load_i32(memory_at_0, loc_10)
												if loc_4 ~= loc_3 then
													while true do
														if loc_4 == loc_7 then
															desired = 7
															break
														end
														loc_5 = rt_add_i32(loc_5, 1)
														loc_4 = rt_add_i32(loc_8, loc_5)
														if loc_5 <= loc_6 then
															desired = 8
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											if rt_load_i32(memory_at_0, loc_10 + 8) == 0 then
												break
											end
											loc_5 = rt_load_i32(memory_at_0, loc_0 + 624)
											loc_3 = rt_add_i32(loc_5, 1)
											if loc_3 < 256 then
												while true do
													rt_store_i32(memory_at_0, loc_0 + 624, loc_3)
													loc_4 = rt_load_i32(memory_at_0, loc_0 + 628)
													rt_store_i32(memory_at_0, loc_0 + 628, (if loc_3 < loc_4 then loc_4 else loc_3))
													loc_6 = bit_and(loc_5, 255)
													FUNC_LIST[241](loc_0, loc_1, rt_add_i32(loc_10, 8), loc_6)
													loc_3 = rt_load_i32(memory_at_0, loc_0 + 704)
													loc_8 = rt_load_i32(memory_at_0, loc_0 + 708)
													if loc_3 < loc_8 then
														while true do
															rt_store_i64(memory_at_0, loc_3, rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(32, 0)))
															loc_6 = rt_add_i32(loc_3, 8)
															desired = 6
															break
														end
														if desired then
															break
														end
													end
													loc_4 = rt_load_i32(memory_at_0, loc_13)
													loc_10 = rt_shr_i32(rt_sub_i32(loc_3, loc_4), 3)
													loc_5 = rt_add_i32(loc_10, 1)
													if loc_5 >= 536870912 then
														desired = 3
														break
													end
													loc_7 = rt_sub_i32(loc_8, loc_4)
													loc_9 = rt_shr_i32(loc_7, 2)
													loc_7 = (if loc_7 >= 2147483640 then 536870911 else (if loc_5 < loc_9 then loc_9 else loc_5))
													if loc_7 ~= 0 then
														while true do
															if loc_7 >= 536870912 then
																desired = 2
																break
															end
															reg_0 = FUNC_LIST[646](rt_shl_i32(loc_7, 3))
															break
														end
														if desired then
															break
														end
													else
														while true do
															reg_0 = 0
															break
														end
														if desired then
															break
														end
													end
													loc_9 = reg_0
													loc_5 = rt_add_i32(loc_9, rt_shl_i32(loc_10, 3))
													rt_store_i64(memory_at_0, loc_5, rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(32, 0)))
													loc_7 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_9)
													loc_6 = rt_add_i32(loc_5, 8)
													if loc_3 ~= loc_4 then
														while true do
															while true do
																loc_5 = rt_sub_i32(loc_5, 8)
																loc_3 = rt_sub_i32(loc_3, 8)
																rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
																if loc_3 ~= loc_4 then
																	continue
																end
																break
															end
															if desired then
																break
															end
															loc_8 = rt_load_i32(memory_at_0, loc_0 + 708)
															reg_0 = rt_load_i32(memory_at_0, loc_0 + 700)
															break
														end
														if desired then
															break
														end
													else
														while true do
															reg_0 = loc_4
															break
														end
														if desired then
															break
														end
													end
													loc_4 = reg_0
													rt_store_i32(memory_at_0, loc_0 + 708, loc_7)
													rt_store_i32(memory_at_0, loc_0 + 704, loc_6)
													rt_store_i32(memory_at_0, loc_0 + 700, loc_5)
													if loc_4 == 0 then
														desired = 6
														break
													end
													FUNC_LIST[653](loc_4, rt_sub_i32(loc_8, loc_4))
													desired = 6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											rt_store_i64(memory_at_0, loc_11 + 16, rt_i64_from_u32(1, 255))
											FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_11, 16))
											error("out of code bounds")
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[184](loc_0, loc_3)
										loc_6 = reg_0
										loc_3 = rt_load_i32(memory_at_0, loc_0 + 704)
										loc_8 = rt_load_i32(memory_at_0, loc_0 + 708)
										if loc_3 < loc_8 then
											while true do
												rt_store_i64(memory_at_0, loc_3, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(32, 0)), rt_i64_from_u32(2, 0)))
												loc_6 = rt_add_i32(loc_3, 8)
												desired = 6
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										end
										loc_4 = rt_load_i32(memory_at_0, loc_13)
										loc_10 = rt_shr_i32(rt_sub_i32(loc_3, loc_4), 3)
										loc_5 = rt_add_i32(loc_10, 1)
										if loc_5 >= 536870912 then
											desired = 3
											break
										end
										loc_7 = rt_sub_i32(loc_8, loc_4)
										loc_9 = rt_shr_i32(loc_7, 2)
										loc_7 = (if loc_7 >= 2147483640 then 536870911 else (if loc_5 < loc_9 then loc_9 else loc_5))
										if loc_7 ~= 0 then
											while true do
												if loc_7 >= 536870912 then
													desired = 2
													break
												end
												reg_0 = FUNC_LIST[646](rt_shl_i32(loc_7, 3))
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = 0
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										end
										loc_9 = reg_0
										loc_5 = rt_add_i32(loc_9, rt_shl_i32(loc_10, 3))
										rt_store_i64(memory_at_0, loc_5, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(32, 0)), rt_i64_from_u32(2, 0)))
										loc_7 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_9)
										loc_6 = rt_add_i32(loc_5, 8)
										if loc_3 ~= loc_4 then
											while true do
												while true do
													loc_5 = rt_sub_i32(loc_5, 8)
													loc_3 = rt_sub_i32(loc_3, 8)
													rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
													if loc_3 ~= loc_4 then
														continue
													end
													break
												end
												if desired then
													break
												end
												loc_8 = rt_load_i32(memory_at_0, loc_0 + 708)
												reg_0 = rt_load_i32(memory_at_0, loc_0 + 700)
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = loc_4
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
												end
												break
											end
										end
										loc_4 = reg_0
										rt_store_i32(memory_at_0, loc_0 + 708, loc_7)
										rt_store_i32(memory_at_0, loc_0 + 704, loc_6)
										rt_store_i32(memory_at_0, loc_0 + 700, loc_5)
										if loc_4 == 0 then
											break
										end
										FUNC_LIST[653](loc_4, rt_sub_i32(loc_8, loc_4))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
									rt_store_i32(memory_at_0, loc_0 + 704, loc_6)
									loc_15 = rt_add_i32(loc_15, 4)
									if loc_18 ~= loc_15 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							while true do
								if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 4), 0) then
									break
								end
								reg_0 = FUNC_LIST[242](loc_0, loc_1)
								if reg_0 == 0 then
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_0 + 638) ~= 0 then
									break
								end
								reg_0 = FUNC_LIST[86](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_12))
								loc_3 = reg_0
								if loc_3 > 32767 then
									break
								end
								FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 64, loc_2, rt_extend_i32_n16(loc_3))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_0)
							rt_store_i32(memory_at_0, loc_11, rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 704), rt_load_i32(memory_at_0, loc_0 + 700)), 3))
							FUNC_LIST[107](loc_3, 2245, loc_11)
							FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 19, loc_2, loc_17)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 700)
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 704)
						if loc_3 ~= loc_5 then
							while true do
								while true do
									FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 70, rt_load_i32_u8(memory_at_0, loc_3), rt_load_i32_u8(memory_at_0, loc_3 + 4), 0)
									loc_3 = rt_add_i32(loc_3, 8)
									if loc_5 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_0 + 624, loc_16)
						GLOBAL_LIST[0].value = rt_add_i32(loc_11, 32)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					FUNC_LIST[44](loc_13)
					error("out of code bounds")
				end
				if desired then
					break
				end
				FUNC_LIST[197]()
				error("out of code bounds")
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4522, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[220] = --[[ std::__2::vector<Luau::AstLocal*, std::__2::allocator<Luau::AstLocal*>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
		if rt_shr_i32(rt_sub_i32(loc_7, loc_2), 2) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_3 = rt_shl_i32(loc_1, 2)
						reg_1 = FUNC_LIST[519](loc_2, 0, loc_3)
						reg_1 = rt_add_i32(reg_1, loc_3)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						break
					end
				end
				loc_2 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 4, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			loc_8 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 2)
			loc_3 = rt_add_i32(loc_1, loc_8)
			if loc_3 < 1073741824 then
				while true do
					loc_6 = rt_sub_i32(loc_7, loc_4)
					loc_9 = rt_shr_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_3 < loc_9 then loc_9 else loc_3))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_3 = rt_add_i32(loc_5, rt_shl_i32(loc_8, 2))
					loc_1 = rt_shl_i32(loc_1, 2)
					reg_0 = FUNC_LIST[519](loc_3, 0, loc_1)
					loc_1 = rt_add_i32(reg_0, loc_1)
					loc_5 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_5)
					if loc_2 ~= loc_4 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 4)
								loc_2 = rt_sub_i32(loc_2, 4)
								rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_2))
								if loc_2 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_4
							break
						end
						if desired then
							break
						end
					end
					loc_4 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 8, loc_5)
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_3)
					if loc_4 ~= 0 then
						while true do
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_7, loc_4))
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[221] = --[[ Luau::detail::DenseHashTable<Luau::AstExprFunction*, std::__2::pair<Luau::AstExprFunction*, Luau::Compiler::Function>, std::__2::pair<Luau::AstExprFunction* const, Luau::Compiler::Function>, Luau::detail::ItemInterfaceMap<Luau::AstExprFunction*, Luau::Compiler::Function>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprFunction*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_11 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_9 = (if loc_3 ~= 0 then rt_shl_i32(loc_3, 1) else 16)
			if loc_9 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = bit_and(loc_9, 2)
			reg_0 = FUNC_LIST[646](rt_mul_i32(loc_9, 40))
			loc_6 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
			loc_3 = 0
			if loc_9 >= 4 then
				while true do
					loc_4 = bit_and(loc_9, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_mul_i32(loc_3, 40), loc_6)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_2)
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 32, rt_i64_ZERO)
						loc_1 = rt_add_i32(rt_mul_i32(bit_or(loc_3, 1), 40), loc_6)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_2)
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 32, rt_i64_ZERO)
						loc_1 = rt_add_i32(rt_mul_i32(bit_or(loc_3, 2), 40), loc_6)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_2)
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 32, rt_i64_ZERO)
						loc_1 = rt_add_i32(rt_mul_i32(bit_or(loc_3, 3), 40), loc_6)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_2)
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 32, rt_i64_ZERO)
						loc_3 = rt_add_i32(loc_3, 4)
						loc_5 = rt_add_i32(loc_5, 4)
						if loc_4 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_mul_i32(loc_3, 40), loc_6)
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_2)
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						rt_store_i64(memory_at_0, loc_1 + 32, rt_i64_ZERO)
						loc_3 = rt_add_i32(loc_3, 1)
						loc_8 = rt_add_i32(loc_8, 1)
						if loc_7 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				if loc_3 ~= 0 then
					while true do
						loc_8 = rt_sub_i32(loc_9, 1)
						while true do
							loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(loc_10, 40))
							loc_7 = rt_load_i32(memory_at_0, loc_4)
							if loc_7 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
								while true do
									loc_2 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
									loc_3 = 0
									while true do
										while true do
											loc_5 = bit_and(loc_2, loc_8)
											loc_2 = rt_add_i32(rt_mul_i32(loc_5, 40), loc_6)
											loc_1 = rt_load_i32(memory_at_0, loc_2)
											if loc_1 == loc_11 then
												while true do
													rt_store_i32(memory_at_0, loc_2, loc_7)
													desired = 6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											end
											if loc_1 == loc_7 then
												desired = 6
												break
											end
											loc_3 = rt_add_i32(loc_3, 1)
											loc_2 = rt_add_i32(loc_5, loc_3)
											if loc_3 <= loc_8 then
												continue
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										loc_2 = 0
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_2, loc_7)
									rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_4 + 8))
									loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
									if loc_3 ~= 0 then
										while true do
											rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
											FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 20), loc_3))
											rt_store_i32(memory_at_0, loc_2 + 20, 0)
											rt_store_i64(memory_at_0, loc_2 + 12, rt_i64_ZERO)
											break
										end
										if desired then
											break
										end
									end
									rt_store_i32(memory_at_0, loc_2 + 12, rt_load_i32(memory_at_0, loc_4 + 12))
									rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_4 + 16))
									rt_store_i32(memory_at_0, loc_2 + 20, rt_load_i32(memory_at_0, loc_4 + 20))
									rt_store_i32(memory_at_0, loc_4 + 20, 0)
									rt_store_i64(memory_at_0, loc_4 + 12, rt_i64_ZERO)
									rt_store_i64(memory_at_0, loc_2 + 30, rt_load_i64(memory_at_0, loc_4 + 30))
									rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_4 + 24))
									reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									reg_0 = loc_3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_3 = reg_0
							loc_10 = rt_add_i32(loc_10, 1)
							if loc_3 > loc_10 then
								continue
							end
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, loc_9)
						loc_5 = rt_load_i32(memory_at_0, loc_0)
						rt_store_i32(memory_at_0, loc_0, loc_6)
						if loc_5 == 0 then
							desired = 1
							break
						end
						if loc_3 == 0 then
							desired = 2
							break
						end
						loc_2 = 0
						while true do
							loc_8 = rt_add_i32(rt_mul_i32(loc_2, 40), loc_5)
							loc_1 = rt_load_i32(memory_at_0, loc_8 + 12)
							if loc_1 ~= 0 then
								while true do
									loc_12 = loc_8
									loc_8 = rt_add_i32(loc_12, 8)
									rt_store_i32(memory_at_0, loc_8 + 8, loc_1)
									FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_12 + 20), loc_1))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_2 = rt_add_i32(loc_2, 1)
							if loc_2 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 4, loc_9)
				loc_5 = rt_load_i32(memory_at_0, loc_0)
				rt_store_i32(memory_at_0, loc_0, loc_6)
				if loc_5 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[652](loc_5)
			break
		end
		break
	end
end
FUNC_LIST[222] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, std::__2::pair<Luau::AstLocal*, Luau::Compiler::Local>, std::__2::pair<Luau::AstLocal* const, Luau::Compiler::Local>, Luau::detail::ItemInterfaceMap<Luau::AstLocal*, Luau::Compiler::Local>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_10 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then rt_shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 4))
			loc_7 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_7)
						rt_store_i64(memory_at_0, loc_1 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
						rt_store_i64(memory_at_0, loc_1 + 20, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 28, 0)
						rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 44, 0)
						rt_store_i64(memory_at_0, loc_1 + 36, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1 + 48, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 60, 0)
						rt_store_i64(memory_at_0, loc_1 + 52, rt_i64_ZERO)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_5 = rt_add_i32(loc_5, 4)
						if loc_9 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_7)
						rt_store_i64(memory_at_0, loc_1 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_1 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_11 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(loc_9, 4))
					loc_4 = rt_load_i32(memory_at_0, loc_11)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9)))
									loc_5 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_7)
									loc_3 = rt_load_i32(memory_at_0, loc_5)
									if loc_10 == loc_3 then
										break
									end
									loc_2 = 0
									if loc_3 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_2 = rt_add_i32(loc_2, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_2))
										loc_5 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_7)
										loc_3 = rt_load_i32(memory_at_0, loc_5)
										if loc_10 == loc_3 then
											desired = 5
											break
										end
										if loc_3 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_5, loc_4)
							rt_store_i32(memory_at_0, loc_5 + 12, rt_load_i32(memory_at_0, loc_11 + 12))
							rt_store_i64(memory_at_0, loc_5 + 4, rt_load_i64(memory_at_0, loc_11 + 4))
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = reg_0
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_1 > loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_7)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[223] = --[[ Luau::Compiler::compileConditionValue(Luau::AstExpr*, unsigned char const*, std::__2::vector<unsigned long, std::__2::allocator<unsigned long>>&, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_9 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
									break
								end
								loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
								if loc_10 == loc_1 then
									break
								end
								loc_6 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
								loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
								loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
								loc_5 = 0
								while true do
									loc_8 = bit_and(loc_6, loc_7)
									loc_12 = rt_add_i32(rt_shl_i32(loc_8, 5), loc_11)
									loc_6 = rt_load_i32(memory_at_0, loc_12)
									if loc_6 ~= loc_1 then
										while true do
											if loc_6 == loc_10 then
												desired = 6
												break
											end
											loc_5 = rt_add_i32(loc_5, 1)
											loc_6 = rt_add_i32(loc_8, loc_5)
											if loc_5 <= loc_7 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = rt_load_i32(memory_at_0, loc_12 + 8)
								if loc_5 == 0 then
									break
								end
								while true do
									while true do
										while true do
											while true do
												if not br_map[1] then
													br_map[1] = (function()
														return { [0] = 0, 2, }
													end)()
												end
												temp = br_map[1][rt_sub_i32(loc_5, 1)] or 1
												if temp < 1 then
													break
												elseif temp > 1 then
													desired = 8
													break
												else
													desired = 9
													break
												end
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if bit_and(loc_4, 1) == 0 then
												desired = 7
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if bit_and(loc_4, 1) ~= 0 then
											desired = 7
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if bit_and(bit_xor(rt_load_i32_u8(memory_at_0, loc_12 + 16), loc_4), 1) ~= 0 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_2 ~= 0 then
									while true do
										FUNC_LIST[229](loc_0, loc_1, rt_load_i32_u8(memory_at_0, loc_2), 1)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_7 = reg_0
								while true do
									loc_5 = rt_load_i32(memory_at_0, loc_3 + 4)
									loc_1 = rt_load_i32(memory_at_0, loc_3 + 8)
									if loc_5 < loc_1 then
										while true do
											rt_store_i32(memory_at_0, loc_5, loc_7)
											loc_7 = rt_add_i32(loc_5, 4)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_6 = rt_load_i32(memory_at_0, loc_3)
									loc_12 = rt_shr_i32(rt_sub_i32(loc_5, loc_6), 2)
									loc_8 = rt_add_i32(loc_12, 1)
									if loc_8 >= 1073741824 then
										desired = 4
										break
									end
									loc_11 = rt_sub_i32(loc_1, loc_6)
									loc_1 = rt_shr_i32(loc_11, 1)
									loc_8 = (if loc_11 >= 2147483644 then 1073741823 else (if loc_1 > loc_8 then loc_1 else loc_8))
									if loc_8 ~= 0 then
										while true do
											if loc_8 >= 1073741824 then
												desired = 3
												break
											end
											reg_0 = FUNC_LIST[646](rt_shl_i32(loc_8, 2))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = 0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_10 = reg_0
									loc_1 = rt_add_i32(loc_10, rt_shl_i32(loc_12, 2))
									rt_store_i32(memory_at_0, loc_1, loc_7)
									loc_8 = rt_add_i32(rt_shl_i32(loc_8, 2), loc_10)
									loc_7 = rt_add_i32(loc_1, 4)
									if loc_5 ~= loc_6 then
										while true do
											while true do
												loc_1 = rt_sub_i32(loc_1, 4)
												loc_5 = rt_sub_i32(loc_5, 4)
												rt_store_i32(memory_at_0, loc_1, rt_load_i32(memory_at_0, loc_5))
												if loc_5 ~= loc_6 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									rt_store_i32(memory_at_0, loc_3 + 8, loc_8)
									rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
									rt_store_i32(memory_at_0, loc_3, loc_1)
									if loc_6 == 0 then
										break
									end
									FUNC_LIST[653](loc_6, loc_11)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
								FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 23, 0, 0)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48684) ~= loc_5 then
									break
								end
								while true do
									while true do
										loc_6 = rt_load_i32(memory_at_0, loc_1 + 24)
										if not br_map[2] then
											br_map[2] = (function()
												return { [0] = 1, 1, 1, 1, 1, 1, 0, 0, }
											end)()
										end
										temp = br_map[2][rt_sub_i32(loc_6, 8)] or 2
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_5 = bit_and(loc_4, 1)
									if loc_5 ~= (if loc_6 ~= 14 then 1 else 0) then
										while true do
											rt_store_i32(memory_at_0, loc_9 + 12, 0)
											rt_store_i64(memory_at_0, loc_9 + 4, rt_i64_ZERO)
											FUNC_LIST[223](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), 0, rt_add_i32(loc_9, 4), bit_and(bit_xor(loc_4, 4294967295), 1))
											FUNC_LIST[223](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), loc_2, loc_3, bit_and(loc_4, 1))
											reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
											loc_6 = reg_0
											loc_5 = rt_load_i32(memory_at_0, loc_9 + 4)
											loc_7 = rt_load_i32(memory_at_0, loc_9 + 8)
											if loc_5 ~= loc_7 then
												while true do
													while true do
														while true do
															reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_5), loc_6)
															if reg_0 ~= 0 then
																while true do
																	loc_5 = rt_add_i32(loc_5, 4)
																	if loc_5 ~= loc_7 then
																		desired = 11
																		break
																	end
																	desired = 10
																	break
																end
																if desired then
																	if desired == 11 then
																		desired = nil
																		continue
																	end
																	break
																end
															end
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
														FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
														error("out of code bounds")
													end
													if desired then
														break
													end
													reg_0 = rt_load_i32(memory_at_0, loc_9 + 4)
													break
												end
												if desired then
													break
												end
											else
												while true do
													reg_0 = loc_5
													break
												end
												if desired then
													break
												end
											end
											loc_5 = reg_0
											if loc_5 == 0 then
												desired = 5
												break
											end
											rt_store_i32(memory_at_0, loc_9 + 8, loc_5)
											FUNC_LIST[653](loc_5, rt_sub_i32(rt_load_i32(memory_at_0, loc_9 + 12), loc_5))
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[223](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), loc_2, loc_3, loc_5)
									loc_6 = 32
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_2 ~= 0 then
									while true do
										FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 3, rt_load_i32_u8(memory_at_0, loc_2), bit_and(loc_4, 1), 0)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[243](loc_0, loc_1, bit_and(bit_xor(loc_4, 4294967295), 1))
								loc_7 = reg_0
								loc_5 = rt_load_i32(memory_at_0, loc_3 + 4)
								loc_1 = rt_load_i32(memory_at_0, loc_3 + 8)
								if loc_5 < loc_1 then
									while true do
										rt_store_i32(memory_at_0, loc_5, loc_7)
										rt_store_i32(memory_at_0, loc_3 + 4, rt_add_i32(loc_5, 4))
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_6 = rt_load_i32(memory_at_0, loc_3)
								loc_12 = rt_shr_i32(rt_sub_i32(loc_5, loc_6), 2)
								loc_8 = rt_add_i32(loc_12, 1)
								if loc_8 >= 1073741824 then
									desired = 4
									break
								end
								loc_11 = rt_sub_i32(loc_1, loc_6)
								loc_1 = rt_shr_i32(loc_11, 1)
								loc_8 = (if loc_11 >= 2147483644 then 1073741823 else (if loc_1 > loc_8 then loc_1 else loc_8))
								if loc_8 ~= 0 then
									while true do
										if loc_8 >= 1073741824 then
											desired = 3
											break
										end
										reg_0 = FUNC_LIST[646](rt_shl_i32(loc_8, 2))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_10 = reg_0
								loc_1 = rt_add_i32(loc_10, rt_shl_i32(loc_12, 2))
								rt_store_i32(memory_at_0, loc_1, loc_7)
								loc_8 = rt_add_i32(rt_shl_i32(loc_8, 2), loc_10)
								loc_7 = rt_add_i32(loc_1, 4)
								if loc_5 ~= loc_6 then
									while true do
										while true do
											loc_1 = rt_sub_i32(loc_1, 4)
											loc_5 = rt_sub_i32(loc_5, 4)
											rt_store_i32(memory_at_0, loc_1, rt_load_i32(memory_at_0, loc_5))
											if loc_5 ~= loc_6 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_3 + 8, loc_8)
								rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
								rt_store_i32(memory_at_0, loc_3, loc_1)
								if loc_6 ~= 0 then
									while true do
										FUNC_LIST[653](loc_6, loc_11)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_2 ~= 0 then
									break
								end
								loc_6 = (if rt_load_i32(memory_at_0, 48676) == loc_5 then loc_1 else 0)
								if loc_6 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, loc_6 + 24) ~= 0 then
									break
								end
								loc_4 = bit_xor(loc_4, 1)
								loc_1 = rt_load_i32(memory_at_0, loc_6 + 28)
								loc_2 = 0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 ~= 0 then
								while true do
									loc_6 = 24
									if rt_load_i32(memory_at_0, 48572) == loc_5 then
										desired = 2
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_9 + 4, loc_0)
							rt_store_i32(memory_at_0, loc_9 + 8, rt_load_i32(memory_at_0, loc_0 + 624))
							while true do
								if loc_2 ~= 0 then
									while true do
										loc_8 = rt_load_i32_u8(memory_at_0, loc_2)
										FUNC_LIST[229](loc_0, loc_1, loc_8, 1)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[244](loc_0, loc_1, rt_add_i32(loc_9, 4))
								loc_8 = reg_0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_7 = reg_0
							while true do
								loc_5 = rt_load_i32(memory_at_0, loc_3 + 4)
								loc_1 = rt_load_i32(memory_at_0, loc_3 + 8)
								if loc_5 < loc_1 then
									while true do
										rt_store_i32(memory_at_0, loc_5, loc_7)
										loc_7 = rt_add_i32(loc_5, 4)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_6 = rt_load_i32(memory_at_0, loc_3)
								loc_2 = rt_shr_i32(rt_sub_i32(loc_5, loc_6), 2)
								loc_10 = rt_add_i32(loc_2, 1)
								if loc_10 >= 1073741824 then
									desired = 4
									break
								end
								loc_12 = rt_sub_i32(loc_1, loc_6)
								loc_1 = rt_shr_i32(loc_12, 1)
								loc_10 = (if loc_12 >= 2147483644 then 1073741823 else (if loc_1 > loc_10 then loc_1 else loc_10))
								if loc_10 ~= 0 then
									while true do
										if loc_10 >= 1073741824 then
											desired = 3
											break
										end
										reg_0 = FUNC_LIST[646](rt_shl_i32(loc_10, 2))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_11 = reg_0
								loc_1 = rt_add_i32(loc_11, rt_shl_i32(loc_2, 2))
								rt_store_i32(memory_at_0, loc_1, loc_7)
								loc_10 = rt_add_i32(rt_shl_i32(loc_10, 2), loc_11)
								loc_7 = rt_add_i32(loc_1, 4)
								if loc_5 ~= loc_6 then
									while true do
										while true do
											loc_1 = rt_sub_i32(loc_1, 4)
											loc_5 = rt_sub_i32(loc_5, 4)
											rt_store_i32(memory_at_0, loc_1, rt_load_i32(memory_at_0, loc_5))
											if loc_5 ~= loc_6 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_3 + 8, loc_10)
								rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
								rt_store_i32(memory_at_0, loc_3, loc_1)
								if loc_6 == 0 then
									break
								end
								FUNC_LIST[653](loc_6, loc_12)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
							FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), (if bit_and(loc_4, 1) ~= 0 then 25 else 26), loc_8, 0)
							rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_9 + 4) + 624, rt_load_i32(memory_at_0, loc_9 + 8))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						GLOBAL_LIST[0].value = rt_add_i32(loc_9, 16)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[44](loc_3)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[197]()
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_6))
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
end
FUNC_LIST[224] = --[[ Luau::Compiler::patchLoopJumps(Luau::AstNode*, unsigned long, unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 664)
			if loc_2 < rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 668), loc_5), 3) then
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_5 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_5)
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, }
										end)()
									end
									temp = br_map[1][rt_load_i32(memory_at_0, loc_5)] or 2
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_5 + 4), loc_3)
								if reg_0 ~= 0 then
									desired = 4
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_5 + 4), loc_4)
							if reg_0 == 0 then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 664)
						if loc_2 < rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 668), loc_5), 3) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[225] = --[[ std::__2::vector<Luau::Compiler::LoopJump, std::__2::allocator<Luau::Compiler::LoopJump>>::__append(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
		if rt_shr_i32(rt_sub_i32(loc_7, loc_2), 3) >= loc_1 then
			while true do
				reg_0 = loc_0
				if loc_1 ~= 0 then
					while true do
						loc_3 = rt_shl_i32(loc_1, 3)
						reg_1 = FUNC_LIST[519](loc_2, 0, loc_3)
						reg_1 = rt_add_i32(reg_1, loc_3)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						break
					end
				end
				loc_2 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 4, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			loc_8 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 3)
			loc_3 = rt_add_i32(loc_1, loc_8)
			if loc_3 < 536870912 then
				while true do
					loc_6 = rt_sub_i32(loc_7, loc_4)
					loc_9 = rt_shr_i32(loc_6, 2)
					loc_6 = (if loc_6 >= 2147483640 then 536870911 else (if loc_3 < loc_9 then loc_9 else loc_3))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 3))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_3 = rt_add_i32(loc_5, rt_shl_i32(loc_8, 3))
					loc_1 = rt_shl_i32(loc_1, 3)
					reg_0 = FUNC_LIST[519](loc_3, 0, loc_1)
					loc_1 = rt_add_i32(reg_0, loc_1)
					loc_5 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_5)
					if loc_2 ~= loc_4 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 8)
								loc_2 = rt_sub_i32(loc_2, 8)
								rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
								if loc_2 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_4
							break
						end
						if desired then
							break
						end
					end
					loc_4 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 8, loc_5)
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_3)
					if loc_4 ~= 0 then
						while true do
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_7, loc_4))
							break
						end
						if desired then
							break
						end
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[226] = --[[ Luau::Compiler::validateContinueUntil(Luau::AstStat*, Luau::AstExpr*, Luau::AstStatBlock*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i64(memory_at_0, loc_5 + 32, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_5 + 40, 0)
		rt_store_i64(memory_at_0, loc_5 + 24, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_5 + 20, loc_0)
		rt_store_i32(memory_at_0, loc_5 + 16, 11824)
		if loc_4 < rt_load_i32(memory_at_0, loc_3 + 32) then
			while true do
				loc_7 = rt_add_i32(loc_5, 28)
				while true do
					loc_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 28), rt_shl_i32(loc_4, 2)))
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
					while true do
						while true do
							if loc_0 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48780) ~= loc_6 then
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 32)
							if loc_6 == 0 then
								desired = 3
								break
							end
							loc_0 = rt_load_i32(memory_at_0, loc_0 + 28)
							loc_6 = rt_add_i32(loc_0, rt_shl_i32(loc_6, 2))
							while true do
								rt_store_i32(memory_at_0, loc_5 + 12, rt_load_i32(memory_at_0, loc_0))
								reg_0 = FUNC_LIST[260](loc_7, rt_add_i32(loc_5, 12))
								loc_0 = rt_add_i32(loc_0, 4)
								if loc_6 ~= loc_0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_0 == 0 then
							break
						end
						if rt_load_i32(memory_at_0, 48828) ~= loc_6 then
							break
						end
						reg_0 = FUNC_LIST[260](loc_7, rt_add_i32(loc_0, 28))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = rt_add_i32(loc_4, 1)
					if loc_4 < rt_load_i32(memory_at_0, loc_3 + 32) then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, rt_add_i32(loc_5, 16))
		loc_0 = rt_load_i32(memory_at_0, loc_5 + 24)
		if loc_0 == 0 then
			while true do
				rt_store_i32(memory_at_0, loc_5 + 16, 11824)
				loc_0 = rt_load_i32(memory_at_0, loc_5 + 28)
				if loc_0 ~= 0 then
					while true do
						FUNC_LIST[652](loc_0)
						break
					end
					if desired then
						break
					end
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_5, 48)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 8)
		rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_0))
		rt_store_i32(memory_at_0, loc_5 + 4, rt_add_i32(loc_6, 1))
		FUNC_LIST[173](rt_add_i32(loc_2, 8), 1647, loc_5)
		error("out of code bounds")
	end
end
FUNC_LIST[227] = --[[ Luau::Compiler::compileExprListTemp(Luau::AstArray<Luau::AstExpr*> const&, unsigned char, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_6 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_6 == loc_3 then
				while true do
					if loc_6 == 0 then
						desired = 1
						break
					end
					loc_3 = 0
					while true do
						FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_3, 2))), bit_and(rt_add_i32(loc_2, loc_3), 255), 1)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_3 < rt_load_i32(memory_at_0, loc_1 + 4) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 < loc_6 then
				while true do
					if loc_3 ~= 0 then
						while true do
							while true do
								FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_5, 2))), bit_and(rt_add_i32(loc_2, loc_5), 255), 1)
								loc_5 = rt_add_i32(loc_5, 1)
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							reg_0 = rt_load_i32(memory_at_0, loc_1 + 4)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					if loc_6 <= loc_3 then
						desired = 1
						break
					end
					while true do
						FUNC_LIST[212](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_3, 2))))
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_3 < rt_load_i32(memory_at_0, loc_1 + 4) then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = 1
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, }
							end)()
						end
						temp = br_map[1][loc_6] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 == 0 then
						desired = 1
						break
					end
					loc_1 = 0
					while true do
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 2, bit_and(rt_add_i32(loc_1, loc_2), 255), 0, 0)
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_3 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_5, 2))), bit_and(rt_add_i32(loc_2, loc_5), 255), 1)
					loc_5 = rt_add_i32(loc_5, 1)
					loc_7 = rt_load_i32(memory_at_0, loc_1 + 4)
					loc_6 = rt_sub_i32(loc_7, 1)
					if loc_5 < loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_6
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[238](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_5, 2))), bit_and(rt_sub_i32(rt_add_i32(loc_2, loc_7), 1), 255), bit_and(rt_sub_i32(loc_3, loc_5), 255), loc_4)
			break
		end
		break
	end
end
FUNC_LIST[228] = --[[ Luau::Compiler::compileExprTempMultRet(Luau::AstExpr*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
		while true do
			if loc_1 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, 48636) ~= loc_3 then
				break
			end
			while true do
				if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 2) then
					break
				end
				reg_0 = FUNC_LIST[231](loc_0, loc_1)
				if reg_0 ~= 0 then
					break
				end
				FUNC_LIST[229](loc_0, loc_1, loc_2, 1)
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
			rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
			FUNC_LIST[211](loc_0, loc_1, loc_2, 0, 1, 1)
			rt_store_i32(memory_at_0, loc_0 + 624, loc_3)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_1 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, 48628) ~= loc_3 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
			rt_store_i32(memory_at_0, loc_0 + 624, loc_2)
			if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
				while true do
					FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 63, loc_2, 0, 0)
			rt_store_i32(memory_at_0, loc_0 + 624, loc_3)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[229](loc_0, loc_1, loc_2, 1)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[229] = --[[ Luau::Compiler::compileExpr(Luau::AstExpr*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
					while true do
						FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 16), 2) then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_4 == rt_load_i32(memory_at_0, 48716) then
						break
					end
					if rt_load_i32(memory_at_0, 48836) == loc_4 then
						break
					end
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 69, 0, 0, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
								break
							end
							loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
							if loc_10 == loc_1 then
								break
							end
							loc_6 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
							loc_9 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
							loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
							loc_4 = 0
							while true do
								loc_7 = bit_and(loc_6, loc_9)
								loc_8 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_11)
								loc_6 = rt_load_i32(memory_at_0, loc_8)
								if loc_6 ~= loc_1 then
									while true do
										if loc_6 == loc_10 then
											desired = 5
											break
										end
										loc_4 = rt_add_i32(loc_4, 1)
										loc_6 = rt_add_i32(loc_7, loc_4)
										if loc_4 <= loc_9 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_8 + 8) == 0 then
								break
							end
							FUNC_LIST[241](loc_0, loc_1, rt_add_i32(loc_8, 8), loc_2)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
						if loc_1 ~= 0 then
							while true do
								if rt_load_i32(memory_at_0, 48572) == loc_4 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_4 == rt_load_i32(memory_at_0, 48580) then
							while true do
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 2, loc_2, 0, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_1 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48588) ~= loc_4 then
								break
							end
							FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 3, loc_2, rt_load_i32_u8(memory_at_0, loc_1 + 24), 0)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_1 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48596) ~= loc_4 then
								break
							end
							reg_0 = FUNC_LIST[78](rt_load_i32(memory_at_0, loc_0), rt_load_f64(memory_at_0, loc_1 + 24))
							loc_4 = reg_0
							if rt_lt_i32(loc_4, 0) then
								desired = 2
								break
							end
							loc_1 = rt_load_i32(memory_at_0, loc_0)
							if loc_4 <= 32767 then
								while true do
									FUNC_LIST[91](loc_1, 5, loc_2, rt_extend_i32_n16(loc_4))
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[91](loc_1, 66, loc_2, 0)
							FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_4)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if loc_1 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48604) ~= loc_4 then
								break
							end
							loc_4 = rt_load_i32(memory_at_0, loc_0)
							loc_12 = rt_load_i64(memory_at_0, loc_1 + 24)
							rt_store_i64(memory_at_0, loc_5 + 8, loc_12)
							rt_store_i64(memory_at_0, loc_5 + 16, loc_12)
							reg_0 = FUNC_LIST[80](loc_4, rt_add_i32(loc_5, 8))
							loc_4 = reg_0
							if rt_lt_i32(loc_4, 0) then
								desired = 2
								break
							end
							loc_1 = rt_load_i32(memory_at_0, loc_0)
							if loc_4 <= 32767 then
								while true do
									FUNC_LIST[91](loc_1, 5, loc_2, rt_extend_i32_n16(loc_4))
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[91](loc_1, 66, loc_2, 0)
							FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_4)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48612) ~= loc_4 then
									break
								end
								if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
									while true do
										loc_7 = rt_load_i32(memory_at_0, loc_1 + 24)
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_7 = rt_load_i32(memory_at_0, loc_1 + 24)
								loc_10 = rt_load_i32(memory_at_0, loc_0 + 72)
								if loc_7 == loc_10 then
									desired = 5
									break
								end
								loc_4 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
								loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
								loc_11 = rt_load_i32(memory_at_0, loc_0 + 60)
								loc_1 = 0
								while true do
									loc_9 = bit_and(loc_4, loc_6)
									loc_8 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_11)
									loc_4 = rt_load_i32(memory_at_0, loc_8)
									if loc_4 ~= loc_7 then
										while true do
											if loc_4 == loc_10 then
												desired = 5
												break
											end
											loc_1 = rt_add_i32(loc_1, 1)
											loc_4 = rt_add_i32(loc_9, loc_1)
											if loc_1 <= loc_6 then
												desired = 7
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_8 + 5) ~= 1 then
									desired = 5
									break
								end
								loc_1 = rt_load_i32_u8(memory_at_0, loc_8 + 4)
								if loc_1 == loc_2 then
									while true do
										if rt_load_i32(memory_at_0, loc_0 + 4) ~= 0 then
											desired = 4
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, loc_2, loc_1, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48620) ~= loc_4 then
									break
								end
								FUNC_LIST[246](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48628) ~= loc_4 then
									break
								end
								if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
									while true do
										FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 63, loc_2, 2, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48636) ~= loc_4 then
									break
								end
								while true do
									if loc_3 == 0 then
										break
									end
									if loc_2 ~= rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 624), 1) then
										break
									end
									FUNC_LIST[211](loc_0, loc_1, loc_2, 1, 1, 0)
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[211](loc_0, loc_1, loc_2, 1, 0, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48644) ~= loc_4 then
									break
								end
								FUNC_LIST[247](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48652) ~= loc_4 then
									break
								end
								FUNC_LIST[248](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48660) ~= loc_4 then
									break
								end
								FUNC_LIST[219](loc_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48668) ~= loc_4 then
									break
								end
								FUNC_LIST[249](loc_0, loc_1, loc_2, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48676) ~= loc_4 then
									break
								end
								rt_store_i32(memory_at_0, loc_5 + 24, loc_0)
								rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_0 + 624))
								reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_5, 24))
								loc_4 = reg_0
								loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_1 < 3 then rt_add_i32(loc_1, 50) else 0), loc_2, loc_4, 0)
								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5 + 24) + 624, rt_load_i32(memory_at_0, loc_5 + 28))
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48684) ~= loc_4 then
									break
								end
								FUNC_LIST[250](loc_0, loc_1, loc_2, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 ~= 0 then
								while true do
									if rt_load_i32(memory_at_0, 48692) == loc_4 then
										desired = 3
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48700) ~= loc_4 then
									break
								end
								FUNC_LIST[251](loc_0, loc_1, loc_2, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 == 0 then
								desired = 4
								break
							end
							if rt_load_i32(memory_at_0, 48708) ~= loc_4 then
								desired = 4
								break
							end
							FUNC_LIST[252](loc_0, loc_1, loc_2, loc_3)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[184](loc_0, loc_7)
						loc_1 = reg_0
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 9, loc_2, loc_1, 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[230] = --[[ Luau::Compiler::tryCompileInlinedCall(Luau::AstExprCall*, Luau::AstExprFunction*, unsigned char, unsigned char, bool, int, int, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0.0
	local reg_0
	local desired
	while true do
		loc_11 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_11
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
				break
			end
			loc_15 = rt_load_i32(memory_at_0, loc_0 + 52)
			if loc_15 == loc_2 then
				break
			end
			loc_12 = bit_xor(rt_shr_u32(loc_2, 4), rt_shr_u32(loc_2, 9))
			loc_16 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), 1)
			loc_17 = rt_load_i32(memory_at_0, loc_0 + 40)
			while true do
				loc_13 = bit_and(loc_12, loc_16)
				loc_10 = rt_add_i32(rt_mul_i32(loc_13, 40), loc_17)
				loc_12 = rt_load_i32(memory_at_0, loc_10)
				if loc_2 == loc_12 then
					desired = 1
					break
				end
				loc_10 = 0
				if loc_12 == loc_15 then
					desired = 1
					break
				end
				loc_9 = rt_add_i32(loc_9, 1)
				loc_12 = rt_add_i32(loc_13, loc_9)
				if loc_9 <= loc_16 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 624) <= 128 then
					while true do
						loc_19 = (if loc_10 ~= 0 then rt_add_i32(loc_10, 8) else 0)
						if rt_load_i32(memory_at_0, loc_19 + 24) < 33 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_9 = 0
				FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), 4053, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 692)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 688)
					if rt_lt_i32(rt_div_i32(rt_sub_i32(loc_10, loc_9), 24), loc_8) then
						while true do
							if loc_9 == loc_10 then
								desired = 2
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = 0
					FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), 2335, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_load_i32(memory_at_0, loc_9) ~= loc_2 then
						while true do
							loc_9 = rt_add_i32(loc_9, 24)
							if loc_9 ~= loc_10 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = 0
				FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), 2154, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_5 ~= 0 then
				while true do
					loc_9 = 0
					FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), 1779, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i64(memory_at_0, loc_11 + 56, rt_i64_ZERO)
			loc_18 = rt_load_i32(memory_at_0, loc_1 + 32)
			while true do
				loc_14 = rt_load_i32(memory_at_0, loc_2 + 56)
				if loc_14 == 0 then
					break
				end
				loc_20 = (if loc_18 >= 8 then 8 else loc_18)
				loc_12 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 120)
				loc_17 = rt_load_i32(memory_at_0, loc_0 + 132)
				loc_21 = rt_load_i32(memory_at_0, loc_0 + 128)
				loc_5 = 0
				while true do
					if loc_5 == loc_20 then
						desired = 2
						break
					end
					loc_13 = 0
					while true do
						if loc_21 == 0 then
							break
						end
						loc_15 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_5, 2)))
						if loc_17 == loc_15 then
							break
						end
						loc_10 = bit_xor(rt_shr_u32(loc_15, 4), rt_shr_u32(loc_15, 9))
						loc_9 = 0
						while true do
							loc_16 = bit_and(loc_10, loc_12)
							loc_13 = rt_add_i32(rt_shl_i32(loc_16, 5), loc_8)
							loc_10 = rt_load_i32(memory_at_0, loc_13)
							if loc_10 ~= loc_15 then
								while true do
									loc_13 = 0
									if loc_10 == loc_17 then
										desired = 4
										break
									end
									loc_9 = rt_add_i32(loc_9, 1)
									loc_10 = rt_add_i32(loc_16, loc_9)
									if loc_9 <= loc_12 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_13 = (if rt_load_i32(memory_at_0, loc_13 + 8) ~= 0 then 1 else 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, rt_add_i32(loc_11, 56)), loc_13)
					loc_5 = rt_add_i32(loc_5, 1)
					if loc_14 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_18 == 0 then
					break
				end
				reg_0 = FUNC_LIST[231](loc_0, rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_18, 2)), 4)))
				loc_9 = reg_0
				loc_14 = rt_load_i32(memory_at_0, loc_2 + 56)
				if loc_9 ~= 0 then
					break
				end
				loc_10 = (if loc_14 >= 8 then 8 else loc_14)
				loc_9 = rt_load_i32(memory_at_0, loc_1 + 32)
				if loc_10 <= loc_9 then
					break
				end
				reg_0 = FUNC_LIST[519](rt_add_i32(loc_9, rt_add_i32(loc_11, 56)), 1, rt_sub_i32(loc_10, loc_9))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[154](rt_load_i64(memory_at_0, loc_19 + 16), rt_add_i32(loc_11, 56), (if rt_ge_i32(loc_14, 8) then 8 else loc_14))
			loc_10 = reg_0
			reg_0 = FUNC_LIST[154](rt_load_i64(memory_at_0, loc_19 + 16), 0, 0)
			loc_9 = reg_0
			if loc_10 ~= 0 then
				while true do
					loc_9 = rt_div_i32(rt_add_i32(rt_mul_i32(loc_9, 100), 300), loc_10)
					reg_0 = (if rt_gt_i32(loc_7, loc_9) then loc_9 else loc_7)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_7
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = reg_0
			loc_22 = (rt_convert_f64_i32(loc_7) / 1e2)
			loc_12 = rt_load_i32(memory_at_0, loc_0)
			loc_9 = (if rt_ge_i32(rt_div_i32(rt_mul_i32(loc_6, loc_7), 100), loc_10) then 1 else 0)
			if loc_9 == 0 then
				while true do
					rt_store_f64(memory_at_0, loc_11 + 40, loc_22)
					rt_store_i32(memory_at_0, loc_11 + 32, loc_10)
					FUNC_LIST[107](loc_12, 7320, rt_add_i32(loc_11, 32))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_11 + 16, rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 692), rt_load_i32(memory_at_0, loc_0 + 688)), 24))
			rt_store_f64(memory_at_0, loc_11 + 8, loc_22)
			rt_store_i32(memory_at_0, loc_11, loc_10)
			FUNC_LIST[107](loc_12, 7586, loc_11)
			FUNC_LIST[266](loc_0, loc_1, loc_2, loc_3, loc_4)
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_11, 4294967232)
		reg_0 = loc_9
		break
	end
	return reg_0
end
FUNC_LIST[231] = --[[ Luau::Compiler::isExprMultRet(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	while true do
		loc_9 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
		while true do
			while true do
				if loc_1 ~= 0 then
					while true do
						if rt_load_i32(memory_at_0, 48636) == loc_2 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = (if rt_load_i32(memory_at_0, 48628) == loc_2 then 1 else 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 4), 2) then
					break
				end
				while true do
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 132)
							if loc_6 == loc_1 then
								break
							end
							loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
							loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 120)
							loc_2 = 0
							while true do
								loc_5 = bit_and(loc_3, loc_4)
								loc_8 = rt_add_i32(rt_shl_i32(loc_5, 5), loc_7)
								loc_3 = rt_load_i32(memory_at_0, loc_8)
								if loc_3 ~= loc_1 then
									while true do
										if loc_3 == loc_6 then
											desired = 5
											break
										end
										loc_2 = rt_add_i32(loc_2, 1)
										loc_3 = rt_add_i32(loc_5, loc_2)
										if loc_2 <= loc_4 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_8 + 8) ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 188) == 0 then
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 192)
							if loc_6 == loc_1 then
								break
							end
							loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
							loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 184), 1)
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 180)
							loc_2 = 0
							while true do
								loc_5 = bit_and(loc_3, loc_4)
								loc_8 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_7)
								loc_3 = rt_load_i32(memory_at_0, loc_8)
								if loc_1 == loc_3 then
									desired = 3
									break
								end
								if loc_3 == loc_6 then
									desired = 5
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_5, loc_2)
								if loc_2 <= loc_4 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
						loc_10 = rt_load_i32(memory_at_0, 48692)
						loc_11 = rt_load_i32(memory_at_0, 48572)
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 100)
						loc_6 = rt_load_i32(memory_at_0, loc_0 + 112)
						loc_12 = rt_load_i32(memory_at_0, loc_0 + 108)
						loc_13 = rt_load_i32(memory_at_0, 48612)
						loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							while true do
								if loc_1 == 0 then
									break
								end
								if loc_2 ~= loc_13 then
									break
								end
								if loc_12 == 0 then
									desired = 2
									break
								end
								loc_5 = rt_load_i32(memory_at_0, loc_1 + 24)
								if loc_6 == loc_5 then
									desired = 2
									break
								end
								loc_2 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
								loc_1 = 0
								while true do
									loc_4 = bit_and(loc_2, loc_3)
									loc_8 = rt_add_i32(rt_mul_i32(loc_4, 12), loc_7)
									loc_2 = rt_load_i32(memory_at_0, loc_8)
									if loc_2 ~= loc_5 then
										while true do
											if loc_2 == loc_6 then
												desired = 2
												break
											end
											loc_1 = rt_add_i32(loc_1, 1)
											loc_2 = rt_add_i32(loc_4, loc_1)
											if loc_1 <= loc_3 then
												desired = 7
												break
											end
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_8 + 8) ~= 0 then
									desired = 2
									break
								end
								loc_1 = rt_load_i32(memory_at_0, loc_8 + 4)
								if loc_1 ~= 0 then
									desired = 5
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							while true do
								if loc_1 == 0 then
									break
								end
								if bit_and((if loc_2 ~= loc_11 then 1 else 0), (if loc_2 ~= loc_10 then 1 else 0)) ~= 0 then
									break
								end
								loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, 48660) ~= loc_2 then
							desired = 2
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
							desired = 2
							break
						end
						loc_6 = rt_load_i32(memory_at_0, loc_0 + 52)
						if loc_6 == loc_1 then
							desired = 2
							break
						end
						loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
						loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), 1)
						loc_0 = rt_load_i32(memory_at_0, loc_0 + 40)
						loc_2 = 0
						while true do
							loc_5 = bit_and(loc_3, loc_4)
							loc_7 = rt_add_i32(rt_mul_i32(loc_5, 40), loc_0)
							loc_3 = rt_load_i32(memory_at_0, loc_7)
							if loc_3 ~= loc_1 then
								while true do
									if loc_3 == loc_6 then
										desired = 2
										break
									end
									loc_2 = rt_add_i32(loc_2, 1)
									loc_3 = rt_add_i32(loc_5, loc_2)
									if loc_2 <= loc_4 then
										desired = 5
										break
									end
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_7 + 37) == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[21](rt_add_i32(loc_9, 4), rt_load_i32(memory_at_0, loc_8 + 4))
				reg_0 = (if rt_load_i32(memory_at_0, loc_9 + 8) ~= 1 then 1 else 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = 1
			break
		end
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_9, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[232] = --[[ Luau::Compiler::compileExprSelectVararg(Luau::AstExprCall*, unsigned char, unsigned char, bool, bool, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local desired
	while true do
		loc_10 = rt_load_i32(memory_at_0, 48612)
		loc_12 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28))
		loc_7 = rt_load_i32(memory_at_0, loc_12 + 4)
		while true do
			while true do
				while true do
					if loc_12 ~= 0 then
						while true do
							loc_8 = loc_12
							if loc_7 == loc_10 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = rt_load_i32(memory_at_0, 48692)
					loc_9 = rt_load_i32(memory_at_0, 48572)
					loc_8 = loc_12
					while true do
						if bit_and((if loc_7 ~= loc_9 then 1 else 0), (if loc_7 ~= loc_11 then 1 else 0)) ~= 0 then
							desired = 2
							break
						end
						loc_8 = rt_load_i32(memory_at_0, loc_8 + 24)
						loc_7 = rt_load_i32(memory_at_0, loc_8 + 4)
						if loc_8 == 0 then
							continue
						end
						if loc_7 ~= loc_10 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
					break
				end
				loc_11 = rt_load_i32(memory_at_0, loc_8 + 24)
				loc_14 = rt_load_i32(memory_at_0, loc_0 + 72)
				if loc_11 == loc_14 then
					break
				end
				loc_8 = bit_xor(rt_shr_u32(loc_11, 4), rt_shr_u32(loc_11, 9))
				loc_9 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
				loc_15 = rt_load_i32(memory_at_0, loc_0 + 60)
				loc_7 = 0
				while true do
					loc_10 = bit_and(loc_8, loc_9)
					loc_13 = rt_add_i32(rt_shl_i32(loc_10, 4), loc_15)
					loc_8 = rt_load_i32(memory_at_0, loc_13)
					if loc_8 ~= loc_11 then
						while true do
							if loc_8 == loc_14 then
								desired = 2
								break
							end
							loc_7 = rt_add_i32(loc_7, 1)
							loc_8 = rt_add_i32(loc_10, loc_7)
							if loc_7 <= loc_9 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_13 + 5) ~= 1 then
					break
				end
				loc_7 = rt_load_i32_u8(memory_at_0, loc_13 + 4)
				loc_8 = loc_7
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 624)
			loc_8 = rt_add_i32(loc_6, 1)
			loc_7 = bit_and(loc_8, 255)
			rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_7, 1))
			FUNC_LIST[229](loc_0, loc_12, loc_7, 1)
			rt_store_i32(memory_at_0, loc_0 + 624, loc_9)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
		loc_9 = reg_0
		loc_8 = bit_and(loc_8, 255)
		FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 73, 57, loc_8, 0)
		FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), loc_6, 1)
		loc_10 = rt_add_i32(loc_6, 1)
		if loc_10 ~= loc_7 then
			while true do
				FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, bit_and(loc_10, 255), loc_8, 0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 63, bit_and(rt_add_i32(loc_6, 2), 255), 0, 0)
		reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
		loc_7 = reg_0
		reg_0 = FUNC_LIST[95](rt_load_i32(memory_at_0, loc_0), loc_9, loc_7)
		if reg_0 ~= 0 then
			while true do
				loc_7 = 0
				FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 21, loc_6, 0, bit_and((if loc_5 ~= 0 then 0 else rt_add_i32(loc_3, 1)), 255))
				while true do
					if loc_3 == 0 then
						break
					end
					if loc_4 ~= 0 then
						break
					end
					while true do
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, bit_and(rt_add_i32(loc_2, loc_7), 255), bit_and(rt_add_i32(loc_6, loc_7), 255), 0)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_3 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[173](rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[233] = --[[ Luau::Compiler::compileExprFastcallN(Luau::AstExprCall*, unsigned char, unsigned char, bool, bool, unsigned char, int, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local reg_0
	local desired
	while true do
		loc_13 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_13
		loc_16 = 1
		loc_18 = 73
		while true do
			while true do
				while true do
					loc_21 = rt_load_i32(memory_at_0, loc_1 + 32)
					if loc_21 == 1 then
						break
					end
					while true do
						if rt_ge_i32(loc_8, 0) then
							while true do
								loc_18 = 75
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_21 ~= 2 then
							while true do
								loc_18 = 60
								loc_16 = 0
								loc_19 = 1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_18 = 74
						if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
							desired = 3
							break
						end
						loc_15 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28) + 4)
						loc_17 = rt_load_i32(memory_at_0, loc_0 + 132)
						if loc_15 == loc_17 then
							desired = 3
							break
						end
						loc_10 = bit_xor(rt_shr_u32(loc_15, 4), rt_shr_u32(loc_15, 9))
						loc_12 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
						loc_20 = rt_load_i32(memory_at_0, loc_0 + 120)
						while true do
							while true do
								loc_14 = bit_and(loc_10, loc_12)
								loc_22 = rt_add_i32(rt_shl_i32(loc_14, 5), loc_20)
								loc_10 = rt_load_i32(memory_at_0, loc_22)
								if loc_10 ~= loc_15 then
									while true do
										if loc_10 ~= loc_17 then
											desired = 6
											break
										end
										loc_16 = 0
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_9 = rt_load_i32(memory_at_0, loc_22 + 8)
								loc_18 = (if loc_9 ~= 0 then 75 else 74)
								loc_16 = (if loc_9 ~= 0 then 1 else 0)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_9 = rt_add_i32(loc_9, 1)
							loc_10 = rt_add_i32(loc_14, loc_9)
							loc_16 = 0
							if loc_9 <= loc_12 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_13 + 8, 0)
					rt_store_i64(memory_at_0, loc_13, rt_i64_ZERO)
					if loc_21 == 0 then
						desired = 1
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_16 = 0
				rt_store_i32(memory_at_0, loc_13 + 8, 0)
				rt_store_i64(memory_at_0, loc_13, rt_i64_ZERO)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_24 = rt_add_i32(loc_6, 1)
			while true do
				loc_20 = rt_shl_i32(loc_11, 2)
				loc_14 = rt_load_i32(memory_at_0, rt_add_i32(loc_20, rt_load_i32(memory_at_0, loc_1 + 28)))
				while true do
					while true do
						while true do
							if bit_or((if loc_16 == 0 then 1 else 0), (if loc_11 == 0 then 1 else 0)) == 0 then
								while true do
									reg_0 = FUNC_LIST[245](loc_0, loc_14)
									loc_9 = reg_0
									if rt_lt_i32(loc_9, 0) then
										desired = 5
										break
									end
									rt_store_i32(memory_at_0, rt_add_i32(loc_13, loc_20), loc_9)
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_9 = rt_load_i32(memory_at_0, loc_14 + 4)
							loc_15 = rt_load_i32(memory_at_0, 48612)
							while true do
								if loc_14 ~= 0 then
									while true do
										loc_10 = loc_14
										if loc_9 == loc_15 then
											desired = 6
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_17 = rt_load_i32(memory_at_0, 48692)
								loc_12 = rt_load_i32(memory_at_0, 48572)
								loc_10 = loc_14
								while true do
									if bit_and((if loc_9 ~= loc_12 then 1 else 0), (if loc_9 ~= loc_17 then 1 else 0)) ~= 0 then
										desired = 4
										break
									end
									loc_10 = rt_load_i32(memory_at_0, loc_10 + 24)
									loc_9 = rt_load_i32(memory_at_0, loc_10 + 4)
									if loc_10 == 0 then
										continue
									end
									if loc_9 ~= loc_15 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
								desired = 4
								break
							end
							loc_17 = rt_load_i32(memory_at_0, loc_10 + 24)
							loc_22 = rt_load_i32(memory_at_0, loc_0 + 72)
							if loc_17 == loc_22 then
								desired = 4
								break
							end
							loc_10 = bit_xor(rt_shr_u32(loc_17, 4), rt_shr_u32(loc_17, 9))
							loc_12 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
							loc_25 = rt_load_i32(memory_at_0, loc_0 + 60)
							loc_9 = 0
							while true do
								loc_15 = bit_and(loc_10, loc_12)
								loc_23 = rt_add_i32(rt_shl_i32(loc_15, 4), loc_25)
								loc_10 = rt_load_i32(memory_at_0, loc_23)
								if loc_10 ~= loc_17 then
									while true do
										if loc_10 == loc_22 then
											desired = 4
											break
										end
										loc_9 = rt_add_i32(loc_9, 1)
										loc_10 = rt_add_i32(loc_15, loc_9)
										if loc_9 <= loc_12 then
											desired = 6
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_23 + 5) ~= 1 then
								desired = 4
								break
							end
							rt_store_i32(memory_at_0, rt_add_i32(loc_13, loc_20), rt_load_i32_u8(memory_at_0, loc_23 + 4))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_9 = bit_and(rt_add_i32(loc_11, loc_24), 255)
					rt_store_i32(memory_at_0, rt_add_i32(loc_13, loc_20), loc_9)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 624)
					rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_9, 1))
					FUNC_LIST[229](loc_0, loc_14, loc_9, 1)
					rt_store_i32(memory_at_0, loc_0 + 624, loc_10)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_11 = rt_add_i32(loc_11, 1)
				if loc_11 < rt_load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = rt_load_i32(memory_at_0, loc_13)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
		loc_15 = reg_0
		FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), loc_18, bit_and(loc_7, 255), bit_and(loc_11, 255), 0)
		while true do
			if loc_19 ~= 0 then
				while true do
					FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), bit_or(rt_load_i32(memory_at_0, loc_13 + 4), rt_shl_i32(rt_load_i32(memory_at_0, loc_13 + 8), 8)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_21 == 1 then
				break
			end
			FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), (if rt_lt_i32(loc_8, 0) then rt_load_i32(memory_at_0, loc_13 + 4) else loc_8))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			loc_12 = rt_load_i32(memory_at_0, loc_1 + 32)
			if loc_12 == 0 then
				break
			end
			loc_9 = 1
			loc_10 = rt_add_i32(loc_6, 1)
			if loc_11 ~= loc_10 then
				while true do
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, bit_and(loc_10, 255), bit_and(loc_11, 255), 0)
					reg_0 = rt_load_i32(memory_at_0, loc_1 + 32)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_12
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_12 = reg_0
			if loc_12 <= 1 then
				break
			end
			while true do
				while true do
					if loc_16 ~= 0 then
						while true do
							loc_11 = rt_add_i32(loc_9, loc_10)
							loc_12 = rt_load_i32(memory_at_0, loc_0)
							loc_14 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_9, 2), loc_13))
							if rt_le_i32(loc_14, 32767) then
								while true do
									FUNC_LIST[91](loc_12, 5, bit_and(loc_11, 255), rt_extend_i32_n16(loc_14))
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							FUNC_LIST[91](loc_12, 66, bit_and(loc_11, 255), 0)
							FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_14)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_9, 2), loc_13))
					loc_12 = rt_add_i32(loc_9, loc_10)
					if loc_11 == loc_12 then
						break
					end
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, bit_and(loc_12, 255), bit_and(loc_11, 255), 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_9 = rt_add_i32(loc_9, 1)
				if loc_9 < rt_load_i32(memory_at_0, loc_1 + 32) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), loc_6, 1)
		reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
		loc_9 = reg_0
		reg_0 = FUNC_LIST[95](rt_load_i32(memory_at_0, loc_0), loc_15, loc_9)
		if reg_0 ~= 0 then
			while true do
				loc_9 = 0
				FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 21, loc_6, bit_and(rt_add_i32(rt_load_i32_u8(memory_at_0, loc_1 + 32), 1), 255), bit_and((if loc_5 ~= 0 then 0 else rt_add_i32(loc_3, 1)), 255))
				while true do
					if loc_3 == 0 then
						break
					end
					if loc_4 ~= 0 then
						break
					end
					while true do
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, bit_and(rt_add_i32(loc_2, loc_9), 255), bit_and(rt_add_i32(loc_6, loc_9), 255), 0)
						loc_9 = rt_add_i32(loc_9, 1)
						if loc_3 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_13, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[173](rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[234] = --[[ Luau::Compiler::hintTemporaryExprRegType(Luau::AstExpr*, int, LuauBytecodeType, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
			loc_8 = rt_load_i32(memory_at_0, 48612)
			if (if loc_5 == loc_8 then loc_1 else 0) ~= 0 then
				break
			end
			loc_9 = rt_load_i32(memory_at_0, 48692)
			loc_7 = rt_load_i32(memory_at_0, 48572)
			loc_6 = loc_1
			while true do
				if bit_and((if loc_5 ~= loc_7 then 1 else 0), (if loc_5 ~= loc_9 then 1 else 0)) == 0 then
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_6 + 24)
						loc_5 = rt_load_i32(memory_at_0, loc_6 + 4)
						if loc_6 == 0 then
							desired = 2
							break
						end
						if loc_5 ~= loc_8 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 268) == 0 then
				break
			end
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 272)
			if loc_9 == loc_1 then
				break
			end
			loc_6 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 264), 1)
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 260)
			loc_5 = 0
			while true do
				loc_8 = bit_and(loc_6, loc_7)
				loc_11 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_10)
				loc_6 = rt_load_i32(memory_at_0, loc_11)
				if loc_6 ~= loc_1 then
					while true do
						if loc_6 == loc_9 then
							desired = 1
							break
						end
						loc_5 = rt_add_i32(loc_5, 1)
						loc_6 = rt_add_i32(loc_8, loc_5)
						if loc_5 <= loc_7 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_11 + 4)
			if loc_3 == loc_5 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			reg_3 = FUNC_LIST[93](loc_6)
			reg_4 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
			FUNC_LIST[97](loc_6, loc_5, bit_and(loc_2, 255), rt_sub_i32(reg_3, loc_4), reg_4)
			break
		end
		break
	end
end
FUNC_LIST[235] = --[[ Luau::Compiler::tryCompileUnrolledFor(Luau::AstStatFor*, int, int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0.0
	local loc_17 = 0.0
	local loc_18 = 0.0
	local loc_19 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_6
		while true do
			while true do
				while true do
					loc_13 = rt_load_i32(memory_at_0, loc_0 + 128)
					if loc_13 == 0 then
						break
					end
					loc_8 = rt_load_i32(memory_at_0, loc_1 + 32)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
					if loc_8 == loc_10 then
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
					loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
					loc_12 = rt_load_i32(memory_at_0, loc_0 + 120)
					while true do
						loc_9 = bit_and(loc_5, loc_7)
						loc_11 = rt_add_i32(rt_shl_i32(loc_9, 5), loc_12)
						loc_5 = rt_load_i32(memory_at_0, loc_11)
						if loc_8 == loc_5 then
							desired = 2
							break
						end
						if loc_5 == loc_10 then
							desired = 3
							break
						end
						loc_4 = rt_add_i32(loc_4, 1)
						loc_5 = rt_add_i32(loc_9, loc_4)
						if loc_4 <= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_6 + 72, 0)
				reg_0 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_11 + 8)
			rt_store_f64(memory_at_0, loc_6 + 72, rt_load_f64(memory_at_0, loc_11 + 16))
			reg_0 = (if loc_4 == 3 then 1 else 0)
			break
		end
		loc_14 = reg_0
		while true do
			while true do
				while true do
					if loc_13 == 0 then
						break
					end
					loc_8 = rt_load_i32(memory_at_0, loc_1 + 36)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
					if loc_8 == loc_10 then
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
					loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
					loc_12 = rt_load_i32(memory_at_0, loc_0 + 120)
					loc_4 = 0
					while true do
						loc_9 = bit_and(loc_5, loc_7)
						loc_11 = rt_add_i32(rt_shl_i32(loc_9, 5), loc_12)
						loc_5 = rt_load_i32(memory_at_0, loc_11)
						if loc_8 == loc_5 then
							desired = 2
							break
						end
						if loc_5 == loc_10 then
							desired = 3
							break
						end
						loc_4 = rt_add_i32(loc_4, 1)
						loc_5 = rt_add_i32(loc_9, loc_4)
						if loc_4 <= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_6 + 64, 0)
				reg_0 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_11 + 8)
			rt_store_f64(memory_at_0, loc_6 + 64, rt_load_f64(memory_at_0, loc_11 + 16))
			reg_0 = (if loc_4 == 3 then 1 else 0)
			break
		end
		loc_15 = reg_0
		while true do
			while true do
				while true do
					while true do
						loc_8 = rt_load_i32(memory_at_0, loc_1 + 40)
						if loc_8 == 0 then
							while true do
								loc_16 = 1e0
								reg_0 = 1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_13 == 0 then
							desired = 3
							break
						end
						loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
						if loc_10 == loc_8 then
							desired = 3
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
						loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
						loc_12 = rt_load_i32(memory_at_0, loc_0 + 120)
						loc_4 = 0
						while true do
							loc_9 = bit_and(loc_5, loc_7)
							loc_11 = rt_add_i32(rt_shl_i32(loc_9, 5), loc_12)
							loc_5 = rt_load_i32(memory_at_0, loc_11)
							if loc_5 ~= loc_8 then
								while true do
									if loc_5 == loc_10 then
										desired = 3
										break
									end
									loc_4 = rt_add_i32(loc_4, 1)
									loc_5 = rt_add_i32(loc_9, loc_4)
									if loc_4 <= loc_7 then
										desired = 5
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_16 = rt_load_f64(memory_at_0, loc_11 + 16)
						reg_0 = (if rt_load_i32(memory_at_0, loc_11 + 8) == 3 then 1 else 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = reg_0
					if bit_and(loc_14, loc_15) == 0 then
						break
					end
					if loc_4 == 0 then
						break
					end
					loc_18 = rt_load_f64(memory_at_0, loc_6 + 72)
					reg_0 = FUNC_LIST[155](loc_18, rt_load_f64(memory_at_0, loc_6 + 64), loc_16)
					loc_5 = reg_0
					if rt_ge_i32(loc_5, 0) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = 0
				FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), 1456, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_lt_i32(loc_2, loc_5) then
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					rt_store_i32(memory_at_0, loc_6, loc_5)
					FUNC_LIST[107](loc_4, 7541, loc_6)
					loc_4 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_load_i32(memory_at_0, loc_1 + 28)
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 108) == 0 then
					break
				end
				loc_12 = rt_load_i32(memory_at_0, loc_0 + 112)
				if loc_12 == loc_10 then
					break
				end
				loc_7 = bit_xor(rt_shr_u32(loc_10, 4), rt_shr_u32(loc_10, 9))
				loc_9 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
				loc_11 = rt_load_i32(memory_at_0, loc_0 + 100)
				loc_4 = 0
				while true do
					loc_8 = bit_and(loc_7, loc_9)
					loc_13 = rt_add_i32(rt_mul_i32(loc_8, 12), loc_11)
					loc_7 = rt_load_i32(memory_at_0, loc_13)
					if loc_7 ~= loc_10 then
						while true do
							if loc_7 == loc_12 then
								desired = 2
								break
							end
							loc_4 = rt_add_i32(loc_4, 1)
							loc_7 = rt_add_i32(loc_8, loc_4)
							if loc_4 <= loc_9 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_13 + 8) ~= 1 then
					break
				end
				loc_4 = 0
				FUNC_LIST[107](rt_load_i32(memory_at_0, loc_0), 4827, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_6 + 60, loc_10)
			reg_0 = FUNC_LIST[150](rt_load_i32(memory_at_0, loc_1 + 44), rt_add_i32(loc_6, 60), 1, rt_add_i32(loc_0, 180))
			loc_19 = reg_0
			rt_store_i32_n8(memory_at_0, loc_6 + 59, 1)
			reg_0 = FUNC_LIST[154](loc_19, rt_add_i32(loc_6, 59), 1)
			loc_4 = reg_0
			reg_0 = FUNC_LIST[154](loc_19, 0, 0)
			loc_9 = reg_0
			loc_7 = rt_mul_i32(loc_4, loc_5)
			if loc_7 ~= 0 then
				while true do
					loc_4 = rt_div_i32(rt_mul_i32(rt_mul_i32(rt_add_i32(loc_9, 1), loc_5), 100), loc_7)
					reg_0 = (if rt_gt_i32(loc_3, loc_4) then loc_4 else loc_3)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			loc_17 = (rt_convert_f64_i32(loc_3) / 1e2)
			loc_9 = rt_load_i32(memory_at_0, loc_0)
			loc_4 = (if rt_ge_i32(rt_div_i32(rt_mul_i32(loc_2, loc_3), 100), loc_7) then 1 else 0)
			if loc_4 == 0 then
				while true do
					rt_store_f64(memory_at_0, loc_6 + 40, loc_17)
					rt_store_i32(memory_at_0, loc_6 + 36, loc_7)
					rt_store_i32(memory_at_0, loc_6 + 32, loc_5)
					FUNC_LIST[107](loc_9, 7375, rt_add_i32(loc_6, 32))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_f64(memory_at_0, loc_6 + 24, loc_17)
			rt_store_i32(memory_at_0, loc_6 + 20, loc_7)
			rt_store_i32(memory_at_0, loc_6 + 16, loc_5)
			FUNC_LIST[107](loc_9, 7448, rt_add_i32(loc_6, 16))
			FUNC_LIST[268](loc_0, loc_1, loc_5, loc_18, loc_16)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 80)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[236] = --[[ Luau::Compiler::compileLValue(Luau::AstExpr*, Luau::Compiler::RegScope&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_11 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_11
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_1 + 8), 0) then
			while true do
				FUNC_LIST[104](rt_load_i32(memory_at_0, loc_1), rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 8), 1))
				break
			end
		end
		loc_6 = rt_load_i32(memory_at_0, 48612)
		loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
		while true do
			while true do
				while true do
					if loc_2 == 0 then
						break
					end
					if loc_4 ~= loc_6 then
						break
					end
					if rt_load_i32(memory_at_0, loc_1 + 68) == 0 then
						while true do
							loc_7 = rt_load_i32(memory_at_0, loc_2 + 24)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 24)
					loc_8 = rt_load_i32(memory_at_0, loc_1 + 72)
					if loc_7 == loc_8 then
						desired = 2
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
					loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 64), 1)
					loc_9 = rt_load_i32(memory_at_0, loc_1 + 60)
					loc_4 = 0
					while true do
						loc_3 = bit_and(loc_5, loc_6)
						loc_10 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_9)
						loc_5 = rt_load_i32(memory_at_0, loc_10)
						if loc_5 ~= loc_7 then
							while true do
								if loc_5 == loc_8 then
									desired = 2
									break
								end
								loc_4 = rt_add_i32(loc_4, 1)
								loc_5 = rt_add_i32(loc_3, loc_4)
								if loc_4 <= loc_6 then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_10 + 5) ~= 1 then
						desired = 2
						break
					end
					loc_4 = rt_load_i32_u8(memory_at_0, loc_10 + 4)
					rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
					rt_store_i32_n8(memory_at_0, loc_0 + 4, loc_4)
					rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_2 + 8))
					rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2 + 16))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_2 == 0 then
						break
					end
					if rt_load_i32(memory_at_0, 48620) ~= loc_4 then
						break
					end
					rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(2, 0))
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 24)
					reg_1 = FUNC_LIST[544](loc_4)
					rt_store_i32(memory_at_0, loc_0 + 12, reg_1)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
					rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_2 + 8))
					rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2 + 16))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						while true do
							while true do
								if loc_2 == 0 then
									break
								end
								if rt_load_i32(memory_at_0, 48644) ~= loc_4 then
									break
								end
								rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
								loc_8 = rt_load_i32(memory_at_0, loc_2 + 24)
								loc_4 = rt_load_i32(memory_at_0, loc_8 + 4)
								while true do
									if loc_8 ~= 0 then
										while true do
											loc_5 = loc_8
											if loc_4 == loc_6 then
												desired = 7
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_7 = rt_load_i32(memory_at_0, 48692)
									loc_3 = rt_load_i32(memory_at_0, 48572)
									loc_5 = loc_8
									while true do
										if bit_and((if loc_3 ~= loc_4 then 1 else 0), (if loc_4 ~= loc_7 then 1 else 0)) ~= 0 then
											desired = 5
											break
										end
										loc_5 = rt_load_i32(memory_at_0, loc_5 + 24)
										loc_4 = rt_load_i32(memory_at_0, loc_5 + 4)
										if loc_5 == 0 then
											continue
										end
										if loc_4 ~= loc_6 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32(memory_at_0, loc_1 + 68) == 0 then
									desired = 5
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_5 + 24)
								loc_9 = rt_load_i32(memory_at_0, loc_1 + 72)
								if loc_7 == loc_9 then
									desired = 5
									break
								end
								loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
								loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 64), 1)
								loc_10 = rt_load_i32(memory_at_0, loc_1 + 60)
								loc_4 = 0
								while true do
									loc_3 = bit_and(loc_5, loc_6)
									loc_12 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_10)
									loc_5 = rt_load_i32(memory_at_0, loc_12)
									if loc_5 ~= loc_7 then
										while true do
											if loc_5 == loc_9 then
												desired = 5
												break
											end
											loc_4 = rt_add_i32(loc_4, 1)
											loc_5 = rt_add_i32(loc_3, loc_4)
											if loc_4 <= loc_6 then
												desired = 7
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_12 + 5) ~= 1 then
									desired = 5
									break
								end
								loc_5 = rt_load_i32_u8(memory_at_0, loc_12 + 4)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									while true do
										while true do
											if loc_2 == 0 then
												break
											end
											if rt_load_i32(memory_at_0, 48652) ~= loc_4 then
												break
											end
											loc_9 = rt_load_i32(memory_at_0, loc_2 + 24)
											loc_4 = rt_load_i32(memory_at_0, loc_9 + 4)
											while true do
												if loc_9 ~= 0 then
													while true do
														loc_5 = loc_9
														if loc_4 == loc_6 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_8 = rt_load_i32(memory_at_0, 48692)
												loc_7 = rt_load_i32(memory_at_0, 48572)
												loc_5 = loc_9
												while true do
													if bit_and((if loc_4 ~= loc_7 then 1 else 0), (if loc_4 ~= loc_8 then 1 else 0)) ~= 0 then
														desired = 8
														break
													end
													loc_5 = rt_load_i32(memory_at_0, loc_5 + 24)
													loc_4 = rt_load_i32(memory_at_0, loc_5 + 4)
													if loc_5 == 0 then
														continue
													end
													if loc_4 ~= loc_6 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_load_i32(memory_at_0, loc_1 + 68) == 0 then
												desired = 8
												break
											end
											loc_8 = rt_load_i32(memory_at_0, loc_5 + 24)
											loc_10 = rt_load_i32(memory_at_0, loc_1 + 72)
											if loc_8 == loc_10 then
												desired = 8
												break
											end
											loc_5 = bit_xor(rt_shr_u32(loc_8, 4), rt_shr_u32(loc_8, 9))
											loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 64), 1)
											loc_12 = rt_load_i32(memory_at_0, loc_1 + 60)
											loc_4 = 0
											while true do
												loc_7 = bit_and(loc_5, loc_6)
												loc_13 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_12)
												loc_5 = rt_load_i32(memory_at_0, loc_13)
												if loc_5 ~= loc_8 then
													while true do
														if loc_5 == loc_10 then
															desired = 8
															break
														end
														loc_4 = rt_add_i32(loc_4, 1)
														loc_5 = rt_add_i32(loc_7, loc_4)
														if loc_4 <= loc_6 then
															desired = 10
															break
														end
														desired = 8
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_load_i32_u8(memory_at_0, loc_13 + 5) ~= 1 then
												desired = 8
												break
											end
											loc_5 = rt_load_i32_u8(memory_at_0, loc_13 + 4)
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
										rt_store_i64(memory_at_0, loc_0 + 24, rt_i64_ZERO)
										rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
										rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_1 + 624)
									loc_4 = rt_add_i32(loc_5, 1)
									if loc_4 >= 256 then
										desired = 6
										break
									end
									rt_store_i32(memory_at_0, loc_1 + 624, loc_4)
									loc_6 = rt_load_i32(memory_at_0, loc_1 + 628)
									rt_store_i32(memory_at_0, loc_1 + 628, (if loc_4 < loc_6 then loc_6 else loc_4))
									FUNC_LIST[229](loc_1, loc_9, bit_and(loc_5, 255), 1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[258](loc_0, loc_1, bit_and(loc_5, 255), rt_load_i32(memory_at_0, loc_2 + 28), loc_3)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i64(memory_at_0, loc_11, rt_i64_from_u32(1, 255))
							FUNC_LIST[173](rt_add_i32(loc_9, 8), 5876, loc_11)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 624)
						loc_4 = rt_add_i32(loc_5, 1)
						if loc_4 >= 256 then
							desired = 3
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 624, loc_4)
						loc_6 = rt_load_i32(memory_at_0, loc_1 + 628)
						rt_store_i32(memory_at_0, loc_1 + 628, (if loc_4 < loc_6 then loc_6 else loc_4))
						FUNC_LIST[229](loc_1, loc_8, bit_and(loc_5, 255), 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32_n8(memory_at_0, loc_0 + 4, loc_5)
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 28)
					reg_1 = FUNC_LIST[544](loc_4)
					rt_store_i32(memory_at_0, loc_0 + 12, reg_1)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
					loc_4 = rt_add_i32(loc_0, 16)
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 16))
					rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_2 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i64(memory_at_0, loc_11 + 16, rt_i64_from_u32(1, 255))
				FUNC_LIST[173](rt_add_i32(loc_8, 8), 5876, rt_add_i32(loc_11, 16))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_0, 1)
			rt_store_i32(memory_at_0, loc_0 + 12, 0)
			reg_1 = FUNC_LIST[184](loc_1, loc_7)
			rt_store_i32_n8(memory_at_0, loc_0 + 5, reg_1)
			rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_2 + 8))
			rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2 + 16))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_11, 32)
		break
	end
end
FUNC_LIST[237] = --[[ Luau::Compiler::resolveAssignConflicts(Luau::AstStat*, std::__2::vector<Luau::Compiler::Assignment, std::__2::allocator<Luau::Compiler::Assignment>>&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_7
		rt_store_i64(memory_at_0, loc_7 + 24, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_7 + 32, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_7 + 40, rt_i64_ZERO)
		loc_9 = rt_add_i32(loc_7, 48)
		rt_store_i64(memory_at_0, loc_9, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_7 + 56, rt_i64_ZERO)
		rt_store_i64(memory_at_0, rt_sub_i32(loc_7, 4294967232), rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_7 + 72, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_7 + 16, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_7 + 12, loc_0)
		rt_store_i32(memory_at_0, loc_7 + 8, 12120)
		while true do
			loc_8 = rt_load_i32(memory_at_0, loc_2 + 4)
			loc_4 = rt_load_i32(memory_at_0, loc_2)
			if loc_8 == loc_4 then
				while true do
					loc_5 = rt_div_i32(rt_sub_i32(loc_8, loc_4), 36)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_5 = rt_add_i32(rt_mul_i32(loc_6, 36), loc_4)
				if rt_load_i32(memory_at_0, loc_5) == 0 then
					while true do
						if loc_6 < rt_load_i32(memory_at_0, loc_3 + 4) then
							while true do
								loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(loc_6, 2)))
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, rt_add_i32(loc_7, 8))
								loc_8 = rt_load_i32(memory_at_0, loc_2 + 4)
								reg_0 = rt_load_i32(memory_at_0, loc_2)
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_4
								break
							end
							if desired then
								break
							end
						end
						loc_4 = reg_0
						loc_5 = rt_load_i32_u8(memory_at_0, loc_5 + 4)
						loc_10 = rt_add_i32(bit_and(rt_shr_u32(loc_5, 3), 28), loc_9)
						rt_store_i32(memory_at_0, loc_10, bit_or(rt_load_i32(memory_at_0, loc_10), rt_shl_i32(1, loc_5)))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_6 = rt_add_i32(loc_6, 1)
				loc_5 = rt_div_i32(rt_sub_i32(loc_8, loc_4), 36)
				if loc_6 < loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_4 == loc_8 then
				while true do
					loc_8 = loc_4
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = 0
			while true do
				while true do
					if rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_6, 36), loc_4)) == 0 then
						break
					end
					if rt_load_i32(memory_at_0, loc_3 + 4) <= loc_6 then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(loc_6, 2)))
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, rt_add_i32(loc_7, 8))
					loc_4 = rt_load_i32(memory_at_0, loc_2)
					loc_8 = rt_load_i32(memory_at_0, loc_2 + 4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_6 = rt_add_i32(loc_6, 1)
				loc_5 = rt_div_i32(rt_sub_i32(loc_8, loc_4), 36)
				if loc_6 < loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_5 < rt_load_i32(memory_at_0, loc_3 + 4) then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(loc_5, 2)))
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, rt_add_i32(loc_7, 8))
						loc_5 = rt_add_i32(loc_5, 1)
						if loc_5 < rt_load_i32(memory_at_0, loc_3 + 4) then
							continue
						end
						break
					end
					if desired then
						break
					end
					loc_8 = rt_load_i32(memory_at_0, loc_2 + 4)
					reg_0 = rt_load_i32(memory_at_0, loc_2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_4
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = reg_0
			if loc_4 ~= loc_8 then
				while true do
					loc_2 = rt_add_i32(loc_7, 16)
					loc_9 = rt_add_i32(loc_7, 48)
					loc_5 = loc_4
					while true do
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_5)
							if rt_sub_i32(loc_6, 3) > 2 then
								break
							end
							loc_3 = rt_load_i32_u8(memory_at_0, loc_5 + 4)
							loc_10 = rt_shl_i32(1, loc_3)
							loc_3 = rt_shl_i32(rt_shr_u32(loc_3, 5), 2)
							if bit_and(loc_10, rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_9))) ~= 0 then
								while true do
									loc_3 = rt_add_i32(loc_2, loc_3)
									rt_store_i32(memory_at_0, loc_3, bit_or(loc_10, rt_load_i32(memory_at_0, loc_3)))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							if loc_6 ~= 5 then
								break
							end
							loc_6 = rt_load_i32_u8(memory_at_0, loc_5 + 6)
							loc_3 = rt_shl_i32(1, loc_6)
							loc_6 = rt_shl_i32(rt_shr_u32(loc_6, 5), 2)
							if bit_and(loc_3, rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_9))) == 0 then
								break
							end
							loc_6 = rt_add_i32(loc_2, loc_6)
							rt_store_i32(memory_at_0, loc_6, bit_or(loc_3, rt_load_i32(memory_at_0, loc_6)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_5 = rt_add_i32(loc_5, 36)
						if loc_8 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 624)
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_4) ~= 0 then
								break
							end
							loc_5 = rt_load_i32_u8(memory_at_0, loc_4 + 4)
							if bit_and(rt_shr_u32(rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_5, 3), 28), loc_2)), loc_5), 1) == 0 then
								break
							end
							loc_5 = rt_add_i32(loc_6, 1)
							if loc_5 >= 256 then
								desired = 1
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 624, loc_5)
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 628)
							rt_store_i32(memory_at_0, loc_0 + 628, (if loc_3 > loc_5 then loc_3 else loc_5))
							rt_store_i32_n8(memory_at_0, loc_4 + 32, loc_6)
							loc_6 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_4 = rt_add_i32(loc_4, 36)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_7, 80)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_7, rt_i64_from_u32(1, 255))
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_7)
		error("out of code bounds")
	end
end
FUNC_LIST[238] = --[[ Luau::Compiler::compileExprTempN(Luau::AstExpr*, unsigned char, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
		while true do
			if loc_1 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, 48636) ~= loc_5 then
				break
			end
			FUNC_LIST[211](loc_0, loc_1, loc_2, loc_3, loc_4, 0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_1 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, 48628) ~= loc_5 then
				break
			end
			if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
				while true do
					FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 63, loc_2, bit_and(rt_add_i32(loc_3, 1), 255), 0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = 1
		FUNC_LIST[229](loc_0, loc_1, loc_2, 1)
		if loc_3 >= 2 then
			while true do
				while true do
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 2, bit_and(rt_add_i32(loc_2, loc_5), 255), 0, 0)
					loc_5 = rt_add_i32(loc_5, 1)
					if loc_3 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[239] = --[[ Luau::Compiler::compileLValueUse(Luau::Compiler::LValue const&, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_4
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 16), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 1, 2, 3, 4, 5, }
											end)()
										end
										temp = br_map[1][rt_load_i32(memory_at_0, loc_1)] or 6
										if temp < 3 then
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 6
												break
											else
												desired = 7
												break
											end
										elseif temp > 3 then
											if temp < 5 then
												desired = 4
												break
											elseif temp > 5 then
												desired = 2
												break
											else
												desired = 3
												break
											end
										else
											desired = 5
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
									loc_0 = rt_load_i32(memory_at_0, loc_0)
									if loc_3 ~= 0 then
										while true do
											FUNC_LIST[90](loc_0, 6, bit_and(loc_1, 255), loc_2, 0)
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[90](loc_0, 6, loc_2, bit_and(loc_1, 255), 0)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_3 ~= 0 then 10 else 9), loc_2, rt_load_i32_u8(memory_at_0, loc_1 + 5), 0)
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = rt_load_i32(memory_at_0, loc_0)
							loc_8 = rt_load_i64(memory_at_0, loc_1 + 8)
							rt_store_i64(memory_at_0, loc_4 + 8, loc_8)
							rt_store_i64(memory_at_0, loc_4 + 56, loc_8)
							reg_0 = FUNC_LIST[80](loc_5, rt_add_i32(loc_4, 8))
							loc_5 = reg_0
							if rt_lt_i32(loc_5, 0) then
								desired = 1
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0)
							loc_8 = rt_load_i64(memory_at_0, loc_1 + 8)
							rt_store_i64(memory_at_0, loc_4, loc_8)
							rt_store_i64(memory_at_0, loc_4 + 48, loc_8)
							reg_4 = FUNC_LIST[115](loc_4)
							FUNC_LIST[90](loc_6, (if loc_3 ~= 0 then 8 else 7), loc_2, 0, bit_and(reg_4, 255))
							FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_5)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_load_i32(memory_at_0, loc_0)
						loc_8 = rt_load_i64(memory_at_0, loc_1 + 8)
						rt_store_i64(memory_at_0, loc_4 + 24, loc_8)
						rt_store_i64(memory_at_0, loc_4 + 40, loc_8)
						reg_0 = FUNC_LIST[80](loc_5, rt_add_i32(loc_4, 24))
						loc_5 = reg_0
						if rt_lt_i32(loc_5, 0) then
							desired = 1
							break
						end
						loc_6 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
						loc_7 = rt_load_i32(memory_at_0, loc_0)
						loc_8 = rt_load_i64(memory_at_0, loc_1 + 8)
						rt_store_i64(memory_at_0, loc_4 + 16, loc_8)
						rt_store_i64(memory_at_0, loc_4 + 32, loc_8)
						reg_4 = FUNC_LIST[115](rt_add_i32(loc_4, 16))
						FUNC_LIST[90](loc_7, (if loc_3 ~= 0 then 16 else 15), loc_2, loc_6, bit_and(reg_4, 255))
						FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_3 ~= 0 then 18 else 17), loc_2, rt_load_i32_u8(memory_at_0, loc_1 + 4), rt_load_i32_u8(memory_at_0, loc_1 + 7))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_3 ~= 0 then 14 else 13), loc_2, rt_load_i32_u8(memory_at_0, loc_1 + 4), rt_load_i32_u8(memory_at_0, loc_1 + 6))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_sub_i32(loc_4, 4294967232)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 16), 4468, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[240] = --[[ Luau::Compiler::unrollConcats(std::__2::vector<Luau::AstExpr*, std::__2::allocator<Luau::AstExpr*>>&) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 4)
					loc_1 = rt_load_i32(memory_at_0, loc_2)
					if loc_1 == 0 then
						break
					end
					loc_8 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_8 ~= rt_load_i32(memory_at_0, 48684) then
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 24) ~= 7 then
							desired = 3
							break
						end
						rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1 + 28))
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
							if loc_2 < loc_6 then
								while true do
									rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1 + 32))
									loc_1 = rt_add_i32(loc_2, 4)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_3 = rt_load_i32(memory_at_0, loc_0)
							loc_9 = rt_shr_i32(rt_sub_i32(loc_2, loc_3), 2)
							loc_4 = rt_add_i32(loc_9, 1)
							if loc_4 >= 1073741824 then
								desired = 2
								break
							end
							loc_5 = rt_sub_i32(loc_6, loc_3)
							loc_7 = rt_shr_i32(loc_5, 1)
							loc_5 = (if loc_5 >= 2147483644 then 1073741823 else (if loc_4 < loc_7 then loc_7 else loc_4))
							if loc_5 ~= 0 then
								while true do
									if loc_5 >= 1073741824 then
										desired = 1
										break
									end
									reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 2))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = reg_0
							loc_4 = rt_add_i32(loc_7, rt_shl_i32(loc_9, 2))
							rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_1 + 32))
							loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_7)
							loc_1 = rt_add_i32(loc_4, 4)
							if loc_2 ~= loc_3 then
								while true do
									while true do
										loc_4 = rt_sub_i32(loc_4, 4)
										loc_2 = rt_sub_i32(loc_2, 4)
										rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_2))
										if loc_2 ~= loc_3 then
											continue
										end
										break
									end
									if desired then
										break
									end
									loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
									reg_0 = rt_load_i32(memory_at_0, loc_0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_3 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 8, loc_5)
							rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
							rt_store_i32(memory_at_0, loc_0, loc_4)
							if loc_3 == 0 then
								break
							end
							FUNC_LIST[653](loc_3, rt_sub_i32(loc_6, loc_3))
							loc_8 = rt_load_i32(memory_at_0, 48684)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
						loc_2 = rt_sub_i32(loc_1, 4)
						loc_1 = rt_load_i32(memory_at_0, loc_2)
						if loc_1 == 0 then
							desired = 3
							break
						end
						if loc_8 == rt_load_i32(memory_at_0, loc_1 + 4) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[241] = --[[ Luau::Compiler::compileExprConstant(Luau::AstExpr*, Luau::Compile::Constant const*, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0.0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 2, 3, 4, }
										end)()
									end
									temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2), 1)] or 5
									if temp < 3 then
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									elseif temp > 3 then
										if temp < 5 then
											desired = 3
											break
										else
											desired = 2
											break
										end
									else
										desired = 4
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 2, loc_3, 0, 0)
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 3, loc_3, rt_load_i32_u8(memory_at_0, loc_2 + 8), 0)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_4 = rt_load_f64(memory_at_0, loc_2 + 8)
							if (if loc_4 >= -3.2768e4 then 1 else 0) == 0 then
								break
							end
							if (if loc_4 <= 3.2767e4 then 1 else 0) == 0 then
								break
							end
							while true do
								if math_abs(loc_4) < 2.147483648e9 then
									while true do
										reg_0 = rt_truncate_f64(loc_4)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = 2147483648
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = reg_0
							if rt_convert_f64_i32(loc_2) ~= loc_4 then
								break
							end
							if bit_and((if rt_lt_i64(rt_reinterpret_i64_f64(loc_4), rt_i64_ZERO) then 1 else 0), (if loc_4 == 0e0 then 1 else 0)) ~= 0 then
								break
							end
							FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 4, loc_3, loc_2)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[78](rt_load_i32(memory_at_0, loc_0), loc_4)
						loc_2 = reg_0
						if rt_lt_i32(loc_2, 0) then
							desired = 1
							break
						end
						loc_1 = rt_load_i32(memory_at_0, loc_0)
						if loc_2 <= 32767 then
							while true do
								FUNC_LIST[91](loc_1, 5, loc_3, rt_extend_i32_n16(loc_2))
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[91](loc_1, 66, loc_3, 0)
						FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[79](rt_load_i32(memory_at_0, loc_0), rt_load_f32(memory_at_0, loc_2 + 8), rt_load_f32(memory_at_0, loc_2 + 12), rt_load_f32(memory_at_0, loc_2 + 16), rt_load_f32(memory_at_0, loc_2 + 20))
					loc_2 = reg_0
					loc_1 = rt_load_i32(memory_at_0, loc_0)
					if rt_le_i32(loc_2, 32767) then
						while true do
							FUNC_LIST[91](loc_1, 5, loc_3, rt_extend_i32_n16(loc_2))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[91](loc_1, 66, loc_3, 0)
					FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0)
				loc_7 = rt_rotl_i64(rt_load_i64(memory_at_0, loc_2 + 4), rt_i64_from_u32(32, 0))
				rt_store_i64(memory_at_0, loc_5 + 8, loc_7)
				rt_store_i64(memory_at_0, loc_5, loc_7)
				reg_0 = FUNC_LIST[80](loc_6, loc_5)
				loc_2 = reg_0
				if rt_lt_i32(loc_2, 0) then
					desired = 1
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_0)
				if loc_2 <= 32767 then
					while true do
						FUNC_LIST[91](loc_1, 5, loc_3, rt_extend_i32_n16(loc_2))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[91](loc_1, 66, loc_3, 0)
				FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[242] = --[[ Luau::Compiler::shouldShareClosure(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 52)
			if loc_5 == loc_1 then
				break
			end
			loc_4 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), 1)
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 40)
			while true do
				loc_8 = bit_and(loc_4, loc_6)
				loc_3 = rt_add_i32(rt_mul_i32(loc_8, 40), loc_7)
				loc_4 = rt_load_i32(memory_at_0, loc_3)
				if loc_4 ~= loc_1 then
					while true do
						loc_3 = 0
						if loc_4 == loc_5 then
							desired = 1
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_8, loc_2)
						if loc_2 <= loc_6 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = rt_load_i32(memory_at_0, loc_3 + 12)
			loc_11 = rt_load_i32(memory_at_0, loc_3 + 16)
			if loc_9 == loc_11 then
				while true do
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_3 = 0
				if rt_load_i32(memory_at_0, loc_0 + 108) == 0 then
					desired = 1
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_9)
				loc_12 = rt_load_i32(memory_at_0, loc_0 + 112)
				if loc_5 == loc_12 then
					desired = 1
					break
				end
				loc_4 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
				loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 100)
				loc_2 = 0
				while true do
					loc_8 = bit_and(loc_4, loc_6)
					loc_10 = rt_add_i32(rt_mul_i32(loc_8, 12), loc_7)
					loc_4 = rt_load_i32(memory_at_0, loc_10)
					if loc_4 ~= loc_5 then
						while true do
							if loc_4 == loc_12 then
								desired = 1
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_4 = rt_add_i32(loc_8, loc_2)
							if loc_2 <= loc_6 then
								desired = 3
								break
							end
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_10 + 8) ~= 0 then
					desired = 1
					break
				end
				while true do
					if rt_load_i32(memory_at_0, loc_5 + 24) == 0 then
						while true do
							if rt_load_i32(memory_at_0, loc_5 + 28) == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_10 + 4)
					if loc_2 == 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48660) then
						desired = 1
						break
					end
					if loc_1 == loc_2 then
						break
					end
					reg_0 = FUNC_LIST[242](loc_0, loc_2)
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = 1
				loc_9 = rt_add_i32(loc_9, 4)
				if loc_11 ~= loc_9 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[243] = --[[ Luau::Compiler::compileCompareJump(Luau::AstExprBinary*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_12 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_12
		rt_store_i32(memory_at_0, loc_12 + 8, loc_0)
		rt_store_i32(memory_at_0, loc_12 + 12, rt_load_i32(memory_at_0, loc_0 + 624))
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 32)
		loc_10 = rt_load_i32(memory_at_0, loc_1 + 28)
		while true do
			while true do
				while true do
					if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
						break
					end
					loc_13 = bit_and(rt_load_i32(memory_at_0, loc_1 + 24), 4294967294)
					while true do
						while true do
							while true do
								loc_11 = rt_load_i32(memory_at_0, loc_0 + 132)
								if loc_6 ~= loc_11 then
									while true do
										loc_4 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
										loc_14 = rt_load_i32(memory_at_0, loc_0 + 124)
										loc_5 = rt_sub_i32(loc_14, 1)
										loc_9 = rt_load_i32(memory_at_0, loc_0 + 120)
										while true do
											while true do
												loc_7 = bit_and(loc_4, loc_5)
												loc_8 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_9)
												loc_4 = rt_load_i32(memory_at_0, loc_8)
												if loc_4 ~= loc_6 then
													while true do
														loc_8 = 0
														if loc_4 == loc_11 then
															desired = 8
															break
														end
														loc_3 = rt_add_i32(loc_3, 1)
														loc_4 = rt_add_i32(loc_7, loc_3)
														if loc_3 <= loc_5 then
															desired = 9
															break
														end
														desired = 8
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
															continue
														end
														break
													end
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_8 = (if rt_load_i32(memory_at_0, loc_8 + 8) ~= 0 then 1 else 0)
											break
										end
										if desired then
											break
										end
										if loc_13 ~= 8 then
											desired = 5
											break
										end
										if loc_8 ~= 0 then
											desired = 5
											break
										end
										if loc_10 ~= loc_11 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_13 ~= 8 then
									desired = 3
									break
								end
								if loc_10 == loc_11 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = bit_xor(rt_shr_u32(loc_10, 4), rt_shr_u32(loc_10, 9))
							loc_14 = rt_load_i32(memory_at_0, loc_0 + 124)
							loc_5 = rt_sub_i32(loc_14, 1)
							loc_9 = rt_load_i32(memory_at_0, loc_0 + 120)
							loc_3 = 0
							while true do
								loc_7 = bit_and(loc_4, loc_5)
								loc_8 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_9)
								loc_4 = rt_load_i32(memory_at_0, loc_8)
								if loc_4 ~= loc_10 then
									while true do
										if loc_4 == loc_11 then
											desired = 3
											break
										end
										loc_3 = rt_add_i32(loc_3, 1)
										loc_4 = rt_add_i32(loc_7, loc_3)
										if loc_3 <= loc_5 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_8 + 8) == 0 then
								desired = 3
								break
							end
							loc_7 = loc_10
							loc_10 = loc_6
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_8 == 0 then
							desired = 3
							break
						end
						loc_7 = loc_6
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_7 == loc_11 then
							while true do
								loc_8 = 0
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
						loc_5 = rt_sub_i32(loc_14, 1)
						loc_3 = 0
						while true do
							loc_6 = bit_and(loc_4, loc_5)
							loc_8 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_9)
							loc_4 = rt_load_i32(memory_at_0, loc_8)
							if loc_4 ~= loc_7 then
								while true do
									loc_8 = 0
									if loc_4 == loc_11 then
										desired = 4
										break
									end
									loc_3 = rt_add_i32(loc_3, 1)
									loc_4 = rt_add_i32(loc_6, loc_3)
									if loc_3 <= loc_5 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = (if rt_load_i32(memory_at_0, loc_8 + 8) == 4 then 1 else 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[244](loc_0, loc_10, rt_add_i32(loc_12, 8))
					loc_11 = reg_0
					if loc_13 ~= 8 then
						while true do
							loc_6 = loc_7
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 ~= 0 then
						while true do
							loc_6 = loc_7
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = 0
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
							break
						end
						loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
						if loc_10 == loc_7 then
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
						loc_9 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
						loc_8 = rt_load_i32(memory_at_0, loc_0 + 120)
						loc_3 = 0
						while true do
							loc_6 = bit_and(loc_5, loc_9)
							loc_4 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_8)
							loc_5 = rt_load_i32(memory_at_0, loc_4)
							if loc_7 == loc_5 then
								desired = 4
								break
							end
							loc_4 = 0
							if loc_5 == loc_10 then
								desired = 4
								break
							end
							loc_3 = rt_add_i32(loc_3, 1)
							loc_5 = rt_add_i32(loc_6, loc_3)
							if loc_3 <= loc_9 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_9 = rt_load_i32(memory_at_0, loc_1 + 24)
					loc_6 = 79
					loc_3 = 77
					loc_5 = 0
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_4 = (if loc_4 ~= 0 then rt_add_i32(loc_4, 8) else 0)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 4, 3, 1, 2, 0, }
											end)()
										end
										temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_4), 1)] or 2
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											if temp < 4 then
												desired = 5
												break
											else
												desired = 4
												break
											end
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_6 = 80
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = loc_6
								reg_0 = FUNC_LIST[245](loc_0, loc_7)
								loc_5 = reg_0
								if rt_ge_i32(loc_5, 0) then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_load_i32_u8(memory_at_0, loc_4 + 8)
						loc_3 = 78
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
					loc_4 = reg_0
					FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), loc_3, loc_11, 0)
					FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), bit_or((if bit_xor((if loc_9 ~= 9 then 1 else 0), loc_2) ~= 0 then 2147483648 else 0), loc_5))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[244](loc_0, loc_10, rt_add_i32(loc_12, 8))
				loc_11 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = 0
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 0, 1, 2, 3, 2, 3, }
									end)()
								end
								temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 24), 8)] or 4
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									if temp < 4 then
										desired = 3
										break
									else
										desired = 2
										break
									end
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = (if loc_2 ~= 0 then 27 else 30)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = (if loc_2 ~= 0 then 30 else 27)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = (if loc_2 ~= 0 then 32 else 29)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = (if loc_2 ~= 0 then 31 else 28)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[244](loc_0, loc_6, rt_add_i32(loc_12, 8))
			loc_5 = reg_0
			reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
			loc_4 = reg_0
			loc_9 = rt_load_i32(memory_at_0, loc_0)
			if bit_and(rt_load_i32(memory_at_0, loc_1 + 24), 4294967294) == 12 then
				while true do
					FUNC_LIST[91](loc_9, loc_3, loc_5, 0)
					FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_11)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[91](loc_9, loc_3, loc_11, 0)
			FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_5)
			break
		end
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 8) + 624, rt_load_i32(memory_at_0, loc_12 + 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_12, 16)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[244] = --[[ Luau::Compiler::compileExprAuto(Luau::AstExpr*, Luau::Compiler::RegScope&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
		loc_7 = rt_load_i32(memory_at_0, 48612)
		while true do
			while true do
				while true do
					while true do
						if loc_1 ~= 0 then
							while true do
								loc_3 = loc_1
								if loc_4 == loc_7 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_load_i32(memory_at_0, 48692)
						loc_5 = rt_load_i32(memory_at_0, 48572)
						loc_3 = loc_1
						while true do
							if bit_and((if loc_4 ~= loc_5 then 1 else 0), (if loc_4 ~= loc_6 then 1 else 0)) ~= 0 then
								desired = 3
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
							loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
							if loc_3 == 0 then
								continue
							end
							if loc_4 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_3 + 24)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 72)
					if loc_6 == loc_10 then
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
					loc_11 = rt_load_i32(memory_at_0, loc_0 + 60)
					loc_4 = 0
					while true do
						loc_7 = bit_and(loc_3, loc_5)
						loc_9 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_11)
						loc_3 = rt_load_i32(memory_at_0, loc_9)
						if loc_3 ~= loc_6 then
							while true do
								if loc_3 == loc_10 then
									desired = 3
									break
								end
								loc_4 = rt_add_i32(loc_4, 1)
								loc_3 = rt_add_i32(loc_7, loc_4)
								if loc_4 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_9 + 5) ~= 1 then
						break
					end
					loc_3 = rt_load_i32_u8(memory_at_0, loc_9 + 4)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 624)
				loc_4 = rt_add_i32(loc_3, 1)
				if loc_4 >= 256 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 624, loc_4)
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 628)
				rt_store_i32(memory_at_0, loc_0 + 628, (if loc_4 < loc_5 then loc_5 else loc_4))
				FUNC_LIST[229](loc_0, loc_1, bit_and(loc_3, 255), 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
			reg_0 = bit_and(loc_3, 255)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_8, rt_i64_from_u32(1, 255))
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_8)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[245] = --[[ Luau::Compiler::getConstantIndex(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = 4294967295
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
				break
			end
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 132)
			if loc_8 == loc_1 then
				break
			end
			loc_6 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 120)
			while true do
				loc_10 = bit_and(loc_6, loc_7)
				loc_2 = rt_add_i32(rt_shl_i32(loc_10, 5), loc_9)
				loc_6 = rt_load_i32(memory_at_0, loc_2)
				if loc_6 ~= loc_1 then
					while true do
						if loc_6 == loc_8 then
							desired = 1
							break
						end
						loc_3 = rt_add_i32(loc_3, 1)
						loc_6 = rt_add_i32(loc_10, loc_3)
						if loc_3 <= loc_7 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 2, 3, 4, }
										end)()
									end
									temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 8), 1)] or 6
									if temp < 3 then
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									elseif temp > 3 then
										if temp < 6 then
											desired = 3
											break
										else
											desired = 1
											break
										end
									else
										desired = 4
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[76](rt_load_i32(memory_at_0, loc_0))
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[77](rt_load_i32(memory_at_0, loc_0), rt_load_i32_u8(memory_at_0, loc_2 + 16))
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[78](rt_load_i32(memory_at_0, loc_0), rt_load_f64(memory_at_0, loc_2 + 16))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[79](rt_load_i32(memory_at_0, loc_0), rt_load_f32(memory_at_0, loc_2 + 16), rt_load_f32(memory_at_0, loc_2 + 20), rt_load_f32(memory_at_0, loc_2 + 24), rt_load_f32(memory_at_0, loc_2 + 28))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0)
				loc_11 = rt_rotl_i64(rt_load_i64(memory_at_0, loc_2 + 12), rt_i64_from_u32(32, 0))
				rt_store_i64(memory_at_0, loc_4 + 8, loc_11)
				rt_store_i64(memory_at_0, loc_4, loc_11)
				reg_0 = FUNC_LIST[80](loc_3, loc_4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			if rt_ge_i32(loc_5, 0) then
				break
			end
			FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[246] = --[[ Luau::Compiler::compileExprGlobal(Luau::AstExprGlobal*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 4), 0) then
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 24)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 88) == 0 then
							break
						end
						loc_8 = rt_load_i32(memory_at_0, loc_0 + 92)
						if loc_8 == loc_6 then
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
						loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 84), 1)
						loc_9 = rt_load_i32(memory_at_0, loc_0 + 80)
						while true do
							loc_10 = bit_and(loc_5, loc_7)
							loc_11 = rt_add_i32(rt_shl_i32(loc_10, 3), loc_9)
							loc_5 = rt_load_i32(memory_at_0, loc_11)
							if loc_5 ~= loc_6 then
								while true do
									if loc_5 == loc_8 then
										desired = 4
										break
									end
									loc_4 = rt_add_i32(loc_4, 1)
									loc_5 = rt_add_i32(loc_10, loc_4)
									if loc_4 <= loc_7 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_11 + 4) == 2 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					rt_store_i32(memory_at_0, loc_3 + 40, loc_6)
					reg_1 = FUNC_LIST[544](loc_6)
					rt_store_i32(memory_at_0, loc_3 + 44, reg_1)
					rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_3 + 40))
					reg_0 = FUNC_LIST[80](loc_4, rt_add_i32(loc_3, 16))
					loc_4 = reg_0
					if rt_lt_i32(loc_4, 0) then
						desired = 1
						break
					end
					if loc_4 > 1023 then
						break
					end
					reg_0 = FUNC_LIST[112](loc_4)
					loc_5 = reg_0
					reg_0 = FUNC_LIST[81](rt_load_i32(memory_at_0, loc_0), loc_5)
					loc_4 = reg_0
					if loc_4 > 32767 then
						break
					end
					FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 12, loc_2, rt_extend_i32_n16(loc_4))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_0)
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
				reg_1 = FUNC_LIST[544](loc_4)
				loc_7 = reg_1
				rt_store_i32(memory_at_0, loc_3 + 36, loc_7)
				rt_store_i32(memory_at_0, loc_3 + 32, loc_4)
				rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_3 + 32))
				reg_0 = FUNC_LIST[80](loc_5, rt_add_i32(loc_3, 8))
				loc_5 = reg_0
				if rt_lt_i32(loc_5, 0) then
					desired = 1
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0)
				rt_store_i32(memory_at_0, loc_3 + 28, loc_7)
				rt_store_i32(memory_at_0, loc_3 + 24, loc_4)
				rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_3 + 24))
				reg_4 = FUNC_LIST[115](loc_3)
				FUNC_LIST[90](loc_6, 7, loc_2, 0, bit_and(reg_4, 255))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_5)
			GLOBAL_LIST[0].value = rt_add_i32(loc_3, 48)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[247] = --[[ Luau::Compiler::compileExprIndexName(Luau::AstExprIndexName*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_3
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
			while true do
				FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 24)
		loc_5 = rt_load_i32(memory_at_0, loc_4 + 4)
		while true do
			while true do
				while true do
					while true do
						while true do
							if loc_4 == 0 then
								break
							end
							if rt_load_i32(memory_at_0, 48644) ~= loc_5 then
								break
							end
							loc_8 = loc_1
							loc_10 = loc_4
							loc_5 = rt_load_i32(memory_at_0, loc_4 + 24)
							loc_4 = loc_5
							if rt_load_i32(memory_at_0, loc_5 + 4) == rt_load_i32(memory_at_0, 48620) then
								desired = 4
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = loc_1
						if rt_load_i32(memory_at_0, 48620) ~= loc_5 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 4), 0) then
						break
					end
					loc_7 = rt_load_i32(memory_at_0, loc_4 + 24)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 88) == 0 then
							break
						end
						loc_11 = rt_load_i32(memory_at_0, loc_0 + 92)
						if loc_11 == loc_7 then
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
						loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 84), 1)
						loc_12 = rt_load_i32(memory_at_0, loc_0 + 80)
						loc_4 = 0
						while true do
							loc_9 = bit_and(loc_5, loc_6)
							loc_13 = rt_add_i32(rt_shl_i32(loc_9, 3), loc_12)
							loc_5 = rt_load_i32(memory_at_0, loc_13)
							if loc_5 ~= loc_7 then
								while true do
									if loc_5 == loc_11 then
										desired = 4
										break
									end
									loc_4 = rt_add_i32(loc_4, 1)
									loc_5 = rt_add_i32(loc_9, loc_4)
									if loc_4 <= loc_6 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_13 + 4) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					rt_store_i32(memory_at_0, loc_3 + 88, loc_7)
					reg_1 = FUNC_LIST[544](loc_7)
					rt_store_i32(memory_at_0, loc_3 + 92, reg_1)
					rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_3 + 88))
					reg_0 = FUNC_LIST[80](loc_4, rt_add_i32(loc_3, 40))
					loc_4 = reg_0
					loc_5 = rt_load_i32(memory_at_0, loc_0)
					loc_6 = rt_load_i32(memory_at_0, loc_10 + 28)
					rt_store_i32(memory_at_0, loc_3 + 80, loc_6)
					reg_1 = FUNC_LIST[544](loc_6)
					rt_store_i32(memory_at_0, loc_3 + 84, reg_1)
					rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_3 + 80))
					reg_0 = FUNC_LIST[80](loc_5, rt_add_i32(loc_3, 32))
					loc_5 = reg_0
					if loc_8 ~= 0 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_0)
							loc_7 = rt_load_i32(memory_at_0, loc_8 + 28)
							rt_store_i32(memory_at_0, loc_3 + 72, loc_7)
							reg_1 = FUNC_LIST[544](loc_7)
							rt_store_i32(memory_at_0, loc_3 + 76, reg_1)
							rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_3 + 72))
							reg_0 = FUNC_LIST[80](loc_6, rt_add_i32(loc_3, 24))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 4294967295
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					while true do
						if rt_lt_i32(bit_or(loc_4, loc_5), 0) then
							break
						end
						if bit_and((if loc_8 ~= 0 then 1 else 0), (if rt_lt_i32(loc_6, 0) then 1 else 0)) ~= 0 then
							break
						end
						if rt_gt_i32(loc_4, 1023) then
							desired = 3
							break
						end
						if rt_gt_i32(loc_5, 1023) then
							desired = 3
							break
						end
						if rt_gt_i32(loc_6, 1023) then
							desired = 3
							break
						end
						while true do
							if loc_8 ~= 0 then
								while true do
									reg_0 = FUNC_LIST[114](loc_4, loc_5, loc_6)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[113](loc_4, loc_5)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = reg_0
						reg_0 = FUNC_LIST[81](rt_load_i32(memory_at_0, loc_0), loc_4)
						loc_5 = reg_0
						if loc_5 > 32767 then
							desired = 3
							break
						end
						FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 12, loc_2, rt_extend_i32_n16(loc_5))
						FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_4)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 64, loc_0)
				rt_store_i32(memory_at_0, loc_3 + 68, rt_load_i32(memory_at_0, loc_0 + 624))
				reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), rt_sub_i32(loc_3, 4294967232))
				loc_5 = reg_0
				if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
					while true do
						FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 32), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0)
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 28)
				reg_1 = FUNC_LIST[544](loc_4)
				loc_7 = reg_1
				rt_store_i32(memory_at_0, loc_3 + 60, loc_7)
				rt_store_i32(memory_at_0, loc_3 + 56, loc_4)
				rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_3 + 56))
				reg_0 = FUNC_LIST[80](loc_6, rt_add_i32(loc_3, 16))
				loc_6 = reg_0
				if rt_lt_i32(loc_6, 0) then
					desired = 1
					break
				end
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				rt_store_i32(memory_at_0, loc_3 + 52, loc_7)
				rt_store_i32(memory_at_0, loc_3 + 48, loc_4)
				rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_3 + 48))
				reg_4 = FUNC_LIST[115](rt_add_i32(loc_3, 8))
				FUNC_LIST[90](loc_9, 15, loc_2, loc_5, bit_and(reg_4, 255))
				FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_6)
				FUNC_LIST[234](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), loc_5, 4, 2)
				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 64) + 624, rt_load_i32(memory_at_0, loc_3 + 68))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_3, 96)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[248] = --[[ Luau::Compiler::compileExprIndexExpr(Luau::AstExprIndexExpr*, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 40, loc_0)
		rt_store_i32(memory_at_0, loc_3 + 44, rt_load_i32(memory_at_0, loc_0 + 624))
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
				loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
				if loc_6 == loc_10 then
					break
				end
				loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
				loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
				loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
				while true do
					loc_8 = bit_and(loc_5, loc_7)
					loc_9 = rt_add_i32(rt_shl_i32(loc_8, 5), loc_11)
					loc_5 = rt_load_i32(memory_at_0, loc_9)
					if loc_5 ~= loc_6 then
						while true do
							if loc_5 == loc_10 then
								desired = 2
								break
							end
							loc_4 = rt_add_i32(loc_4, 1)
							loc_5 = rt_add_i32(loc_8, loc_4)
							if loc_4 <= loc_7 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_9 + 12)
				loc_12 = rt_load_f64(memory_at_0, loc_9 + 16)
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_9 + 8)
					if loc_4 ~= 3 then
						break
					end
					if (if loc_12 >= 1e0 then 1 else 0) == 0 then
						break
					end
					if (if loc_12 <= 2.56e2 then 1 else 0) == 0 then
						break
					end
					while true do
						if math_abs(loc_12) < 2.147483648e9 then
							while true do
								reg_0 = rt_truncate_f64(loc_12)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = 2147483648
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = reg_0
					if rt_convert_f64_i32(loc_4) ~= loc_12 then
						desired = 2
						break
					end
					loc_4 = rt_sub_i32(loc_4, 1)
					reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), rt_add_i32(loc_3, 40))
					loc_5 = reg_0
					if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
						while true do
							FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28) + 8), 1))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 17, loc_2, loc_5, bit_and(loc_4, 255))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_4 ~= 5 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_0)
				rt_store_i32(memory_at_0, loc_3 + 36, loc_5)
				loc_7 = rt_wrap_i32_i64(rt_reinterpret_i64_f64(loc_12))
				rt_store_i32(memory_at_0, loc_3 + 32, loc_7)
				rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_3 + 32))
				reg_0 = FUNC_LIST[80](loc_4, rt_add_i32(loc_3, 16))
				loc_4 = reg_0
				if rt_ge_i32(loc_4, 0) then
					while true do
						reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), rt_add_i32(loc_3, 40))
						loc_8 = reg_0
						if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
							while true do
								FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28) + 8), 1))
								break
							end
							if desired then
								break
							end
						end
						loc_6 = rt_load_i32(memory_at_0, loc_0)
						rt_store_i32(memory_at_0, loc_3 + 28, loc_5)
						rt_store_i32(memory_at_0, loc_3 + 24, loc_7)
						rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_3 + 24))
						reg_4 = FUNC_LIST[115](rt_add_i32(loc_3, 8))
						FUNC_LIST[90](loc_6, 15, loc_2, loc_8, bit_and(reg_4, 255))
						FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_4)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), rt_add_i32(loc_3, 40))
			loc_4 = reg_0
			reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_3, 40))
			loc_5 = reg_0
			FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 13, loc_2, loc_4, loc_5)
			break
		end
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 40) + 624, rt_load_i32(memory_at_0, loc_3 + 44))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 48)
		break
	end
end
FUNC_LIST[249] = --[[ Luau::Compiler::compileExprTable(Luau::AstExprTable*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local loc_26 = 0.0
	local loc_27 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 256)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 252, loc_1)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_16 = rt_load_i32(memory_at_0, loc_1 + 28)
									if loc_16 ~= 0 then
										while true do
											loc_17 = bit_and(loc_16, 1)
											loc_12 = rt_load_i32(memory_at_0, loc_1 + 24)
											if loc_16 ~= 1 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[253](rt_add_i32(loc_0, 160), rt_add_i32(loc_6, 252))
									loc_4 = reg_0
									loc_9 = rt_load_i32(memory_at_0, loc_4)
									loc_5 = rt_load_i32(memory_at_0, loc_0)
									loc_7 = rt_load_i32(memory_at_0, loc_4 + 4)
									rt_store_i32(memory_at_0, loc_6, loc_7)
									FUNC_LIST[107](loc_5, 6089, loc_6)
									loc_11 = rt_load_i32(memory_at_0, loc_0)
									loc_4 = 0
									while true do
										loc_5 = loc_4
										loc_4 = rt_add_i32(loc_5, 1)
										if loc_7 > rt_shl_i32(1, loc_5) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[90](loc_11, 53, loc_2, bit_and((if loc_7 ~= 0 then rt_add_i32(loc_5, 1) else 0), 255), 0)
									FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_9)
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_11 = bit_and(loc_16, 4294967294)
								while true do
									loc_5 = rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_4, 12), loc_12))
									loc_7 = rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(bit_or(loc_4, 1), 12), loc_12))
									loc_13 = rt_add_i32(rt_add_i32((if loc_5 == 1 then 1 else 0), loc_13), (if loc_7 == 1 then 1 else 0))
									loc_8 = rt_add_i32(rt_add_i32((if loc_5 ~= 0 then 1 else 0), loc_8), (if loc_7 ~= 0 then 1 else 0))
									loc_14 = rt_add_i32((if loc_7 == 0 then 1 else 0), rt_add_i32((if loc_5 == 0 then 1 else 0), loc_14))
									loc_4 = rt_add_i32(loc_4, 2)
									loc_9 = rt_add_i32(loc_9, 2)
									if loc_11 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_17 ~= 0 then
								while true do
									loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_4, 12), loc_12))
									loc_13 = rt_add_i32((if loc_4 == 1 then 1 else 0), loc_13)
									loc_14 = rt_add_i32((if loc_4 == 0 then 1 else 0), loc_14)
									reg_0 = rt_add_i32((if loc_4 ~= 0 then 1 else 0), loc_8)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_8
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_8 = reg_0
							while true do
								reg_0 = 0
								if loc_14 ~= 0 then
									break
								end
								reg_0 = 0
								if loc_8 == 0 then
									break
								end
								loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
								loc_18 = rt_load_i32(memory_at_0, loc_0 + 120)
								loc_19 = rt_load_i32(memory_at_0, loc_0 + 132)
								loc_20 = rt_load_i32(memory_at_0, loc_0 + 128)
								while true do
									loc_11 = 0
									while true do
										if loc_20 == 0 then
											break
										end
										loc_17 = rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_10, 12), loc_12) + 4)
										if loc_19 == loc_17 then
											break
										end
										loc_5 = bit_xor(rt_shr_u32(loc_17, 4), rt_shr_u32(loc_17, 9))
										loc_4 = 0
										while true do
											loc_9 = bit_and(loc_5, loc_7)
											loc_21 = rt_add_i32(rt_shl_i32(loc_9, 5), loc_18)
											loc_5 = rt_load_i32(memory_at_0, loc_21)
											if loc_5 ~= loc_17 then
												while true do
													if loc_5 == loc_19 then
														desired = 8
														break
													end
													loc_4 = rt_add_i32(loc_4, 1)
													loc_5 = rt_add_i32(loc_9, loc_4)
													if loc_4 <= loc_7 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if rt_load_i32(memory_at_0, loc_21 + 8) ~= 3 then
											break
										end
										loc_11 = (if rt_load_f64(memory_at_0, loc_21 + 16) == no_op(rt_add_i32(loc_15, 1)) then 1 else 0)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_15 = rt_add_i32(loc_11, loc_15)
									loc_10 = rt_add_i32(loc_10, 1)
									if loc_16 ~= loc_10 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = (if rt_add_i32(loc_13, loc_15) == loc_8 then 1 else 0)
								loc_8 = (if loc_4 ~= 0 then loc_13 else loc_8)
								reg_0 = (if loc_4 ~= 0 then loc_15 else 0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = reg_0
							while true do
								loc_4 = loc_22
								loc_22 = rt_add_i32(loc_4, 1)
								if loc_8 > rt_shl_i32(1, loc_4) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_20 = rt_load_i32(memory_at_0, loc_0 + 624)
							loc_10 = loc_2
							if loc_3 ~= 0 then
								while true do
									reg_0 = loc_10
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									loc_7 = rt_add_i32(loc_20, 1)
									if loc_7 >= 256 then
										desired = 1
										break
									end
									rt_store_i32(memory_at_0, loc_0 + 624, loc_7)
									loc_9 = rt_load_i32(memory_at_0, loc_0 + 628)
									rt_store_i32(memory_at_0, loc_0 + 628, (if loc_7 < loc_9 then loc_9 else loc_7))
									reg_0 = loc_20
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_10 = reg_0
							loc_9 = (if loc_8 ~= 0 then rt_add_i32(loc_4, 1) else 0)
							while true do
								while true do
									if bit_or(loc_5, loc_14) ~= 0 then
										break
									end
									if rt_sub_i32(loc_13, 1) > 31 then
										break
									end
									if loc_8 ~= loc_13 then
										break
									end
									rt_store_i32(memory_at_0, loc_6 + 248, 0)
									loc_4 = 0
									while true do
										loc_5 = rt_load_i32(memory_at_0, loc_0)
										loc_7 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), rt_mul_i32(loc_4, 12)) + 4)
										loc_7 = (if rt_load_i32(memory_at_0, loc_7 + 4) == rt_load_i32(memory_at_0, 48604) then loc_7 else 0)
										loc_27 = rt_load_i64(memory_at_0, loc_7 + 24)
										rt_store_i64(memory_at_0, loc_6 + 112, loc_27)
										rt_store_i64(memory_at_0, loc_6 + 40, loc_27)
										reg_0 = FUNC_LIST[80](loc_5, rt_add_i32(loc_6, 40))
										loc_5 = reg_0
										if rt_lt_i32(loc_5, 0) then
											desired = 2
											break
										end
										loc_7 = rt_load_i32(memory_at_0, loc_6 + 248)
										rt_store_i32(memory_at_0, loc_6 + 248, rt_add_i32(loc_7, 1))
										rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_6, 120), rt_shl_i32(loc_7, 2)), rt_extend_i32_n16(loc_5))
										loc_4 = rt_add_i32(loc_4, 1)
										if loc_4 < rt_load_i32(memory_at_0, loc_1 + 28) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[82](rt_load_i32(memory_at_0, loc_0), rt_add_i32(loc_6, 120))
									loc_4 = reg_0
									if rt_lt_i32(loc_4, 0) then
										desired = 3
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_0)
									rt_store_i32(memory_at_0, loc_6 + 32, loc_13)
									FUNC_LIST[107](loc_5, 6115, rt_add_i32(loc_6, 32))
									loc_5 = rt_load_i32(memory_at_0, loc_0)
									if loc_4 <= 32767 then
										while true do
											FUNC_LIST[91](loc_5, 54, bit_and(loc_10, 255), rt_extend_i32_n16(loc_4))
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[90](loc_5, 53, bit_and(loc_10, 255), bit_and(loc_9, 255), 0)
									FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), 0)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = 0
								while true do
									loc_11 = rt_add_i32(rt_mul_i32(loc_16, 12), loc_12)
									loc_7 = rt_sub_i32(loc_11, 12)
									if loc_7 == 0 then
										break
									end
									if rt_load_i32(memory_at_0, loc_7) ~= 0 then
										break
									end
									loc_4 = (if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_sub_i32(loc_11, 4)) + 4) == rt_load_i32(memory_at_0, 48628) then 4294967295 else 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = rt_add_i32(loc_4, rt_add_i32(loc_5, loc_14))
								while true do
									if loc_8 == 0 then
										while true do
											loc_5 = rt_load_i32(memory_at_0, loc_0)
											rt_store_i32(memory_at_0, loc_6 + 48, loc_4)
											FUNC_LIST[107](loc_5, 5814, rt_add_i32(loc_6, 48))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_5 = rt_load_i32(memory_at_0, loc_0)
									if loc_4 == 0 then
										while true do
											rt_store_i32(memory_at_0, loc_6 + 64, loc_8)
											FUNC_LIST[107](loc_5, 6089, rt_sub_i32(loc_6, 4294967232))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									rt_store_i32(memory_at_0, loc_6 + 84, loc_4)
									rt_store_i32(memory_at_0, loc_6 + 80, loc_8)
									FUNC_LIST[107](loc_5, 5841, rt_add_i32(loc_6, 80))
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 53, bit_and(loc_10, 255), bit_and(loc_9, 255), 0)
								FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_15 = rt_load_i32(memory_at_0, loc_0 + 624)
							loc_16 = (if loc_14 >= 16 then 16 else loc_14)
							loc_4 = rt_add_i32(loc_15, loc_16)
							if loc_4 >= 256 then
								desired = 4
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 624, loc_4)
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 628)
							rt_store_i32(memory_at_0, loc_0 + 628, (if loc_4 < loc_5 then loc_5 else loc_4))
							while true do
								if rt_load_i32(memory_at_0, loc_1 + 28) == 0 then
									break
								end
								loc_23 = loc_6
								loc_22 = rt_add_i32(loc_23, 136)
								loc_24 = loc_6
								loc_14 = rt_add_i32(loc_24, 124)
								loc_25 = loc_14
								loc_13 = rt_add_i32(loc_25, 8)
								loc_8 = 0
								loc_3 = 0
								loc_12 = 1
								loc_4 = 0
								while true do
									loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), rt_mul_i32(loc_8, 12))
									loc_18 = rt_load_i32(memory_at_0, loc_5 + 8)
									loc_5 = rt_load_i32(memory_at_0, loc_5 + 4)
									if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
										while true do
											FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_18 + 8), 1))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									if rt_ge_i32(rt_load_i32(memory_at_0, loc_0 + 16), 2) then
										while true do
											FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 69, 0, 0, 0)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															if loc_4 ~= 0 then
																while true do
																	if bit_and((if loc_5 == 0 then 1 else 0), (if loc_4 ~= loc_16 then 1 else 0)) ~= 0 then
																		desired = 13
																		break
																	end
																	FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 55, bit_and(loc_10, 255), bit_and(loc_15, 255), bit_and(rt_add_i32(loc_4, 1), 255))
																	FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_12)
																	reg_0 = rt_add_i32(loc_4, loc_12)
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															else
																while true do
																	reg_0 = loc_12
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_12 = reg_0
															if loc_5 ~= 0 then
																desired = 12
																break
															end
															loc_4 = 0
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_5 = rt_add_i32(loc_4, loc_15)
														loc_8 = rt_add_i32(loc_8, 1)
														if loc_8 ~= rt_load_i32(memory_at_0, loc_1 + 28) then
															desired = 11
															break
														end
														reg_0 = FUNC_LIST[228](loc_0, loc_18, bit_and(loc_5, 255))
														loc_3 = reg_0
														desired = 10
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													rt_store_i32(memory_at_0, loc_6 + 104, loc_0)
													rt_store_i32(memory_at_0, loc_6 + 108, rt_load_i32(memory_at_0, loc_0 + 624))
													if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
														desired = 9
														break
													end
													loc_17 = rt_load_i32(memory_at_0, loc_0 + 132)
													if loc_17 == loc_5 then
														desired = 9
														break
													end
													loc_7 = bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9))
													loc_9 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
													loc_21 = rt_load_i32(memory_at_0, loc_0 + 120)
													loc_4 = 0
													while true do
														loc_11 = bit_and(loc_7, loc_9)
														loc_19 = rt_add_i32(rt_shl_i32(loc_11, 5), loc_21)
														loc_7 = rt_load_i32(memory_at_0, loc_19)
														if loc_7 ~= loc_5 then
															while true do
																if loc_7 == loc_17 then
																	desired = 9
																	break
																end
																loc_4 = rt_add_i32(loc_4, 1)
																loc_7 = rt_add_i32(loc_11, loc_4)
																if loc_4 <= loc_9 then
																	desired = 12
																	break
																end
																desired = 9
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_7 = rt_load_i32(memory_at_0, loc_19 + 12)
													loc_26 = rt_load_f64(memory_at_0, loc_19 + 16)
													while true do
														while true do
															loc_4 = rt_load_i32(memory_at_0, loc_19 + 8)
															if loc_4 ~= 3 then
																break
															end
															if (if loc_26 >= 1e0 then 1 else 0) == 0 then
																break
															end
															if (if loc_26 <= 2.56e2 then 1 else 0) == 0 then
																break
															end
															while true do
																if math_abs(loc_26) < 2.147483648e9 then
																	while true do
																		reg_0 = rt_truncate_f64(loc_26)
																		desired = 14
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																reg_0 = 2147483648
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_4 = reg_0
															if rt_convert_f64_i32(loc_4) ~= loc_26 then
																desired = 9
																break
															end
															rt_store_i32(memory_at_0, loc_6 + 120, 4)
															rt_store_i32(memory_at_0, loc_25 + 8, 0)
															rt_store_i64(memory_at_0, loc_24 + 124, rt_i64_ZERO)
															rt_store_i32_n8(memory_at_0, loc_6 + 127, rt_sub_i32(loc_4, 1))
															desired = 12
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if loc_4 ~= 5 then
															desired = 9
															break
														end
														rt_store_i64(memory_at_0, loc_6 + 120, rt_i64_from_u32(3, 0))
														rt_store_i32(memory_at_0, loc_6 + 132, loc_7)
														rt_store_i64_n32(memory_at_0, loc_6 + 128, rt_reinterpret_i64_f64(loc_26))
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													rt_store_i32_n8(memory_at_0, loc_6 + 124, loc_10)
													desired = 8
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_7 = rt_load_i32(memory_at_0, loc_0 + 624)
												loc_5 = bit_and(loc_5, 255)
												rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_5, 1))
												FUNC_LIST[229](loc_0, loc_18, loc_5, 1)
												rt_store_i32(memory_at_0, loc_0 + 624, loc_7)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_4 = rt_add_i32(loc_4, 1)
											if rt_load_i32(memory_at_0, loc_1 + 28) > loc_8 then
												desired = 7
												break
											end
											if loc_4 == 0 then
												desired = 6
												break
											end
											FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 55, bit_and(loc_10, 255), bit_and(loc_15, 255), bit_and((if bit_and(loc_3, 1) ~= 0 then 0 else rt_add_i32(loc_4, 1)), 255))
											FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_12)
											desired = 6
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32(memory_at_0, loc_6 + 120, 5)
										rt_store_i32(memory_at_0, loc_25 + 8, 0)
										rt_store_i64(memory_at_0, loc_24 + 124, rt_i64_ZERO)
										rt_store_i32_n8(memory_at_0, loc_6 + 124, loc_10)
										reg_1 = FUNC_LIST[244](loc_0, loc_5, rt_add_i32(loc_6, 104))
										rt_store_i32_n8(memory_at_0, loc_6 + 126, reg_1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									rt_store_i64(memory_at_0, loc_23 + 136, rt_load_i64(memory_at_0, loc_5 + 8))
									rt_store_i64(memory_at_0, loc_23 + 144, rt_load_i64(memory_at_0, loc_5 + 16))
									reg_2 = FUNC_LIST[244](loc_0, loc_18, rt_add_i32(loc_6, 104))
									FUNC_LIST[239](loc_0, rt_add_i32(loc_6, 120), reg_2, 1)
									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 104) + 624, rt_load_i32(memory_at_0, loc_6 + 108))
									loc_4 = 0
									loc_8 = rt_add_i32(loc_8, 1)
									if loc_8 < rt_load_i32(memory_at_0, loc_1 + 28) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = bit_and(loc_10, 255)
							if loc_2 ~= loc_4 then
								while true do
									FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, loc_2, loc_4, 0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_0 + 624, loc_20)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						GLOBAL_LIST[0].value = rt_add_i32(loc_6, 256)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_6 + 20, 255)
					rt_store_i32(memory_at_0, loc_6 + 16, loc_16)
					FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_6, 16))
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[173](rt_add_i32(loc_7, 8), 4468, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_6 + 96, rt_i64_from_u32(1, 255))
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, rt_add_i32(loc_6, 96))
		error("out of code bounds")
	end
end
FUNC_LIST[250] = --[[ Luau::Compiler::compileExprBinary(Luau::AstExprBinary*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 24, loc_0)
		rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_0 + 624))
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_12 = rt_load_i32(memory_at_0, loc_1 + 24)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 3, }
											end)()
										end
										temp = br_map[1][loc_12] or 6
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											if temp < 6 then
												desired = 5
												break
											else
												desired = 2
												break
											end
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										while true do
											while true do
												if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
													break
												end
												loc_6 = rt_load_i32(memory_at_0, loc_1 + 32)
												loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
												if loc_6 == loc_10 then
													break
												end
												loc_4 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
												loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
												loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
												loc_3 = 0
												while true do
													loc_8 = bit_and(loc_4, loc_7)
													loc_9 = rt_add_i32(rt_shl_i32(loc_8, 5), loc_11)
													loc_4 = rt_load_i32(memory_at_0, loc_9)
													if loc_4 ~= loc_6 then
														while true do
															if loc_4 == loc_10 then
																desired = 10
																break
															end
															loc_3 = rt_add_i32(loc_3, 1)
															loc_4 = rt_add_i32(loc_8, loc_3)
															if loc_3 <= loc_7 then
																desired = 11
																break
															end
															desired = 10
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if rt_load_i32(memory_at_0, loc_9 + 8) ~= 3 then
													break
												end
												reg_0 = FUNC_LIST[78](rt_load_i32(memory_at_0, loc_0), rt_load_f64(memory_at_0, loc_9 + 16))
												loc_3 = reg_0
												if rt_lt_i32(loc_3, 0) then
													desired = 1
													break
												end
												if loc_3 < 256 then
													desired = 9
													break
												end
												loc_12 = rt_load_i32(memory_at_0, loc_1 + 24)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if not br_map[2] then
												br_map[2] = (function()
													return { [0] = 1, 6, 1, }
												end)()
											end
											temp = br_map[2][rt_sub_i32(loc_12, 1)] or 6
											if temp < 6 then
												desired = 8
												break
											else
												desired = 3
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_5, 24))
										loc_4 = reg_0
										loc_7 = 0
										loc_8 = rt_load_i32(memory_at_0, loc_0)
										loc_6 = rt_load_i32(memory_at_0, loc_1 + 24)
										reg_0 = loc_8
										if loc_6 <= 6 then
											while true do
												reg_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 2), 13104))
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_1 = loc_7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_7 = reg_1
										FUNC_LIST[90](reg_0, loc_7, loc_2, loc_4, bit_and(loc_3, 255))
										FUNC_LIST[234](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), loc_4, 2, 1)
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
										desired = 3
										break
									end
									loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
									loc_10 = rt_load_i32(memory_at_0, loc_0 + 132)
									if loc_6 == loc_10 then
										desired = 3
										break
									end
									loc_4 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
									loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
									loc_11 = rt_load_i32(memory_at_0, loc_0 + 120)
									loc_3 = 0
									while true do
										loc_8 = bit_and(loc_4, loc_7)
										loc_9 = rt_add_i32(rt_shl_i32(loc_8, 5), loc_11)
										loc_4 = rt_load_i32(memory_at_0, loc_9)
										if loc_4 ~= loc_6 then
											while true do
												if loc_4 == loc_10 then
													desired = 3
													break
												end
												loc_3 = rt_add_i32(loc_3, 1)
												loc_4 = rt_add_i32(loc_8, loc_3)
												if loc_3 <= loc_7 then
													desired = 8
													break
												end
												desired = 3
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_load_i32(memory_at_0, loc_9 + 8) ~= 3 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[78](rt_load_i32(memory_at_0, loc_0), rt_load_f64(memory_at_0, loc_9 + 16))
									loc_3 = reg_0
									if rt_lt_i32(loc_3, 0) then
										desired = 1
										break
									end
									if loc_3 > 255 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), rt_add_i32(loc_5, 24))
									loc_4 = reg_0
									FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if rt_load_i32(memory_at_0, loc_1 + 24) == 1 then 71 else 72), loc_2, bit_and(loc_3, 255), loc_4)
									FUNC_LIST[234](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), loc_4, 2, 1)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_13 = rt_load_i64(memory_at_0, loc_1 + 28)
								reg_1 = FUNC_LIST[646](8)
								loc_3 = reg_1
								rt_store_i32(memory_at_0, loc_5 + 12, loc_3)
								loc_4 = rt_add_i32(loc_3, 8)
								rt_store_i32(memory_at_0, loc_5 + 20, loc_4)
								rt_store_i64(memory_at_0, loc_3, loc_13)
								rt_store_i32(memory_at_0, loc_5 + 16, loc_4)
								FUNC_LIST[240](rt_add_i32(loc_5, 12))
								loc_6 = rt_load_i32(memory_at_0, loc_5 + 16)
								loc_4 = rt_load_i32(memory_at_0, loc_5 + 12)
								loc_8 = rt_shr_i32(rt_sub_i32(loc_6, loc_4), 2)
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 624)
								loc_3 = rt_add_i32(loc_8, loc_7)
								if loc_3 >= 256 then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, loc_0 + 624, loc_3)
								loc_1 = rt_load_i32(memory_at_0, loc_0 + 628)
								rt_store_i32(memory_at_0, loc_0 + 628, (if loc_1 > loc_3 then loc_1 else loc_3))
								if loc_4 ~= loc_6 then
									while true do
										loc_3 = 0
										while true do
											FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_4)), bit_and(rt_add_i32(loc_3, loc_7), 255), 1)
											loc_3 = rt_add_i32(loc_3, 1)
											loc_4 = rt_load_i32(memory_at_0, loc_5 + 12)
											loc_8 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 16), loc_4), 2)
											if loc_3 < loc_8 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 49, loc_2, bit_and(loc_7, 255), bit_and(rt_sub_i32(rt_add_i32(loc_7, loc_8), 1), 255))
								loc_0 = rt_load_i32(memory_at_0, loc_5 + 12)
								if loc_0 == 0 then
									desired = 2
									break
								end
								rt_store_i32(memory_at_0, loc_5 + 16, loc_0)
								FUNC_LIST[653](loc_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 20), loc_0))
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[243](loc_0, loc_1, 0)
							loc_3 = reg_0
							FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 3, loc_2, 0, 1)
							reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
							loc_4 = reg_0
							FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 3, loc_2, 1, 0)
							reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_3, loc_4)
							if reg_0 ~= 0 then
								desired = 2
								break
							end
							FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[254](loc_0, loc_1, loc_2, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_5 + 4, 255)
					rt_store_i32(memory_at_0, loc_5, loc_8)
					FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_5)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_5, 24))
				loc_3 = reg_0
				reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), rt_add_i32(loc_5, 24))
				loc_4 = reg_0
				loc_7 = 0
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_load_i32(memory_at_0, loc_1 + 24)
				reg_0 = loc_8
				if loc_6 <= 6 then
					while true do
						reg_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 2), 13132))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_7
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_7 = reg_1
				FUNC_LIST[90](reg_0, loc_7, loc_2, loc_3, loc_4)
				FUNC_LIST[234](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), loc_3, 2, 1)
				FUNC_LIST[234](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), loc_4, 2, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5 + 24) + 624, rt_load_i32(memory_at_0, loc_5 + 28))
			GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_6, 8), 4468, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[251] = --[[ Luau::Compiler::compileExprIfElse(Luau::AstExprIfElse*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_13 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_13
		loc_12 = rt_load_i32(memory_at_0, loc_1 + 24)
		while true do
			while true do
				while true do
					loc_19 = rt_load_i32(memory_at_0, loc_0 + 128)
					if loc_19 == 0 then
						break
					end
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 132)
					if loc_7 == loc_12 then
						break
					end
					loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 120)
					loc_15 = bit_xor(rt_shr_u32(loc_12, 4), rt_shr_u32(loc_12, 9))
					loc_5 = loc_15
					while true do
						loc_9 = bit_and(loc_5, loc_8)
						loc_10 = rt_add_i32(rt_shl_i32(loc_9, 5), loc_6)
						loc_5 = rt_load_i32(memory_at_0, loc_10)
						if loc_5 ~= loc_12 then
							while true do
								if loc_5 == loc_7 then
									desired = 3
									break
								end
								loc_4 = rt_add_i32(loc_4, 1)
								loc_5 = rt_add_i32(loc_9, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_10 + 8) == 0 then
						break
					end
					loc_4 = 0
					while true do
						while true do
							loc_9 = bit_and(loc_8, loc_15)
							loc_10 = rt_add_i32(rt_shl_i32(loc_9, 5), loc_6)
							loc_5 = rt_load_i32(memory_at_0, loc_10)
							if loc_5 ~= loc_12 then
								while true do
									if loc_5 == loc_7 then
										desired = 4
										break
									end
									loc_4 = rt_add_i32(loc_4, 1)
									loc_15 = rt_add_i32(loc_9, loc_4)
									if loc_4 <= loc_8 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 2, 2, 0, }
									end)()
								end
								temp = br_map[1][rt_load_i32(memory_at_0, loc_10 + 8)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_10 + 16) == 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), loc_2, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 40), loc_2, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_12 + 4)
				loc_9 = rt_load_i32(memory_at_0, 48612)
				while true do
					while true do
						if loc_12 ~= 0 then
							while true do
								loc_8 = loc_12
								if loc_4 == loc_9 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_7 = rt_load_i32(memory_at_0, 48692)
						loc_5 = rt_load_i32(memory_at_0, 48572)
						loc_8 = loc_12
						while true do
							if bit_and((if loc_4 ~= loc_5 then 1 else 0), (if loc_4 ~= loc_7 then 1 else 0)) ~= 0 then
								desired = 3
								break
							end
							loc_8 = rt_load_i32(memory_at_0, loc_8 + 24)
							loc_4 = rt_load_i32(memory_at_0, loc_8 + 4)
							if loc_8 == 0 then
								continue
							end
							if loc_4 ~= loc_9 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_8 + 24)
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 72)
					if loc_6 == loc_10 then
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
					loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
					loc_15 = rt_load_i32(memory_at_0, loc_0 + 60)
					loc_4 = 0
					while true do
						loc_7 = bit_and(loc_5, loc_8)
						loc_11 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_15)
						loc_5 = rt_load_i32(memory_at_0, loc_11)
						if loc_5 ~= loc_6 then
							while true do
								if loc_5 == loc_10 then
									desired = 3
									break
								end
								loc_4 = rt_add_i32(loc_4, 1)
								loc_5 = rt_add_i32(loc_7, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_11 + 5) ~= 1 then
						break
					end
					loc_17 = rt_load_i32_u8(memory_at_0, loc_11 + 4)
					loc_14 = rt_load_i32(memory_at_0, loc_1 + 32)
					loc_4 = loc_14
					while true do
						loc_16 = rt_load_i32(memory_at_0, loc_14 + 4)
						loc_20 = bit_or((if loc_14 == 0 then 1 else 0), (if loc_9 ~= loc_16 then 1 else 0))
						if loc_20 ~= 0 then
							while true do
								loc_6 = rt_load_i32(memory_at_0, 48692)
								loc_7 = rt_load_i32(memory_at_0, 48572)
								loc_5 = loc_16
								while true do
									if bit_and((if loc_5 ~= loc_7 then 1 else 0), (if loc_5 ~= loc_6 then 1 else 0)) ~= 0 then
										desired = 4
										break
									end
									loc_4 = rt_load_i32(memory_at_0, loc_4 + 24)
									loc_5 = rt_load_i32(memory_at_0, loc_4 + 4)
									if loc_4 == 0 then
										continue
									end
									if loc_5 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_load_i32(memory_at_0, loc_4 + 24)
						if loc_10 == loc_6 then
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
						loc_4 = 0
						while true do
							loc_7 = bit_and(loc_5, loc_8)
							loc_11 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_15)
							loc_5 = rt_load_i32(memory_at_0, loc_11)
							if loc_5 ~= loc_6 then
								while true do
									if loc_5 == loc_10 then
										desired = 4
										break
									end
									loc_4 = rt_add_i32(loc_4, 1)
									loc_5 = rt_add_i32(loc_7, loc_4)
									if loc_4 <= loc_8 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_11 + 5) ~= 1 then
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_11 + 4) ~= loc_17 then
							break
						end
						loc_6 = rt_load_i32(memory_at_0, loc_1 + 40)
						loc_4 = rt_load_i32(memory_at_0, loc_6 + 4)
						while true do
							while true do
								while true do
									if loc_6 ~= 0 then
										while true do
											loc_5 = loc_6
											if loc_4 == loc_9 then
												desired = 7
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_11 = rt_load_i32(memory_at_0, 48692)
									loc_7 = rt_load_i32(memory_at_0, 48572)
									loc_5 = loc_6
									while true do
										if bit_and((if loc_4 ~= loc_7 then 1 else 0), (if loc_4 ~= loc_11 then 1 else 0)) ~= 0 then
											desired = 6
											break
										end
										loc_5 = rt_load_i32(memory_at_0, loc_5 + 24)
										loc_4 = rt_load_i32(memory_at_0, loc_5 + 4)
										if loc_5 == 0 then
											continue
										end
										if loc_4 ~= loc_9 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_11 = rt_load_i32(memory_at_0, loc_5 + 24)
								if loc_10 == loc_11 then
									break
								end
								loc_5 = bit_xor(rt_shr_u32(loc_11, 4), rt_shr_u32(loc_11, 9))
								loc_4 = 0
								while true do
									loc_7 = bit_and(loc_5, loc_8)
									loc_18 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_15)
									loc_5 = rt_load_i32(memory_at_0, loc_18)
									if loc_5 ~= loc_11 then
										while true do
											if loc_5 == loc_10 then
												desired = 6
												break
											end
											loc_4 = rt_add_i32(loc_4, 1)
											loc_5 = rt_add_i32(loc_7, loc_4)
											if loc_4 <= loc_8 then
												desired = 7
												break
											end
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_18 + 5) ~= 0 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_19 == 0 then
								desired = 4
								break
							end
							loc_18 = rt_load_i32(memory_at_0, loc_0 + 132)
							if loc_18 == loc_6 then
								desired = 4
								break
							end
							loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
							loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
							loc_21 = rt_load_i32(memory_at_0, loc_0 + 120)
							loc_4 = 0
							while true do
								loc_11 = bit_and(loc_5, loc_7)
								loc_22 = rt_add_i32(rt_shl_i32(loc_11, 5), loc_21)
								loc_5 = rt_load_i32(memory_at_0, loc_22)
								if loc_5 ~= loc_6 then
									while true do
										if loc_5 == loc_18 then
											desired = 4
											break
										end
										loc_4 = rt_add_i32(loc_4, 1)
										loc_5 = rt_add_i32(loc_11, loc_4)
										if loc_4 <= loc_7 then
											desired = 6
											break
										end
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_22 + 8) == 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[255](loc_0, 0, loc_17, loc_6, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 40)
					loc_5 = rt_load_i32(memory_at_0, loc_4 + 4)
					if (if loc_5 == loc_9 then loc_4 else 0) == 0 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, 48692)
							loc_7 = rt_load_i32(memory_at_0, 48572)
							while true do
								if bit_and((if loc_5 ~= loc_7 then 1 else 0), (if loc_5 ~= loc_6 then 1 else 0)) ~= 0 then
									desired = 3
									break
								end
								loc_4 = rt_load_i32(memory_at_0, loc_4 + 24)
								loc_5 = rt_load_i32(memory_at_0, loc_4 + 4)
								if loc_4 == 0 then
									continue
								end
								if loc_5 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = rt_load_i32(memory_at_0, loc_4 + 24)
					if loc_10 == loc_6 then
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_6, 4), rt_shr_u32(loc_6, 9))
					loc_4 = 0
					while true do
						loc_7 = bit_and(loc_5, loc_8)
						loc_11 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_15)
						loc_5 = rt_load_i32(memory_at_0, loc_11)
						if loc_5 ~= loc_6 then
							while true do
								if loc_5 == loc_10 then
									desired = 3
									break
								end
								loc_4 = rt_add_i32(loc_4, 1)
								loc_5 = rt_add_i32(loc_7, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_11 + 5) ~= 1 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_11 + 4) ~= loc_17 then
						break
					end
					loc_4 = loc_14
					while true do
						while true do
							if loc_20 ~= 0 then
								while true do
									loc_7 = rt_load_i32(memory_at_0, 48692)
									loc_5 = rt_load_i32(memory_at_0, 48572)
									while true do
										if bit_and((if loc_5 ~= loc_16 then 1 else 0), (if loc_7 ~= loc_16 then 1 else 0)) ~= 0 then
											desired = 5
											break
										end
										loc_4 = rt_load_i32(memory_at_0, loc_4 + 24)
										loc_16 = rt_load_i32(memory_at_0, loc_4 + 4)
										if loc_4 == 0 then
											continue
										end
										if loc_9 ~= loc_16 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = rt_load_i32(memory_at_0, loc_4 + 24)
							if loc_10 == loc_7 then
								break
							end
							loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
							loc_4 = 0
							while true do
								loc_9 = bit_and(loc_5, loc_8)
								loc_6 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_15)
								loc_5 = rt_load_i32(memory_at_0, loc_6)
								if loc_5 ~= loc_7 then
									while true do
										if loc_5 == loc_10 then
											desired = 5
											break
										end
										loc_4 = rt_add_i32(loc_4, 1)
										loc_5 = rt_add_i32(loc_9, loc_4)
										if loc_4 <= loc_8 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_6 + 5) ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_19 == 0 then
							desired = 3
							break
						end
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 132)
						if loc_7 == loc_14 then
							desired = 3
							break
						end
						loc_8 = bit_xor(rt_shr_u32(loc_14, 4), rt_shr_u32(loc_14, 9))
						loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
						loc_6 = rt_load_i32(memory_at_0, loc_0 + 120)
						loc_4 = 0
						while true do
							loc_9 = bit_and(loc_5, loc_8)
							loc_10 = rt_add_i32(rt_shl_i32(loc_9, 5), loc_6)
							loc_8 = rt_load_i32(memory_at_0, loc_10)
							if loc_8 ~= loc_14 then
								while true do
									if loc_7 == loc_8 then
										desired = 3
										break
									end
									loc_4 = rt_add_i32(loc_4, 1)
									loc_8 = rt_add_i32(loc_9, loc_4)
									if loc_4 <= loc_5 then
										desired = 5
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_10 + 8) == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[255](loc_0, 1, loc_17, loc_14, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_13 + 12, 0)
				rt_store_i64(memory_at_0, loc_13 + 4, rt_i64_ZERO)
				FUNC_LIST[223](loc_0, loc_12, 0, rt_add_i32(loc_13, 4), 0)
				FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), loc_2, loc_3)
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_5 = reg_0
				FUNC_LIST[91](rt_load_i32(memory_at_0, loc_0), 23, 0, 0)
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_8 = reg_0
				FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 40), loc_2, loc_3)
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_9 = reg_0
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_13 + 4)
					loc_12 = rt_load_i32(memory_at_0, loc_13 + 8)
					if loc_4 == loc_12 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_4), loc_8)
						if reg_0 ~= 0 then
							while true do
								loc_4 = rt_add_i32(loc_4, 4)
								if loc_4 ~= loc_12 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), loc_5, loc_9)
				if reg_0 == 0 then
					desired = 1
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_13 + 4)
				if loc_4 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_13 + 8, loc_4)
				FUNC_LIST[653](loc_4, rt_sub_i32(rt_load_i32(memory_at_0, loc_13 + 12), loc_4))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_13, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[252] = --[[ Luau::Compiler::compileExprInterpString(Luau::AstExprInterpString*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_5
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 28)
		if loc_4 ~= 0 then
			while true do
				loc_11 = rt_load_i32(memory_at_0, loc_1 + 24)
				loc_14 = rt_add_i32(loc_11, rt_shl_i32(loc_4, 3))
				while true do
					while true do
						loc_13 = rt_load_i32(memory_at_0, loc_11 + 4)
						if loc_13 == 0 then
							while true do
								loc_6 = 0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, loc_11)
						loc_9 = bit_and(loc_13, 3)
						loc_7 = 0
						while true do
							if loc_13 < 4 then
								while true do
									loc_6 = 0
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_8 = bit_and(loc_13, 4294967292)
							loc_6 = 0
							loc_10 = 0
							while true do
								loc_6 = rt_add_i32(rt_add_i32(rt_add_i32(rt_add_i32((if rt_load_i32_u8(memory_at_0, loc_4) == 37 then 1 else 0), loc_6), (if rt_load_i32_u8(memory_at_0, loc_4 + 1) == 37 then 1 else 0)), (if rt_load_i32_u8(memory_at_0, loc_4 + 2) == 37 then 1 else 0)), (if rt_load_i32_u8(memory_at_0, loc_4 + 3) == 37 then 1 else 0))
								loc_4 = rt_add_i32(loc_4, 4)
								loc_10 = rt_add_i32(loc_10, 4)
								if loc_8 ~= loc_10 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_9 == 0 then
							break
						end
						while true do
							loc_6 = rt_add_i32((if rt_load_i32_u8(memory_at_0, loc_4) == 37 then 1 else 0), loc_6)
							loc_4 = rt_add_i32(loc_4, 1)
							loc_7 = rt_add_i32(loc_7, 1)
							if loc_9 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_12 = rt_add_i32(loc_6, rt_add_i32(loc_12, loc_13))
					loc_11 = rt_add_i32(loc_11, 8)
					if loc_14 ~= loc_11 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_5 + 72, 0)
		rt_store_i64(memory_at_0, loc_5 + 64, rt_i64_ZERO)
		FUNC_LIST[719](rt_sub_i32(loc_5, 4294967232), loc_12)
		loc_8 = rt_load_i32(memory_at_0, loc_1 + 28)
		if loc_8 ~= 0 then
			while true do
				loc_9 = rt_load_i32(memory_at_0, loc_1 + 24)
				loc_11 = rt_add_i32(loc_9, rt_shl_i32(loc_8, 3))
				while true do
					while true do
						loc_10 = rt_load_i32(memory_at_0, loc_9)
						loc_7 = rt_load_i32(memory_at_0, loc_9 + 4)
						reg_0 = FUNC_LIST[604](loc_10, 37, loc_7)
						if reg_0 ~= 0 then
							while true do
								loc_4 = 0
								if loc_7 == 0 then
									desired = 3
									break
								end
								while true do
									loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_4, loc_10))
									FUNC_LIST[726](rt_sub_i32(loc_5, 4294967232), loc_6)
									if loc_6 == 37 then
										while true do
											FUNC_LIST[726](rt_sub_i32(loc_5, 4294967232), 37)
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_4 = rt_add_i32(loc_4, 1)
									if loc_7 ~= loc_4 then
										continue
									end
									break
								end
								if desired then
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[721](rt_sub_i32(loc_5, 4294967232), loc_10, loc_7)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_8 = rt_sub_i32(loc_8, 1)
					if loc_8 ~= 0 then
						while true do
							reg_0 = FUNC_LIST[732](rt_sub_i32(loc_5, 4294967232), 7317)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = rt_add_i32(loc_9, 8)
					if loc_11 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = rt_load_i32_i8(memory_at_0, loc_5 + 75)
		loc_6 = (if rt_lt_i32(loc_4, 0) then 1 else 0)
		loc_4 = (if loc_6 ~= 0 then rt_load_i32(memory_at_0, loc_5 + 68) else loc_4)
		reg_1 = FUNC_LIST[651](loc_4)
		loc_7 = reg_1
		rt_store_i32(memory_at_0, loc_5 + 60, loc_7)
		reg_0 = FUNC_LIST[517](loc_7, (if loc_6 ~= 0 then rt_load_i32(memory_at_0, loc_5 + 64) else rt_sub_i32(loc_5, 4294967232)), loc_4)
		loc_6 = reg_0
		reg_0 = loc_0
		while true do
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 716)
			if loc_7 < rt_load_i32(memory_at_0, loc_0 + 720) then
				while true do
					rt_store_i32(memory_at_0, loc_5 + 60, 0)
					rt_store_i32(memory_at_0, loc_7, loc_6)
					reg_1 = rt_add_i32(loc_7, 4)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[256](rt_add_i32(loc_0, 712), rt_add_i32(loc_5, 60))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_7 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 716, loc_7)
		loc_7 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_5 + 56, loc_4)
		rt_store_i32(memory_at_0, loc_5 + 52, loc_6)
		rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_5 + 52))
		while true do
			reg_0 = FUNC_LIST[80](loc_7, rt_add_i32(loc_5, 24))
			loc_6 = reg_0
			if rt_lt_i32(loc_6, 0) then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_7 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), 2)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 624)
				loc_4 = rt_add_i32(loc_7, loc_8)
				if loc_4 < 256 then
					while true do
						rt_store_i32(memory_at_0, loc_0 + 624, loc_4)
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 628)
						rt_store_i32(memory_at_0, loc_0 + 628, (if loc_4 < loc_7 then loc_7 else loc_4))
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						while true do
							if loc_6 <= 32767 then
								while true do
									FUNC_LIST[91](loc_4, 5, bit_and(loc_8, 255), rt_extend_i32_n16(loc_6))
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[91](loc_4, 66, bit_and(loc_8, 255), 0)
							FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_6)
							break
						end
						if desired then
							break
						end
						if rt_load_i32(memory_at_0, loc_1 + 36) ~= 0 then
							while true do
								loc_10 = rt_add_i32(loc_8, 2)
								loc_9 = rt_load_i32(memory_at_0, loc_0 + 624)
								loc_4 = 0
								while true do
									loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 32), rt_shl_i32(loc_4, 2)))
									loc_7 = bit_and(rt_add_i32(loc_4, loc_10), 255)
									rt_store_i32(memory_at_0, loc_0 + 624, rt_add_i32(loc_7, 1))
									FUNC_LIST[229](loc_0, loc_6, loc_7, 1)
									rt_store_i32(memory_at_0, loc_0 + 624, loc_9)
									loc_4 = rt_add_i32(loc_4, 1)
									if loc_4 < rt_load_i32(memory_at_0, loc_1 + 36) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						rt_store_i32(memory_at_0, loc_5 + 48, 6)
						rt_store_i32(memory_at_0, loc_5 + 44, 1857)
						rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_5 + 44))
						reg_0 = FUNC_LIST[80](loc_4, rt_add_i32(loc_5, 16))
						loc_6 = reg_0
						if rt_lt_i32(loc_6, 0) then
							desired = 2
							break
						end
						loc_7 = rt_load_i32(memory_at_0, loc_0)
						rt_store_i32(memory_at_0, loc_5 + 40, 6)
						rt_store_i32(memory_at_0, loc_5 + 36, 1857)
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_5 + 36))
						loc_4 = bit_and(loc_8, 255)
						reg_4 = FUNC_LIST[115](rt_add_i32(loc_5, 8))
						FUNC_LIST[90](loc_7, 20, loc_4, loc_4, bit_and(reg_4, 255))
						FUNC_LIST[92](rt_load_i32(memory_at_0, loc_0), loc_6)
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 21, loc_4, bit_and(rt_add_i32(rt_load_i32_u8(memory_at_0, loc_1 + 36), 2), 255), 2)
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, loc_2, loc_4, 0)
						rt_store_i32(memory_at_0, loc_0 + 624, loc_8)
						loc_4 = rt_load_i32(memory_at_0, loc_5 + 60)
						rt_store_i32(memory_at_0, loc_5 + 60, 0)
						if loc_4 ~= 0 then
							while true do
								FUNC_LIST[654](loc_4)
								break
							end
							if desired then
								break
							end
						end
						if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_5 + 75), 0) then
							while true do
								FUNC_LIST[653](rt_load_i32(memory_at_0, loc_5 + 64), bit_and(rt_load_i32(memory_at_0, loc_5 + 72), 2147483647))
								break
							end
							if desired then
								break
							end
						end
						GLOBAL_LIST[0].value = rt_add_i32(loc_5, 80)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_5 + 4, 255)
				rt_store_i32(memory_at_0, loc_5, loc_7)
				FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4468, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[253] = --[[ Luau::DenseHashMap<Luau::AstExprTable*, Luau::Compile::TableShape, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprTable*>>::operator[](Luau::AstExprTable* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_mul_i32(loc_5, 12), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[257](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_mul_i32(loc_3, 12))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_mul_i32(loc_3, 12), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = rt_add_i32(loc_4, 4)
		break
	end
	return reg_0
end
FUNC_LIST[254] = --[[ Luau::Compiler::compileExprAndOr(Luau::AstExprBinary*, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_6
		loc_11 = rt_load_i32(memory_at_0, loc_1 + 24)
		rt_store_i32(memory_at_0, loc_6 + 24, loc_0)
		rt_store_i32(memory_at_0, loc_6 + 28, rt_load_i32(memory_at_0, loc_0 + 624))
		loc_7 = rt_load_i32(memory_at_0, loc_1 + 28)
		while true do
			while true do
				while true do
					if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
						break
					end
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 132)
					if loc_9 == loc_7 then
						break
					end
					loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
					loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
					loc_13 = rt_load_i32(memory_at_0, loc_0 + 120)
					while true do
						loc_10 = bit_and(loc_5, loc_8)
						loc_12 = rt_add_i32(rt_shl_i32(loc_10, 5), loc_13)
						loc_5 = rt_load_i32(memory_at_0, loc_12)
						if loc_5 ~= loc_7 then
							while true do
								if loc_5 == loc_9 then
									desired = 3
									break
								end
								loc_4 = rt_add_i32(loc_4, 1)
								loc_5 = rt_add_i32(loc_10, loc_4)
								if loc_4 <= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = 0
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 3, 2, 0, }
									end)()
								end
								temp = br_map[1][rt_load_i32(memory_at_0, loc_12 + 8)] or 1
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = rt_load_i32_u8(memory_at_0, loc_12 + 16)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, rt_add_i32((if bit_xor(loc_4, (if loc_11 == 14 then 1 else 0)) ~= 0 then 28 else 32), loc_1)), loc_2, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					reg_0 = FUNC_LIST[259](loc_0, loc_7)
					if reg_0 ~= 0 then
						break
					end
					loc_10 = rt_load_i32(memory_at_0, 48612)
					loc_9 = rt_load_i32(memory_at_0, loc_1 + 32)
					loc_4 = rt_load_i32(memory_at_0, loc_9 + 4)
					while true do
						while true do
							if loc_9 ~= 0 then
								while true do
									loc_5 = loc_9
									if loc_4 == loc_10 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_7 = rt_load_i32(memory_at_0, 48692)
							loc_8 = rt_load_i32(memory_at_0, 48572)
							loc_5 = loc_9
							while true do
								if bit_and((if loc_4 ~= loc_8 then 1 else 0), (if loc_4 ~= loc_7 then 1 else 0)) ~= 0 then
									desired = 4
									break
								end
								loc_5 = rt_load_i32(memory_at_0, loc_5 + 24)
								loc_4 = rt_load_i32(memory_at_0, loc_5 + 4)
								if loc_5 == 0 then
									continue
								end
								if loc_4 ~= loc_10 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
							break
						end
						loc_7 = rt_load_i32(memory_at_0, loc_5 + 24)
						loc_13 = rt_load_i32(memory_at_0, loc_0 + 72)
						if loc_7 == loc_13 then
							break
						end
						loc_5 = bit_xor(rt_shr_u32(loc_7, 4), rt_shr_u32(loc_7, 9))
						loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
						loc_12 = rt_load_i32(memory_at_0, loc_0 + 60)
						loc_4 = 0
						while true do
							loc_10 = bit_and(loc_5, loc_8)
							loc_14 = rt_add_i32(rt_shl_i32(loc_10, 4), loc_12)
							loc_5 = rt_load_i32(memory_at_0, loc_14)
							if loc_5 ~= loc_7 then
								while true do
									if loc_5 == loc_13 then
										desired = 4
										break
									end
									loc_4 = rt_add_i32(loc_4, 1)
									loc_5 = rt_add_i32(loc_10, loc_4)
									if loc_4 <= loc_8 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_14 + 5) ~= 1 then
							break
						end
						loc_4 = rt_load_i32_u8(memory_at_0, loc_14 + 4)
						reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_6, 24))
						loc_5 = reg_0
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_11 == 14 then 45 else 46), loc_2, loc_5, loc_4)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[245](loc_0, loc_9)
					loc_4 = reg_0
					if loc_4 > 255 then
						break
					end
					reg_0 = FUNC_LIST[244](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_6, 24))
					loc_5 = reg_0
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_11 == 14 then 47 else 48), loc_2, loc_5, bit_and(loc_4, 255))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = loc_2
				if loc_3 == 0 then
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 624)
						loc_5 = rt_add_i32(loc_4, 1)
						if loc_5 >= 256 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 624, loc_5)
						loc_8 = rt_load_i32(memory_at_0, loc_0 + 628)
						rt_store_i32(memory_at_0, loc_0 + 628, (if loc_5 < loc_8 then loc_8 else loc_5))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32_n8(memory_at_0, loc_6 + 23, loc_4)
				rt_store_i32(memory_at_0, loc_6 + 16, 0)
				rt_store_i64(memory_at_0, loc_6 + 8, rt_i64_ZERO)
				FUNC_LIST[223](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_add_i32(loc_6, 23), rt_add_i32(loc_6, 8), (if loc_11 ~= 14 then 1 else 0))
				FUNC_LIST[229](loc_0, rt_load_i32(memory_at_0, loc_1 + 32), rt_load_i32_u8(memory_at_0, loc_6 + 23), 1)
				reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
				loc_5 = reg_0
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_6 + 8)
					loc_8 = rt_load_i32(memory_at_0, loc_6 + 12)
					if loc_4 == loc_8 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_4), loc_5)
						if reg_0 ~= 0 then
							while true do
								loc_4 = rt_add_i32(loc_4, 4)
								if loc_4 ~= loc_8 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_i32_u8(memory_at_0, loc_6 + 23)
				if loc_2 ~= loc_4 then
					while true do
						FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 6, loc_2, loc_4, 0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_load_i32(memory_at_0, loc_6 + 8)
				if loc_4 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_6 + 12, loc_4)
				FUNC_LIST[653](loc_4, rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 16), loc_4))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 24) + 624, rt_load_i32(memory_at_0, loc_6 + 28))
			GLOBAL_LIST[0].value = rt_add_i32(loc_6, 32)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_6, rt_i64_from_u32(1, 255))
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 5876, loc_6)
		error("out of code bounds")
	end
end
FUNC_LIST[255] = --[[ Luau::Compiler::compileExprIfElseAndOr(bool, unsigned char, Luau::AstExpr*, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		while true do
			reg_0 = FUNC_LIST[245](loc_0, loc_3)
			loc_6 = reg_0
			if loc_6 <= 255 then
				while true do
					FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_1 ~= 0 then 47 else 48), loc_4, loc_2, bit_and(loc_6, 255))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_5 + 8, loc_0)
			rt_store_i32(memory_at_0, loc_5 + 12, rt_load_i32(memory_at_0, loc_0 + 624))
			reg_0 = FUNC_LIST[244](loc_0, loc_3, rt_add_i32(loc_5, 8))
			loc_3 = reg_0
			FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), (if loc_1 ~= 0 then 45 else 46), loc_4, loc_2, loc_3)
			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5 + 8) + 624, rt_load_i32(memory_at_0, loc_5 + 12))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[256] = --[[ std::__2::unique_ptr<char [], std::__2::default_delete<char []>>* std::__2::vector<std::__2::unique_ptr<char [], std::__2::default_delete<char []>>, std::__2::allocator<std::__2::unique_ptr<char [], std::__2::default_delete<char []>>>>::__emplace_back_slow_path<std::__2::unique_ptr<char [], std::__2::default_delete<char []>>>(std::__2::unique_ptr<char [], std::__2::default_delete<char []>>&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0)
			loc_6 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2), 2)
			loc_4 = rt_add_i32(loc_6, 1)
			if loc_4 < 1073741824 then
				while true do
					loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_2)
					loc_5 = rt_shr_i32(loc_2, 1)
					loc_2 = (if loc_2 >= 2147483644 then 1073741823 else (if loc_4 < loc_5 then loc_5 else loc_4))
					if loc_2 ~= 0 then
						while true do
							if loc_2 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_2, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_3
							break
						end
						if desired then
							break
						end
					end
					loc_3 = reg_0
					loc_5 = rt_load_i32(memory_at_0, loc_1)
					rt_store_i32(memory_at_0, loc_1, 0)
					loc_4 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_3)
					rt_store_i32(memory_at_0, loc_4, loc_5)
					loc_5 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_3)
					loc_6 = rt_add_i32(loc_4, 4)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
					loc_2 = rt_load_i32(memory_at_0, loc_0)
					if loc_3 ~= loc_2 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 4)
								loc_1 = rt_load_i32(memory_at_0, loc_3)
								rt_store_i32(memory_at_0, loc_3, 0)
								loc_4 = rt_sub_i32(loc_4, 4)
								rt_store_i32(memory_at_0, loc_4, loc_1)
								if loc_2 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
							reg_0 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							break
						end
					end
					loc_2 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
					rt_store_i32(memory_at_0, loc_0, loc_4)
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_5)
					if loc_2 ~= loc_3 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 4)
								loc_4 = rt_load_i32(memory_at_0, loc_3)
								rt_store_i32(memory_at_0, loc_3, 0)
								if loc_4 ~= 0 then
									while true do
										FUNC_LIST[654](loc_4)
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
											continue
										end
										break
									end
								end
								if loc_2 ~= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[653](loc_2, rt_sub_i32(loc_1, loc_2))
							break
						end
						if desired then
							break
						end
					end
					reg_0 = loc_6
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[257] = --[[ Luau::detail::DenseHashTable<Luau::AstExprTable*, std::__2::pair<Luau::AstExprTable*, Luau::Compile::TableShape>, std::__2::pair<Luau::AstExprTable* const, Luau::Compile::TableShape>, Luau::detail::ItemInterfaceMap<Luau::AstExprTable*, Luau::Compile::TableShape>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstExprTable*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_10 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = (if loc_1 ~= 0 then rt_shl_i32(loc_1, 1) else 16)
			if loc_6 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_6, 2)
			reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 12))
			loc_4 = reg_0
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
			loc_1 = 0
			if loc_6 >= 4 then
				while true do
					loc_9 = bit_and(loc_6, 4294967292)
					while true do
						loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 1), 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 2), 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_2 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 3), 12), loc_4)
						rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_2, loc_5)
						loc_1 = rt_add_i32(loc_1, 4)
						loc_3 = rt_add_i32(loc_3, 4)
						if loc_9 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_3 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
						rt_store_i64(memory_at_0, loc_3 + 4, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_3, loc_5)
						loc_1 = rt_add_i32(loc_1, 1)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_8 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_1 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_6, 1)
				loc_9 = 0
				while true do
					loc_11 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(loc_9, 12))
					loc_3 = rt_load_i32(memory_at_0, loc_11)
					if loc_3 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9)))
									loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
									loc_7 = rt_load_i32(memory_at_0, loc_2)
									if loc_10 == loc_7 then
										break
									end
									loc_5 = 0
									if loc_3 == loc_7 then
										desired = 4
										break
									end
									while true do
										loc_5 = rt_add_i32(loc_5, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_5))
										loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_4)
										loc_7 = rt_load_i32(memory_at_0, loc_2)
										if loc_10 == loc_7 then
											desired = 5
											break
										end
										if loc_3 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_2, loc_3)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_2, loc_3)
							rt_store_i64(memory_at_0, loc_2 + 4, rt_load_i64(memory_at_0, loc_11 + 4))
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_1 = reg_0
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_1 > loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_4)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[258] = --[[ Luau::Compiler::compileLValueIndex(unsigned char, Luau::AstExpr*, Luau::Compiler::RegScope&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_1 + 128) == 0 then
					break
				end
				loc_9 = rt_load_i32(memory_at_0, loc_1 + 132)
				if loc_9 == loc_3 then
					break
				end
				loc_6 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
				loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 124), 1)
				loc_10 = rt_load_i32(memory_at_0, loc_1 + 120)
				while true do
					loc_11 = bit_and(loc_6, loc_8)
					loc_7 = rt_add_i32(rt_shl_i32(loc_11, 5), loc_10)
					loc_6 = rt_load_i32(memory_at_0, loc_7)
					if loc_6 ~= loc_3 then
						while true do
							if loc_6 == loc_9 then
								desired = 2
								break
							end
							loc_5 = rt_add_i32(loc_5, 1)
							loc_6 = rt_add_i32(loc_11, loc_5)
							if loc_5 <= loc_8 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_7 + 12)
				loc_12 = rt_load_f64(memory_at_0, loc_7 + 16)
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_7 + 8)
					if loc_5 ~= 3 then
						break
					end
					if (if loc_12 >= 1e0 then 1 else 0) == 0 then
						break
					end
					if (if loc_12 <= 2.56e2 then 1 else 0) == 0 then
						break
					end
					while true do
						if math_abs(loc_12) < 2.147483648e9 then
							while true do
								reg_0 = rt_truncate_f64(loc_12)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = 2147483648
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = reg_0
					if rt_convert_f64_i32(loc_5) ~= loc_12 then
						desired = 2
						break
					end
					rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_ZERO)
					rt_store_i32(memory_at_0, loc_0, 4)
					rt_store_i32_n8(memory_at_0, loc_0 + 7, rt_sub_i32(loc_5, 1))
					rt_store_i32_n8(memory_at_0, loc_0 + 4, loc_2)
					rt_store_i32(memory_at_0, loc_0 + 12, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 ~= 5 then
					break
				end
				rt_store_i64(memory_at_0, loc_0, rt_i64_from_u32(3, 0))
				rt_store_i32(memory_at_0, loc_0 + 12, loc_6)
				rt_store_i64_n32(memory_at_0, loc_0 + 8, rt_reinterpret_i64_f64(loc_12))
				rt_store_i32_n8(memory_at_0, loc_0 + 4, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_0, 5)
			rt_store_i32_n8(memory_at_0, loc_0 + 4, loc_2)
			rt_store_i32(memory_at_0, loc_0 + 12, 0)
			reg_1 = FUNC_LIST[244](loc_1, loc_3, loc_4)
			rt_store_i32_n8(memory_at_0, loc_0 + 6, reg_1)
			break
		end
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_3 + 8))
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_3 + 16))
		break
	end
end
FUNC_LIST[259] = --[[ Luau::Compiler::isConditionFast(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 132)
				if loc_5 == loc_1 then
					break
				end
				loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
				loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 120)
				while true do
					loc_7 = bit_and(loc_3, loc_4)
					loc_8 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_6)
					loc_3 = rt_load_i32(memory_at_0, loc_8)
					if loc_3 ~= loc_1 then
						while true do
							if loc_3 == loc_5 then
								desired = 2
								break
							end
							loc_2 = rt_add_i32(loc_2, 1)
							loc_3 = rt_add_i32(loc_7, loc_2)
							if loc_2 <= loc_4 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 1
				reg_0 = loc_2
				if rt_load_i32(memory_at_0, loc_8 + 8) ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
			while true do
				if loc_1 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, 48684) ~= loc_2 then
					break
				end
				reg_0 = (if bit_and(rt_load_i32(memory_at_0, loc_1 + 24), 4294967288) == 8 then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, 48572)
			if loc_2 == loc_4 then
				while true do
					reg_0 = FUNC_LIST[259](loc_0, rt_load_i32(memory_at_0, loc_1 + 24))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			reg_0 = bit_and(loc_3, (if loc_2 == loc_4 then 1 else 0))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[260] = --[[ Luau::DenseHashSet<Luau::AstLocal*, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::insert(Luau::AstLocal* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 < rt_shr_u32(rt_mul_i32(loc_6, 3), 2) then
				break
			end
			while true do
				if loc_3 == 0 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_4 == loc_8 then
					break
				end
				loc_2 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_7 = rt_sub_i32(loc_6, 1)
				loc_9 = rt_load_i32(memory_at_0, loc_0)
				loc_3 = 0
				while true do
					loc_5 = bit_and(loc_2, loc_7)
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_9))
					if loc_4 == loc_2 then
						desired = 1
						break
					end
					if loc_2 == loc_8 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = rt_add_i32(loc_5, loc_3)
					if loc_3 <= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[261](loc_0)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				loc_8 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_5 = rt_load_i32(memory_at_0, loc_1)
				loc_3 = bit_and(loc_6, bit_xor(rt_shr_u32(loc_5, 4), rt_shr_u32(loc_5, 9)))
				loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_3, 2))
				loc_2 = rt_load_i32(memory_at_0, loc_4)
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				if loc_2 == loc_9 then
					break
				end
				if loc_2 == loc_5 then
					desired = 1
					break
				end
				loc_2 = 0
				while true do
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = bit_and(loc_6, rt_add_i32(loc_3, loc_2))
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_8)
					loc_7 = rt_load_i32(memory_at_0, loc_4)
					if loc_9 == loc_7 then
						desired = 2
						break
					end
					if loc_5 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[261] = --[[ Luau::detail::DenseHashTable<Luau::AstLocal*, Luau::AstLocal*, Luau::AstLocal*, Luau::detail::ItemInterfaceSet<Luau::AstLocal*>, Luau::DenseHashPointer, std::__2::equal_to<Luau::AstLocal*>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_11 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_5 = (if loc_10 ~= 0 then rt_shl_i32(loc_10, 1) else 16)
			if loc_5 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_5, 6)
			reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 2))
			loc_6 = reg_0
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_5 >= 8 then
				while true do
					loc_9 = bit_and(loc_5, 4294967288)
					while true do
						loc_3 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_6)
						rt_store_i32(memory_at_0, loc_3, loc_1)
						rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
						rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
						rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
						rt_store_i32(memory_at_0, loc_3 + 16, loc_1)
						rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
						rt_store_i32(memory_at_0, loc_3 + 24, loc_1)
						rt_store_i32(memory_at_0, loc_3 + 28, loc_1)
						loc_2 = rt_add_i32(loc_2, 8)
						loc_7 = rt_add_i32(loc_7, 8)
						if loc_9 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), loc_6), loc_1)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_4 = rt_add_i32(loc_4, 1)
						if loc_8 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		if loc_10 ~= 0 then
			while true do
				loc_8 = rt_sub_i32(loc_5, 1)
				loc_9 = 0
				while true do
					loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(loc_9, 2)))
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 12) then
						while true do
							while true do
								while true do
									loc_1 = bit_and(loc_8, bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9)))
									loc_7 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_6)
									loc_2 = rt_load_i32(memory_at_0, loc_7)
									if loc_11 == loc_2 then
										break
									end
									loc_3 = 0
									if loc_2 == loc_4 then
										desired = 4
										break
									end
									while true do
										loc_3 = rt_add_i32(loc_3, 1)
										loc_1 = bit_and(loc_8, rt_add_i32(loc_1, loc_3))
										loc_7 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_6)
										loc_2 = rt_load_i32(memory_at_0, loc_7)
										if loc_11 == loc_2 then
											desired = 5
											break
										end
										if loc_2 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_7, loc_4)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_7, loc_4)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_5)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, loc_6)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[262] = --[[ Luau::Compiler::UndefinedLocalVisitor::~UndefinedLocalVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 11824)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 12)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 12, rt_i64_ZERO)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[263] = --[[ Luau::Compiler::UndefinedLocalVisitor::~UndefinedLocalVisitor()_360 ]] function(loc_0)
	local loc_1 = 0
	while true do
		rt_store_i32(memory_at_0, loc_0, 11824)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 12)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		FUNC_LIST[653](loc_0, 32)
		break
	end
end
FUNC_LIST[264] = --[[ Luau::Compiler::UndefinedLocalVisitor::visit(Luau::AstExprLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32_u8(memory_at_0, loc_1 + 28) ~= 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 8) ~= 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 20) == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 24)
			if loc_2 == loc_5 then
				break
			end
			loc_3 = bit_xor(rt_shr_u32(loc_2, 4), rt_shr_u32(loc_2, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 16), 1)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 12)
			loc_1 = 0
			while true do
				loc_7 = bit_and(loc_3, loc_4)
				loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 2), loc_6))
				if loc_3 ~= loc_2 then
					while true do
						if loc_3 == loc_5 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						loc_3 = rt_add_i32(loc_7, loc_1)
						if loc_1 <= loc_4 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[265] = --[[ Luau::Compiler::UndefinedLocalVisitor::visit(Luau::AstExprFunction*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
			if rt_load_i32(memory_at_0, loc_2 + 48) == 0 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_2 + 52)
			if loc_6 == loc_1 then
				break
			end
			loc_5 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
			loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 44), 1)
			loc_8 = rt_load_i32(memory_at_0, loc_2 + 40)
			loc_2 = 0
			while true do
				loc_4 = bit_and(loc_5, loc_7)
				loc_3 = rt_add_i32(rt_mul_i32(loc_4, 40), loc_8)
				loc_5 = rt_load_i32(memory_at_0, loc_3)
				if loc_1 == loc_5 then
					desired = 1
					break
				end
				loc_3 = 0
				if loc_5 == loc_6 then
					desired = 1
					break
				end
				loc_2 = rt_add_i32(loc_2, 1)
				loc_5 = rt_add_i32(loc_4, loc_2)
				if loc_2 <= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_2 = (if loc_3 ~= 0 then rt_add_i32(loc_3, 8) else 0)
		loc_9 = rt_load_i32(memory_at_0, loc_2 + 4)
		loc_10 = rt_load_i32(memory_at_0, loc_2 + 8)
		if loc_9 ~= loc_10 then
			while true do
				loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 16), 1)
				loc_11 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 104), 1)
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 24)
				loc_12 = rt_load_i32(memory_at_0, loc_0 + 20)
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_9)
						if loc_11 ~= rt_load_i32(memory_at_0, loc_4 + 24) then
							break
						end
						if loc_1 ~= 0 then
							break
						end
						if loc_12 == 0 then
							break
						end
						if loc_4 == loc_6 then
							break
						end
						loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
						loc_2 = 0
						while true do
							loc_7 = bit_and(loc_3, loc_5)
							loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 2), loc_8))
							if loc_3 ~= loc_4 then
								while true do
									loc_1 = 0
									if loc_3 == loc_6 then
										desired = 3
										break
									end
									loc_2 = rt_add_i32(loc_2, 1)
									loc_3 = rt_add_i32(loc_7, loc_2)
									if loc_2 <= loc_5 then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
						loc_1 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_9 = rt_add_i32(loc_9, 4)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[266] = --[[ Luau::Compiler::compileInlinedCall(Luau::AstExprCall*, Luau::AstExprFunction*, unsigned char, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_8
		loc_22 = rt_load_i32(memory_at_0, loc_0 + 624)
		loc_23 = rt_load_i32(memory_at_0, loc_0 + 640)
		loc_24 = rt_load_i32(memory_at_0, loc_0 + 644)
		rt_store_i32(memory_at_0, loc_8 + 76, 0)
		rt_store_i64(memory_at_0, loc_8 + 68, rt_i64_ZERO)
		while true do
			while true do
				loc_6 = rt_load_i32(memory_at_0, loc_2 + 56)
				if loc_6 == 0 then
					while true do
						loc_6 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_6 >= 107374183 then
					desired = 1
					break
				end
				loc_9 = rt_mul_i32(loc_6, 40)
				reg_1 = FUNC_LIST[646](loc_9)
				loc_5 = reg_1
				rt_store_i32(memory_at_0, loc_8 + 72, loc_5)
				rt_store_i32(memory_at_0, loc_8 + 68, loc_5)
				rt_store_i32(memory_at_0, loc_8 + 76, rt_add_i32(loc_5, loc_9))
				loc_20 = bit_or(rt_add_i32(loc_8, 40), 3)
				loc_19 = loc_8
				loc_21 = rt_add_i32(loc_19, 48)
				while true do
					loc_9 = loc_18
					loc_13 = rt_shl_i32(loc_9, 2)
					loc_10 = rt_add_i32(loc_13, rt_load_i32(memory_at_0, loc_2 + 52))
					loc_11 = 0
					loc_7 = rt_load_i32(memory_at_0, loc_1 + 32)
					if loc_9 < loc_7 then
						while true do
							reg_0 = rt_load_i32(memory_at_0, rt_add_i32(loc_13, rt_load_i32(memory_at_0, loc_1 + 28)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_0 = loc_11
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_11 = reg_0
					loc_13 = rt_load_i32(memory_at_0, loc_10)
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_18 = rt_add_i32(loc_9, 1)
													if loc_7 ~= loc_18 then
														break
													end
													if loc_6 <= loc_7 then
														break
													end
													reg_0 = FUNC_LIST[231](loc_0, loc_11)
													if reg_0 == 0 then
														break
													end
													loc_10 = rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 56), rt_load_i32(memory_at_0, loc_1 + 32)), 1)
													loc_14 = rt_load_i32(memory_at_0, loc_0 + 624)
													loc_6 = rt_add_i32(loc_10, loc_14)
													if loc_6 >= 256 then
														desired = 10
														break
													end
													rt_store_i32(memory_at_0, loc_0 + 624, loc_6)
													loc_7 = rt_load_i32(memory_at_0, loc_0 + 628)
													rt_store_i32(memory_at_0, loc_0 + 628, (if loc_6 < loc_7 then loc_7 else loc_6))
													reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
													loc_18 = reg_0
													while true do
														while true do
															loc_6 = rt_load_i32(memory_at_0, loc_11 + 4)
															if loc_6 ~= rt_load_i32(memory_at_0, 48636) then
																break
															end
															if loc_11 == 0 then
																break
															end
															FUNC_LIST[211](loc_0, loc_11, bit_and(loc_14, 255), bit_and(loc_10, 255), 1, 0)
															desired = 12
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if rt_load_i32(memory_at_0, 48628) ~= loc_6 then
															break
														end
														if loc_11 == 0 then
															break
														end
														if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
															while true do
																FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_11 + 8), 1))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 63, bit_and(loc_14, 255), bit_and(rt_add_i32(loc_10, 1), 255), 0)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_6 = rt_load_i32(memory_at_0, loc_2 + 56)
													if loc_6 <= loc_9 then
														desired = 2
														break
													end
													loc_25 = loc_8
													loc_21 = rt_add_i32(loc_25, 48)
													loc_10 = loc_9
													while true do
														loc_6 = rt_add_i32(loc_14, rt_sub_i32(loc_10, loc_9))
														loc_13 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 52), rt_shl_i32(loc_10, 2)))
														while true do
															loc_11 = rt_load_i32(memory_at_0, loc_8 + 76)
															if loc_5 < loc_11 then
																while true do
																	rt_store_i32(memory_at_0, loc_5 + 16, 0)
																	rt_store_i64(memory_at_0, loc_5 + 8, rt_i64_ZERO)
																	rt_store_i32_n8(memory_at_0, loc_5 + 4, loc_6)
																	rt_store_i32(memory_at_0, loc_5, loc_13)
																	rt_store_i64(memory_at_0, loc_5 + 20, rt_load_i64(memory_at_0, loc_8 + 40))
																	rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_25 + 48))
																	rt_store_i32(memory_at_0, loc_5 + 32, loc_18)
																	loc_5 = rt_add_i32(loc_5, 40)
																	desired = 13
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_7 = rt_load_i32(memory_at_0, loc_8 + 68)
															loc_16 = rt_div_i32(rt_sub_i32(loc_5, loc_7), 40)
															loc_12 = rt_add_i32(loc_16, 1)
															if loc_12 >= 107374183 then
																desired = 1
																break
															end
															loc_17 = rt_sub_i32(loc_11, loc_7)
															loc_11 = rt_div_i32(loc_17, 40)
															loc_15 = rt_shl_i32(loc_11, 1)
															loc_12 = (if loc_11 >= 53687091 then 107374182 else (if loc_12 < loc_15 then loc_15 else loc_12))
															if loc_12 ~= 0 then
																while true do
																	if loc_12 >= 107374183 then
																		desired = 7
																		break
																	end
																	reg_0 = FUNC_LIST[646](rt_mul_i32(loc_12, 40))
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															else
																while true do
																	reg_0 = 0
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_15 = reg_0
															loc_11 = rt_add_i32(loc_15, rt_mul_i32(loc_16, 40))
															rt_store_i32(memory_at_0, loc_11 + 32, loc_18)
															rt_store_i32(memory_at_0, loc_11 + 16, 0)
															rt_store_i64(memory_at_0, loc_11 + 8, rt_i64_ZERO)
															rt_store_i32_n8(memory_at_0, loc_11 + 4, loc_6)
															rt_store_i32(memory_at_0, loc_11, loc_13)
															loc_13 = rt_add_i32(rt_mul_i32(loc_12, 40), loc_15)
															loc_6 = loc_11
															if loc_5 ~= loc_7 then
																while true do
																	while true do
																		loc_6 = rt_sub_i32(loc_6, 40)
																		loc_5 = rt_sub_i32(loc_5, 40)
																		rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
																		rt_store_i32(memory_at_0, loc_6 + 32, rt_load_i32(memory_at_0, loc_5 + 32))
																		rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_5 + 24))
																		rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_5 + 16))
																		rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																		if loc_5 ~= loc_7 then
																			continue
																		end
																		break
																	end
																	if desired then
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_5 = rt_add_i32(loc_11, 40)
															rt_store_i32(memory_at_0, loc_8 + 76, loc_13)
															rt_store_i32(memory_at_0, loc_8 + 68, loc_6)
															if loc_7 == 0 then
																break
															end
															FUNC_LIST[653](loc_7, loc_17)
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
																continue
															end
															break
														end
														rt_store_i32(memory_at_0, loc_8 + 72, loc_5)
														loc_10 = rt_add_i32(loc_10, 1)
														loc_6 = rt_load_i32(memory_at_0, loc_2 + 56)
														if loc_10 < loc_6 then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													desired = 2
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_16 = rt_load_i32(memory_at_0, loc_0 + 108)
												if loc_16 == 0 then
													desired = 8
													break
												end
												loc_12 = rt_load_i32(memory_at_0, loc_0 + 112)
												if loc_12 == loc_13 then
													desired = 8
													break
												end
												loc_9 = bit_xor(rt_shr_u32(loc_13, 4), rt_shr_u32(loc_13, 9))
												loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
												loc_15 = rt_load_i32(memory_at_0, loc_0 + 100)
												loc_6 = 0
												while true do
													loc_10 = bit_and(loc_7, loc_9)
													loc_14 = rt_add_i32(rt_mul_i32(loc_10, 12), loc_15)
													loc_9 = rt_load_i32(memory_at_0, loc_14)
													if loc_9 ~= loc_13 then
														while true do
															if loc_9 == loc_12 then
																desired = 8
																break
															end
															loc_6 = rt_add_i32(loc_6, 1)
															loc_9 = rt_add_i32(loc_10, loc_6)
															if loc_6 <= loc_7 then
																desired = 11
																break
															end
															desired = 8
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if rt_load_i32_u8(memory_at_0, loc_14 + 8) ~= 1 then
													desired = 8
													break
												end
												loc_10 = rt_load_i32(memory_at_0, loc_0 + 624)
												loc_6 = rt_add_i32(loc_10, 1)
												if loc_6 >= 256 then
													desired = 9
													break
												end
												rt_store_i32(memory_at_0, loc_0 + 624, loc_6)
												loc_9 = rt_load_i32(memory_at_0, loc_0 + 628)
												rt_store_i32(memory_at_0, loc_0 + 628, (if loc_6 < loc_9 then loc_9 else loc_6))
												reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
												loc_6 = reg_0
												while true do
													if loc_11 ~= 0 then
														while true do
															FUNC_LIST[229](loc_0, loc_11, bit_and(loc_10, 255), 1)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 2, bit_and(loc_10, 255), 0, 0)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_7 = rt_load_i32(memory_at_0, loc_8 + 76)
												if loc_5 < loc_7 then
													while true do
														rt_store_i32(memory_at_0, loc_5 + 16, 0)
														rt_store_i64(memory_at_0, loc_5 + 8, rt_i64_ZERO)
														rt_store_i32_n8(memory_at_0, loc_5 + 4, loc_10)
														rt_store_i32(memory_at_0, loc_5, loc_13)
														rt_store_i64(memory_at_0, loc_5 + 20, rt_load_i64(memory_at_0, loc_8 + 40))
														rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_19 + 48))
														rt_store_i32(memory_at_0, loc_5 + 32, loc_6)
														loc_5 = rt_add_i32(loc_5, 40)
														desired = 4
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_9 = rt_load_i32(memory_at_0, loc_8 + 68)
												loc_15 = rt_div_i32(rt_sub_i32(loc_5, loc_9), 40)
												loc_11 = rt_add_i32(loc_15, 1)
												if loc_11 >= 107374183 then
													desired = 1
													break
												end
												loc_14 = rt_sub_i32(loc_7, loc_9)
												loc_7 = rt_div_i32(loc_14, 40)
												loc_12 = rt_shl_i32(loc_7, 1)
												loc_11 = (if loc_7 >= 53687091 then 107374182 else (if loc_11 < loc_12 then loc_12 else loc_11))
												if loc_11 ~= 0 then
													while true do
														if loc_11 >= 107374183 then
															desired = 7
															break
														end
														reg_0 = FUNC_LIST[646](rt_mul_i32(loc_11, 40))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = 0
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_12 = reg_0
												loc_7 = rt_add_i32(loc_12, rt_mul_i32(loc_15, 40))
												rt_store_i32(memory_at_0, loc_7 + 32, loc_6)
												rt_store_i32(memory_at_0, loc_7 + 16, 0)
												rt_store_i64(memory_at_0, loc_7 + 8, rt_i64_ZERO)
												rt_store_i32_n8(memory_at_0, loc_7 + 4, loc_10)
												rt_store_i32(memory_at_0, loc_7, loc_13)
												loc_10 = rt_add_i32(rt_mul_i32(loc_11, 40), loc_12)
												loc_6 = loc_7
												if loc_5 ~= loc_9 then
													while true do
														while true do
															loc_6 = rt_sub_i32(loc_6, 40)
															loc_5 = rt_sub_i32(loc_5, 40)
															rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
															rt_store_i32(memory_at_0, loc_6 + 32, rt_load_i32(memory_at_0, loc_5 + 32))
															rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_5 + 24))
															rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_5 + 16))
															rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
															if loc_5 ~= loc_9 then
																continue
															end
															break
														end
														if desired then
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_5 = rt_add_i32(loc_7, 40)
												rt_store_i32(memory_at_0, loc_8 + 76, loc_10)
												rt_store_i32(memory_at_0, loc_8 + 68, loc_6)
												if loc_9 == 0 then
													desired = 4
													break
												end
												FUNC_LIST[653](loc_9, loc_14)
												desired = 4
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											rt_store_i32(memory_at_0, loc_8 + 4, 255)
											rt_store_i32(memory_at_0, loc_8, loc_10)
											FUNC_LIST[173](rt_add_i32(loc_11, 8), 5876, loc_8)
											error("out of code bounds")
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i64(memory_at_0, loc_8 + 32, rt_i64_from_u32(1, 255))
										FUNC_LIST[173](rt_add_i32(loc_11, 8), 5876, rt_add_i32(loc_8, 32))
										error("out of code bounds")
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_11 == 0 then
										while true do
											loc_6 = rt_load_i32(memory_at_0, loc_8 + 76)
											if loc_5 < loc_6 then
												while true do
													rt_store_i32(memory_at_0, loc_5 + 16, 0)
													rt_store_i64(memory_at_0, loc_5 + 8, rt_i64_ONE)
													rt_store_i32_n8(memory_at_0, loc_5 + 4, 255)
													rt_store_i32(memory_at_0, loc_5, loc_13)
													rt_store_i64(memory_at_0, loc_5 + 20, rt_load_i64(memory_at_0, loc_8 + 40))
													rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_19 + 48))
													desired = 5
													break
												end
												if desired then
													break
												end
											end
											loc_9 = rt_load_i32(memory_at_0, loc_8 + 68)
											loc_11 = rt_div_i32(rt_sub_i32(loc_5, loc_9), 40)
											loc_7 = rt_add_i32(loc_11, 1)
											if loc_7 >= 107374183 then
												desired = 1
												break
											end
											loc_12 = rt_sub_i32(loc_6, loc_9)
											loc_6 = rt_div_i32(loc_12, 40)
											loc_10 = rt_shl_i32(loc_6, 1)
											loc_6 = (if loc_6 >= 53687091 then 107374182 else (if loc_7 < loc_10 then loc_10 else loc_7))
											if loc_6 ~= 0 then
												while true do
													if loc_6 >= 107374183 then
														desired = 7
														break
													end
													reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 40))
													break
												end
												if desired then
													break
												end
											else
												while true do
													reg_0 = 0
													break
												end
												if desired then
													break
												end
											end
											loc_10 = reg_0
											loc_7 = rt_add_i32(loc_10, rt_mul_i32(loc_11, 40))
											rt_store_i32(memory_at_0, loc_7 + 32, 0)
											rt_store_i32(memory_at_0, loc_7 + 16, 0)
											rt_store_i64(memory_at_0, loc_7 + 8, rt_i64_ONE)
											rt_store_i32_n8(memory_at_0, loc_7 + 4, 255)
											rt_store_i32(memory_at_0, loc_7, loc_13)
											loc_10 = rt_add_i32(rt_mul_i32(loc_6, 40), loc_10)
											loc_6 = loc_7
											if loc_5 ~= loc_9 then
												while true do
													while true do
														loc_6 = rt_sub_i32(loc_6, 40)
														loc_5 = rt_sub_i32(loc_5, 40)
														rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
														rt_store_i32(memory_at_0, loc_6 + 32, rt_load_i32(memory_at_0, loc_5 + 32))
														rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_5 + 24))
														rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_5 + 16))
														rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
														if loc_5 ~= loc_9 then
															continue
														end
														break
													end
													if desired then
														break
													end
													break
												end
												if desired then
													break
												end
											end
											loc_5 = rt_add_i32(loc_7, 40)
											rt_store_i32(memory_at_0, loc_8 + 76, loc_10)
											rt_store_i32(memory_at_0, loc_8 + 68, loc_6)
											if loc_9 == 0 then
												desired = 4
												break
											end
											FUNC_LIST[653](loc_9, loc_12)
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									while true do
										if rt_load_i32(memory_at_0, loc_0 + 128) == 0 then
											break
										end
										loc_12 = rt_load_i32(memory_at_0, loc_0 + 132)
										if loc_12 == loc_11 then
											break
										end
										loc_9 = bit_xor(rt_shr_u32(loc_11, 4), rt_shr_u32(loc_11, 9))
										loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 124), 1)
										loc_15 = rt_load_i32(memory_at_0, loc_0 + 120)
										loc_6 = 0
										while true do
											loc_10 = bit_and(loc_7, loc_9)
											loc_14 = rt_add_i32(rt_shl_i32(loc_10, 5), loc_15)
											loc_9 = rt_load_i32(memory_at_0, loc_14)
											if loc_9 ~= loc_11 then
												while true do
													if loc_9 == loc_12 then
														desired = 8
														break
													end
													loc_6 = rt_add_i32(loc_6, 1)
													loc_9 = rt_add_i32(loc_10, loc_6)
													if loc_6 <= loc_7 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if rt_load_i32(memory_at_0, loc_14 + 8) == 0 then
											break
										end
										loc_6 = rt_add_i32(loc_14, 8)
										rt_store_i64(memory_at_0, loc_20, rt_load_i64(memory_at_0, loc_6))
										rt_store_i64(memory_at_0, loc_20 + 16, rt_load_i64(memory_at_0, loc_14 + 24))
										rt_store_i64(memory_at_0, loc_20 + 8, rt_load_i64(memory_at_0, loc_14 + 16))
										loc_6 = rt_load_i32(memory_at_0, loc_8 + 76)
										if loc_5 < loc_6 then
											while true do
												rt_store_i32_n8(memory_at_0, loc_5 + 4, 255)
												rt_store_i32(memory_at_0, loc_5, loc_13)
												rt_store_i64(memory_at_0, loc_5 + 5, rt_load_i64(memory_at_0, loc_8 + 40))
												rt_store_i64(memory_at_0, loc_5 + 13, rt_load_i64(memory_at_0, loc_19 + 48))
												rt_store_i64(memory_at_0, loc_5 + 21, rt_load_i64(memory_at_0, loc_8 + 56))
												rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_8 + 63))
												desired = 5
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_9 = rt_load_i32(memory_at_0, loc_8 + 68)
										loc_11 = rt_div_i32(rt_sub_i32(loc_5, loc_9), 40)
										loc_7 = rt_add_i32(loc_11, 1)
										if loc_7 >= 107374183 then
											desired = 1
											break
										end
										loc_12 = rt_sub_i32(loc_6, loc_9)
										loc_6 = rt_div_i32(loc_12, 40)
										loc_10 = rt_shl_i32(loc_6, 1)
										loc_6 = (if loc_6 >= 53687091 then 107374182 else (if loc_7 < loc_10 then loc_10 else loc_7))
										if loc_6 ~= 0 then
											while true do
												if loc_6 >= 107374183 then
													desired = 7
													break
												end
												reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 40))
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = 0
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_10 = reg_0
										loc_7 = rt_add_i32(loc_10, rt_mul_i32(loc_11, 40))
										rt_store_i32_n8(memory_at_0, loc_7 + 4, 255)
										rt_store_i32(memory_at_0, loc_7, loc_13)
										rt_store_i64(memory_at_0, loc_7 + 5, rt_load_i64(memory_at_0, loc_8 + 40))
										rt_store_i64(memory_at_0, loc_7 + 13, rt_load_i64(memory_at_0, loc_19 + 48))
										rt_store_i64(memory_at_0, loc_7 + 21, rt_load_i64(memory_at_0, loc_8 + 56))
										rt_store_i32(memory_at_0, loc_7 + 28, rt_load_i32(memory_at_0, loc_8 + 63))
										rt_store_i32(memory_at_0, loc_7 + 32, 0)
										loc_10 = rt_add_i32(rt_mul_i32(loc_6, 40), loc_10)
										loc_6 = loc_7
										if loc_5 ~= loc_9 then
											while true do
												while true do
													loc_6 = rt_sub_i32(loc_6, 40)
													loc_5 = rt_sub_i32(loc_5, 40)
													rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
													rt_store_i32(memory_at_0, loc_6 + 32, rt_load_i32(memory_at_0, loc_5 + 32))
													rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_5 + 24))
													rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_5 + 16))
													rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
													if loc_5 ~= loc_9 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_5 = rt_add_i32(loc_7, 40)
										rt_store_i32(memory_at_0, loc_8 + 76, loc_10)
										rt_store_i32(memory_at_0, loc_8 + 68, loc_6)
										if loc_9 == 0 then
											desired = 4
											break
										end
										FUNC_LIST[653](loc_9, loc_12)
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										loc_6 = loc_11
										loc_9 = rt_load_i32(memory_at_0, loc_6 + 4)
										loc_10 = rt_load_i32(memory_at_0, 48612)
										if loc_9 ~= loc_10 then
											while true do
												loc_12 = rt_load_i32(memory_at_0, 48692)
												loc_7 = rt_load_i32(memory_at_0, 48572)
												while true do
													if bit_and((if loc_7 ~= loc_9 then 1 else 0), (if loc_9 ~= loc_12 then 1 else 0)) ~= 0 then
														desired = 8
														break
													end
													loc_6 = rt_load_i32(memory_at_0, loc_6 + 24)
													loc_9 = rt_load_i32(memory_at_0, loc_6 + 4)
													if loc_6 == 0 then
														continue
													end
													if loc_9 ~= loc_10 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_17 = 0
										while true do
											if loc_16 == 0 then
												break
											end
											loc_14 = rt_load_i32(memory_at_0, loc_6 + 24)
											loc_16 = rt_load_i32(memory_at_0, loc_0 + 112)
											if loc_14 == loc_16 then
												break
											end
											loc_10 = bit_xor(rt_shr_u32(loc_14, 4), rt_shr_u32(loc_14, 9))
											loc_12 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 104), 1)
											loc_17 = rt_load_i32(memory_at_0, loc_0 + 100)
											loc_9 = 0
											while true do
												while true do
													loc_15 = bit_and(loc_10, loc_12)
													loc_7 = rt_add_i32(rt_mul_i32(loc_15, 12), loc_17)
													loc_10 = rt_load_i32(memory_at_0, loc_7)
													if loc_14 == loc_10 then
														break
													end
													loc_7 = 0
													if loc_10 == loc_16 then
														break
													end
													loc_9 = rt_add_i32(loc_9, 1)
													loc_10 = rt_add_i32(loc_15, loc_9)
													if loc_9 <= loc_12 then
														desired = 10
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
														continue
													end
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_17 = (if loc_7 ~= 0 then rt_add_i32(loc_7, 4) else 0)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if rt_load_i32(memory_at_0, loc_0 + 68) == 0 then
											break
										end
										loc_12 = rt_load_i32(memory_at_0, loc_6 + 24)
										loc_15 = rt_load_i32(memory_at_0, loc_0 + 72)
										if loc_12 == loc_15 then
											break
										end
										loc_9 = bit_xor(rt_shr_u32(loc_12, 4), rt_shr_u32(loc_12, 9))
										loc_7 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 64), 1)
										loc_14 = rt_load_i32(memory_at_0, loc_0 + 60)
										loc_6 = 0
										while true do
											loc_10 = bit_and(loc_7, loc_9)
											loc_16 = rt_add_i32(rt_shl_i32(loc_10, 4), loc_14)
											loc_9 = rt_load_i32(memory_at_0, loc_16)
											if loc_9 ~= loc_12 then
												while true do
													if loc_9 == loc_15 then
														desired = 8
														break
													end
													loc_6 = rt_add_i32(loc_6, 1)
													loc_9 = rt_add_i32(loc_10, loc_6)
													if loc_6 <= loc_7 then
														desired = 9
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if rt_load_i32_u8(memory_at_0, loc_16 + 5) ~= 1 then
											break
										end
										loc_6 = rt_load_i32_u8(memory_at_0, loc_16 + 4)
										if loc_17 ~= 0 then
											while true do
												if rt_load_i32_u8(memory_at_0, loc_17 + 4) ~= 0 then
													desired = 8
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_7 = rt_load_i32(memory_at_0, loc_8 + 76)
										if loc_5 < loc_7 then
											while true do
												rt_store_i32(memory_at_0, loc_5 + 16, 0)
												rt_store_i64(memory_at_0, loc_5 + 8, rt_i64_ZERO)
												rt_store_i32_n8(memory_at_0, loc_5 + 4, loc_6)
												rt_store_i32(memory_at_0, loc_5, loc_13)
												rt_store_i64(memory_at_0, loc_5 + 20, rt_load_i64(memory_at_0, loc_8 + 40))
												rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_19 + 48))
												rt_store_i32(memory_at_0, loc_5 + 32, 4294967295)
												loc_5 = rt_add_i32(loc_5, 40)
												desired = 4
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_9 = rt_load_i32(memory_at_0, loc_8 + 68)
										loc_12 = rt_div_i32(rt_sub_i32(loc_5, loc_9), 40)
										loc_10 = rt_add_i32(loc_12, 1)
										if loc_10 < 107374183 then
											while true do
												loc_15 = rt_sub_i32(loc_7, loc_9)
												loc_7 = rt_div_i32(loc_15, 40)
												loc_11 = rt_shl_i32(loc_7, 1)
												loc_10 = (if loc_7 >= 53687091 then 107374182 else (if loc_10 < loc_11 then loc_11 else loc_10))
												if loc_10 ~= 0 then
													while true do
														if loc_10 >= 107374183 then
															desired = 7
															break
														end
														reg_0 = FUNC_LIST[646](rt_mul_i32(loc_10, 40))
														break
													end
													if desired then
														break
													end
												else
													while true do
														reg_0 = 0
														break
													end
													if desired then
														break
													end
												end
												loc_11 = reg_0
												loc_7 = rt_add_i32(loc_11, rt_mul_i32(loc_12, 40))
												rt_store_i32(memory_at_0, loc_7 + 32, 4294967295)
												rt_store_i32(memory_at_0, loc_7 + 16, 0)
												rt_store_i64(memory_at_0, loc_7 + 8, rt_i64_ZERO)
												rt_store_i32_n8(memory_at_0, loc_7 + 4, loc_6)
												rt_store_i32(memory_at_0, loc_7, loc_13)
												loc_10 = rt_add_i32(rt_mul_i32(loc_10, 40), loc_11)
												loc_6 = loc_7
												if loc_5 ~= loc_9 then
													while true do
														while true do
															loc_6 = rt_sub_i32(loc_6, 40)
															loc_5 = rt_sub_i32(loc_5, 40)
															rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
															rt_store_i32(memory_at_0, loc_6 + 32, rt_load_i32(memory_at_0, loc_5 + 32))
															rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_5 + 24))
															rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_5 + 16))
															rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
															if loc_5 ~= loc_9 then
																continue
															end
															break
														end
														if desired then
															break
														end
														break
													end
													if desired then
														break
													end
												end
												loc_5 = rt_add_i32(loc_7, 40)
												rt_store_i32(memory_at_0, loc_8 + 76, loc_10)
												rt_store_i32(memory_at_0, loc_8 + 68, loc_6)
												if loc_9 == 0 then
													desired = 4
													break
												end
												FUNC_LIST[653](loc_9, loc_15)
												desired = 4
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_10 = rt_load_i32(memory_at_0, loc_0 + 624)
									loc_6 = rt_add_i32(loc_10, 1)
									if loc_6 >= 256 then
										desired = 6
										break
									end
									rt_store_i32(memory_at_0, loc_0 + 624, loc_6)
									loc_9 = rt_load_i32(memory_at_0, loc_0 + 628)
									rt_store_i32(memory_at_0, loc_0 + 628, (if loc_6 < loc_9 then loc_9 else loc_6))
									reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
									loc_6 = reg_0
									FUNC_LIST[229](loc_0, loc_11, bit_and(loc_10, 255), 1)
									loc_7 = rt_load_i32(memory_at_0, loc_8 + 76)
									if loc_5 < loc_7 then
										while true do
											rt_store_i32(memory_at_0, loc_5 + 16, 0)
											rt_store_i64(memory_at_0, loc_5 + 8, rt_i64_ZERO)
											rt_store_i32_n8(memory_at_0, loc_5 + 4, loc_10)
											rt_store_i32(memory_at_0, loc_5, loc_13)
											rt_store_i64(memory_at_0, loc_5 + 20, rt_load_i64(memory_at_0, loc_8 + 40))
											rt_store_i32(memory_at_0, loc_5 + 28, rt_load_i32(memory_at_0, loc_19 + 48))
											rt_store_i32(memory_at_0, loc_5 + 32, loc_6)
											loc_5 = rt_add_i32(loc_5, 40)
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_9 = rt_load_i32(memory_at_0, loc_8 + 68)
									loc_15 = rt_div_i32(rt_sub_i32(loc_5, loc_9), 40)
									loc_11 = rt_add_i32(loc_15, 1)
									if loc_11 >= 107374183 then
										desired = 1
										break
									end
									loc_14 = rt_sub_i32(loc_7, loc_9)
									loc_7 = rt_div_i32(loc_14, 40)
									loc_12 = rt_shl_i32(loc_7, 1)
									loc_11 = (if loc_7 >= 53687091 then 107374182 else (if loc_11 < loc_12 then loc_12 else loc_11))
									if loc_11 ~= 0 then
										while true do
											if loc_11 >= 107374183 then
												desired = 7
												break
											end
											reg_0 = FUNC_LIST[646](rt_mul_i32(loc_11, 40))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = 0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_12 = reg_0
									loc_7 = rt_add_i32(loc_12, rt_mul_i32(loc_15, 40))
									rt_store_i32(memory_at_0, loc_7 + 32, loc_6)
									rt_store_i32(memory_at_0, loc_7 + 16, 0)
									rt_store_i64(memory_at_0, loc_7 + 8, rt_i64_ZERO)
									rt_store_i32_n8(memory_at_0, loc_7 + 4, loc_10)
									rt_store_i32(memory_at_0, loc_7, loc_13)
									loc_10 = rt_add_i32(rt_mul_i32(loc_11, 40), loc_12)
									loc_6 = loc_7
									if loc_5 ~= loc_9 then
										while true do
											while true do
												loc_6 = rt_sub_i32(loc_6, 40)
												loc_5 = rt_sub_i32(loc_5, 40)
												rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
												rt_store_i32(memory_at_0, loc_6 + 32, rt_load_i32(memory_at_0, loc_5 + 32))
												rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_5 + 24))
												rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_5 + 16))
												rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
												if loc_5 ~= loc_9 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_5 = rt_add_i32(loc_7, 40)
									rt_store_i32(memory_at_0, loc_8 + 76, loc_10)
									rt_store_i32(memory_at_0, loc_8 + 68, loc_6)
									if loc_9 == 0 then
										desired = 4
										break
									end
									FUNC_LIST[653](loc_9, loc_14)
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[197]()
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i64(memory_at_0, loc_8 + 16, rt_i64_from_u32(1, 255))
							FUNC_LIST[173](rt_add_i32(loc_11, 8), 5876, rt_add_i32(loc_8, 16))
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_5 + 32, 0)
						loc_5 = rt_add_i32(loc_5, 40)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					rt_store_i32(memory_at_0, loc_8 + 72, loc_5)
					loc_6 = rt_load_i32(memory_at_0, loc_2 + 56)
					if loc_6 > loc_18 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = rt_sub_i32(loc_24, loc_23)
			if loc_6 < rt_load_i32(memory_at_0, loc_1 + 32) then
				while true do
					while true do
						FUNC_LIST[212](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(loc_6, 2))))
						loc_6 = rt_add_i32(loc_6, 1)
						if loc_6 < rt_load_i32(memory_at_0, loc_1 + 32) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = rt_shr_i32(loc_9, 2)
			while true do
				loc_6 = rt_load_i32(memory_at_0, loc_8 + 68)
				if loc_5 == loc_6 then
					break
				end
				loc_10 = rt_add_i32(loc_0, 140)
				while true do
					while true do
						if rt_load_i32(memory_at_0, loc_6 + 8) == 0 then
							while true do
								FUNC_LIST[180](loc_0, rt_load_i32(memory_at_0, loc_6), rt_load_i32_u8(memory_at_0, loc_6 + 4), rt_load_i32(memory_at_0, loc_6 + 32))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[43](loc_10, loc_6)
						loc_9 = reg_0
						loc_7 = rt_add_i32(loc_6, 8)
						rt_store_i64(memory_at_0, loc_9 + 16, rt_load_i64(memory_at_0, loc_7 + 16))
						rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 16))
						rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = rt_add_i32(loc_6, 40)
					if loc_5 ~= loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_8 + 60, 0)
			rt_store_i64(memory_at_0, loc_8 + 52, rt_i64_ZERO)
			rt_store_i32_n8(memory_at_0, loc_8 + 49, loc_4)
			rt_store_i32_n8(memory_at_0, loc_8 + 48, loc_3)
			rt_store_i32(memory_at_0, loc_8 + 44, loc_11)
			rt_store_i32(memory_at_0, loc_8 + 40, loc_2)
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 692)
				if loc_5 < rt_load_i32(memory_at_0, loc_0 + 696) then
					while true do
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_8 + 40))
						rt_store_i32_n16(memory_at_0, loc_5 + 8, rt_load_i32_u16(memory_at_0, loc_8 + 48))
						rt_store_i32(memory_at_0, loc_5 + 20, 0)
						rt_store_i64(memory_at_0, loc_5 + 12, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_5 + 12, rt_load_i32(memory_at_0, loc_8 + 52))
						rt_store_i32(memory_at_0, loc_5 + 16, rt_load_i32(memory_at_0, loc_8 + 56))
						rt_store_i32(memory_at_0, loc_5 + 20, rt_load_i32(memory_at_0, loc_8 + 60))
						rt_store_i32(memory_at_0, loc_0 + 692, rt_add_i32(loc_5, 24))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[267](rt_add_i32(loc_0, 688), rt_add_i32(loc_8, 40))
				loc_6 = reg_0
				loc_5 = rt_load_i32(memory_at_0, loc_8 + 52)
				rt_store_i32(memory_at_0, loc_0 + 692, loc_6)
				if loc_5 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_8 + 56, loc_5)
				FUNC_LIST[653](loc_5, rt_sub_i32(rt_load_i32(memory_at_0, loc_8 + 60), loc_5))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_16 = rt_add_i32(loc_0, 120)
			loc_17 = rt_add_i32(loc_0, 100)
			loc_21 = rt_add_i32(loc_0, 140)
			FUNC_LIST[29](loc_16, loc_17, loc_21, rt_load_i32(memory_at_0, loc_0 + 616), rt_load_i32_u8(memory_at_0, loc_0 + 620), rt_load_i32(memory_at_0, loc_2 + 100))
			while true do
				while true do
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_2 + 100)
						if rt_load_i32(memory_at_0, loc_6 + 32) ~= 0 then
							while true do
								loc_5 = 0
								while true do
									while true do
										loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 28), rt_shl_i32(loc_5, 2)))
										if loc_6 == 0 then
											break
										end
										if rt_load_i32(memory_at_0, loc_6 + 4) ~= rt_load_i32(memory_at_0, 48764) then
											break
										end
										if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), 0) then
											while true do
												FUNC_LIST[104](rt_load_i32(memory_at_0, loc_0), rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 8), 1))
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_5 = rt_load_i32(memory_at_0, loc_0 + 692)
										loc_9 = rt_sub_i32(loc_5, 24)
										rt_store_i32_n16(memory_at_0, loc_8 + 48, rt_load_i32_u16(memory_at_0, loc_9 + 8))
										rt_store_i64(memory_at_0, loc_8 + 40, rt_load_i64(memory_at_0, loc_9))
										rt_store_i32(memory_at_0, loc_8 + 60, 0)
										rt_store_i64(memory_at_0, loc_8 + 52, rt_i64_ZERO)
										while true do
											loc_9 = rt_load_i32(memory_at_0, rt_sub_i32(loc_5, 8))
											loc_7 = rt_load_i32(memory_at_0, rt_sub_i32(loc_5, 12))
											if loc_9 == loc_7 then
												while true do
													loc_5 = 0
													reg_0 = 0
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											loc_9 = rt_sub_i32(loc_9, loc_7)
											if rt_lt_i32(loc_9, 0) then
												desired = 3
												break
											end
											reg_0 = FUNC_LIST[646](loc_9)
											loc_5 = reg_0
											reg_0 = FUNC_LIST[517](loc_5, loc_7, loc_9)
											reg_0 = rt_add_i32(reg_0, loc_9)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										loc_9 = reg_0
										FUNC_LIST[227](loc_0, rt_add_i32(loc_6, 28), rt_load_i32_u8(memory_at_0, loc_8 + 48), rt_load_i32_u8(memory_at_0, loc_8 + 49), 0)
										FUNC_LIST[183](loc_0, rt_load_i32(memory_at_0, loc_8 + 44))
										if loc_5 == 0 then
											desired = 4
											break
										end
										FUNC_LIST[653](loc_5, rt_sub_i32(loc_9, loc_5))
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									FUNC_LIST[181](loc_0, loc_6)
									loc_5 = rt_add_i32(loc_5, 1)
									loc_6 = rt_load_i32(memory_at_0, loc_2 + 100)
									if loc_5 < rt_load_i32(memory_at_0, loc_6 + 32) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[182](loc_0, loc_6)
						if reg_0 ~= 0 then
							break
						end
						if loc_4 ~= 0 then
							while true do
								loc_5 = 0
								while true do
									FUNC_LIST[90](rt_load_i32(memory_at_0, loc_0), 2, bit_and(rt_add_i32(loc_3, loc_5), 255), 0, 0)
									loc_5 = rt_add_i32(loc_5, 1)
									if loc_4 ~= loc_5 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[183](loc_0, loc_11)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[185](loc_0, loc_11)
					reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
					loc_6 = reg_0
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 692)
					loc_5 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 12))
					loc_9 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 8))
					if loc_5 ~= loc_9 then
						while true do
							while true do
								while true do
									reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_5), loc_6)
									if reg_0 ~= 0 then
										while true do
											loc_5 = rt_add_i32(loc_5, 4)
											if loc_5 ~= loc_9 then
												desired = 6
												break
											end
											desired = 5
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
								error("out of code bounds")
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 692)
							reg_0 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 12))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					if loc_5 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, rt_sub_i32(loc_7, 8), loc_5)
							FUNC_LIST[653](loc_5, rt_sub_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 4)), loc_5))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 692, rt_sub_i32(loc_7, 24))
					loc_14 = rt_load_i32(memory_at_0, loc_2 + 56)
					if loc_14 == 0 then
						desired = 2
						break
					end
					loc_9 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 144), 1)
					loc_12 = rt_load_i32(memory_at_0, loc_0 + 140)
					loc_11 = rt_load_i32(memory_at_0, loc_0 + 152)
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 148)
					loc_18 = rt_load_i32(memory_at_0, loc_2 + 52)
					loc_15 = 0
					while true do
						while true do
							if loc_1 == 0 then
								break
							end
							loc_10 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_15, 2), loc_18))
							if loc_11 == loc_10 then
								break
							end
							loc_6 = bit_xor(rt_shr_u32(loc_10, 4), rt_shr_u32(loc_10, 9))
							loc_5 = 0
							while true do
								loc_7 = bit_and(loc_6, loc_9)
								loc_13 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_12)
								loc_6 = rt_load_i32(memory_at_0, loc_13)
								if loc_6 ~= loc_10 then
									while true do
										if loc_6 == loc_11 then
											desired = 5
											break
										end
										loc_5 = rt_add_i32(loc_5, 1)
										loc_6 = rt_add_i32(loc_7, loc_5)
										if loc_5 <= loc_9 then
											desired = 6
											break
										end
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_13 + 8, 0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_15 = rt_add_i32(loc_15, 1)
						if loc_14 ~= loc_15 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](rt_add_i32(loc_8, 52))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[29](loc_16, loc_17, loc_21, rt_load_i32(memory_at_0, loc_0 + 616), rt_load_i32_u8(memory_at_0, loc_0 + 620), rt_load_i32(memory_at_0, loc_2 + 100))
			loc_5 = rt_load_i32(memory_at_0, loc_8 + 68)
			if loc_5 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_8 + 72, loc_5)
					FUNC_LIST[653](loc_5, rt_sub_i32(rt_load_i32(memory_at_0, loc_8 + 76), loc_5))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 624, loc_22)
			GLOBAL_LIST[0].value = rt_add_i32(loc_8, 80)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](rt_add_i32(loc_8, 68))
		error("out of code bounds")
	end
end
FUNC_LIST[267] = --[[ Luau::Compiler::InlineFrame* std::__2::vector<Luau::Compiler::InlineFrame, std::__2::allocator<Luau::Compiler::InlineFrame>>::__push_back_slow_path<Luau::Compiler::InlineFrame>(Luau::Compiler::InlineFrame&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0)
			loc_4 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_3), 24)
			loc_2 = rt_add_i32(loc_4, 1)
			if loc_2 < 178956971 then
				while true do
					loc_3 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_3), 24)
					loc_6 = rt_shl_i32(loc_3, 1)
					loc_3 = (if loc_3 >= 89478485 then 178956970 else (if loc_2 < loc_6 then loc_6 else loc_2))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 178956971 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_3, 24))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_2 = rt_add_i32(loc_5, rt_mul_i32(loc_4, 24))
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32_n16(memory_at_0, loc_2 + 8, rt_load_i32_u16(memory_at_0, loc_1 + 8))
					rt_store_i32(memory_at_0, loc_2 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
					rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
					rt_store_i32(memory_at_0, loc_2 + 20, rt_load_i32(memory_at_0, loc_1 + 20))
					rt_store_i32(memory_at_0, loc_1 + 20, 0)
					rt_store_i64(memory_at_0, loc_1 + 12, rt_i64_ZERO)
					loc_8 = rt_add_i32(rt_mul_i32(loc_3, 24), loc_5)
					loc_7 = rt_add_i32(loc_2, 24)
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						if loc_1 == loc_4 then
							while true do
								loc_3 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_3 = rt_sub_i32(loc_2, 24)
							loc_5 = rt_sub_i32(loc_1, 24)
							rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
							rt_store_i32_n16(memory_at_0, loc_3 + 8, rt_load_i32_u16(memory_at_0, loc_5 + 8))
							loc_6 = rt_sub_i32(loc_2, 4)
							rt_store_i32(memory_at_0, loc_6, 0)
							loc_9 = rt_sub_i32(loc_1, 12)
							rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 12), rt_load_i32(memory_at_0, loc_9))
							rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 8), rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 8)))
							loc_1 = rt_sub_i32(loc_1, 4)
							rt_store_i32(memory_at_0, loc_6, rt_load_i32(memory_at_0, loc_1))
							rt_store_i32(memory_at_0, loc_1, 0)
							rt_store_i64(memory_at_0, loc_9, rt_i64_ZERO)
							loc_2 = loc_3
							loc_1 = loc_5
							if loc_4 ~= loc_1 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_7)
					rt_store_i32(memory_at_0, loc_0, loc_3)
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_8)
					if loc_1 ~= loc_4 then
						while true do
							while true do
								loc_2 = rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12))
								if loc_2 ~= 0 then
									while true do
										rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 8), loc_2)
										FUNC_LIST[653](loc_2, rt_sub_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), loc_2))
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_1 = rt_sub_i32(loc_1, 24)
								if loc_1 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					if loc_4 ~= 0 then
						while true do
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_5, loc_4))
							break
						end
						if desired then
							break
						end
					end
					reg_0 = loc_7
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[268] = --[[ Luau::Compiler::compileUnrolledFor(Luau::AstStatFor*, int, double, double) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local reg_0
	local desired
	while true do
		loc_12 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_12
		rt_store_i32(memory_at_0, loc_12 + 12, rt_load_i32(memory_at_0, loc_1 + 28))
		loc_15 = rt_load_i32(memory_at_0, loc_0 + 664)
		loc_16 = rt_load_i32(memory_at_0, loc_0 + 668)
		loc_7 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 644), rt_load_i32(memory_at_0, loc_0 + 640)), 2)
		while true do
			while true do
				while true do
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 680)
						loc_11 = rt_load_i32(memory_at_0, loc_0 + 684)
						if loc_5 < loc_11 then
							while true do
								rt_store_i32(memory_at_0, loc_5 + 8, 0)
								rt_store_i32(memory_at_0, loc_5 + 4, loc_7)
								rt_store_i32(memory_at_0, loc_5, loc_7)
								loc_7 = rt_add_i32(loc_5, 12)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = rt_add_i32(loc_0, 676)
						loc_9 = rt_load_i32(memory_at_0, loc_8)
						loc_13 = rt_div_i32(rt_sub_i32(loc_5, loc_9), 12)
						loc_6 = rt_add_i32(loc_13, 1)
						if loc_6 >= 357913942 then
							desired = 3
							break
						end
						loc_8 = 0
						loc_10 = rt_div_i32(rt_sub_i32(loc_11, loc_9), 12)
						loc_14 = rt_shl_i32(loc_10, 1)
						loc_10 = (if loc_10 >= 178956970 then 357913941 else (if loc_6 < loc_14 then loc_14 else loc_6))
						if loc_10 ~= 0 then
							while true do
								if loc_10 >= 357913942 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[646](rt_mul_i32(loc_10, 12))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_8
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = reg_0
						loc_6 = rt_add_i32(loc_8, rt_mul_i32(loc_13, 12))
						rt_store_i32(memory_at_0, loc_6 + 8, 0)
						rt_store_i32(memory_at_0, loc_6 + 4, loc_7)
						rt_store_i32(memory_at_0, loc_6, loc_7)
						loc_8 = rt_add_i32(rt_mul_i32(loc_10, 12), loc_8)
						loc_7 = rt_add_i32(loc_6, 12)
						if loc_5 ~= loc_9 then
							while true do
								while true do
									loc_6 = rt_sub_i32(loc_6, 12)
									loc_5 = rt_sub_i32(loc_5, 12)
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
									rt_store_i32(memory_at_0, loc_6 + 8, rt_load_i32(memory_at_0, loc_5 + 8))
									if loc_5 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									break
								end
								loc_11 = rt_load_i32(memory_at_0, loc_0 + 684)
								reg_0 = rt_load_i32(memory_at_0, loc_0 + 676)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_9
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_9 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 684, loc_8)
						rt_store_i32(memory_at_0, loc_0 + 680, loc_7)
						rt_store_i32(memory_at_0, loc_0 + 676, loc_6)
						if loc_9 == 0 then
							break
						end
						FUNC_LIST[653](loc_9, rt_sub_i32(loc_11, loc_9))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 680, loc_7)
					if rt_gt_i32(loc_2, 0) then
						while true do
							loc_13 = rt_add_i32(loc_0, 100)
							loc_14 = rt_add_i32(loc_0, 120)
							loc_8 = rt_add_i32(loc_0, 140)
							loc_10 = 0
							while true do
								reg_0 = FUNC_LIST[43](loc_8, rt_add_i32(loc_12, 12))
								rt_store_i32(memory_at_0, reg_0, 3)
								reg_0 = FUNC_LIST[43](loc_8, rt_add_i32(loc_12, 12))
								rt_store_f64(memory_at_0, reg_0 + 8, ((no_op(loc_10) * loc_4) + loc_3))
								FUNC_LIST[29](loc_14, loc_13, loc_8, rt_load_i32(memory_at_0, loc_0 + 616), rt_load_i32_u8(memory_at_0, loc_0 + 620), loc_1)
								loc_5 = rt_load_i32(memory_at_0, loc_0 + 664)
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 668)
								FUNC_LIST[181](loc_0, rt_load_i32(memory_at_0, loc_1 + 44))
								reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
								loc_11 = reg_0
								loc_5 = rt_sub_i32(loc_6, loc_5)
								loc_9 = rt_load_i32(memory_at_0, loc_0 + 668)
								loc_6 = rt_load_i32(memory_at_0, loc_0 + 664)
								if loc_5 < rt_sub_i32(loc_9, loc_6) then
									while true do
										loc_5 = rt_shr_i32(loc_5, 3)
										while true do
											loc_7 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_6)
											if rt_load_i32(memory_at_0, loc_7) == 1 then
												while true do
													reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_7 + 4), loc_11)
													if reg_0 == 0 then
														desired = 1
														break
													end
													loc_9 = rt_load_i32(memory_at_0, loc_0 + 668)
													reg_0 = rt_load_i32(memory_at_0, loc_0 + 664)
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											else
												while true do
													reg_0 = loc_6
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											end
											loc_6 = reg_0
											loc_5 = rt_add_i32(loc_5, 1)
											if loc_5 < rt_shr_i32(rt_sub_i32(loc_9, loc_6), 3) then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_10 = rt_add_i32(loc_10, 1)
								if loc_2 ~= loc_10 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[93](rt_load_i32(memory_at_0, loc_0))
					loc_11 = reg_0
					loc_10 = rt_sub_i32(loc_16, loc_15)
					loc_8 = rt_shr_i32(loc_10, 3)
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 668)
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 664)
					loc_7 = rt_shr_i32(rt_sub_i32(loc_9, loc_6), 3)
					if loc_8 < loc_7 then
						while true do
							loc_5 = loc_8
							while true do
								loc_7 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_6)
								if rt_load_i32(memory_at_0, loc_7) ~= 0 then
									while true do
										reg_0 = loc_6
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								else
									while true do
										reg_0 = FUNC_LIST[94](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_7 + 4), loc_11)
										if reg_0 == 0 then
											desired = 1
											break
										end
										loc_9 = rt_load_i32(memory_at_0, loc_0 + 668)
										reg_0 = rt_load_i32(memory_at_0, loc_0 + 664)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_6 = reg_0
								loc_5 = rt_add_i32(loc_5, 1)
								loc_7 = rt_shr_i32(rt_sub_i32(loc_9, loc_6), 3)
								if loc_5 < loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_7 < loc_8 then
							while true do
								FUNC_LIST[225](rt_add_i32(loc_0, 664), rt_sub_i32(loc_8, loc_7))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_7 <= loc_8 then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 668, rt_add_i32(loc_6, loc_10))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 680, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 680), 12))
					loc_5 = rt_add_i32(loc_0, 140)
					reg_0 = FUNC_LIST[43](loc_5, rt_add_i32(loc_12, 12))
					rt_store_i32(memory_at_0, reg_0, 0)
					FUNC_LIST[29](rt_add_i32(loc_0, 120), rt_add_i32(loc_0, 100), loc_5, rt_load_i32(memory_at_0, loc_0 + 616), rt_load_i32_u8(memory_at_0, loc_0 + 620), loc_1)
					GLOBAL_LIST[0].value = rt_add_i32(loc_12, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_8)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[173](rt_add_i32(loc_1, 8), 4575, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[269] = --[[ Luau::Compiler::resolveAssignConflicts(Luau::AstStat*, std::__2::vector<Luau::Compiler::Assignment, std::__2::allocator<Luau::Compiler::Assignment>>&, Luau::AstArray<Luau::AstExpr*> const&)::Visitor::~Visitor() ]] function(loc_0)
	while true do
		FUNC_LIST[653](loc_0, 72)
		break
	end
end
FUNC_LIST[270] = --[[ Luau::Compiler::resolveAssignConflicts(Luau::AstStat*, std::__2::vector<Luau::Compiler::Assignment, std::__2::allocator<Luau::Compiler::Assignment>>&, Luau::AstArray<Luau::AstExpr*> const&)::Visitor::visit(Luau::AstExprLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
			if rt_load_i32(memory_at_0, loc_2 + 68) == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
			loc_6 = rt_load_i32(memory_at_0, loc_2 + 72)
			if loc_3 == loc_6 then
				break
			end
			loc_1 = bit_xor(rt_shr_u32(loc_3, 4), rt_shr_u32(loc_3, 9))
			loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 64), 1)
			loc_7 = rt_load_i32(memory_at_0, loc_2 + 60)
			loc_2 = 0
			while true do
				loc_8 = bit_and(loc_1, loc_4)
				loc_5 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_7)
				loc_1 = rt_load_i32(memory_at_0, loc_5)
				if loc_1 ~= loc_3 then
					while true do
						if loc_1 == loc_6 then
							desired = 1
							break
						end
						loc_2 = rt_add_i32(loc_2, 1)
						loc_1 = rt_add_i32(loc_8, loc_2)
						if loc_2 <= loc_4 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_load_i32_u8(memory_at_0, loc_5 + 5) ~= 1 then
				break
			end
			loc_2 = rt_load_i32_u8(memory_at_0, loc_5 + 4)
			loc_1 = rt_shl_i32(1, loc_2)
			loc_2 = rt_add_i32(rt_shl_i32(rt_shr_u32(loc_2, 5), 2), loc_0)
			if bit_and(loc_1, rt_load_i32(memory_at_0, loc_2 + 40)) == 0 then
				break
			end
			loc_9 = loc_2
			loc_2 = rt_add_i32(loc_9, 8)
			rt_store_i32(memory_at_0, loc_2, bit_or(loc_1, rt_load_i32(memory_at_0, loc_9 + 8)))
			break
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[271] = --[[ Luau::Compiler::ConstUpvalueVisitor::~ConstUpvalueVisitor() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 12528)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 16), loc_1))
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[272] = --[[ Luau::Compiler::ConstUpvalueVisitor::~ConstUpvalueVisitor()_373 ]] function(loc_0)
	local loc_1 = 0
	while true do
		rt_store_i32(memory_at_0, loc_0, 12528)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 16), loc_1))
				break
			end
		end
		FUNC_LIST[653](loc_0, 20)
		break
	end
end
FUNC_LIST[273] = --[[ Luau::Compiler::ConstUpvalueVisitor::visit(Luau::AstExprLocal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					if rt_load_i32_u8(memory_at_0, loc_1 + 28) ~= 1 then
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
					if rt_load_i32(memory_at_0, loc_2 + 128) == 0 then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 132)
					if loc_4 == loc_1 then
						break
					end
					loc_3 = bit_xor(rt_shr_u32(loc_1, 4), rt_shr_u32(loc_1, 9))
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 124), 1)
					loc_6 = rt_load_i32(memory_at_0, loc_2 + 120)
					loc_2 = 0
					while true do
						loc_7 = bit_and(loc_3, loc_5)
						loc_8 = rt_add_i32(rt_shl_i32(loc_7, 5), loc_6)
						loc_3 = rt_load_i32(memory_at_0, loc_8)
						if loc_3 ~= loc_1 then
							while true do
								if loc_3 == loc_4 then
									desired = 3
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_7, loc_2)
								if loc_2 <= loc_5 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_8 + 8) == 0 then
						break
					end
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 16)
						if loc_2 < loc_7 then
							while true do
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1 + 24))
								loc_1 = rt_add_i32(loc_2, 4)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_add_i32(loc_0, 8)
						loc_5 = rt_load_i32(memory_at_0, loc_4)
						loc_8 = rt_shr_i32(rt_sub_i32(loc_2, loc_5), 2)
						loc_3 = rt_add_i32(loc_8, 1)
						if loc_3 >= 1073741824 then
							desired = 2
							break
						end
						loc_4 = rt_sub_i32(loc_7, loc_5)
						loc_6 = rt_shr_i32(loc_4, 1)
						loc_4 = (if loc_4 >= 2147483644 then 1073741823 else (if loc_3 < loc_6 then loc_6 else loc_3))
						if loc_4 ~= 0 then
							while true do
								if loc_4 >= 1073741824 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = reg_0
						loc_3 = rt_add_i32(loc_6, rt_shl_i32(loc_8, 2))
						rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_1 + 24))
						loc_4 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
						loc_1 = rt_add_i32(loc_3, 4)
						if loc_2 ~= loc_5 then
							while true do
								while true do
									loc_3 = rt_sub_i32(loc_3, 4)
									loc_2 = rt_sub_i32(loc_2, 4)
									rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_2))
									if loc_2 ~= loc_5 then
										continue
									end
									break
								end
								if desired then
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 16)
								reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_5
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 16, loc_4)
						rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
						if loc_5 == 0 then
							break
						end
						FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[274] = --[[ Luau::Compiler::ReturnVisitor::visit(Luau::AstStatReturn*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		if rt_load_i32(memory_at_0, loc_1 + 32) == 1 then
			while true do
				reg_0 = FUNC_LIST[231](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28)))
				reg_0 = bit_xor(reg_0, 1)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		rt_store_i32_n8(memory_at_0, loc_0 + 8, bit_and(loc_2, rt_load_i32_u8(memory_at_0, loc_0 + 8)))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[275] = --[[ luau_compile ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = rt_add_i32(loc_4, 88)
		rt_store_i64(memory_at_0, loc_5, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 96, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_4 + 104, 0)
		rt_store_i64(memory_at_0, loc_4 + 80, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 72, rt_i64_from_u32(1, 1))
		if loc_2 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_4 + 104, rt_load_i32(memory_at_0, loc_2 + 32))
				rt_store_i64(memory_at_0, loc_4 + 96, rt_load_i64(memory_at_0, loc_2 + 24))
				rt_store_i64(memory_at_0, loc_4 + 88, rt_load_i64(memory_at_0, loc_2 + 16))
				rt_store_i64(memory_at_0, loc_4 + 80, rt_load_i64(memory_at_0, loc_2 + 8))
				rt_store_i64(memory_at_0, loc_4 + 72, rt_load_i64(memory_at_0, loc_2))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 < 2147483640 then
			while true do
				while true do
					while true do
						if loc_1 >= 11 then
							while true do
								loc_5 = rt_add_i32(bit_or(loc_1, 7), 1)
								reg_0 = FUNC_LIST[646](loc_5)
								loc_2 = reg_0
								rt_store_i32(memory_at_0, loc_4 + 56, bit_or(loc_5, 2147483648))
								rt_store_i32(memory_at_0, loc_4 + 48, loc_2)
								rt_store_i32(memory_at_0, loc_4 + 52, loc_1)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32_n8(memory_at_0, loc_4 + 59, loc_1)
						loc_2 = rt_add_i32(loc_4, 48)
						if loc_1 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[517](loc_2, loc_0, loc_1)
					break
				end
				if desired then
					break
				end
				rt_store_i32_n8(memory_at_0, rt_add_i32(loc_1, loc_2), 0)
				rt_store_i32_n8(memory_at_0, loc_4 + 44, 0)
				rt_store_i32_n8(memory_at_0, loc_4 + 12, 0)
				rt_store_i32_n16(memory_at_0, loc_4 + 8, 0)
				FUNC_LIST[190](rt_add_i32(loc_4, 60), rt_add_i32(loc_4, 48), rt_add_i32(loc_4, 72), rt_add_i32(loc_4, 8), 0)
				while true do
					if rt_load_i32_u8(memory_at_0, loc_4 + 44) ~= 1 then
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_4 + 32)
					if loc_1 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_4 + 36, loc_1)
							FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 40), loc_1))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_1 = rt_load_i32(memory_at_0, loc_4 + 12)
					if loc_1 == 0 then
						break
					end
					FUNC_LIST[652](loc_1)
					break
				end
				if desired then
					break
				end
				if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 59), 0) then
					while true do
						FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 48), bit_and(rt_load_i32(memory_at_0, loc_4 + 56), 2147483647))
						break
					end
					if desired then
						break
					end
				end
				loc_1 = rt_load_i32_i8(memory_at_0, loc_4 + 71)
				loc_5 = (if rt_lt_i32(loc_1, 0) then 1 else 0)
				loc_0 = (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_4 + 64) else loc_1)
				reg_0 = FUNC_LIST[553](loc_0)
				loc_2 = reg_0
				if loc_2 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[517](loc_2, (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_4 + 60) else rt_add_i32(loc_4, 60)), loc_0)
						rt_store_i32(memory_at_0, loc_3, loc_0)
						break
					end
					if desired then
						break
					end
				end
				if rt_lt_i32(loc_1, 0) then
					while true do
						FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 60), bit_and(rt_load_i32(memory_at_0, loc_4 + 68), 2147483647))
						break
					end
					if desired then
						break
					end
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_4, 112)
				reg_0 = loc_2
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[276](rt_add_i32(loc_4, 48))
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[276] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__throw_length_error[abi:ne180100]() const ]] function(loc_0)
	while true do
		FUNC_LIST[277](3704)
		error("out of code bounds")
	end
end
FUNC_LIST[277] = --[[ std::__2::__throw_length_error[abi:ne180100](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[578](8)
		reg_0 = FUNC_LIST[278](reg_0, loc_0)
		FUNC_LIST[0](reg_0, 47972, 131)
		error("out of code bounds")
	end
end
FUNC_LIST[278] = --[[ std::length_error::length_error[abi:ne180100](char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[580](loc_0, loc_1)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_1, 47940)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[279] = --[[ Luau::AstAttr::AstAttr(Luau::Location const&, Luau::AstAttr::Type) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48564))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13168)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[280] = --[[ Luau::AstAttr::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 12)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[281] = --[[ Luau::AstExprGroup::AstExprGroup(Luau::Location const&, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48572))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13196)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[282] = --[[ Luau::AstExprGroup::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 20)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[283] = --[[ Luau::AstExprConstantNil::AstExprConstantNil(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48580))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13224)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[284] = --[[ Luau::AstExprConstantNil::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 24)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[285] = --[[ Luau::AstExprConstantBool::AstExprConstantBool(Luau::Location const&, bool) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48588))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13252)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[286] = --[[ Luau::AstExprConstantBool::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 28)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[287] = --[[ Luau::AstExprConstantNumber::AstExprConstantNumber(Luau::Location const&, double, Luau::ConstantNumberParseResult) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48596))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_f64(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13280)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[288] = --[[ Luau::AstExprConstantNumber::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 32)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[289] = --[[ Luau::AstExprConstantString::AstExprConstantString(Luau::Location const&, Luau::AstArray<char> const&, Luau::AstExprConstantString::QuoteStyle) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48604))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13308)
		loc_4 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 24, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[290] = --[[ Luau::AstExprConstantString::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 36)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[291] = --[[ Luau::AstExprLocal::AstExprLocal(Luau::Location const&, Luau::AstLocal*, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48612))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13336)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[292] = --[[ Luau::AstExprLocal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 40)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[293] = --[[ Luau::AstExprGlobal::AstExprGlobal(Luau::Location const&, Luau::AstName const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48620))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13364)
		rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[294] = --[[ Luau::AstExprGlobal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 44)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[295] = --[[ Luau::AstExprVarargs::AstExprVarargs(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48628))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13392)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[296] = --[[ Luau::AstExprVarargs::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 48)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[297] = --[[ Luau::AstExprCall::AstExprCall(Luau::Location const&, Luau::AstExpr*, Luau::AstArray<Luau::AstExpr*> const&, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48636))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13420)
		loc_6 = rt_load_i64(memory_at_0, loc_3)
		rt_store_i32_n8(memory_at_0, loc_0 + 36, loc_4)
		rt_store_i64(memory_at_0, loc_0 + 28, loc_6)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_0 + 48, rt_load_i64(memory_at_0, loc_5 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[298] = --[[ Luau::AstExprCall::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 52)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 32)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 28)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					loc_2 = 0
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[299] = --[[ Luau::AstExprIndexName::AstExprIndexName(Luau::Location const&, Luau::AstExpr*, Luau::AstName const&, Luau::Location const&, Luau::Position const&, char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local loc_7 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48644))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13448)
		rt_store_i32(memory_at_0, loc_0 + 28, rt_load_i32(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_4))
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
		loc_7 = rt_load_i64(memory_at_0, loc_5)
		rt_store_i32_n8(memory_at_0, loc_0 + 56, loc_6)
		rt_store_i64(memory_at_0, loc_0 + 48, loc_7)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[300] = --[[ Luau::AstExprIndexName::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 56)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[301] = --[[ Luau::AstExprIndexExpr::AstExprIndexExpr(Luau::Location const&, Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48652))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13476)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[302] = --[[ Luau::AstExprIndexExpr::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 60)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[303] = --[[ Luau::AstExprFunction::AstExprFunction(Luau::Location const&, Luau::AstArray<Luau::AstAttr*> const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstLocal*, Luau::AstArray<Luau::AstLocal*> const&, bool, Luau::Location const&, Luau::AstStatBlock*, unsigned long, Luau::AstName const&, std::__2::optional<Luau::AstTypeList> const&, Luau::AstTypePack*, std::__2::optional<Luau::Location> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8, loc_9, loc_10, loc_11, loc_12, loc_13, loc_14)
	local loc_15 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48660))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13504)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_3))
		loc_15 = rt_load_i64(memory_at_0, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 48, loc_5)
		rt_store_i64(memory_at_0, loc_0 + 40, loc_15)
		rt_store_i64(memory_at_0, loc_0 + 52, rt_load_i64(memory_at_0, loc_6))
		rt_store_i64(memory_at_0, loc_0 + 60, rt_load_i64(memory_at_0, loc_12))
		rt_store_i64(memory_at_0, loc_0 + 68, rt_load_i64(memory_at_0, loc_12 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 76, loc_7)
		rt_store_i64(memory_at_0, loc_0 + 80, rt_load_i64(memory_at_0, loc_8))
		rt_store_i64(memory_at_0, loc_0 + 88, rt_load_i64(memory_at_0, loc_8 + 8))
		rt_store_i32(memory_at_0, loc_0 + 104, loc_10)
		rt_store_i32(memory_at_0, loc_0 + 100, loc_9)
		rt_store_i32(memory_at_0, loc_0 + 96, loc_13)
		rt_store_i32(memory_at_0, loc_0 + 108, rt_load_i32(memory_at_0, loc_11))
		rt_store_i64(memory_at_0, loc_0 + 112, rt_load_i64(memory_at_0, loc_14))
		rt_store_i64(memory_at_0, loc_0 + 120, rt_load_i64(memory_at_0, loc_14 + 8))
		rt_store_i32(memory_at_0, loc_0 + 128, rt_load_i32(memory_at_0, loc_14 + 16))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[304] = --[[ Luau::AstExprFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 64)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 56)
					if loc_3 == 0 then
						break
					end
					loc_5 = bit_and(rt_sub_i32(loc_3, 1), 1073741823)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 52)
					loc_2 = loc_4
					if bit_and(loc_3, 1) ~= 0 then
						while true do
							loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4) + 32)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = rt_add_i32(loc_4, 4)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_4)
					while true do
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 4) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = rt_add_i32(loc_2, 8)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 96)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				while true do
					if rt_load_i32_u8(memory_at_0, loc_0 + 72) ~= 1 then
						break
					end
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_0 + 64)
						if loc_6 == 0 then
							break
						end
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 60)
						loc_2 = loc_7
						loc_5 = bit_and(loc_6, 3)
						if loc_5 ~= 0 then
							while true do
								loc_3 = 0
								while true do
									loc_4 = rt_load_i32(memory_at_0, loc_2)
									TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
									loc_2 = rt_add_i32(loc_2, 4)
									loc_3 = rt_add_i32(loc_3, 1)
									if loc_5 ~= loc_3 then
										continue
									end
									break
								end
								break
							end
						end
						if bit_and(rt_sub_i32(loc_6, 1), 1073741823) <= 2 then
							break
						end
						loc_4 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_7)
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
							loc_2 = rt_add_i32(loc_2, 16)
							if loc_4 ~= loc_2 then
								continue
							end
							break
						end
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 68)
					if loc_2 == 0 then
						break
					end
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 100)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[305] = --[[ Luau::AstExprFunction::hasNativeAttribute() const ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 28)
		if loc_1 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 24)
		loc_2 = rt_add_i32(loc_0, rt_shl_i32(loc_1, 2))
		while true do
			loc_1 = (if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 24) == 1 then 1 else 0)
			if loc_1 == 0 then
				while true do
					loc_0 = rt_add_i32(loc_0, 4)
					if loc_2 ~= loc_0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[306] = --[[ Luau::AstExprTable::AstExprTable(Luau::Location const&, Luau::AstArray<Luau::AstExprTable::Item> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48668))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13532)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[307] = --[[ Luau::AstExprTable::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 68)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
			if loc_2 == 0 then
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 24)
			loc_3 = rt_add_i32(loc_0, rt_mul_i32(loc_2, 12))
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 12)
				if loc_3 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[308] = --[[ Luau::AstExprUnary::AstExprUnary(Luau::Location const&, Luau::AstExprUnary::Op, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48676))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13560)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[309] = --[[ Luau::AstExprUnary::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 72)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[310] = --[[ Luau::AstExprBinary::AstExprBinary(Luau::Location const&, Luau::AstExprBinary::Op, Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48684))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 32, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13588)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[311] = --[[ Luau::AstExprBinary::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 76)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[312] = --[[ Luau::AstExprTypeAssertion::AstExprTypeAssertion(Luau::Location const&, Luau::AstExpr*, Luau::AstType*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48692))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13616)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[313] = --[[ Luau::AstExprTypeAssertion::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 80)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[314] = --[[ Luau::AstExprIfElse::AstExprIfElse(Luau::Location const&, Luau::AstExpr*, bool, Luau::AstExpr*, bool, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48700))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 40, loc_6)
		rt_store_i32_n8(memory_at_0, loc_0 + 36, loc_5)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_4)
		rt_store_i32_n8(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13644)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[315] = --[[ Luau::AstExprIfElse::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 84)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 40)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[316] = --[[ Luau::AstExprError::AstExprError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48924))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13672)
		loc_4 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 24, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[317] = --[[ Luau::AstExprInterpString::AstExprInterpString(Luau::Location const&, Luau::AstArray<Luau::AstArray<char>> const&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48708))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 13700)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_3))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[318] = --[[ Luau::AstExprInterpString::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 88)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 36)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 32)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[319] = --[[ Luau::AstExprError::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 92)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[320] = --[[ Luau::AstStatBlock::AstStatBlock(Luau::Location const&, Luau::AstArray<Luau::AstStat*> const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48716))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 13728)
		loc_4 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i32_n8(memory_at_0, loc_0 + 36, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 28, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[321] = --[[ Luau::AstStatBlock::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 100)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 32)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 28)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[322] = --[[ Luau::AstStatIf::AstStatIf(Luau::Location const&, Luau::AstExpr*, Luau::AstStatBlock*, Luau::AstStat*, std::__2::optional<Luau::Location> const&, std::__2::optional<Luau::Location> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48724))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0 + 36, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13756)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_0 + 48, rt_load_i64(memory_at_0, loc_5 + 8))
		rt_store_i32(memory_at_0, loc_0 + 56, rt_load_i32(memory_at_0, loc_5 + 16))
		rt_store_i64(memory_at_0, loc_0 + 60, rt_load_i64(memory_at_0, loc_6))
		rt_store_i64(memory_at_0, loc_0 + 68, rt_load_i64(memory_at_0, loc_6 + 8))
		rt_store_i32(memory_at_0, loc_0 + 76, rt_load_i32(memory_at_0, loc_6 + 16))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[323] = --[[ Luau::AstStatIf::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 104)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 36)
			if loc_0 == 0 then
				break
			end
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[324] = --[[ Luau::AstStatWhile::AstStatWhile(Luau::Location const&, Luau::AstExpr*, Luau::AstStatBlock*, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48732))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32_n8(memory_at_0, loc_0 + 36, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13784)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_0 + 48, rt_load_i64(memory_at_0, loc_5 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[325] = --[[ Luau::AstStatWhile::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 108)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[326] = --[[ Luau::AstStatRepeat::AstStatRepeat(Luau::Location const&, Luau::AstExpr*, Luau::AstStatBlock*, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48740))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32_n8(memory_at_0, loc_0 + 36, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13812)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[327] = --[[ Luau::AstStatRepeat::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 112)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[328] = --[[ Luau::AstStatBreak::AstStatBreak(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48748))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 13840)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[329] = --[[ Luau::AstStatBreak::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 116)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[330] = --[[ Luau::AstStatContinue::AstStatContinue(Luau::Location const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48756))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 13868)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[331] = --[[ Luau::AstStatContinue::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 120)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[332] = --[[ Luau::AstStatReturn::AstStatReturn(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48764))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 13896)
		rt_store_i64(memory_at_0, loc_0 + 28, rt_load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[333] = --[[ Luau::AstStatReturn::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 124)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 32)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 28)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[334] = --[[ Luau::AstStatExpr::AstStatExpr(Luau::Location const&, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48772))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13924)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[335] = --[[ Luau::AstStatExpr::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 128)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[336] = --[[ Luau::AstStatLocal::AstStatLocal(Luau::Location const&, Luau::AstArray<Luau::AstLocal*> const&, Luau::AstArray<Luau::AstExpr*> const&, std::__2::optional<Luau::Location> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48780))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 13952)
		rt_store_i64(memory_at_0, loc_0 + 28, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 36, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 44, rt_load_i64(memory_at_0, loc_4))
		rt_store_i64(memory_at_0, loc_0 + 52, rt_load_i64(memory_at_0, loc_4 + 8))
		rt_store_i32(memory_at_0, loc_0 + 60, rt_load_i32(memory_at_0, loc_4 + 16))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[337] = --[[ Luau::AstStatLocal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 132)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
				if loc_2 == 0 then
					break
				end
				loc_5 = bit_and(rt_sub_i32(loc_2, 1), 1073741823)
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
				loc_3 = loc_4
				if bit_and(loc_2, 1) ~= 0 then
					while true do
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						reg_0 = rt_add_i32(loc_4, 4)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				if loc_5 == 0 then
					break
				end
				loc_4 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_4)
				while true do
					loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 32)
					if loc_2 ~= 0 then
						while true do
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 4) + 32)
					if loc_2 ~= 0 then
						while true do
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
							break
						end
					end
					loc_3 = rt_add_i32(loc_3, 8)
					if loc_4 ~= loc_3 then
						continue
					end
					break
				end
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 40)
			if loc_5 == 0 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 36)
			loc_3 = loc_6
			loc_0 = bit_and(loc_5, 3)
			if loc_0 ~= 0 then
				while true do
					loc_2 = 0
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_3)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_3 = rt_add_i32(loc_3, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_0 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_5, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_6)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_3)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_3 = rt_add_i32(loc_3, 16)
				if loc_4 ~= loc_3 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[338] = --[[ Luau::AstStatFor::AstStatFor(Luau::Location const&, Luau::AstLocal*, Luau::AstExpr*, Luau::AstExpr*, Luau::AstExpr*, Luau::AstStatBlock*, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48788))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32_n8(memory_at_0, loc_0 + 48, loc_7)
		rt_store_i32(memory_at_0, loc_0 + 44, loc_6)
		rt_store_i32(memory_at_0, loc_0 + 40, loc_5)
		rt_store_i32(memory_at_0, loc_0 + 36, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 13980)
		rt_store_i64(memory_at_0, loc_0 + 52, rt_load_i64(memory_at_0, loc_8))
		rt_store_i64(memory_at_0, loc_0 + 60, rt_load_i64(memory_at_0, loc_8 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[339] = --[[ Luau::AstStatFor::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 136)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 28) + 32)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 36)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 40)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
						break
					end
				end
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 44)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[340] = --[[ Luau::AstStatForIn::AstStatForIn(Luau::Location const&, Luau::AstArray<Luau::AstLocal*> const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstStatBlock*, bool, Luau::Location const&, bool, Luau::Location const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8)
	local loc_9 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48796))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14008)
		rt_store_i64(memory_at_0, loc_0 + 28, rt_load_i64(memory_at_0, loc_2))
		loc_9 = rt_load_i64(memory_at_0, loc_3)
		rt_store_i32_n8(memory_at_0, loc_0 + 48, loc_5)
		rt_store_i32(memory_at_0, loc_0 + 44, loc_4)
		rt_store_i64(memory_at_0, loc_0 + 36, loc_9)
		rt_store_i64(memory_at_0, loc_0 + 52, rt_load_i64(memory_at_0, loc_6))
		rt_store_i64(memory_at_0, loc_0 + 60, rt_load_i64(memory_at_0, loc_6 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 68, loc_7)
		rt_store_i64(memory_at_0, loc_0 + 72, rt_load_i64(memory_at_0, loc_8))
		rt_store_i64(memory_at_0, loc_0 + 80, rt_load_i64(memory_at_0, loc_8 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[341] = --[[ Luau::AstStatForIn::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 140)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 32)
					if loc_3 == 0 then
						break
					end
					loc_5 = bit_and(rt_sub_i32(loc_3, 1), 1073741823)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
					loc_2 = loc_4
					if bit_and(loc_3, 1) ~= 0 then
						while true do
							loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4) + 32)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = rt_add_i32(loc_4, 4)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_4)
					while true do
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 4) + 32)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = rt_add_i32(loc_2, 8)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				while true do
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 40)
					if loc_6 == 0 then
						break
					end
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 36)
					loc_2 = loc_7
					loc_5 = bit_and(loc_6, 3)
					if loc_5 ~= 0 then
						while true do
							loc_3 = 0
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_2)
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
								loc_2 = rt_add_i32(loc_2, 4)
								loc_3 = rt_add_i32(loc_3, 1)
								if loc_5 ~= loc_3 then
									continue
								end
								break
							end
							break
						end
					end
					if bit_and(rt_sub_i32(loc_6, 1), 1073741823) < 3 then
						break
					end
					loc_4 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_7)
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
						loc_2 = rt_add_i32(loc_2, 16)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[342] = --[[ Luau::AstStatAssign::AstStatAssign(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstArray<Luau::AstExpr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48804))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14036)
		rt_store_i64(memory_at_0, loc_0 + 28, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 36, rt_load_i64(memory_at_0, loc_3))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[343] = --[[ Luau::AstStatAssign::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 144)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 32)
				if loc_4 == 0 then
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 28)
				loc_2 = loc_6
				loc_7 = bit_and(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 4)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if bit_and(rt_sub_i32(loc_4, 1), 1073741823) <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 40)
			if loc_4 == 0 then
				break
			end
			loc_6 = bit_and(rt_sub_i32(loc_4, 1), 1073741823)
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 36)
			loc_2 = loc_0
			loc_7 = bit_and(loc_4, 3)
			if loc_7 ~= 0 then
				while true do
					loc_3 = 0
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			if loc_6 < 3 then
				break
			end
			loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_0)
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_2 = rt_add_i32(loc_2, 16)
				if loc_5 ~= loc_2 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[344] = --[[ Luau::AstStatCompoundAssign::AstStatCompoundAssign(Luau::Location const&, Luau::AstExprBinary::Op, Luau::AstExpr*, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48812))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0 + 36, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 14064)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[345] = --[[ Luau::AstStatCompoundAssign::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 148)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 36)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[346] = --[[ Luau::AstStatFunction::AstStatFunction(Luau::Location const&, Luau::AstExpr*, Luau::AstExprFunction*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48820))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 14092)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[347] = --[[ Luau::AstStatFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 152)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[348] = --[[ Luau::AstStatLocalFunction::AstStatLocalFunction(Luau::Location const&, Luau::AstLocal*, Luau::AstExprFunction*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48828))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_0, 14120)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[349] = --[[ Luau::AstStatLocalFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 156)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 32)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[350] = --[[ Luau::AstStatTypeAlias::AstStatTypeAlias(Luau::Location const&, Luau::AstName const&, Luau::Location const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstType*, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local loc_8 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48836))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14148)
		rt_store_i32(memory_at_0, loc_0 + 28, rt_load_i32(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_3 + 8))
		rt_store_i64(memory_at_0, loc_0 + 48, rt_load_i64(memory_at_0, loc_4))
		loc_8 = rt_load_i64(memory_at_0, loc_5)
		rt_store_i32_n8(memory_at_0, loc_0 + 68, loc_7)
		rt_store_i32(memory_at_0, loc_0 + 64, loc_6)
		rt_store_i64(memory_at_0, loc_0 + 56, loc_8)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[351] = --[[ Luau::AstStatTypeAlias::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 160)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 52)
					if loc_3 == 0 then
						break
					end
					loc_5 = bit_and(rt_sub_i32(loc_3, 1), 536870911)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 48)
					loc_2 = loc_4
					if bit_and(loc_3, 1) ~= 0 then
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = rt_add_i32(loc_4, 24)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = rt_add_i32(rt_mul_i32(loc_3, 24), loc_4)
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 20)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 44)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = rt_add_i32(loc_2, 48)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
					if loc_3 == 0 then
						break
					end
					loc_5 = bit_and(rt_sub_i32(loc_3, 1), 536870911)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 56)
					loc_2 = loc_4
					if bit_and(loc_3, 1) ~= 0 then
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
							if loc_2 ~= 0 then
								while true do
									TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
									break
								end
							end
							reg_0 = rt_add_i32(loc_4, 24)
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
					end
					loc_2 = reg_0
					if loc_5 == 0 then
						break
					end
					loc_4 = rt_add_i32(rt_mul_i32(loc_3, 24), loc_4)
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 20)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 44)
						if loc_3 ~= 0 then
							while true do
								TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
								break
							end
						end
						loc_2 = rt_add_i32(loc_2, 48)
						if loc_4 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 64)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[352] = --[[ Luau::AstStatTypeFunction::AstStatTypeFunction(Luau::Location const&, Luau::AstName const&, Luau::Location const&, Luau::AstExprFunction*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48844))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14176)
		rt_store_i32(memory_at_0, loc_0 + 28, rt_load_i32(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_3 + 8))
		rt_store_i32(memory_at_0, loc_0 + 48, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[353] = --[[ Luau::AstStatTypeFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 96)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 48)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[354] = --[[ Luau::AstStatDeclareGlobal::AstStatDeclareGlobal(Luau::Location const&, Luau::AstName const&, Luau::Location const&, Luau::AstType*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48852))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14204)
		rt_store_i32(memory_at_0, loc_0 + 28, rt_load_i32(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_3 + 8))
		rt_store_i32(memory_at_0, loc_0 + 48, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[355] = --[[ Luau::AstStatDeclareGlobal::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 168)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 48)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[356] = --[[ Luau::AstStatDeclareFunction::AstStatDeclareFunction(Luau::Location const&, Luau::AstArray<Luau::AstAttr*> const&, Luau::AstName const&, Luau::Location const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstTypeList const&, Luau::AstArray<std::__2::pair<Luau::AstName, Luau::Location>> const&, bool, Luau::Location const&, Luau::AstTypeList const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7, loc_8, loc_9, loc_10, loc_11)
	local loc_12 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48860))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14232)
		rt_store_i64(memory_at_0, loc_0 + 28, rt_load_i64(memory_at_0, loc_2))
		rt_store_i32(memory_at_0, loc_0 + 36, rt_load_i32(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_4))
		rt_store_i64(memory_at_0, loc_0 + 48, rt_load_i64(memory_at_0, loc_4 + 8))
		rt_store_i64(memory_at_0, loc_0 + 56, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_0 + 64, rt_load_i64(memory_at_0, loc_6))
		rt_store_i64(memory_at_0, loc_0 + 72, rt_load_i64(memory_at_0, loc_7))
		rt_store_i32(memory_at_0, loc_0 + 80, rt_load_i32(memory_at_0, loc_7 + 8))
		loc_12 = rt_load_i64(memory_at_0, loc_8)
		rt_store_i32_n8(memory_at_0, loc_0 + 92, loc_9)
		rt_store_i64(memory_at_0, loc_0 + 84, loc_12)
		rt_store_i64(memory_at_0, loc_0 + 104, rt_load_i64(memory_at_0, loc_10 + 8))
		rt_store_i64(memory_at_0, loc_0 + 96, rt_load_i64(memory_at_0, loc_10))
		rt_store_i64(memory_at_0, loc_0 + 112, rt_load_i64(memory_at_0, loc_11))
		rt_store_i32(memory_at_0, loc_0 + 120, rt_load_i32(memory_at_0, loc_11 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[357] = --[[ Luau::AstStatDeclareFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 164)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 76)
				if loc_4 == 0 then
					break
				end
				loc_7 = bit_and(rt_sub_i32(loc_4, 1), 1073741823)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 72)
				loc_2 = loc_6
				loc_8 = bit_and(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 4)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 80)
			if loc_2 ~= 0 then
				while true do
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
					break
				end
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 116)
				if loc_4 == 0 then
					break
				end
				loc_7 = bit_and(rt_sub_i32(loc_4, 1), 1073741823)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 112)
				loc_2 = loc_6
				loc_8 = bit_and(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						loc_3 = 0
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 4)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 120)
			if loc_2 == 0 then
				break
			end
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[358] = --[[ Luau::AstStatDeclareClass::AstStatDeclareClass(Luau::Location const&, Luau::AstName const&, std::__2::optional<Luau::AstName>, Luau::AstArray<Luau::AstDeclaredClassProp> const&, Luau::AstTableIndexer*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48868))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14260)
		rt_store_i32(memory_at_0, loc_0 + 28, rt_load_i32(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_3))
		loc_6 = rt_load_i64(memory_at_0, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 48, loc_5)
		rt_store_i64(memory_at_0, loc_0 + 40, loc_6)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[359] = --[[ Luau::AstStatDeclareClass::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 172)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 44)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 40)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 44)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_mul_i32(loc_3, 44), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 64)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 108)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 152)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 176)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[360] = --[[ Luau::AstStatError::AstStatError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstArray<Luau::AstStat*> const&, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48932))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, 0)
		rt_store_i32(memory_at_0, loc_0, 14288)
		rt_store_i64(memory_at_0, loc_0 + 28, rt_load_i64(memory_at_0, loc_2))
		loc_5 = rt_load_i64(memory_at_0, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 44, loc_4)
		rt_store_i64(memory_at_0, loc_0 + 36, loc_5)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[361] = --[[ Luau::AstStatError::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 176)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 32)
				if loc_4 == 0 then
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 28)
				loc_2 = loc_6
				loc_7 = bit_and(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 4)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if bit_and(rt_sub_i32(loc_4, 1), 1073741823) <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 40)
			if loc_4 == 0 then
				break
			end
			loc_6 = bit_and(rt_sub_i32(loc_4, 1), 1073741823)
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 36)
			loc_2 = loc_0
			loc_7 = bit_and(loc_4, 3)
			if loc_7 ~= 0 then
				while true do
					loc_3 = 0
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_2)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
						loc_2 = rt_add_i32(loc_2, 4)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			if loc_6 < 3 then
				break
			end
			loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_0)
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
				loc_2 = rt_add_i32(loc_2, 16)
				if loc_5 ~= loc_2 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[362] = --[[ Luau::AstTypeReference::AstTypeReference(Luau::Location const&, std::__2::optional<Luau::AstName>, Luau::AstName, std::__2::optional<Luau::Location>, Luau::Location const&, bool, Luau::AstArray<Luau::AstTypeOrPack> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48876))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, loc_6)
		rt_store_i32(memory_at_0, loc_0, 14316)
		rt_store_i64(memory_at_0, loc_0 + 28, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 36, rt_load_i64(memory_at_0, loc_4))
		rt_store_i64(memory_at_0, loc_0 + 44, rt_load_i64(memory_at_0, loc_4 + 8))
		rt_store_i32(memory_at_0, loc_0 + 52, rt_load_i32(memory_at_0, loc_4 + 16))
		rt_store_i32(memory_at_0, loc_0 + 56, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 60, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_0 + 68, rt_load_i64(memory_at_0, loc_5 + 8))
		rt_store_i64(memory_at_0, loc_0 + 76, rt_load_i64(memory_at_0, loc_7))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[363] = --[[ Luau::AstTypeReference::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 184)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 80)
			if loc_2 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 76)
			loc_0 = loc_3
			if bit_and(loc_2, 1) ~= 0 then
				while true do
					loc_0 = rt_load_i32(memory_at_0, loc_3)
					if loc_0 ~= 0 then
						while true do
							reg_0 = loc_0
							break
						end
					else
						while true do
							reg_0 = rt_load_i32(memory_at_0, loc_3 + 4)
							break
						end
					end
					loc_0 = reg_0
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
					reg_0 = rt_add_i32(loc_3, 8)
					break
				end
			else
				while true do
					reg_0 = loc_0
					break
				end
			end
			loc_0 = reg_0
			if bit_and(rt_sub_i32(loc_2, 1), 536870911) == 0 then
				break
			end
			loc_3 = rt_add_i32(rt_shl_i32(loc_2, 3), loc_3)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				if loc_2 ~= 0 then
					while true do
						reg_0 = loc_2
						break
					end
				else
					while true do
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
						break
					end
				end
				loc_2 = reg_0
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				if loc_2 ~= 0 then
					while true do
						reg_0 = loc_2
						break
					end
				else
					while true do
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
						break
					end
				end
				loc_2 = reg_0
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_3 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[364] = --[[ Luau::AstTypeTable::AstTypeTable(Luau::Location const&, Luau::AstArray<Luau::AstTableProp> const&, Luau::AstTableIndexer*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48884))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 14344)
		loc_4 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 24, loc_4)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[365] = --[[ Luau::AstTypeTable::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 188)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
				if loc_4 == 0 then
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 24)
				loc_2 = loc_6
				loc_7 = bit_and(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2 + 20)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 48)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if bit_and(rt_sub_i32(loc_4, 1), 268435455) <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_mul_i32(loc_4, 48), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 20)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 68)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 116)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 164)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 192)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
			if loc_2 == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_2)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 32) + 4)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[366] = --[[ Luau::AstTypeFunction::AstTypeFunction(Luau::Location const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstTypeList const&, Luau::AstArray<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>> const&, Luau::AstTypeList const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48892))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_0 + 24, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0, 14372)
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 48, rt_load_i64(memory_at_0, loc_4))
		rt_store_i32(memory_at_0, loc_0 + 56, rt_load_i32(memory_at_0, loc_4 + 8))
		rt_store_i64(memory_at_0, loc_0 + 60, rt_load_i64(memory_at_0, loc_5))
		rt_store_i32(memory_at_0, loc_0 + 76, rt_load_i32(memory_at_0, loc_6 + 8))
		rt_store_i64(memory_at_0, loc_0 + 68, rt_load_i64(memory_at_0, loc_6))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[367] = --[[ Luau::AstTypeFunction::AstTypeFunction(Luau::Location const&, Luau::AstArray<Luau::AstAttr*> const&, Luau::AstArray<Luau::AstGenericType> const&, Luau::AstArray<Luau::AstGenericTypePack> const&, Luau::AstTypeList const&, Luau::AstArray<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>> const&, Luau::AstTypeList const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48892))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 14372)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 32, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 40, rt_load_i64(memory_at_0, loc_4))
		rt_store_i64(memory_at_0, loc_0 + 48, rt_load_i64(memory_at_0, loc_5))
		rt_store_i32(memory_at_0, loc_0 + 56, rt_load_i32(memory_at_0, loc_5 + 8))
		rt_store_i64(memory_at_0, loc_0 + 60, rt_load_i64(memory_at_0, loc_6))
		rt_store_i32(memory_at_0, loc_0 + 76, rt_load_i32(memory_at_0, loc_7 + 8))
		rt_store_i64(memory_at_0, loc_0 + 68, rt_load_i64(memory_at_0, loc_7))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[368] = --[[ Luau::AstTypeFunction::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 192)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 52)
				if loc_4 == 0 then
					break
				end
				loc_7 = bit_and(rt_sub_i32(loc_4, 1), 1073741823)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 48)
				loc_2 = loc_6
				loc_8 = bit_and(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 4)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 56)
			if loc_2 ~= 0 then
				while true do
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
					break
				end
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 72)
				if loc_4 == 0 then
					break
				end
				loc_7 = bit_and(rt_sub_i32(loc_4, 1), 1073741823)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 68)
				loc_2 = loc_6
				loc_8 = bit_and(loc_4, 3)
				if loc_8 ~= 0 then
					while true do
						loc_3 = 0
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 4)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_8 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if loc_7 <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 76)
			if loc_2 == 0 then
				break
			end
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[369] = --[[ Luau::AstTypeTypeof::AstTypeTypeof(Luau::Location const&, Luau::AstExpr*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48900))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 14400)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[370] = --[[ Luau::AstTypeTypeof::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 196)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[371] = --[[ Luau::AstTypeUnion::AstTypeUnion(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48908))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 14428)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[372] = --[[ Luau::AstTypeUnion::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 200)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[373] = --[[ Luau::AstTypeIntersection::AstTypeIntersection(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48916))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 14456)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[374] = --[[ Luau::AstTypeIntersection::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 204)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[375] = --[[ Luau::AstTypeSingletonBool::AstTypeSingletonBool(Luau::Location const&, bool) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48948))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32_n8(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 14484)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[376] = --[[ Luau::AstTypeSingletonBool::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 208)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[377] = --[[ Luau::AstTypeSingletonString::AstTypeSingletonString(Luau::Location const&, Luau::AstArray<char> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48956))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 14512)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[378] = --[[ Luau::AstTypeSingletonString::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 212)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[379] = --[[ Luau::AstTypeError::AstTypeError(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&, bool, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = rt_i64_ZERO
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48940))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 14540)
		loc_5 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 36, loc_4)
		rt_store_i32_n8(memory_at_0, loc_0 + 32, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 24, loc_5)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[380] = --[[ Luau::AstTypeError::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 216)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 24)
			loc_0 = loc_5
			loc_6 = bit_and(loc_3, 3)
			if loc_6 ~= 0 then
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4, loc_1)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_3, 1), 1073741823) < 3 then
				break
			end
			loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_5)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
				loc_0 = rt_add_i32(loc_0, 16)
				if loc_4 ~= loc_0 then
					continue
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[381] = --[[ Luau::AstTypePackExplicit::AstTypePackExplicit(Luau::Location const&, Luau::AstTypeList) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48964))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0, 14568)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_load_i64(memory_at_0, loc_2))
		rt_store_i32(memory_at_0, loc_0 + 32, rt_load_i32(memory_at_0, loc_2 + 8))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[382] = --[[ Luau::AstTypePackExplicit::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		while true do
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 224)](loc_1, loc_0)
			if reg_0 == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
				if loc_4 == 0 then
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 24)
				loc_2 = loc_6
				loc_7 = bit_and(loc_4, 3)
				if loc_7 ~= 0 then
					while true do
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_2)
							TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5))](loc_5, loc_1)
							loc_2 = rt_add_i32(loc_2, 4)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_7 ~= loc_3 then
								continue
							end
							break
						end
						break
					end
				end
				if bit_and(rt_sub_i32(loc_4, 1), 1073741823) <= 2 then
					break
				end
				loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_6)
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3))](loc_3, loc_1)
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_5 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
			if loc_2 == 0 then
				break
			end
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2))](loc_2, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[383] = --[[ Luau::AstTypePackVariadic::AstTypePackVariadic(Luau::Location const&, Luau::AstType*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48972))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 14596)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[384] = --[[ Luau::AstTypePackVariadic::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 228)](loc_1, loc_0)
		if reg_0 ~= 0 then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 24)
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0))](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[385] = --[[ Luau::AstTypePackGeneric::AstTypePackGeneric(Luau::Location const&, Luau::AstName) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, 48980))
		rt_store_i32(memory_at_0, loc_0, 16852)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_0, 14624)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[386] = --[[ Luau::AstTypePackGeneric::visit(Luau::AstVisitor*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 232)](loc_1, loc_0)
		break
	end
end
FUNC_LIST[387] = --[[ Luau::getIdentifier(Luau::AstExpr*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
		while true do
			while true do
				while true do
					if loc_0 == 0 then
						break
					end
					if rt_load_i32(memory_at_0, 48620) ~= loc_2 then
						break
					end
					reg_0 = rt_add_i32(loc_0, 24)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_0 == 0 then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, 48612) ~= loc_2 then
					desired = 1
					break
				end
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = reg_0
			loc_1 = rt_load_i32(memory_at_0, loc_0)
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[388] = --[[ Luau::AstNode::asExpr() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[389] = --[[ Luau::findConfusable(unsigned int) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = 1786
		loc_1 = 16880
		while true do
			loc_4 = rt_shr_u32(loc_3, 1)
			loc_2 = rt_add_i32(rt_shl_i32(loc_4, 3), loc_1)
			reg_0 = rt_add_i32(loc_2, 8)
			loc_2 = (if bit_or(rt_load_i32_u16(memory_at_0, loc_2), rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_2 + 2), 16)) < loc_0 then 1 else 0)
			loc_1 = (if loc_2 ~= 0 then reg_0 else loc_1)
			loc_3 = (if loc_2 ~= 0 then rt_add_i32(bit_xor(loc_4, 4294967295), loc_3) else loc_4)
			if loc_3 ~= 0 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_1 == 31168 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (if bit_or(rt_load_i32_u16(memory_at_0, loc_1), rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 2), 16)) == loc_0 then rt_add_i32(loc_1, 3) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[390] = --[[ Luau::Allocator::Allocator() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[646](8196)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 4, 0)
		rt_store_i32(memory_at_0, loc_0, loc_1)
		rt_store_i32(memory_at_0, loc_1, 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[391] = --[[ Luau::Allocator::~Allocator() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		if loc_1 ~= 0 then
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_1)
					FUNC_LIST[652](loc_1)
					loc_1 = loc_2
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[392] = --[[ Luau::Allocator::allocate(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0)
			if loc_2 == 0 then
				break
			end
			loc_4 = rt_add_i32(loc_2, 4)
			loc_3 = bit_and(rt_add_i32(rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_0 + 4)), 7), 4294967288)
			if rt_add_i32(loc_1, loc_3) > rt_add_i32(loc_2, 8196) then
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_3, rt_sub_i32(loc_1, loc_4)))
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[646](rt_add_i32((if loc_1 <= 8192 then 8192 else loc_1), 4))
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_0))
		rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
		rt_store_i32(memory_at_0, loc_0, loc_2)
		reg_0 = rt_add_i32(loc_2, 4)
		break
	end
	return reg_0
end
FUNC_LIST[393] = --[[ Luau::Lexeme::Lexeme(Luau::Location const&, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, loc_2)
		rt_store_i64(memory_at_0, loc_0 + 4, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_0 + 12, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[394] = --[[ Luau::Lexeme::getLength() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0 + 20)
		break
	end
	return reg_0
end
FUNC_LIST[395] = --[[ Luau::Lexeme::toString() const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 192)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			loc_3 = rt_load_i32(memory_at_0, loc_1)
																																			if not br_map[1] then
																																				br_map[1] = (function()
																																					return { [0] = 0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18, 23, 24, 25, 31, 26, 27, 28, 30, 29, }
																																				end)()
																																			end
																																			temp = br_map[1][loc_3] or 31
																																			if temp < 16 then
																																				if temp < 8 then
																																					if temp < 4 then
																																						if temp < 2 then
																																							if temp < 1 then
																																								break
																																							else
																																								desired = 32
																																								break
																																							end
																																						elseif temp > 2 then
																																							desired = 30
																																							break
																																						else
																																							desired = 31
																																							break
																																						end
																																					elseif temp > 4 then
																																						if temp < 6 then
																																							desired = 28
																																							break
																																						elseif temp > 6 then
																																							desired = 26
																																							break
																																						else
																																							desired = 27
																																							break
																																						end
																																					else
																																						desired = 29
																																						break
																																					end
																																				elseif temp > 8 then
																																					if temp < 12 then
																																						if temp < 10 then
																																							desired = 24
																																							break
																																						elseif temp > 10 then
																																							desired = 22
																																							break
																																						else
																																							desired = 23
																																							break
																																						end
																																					elseif temp > 12 then
																																						if temp < 14 then
																																							desired = 20
																																							break
																																						elseif temp > 14 then
																																							desired = 18
																																							break
																																						else
																																							desired = 19
																																							break
																																						end
																																					else
																																						desired = 21
																																						break
																																					end
																																				else
																																					desired = 25
																																					break
																																				end
																																			elseif temp > 16 then
																																				if temp < 24 then
																																					if temp < 20 then
																																						if temp < 18 then
																																							desired = 16
																																							break
																																						elseif temp > 18 then
																																							desired = 14
																																							break
																																						else
																																							desired = 15
																																							break
																																						end
																																					elseif temp > 20 then
																																						if temp < 22 then
																																							desired = 12
																																							break
																																						elseif temp > 22 then
																																							desired = 10
																																							break
																																						else
																																							desired = 11
																																							break
																																						end
																																					else
																																						desired = 13
																																						break
																																					end
																																				elseif temp > 24 then
																																					if temp < 28 then
																																						if temp < 26 then
																																							desired = 8
																																							break
																																						elseif temp > 26 then
																																							desired = 6
																																							break
																																						else
																																							desired = 7
																																							break
																																						end
																																					elseif temp > 28 then
																																						if temp < 30 then
																																							desired = 4
																																							break
																																						elseif temp > 30 then
																																							desired = 2
																																							break
																																						else
																																							desired = 3
																																							break
																																						end
																																					else
																																						desired = 5
																																						break
																																					end
																																				else
																																					desired = 9
																																					break
																																				end
																																			else
																																				desired = 17
																																				break
																																			end
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		rt_store_i32_n8(memory_at_0, loc_0 + 11, 5)
																																		rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
																																		rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, 6887))
																																		rt_store_i32_n8(memory_at_0, loc_0 + 4, rt_load_i32_u8(memory_at_0, 6891))
																																		desired = 1
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																																	rt_store_i32(memory_at_0, loc_0, 658324775)
																																	rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																																	desired = 1
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																																rt_store_i32(memory_at_0, loc_0, 658324519)
																																rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																																desired = 1
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																															rt_store_i32(memory_at_0, loc_0, 658325031)
																															rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																															desired = 1
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																														rt_store_i32(memory_at_0, loc_0, 658341415)
																														rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																														desired = 1
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																													rt_store_i32(memory_at_0, loc_0, 657337895)
																													rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																													desired = 1
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												rt_store_i32_n8(memory_at_0, loc_0 + 11, 5)
																												rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
																												rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, 8267))
																												rt_store_i32_n8(memory_at_0, loc_0 + 4, rt_load_i32_u8(memory_at_0, 8271))
																												desired = 1
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																											rt_store_i32(memory_at_0, loc_0, 658386215)
																											rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																											desired = 1
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																										rt_store_i32(memory_at_0, loc_0, 658127399)
																										rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																										desired = 1
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																									rt_store_i32(memory_at_0, loc_0, 657403687)
																									rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																									desired = 1
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																								rt_store_i32(memory_at_0, loc_0, 658320167)
																								rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																								desired = 1
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																							rt_store_i32(memory_at_0, loc_0, 658320679)
																							rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																						rt_store_i32(memory_at_0, loc_0, 658319911)
																						rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																					rt_store_i32(memory_at_0, loc_0, 658321191)
																					rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				rt_store_i32_n8(memory_at_0, loc_0 + 11, 5)
																				rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
																				rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, 8175))
																				rt_store_i32_n8(memory_at_0, loc_0 + 4, rt_load_i32_u8(memory_at_0, 8179))
																				desired = 1
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																			rt_store_i32(memory_at_0, loc_0, 658318631)
																			rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
																		rt_store_i32(memory_at_0, loc_0, 658333223)
																		rt_store_i32_n8(memory_at_0, loc_0 + 11, 4)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	rt_store_i32_n8(memory_at_0, loc_0 + 11, 5)
																	rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
																	rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, 8181))
																	rt_store_i32_n8(memory_at_0, loc_0 + 4, rt_load_i32_u8(memory_at_0, 8185))
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
																if loc_3 ~= 0 then
																	while true do
																		loc_1 = rt_load_i32(memory_at_0, loc_1 + 20)
																		rt_store_i32(memory_at_0, loc_2 + 36, loc_3)
																		rt_store_i32(memory_at_0, loc_2 + 32, loc_1)
																		FUNC_LIST[513](loc_0, 8327, rt_add_i32(loc_2, 32))
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																rt_store_i32_n8(memory_at_0, loc_0 + 11, 6)
																rt_store_i32_n8(memory_at_0, loc_0 + 6, 0)
																rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, 3838))
																rt_store_i32_n16(memory_at_0, loc_0 + 4, rt_load_i32_u16(memory_at_0, 3842))
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
															if loc_3 ~= 0 then
																while true do
																	loc_1 = rt_load_i32(memory_at_0, loc_1 + 20)
																	rt_store_i32(memory_at_0, loc_2 + 52, loc_3)
																	rt_store_i32(memory_at_0, loc_2 + 48, loc_1)
																	FUNC_LIST[513](loc_0, 1031, rt_add_i32(loc_2, 48))
																	desired = 1
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															reg_0 = FUNC_LIST[396](loc_0, 3717)
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
														if loc_3 ~= 0 then
															while true do
																loc_1 = rt_load_i32(memory_at_0, loc_1 + 20)
																rt_store_i32(memory_at_0, loc_2 + 68, loc_3)
																rt_store_i32(memory_at_0, loc_2 + 64, loc_1)
																FUNC_LIST[513](loc_0, 1024, rt_sub_i32(loc_2, 4294967232))
																desired = 1
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														reg_0 = FUNC_LIST[396](loc_0, 3757)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
													if loc_3 ~= 0 then
														while true do
															loc_1 = rt_load_i32(memory_at_0, loc_1 + 20)
															rt_store_i32(memory_at_0, loc_2 + 84, loc_3)
															rt_store_i32(memory_at_0, loc_2 + 80, loc_1)
															FUNC_LIST[513](loc_0, 6202, rt_add_i32(loc_2, 80))
															desired = 1
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													reg_0 = FUNC_LIST[396](loc_0, 3794)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
												if loc_3 ~= 0 then
													while true do
														loc_1 = rt_load_i32(memory_at_0, loc_1 + 20)
														rt_store_i32(memory_at_0, loc_2 + 100, loc_3)
														rt_store_i32(memory_at_0, loc_2 + 96, loc_1)
														FUNC_LIST[513](loc_0, 6209, rt_add_i32(loc_2, 96))
														desired = 1
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												reg_0 = FUNC_LIST[396](loc_0, 3808)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
											if loc_3 ~= 0 then
												while true do
													loc_1 = rt_load_i32(memory_at_0, loc_1 + 20)
													rt_store_i32(memory_at_0, loc_2 + 116, loc_3)
													rt_store_i32(memory_at_0, loc_2 + 112, loc_1)
													FUNC_LIST[513](loc_0, 7989, rt_add_i32(loc_2, 112))
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											reg_0 = FUNC_LIST[396](loc_0, 3019)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
										if loc_1 ~= 0 then
											while true do
												rt_store_i32(memory_at_0, loc_2 + 128, loc_1)
												FUNC_LIST[513](loc_0, 8094, rt_add_i32(loc_2, 128))
												desired = 1
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										reg_0 = FUNC_LIST[396](loc_0, 2982)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i32_n8(memory_at_0, loc_0 + 11, 7)
									rt_store_i32_n8(memory_at_0, loc_0 + 7, 0)
									rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, 1522))
									rt_store_i32(memory_at_0, loc_0 + 3, rt_load_i32(memory_at_0, 1525))
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
								if loc_1 ~= 0 then
									while true do
										rt_store_i32(memory_at_0, loc_2 + 144, loc_1)
										FUNC_LIST[513](loc_0, 8094, rt_add_i32(loc_2, 144))
										desired = 1
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[396](loc_0, 3968)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_1 = FUNC_LIST[646](24)
							loc_1 = reg_1
							rt_store_i32(memory_at_0, loc_0, loc_1)
							rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_from_u32(16, 2147483672))
							rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, 3836))
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, 3828))
							rt_store_i32_n8(memory_at_0, loc_1 + 16, 0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = FUNC_LIST[646](24)
						loc_1 = reg_1
						rt_store_i32(memory_at_0, loc_0, loc_1)
						rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_from_u32(18, 2147483672))
						rt_store_i32_n16(memory_at_0, loc_1 + 16, rt_load_i32_u16(memory_at_0, 1527))
						rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, 1519))
						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, 1511))
						rt_store_i32_n8(memory_at_0, loc_1 + 18, 0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = FUNC_LIST[646](48)
					loc_1 = reg_1
					rt_store_i32(memory_at_0, loc_0, loc_1)
					rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_from_u32(43, 2147483696))
					rt_store_i32(memory_at_0, loc_1 + 39, rt_load_i32(memory_at_0, 7678))
					rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, 7671))
					rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, 7663))
					rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, 7655))
					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, 7647))
					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, 7639))
					rt_store_i32_n8(memory_at_0, loc_1 + 43, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
				if loc_3 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[389](loc_3)
						loc_3 = reg_0
						loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
						if loc_3 ~= 0 then
							while true do
								rt_store_i32(memory_at_0, loc_2 + 180, loc_3)
								rt_store_i32(memory_at_0, loc_2 + 176, loc_1)
								FUNC_LIST[513](loc_0, 7683, rt_add_i32(loc_2, 176))
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						rt_store_i32(memory_at_0, loc_2 + 160, loc_1)
						FUNC_LIST[513](loc_0, 1100, rt_add_i32(loc_2, 160))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[396](loc_0, 4999)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_le_i32(loc_3, 255) then
				while true do
					rt_store_i32(memory_at_0, loc_2, loc_3)
					FUNC_LIST[513](loc_0, 8099, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_sub_i32(loc_3, 290)
			if loc_1 <= 20 then
				while true do
					rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), 31168)))
					FUNC_LIST[513](loc_0, 8094, rt_add_i32(loc_2, 16))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[396](loc_0, 6877)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 192)
		break
	end
end
FUNC_LIST[396] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::basic_string[abi:ne180100]<0>(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[544](loc_1)
		loc_2 = reg_0
		if loc_2 < 2147483640 then
			while true do
				while true do
					while true do
						if loc_2 >= 11 then
							while true do
								loc_4 = rt_add_i32(bit_or(loc_2, 7), 1)
								reg_0 = FUNC_LIST[646](loc_4)
								loc_3 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 8, bit_or(loc_4, 2147483648))
								rt_store_i32(memory_at_0, loc_0, loc_3)
								rt_store_i32(memory_at_0, loc_0 + 4, loc_2)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32_n8(memory_at_0, loc_0 + 11, loc_2)
						loc_3 = loc_0
						if loc_2 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[518](loc_3, loc_1, loc_2)
					break
				end
				if desired then
					break
				end
				rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_3), 0)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[276](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[397] = --[[ Luau::AstNameTable::AstNameTable(Luau::Allocator&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 12, 8343)
		rt_store_i32(memory_at_0, loc_0 + 8, 0)
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		reg_0 = FUNC_LIST[646](1536)
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 4, 128)
		rt_store_i32(memory_at_0, loc_0, loc_3)
		while true do
			loc_4 = rt_add_i32(rt_mul_i32(loc_2, 12), loc_3)
			rt_store_i64(memory_at_0, loc_4 + 4, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_4, 8343)
			loc_4 = rt_add_i32(rt_mul_i32(bit_or(loc_2, 1), 12), loc_3)
			rt_store_i64(memory_at_0, loc_4 + 4, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_4, 8343)
			loc_4 = rt_add_i32(rt_mul_i32(bit_or(loc_2, 2), 12), loc_3)
			rt_store_i64(memory_at_0, loc_4 + 4, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_4, 8343)
			loc_4 = rt_add_i32(rt_mul_i32(bit_or(loc_2, 3), 12), loc_3)
			rt_store_i64(memory_at_0, loc_4 + 4, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_4, 8343)
			loc_2 = rt_add_i32(loc_2, 4)
			if loc_2 ~= 128 then
				continue
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
		loc_2 = 290
		while true do
			loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), 30008))
			rt_store_i32(memory_at_0, loc_5 + 4, loc_3)
			reg_0 = FUNC_LIST[544](loc_3)
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
			rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 8) < rt_shr_u32(rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 4), 3), 2) then
					break
				end
				reg_0 = FUNC_LIST[398](loc_0, rt_add_i32(loc_5, 4))
				if reg_0 ~= 0 then
					break
				end
				FUNC_LIST[399](loc_0)
				break
			end
			reg_0 = FUNC_LIST[400](loc_0, rt_add_i32(loc_5, 4))
			loc_2 = rt_add_i32(loc_2, 1)
			if loc_2 ~= 311 then
				continue
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[398] = --[[ Luau::detail::DenseHashTable<Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::detail::ItemInterfaceSet<Luau::AstNameTable::Entry>, Luau::AstNameTable::EntryHash, std::__2::equal_to<Luau::AstNameTable::Entry>>::find(Luau::AstNameTable::Entry const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_1)
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 16)
			if loc_3 == loc_10 then
				while true do
					reg_0 = FUNC_LIST[575](loc_5, rt_load_i32(memory_at_0, loc_0 + 12), loc_3)
					if reg_0 == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = rt_load_i32(memory_at_0, loc_0 + 4)
			while true do
				if loc_3 == 0 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = bit_and(loc_3, 3)
				while true do
					if loc_3 < 4 then
						while true do
							loc_2 = 2166136261
							loc_1 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = bit_and(loc_3, 4294967292)
					loc_2 = 2166136261
					loc_1 = 0
					while true do
						loc_4 = rt_add_i32(loc_1, loc_5)
						loc_2 = rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, loc_4), loc_2), 16777619), rt_load_i32_u8(memory_at_0, loc_4 + 1)), 16777619), rt_load_i32_u8(memory_at_0, loc_4 + 2)), 16777619), rt_load_i32_u8(memory_at_0, loc_4 + 3)), 16777619)
						loc_1 = rt_add_i32(loc_1, 4)
						loc_8 = rt_add_i32(loc_8, 4)
						if loc_9 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_2 = rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_5)), loc_2), 16777619)
					loc_1 = rt_add_i32(loc_1, 1)
					loc_7 = rt_add_i32(loc_7, 1)
					if loc_6 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_sub_i32(loc_11, 1)
			loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			loc_1 = 0
			while true do
				loc_8 = bit_and(loc_2, loc_4)
				loc_2 = rt_add_i32(rt_mul_i32(loc_8, 12), loc_6)
				loc_7 = rt_load_i32(memory_at_0, loc_2 + 4)
				if loc_7 == loc_3 then
					while true do
						reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_2), loc_5, loc_3)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				while true do
					if loc_7 == loc_10 then
						while true do
							reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_2), loc_9, loc_10)
							if reg_0 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = rt_add_i32(loc_1, 1)
					loc_2 = rt_add_i32(loc_8, loc_1)
					if loc_1 <= loc_4 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[399] = --[[ Luau::detail::DenseHashTable<Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::detail::ItemInterfaceSet<Luau::AstNameTable::Entry>, Luau::AstNameTable::EntryHash, std::__2::equal_to<Luau::AstNameTable::Entry>>::rehash() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_add_i32(loc_0, 12)
		loc_15 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_17 = rt_load_i32(memory_at_0, loc_0 + 12)
		while true do
			loc_11 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_7 = (if loc_11 ~= 0 then rt_shl_i32(loc_11, 1) else 16)
			if loc_7 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_7, 2)
			reg_0 = FUNC_LIST[646](rt_mul_i32(loc_7, 12))
			loc_5 = reg_0
			if loc_7 >= 4 then
				while true do
					loc_13 = bit_and(loc_7, 4294967292)
					while true do
						loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_5)
						rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
						reg_0 = loc_2
						loc_2 = rt_add_i32(loc_4, 8)
						rt_store_i32(memory_at_0, reg_0 + 8, rt_load_i32(memory_at_0, loc_2))
						loc_3 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 1), 12), loc_5)
						rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4))
						loc_3 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 2), 12), loc_5)
						rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4))
						loc_3 = rt_add_i32(rt_mul_i32(bit_or(loc_1, 3), 12), loc_5)
						rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4))
						loc_1 = rt_add_i32(loc_1, 4)
						loc_9 = rt_add_i32(loc_9, 4)
						if loc_13 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					while true do
						loc_2 = rt_add_i32(rt_mul_i32(loc_1, 12), loc_5)
						rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
						rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_4 + 8))
						loc_1 = rt_add_i32(loc_1, 1)
						loc_6 = rt_add_i32(loc_6, 1)
						if loc_8 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = rt_load_i32(memory_at_0, loc_0 + 4)
			break
		end
		while true do
			while true do
				if loc_11 ~= 0 then
					while true do
						loc_13 = rt_sub_i32(loc_7, 1)
						loc_12 = rt_load_i32(memory_at_0, loc_0)
						while true do
							loc_10 = rt_add_i32(rt_mul_i32(loc_14, 12), loc_12)
							loc_8 = rt_load_i32(memory_at_0, loc_10)
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_10 + 4)
								if loc_3 == rt_load_i32(memory_at_0, loc_0 + 16) then
									while true do
										reg_0 = FUNC_LIST[575](loc_8, rt_load_i32(memory_at_0, loc_4), loc_3)
										if reg_0 == 0 then
											desired = 5
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								while true do
									if loc_3 == 0 then
										while true do
											loc_1 = 2166136261
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_1 = 2166136261
									loc_9 = 0
									loc_2 = 0
									if loc_3 >= 4 then
										while true do
											loc_18 = bit_and(loc_3, 4294967292)
											loc_16 = 0
											while true do
												loc_6 = rt_add_i32(loc_2, loc_8)
												loc_1 = rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, loc_6), loc_1), 16777619), rt_load_i32_u8(memory_at_0, loc_6 + 1)), 16777619), rt_load_i32_u8(memory_at_0, loc_6 + 2)), 16777619), rt_load_i32_u8(memory_at_0, loc_6 + 3)), 16777619)
												loc_2 = rt_add_i32(loc_2, 4)
												loc_16 = rt_add_i32(loc_16, 4)
												if loc_18 ~= loc_16 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_19 = bit_and(loc_3, 3)
									if loc_19 == 0 then
										break
									end
									while true do
										loc_1 = rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_8)), loc_1), 16777619)
										loc_2 = rt_add_i32(loc_2, 1)
										loc_9 = rt_add_i32(loc_9, 1)
										if loc_19 ~= loc_9 then
											continue
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_6 = 0
								while true do
									while true do
										while true do
											loc_9 = bit_and(loc_1, loc_13)
											loc_1 = rt_add_i32(rt_mul_i32(loc_9, 12), loc_5)
											loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
											if loc_15 ~= loc_2 then
												break
											end
											reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_1), loc_17, loc_15)
											if reg_0 ~= 0 then
												break
											end
											rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_10))
											rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_10 + 8))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if loc_2 == loc_3 then
											while true do
												reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_1), loc_8, loc_3)
												if reg_0 == 0 then
													desired = 7
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_6 = rt_add_i32(loc_6, 1)
										loc_1 = rt_add_i32(loc_9, loc_6)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_10))
								rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_10 + 8))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_14 = rt_add_i32(loc_14, 1)
							if loc_11 > loc_14 then
								continue
							end
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, loc_7)
						rt_store_i32(memory_at_0, loc_0, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 4, loc_7)
				loc_12 = rt_load_i32(memory_at_0, loc_0)
				rt_store_i32(memory_at_0, loc_0, loc_5)
				if loc_12 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[652](loc_12)
			break
		end
		break
	end
end
FUNC_LIST[400] = --[[ Luau::detail::DenseHashTable<Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::AstNameTable::Entry, Luau::detail::ItemInterfaceSet<Luau::AstNameTable::Entry>, Luau::AstNameTable::EntryHash, std::__2::equal_to<Luau::AstNameTable::Entry>>::insert_unsafe(Luau::AstNameTable::Entry const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 4)
		loc_10 = rt_load_i32(memory_at_0, loc_1)
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_5 == 0 then
				while true do
					loc_2 = 2166136261
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = bit_and(loc_5, 3)
			while true do
				if loc_5 < 4 then
					while true do
						loc_2 = 2166136261
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_11 = bit_and(loc_5, 4294967292)
				loc_2 = 2166136261
				while true do
					loc_4 = rt_add_i32(loc_3, loc_10)
					loc_2 = rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, loc_4), loc_2), 16777619), rt_load_i32_u8(memory_at_0, loc_4 + 1)), 16777619), rt_load_i32_u8(memory_at_0, loc_4 + 2)), 16777619), rt_load_i32_u8(memory_at_0, loc_4 + 3)), 16777619)
					loc_3 = rt_add_i32(loc_3, 4)
					loc_8 = rt_add_i32(loc_8, 4)
					if loc_11 ~= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_6 == 0 then
				break
			end
			while true do
				loc_2 = rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_10)), loc_2), 16777619)
				loc_3 = rt_add_i32(loc_3, 1)
				loc_7 = rt_add_i32(loc_7, 1)
				if loc_6 ~= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = rt_sub_i32(loc_9, 1)
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_11 = rt_load_i32(memory_at_0, loc_0)
		loc_3 = 0
		while true do
			while true do
				while true do
					loc_8 = bit_and(loc_2, loc_4)
					loc_2 = rt_add_i32(rt_mul_i32(loc_8, 12), loc_11)
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 4)
					if loc_6 ~= loc_7 then
						break
					end
					reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_2), loc_9, loc_6)
					if reg_0 ~= 0 then
						break
					end
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_5 == loc_7 then
					while true do
						reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_2), loc_10, loc_5)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_3 = rt_add_i32(loc_3, 1)
				loc_2 = rt_add_i32(loc_8, loc_3)
				if loc_3 <= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[401] = --[[ Luau::AstNameTable::addStatic(char const*, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
		reg_0 = FUNC_LIST[544](loc_1)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 8) < rt_shr_u32(rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 4), 3), 2) then
				break
			end
			reg_0 = FUNC_LIST[398](loc_0, rt_add_i32(loc_3, 4))
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[399](loc_0)
			break
		end
		reg_0 = FUNC_LIST[400](loc_0, rt_add_i32(loc_3, 4))
		loc_0 = rt_load_i32(memory_at_0, loc_3 + 4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[402] = --[[ Luau::AstNameTable::getOrAddWithType(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 12, 0)
		rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
		rt_store_i32(memory_at_0, loc_5 + 4, loc_2)
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 8) < rt_shr_u32(rt_mul_i32(rt_load_i32(memory_at_0, loc_1 + 4), 3), 2) then
				break
			end
			reg_0 = FUNC_LIST[398](loc_1, rt_add_i32(loc_5, 4))
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[399](loc_1)
			break
		end
		while true do
			reg_0 = FUNC_LIST[400](loc_1, rt_add_i32(loc_5, 4))
			loc_7 = reg_0
			loc_4 = rt_load_i32(memory_at_0, loc_7 + 8)
			if loc_4 ~= 0 then
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_7)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_add_i32(loc_3, 1)
			while true do
				while true do
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
					loc_8 = rt_load_i32(memory_at_0, loc_6)
					if loc_8 == 0 then
						break
					end
					loc_9 = rt_add_i32(loc_8, 4)
					loc_1 = bit_and(rt_add_i32(rt_add_i32(loc_9, rt_load_i32(memory_at_0, loc_6 + 4)), 7), 4294967288)
					if rt_add_i32(loc_4, loc_1) > rt_add_i32(loc_8, 8196) then
						break
					end
					rt_store_i32(memory_at_0, loc_6 + 4, rt_add_i32(loc_1, rt_sub_i32(loc_4, loc_9)))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[646](rt_add_i32((if loc_4 <= 8192 then 8192 else loc_4), 4))
				loc_1 = reg_0
				rt_store_i32(memory_at_0, loc_1, rt_load_i32(memory_at_0, loc_6))
				rt_store_i32(memory_at_0, loc_6 + 4, loc_4)
				rt_store_i32(memory_at_0, loc_6, loc_1)
				loc_1 = rt_add_i32(loc_1, 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_1 = FUNC_LIST[517](loc_1, loc_2, loc_3)
			loc_4 = reg_1
			rt_store_i32_n8(memory_at_0, rt_add_i32(loc_3, loc_4), 0)
			rt_store_i32(memory_at_0, loc_7, loc_4)
			loc_4 = (if rt_load_i32_u8(memory_at_0, loc_2) == 64 then 284 else 281)
			rt_store_i32(memory_at_0, loc_7 + 8, loc_4)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
		rt_store_i32(memory_at_0, loc_0, loc_1)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[403] = --[[ Luau::AstNameTable::getOrAdd(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_3 = FUNC_LIST[544](loc_1)
		FUNC_LIST[402](rt_add_i32(loc_2, 8), loc_0, loc_1, reg_3)
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 8)
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[404] = --[[ Luau::AstNameTable::get(char const*) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[544](loc_1)
		loc_4 = reg_0
		rt_store_i32(memory_at_0, loc_2 + 12, 0)
		rt_store_i32(memory_at_0, loc_2 + 8, loc_4)
		rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
		reg_0 = FUNC_LIST[398](loc_0, rt_add_i32(loc_2, 4))
		loc_1 = reg_0
		if loc_1 ~= 0 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, loc_1)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[405] = --[[ Luau::Lexer::Lexer(char const*, unsigned long, Luau::AstNameTable&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_2)
		rt_store_i32(memory_at_0, loc_0, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 80, 0)
		rt_store_i64(memory_at_0, loc_0 + 72, rt_i64_ZERO)
		rt_store_i32_n16(memory_at_0, loc_0 + 68, 256)
		rt_store_i32(memory_at_0, loc_0 + 64, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 24, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 32, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 40, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 48, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 56, rt_i64_ZERO)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[406] = --[[ Luau::Lexer::setSkipComments(bool) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32_n8(memory_at_0, loc_0 + 68, loc_1)
		break
	end
end
FUNC_LIST[407] = --[[ Luau::Lexer::next() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = rt_add_i32(loc_0, 20)
		loc_4 = rt_add_i32(loc_0, 48)
		loc_5 = rt_add_i32(loc_0, 24)
		loc_9 = bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 68), 1)
		loc_6 = 1
		while true do
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
				if loc_1 >= loc_10 then
					break
				end
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 12)
				loc_11 = rt_load_i32(memory_at_0, loc_0)
				while true do
					loc_8 = rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_11)), 9)
					if loc_8 > 23 then
						desired = 2
						break
					end
					while true do
						if bit_and(rt_shl_i32(1, loc_8), 8388637) == 0 then
							while true do
								if loc_8 ~= 1 then
									desired = 2
									break
								end
								loc_1 = rt_add_i32(loc_1, 1)
								rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
								loc_7 = rt_add_i32(loc_7, 1)
								rt_store_i32(memory_at_0, loc_0 + 12, loc_7)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_add_i32(loc_1, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
					if loc_1 ~= loc_10 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			if loc_6 ~= 0 then
				while true do
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			FUNC_LIST[408](rt_add_i32(loc_2, 4), loc_0)
			rt_store_i32(memory_at_0, loc_3 + 24, rt_load_i32(memory_at_0, loc_2 + 28))
			rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2 + 20))
			rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 12))
			rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2 + 4))
			if loc_9 ~= 0 then
				while true do
					loc_6 = 0
					if bit_and(rt_load_i32(memory_at_0, loc_3), 4294967294) == 282 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 32)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[408] = --[[ Luau::Lexer::readNext() ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_11 = rt_load_i32(memory_at_0, loc_1 + 12)
		rt_store_i32(memory_at_0, loc_4 + 32, loc_11)
		loc_7 = rt_sub_i32(loc_5, loc_6)
		rt_store_i32(memory_at_0, loc_4 + 36, loc_7)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								loc_8 = rt_load_i32(memory_at_0, loc_1 + 4)
																								if loc_8 <= loc_5 then
																									break
																								end
																								loc_9 = rt_load_i32(memory_at_0, loc_1)
																								loc_10 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, loc_9))
																								if not br_map[1] then
																									br_map[1] = (function()
																										return { [0] = 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 20, 19, 15, 20, 9, 20, 20, 14, 12, 20, 1, 11, 13, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 20, 6, 5, 7, 20, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 2, 19, 20, 16, 19, 10, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 3, 20, 4, 8, }
																									end)()
																								end
																								temp = br_map[1][loc_10] or 19
																								if temp < 10 then
																									if temp < 5 then
																										if temp < 2 then
																											if temp < 1 then
																												break
																											else
																												desired = 21
																												break
																											end
																										elseif temp > 2 then
																											if temp < 4 then
																												desired = 19
																												break
																											else
																												desired = 18
																												break
																											end
																										else
																											desired = 20
																											break
																										end
																									elseif temp > 5 then
																										if temp < 8 then
																											if temp < 7 then
																												desired = 16
																												break
																											else
																												desired = 15
																												break
																											end
																										elseif temp > 8 then
																											desired = 13
																											break
																										else
																											desired = 14
																											break
																										end
																									else
																										desired = 17
																										break
																									end
																								elseif temp > 10 then
																									if temp < 16 then
																										if temp < 13 then
																											if temp < 12 then
																												desired = 11
																												break
																											else
																												desired = 10
																												break
																											end
																										elseif temp > 13 then
																											if temp < 15 then
																												desired = 8
																												break
																											else
																												desired = 7
																												break
																											end
																										else
																											desired = 9
																											break
																										end
																									elseif temp > 16 then
																										if temp < 19 then
																											if temp < 18 then
																												desired = 5
																												break
																											else
																												desired = 4
																												break
																											end
																										elseif temp > 19 then
																											desired = 2
																											break
																										else
																											desired = 3
																											break
																										end
																									else
																										desired = 6
																										break
																									end
																								else
																									desired = 12
																									break
																								end
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																							rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																							rt_store_i32(memory_at_0, loc_0 + 16, loc_7)
																							rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																							rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																							rt_store_i32(memory_at_0, loc_0, 0)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						while true do
																							loc_6 = rt_add_i32(loc_5, 1)
																							if loc_8 <= loc_6 then
																								break
																							end
																							while true do
																								while true do
																									while true do
																										if not br_map[2] then
																											br_map[2] = (function()
																												return { [0] = 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, }
																											end)()
																										end
																										temp = br_map[2][rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)), 45)] or 3
																										if temp < 2 then
																											if temp < 1 then
																												break
																											else
																												desired = 23
																												break
																											end
																										elseif temp > 2 then
																											desired = 21
																											break
																										else
																											desired = 22
																											break
																										end
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
																									loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																									rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																									rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
																									rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																									rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																									rt_store_i32(memory_at_0, loc_0, 263)
																									desired = 1
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
																								loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																								rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																								rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
																								rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																								rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																								rt_store_i32(memory_at_0, loc_0, 271)
																								desired = 1
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							FUNC_LIST[410](loc_0, loc_1)
																							desired = 1
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
																						loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																						rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																						rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
																						rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																						rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																						rt_store_i32(memory_at_0, loc_0, 45)
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_10 = rt_add_i32(loc_5, 1)
																					rt_store_i32(memory_at_0, loc_1 + 8, loc_10)
																					while true do
																						if loc_8 > loc_10 then
																							while true do
																								loc_8 = rt_add_i32(bit_xor(loc_5, 4294967295), loc_8)
																								loc_5 = 0
																								while true do
																									while true do
																										loc_12 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_9, loc_10))
																										if loc_12 ~= 61 then
																											while true do
																												loc_8 = loc_5
																												desired = 22
																												break
																											end
																											if desired then
																												if desired == 23 then
																													desired = nil
																													continue
																												end
																												break
																											end
																										end
																										loc_10 = rt_add_i32(loc_10, 1)
																										rt_store_i32(memory_at_0, loc_1 + 8, loc_10)
																										loc_5 = rt_add_i32(loc_5, 1)
																										if loc_8 ~= loc_5 then
																											continue
																										end
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									loc_12 = 0
																									break
																								end
																								if desired then
																									break
																								end
																								loc_5 = bit_xor((if loc_12 ~= 91 then 4294967295 else 0), loc_8)
																								if rt_ge_i32(loc_5, 0) then
																									while true do
																										FUNC_LIST[411](loc_0, loc_1, rt_add_i32(loc_4, 32), loc_5, 278, 285)
																										desired = 1
																										break
																									end
																									if desired then
																										break
																									end
																								end
																								if loc_5 ~= 4294967295 then
																									desired = 20
																									break
																								end
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																						rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																						rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																						rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																						rt_store_i32(memory_at_0, loc_0, 91)
																						rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
																						desired = 1
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																					rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																					rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																					rt_store_i32(memory_at_0, loc_0, 285)
																					rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_extend_i64_u32(loc_11), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_10, loc_6)), rt_i64_from_u32(32, 0))))
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 1))
																				if rt_load_i32(memory_at_0, loc_1 + 72) ~= rt_load_i32(memory_at_0, loc_1 + 76) then
																					while true do
																						rt_store_i32(memory_at_0, loc_4 + 40, 1)
																						FUNC_LIST[412](rt_add_i32(loc_1, 72), rt_add_i32(loc_4, 40))
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																				rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																				rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																				rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																				rt_store_i32(memory_at_0, loc_0, 123)
																				rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(32, 0))), 1))
																				desired = 1
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_9 = rt_add_i32(loc_5, 1)
																			rt_store_i32(memory_at_0, loc_1 + 8, loc_9)
																			loc_5 = rt_load_i32(memory_at_0, loc_1 + 76)
																			if loc_5 == rt_load_i32(memory_at_0, loc_1 + 72) then
																				while true do
																					loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																					rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																					rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																					rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																					rt_store_i32(memory_at_0, loc_0, 125)
																					rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			loc_5 = rt_sub_i32(loc_5, 4)
																			loc_8 = rt_load_i32(memory_at_0, loc_5)
																			rt_store_i32(memory_at_0, loc_1 + 76, loc_5)
																			if loc_8 ~= 0 then
																				while true do
																					loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																					rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																					rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																					rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																					rt_store_i32(memory_at_0, loc_0, 125)
																					rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
																					desired = 1
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			rt_store_i32(memory_at_0, loc_4 + 24, loc_11)
																			rt_store_i32(memory_at_0, loc_4 + 28, rt_sub_i32(loc_9, loc_6))
																			rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_4 + 24))
																			FUNC_LIST[413](loc_0, loc_1, rt_add_i32(loc_4, 8), 267, 268)
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_6 = rt_add_i32(loc_5, 1)
																		rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
																		while true do
																			if loc_6 >= loc_8 then
																				break
																			end
																			if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
																				break
																			end
																			rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
																			loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																			rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																			rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
																			rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																			rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																			rt_store_i32(memory_at_0, loc_0, 257)
																			desired = 1
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																		rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																		rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																		rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																		rt_store_i32(memory_at_0, loc_0, 61)
																		rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_6 = rt_add_i32(loc_5, 1)
																	rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
																	while true do
																		if loc_6 >= loc_8 then
																			break
																		end
																		if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
																			break
																		end
																		rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
																		loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																		rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																		rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
																		rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																		rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																		rt_store_i32(memory_at_0, loc_0, 258)
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																	rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																	rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																	rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																	rt_store_i32(memory_at_0, loc_0, 60)
																	rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_6 = rt_add_i32(loc_5, 1)
																rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
																while true do
																	if loc_6 >= loc_8 then
																		break
																	end
																	if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
																		break
																	end
																	rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
																	loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																	rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																	rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
																	rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																	rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																	rt_store_i32(memory_at_0, loc_0, 259)
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																rt_store_i32(memory_at_0, loc_0, 62)
																rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_6 = rt_add_i32(loc_5, 1)
															rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
															while true do
																if loc_6 >= loc_8 then
																	break
																end
																if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
																	break
																end
																rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
																loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
																rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																rt_store_i32(memory_at_0, loc_0, 260)
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
															rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
															rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
															rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
															rt_store_i32(memory_at_0, loc_0, 126)
															rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														FUNC_LIST[414](loc_0, loc_1)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 1))
													loc_2 = rt_bit_or_i64(rt_extend_i64_u32(loc_11), rt_shl_i64(rt_extend_i64_u32(loc_7), rt_i64_from_u32(32, 0)))
													rt_store_i64(memory_at_0, loc_4 + 16, loc_2)
													rt_store_i64(memory_at_0, loc_4 + 40, loc_2)
													FUNC_LIST[413](loc_0, loc_1, rt_add_i32(loc_4, 16), 266, 269)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_6 = rt_add_i32(loc_5, 1)
												rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
												while true do
													if loc_6 >= loc_8 then
														break
													end
													loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_6, loc_9))
													if loc_6 == 46 then
														while true do
															loc_6 = rt_add_i32(loc_5, 2)
															rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
															while true do
																if loc_6 >= loc_8 then
																	break
																end
																while true do
																	while true do
																		if not br_map[3] then
																			br_map[3] = (function()
																				return { [0] = 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, }
																			end)()
																		end
																		temp = br_map[3][rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)), 46)] or 2
																		if temp < 1 then
																			break
																		elseif temp > 1 then
																			desired = 13
																			break
																		else
																			desired = 14
																			break
																		end
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 3))
																	loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																	rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																	rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 3))
																	rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																	rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																	rt_store_i32(memory_at_0, loc_0, 262)
																	desired = 1
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 3))
																loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
																rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
																rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 3))
																rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
																rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
																rt_store_i32(memory_at_0, loc_0, 277)
																desired = 1
																break
															end
															if desired then
																break
															end
															loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
															rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
															rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
															rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
															rt_store_i32(memory_at_0, loc_0, 261)
															rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
															desired = 1
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													if rt_sub_i32(loc_6, 48) > 9 then
														break
													end
													FUNC_LIST[415](loc_0, loc_1, rt_add_i32(loc_4, 32), loc_5)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
												rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
												rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
												rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
												rt_store_i32(memory_at_0, loc_0, 46)
												rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_6 = rt_add_i32(loc_5, 1)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
											while true do
												if loc_6 >= loc_8 then
													break
												end
												if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
													break
												end
												rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
												loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
												rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
												rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
												rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
												rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
												rt_store_i32(memory_at_0, loc_0, 270)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
											rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
											rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
											rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
											rt_store_i32(memory_at_0, loc_0, 43)
											rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_6 = rt_add_i32(loc_5, 1)
										rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
										while true do
											if loc_6 >= loc_8 then
												break
											end
											while true do
												while true do
													if not br_map[4] then
														br_map[4] = (function()
															return { [0] = 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, }
														end)()
													end
													temp = br_map[4][rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)), 47)] or 2
													if temp < 1 then
														break
													elseif temp > 1 then
														desired = 9
														break
													else
														desired = 10
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
												loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
												rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
												rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
												rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
												rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
												rt_store_i32(memory_at_0, loc_0, 273)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_6 = rt_add_i32(loc_5, 2)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
											while true do
												if loc_6 >= loc_8 then
													break
												end
												if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
													break
												end
												rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 3))
												loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
												rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
												rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 3))
												rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
												rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
												rt_store_i32(memory_at_0, loc_0, 274)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
											rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
											rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
											rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
											rt_store_i32(memory_at_0, loc_0, 265)
											rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
										rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
										rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
										rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
										rt_store_i32(memory_at_0, loc_0, 47)
										rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_6 = rt_add_i32(loc_5, 1)
									rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
									while true do
										if loc_6 >= loc_8 then
											break
										end
										if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
											break
										end
										rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
										loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
										rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
										rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
										rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
										rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
										rt_store_i32(memory_at_0, loc_0, 272)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
									rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
									rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
									rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
									rt_store_i32(memory_at_0, loc_0, 42)
									rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_6 = rt_add_i32(loc_5, 1)
								rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
								while true do
									if loc_6 >= loc_8 then
										break
									end
									if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
										break
									end
									rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
									loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
									rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
									rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
									rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
									rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
									rt_store_i32(memory_at_0, loc_0, 275)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
								rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
								rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
								rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
								rt_store_i32(memory_at_0, loc_0, 37)
								rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = rt_add_i32(loc_5, 1)
							rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
							while true do
								if loc_6 >= loc_8 then
									break
								end
								if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 61 then
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
								loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
								rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
								rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
								rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
								rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
								rt_store_i32(memory_at_0, loc_0, 276)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
							rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
							rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
							rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
							rt_store_i32(memory_at_0, loc_0, 94)
							rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = rt_add_i32(loc_5, 1)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
						while true do
							if loc_6 >= loc_8 then
								break
							end
							if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 58 then
								break
							end
							rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
							loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
							rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 2))
							rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
							rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
							rt_store_i32(memory_at_0, loc_0, 264)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
						rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
						rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
						rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
						rt_store_i32(memory_at_0, loc_0, 58)
						rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[416](rt_add_i32(loc_4, 40), loc_1)
					loc_2 = rt_load_i64_u32(memory_at_0, loc_1 + 12)
					loc_5 = rt_load_i32(memory_at_0, loc_1 + 16)
					loc_1 = rt_load_i32(memory_at_0, loc_1 + 8)
					loc_3 = rt_load_i64(memory_at_0, loc_4 + 32)
					rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_4 + 40))
					rt_store_i32(memory_at_0, loc_0 + 20, 0)
					rt_store_i64(memory_at_0, loc_0 + 4, loc_3)
					rt_store_i32(memory_at_0, loc_0, 284)
					rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_1, loc_5)), rt_i64_from_u32(32, 0)), loc_2))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_extend_i32_n8(loc_10)
				if rt_sub_i32(loc_6, 48) <= 9 then
					while true do
						FUNC_LIST[415](loc_0, loc_1, rt_add_i32(loc_4, 32), loc_5)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and((if loc_6 ~= 95 then 1 else 0), (if rt_sub_i32(bit_or(loc_6, 32), 97) >= 26 then 1 else 0)) == 0 then
					while true do
						FUNC_LIST[416](rt_add_i32(loc_4, 40), loc_1)
						loc_2 = rt_load_i64_u32(memory_at_0, loc_1 + 12)
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 16)
						loc_1 = rt_load_i32(memory_at_0, loc_1 + 8)
						loc_6 = rt_load_i32(memory_at_0, loc_4 + 44)
						loc_3 = rt_load_i64(memory_at_0, loc_4 + 32)
						rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_4 + 40))
						rt_store_i32(memory_at_0, loc_0 + 20, 0)
						rt_store_i64(memory_at_0, loc_0 + 4, loc_3)
						rt_store_i32(memory_at_0, loc_0, loc_6)
						rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_1, loc_5)), rt_i64_from_u32(32, 0)), loc_2))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_lt_i32(loc_6, 0) then
					while true do
						FUNC_LIST[417](loc_0, loc_1)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 1))
			loc_2 = rt_load_i64(memory_at_0, loc_4 + 32)
			rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(loc_7, 1))
			rt_store_i64_n32(memory_at_0, loc_0 + 12, loc_2)
			rt_store_i64(memory_at_0, loc_0 + 4, loc_2)
			rt_store_i32(memory_at_0, loc_0, loc_10)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 48)
		break
	end
end
FUNC_LIST[409] = --[[ Luau::Lexer::next(bool, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = rt_add_i32(loc_0, 20)
		loc_6 = rt_add_i32(loc_0, 48)
		loc_7 = rt_add_i32(loc_0, 24)
		while true do
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_10 = rt_load_i32(memory_at_0, loc_0 + 4)
				if loc_3 >= loc_10 then
					break
				end
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 12)
				loc_11 = rt_load_i32(memory_at_0, loc_0)
				while true do
					loc_9 = rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_11)), 9)
					if loc_9 > 23 then
						desired = 2
						break
					end
					while true do
						if bit_and(rt_shl_i32(1, loc_9), 8388637) == 0 then
							while true do
								if loc_9 ~= 1 then
									desired = 2
									break
								end
								loc_3 = rt_add_i32(loc_3, 1)
								rt_store_i32(memory_at_0, loc_0 + 16, loc_3)
								loc_8 = rt_add_i32(loc_8, 1)
								rt_store_i32(memory_at_0, loc_0 + 12, loc_8)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_add_i32(loc_3, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
					if loc_3 ~= loc_10 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			if bit_and(loc_2, 1) ~= 0 then
				while true do
					rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
					rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			FUNC_LIST[408](rt_add_i32(loc_4, 4), loc_0)
			rt_store_i32(memory_at_0, loc_5 + 24, rt_load_i32(memory_at_0, loc_4 + 28))
			rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_4 + 20))
			rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 12))
			rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4 + 4))
			if loc_1 ~= 0 then
				while true do
					loc_2 = 0
					if bit_and(rt_load_i32(memory_at_0, loc_5), 4294967294) == 282 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[410] = --[[ Luau::Lexer::readCommentBody() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_9 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_11 = rt_load_i32(memory_at_0, loc_1 + 12)
		rt_store_i32(memory_at_0, loc_4 + 8, loc_11)
		rt_store_i32(memory_at_0, loc_4 + 12, rt_sub_i32(loc_3, loc_9))
		loc_7 = rt_add_i32(loc_3, 2)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_7)
		loc_6 = rt_load_i32(memory_at_0, loc_1)
		while true do
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
				loc_2 = loc_7
				if loc_5 <= loc_2 then
					break
				end
				if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_6)) ~= 91 then
					break
				end
				loc_2 = rt_add_i32(loc_3, 3)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
				if loc_2 >= loc_5 then
					break
				end
				loc_8 = rt_sub_i32(rt_sub_i32(loc_5, loc_3), 3)
				loc_3 = 0
				while true do
					while true do
						loc_10 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_6))
						if loc_10 ~= 61 then
							while true do
								loc_8 = loc_3
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_2 = rt_add_i32(loc_2, 1)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_8 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_10 = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = bit_xor((if loc_10 ~= 91 then 4294967295 else 0), loc_8)
				if rt_lt_i32(loc_3, 0) then
					break
				end
				FUNC_LIST[411](loc_0, loc_1, rt_add_i32(loc_4, 8), loc_3, 283, 286)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 >= loc_5 then
					break
				end
				while true do
					loc_3 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_6))
					if (if bit_and(rt_shl_i32(1, loc_3), 9217) ~= 0 then (if loc_3 <= 13 then 1 else 0) else 0) ~= 0 then
						desired = 2
						break
					end
					loc_2 = rt_add_i32(loc_2, 1)
					rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
					if loc_2 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = loc_5
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0 + 4, rt_load_i64(memory_at_0, loc_4 + 8))
			rt_store_i32(memory_at_0, loc_0, 282)
			rt_store_i32(memory_at_0, loc_0 + 24, rt_add_i32(loc_6, loc_7))
			rt_store_i32(memory_at_0, loc_0 + 20, rt_sub_i32(loc_2, loc_7))
			rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_extend_i64_u32(loc_11), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_2, loc_9)), rt_i64_from_u32(32, 0))))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[411] = --[[ Luau::Lexer::readLongString(Luau::Position const&, int, Luau::Lexeme::Type, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_9 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_9)
		while true do
			while true do
				loc_11 = rt_load_i32(memory_at_0, loc_1 + 4)
				if loc_9 >= loc_11 then
					while true do
						loc_10 = rt_load_i32(memory_at_0, loc_1 + 12)
						loc_6 = loc_9
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_10 = rt_load_i32(memory_at_0, loc_1 + 12)
				loc_12 = rt_load_i32(memory_at_0, loc_1)
				loc_6 = loc_9
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_7 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_12))
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, }
											end)()
										end
										temp = br_map[1][loc_7] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 2
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_7 ~= 93 then
										break
									end
									loc_7 = rt_add_i32(loc_6, 1)
									rt_store_i32(memory_at_0, loc_1 + 8, loc_7)
									loc_8 = 4294967295
									while true do
										if loc_7 >= loc_11 then
											while true do
												loc_6 = loc_7
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_13 = rt_add_i32(bit_xor(loc_6, 4294967295), loc_11)
										loc_8 = 0
										while true do
											while true do
												loc_14 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_7, loc_12))
												if loc_14 ~= 61 then
													while true do
														loc_13 = loc_8
														reg_0 = loc_7
														desired = 9
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
												end
												loc_7 = rt_add_i32(loc_7, 1)
												rt_store_i32(memory_at_0, loc_1 + 8, loc_7)
												loc_8 = rt_add_i32(loc_8, 1)
												if loc_13 ~= loc_8 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_14 = 0
											reg_0 = loc_11
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_6 = reg_0
										loc_8 = bit_xor((if loc_14 ~= 93 then 4294967295 else 0), loc_13)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_3 ~= loc_8 then
										desired = 4
										break
									end
									loc_8 = rt_add_i32(loc_7, 1)
									rt_store_i32(memory_at_0, loc_1 + 8, loc_8)
									loc_7 = rt_add_i32(bit_xor(rt_add_i32(loc_3, loc_9), 4294967295), loc_7)
									loc_15 = rt_bit_or_i64(rt_extend_i64_u32(loc_10), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_8, rt_load_i32(memory_at_0, loc_1 + 16))), rt_i64_from_u32(32, 0)))
									loc_5 = loc_4
									reg_0 = rt_add_i32(loc_9, loc_12)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_6 = rt_add_i32(loc_6, 1)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = rt_add_i32(loc_6, 1)
							rt_store_i32(memory_at_0, loc_1 + 16, loc_6)
							loc_10 = rt_add_i32(loc_10, 1)
							rt_store_i32(memory_at_0, loc_1 + 12, loc_10)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if loc_6 < loc_11 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_15 = rt_bit_or_i64(rt_extend_i64_u32(loc_10), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_6, rt_load_i32(memory_at_0, loc_1 + 16))), rt_i64_from_u32(32, 0)))
			loc_7 = 0
			reg_0 = 0
			break
		end
		loc_6 = reg_0
		loc_16 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 24, loc_6)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_7)
		rt_store_i64(memory_at_0, loc_0 + 12, loc_15)
		rt_store_i64(memory_at_0, loc_0 + 4, loc_16)
		rt_store_i32(memory_at_0, loc_0, loc_5)
		break
	end
end
FUNC_LIST[412] = --[[ std::__2::vector<Luau::Lexer::BraceType, std::__2::allocator<Luau::Lexer::BraceType>>::push_back[abi:ne180100](Luau::Lexer::BraceType&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		if loc_4 < loc_2 then
			while true do
				rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_1))
				rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_4, 4))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_0)
			loc_7 = rt_shr_i32(rt_sub_i32(loc_4, loc_5), 2)
			loc_3 = rt_add_i32(loc_7, 1)
			if loc_3 < 1073741824 then
				while true do
					loc_6 = rt_sub_i32(loc_2, loc_5)
					loc_2 = rt_shr_i32(loc_6, 1)
					loc_3 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_2 > loc_3 then loc_2 else loc_3))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_3, 2))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_8 = reg_0
					loc_2 = rt_add_i32(loc_8, rt_shl_i32(loc_7, 2))
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
					loc_3 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_8)
					loc_1 = rt_add_i32(loc_2, 4)
					if loc_4 ~= loc_5 then
						while true do
							while true do
								loc_2 = rt_sub_i32(loc_2, 4)
								loc_4 = rt_sub_i32(loc_4, 4)
								rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_4))
								if loc_4 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_2)
					if loc_5 ~= 0 then
						while true do
							FUNC_LIST[653](loc_5, loc_6)
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[413] = --[[ Luau::Lexer::readInterpolatedStringSection(Luau::Position, Luau::Lexeme::Type, Luau::Lexeme::Type) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_9 = rt_load_i32(memory_at_0, loc_1 + 8)
			loc_7 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_9 >= loc_7 then
				while true do
					loc_5 = loc_9
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = loc_9
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_11 = rt_load_i32(memory_at_0, loc_1)
											loc_6 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, loc_11))
											if not br_map[1] then
												br_map[1] = (function()
													return { [0] = 1, 4, 4, 4, 2, }
												end)()
											end
											temp = br_map[1][rt_sub_i32(loc_6, 92)] or 0
											if temp < 2 then
												if temp < 1 then
													break
												else
													desired = 8
													break
												end
											elseif temp > 2 then
												desired = 5
												break
											else
												desired = 7
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_6 > 13 then
											desired = 6
											break
										end
										if bit_and(rt_shl_i32(1, loc_6), 9217) == 0 then
											desired = 6
											break
										end
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										loc_6 = rt_add_i32(loc_5, 1)
										if loc_7 <= loc_6 then
											break
										end
										if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_11)) ~= 117 then
											break
										end
										loc_6 = rt_add_i32(loc_5, 2)
										if loc_7 <= loc_6 then
											break
										end
										if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_11)) ~= 123 then
											break
										end
										loc_5 = rt_add_i32(loc_5, 3)
										rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[419](loc_1)
									loc_7 = rt_load_i32(memory_at_0, loc_1 + 4)
									loc_5 = rt_load_i32(memory_at_0, loc_1 + 8)
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = rt_add_i32(loc_5, 1)
								rt_store_i32(memory_at_0, loc_1 + 8, loc_7)
								loc_15 = rt_load_i64_u32(memory_at_0, loc_1 + 12)
								loc_1 = rt_load_i32(memory_at_0, loc_1 + 16)
								loc_16 = rt_load_i64(memory_at_0, loc_2)
								rt_store_i32(memory_at_0, loc_0 + 24, rt_add_i32(loc_9, loc_11))
								rt_store_i32(memory_at_0, loc_0 + 20, rt_sub_i32(loc_5, loc_9))
								rt_store_i64(memory_at_0, loc_0 + 4, loc_16)
								rt_store_i32(memory_at_0, loc_0, loc_4)
								rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_7, loc_1)), rt_i64_from_u32(32, 0)), loc_15))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_6 == 123 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_add_i32(loc_5, 1)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_5 < loc_7 then
						desired = 2
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_1 + 76)
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 80)
						if loc_6 < loc_4 then
							while true do
								rt_store_i32(memory_at_0, loc_6, 0)
								loc_8 = rt_add_i32(loc_6, 4)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = rt_add_i32(loc_1, 72)
						loc_12 = rt_load_i32(memory_at_0, loc_8)
						loc_14 = rt_shr_i32(rt_sub_i32(loc_6, loc_12), 2)
						loc_10 = rt_add_i32(loc_14, 1)
						if loc_10 >= 1073741824 then
							desired = 3
							break
						end
						loc_8 = 0
						loc_13 = rt_sub_i32(loc_4, loc_12)
						loc_4 = rt_shr_i32(loc_13, 1)
						loc_10 = (if loc_13 >= 2147483644 then 1073741823 else (if loc_4 > loc_10 then loc_4 else loc_10))
						if loc_10 ~= 0 then
							while true do
								if loc_10 >= 1073741824 then
									desired = 2
									break
								end
								reg_0 = FUNC_LIST[646](rt_shl_i32(loc_10, 2))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_8
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = reg_0
						loc_4 = rt_add_i32(loc_8, rt_shl_i32(loc_14, 2))
						rt_store_i32(memory_at_0, loc_4, 0)
						loc_10 = rt_add_i32(rt_shl_i32(loc_10, 2), loc_8)
						loc_8 = rt_add_i32(loc_4, 4)
						if loc_6 ~= loc_12 then
							while true do
								while true do
									loc_4 = rt_sub_i32(loc_4, 4)
									loc_6 = rt_sub_i32(loc_6, 4)
									rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_6))
									if loc_6 ~= loc_12 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_1 + 80, loc_10)
						rt_store_i32(memory_at_0, loc_1 + 76, loc_8)
						rt_store_i32(memory_at_0, loc_1 + 72, loc_4)
						if loc_12 == 0 then
							break
						end
						FUNC_LIST[653](loc_12, loc_13)
						loc_11 = rt_load_i32(memory_at_0, loc_1)
						loc_7 = rt_load_i32(memory_at_0, loc_1 + 4)
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 8)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 76, loc_8)
					while true do
						loc_6 = rt_add_i32(loc_5, 1)
						if loc_7 <= loc_6 then
							break
						end
						if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_11)) ~= 123 then
							break
						end
						loc_15 = rt_load_i64_u32(memory_at_0, loc_1 + 12)
						loc_7 = rt_load_i32(memory_at_0, loc_1 + 16)
						loc_16 = rt_load_i64(memory_at_0, loc_2)
						rt_store_i32(memory_at_0, loc_0 + 24, rt_add_i32(loc_9, loc_11))
						rt_store_i32(memory_at_0, loc_0 + 20, rt_sub_i32(loc_5, loc_9))
						rt_store_i64(memory_at_0, loc_0 + 4, loc_16)
						rt_store_i32(memory_at_0, loc_0, 288)
						rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_5, loc_7)), rt_i64_from_u32(32, 0)), loc_15))
						rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_5, 2))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 8, loc_6)
					loc_15 = rt_load_i64_u32(memory_at_0, loc_1 + 12)
					loc_1 = rt_load_i32(memory_at_0, loc_1 + 16)
					loc_16 = rt_load_i64(memory_at_0, loc_2)
					rt_store_i32(memory_at_0, loc_0 + 24, rt_add_i32(loc_9, loc_11))
					rt_store_i32(memory_at_0, loc_0 + 20, rt_sub_i32(loc_5, loc_9))
					rt_store_i64(memory_at_0, loc_0 + 4, loc_16)
					rt_store_i32(memory_at_0, loc_0, loc_3)
					rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_6, loc_1)), rt_i64_from_u32(32, 0)), loc_15))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_8)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_15 = rt_load_i64_u32(memory_at_0, loc_1 + 12)
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_16 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 4, loc_16)
		rt_store_i32(memory_at_0, loc_0, 285)
		rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_5, loc_1)), rt_i64_from_u32(32, 0)), loc_15))
		break
	end
end
FUNC_LIST[414] = --[[ Luau::Lexer::readQuotedString() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
		if loc_6 < loc_4 then
			while true do
				reg_0 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, rt_load_i32(memory_at_0, loc_1)))
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		loc_7 = rt_sub_i32(loc_6, loc_2)
		loc_8 = rt_load_i32(memory_at_0, loc_1 + 12)
		loc_9 = rt_add_i32(loc_6, 1)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_9)
		while true do
			while true do
				while true do
					loc_2 = loc_9
					if loc_4 > loc_2 then
						while true do
							loc_11 = loc_5
							while true do
								loc_10 = rt_load_i32(memory_at_0, loc_1)
								loc_3 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_10))
								if loc_11 == loc_3 then
									desired = 3
									break
								end
								while true do
									while true do
										if loc_3 ~= 92 then
											while true do
												if loc_3 > 13 then
													desired = 7
													break
												end
												if bit_and(rt_shl_i32(1, loc_3), 9217) == 0 then
													desired = 7
													break
												end
												desired = 2
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[419](loc_1)
										loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_2 = rt_add_i32(loc_2, 1)
									rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								if loc_2 < loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_5 ~= 0 then
						desired = 2
						break
					end
					loc_10 = rt_load_i32(memory_at_0, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_add_i32(loc_2, 1)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_3 = rt_add_i32(loc_9, loc_10)
				loc_2 = rt_add_i32(bit_xor(loc_6, 4294967295), loc_2)
				loc_12 = rt_bit_or_i64(rt_extend_i64_u32(loc_8), rt_shl_i64(rt_extend_i64_u32(loc_7), rt_i64_from_u32(32, 0)))
				loc_13 = rt_bit_or_i64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_4, rt_load_i32(memory_at_0, loc_1 + 16))), rt_i64_from_u32(32, 0)))
				reg_0 = 279
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_12 = rt_bit_or_i64(rt_extend_i64_u32(loc_8), rt_shl_i64(rt_extend_i64_u32(loc_7), rt_i64_from_u32(32, 0)))
			loc_13 = rt_bit_or_i64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_1 + 16))), rt_i64_from_u32(32, 0)))
			loc_2 = 0
			loc_3 = 0
			reg_0 = 285
			break
		end
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 24, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
		rt_store_i64(memory_at_0, loc_0 + 12, loc_13)
		rt_store_i64(memory_at_0, loc_0 + 4, loc_12)
		rt_store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[415] = --[[ Luau::Lexer::readNumber(Luau::Position const&, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_5 = rt_add_i32(loc_4, 1)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
		loc_7 = rt_load_i32(memory_at_0, loc_1)
		while true do
			while true do
				while true do
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_5 >= loc_6 then
						while true do
							loc_4 = loc_5
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						while true do
							loc_8 = loc_4
							while true do
								loc_4 = loc_5
								loc_5 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_7))
								if rt_sub_i32(rt_extend_i32_n8(loc_5), 48) < 10 then
									break
								end
								while true do
									while true do
										loc_5 = bit_and(loc_5, 255)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 2, 5, 5, 5, 5, 5, 1, }
											end)()
										end
										temp = br_map[1][rt_sub_i32(loc_5, 95)] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 3
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_5 == 46 then
										desired = 6
										break
									end
									if loc_5 ~= 69 then
										desired = 3
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = rt_add_i32(loc_8, 2)
								rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
								if loc_4 >= loc_6 then
									desired = 3
									break
								end
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 1, 3, 1, }
									end)()
								end
								temp = br_map[2][rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_7)), 43)] or 3
								if temp < 3 then
									desired = 5
									break
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = rt_add_i32(loc_4, 1)
							rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
							if loc_5 ~= loc_6 then
								desired = 4
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_add_i32(loc_8, 3)
					rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_4 >= loc_6 then
					desired = 1
					break
				end
				while true do
					while true do
						loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_4, loc_7))
						if rt_sub_i32(bit_or(loc_5, 32), 97) < 26 then
							break
						end
						if rt_sub_i32(loc_5, 48) < 10 then
							break
						end
						if loc_5 ~= 95 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_4 = rt_add_i32(loc_4, 1)
					rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
					if loc_4 ~= loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = loc_6
			break
		end
		loc_9 = rt_load_i64_u32(memory_at_0, loc_1 + 12)
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_10 = rt_load_i64(memory_at_0, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 24, rt_add_i32(loc_3, loc_7))
		rt_store_i32(memory_at_0, loc_0 + 20, rt_sub_i32(loc_4, loc_3))
		rt_store_i64(memory_at_0, loc_0 + 4, loc_10)
		rt_store_i32(memory_at_0, loc_0, 280)
		rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_4, loc_5)), rt_i64_from_u32(32, 0)), loc_9))
		break
	end
end
FUNC_LIST[416] = --[[ Luau::Lexer::readName() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_2 = rt_add_i32(loc_6, 1)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_5 <= loc_2 then
				break
			end
			loc_7 = rt_load_i32(memory_at_0, loc_1)
			while true do
				while true do
					loc_3 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_7))
					if rt_sub_i32(bit_or(loc_3, 32), 97) < 26 then
						break
					end
					if rt_sub_i32(loc_3, 48) < 10 then
						break
					end
					if loc_3 ~= 95 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_2 = rt_add_i32(loc_2, 1)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
				if loc_2 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = loc_5
			break
		end
		loc_2 = rt_sub_i32(loc_2, loc_6)
		loc_3 = rt_add_i32(loc_6, rt_load_i32(memory_at_0, loc_1))
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 64)
		while true do
			if rt_load_i32_u8(memory_at_0, loc_1 + 69) == 1 then
				while true do
					FUNC_LIST[402](loc_0, loc_5, loc_3, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = 0
			rt_store_i32(memory_at_0, loc_4 + 12, 0)
			rt_store_i32(memory_at_0, loc_4 + 8, loc_2)
			rt_store_i32(memory_at_0, loc_4 + 4, loc_3)
			reg_1 = FUNC_LIST[398](loc_5, rt_add_i32(loc_4, 4))
			loc_2 = reg_1
			reg_0 = loc_0
			if loc_2 ~= 0 then
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_2)
					reg_1 = rt_load_i32(memory_at_0, loc_2 + 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = 281
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 4, loc_3)
			rt_store_i32(memory_at_0, loc_0, loc_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[417] = --[[ Luau::Lexer::readUtf8Error() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = rt_i64_ZERO
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_7 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_8 = rt_sub_i32(loc_3, loc_7)
		loc_9 = rt_load_i32(memory_at_0, loc_1 + 12)
		while true do
			while true do
				while true do
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
						if loc_5 <= loc_3 then
							break
						end
						loc_2 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_1)))
						if rt_ge_i32(loc_2, 0) then
							break
						end
						if bit_and(loc_2, 4294967264) == 4294967232 then
							while true do
								loc_6 = 31
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if bit_and(loc_2, 4294967280) == 4294967264 then
							while true do
								loc_10 = 1
								loc_6 = 15
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if bit_and(loc_2, 4294967288) == 4294967280 then
							while true do
								loc_6 = 7
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_add_i32(loc_3, 1)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
						rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
						rt_store_i32(memory_at_0, loc_0, 287)
						loc_14 = rt_extend_i64_u32(loc_9)
						rt_store_i64(memory_at_0, loc_0 + 4, rt_bit_or_i64(loc_14, rt_shl_i64(rt_extend_i64_u32(loc_8), rt_i64_from_u32(32, 0))))
						rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(loc_14, rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_3, loc_7)), rt_i64_from_u32(32, 0))))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_add_i32(loc_3, 1)
					rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_add_i32(loc_3, 1)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_5 = rt_sub_i32((if loc_4 > loc_5 then loc_4 else loc_5), loc_3)
				if loc_5 == 1 then
					desired = 1
					break
				end
				loc_11 = rt_load_i32(memory_at_0, loc_1)
				loc_12 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_11))
				if bit_and(loc_12, 192) ~= 128 then
					desired = 1
					break
				end
				loc_13 = bit_and(loc_2, 224)
				loc_4 = rt_add_i32(loc_3, 2)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_2 = bit_or(bit_and(loc_12, 63), rt_shl_i32(bit_and(loc_2, loc_6), 6))
				if loc_13 == 192 then
					break
				end
				if loc_5 == 2 then
					desired = 1
					break
				end
				loc_6 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_11))
				if bit_and(loc_6, 192) ~= 128 then
					desired = 1
					break
				end
				loc_4 = rt_add_i32(loc_3, 3)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_2 = bit_or(bit_and(loc_6, 63), rt_shl_i32(loc_2, 6))
				if loc_10 ~= 0 then
					break
				end
				if loc_5 == 3 then
					desired = 1
					break
				end
				loc_5 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_11))
				if bit_and(loc_5, 192) ~= 128 then
					desired = 1
					break
				end
				loc_4 = rt_add_i32(loc_3, 4)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_2 = bit_or(bit_and(loc_5, 63), rt_shl_i32(loc_2, 6))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
			rt_store_i32(memory_at_0, loc_0 + 20, 0)
			rt_store_i32(memory_at_0, loc_0, 287)
			loc_14 = rt_extend_i64_u32(loc_9)
			rt_store_i64(memory_at_0, loc_0 + 4, rt_bit_or_i64(loc_14, rt_shl_i64(rt_extend_i64_u32(loc_8), rt_i64_from_u32(32, 0))))
			rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(loc_14, rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_4, loc_7)), rt_i64_from_u32(32, 0))))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0, 287)
		loc_14 = rt_extend_i64_u32(loc_9)
		rt_store_i64(memory_at_0, loc_0 + 4, rt_bit_or_i64(loc_14, rt_shl_i64(rt_extend_i64_u32(loc_8), rt_i64_from_u32(32, 0))))
		rt_store_i64(memory_at_0, loc_0 + 12, rt_bit_or_i64(loc_14, rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(loc_4, loc_7)), rt_i64_from_u32(32, 0))))
		break
	end
end
FUNC_LIST[418] = --[[ Luau::Lexer::lookahead() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		loc_12 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_13 = rt_load_i32(memory_at_0, loc_1 + 12)
		loc_14 = rt_load_i32(memory_at_0, loc_1 + 8)
		rt_store_i32(memory_at_0, loc_4 + 48, rt_load_i32(memory_at_0, loc_1 + 44))
		rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_1 + 36))
		rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_1 + 28))
		rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_1 + 20))
		rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_1 + 56))
		rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_1 + 48))
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 76)
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 72)
		loc_7 = rt_sub_i32(loc_2, loc_5)
		loc_9 = 1
		if loc_2 ~= loc_5 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_9
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_9 = reg_0
		loc_15 = rt_add_i32(loc_1, 72)
		loc_3 = rt_add_i32(loc_1, 20)
		loc_10 = rt_shr_i32(loc_7, 2)
		loc_16 = bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 68), 1)
		loc_11 = 1
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
				loc_7 = rt_load_i32(memory_at_0, loc_1 + 4)
				if loc_2 >= loc_7 then
					break
				end
				loc_8 = rt_load_i32(memory_at_0, loc_1 + 12)
				loc_6 = rt_load_i32(memory_at_0, loc_1)
				while true do
					loc_5 = rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_6)), 9)
					if loc_5 > 23 then
						desired = 2
						break
					end
					while true do
						if bit_and(rt_shl_i32(1, loc_5), 8388637) == 0 then
							while true do
								if loc_5 ~= 1 then
									desired = 2
									break
								end
								loc_2 = rt_add_i32(loc_2, 1)
								rt_store_i32(memory_at_0, loc_1 + 16, loc_2)
								loc_8 = rt_add_i32(loc_8, 1)
								rt_store_i32(memory_at_0, loc_1 + 12, loc_8)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = rt_add_i32(loc_2, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
					if loc_2 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			if loc_11 ~= 0 then
				while true do
					rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_1 + 24))
					rt_store_i64(memory_at_0, loc_1 + 56, rt_load_i64(memory_at_0, loc_1 + 32))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			FUNC_LIST[408](rt_add_i32(loc_4, 52), loc_1)
			rt_store_i32(memory_at_0, loc_3 + 24, rt_load_i32(memory_at_0, loc_4 + 76))
			rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_4 + 68))
			rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_4 + 60))
			rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4 + 52))
			if loc_16 ~= 0 then
				while true do
					loc_11 = 0
					if bit_and(rt_load_i32(memory_at_0, loc_3), 4294967294) == 282 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_3))
		loc_2 = rt_add_i32(loc_3, 24)
		rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_2))
		loc_5 = rt_add_i32(loc_3, 16)
		rt_store_i64(memory_at_0, loc_0 + 16, rt_load_i64(memory_at_0, loc_5))
		loc_7 = rt_add_i32(loc_3, 8)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_7))
		rt_store_i32(memory_at_0, loc_1 + 16, loc_12)
		rt_store_i32(memory_at_0, loc_1 + 12, loc_13)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_14)
		rt_store_i32(memory_at_0, loc_3 + 24, rt_load_i32(memory_at_0, loc_4 + 48))
		rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_4 + 40))
		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_4 + 32))
		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4 + 24))
		rt_store_i64(memory_at_0, loc_1 + 56, rt_load_i64(memory_at_0, loc_4 + 16))
		rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_4 + 8))
		while true do
			while true do
				while true do
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 76)
						loc_7 = rt_load_i32(memory_at_0, loc_1 + 72)
						loc_5 = rt_shr_i32(rt_sub_i32(loc_2, loc_7), 2)
						if loc_5 < loc_10 then
							while true do
								loc_6 = rt_load_i32(memory_at_0, loc_1 + 80)
								if loc_2 < loc_6 then
									while true do
										rt_store_i32(memory_at_0, loc_2, loc_9)
										loc_6 = rt_add_i32(loc_2, 4)
										desired = 4
										break
									end
									if desired then
										break
									end
								end
								loc_3 = rt_add_i32(loc_5, 1)
								if loc_3 >= 1073741824 then
									desired = 2
									break
								end
								loc_8 = rt_sub_i32(loc_6, loc_7)
								loc_6 = rt_shr_i32(loc_8, 1)
								loc_6 = (if loc_8 >= 2147483644 then 1073741823 else (if loc_3 < loc_6 then loc_6 else loc_3))
								if loc_6 ~= 0 then
									while true do
										if loc_6 >= 1073741824 then
											desired = 1
											break
										end
										reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 2))
										break
									end
									if desired then
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										break
									end
								end
								loc_3 = reg_0
								loc_5 = rt_add_i32(loc_3, rt_shl_i32(loc_5, 2))
								rt_store_i32(memory_at_0, loc_5, loc_9)
								loc_3 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_3)
								loc_6 = rt_add_i32(loc_5, 4)
								if loc_2 ~= loc_7 then
									while true do
										while true do
											loc_5 = rt_sub_i32(loc_5, 4)
											loc_2 = rt_sub_i32(loc_2, 4)
											rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_2))
											if loc_2 ~= loc_7 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										break
									end
								end
								rt_store_i32(memory_at_0, loc_1 + 80, loc_3)
								rt_store_i32(memory_at_0, loc_1 + 76, loc_6)
								rt_store_i32(memory_at_0, loc_1 + 72, loc_5)
								if loc_7 == 0 then
									desired = 4
									break
								end
								FUNC_LIST[653](loc_7, loc_8)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_5 <= loc_10 then
							desired = 3
							break
						end
						loc_6 = rt_sub_i32(loc_2, 4)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 76, loc_6)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_4, 80)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_15)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[419] = --[[ Luau::Lexer::readBackslashInString() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_1 = rt_add_i32(loc_2, 1)
		rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_3 <= loc_1 then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_4 = rt_load_i32(memory_at_0, loc_0)
									loc_1 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_4))
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 0, }
										end)()
									end
									temp = br_map[1][loc_1] or 1
									if temp < 2 then
										if temp < 1 then
											break
										else
											desired = 6
											break
										end
									elseif temp > 2 then
										if temp < 6 then
											desired = 4
											break
										else
											desired = 1
											break
										end
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = rt_add_i32(loc_2, 2)
								rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
								if loc_1 >= loc_3 then
									desired = 1
									break
								end
								if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_4)) ~= 10 then
									desired = 1
									break
								end
								loc_1 = rt_add_i32(loc_2, 3)
								rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
								rt_store_i32(memory_at_0, loc_0 + 12, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), 1))
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 == 122 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = rt_add_i32(loc_2, 2)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_add_i32(loc_2, 2)
					rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
					rt_store_i32(memory_at_0, loc_0 + 12, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_add_i32(loc_2, 2)
			rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
			if loc_1 >= loc_3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
			while true do
				loc_2 = rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_4)), 9)
				if loc_2 > 23 then
					desired = 1
					break
				end
				while true do
					if bit_and(rt_shl_i32(1, loc_2), 8388637) == 0 then
						while true do
							if loc_2 ~= 1 then
								desired = 1
								break
							end
							loc_1 = rt_add_i32(loc_1, 1)
							rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
							loc_5 = rt_add_i32(loc_5, 1)
							rt_store_i32(memory_at_0, loc_0 + 12, loc_5)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_1 = rt_add_i32(loc_1, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
				if loc_1 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[420] = --[[ Luau::Lexer::fixupQuotedString(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_8 = 1
		while true do
			loc_1 = rt_load_i32_i8(memory_at_0, loc_0 + 11)
			if (if rt_lt_i32(loc_1, 0) then rt_load_i32(memory_at_0, loc_0 + 4) else loc_1) == 0 then
				break
			end
			reg_0 = FUNC_LIST[722](loc_0, 92, 0)
			if reg_0 == 4294967295 then
				break
			end
			while true do
				loc_1 = rt_load_i32_i8(memory_at_0, loc_0 + 11)
				loc_6 = (if rt_lt_i32(loc_1, 0) then rt_load_i32(memory_at_0, loc_0 + 4) else loc_1)
				if loc_6 == 0 then
					break
				end
				loc_1 = 0
				while true do
					while true do
						while true do
							loc_2 = loc_1
							loc_3 = rt_load_i32(memory_at_0, loc_0)
							if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0))) ~= 92 then
								while true do
									loc_1 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)
									rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, loc_1), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)))
									loc_1 = rt_add_i32(loc_2, 1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_add_i32(loc_2, 1)
							if loc_5 == loc_6 then
								while true do
									reg_0 = 0
									desired = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = rt_add_i32(loc_2, 2)
							loc_8 = 0
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														loc_9 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_5, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)))
														loc_5 = bit_and(loc_9, 255)
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 5, 6, 6, 4, 6, 1, }
															end)()
														end
														temp = br_map[1][rt_sub_i32(loc_5, 117)] or 0
														if temp < 4 then
															if temp < 1 then
																break
															else
																desired = 11
																break
															end
														elseif temp > 4 then
															if temp < 6 then
																desired = 7
																break
															else
																desired = 6
																break
															end
														else
															desired = 8
															break
														end
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if not br_map[2] then
														br_map[2] = (function()
															return { [0] = 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 2, }
														end)()
													end
													temp = br_map[2][loc_5] or 5
													if temp < 5 then
														if temp < 2 then
															desired = 10
															break
														else
															desired = 9
															break
														end
													elseif temp > 5 then
														desired = 1
														break
													else
														desired = 6
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_1 >= loc_6 then
													desired = 4
													break
												end
												loc_3 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)
												while true do
													loc_2 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_3))
													if bit_and((if rt_sub_i32(loc_2, 9) >= 5 then 1 else 0), (if loc_2 ~= 32 then 1 else 0)) ~= 0 then
														desired = 4
														break
													end
													loc_1 = rt_add_i32(loc_1, 1)
													if loc_1 ~= loc_6 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												desired = 2
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)), 10)
											desired = 5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)), 10)
										loc_4 = rt_add_i32(loc_4, 1)
										if loc_1 >= loc_6 then
											desired = 4
											break
										end
										loc_1 = (if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then rt_load_i32(memory_at_0, loc_0) else loc_0))) == 10 then rt_add_i32(loc_2, 3) else loc_1)
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_9 = rt_add_i32(loc_2, 4)
									if loc_6 < loc_9 then
										desired = 1
										break
									end
									loc_5 = rt_load_i32_i8(memory_at_0, loc_0 + 11)
									loc_1 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, (if rt_lt_i32(loc_5, 0) then loc_3 else loc_0)))
									loc_7 = rt_sub_i32(loc_1, 48)
									loc_12 = (if loc_7 < 10 then 1 else 0)
									if loc_12 == 0 then
										while true do
											if rt_sub_i32(bit_or(loc_1, 32), 97) > 5 then
												desired = 1
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_10 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, (if rt_lt_i32(loc_5, 0) then loc_3 else loc_0)) + 3)
									loc_2 = bit_or(loc_10, 32)
									loc_10 = rt_sub_i32(loc_10, 48)
									loc_11 = (if loc_10 < 10 then 1 else 0)
									if bit_and((if loc_11 == 0 then 1 else 0), (if rt_sub_i32(loc_2, 97) > 5 then 1 else 0)) ~= 0 then
										desired = 1
										break
									end
									rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, (if rt_lt_i32(loc_5, 0) then loc_3 else loc_0)), rt_add_i32(rt_shl_i32((if loc_12 ~= 0 then loc_7 else rt_sub_i32(loc_1, 87)), 4), (if loc_11 ~= 0 then loc_10 else rt_add_i32(loc_2, 169))))
									loc_4 = rt_add_i32(loc_4, 1)
									loc_1 = loc_9
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_6 < rt_add_i32(loc_2, 5) then
									desired = 1
									break
								end
								if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0))) ~= 123 then
									desired = 1
									break
								end
								loc_1 = rt_add_i32(loc_2, 3)
								if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0))) == 125 then
									desired = 1
									break
								end
								loc_11 = rt_load_i32_i8(memory_at_0, loc_0 + 11)
								loc_10 = (if rt_lt_i32(loc_11, 0) then loc_3 else loc_0)
								loc_13 = rt_add_i32(loc_2, 19)
								loc_7 = 0
								loc_9 = 0
								while true do
									while true do
										if loc_1 == loc_6 then
											desired = 1
											break
										end
										loc_2 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_10))
										if loc_2 == 125 then
											desired = 7
											break
										end
										loc_5 = bit_or(loc_2, 32)
										loc_2 = rt_sub_i32(loc_2, 48)
										loc_12 = (if loc_2 < 10 then 1 else 0)
										if bit_and((if loc_12 == 0 then 1 else 0), (if rt_sub_i32(loc_5, 97) > 5 then 1 else 0)) ~= 0 then
											desired = 1
											break
										end
										loc_9 = rt_add_i32(rt_shl_i32(loc_9, 4), (if loc_12 ~= 0 then loc_2 else rt_sub_i32(loc_5, 87)))
										loc_1 = rt_add_i32(loc_1, 1)
										loc_7 = rt_add_i32(loc_7, 1)
										if loc_7 ~= 16 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = loc_13
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_1 == loc_6 then
									desired = 1
									break
								end
								if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, (if rt_lt_i32(loc_11, 0) then loc_3 else loc_0))) ~= 125 then
									desired = 1
									break
								end
								reg_0 = FUNC_LIST[421](rt_add_i32(loc_4, (if rt_lt_i32(loc_11, 0) then loc_3 else loc_0)), loc_9)
								loc_2 = reg_0
								if loc_2 == 0 then
									desired = 1
									break
								end
								loc_1 = rt_add_i32(loc_1, 1)
								loc_4 = rt_add_i32(loc_2, loc_4)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = rt_sub_i32(loc_9, 48)
							if loc_7 <= 9 then
								while true do
									while true do
										if loc_1 == loc_6 then
											while true do
												loc_1 = loc_6
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										while true do
											loc_9 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)
											loc_5 = rt_add_i32(loc_1, loc_9)
											if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_5), 48) > 9 then
												break
											end
											loc_7 = rt_sub_i32(rt_add_i32(rt_load_i32_i8(memory_at_0, loc_5), rt_mul_i32(loc_7, 10)), 48)
											loc_1 = rt_add_i32(loc_2, 3)
											if loc_6 == loc_1 then
												break
											end
											loc_5 = rt_add_i32(loc_1, loc_9)
											if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_5), 48) > 9 then
												break
											end
											loc_7 = rt_sub_i32(rt_add_i32(rt_load_i32_i8(memory_at_0, loc_5), rt_mul_i32(loc_7, 10)), 48)
											loc_1 = rt_add_i32(loc_2, 4)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										if loc_7 > 255 then
											desired = 1
											break
										end
										break
									end
									if desired then
										break
									end
									rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)), loc_7)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = 7
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															if not br_map[3] then
																br_map[3] = (function()
																	return { [0] = 7, 0, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 3, 6, 4, 6, 5, }
																end)()
															end
															temp = br_map[3][rt_sub_i32(loc_5, 97)] or 6
															if temp < 4 then
																if temp < 2 then
																	if temp < 1 then
																		break
																	else
																		desired = 12
																		break
																	end
																elseif temp > 2 then
																	desired = 10
																	break
																else
																	desired = 11
																	break
																end
															elseif temp > 4 then
																if temp < 6 then
																	desired = 8
																	break
																elseif temp > 6 then
																	desired = 6
																	break
																else
																	desired = 7
																	break
																end
															else
																desired = 9
																break
															end
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = 8
														desired = 6
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = 12
													desired = 6
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = 10
												desired = 6
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = 13
											desired = 6
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = 9
										desired = 6
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = 11
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = loc_9
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then loc_3 else loc_0)), loc_2)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = rt_add_i32(loc_4, 1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if loc_1 < loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[733](loc_0, loc_4, 0)
			loc_8 = 1
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[421] = --[[ Luau::toUtf8(char*, unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		if loc_1 <= 127 then
			while true do
				rt_store_i32_n8(memory_at_0, loc_0, loc_1)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 <= 2047 then
			while true do
				rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(bit_and(loc_1, 63), 128))
				rt_store_i32_n8(memory_at_0, loc_0, bit_or(rt_shr_u32(loc_1, 6), 192))
				reg_0 = 2
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 <= 65535 then
			while true do
				rt_store_i32_n8(memory_at_0, loc_0 + 2, bit_or(bit_and(loc_1, 63), 128))
				rt_store_i32_n8(memory_at_0, loc_0, bit_or(rt_shr_u32(loc_1, 12), 224))
				rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(bit_and(rt_shr_u32(loc_1, 6), 63), 128))
				reg_0 = 3
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 <= 1114111 then
			while true do
				rt_store_i32_n8(memory_at_0, loc_0 + 3, bit_or(bit_and(loc_1, 63), 128))
				rt_store_i32_n8(memory_at_0, loc_0, bit_or(rt_shr_u32(loc_1, 18), 240))
				rt_store_i32_n8(memory_at_0, loc_0 + 2, bit_or(bit_and(rt_shr_u32(loc_1, 6), 63), 128))
				rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(bit_and(rt_shr_u32(loc_1, 12), 63), 128))
				reg_0 = 4
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[422] = --[[ Luau::Lexer::fixupMultilineString(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_load_i32_i8(memory_at_0, loc_0 + 11)
		reg_1 = loc_1
		loc_1 = (if rt_lt_i32(loc_1, 0) then 1 else 0)
		if (if loc_1 ~= 0 then rt_load_i32(memory_at_0, loc_0 + 4) else reg_1) ~= 0 then
			while true do
				while true do
					loc_2 = (if loc_1 ~= 0 then rt_load_i32(memory_at_0, loc_0) else loc_0)
					loc_3 = rt_load_i32_u8(memory_at_0, loc_2)
					if loc_3 == 13 then
						while true do
							loc_1 = 2
							reg_0 = loc_1
							if rt_load_i32_u8(memory_at_0, loc_2 + 1) == 10 then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					reg_0 = (if loc_3 == 10 then 1 else 0)
					break
				end
				loc_1 = reg_0
				loc_1 = rt_add_i32(loc_1, loc_2)
				while true do
					while true do
						reg_0 = loc_2
						while true do
							while true do
								while true do
									loc_5 = rt_load_i32_u8(memory_at_0, loc_1)
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, }
										end)()
									end
									temp = br_map[1][loc_5] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 3
										break
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_4 = 2
								loc_3 = 10
								reg_1 = loc_3
								if rt_load_i32_u8(memory_at_0, loc_1 + 1) == 10 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_4 = 1
							reg_1 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_3 = reg_1
						rt_store_i32_n8(memory_at_0, reg_0, loc_3)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_1 = rt_add_i32(loc_1, loc_4)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				FUNC_LIST[733](loc_0, rt_sub_i32(loc_2, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then rt_load_i32(memory_at_0, loc_0) else loc_0)), 0)
				break
			end
		end
		break
	end
end
FUNC_LIST[423] = --[[ Luau::Position::operator==(Luau::Position const&) const ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = bit_and((if rt_load_i32(memory_at_0, loc_0 + 4) == rt_load_i32(memory_at_0, loc_1 + 4) then 1 else 0), (if rt_load_i32(memory_at_0, loc_0) == rt_load_i32(memory_at_0, loc_1) then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[424] = --[[ Luau::Location::operator==(Luau::Location const&) const ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 4) ~= rt_load_i32(memory_at_0, loc_1 + 4) then
				break
			end
			if rt_load_i32(memory_at_0, loc_0) ~= rt_load_i32(memory_at_0, loc_1) then
				break
			end
			loc_2 = bit_and((if rt_load_i32(memory_at_0, loc_0 + 12) == rt_load_i32(memory_at_0, loc_1 + 12) then 1 else 0), (if rt_load_i32(memory_at_0, loc_0 + 8) == rt_load_i32(memory_at_0, loc_1 + 8) then 1 else 0))
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[425] = --[[ Luau::ParseError::ParseError(Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		rt_store_i32(memory_at_0, loc_0, 31260)
		rt_store_i64(memory_at_0, loc_0 + 12, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_0 + 4, rt_load_i64(memory_at_0, loc_1))
		loc_1 = rt_add_i32(loc_0, 20)
		if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_2 + 11), 0) then
			while true do
				rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
				rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[716](loc_1, rt_load_i32(memory_at_0, loc_2), rt_load_i32(memory_at_0, loc_2 + 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[426] = --[[ Luau::ParseError::getLocation() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_add_i32(loc_0, 4)
		break
	end
	return reg_0
end
FUNC_LIST[427] = --[[ Luau::ParseError::raise(Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		FUNC_LIST[514](loc_3, loc_1, loc_2)
		reg_0 = FUNC_LIST[578](32)
		reg_0 = FUNC_LIST[425](reg_0, loc_0, loc_3)
		FUNC_LIST[0](reg_0, 31292, 194)
		error("out of code bounds")
	end
end
FUNC_LIST[428] = --[[ Luau::ParseError::~ParseError() ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 31260)
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 31), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 20), bit_and(rt_load_i32(memory_at_0, loc_0 + 28), 2147483647))
				break
			end
		end
		reg_0 = FUNC_LIST[188](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[429] = --[[ Luau::Parser::parse(char const*, unsigned long, Luau::AstNameTable&, Luau::Allocator&, Luau::ParseOptions) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 496)
		GLOBAL_LIST[0].value = loc_6
		reg_0 = FUNC_LIST[430](rt_add_i32(loc_6, 8), loc_1, loc_2, loc_3, loc_4, loc_5)
		loc_5 = reg_0
		reg_0 = FUNC_LIST[431](loc_5)
		loc_3 = reg_0
		if rt_load_i32(memory_at_0, loc_5 + 60) ~= 0 then
			while true do
				FUNC_LIST[432](loc_5, 0, 0)
				break
			end
		end
		loc_7 = rt_load_i32(memory_at_0, loc_5 + 72)
		loc_4 = 0
		if loc_2 ~= 0 then
			while true do
				reg_0 = (if rt_load_i32_u8(memory_at_0, rt_sub_i32(rt_add_i32(loc_1, loc_2), 1)) ~= 10 then 1 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_4
				break
			end
		end
		loc_4 = reg_0
		rt_store_i32(memory_at_0, loc_0, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_4, loc_7))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_5 + 140))
		rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_5 + 144))
		rt_store_i32(memory_at_0, loc_0 + 16, rt_load_i32(memory_at_0, loc_5 + 148))
		rt_store_i32(memory_at_0, loc_5 + 148, 0)
		rt_store_i64(memory_at_0, loc_5 + 140, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 20, rt_load_i32(memory_at_0, loc_5 + 236))
		rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_5 + 240))
		rt_store_i32(memory_at_0, loc_0 + 28, rt_load_i32(memory_at_0, loc_5 + 244))
		rt_store_i32(memory_at_0, loc_5 + 244, 0)
		rt_store_i64(memory_at_0, loc_5 + 236, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 32, rt_load_i32(memory_at_0, loc_5 + 128))
		rt_store_i32(memory_at_0, loc_0 + 36, rt_load_i32(memory_at_0, loc_5 + 132))
		rt_store_i32(memory_at_0, loc_0 + 40, rt_load_i32(memory_at_0, loc_5 + 136))
		rt_store_i32(memory_at_0, loc_5 + 136, 0)
		rt_store_i64(memory_at_0, loc_5 + 128, rt_i64_ZERO)
		reg_0 = FUNC_LIST[433](loc_5)
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 496)
		break
	end
end
FUNC_LIST[430] = --[[ Luau::Parser::Parser(char const*, unsigned long, Luau::AstNameTable&, Luau::Allocator&, Luau::ParseOptions const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_8
		loc_6 = rt_load_i32_u16(memory_at_0, loc_5)
		rt_store_i32_n8(memory_at_0, loc_0 + 36, 0)
		rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
		rt_store_i32_n16(memory_at_0, loc_0, loc_6)
		if rt_load_i32_u8(memory_at_0, loc_5 + 36) == 1 then
			while true do
				reg_0 = FUNC_LIST[189](rt_add_i32(loc_0, 4), rt_add_i32(loc_5, 4))
				rt_store_i32_n8(memory_at_0, loc_0 + 36, 1)
				break
			end
		end
		reg_0 = FUNC_LIST[405](rt_add_i32(loc_0, 40), loc_1, loc_2, loc_3)
		loc_2 = reg_0
		rt_store_i64(memory_at_0, loc_0 + 128, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 124, loc_4)
		rt_store_i64(memory_at_0, loc_0 + 136, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 144, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 156, rt_i64_ZERO)
		rt_store_i32_n8(memory_at_0, loc_0 + 152, 1)
		rt_store_i64(memory_at_0, loc_0 + 164, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 172, 0)
		rt_store_i64(memory_at_0, loc_8 + 8, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_8, rt_i64_ZERO)
		reg_1 = FUNC_LIST[393](rt_add_i32(loc_8, 20), loc_8, 0)
		loc_4 = reg_1
		rt_store_i32(memory_at_0, loc_0 + 176, rt_load_i32(memory_at_0, loc_4))
		rt_store_i64(memory_at_0, loc_0 + 180, rt_load_i64(memory_at_0, loc_4 + 4))
		rt_store_i64(memory_at_0, loc_0 + 212, rt_i64_ZERO)
		loc_11 = rt_add_i32(loc_0, 204)
		rt_store_i64(memory_at_0, loc_11, rt_i64_ZERO)
		loc_1 = rt_add_i32(loc_0, 196)
		rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_0 + 188, rt_i64_ZERO)
		reg_0 = FUNC_LIST[519](rt_add_i32(loc_0, 224), 0, 264)
		loc_12 = reg_0
		reg_1 = FUNC_LIST[646](64)
		loc_4 = reg_1
		rt_store_i32(memory_at_0, loc_0 + 188, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 196, rt_sub_i32(loc_4, 4294967232))
		rt_store_i64(memory_at_0, loc_4, rt_i64_ONE)
		rt_store_i32(memory_at_0, loc_0 + 192, rt_add_i32(loc_4, 8))
		loc_4 = rt_add_i32(loc_0, 248)
		reg_0 = loc_0
		while true do
			if rt_load_i32_u8(memory_at_0, 49104) == 1 then
				while true do
					reg_2 = FUNC_LIST[403](loc_3, 3919)
					rt_store_i32(memory_at_0, loc_0 + 160, reg_2)
					reg_2 = FUNC_LIST[403](loc_3, 3019)
					rt_store_i32(memory_at_0, loc_0 + 164, reg_2)
					reg_1 = FUNC_LIST[403](loc_3, 8316)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_2 = FUNC_LIST[401](loc_3, 3919, 281)
			rt_store_i32(memory_at_0, loc_0 + 160, reg_2)
			reg_2 = FUNC_LIST[401](loc_3, 3019, 281)
			rt_store_i32(memory_at_0, loc_0 + 164, reg_2)
			reg_1 = FUNC_LIST[401](loc_3, 8316, 281)
			break
		end
		loc_1 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 168, loc_1)
		reg_1 = FUNC_LIST[403](loc_3, 3519)
		rt_store_i32(memory_at_0, loc_0 + 172, reg_1)
		rt_store_i32(memory_at_0, loc_8 + 20, 0)
		FUNC_LIST[434](loc_4, 311, rt_add_i32(loc_8, 20))
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 248), 1)
		FUNC_LIST[406](loc_2, 1)
		FUNC_LIST[435](loc_0)
		rt_store_i32_n8(memory_at_0, loc_0 + 152, 0)
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 224)
			loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 232), loc_2)
			if loc_1 > 63 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 228)
			reg_0 = FUNC_LIST[646](64)
			loc_4 = reg_0
			loc_7 = rt_sub_i32(loc_4, 4294967232)
			loc_6 = rt_add_i32(rt_sub_i32(loc_3, loc_2), loc_4)
			loc_4 = loc_6
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_4 = rt_sub_i32(loc_4, 4)
						loc_3 = rt_sub_i32(loc_3, 4)
						rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 232, loc_7)
			rt_store_i32(memory_at_0, loc_0 + 228, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 224, loc_4)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[653](loc_2, loc_1)
			break
		end
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 272)
			loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 280), loc_2)
			if loc_1 > 63 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 276)
			reg_0 = FUNC_LIST[646](64)
			loc_4 = reg_0
			loc_7 = rt_sub_i32(loc_4, 4294967232)
			loc_6 = rt_add_i32(rt_sub_i32(loc_3, loc_2), loc_4)
			loc_4 = loc_6
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_4 = rt_sub_i32(loc_4, 4)
						loc_3 = rt_sub_i32(loc_3, 4)
						rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 280, loc_7)
			rt_store_i32(memory_at_0, loc_0 + 276, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 272, loc_4)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[653](loc_2, loc_1)
			break
		end
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 296)
			loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 304), loc_2)
			if loc_1 > 63 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 300)
			reg_0 = FUNC_LIST[646](64)
			loc_4 = reg_0
			loc_7 = rt_sub_i32(loc_4, 4294967232)
			loc_6 = rt_add_i32(rt_sub_i32(loc_3, loc_2), loc_4)
			loc_4 = loc_6
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_4 = rt_sub_i32(loc_4, 4)
						loc_3 = rt_sub_i32(loc_3, 4)
						rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 304, loc_7)
			rt_store_i32(memory_at_0, loc_0 + 300, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 296, loc_4)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[653](loc_2, loc_1)
			break
		end
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 356)
			loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 364), loc_2)
			if loc_1 > 63 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 360)
			reg_0 = FUNC_LIST[646](64)
			loc_4 = reg_0
			loc_7 = rt_sub_i32(loc_4, 4294967232)
			loc_6 = rt_add_i32(rt_sub_i32(loc_3, loc_2), loc_4)
			loc_4 = loc_6
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_4 = rt_sub_i32(loc_4, 4)
						loc_3 = rt_sub_i32(loc_3, 4)
						rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_3))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 364, loc_7)
			rt_store_i32(memory_at_0, loc_0 + 360, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 356, loc_4)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[653](loc_2, loc_1)
			break
		end
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 344)
			loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 352), loc_2)
			if rt_div_i32(loc_1, 24) > 15 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 348)
			reg_0 = FUNC_LIST[646](384)
			loc_4 = reg_0
			loc_7 = rt_add_i32(loc_4, 384)
			loc_6 = rt_add_i32(rt_sub_i32(loc_3, loc_2), loc_4)
			loc_4 = loc_6
			if loc_2 ~= loc_3 then
				while true do
					while true do
						loc_4 = rt_sub_i32(loc_4, 24)
						loc_3 = rt_sub_i32(loc_3, 24)
						rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
						rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						if loc_2 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 352, loc_7)
			rt_store_i32(memory_at_0, loc_0 + 348, loc_6)
			rt_store_i32(memory_at_0, loc_0 + 344, loc_4)
			if loc_2 == 0 then
				break
			end
			FUNC_LIST[653](loc_2, loc_1)
			break
		end
		while true do
			if rt_load_i32_u8(memory_at_0, 49104) ~= 1 then
				break
			end
			if rt_load_i32_u8(memory_at_0, loc_5 + 36) ~= 1 then
				break
			end
			loc_13 = loc_5
			loc_3 = rt_add_i32(loc_13, 4)
			if loc_11 ~= loc_3 then
				while true do
					loc_14 = rt_load_i32(memory_at_0, loc_5 + 16)
					loc_15 = rt_load_i32(memory_at_0, loc_5 + 12)
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_5 + 8)
						if loc_4 == 0 then
							while true do
								loc_4 = 0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[646](rt_shl_i32(loc_4, 3))
						loc_4 = reg_0
						loc_9 = rt_load_i32(memory_at_0, loc_5 + 8)
						if loc_9 == 0 then
							while true do
								loc_9 = 0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_2 = rt_load_i32(memory_at_0, loc_13 + 4)
						loc_6 = 0
						loc_3 = 0
						if loc_9 >= 4 then
							while true do
								loc_16 = bit_and(loc_9, 4294967292)
								loc_7 = 0
								while true do
									loc_1 = rt_shl_i32(loc_3, 3)
									rt_store_i64(memory_at_0, rt_add_i32(loc_1, loc_4), rt_load_i64(memory_at_0, rt_add_i32(loc_1, loc_2)))
									loc_10 = bit_or(loc_1, 8)
									rt_store_i64(memory_at_0, rt_add_i32(loc_10, loc_4), rt_load_i64(memory_at_0, rt_add_i32(loc_2, loc_10)))
									loc_10 = bit_or(loc_1, 16)
									rt_store_i64(memory_at_0, rt_add_i32(loc_10, loc_4), rt_load_i64(memory_at_0, rt_add_i32(loc_2, loc_10)))
									loc_1 = bit_or(loc_1, 24)
									rt_store_i64(memory_at_0, rt_add_i32(loc_1, loc_4), rt_load_i64(memory_at_0, rt_add_i32(loc_1, loc_2)))
									loc_3 = rt_add_i32(loc_3, 4)
									loc_7 = rt_add_i32(loc_7, 4)
									if loc_16 ~= loc_7 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_17 = bit_and(loc_9, 3)
						if loc_17 == 0 then
							break
						end
						while true do
							loc_1 = rt_shl_i32(loc_3, 3)
							rt_store_i64(memory_at_0, rt_add_i32(loc_1, loc_4), rt_load_i64(memory_at_0, rt_add_i32(loc_1, loc_2)))
							loc_3 = rt_add_i32(loc_3, 1)
							loc_6 = rt_add_i32(loc_6, 1)
							if loc_17 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_11)
					if loc_3 ~= 0 then
						while true do
							FUNC_LIST[652](loc_3)
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 216, loc_14)
					rt_store_i32(memory_at_0, loc_0 + 212, loc_15)
					rt_store_i32(memory_at_0, loc_0 + 208, loc_9)
					rt_store_i32(memory_at_0, loc_0 + 204, loc_4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_add_i32(loc_5, 24) == loc_12 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_5 + 24)
			loc_4 = rt_load_i32(memory_at_0, loc_5 + 28)
			FUNC_LIST[187](loc_12, loc_3, loc_4, rt_shr_i32(rt_sub_i32(loc_4, loc_3), 2))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_8, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[431] = --[[ Luau::Parser::parseBlock() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 228)
		reg_0 = FUNC_LIST[437](loc_0)
		loc_6 = reg_0
		loc_7 = rt_add_i32(loc_0, 224)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 224)
		loc_1 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_3), 2)
		loc_2 = rt_shr_i32(rt_sub_i32(loc_5, loc_4), 2)
		if loc_1 > loc_2 then
			while true do
				loc_3 = rt_add_i32(loc_0, 204)
				while true do
					loc_1 = rt_sub_i32(loc_1, 1)
					loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_7), rt_shl_i32(loc_1, 2)))
					loc_5 = rt_load_i32(memory_at_0, loc_4 + 20)
					reg_0 = FUNC_LIST[8](loc_3, loc_4)
					rt_store_i32(memory_at_0, reg_0, loc_5)
					if loc_1 > loc_2 then
						continue
					end
					break
				end
				if desired then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 224)
				reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_3), 2)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_0
		if loc_1 < loc_2 then
			while true do
				FUNC_LIST[220](loc_7, rt_sub_i32(loc_2, loc_1))
				reg_0 = loc_6
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 > loc_2 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 228, rt_add_i32(rt_shl_i32(loc_2, 2), loc_3))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[432] = --[[ Luau::Parser::expectAndConsumeFail(Luau::Lexeme::Type, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i64(memory_at_0, loc_3 + 48, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_3 + 40, rt_i64_ZERO)
		reg_1 = FUNC_LIST[393](rt_add_i32(loc_3, 56), rt_add_i32(loc_3, 40), loc_1)
		FUNC_LIST[395](rt_add_i32(loc_3, 84), reg_1)
		FUNC_LIST[395](rt_add_i32(loc_3, 56), rt_add_i32(loc_0, 60))
		loc_1 = rt_sub_i32(loc_0, 4294967232)
		loc_4 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 67), 0) then rt_load_i32(memory_at_0, loc_3 + 56) else rt_add_i32(loc_3, 56))
		loc_5 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 95), 0) then rt_load_i32(memory_at_0, loc_3 + 84) else rt_add_i32(loc_3, 84))
		while true do
			if loc_2 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_3 + 24, loc_4)
					rt_store_i32(memory_at_0, loc_3 + 20, loc_2)
					rt_store_i32(memory_at_0, loc_3 + 16, loc_5)
					FUNC_LIST[438](loc_0, loc_1, 2530, rt_add_i32(loc_3, 16))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_3 + 4, loc_4)
			rt_store_i32(memory_at_0, loc_3, loc_5)
			FUNC_LIST[438](loc_0, loc_1, 2610, loc_3)
			break
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 67), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 56), bit_and(rt_load_i32(memory_at_0, loc_3 + 64), 2147483647))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 95), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 84), bit_and(rt_load_i32(memory_at_0, loc_3 + 92), 2147483647))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 96)
		break
	end
end
FUNC_LIST[433] = --[[ Luau::Parser::~Parser() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 487), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 476), bit_and(rt_load_i32(memory_at_0, loc_0 + 484), 2147483647))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 464)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 468, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 472), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 452)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 456, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 460), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 440)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 444, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 448), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 428)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 432, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 436), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 416)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 420, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 424), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 404)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 408, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 412), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 392)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 396, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 400), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 380)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 384, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 388), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 368)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 372, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 376), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 356)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 360, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 364), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 344)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 348, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 352), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 332)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 336, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 340), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 320)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 324, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 328), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 308)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 312, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 316), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 296)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 300, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 304), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 284)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 288, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 292), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 272)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 276, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 280), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 260)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 264, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 268), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 248)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 252, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 256), loc_1))
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 236)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 240)
				if loc_2 ~= loc_1 then
					while true do
						while true do
							loc_1 = rt_sub_i32(loc_1, 32)
							reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1))](loc_1)
							if loc_1 ~= loc_2 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 236)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 240, loc_2)
				FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 244), loc_3))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 224)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 228, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 232), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 204)
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[652](loc_1)
				rt_store_i64(memory_at_0, loc_0 + 204, rt_i64_ZERO)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 188)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 192, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 196), loc_1))
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 140)
		if loc_2 ~= 0 then
			while true do
				loc_3 = loc_2
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 144)
				if loc_2 ~= loc_1 then
					while true do
						while true do
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_1, 1)), 0) then
								while true do
									FUNC_LIST[653](rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12)), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), 2147483647))
									break
								end
							end
							loc_1 = rt_sub_i32(loc_1, 32)
							if loc_1 ~= loc_2 then
								continue
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 140)
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
				end
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 144, loc_2)
				FUNC_LIST[653](loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 148), loc_3))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 128)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 132, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 136), loc_1))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 112)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 116, loc_1)
				FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 120), loc_1))
				break
			end
		end
		while true do
			if rt_load_i32_u8(memory_at_0, loc_0 + 36) ~= 1 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 24)
			if loc_1 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
					FUNC_LIST[653](loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 32), loc_1))
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			if loc_1 == 0 then
				break
			end
			FUNC_LIST[652](loc_1)
			rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_ZERO)
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[434] = --[[ std::__2::vector<unsigned int, std::__2::allocator<unsigned int>>::assign(unsigned long, unsigned int const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_6 = rt_load_i32(memory_at_0, loc_0)
		loc_4 = rt_sub_i32(loc_3, loc_6)
		if loc_1 <= rt_shr_i32(loc_4, 2) then
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 4)
					loc_9 = rt_shr_i32(rt_sub_i32(loc_5, loc_6), 2)
					loc_10 = (if loc_1 > loc_9 then loc_9 else loc_1)
					if loc_10 == 0 then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_2)
					loc_3 = loc_6
					loc_7 = loc_10
					loc_11 = bit_and(loc_7, 7)
					if loc_11 ~= 0 then
						while true do
							while true do
								rt_store_i32(memory_at_0, loc_3, loc_4)
								loc_7 = rt_sub_i32(loc_7, 1)
								loc_3 = rt_add_i32(loc_3, 4)
								loc_8 = rt_add_i32(loc_8, 1)
								if loc_11 ~= loc_8 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_10 < 8 then
						break
					end
					while true do
						rt_store_i32(memory_at_0, loc_3 + 28, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 24, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 20, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 16, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 12, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 8, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 4, loc_4)
						rt_store_i32(memory_at_0, loc_3, loc_4)
						loc_3 = rt_add_i32(loc_3, 32)
						loc_7 = rt_sub_i32(loc_7, 8)
						if loc_7 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				if loc_1 > loc_9 then
					while true do
						loc_3 = rt_add_i32(rt_shl_i32(rt_sub_i32(loc_1, loc_9), 2), loc_5)
						loc_4 = rt_load_i32(memory_at_0, loc_2)
						while true do
							rt_store_i32(memory_at_0, loc_5, loc_4)
							loc_5 = rt_add_i32(loc_5, 4)
							if loc_3 ~= loc_5 then
								continue
							end
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, loc_3)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(rt_shl_i32(loc_1, 2), loc_6))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_6 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, loc_6)
				FUNC_LIST[653](loc_6, loc_4)
				rt_store_i32(memory_at_0, loc_0 + 8, 0)
				rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
				reg_0 = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_0
		while true do
			if loc_1 >= 1073741824 then
				break
			end
			loc_4 = rt_shr_i32(loc_3, 1)
			loc_3 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_1 < loc_4 then loc_4 else loc_1))
			if loc_3 >= 1073741824 then
				break
			end
			loc_3 = rt_shl_i32(loc_3, 2)
			reg_1 = FUNC_LIST[646](loc_3)
			loc_8 = reg_1
			rt_store_i32(memory_at_0, loc_0, loc_8)
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_3, loc_8))
			loc_11 = rt_shl_i32(loc_1, 2)
			loc_6 = bit_and(rt_sub_i32(loc_1, 1), 1073741823)
			loc_4 = rt_load_i32(memory_at_0, loc_2)
			loc_3 = loc_8
			loc_7 = bit_and(loc_1, 7)
			if loc_7 ~= 0 then
				while true do
					while true do
						rt_store_i32(memory_at_0, loc_3, loc_4)
						loc_3 = rt_add_i32(loc_3, 4)
						loc_5 = rt_add_i32(loc_5, 1)
						if loc_7 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = rt_add_i32(loc_8, loc_11)
			if loc_6 >= 7 then
				while true do
					while true do
						rt_store_i32(memory_at_0, loc_3 + 28, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 24, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 20, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 16, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 12, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 8, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 4, loc_4)
						rt_store_i32(memory_at_0, loc_3, loc_4)
						loc_3 = rt_add_i32(loc_3, 32)
						if loc_5 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 4, loc_5)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[44](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[435] = --[[ Luau::Parser::nextLexeme() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		loc_15 = rt_add_i32(loc_0, 140)
		loc_8 = rt_sub_i32(loc_0, 4294967232)
		loc_11 = rt_add_i32(loc_0, 128)
		loc_12 = rt_add_i32(loc_0, 60)
		loc_9 = rt_add_i32(loc_3, 20)
		loc_13 = rt_add_i32(loc_0, 40)
		reg_0 = FUNC_LIST[409](loc_13, 0, 1)
		loc_1 = reg_0
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1), 282)
							if loc_1 > 4 then
								break
							end
							if bit_and(rt_shl_i32(1, loc_1), 19) == 0 then
								break
							end
							loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
							while true do
								while true do
									if rt_load_i32_u8(memory_at_0, loc_0 + 1) == 1 then
										while true do
											loc_2 = rt_add_i32(loc_3, 8)
											loc_16 = loc_8
											loc_14 = rt_add_i32(loc_16, 8)
											rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_14))
											rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_8))
											while true do
												loc_1 = rt_load_i32(memory_at_0, loc_0 + 132)
												loc_7 = rt_load_i32(memory_at_0, loc_0 + 136)
												if loc_1 < loc_7 then
													while true do
														rt_store_i32(memory_at_0, loc_1, loc_4)
														rt_store_i64(memory_at_0, loc_1 + 4, rt_load_i64(memory_at_0, loc_3))
														rt_store_i64(memory_at_0, loc_1 + 12, rt_load_i64(memory_at_0, loc_3 + 8))
														loc_4 = rt_add_i32(loc_1, 20)
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_5 = rt_load_i32(memory_at_0, loc_11)
												loc_17 = rt_div_i32(rt_sub_i32(loc_1, loc_5), 20)
												loc_2 = rt_add_i32(loc_17, 1)
												if loc_2 >= 214748365 then
													desired = 3
													break
												end
												loc_6 = rt_div_i32(rt_sub_i32(loc_7, loc_5), 20)
												loc_10 = rt_shl_i32(loc_6, 1)
												loc_6 = (if loc_6 >= 107374182 then 214748364 else (if loc_2 < loc_10 then loc_10 else loc_2))
												if loc_6 ~= 0 then
													while true do
														if loc_6 >= 214748365 then
															desired = 2
															break
														end
														reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 20))
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = 0
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_10 = reg_0
												loc_2 = rt_add_i32(loc_10, rt_mul_i32(loc_17, 20))
												rt_store_i32(memory_at_0, loc_2, loc_4)
												rt_store_i64(memory_at_0, loc_2 + 4, rt_load_i64(memory_at_0, loc_8))
												rt_store_i64(memory_at_0, loc_2 + 12, rt_load_i64(memory_at_0, loc_16 + 8))
												loc_6 = rt_add_i32(rt_mul_i32(loc_6, 20), loc_10)
												loc_4 = rt_add_i32(loc_2, 20)
												if loc_1 ~= loc_5 then
													while true do
														while true do
															loc_2 = rt_sub_i32(loc_2, 20)
															loc_1 = rt_sub_i32(loc_1, 20)
															rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
															rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
															rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
															if loc_1 ~= loc_5 then
																continue
															end
															break
														end
														if desired then
															break
														end
														loc_7 = rt_load_i32(memory_at_0, loc_0 + 136)
														reg_0 = rt_load_i32(memory_at_0, loc_0 + 128)
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = loc_5
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_5 = reg_0
												rt_store_i32(memory_at_0, loc_0 + 136, loc_6)
												rt_store_i32(memory_at_0, loc_0 + 132, loc_4)
												rt_store_i32(memory_at_0, loc_0 + 128, loc_2)
												if loc_5 == 0 then
													break
												end
												FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
												break
											end
											if desired then
												break
											end
											rt_store_i32(memory_at_0, loc_0 + 132, loc_4)
											reg_0 = rt_load_i32(memory_at_0, loc_0 + 60)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_4 = reg_0
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 0, 1, 1, 1, 2, }
										end)()
									end
									temp = br_map[1][rt_sub_i32(loc_4, 282)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 5
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[394](loc_12)
								if reg_0 == 0 then
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 84)
								if rt_load_i32_u8(memory_at_0, loc_7) ~= 33 then
									break
								end
								loc_6 = 0
								while true do
									reg_0 = FUNC_LIST[394](loc_12)
									loc_1 = reg_0
									if loc_1 == 0 then
										break
									end
									loc_5 = rt_sub_i32(loc_7, 1)
									while true do
										while true do
											loc_2 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_5))
											if rt_sub_i32(loc_2, 9) < 5 then
												break
											end
											if loc_2 == 32 then
												break
											end
											loc_6 = loc_1
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										loc_1 = rt_sub_i32(loc_1, 1)
										if loc_1 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_0 + 152))
								rt_store_i64(memory_at_0, loc_3 + 12, rt_load_i64(memory_at_0, loc_8 + 8))
								rt_store_i64(memory_at_0, loc_3 + 4, rt_load_i64(memory_at_0, loc_8))
								loc_4 = rt_sub_i32(loc_6, 1)
								if loc_4 >= 2147483640 then
									desired = 1
									break
								end
								while true do
									while true do
										if loc_4 >= 11 then
											while true do
												loc_2 = rt_add_i32(bit_or(loc_4, 7), 1)
												reg_0 = FUNC_LIST[646](loc_2)
												loc_1 = reg_0
												rt_store_i32(memory_at_0, loc_3 + 28, bit_or(loc_2, 2147483648))
												rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
												rt_store_i32(memory_at_0, loc_3 + 24, loc_4)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										rt_store_i32_n8(memory_at_0, loc_3 + 31, loc_4)
										loc_1 = loc_9
										if loc_6 == 1 then
											desired = 7
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = rt_add_i32(loc_7, 1)
									loc_14 = rt_sub_i32(loc_6, 2)
									loc_5 = 0
									loc_4 = bit_and(loc_4, 7)
									if loc_4 ~= 0 then
										while true do
											while true do
												rt_store_i32_n8(memory_at_0, loc_1, rt_load_i32_u8(memory_at_0, loc_2))
												loc_1 = rt_add_i32(loc_1, 1)
												loc_2 = rt_add_i32(loc_2, 1)
												loc_5 = rt_add_i32(loc_5, 1)
												if loc_4 ~= loc_5 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_14 < 7 then
										break
									end
									loc_5 = rt_add_i32(loc_6, loc_7)
									while true do
										rt_store_i32_n8(memory_at_0, loc_1, rt_load_i32_u8(memory_at_0, loc_2))
										rt_store_i32_n8(memory_at_0, loc_1 + 1, rt_load_i32_u8(memory_at_0, loc_2 + 1))
										rt_store_i32_n8(memory_at_0, loc_1 + 2, rt_load_i32_u8(memory_at_0, loc_2 + 2))
										rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_2 + 3))
										rt_store_i32_n8(memory_at_0, loc_1 + 4, rt_load_i32_u8(memory_at_0, loc_2 + 4))
										rt_store_i32_n8(memory_at_0, loc_1 + 5, rt_load_i32_u8(memory_at_0, loc_2 + 5))
										rt_store_i32_n8(memory_at_0, loc_1 + 6, rt_load_i32_u8(memory_at_0, loc_2 + 6))
										rt_store_i32_n8(memory_at_0, loc_1 + 7, rt_load_i32_u8(memory_at_0, loc_2 + 7))
										loc_1 = rt_add_i32(loc_1, 8)
										loc_2 = rt_add_i32(loc_2, 8)
										if loc_5 ~= loc_2 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32_n8(memory_at_0, loc_1, 0)
								loc_1 = rt_load_i32(memory_at_0, loc_0 + 144)
								if loc_1 < rt_load_i32(memory_at_0, loc_0 + 148) then
									while true do
										rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
										rt_store_i32(memory_at_0, loc_1 + 16, rt_load_i32(memory_at_0, loc_3 + 16))
										rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
										rt_store_i64(memory_at_0, loc_1 + 20, rt_load_i64(memory_at_0, loc_9))
										rt_store_i32(memory_at_0, loc_1 + 28, rt_load_i32(memory_at_0, loc_9 + 8))
										rt_store_i32(memory_at_0, loc_0 + 144, rt_add_i32(loc_1, 32))
										reg_0 = FUNC_LIST[409](loc_13, 0, 0)
										loc_1 = reg_0
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[436](loc_15, loc_3)
								loc_1 = reg_0
								loc_2 = rt_load_i32_i8(memory_at_0, loc_3 + 31)
								rt_store_i32(memory_at_0, loc_0 + 144, loc_1)
								if rt_ge_i32(loc_2, 0) then
									break
								end
								FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 20), bit_and(rt_load_i32(memory_at_0, loc_3 + 28), 2147483647))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[409](loc_13, 0, 0)
							loc_1 = reg_0
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_3, 32)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[44](loc_11)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[197]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[276](loc_9)
		error("out of code bounds")
	end
end
FUNC_LIST[436] = --[[ Luau::HotComment* std::__2::vector<Luau::HotComment, std::__2::allocator<Luau::HotComment>>::__push_back_slow_path<Luau::HotComment>(Luau::HotComment&&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0)
			loc_4 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2), 5)
			loc_3 = rt_add_i32(loc_4, 1)
			if loc_3 < 134217728 then
				while true do
					loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_2)
					loc_6 = rt_shr_i32(loc_2, 4)
					loc_3 = (if loc_2 >= 2147483616 then 134217727 else (if loc_3 < loc_6 then loc_6 else loc_3))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 134217728 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_3, 5))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					loc_5 = reg_0
					loc_2 = rt_add_i32(loc_5, rt_shl_i32(loc_4, 5))
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_4 = rt_add_i32(loc_1, 28)
					rt_store_i32(memory_at_0, loc_2 + 28, rt_load_i32(memory_at_0, loc_4))
					rt_store_i64(memory_at_0, loc_2 + 20, rt_load_i64(memory_at_0, loc_1 + 20))
					rt_store_i64(memory_at_0, loc_1 + 20, rt_i64_ZERO)
					rt_store_i32(memory_at_0, loc_1 + 28, 0)
					loc_8 = rt_add_i32(rt_shl_i32(loc_3, 5), loc_5)
					loc_7 = rt_add_i32(loc_2, 32)
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						if loc_1 == loc_4 then
							while true do
								loc_3 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_3 = rt_sub_i32(loc_2, 32)
							loc_5 = rt_sub_i32(loc_1, 32)
							rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
							rt_store_i32(memory_at_0, loc_3 + 16, rt_load_i32(memory_at_0, loc_5 + 16))
							rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
							loc_2 = rt_sub_i32(loc_2, 12)
							loc_1 = rt_sub_i32(loc_1, 12)
							loc_9 = loc_1
							loc_6 = rt_add_i32(loc_9, 8)
							rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_6))
							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
							rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_9 + 8, 0)
							loc_2 = loc_3
							loc_1 = loc_5
							if loc_4 ~= loc_1 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_4 = rt_load_i32(memory_at_0, loc_0)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_7)
					rt_store_i32(memory_at_0, loc_0, loc_3)
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_8)
					if loc_1 ~= loc_4 then
						while true do
							while true do
								if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_sub_i32(loc_1, 1)), 0) then
									while true do
										FUNC_LIST[653](rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 12)), bit_and(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), 2147483647))
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_1 = rt_sub_i32(loc_1, 32)
								if loc_1 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					if loc_4 ~= 0 then
						while true do
							FUNC_LIST[653](loc_4, rt_sub_i32(loc_5, loc_4))
							break
						end
						if desired then
							break
						end
					end
					reg_0 = loc_7
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[437] = --[[ Luau::Parser::parseBlockNoScope() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 36, rt_add_i32(loc_0, 272))
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 272)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 276)
		rt_store_i32(memory_at_0, loc_1 + 44, 0)
		rt_store_i32(memory_at_0, loc_1 + 40, rt_shr_i32(rt_sub_i32(loc_3, loc_2), 2))
		loc_11 = rt_load_i64(memory_at_0, loc_0 + 96)
		while true do
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
					loc_3 = rt_sub_i32(loc_2, 293)
					if (if bit_and(rt_shl_i32(1, loc_3), 65543) ~= 0 then (if loc_3 <= 16 then 1 else 0) else 0) ~= 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 156)
					loc_2 = rt_add_i32(loc_3, 1)
					rt_store_i32(memory_at_0, loc_0 + 156, loc_2)
					if rt_load_i32(memory_at_0, 49008) < loc_2 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[439](loc_0)
					rt_store_i32(memory_at_0, loc_1 + 16, reg_1)
					rt_store_i32(memory_at_0, loc_0 + 156, loc_3)
					if rt_load_i32(memory_at_0, loc_0 + 60) == 59 then
						while true do
							FUNC_LIST[435](loc_0)
							rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 16) + 24, 1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[440](rt_add_i32(loc_1, 36), rt_add_i32(loc_1, 16))
					loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 16) + 4)
					if loc_2 == rt_load_i32(memory_at_0, 48748) then
						break
					end
					if rt_load_i32(memory_at_0, 48756) == loc_2 then
						break
					end
					if rt_load_i32(memory_at_0, 48764) ~= loc_2 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_1 + 16, loc_11)
			rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_0 + 64))
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 124)
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 44)
				if loc_4 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 36))
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 40)
				reg_0 = FUNC_LIST[392](loc_6, rt_shl_i32(loc_4, 2))
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 12, loc_4)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
				loc_7 = bit_and(loc_4, 3)
				loc_3 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_0)
				loc_0 = 0
				if loc_4 >= 4 then
					while true do
						loc_10 = bit_and(loc_4, 4294967292)
						while true do
							loc_4 = rt_shl_i32(loc_0, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
							loc_5 = bit_or(loc_4, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_5)))
							loc_5 = bit_or(loc_4, 8)
							rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_5)))
							loc_4 = bit_or(loc_4, 12)
							rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
							loc_0 = rt_add_i32(loc_0, 4)
							loc_9 = rt_add_i32(loc_9, 4)
							if loc_10 ~= loc_9 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_7 == 0 then
					break
				end
				while true do
					loc_4 = rt_shl_i32(loc_0, 2)
					rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
					loc_0 = rt_add_i32(loc_0, 1)
					loc_8 = rt_add_i32(loc_8, 1)
					if loc_7 ~= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[392](loc_6, 40)
			reg_0 = FUNC_LIST[320](reg_0, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 8), 1)
			loc_2 = reg_0
			loc_0 = rt_load_i32(memory_at_0, loc_1 + 36)
			loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 40), 2))
			if loc_3 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
				while true do
					rt_store_i32(memory_at_0, loc_0 + 4, loc_3)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_1, 48)
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_1, 3557)
		FUNC_LIST[427](rt_sub_i32(loc_0, 4294967232), 4634, loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[438] = --[[ Luau::Parser::report(Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 12, loc_3)
		FUNC_LIST[482](loc_0, loc_1, loc_2, loc_3)
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[439] = --[[ Luau::Parser::parseStat() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local loc_7 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_2
		loc_1 = rt_add_i32(loc_0, 60)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 9, 10, 10, 10, 10, 10, 10, 8, 2, 10, 10, 10, 10, 3, 5, 0, 10, 6, 10, 10, 10, 4, 7, 10, 10, 10, 1, }
															end)()
														end
														temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 60), 284)] or 10
														if temp < 5 then
															if temp < 2 then
																if temp < 1 then
																	break
																else
																	desired = 11
																	break
																end
															elseif temp > 2 then
																if temp < 4 then
																	desired = 9
																	break
																else
																	desired = 8
																	break
																end
															else
																desired = 10
																break
															end
														elseif temp > 5 then
															if temp < 8 then
																if temp < 7 then
																	desired = 6
																	break
																else
																	desired = 5
																	break
																end
															elseif temp > 8 then
																if temp < 10 then
																	desired = 3
																	break
																else
																	desired = 2
																	break
																end
															else
																desired = 4
																break
															end
														else
															desired = 7
															break
														end
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = FUNC_LIST[441](loc_0)
													loc_1 = reg_0
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[442](loc_0)
												loc_1 = reg_0
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_6 = rt_load_i64(memory_at_0, loc_0 + 64)
											FUNC_LIST[435](loc_0)
											reg_0 = FUNC_LIST[431](loc_0)
											loc_1 = reg_0
											rt_store_i64(memory_at_0, loc_1 + 8, loc_6)
											rt_store_i64(memory_at_0, loc_2 + 68, loc_6)
											rt_store_i32(memory_at_0, loc_2 + 64, 292)
											reg_1 = FUNC_LIST[443](loc_0, 295, rt_sub_i32(loc_2, 4294967232))
											rt_store_i32_n8(memory_at_0, loc_1 + 36, reg_1)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[444](loc_0)
										loc_1 = reg_0
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[445](loc_0)
									loc_1 = reg_0
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
								loc_6 = rt_load_i64(memory_at_0, loc_0 + 64)
								loc_7 = rt_load_i64(memory_at_0, loc_0 + 72)
								rt_store_i32(memory_at_0, loc_2 + 88, rt_load_i32(memory_at_0, loc_1 + 24))
								rt_store_i64(memory_at_0, loc_2 + 80, rt_load_i64(memory_at_0, loc_1 + 16))
								rt_store_i64(memory_at_0, loc_2 + 72, rt_load_i64(memory_at_0, loc_1 + 8))
								rt_store_i64(memory_at_0, loc_2 + 64, rt_load_i64(memory_at_0, loc_1))
								FUNC_LIST[435](loc_0)
								rt_store_i64(memory_at_0, loc_2 + 48, loc_7)
								rt_store_i64(memory_at_0, loc_2 + 8, loc_7)
								rt_store_i32_n8(memory_at_0, loc_2 + 63, 0)
								rt_store_i64(memory_at_0, loc_2 + 40, loc_6)
								rt_store_i64(memory_at_0, loc_2, loc_6)
								rt_store_i32(memory_at_0, loc_2 + 56, 0)
								reg_0 = FUNC_LIST[446](loc_0, loc_2, rt_add_i32(loc_2, 63), rt_add_i32(loc_2, 56))
								loc_3 = reg_0
								loc_1 = rt_load_i32(memory_at_0, loc_0 + 248)
								rt_store_i32(memory_at_0, loc_1 + 1180, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 1180), 1))
								FUNC_LIST[447](rt_add_i32(loc_2, 24), loc_0, rt_load_i32_u8(memory_at_0, loc_2 + 63), rt_sub_i32(loc_2, 4294967232), rt_add_i32(loc_2, 56), 0, rt_add_i32(loc_2, 16))
								loc_1 = rt_load_i32(memory_at_0, loc_2 + 24)
								loc_4 = rt_load_i32(memory_at_0, loc_0 + 248)
								rt_store_i32(memory_at_0, loc_4 + 1180, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 1180), 1))
								loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
								rt_store_i64(memory_at_0, loc_2 + 24, loc_6)
								rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1 + 16))
								reg_0 = FUNC_LIST[392](loc_0, 36)
								reg_0 = FUNC_LIST[346](reg_0, rt_add_i32(loc_2, 24), loc_3, loc_1)
								loc_1 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i64(memory_at_0, loc_2 + 64, rt_i64_ZERO)
							reg_0 = FUNC_LIST[448](loc_0, rt_sub_i32(loc_2, 4294967232))
							loc_1 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[449](loc_0)
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[450](loc_0)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[451](loc_0)
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_2 + 72, rt_load_i64(memory_at_0, loc_0 + 72))
			rt_store_i64(memory_at_0, loc_2 + 64, rt_load_i64(memory_at_0, loc_0 + 64))
			reg_0 = FUNC_LIST[452](loc_0, 1)
			loc_3 = reg_0
			if rt_load_i32(memory_at_0, loc_3 + 4) == rt_load_i32(memory_at_0, 48636) then
				while true do
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 32)
					reg_0 = FUNC_LIST[334](reg_0, rt_add_i32(loc_3, 8), loc_3)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_5 = rt_load_i32(memory_at_0, loc_1)
													if not br_map[2] then
														br_map[2] = (function()
															return { [0] = 8, 1, 2, 3, 4, 5, 6, 7, }
														end)()
													end
													temp = br_map[2][rt_sub_i32(loc_5, 270)] or 0
													if temp < 4 then
														if temp < 2 then
															if temp < 1 then
																break
															else
																desired = 10
																break
															end
														elseif temp > 2 then
															desired = 8
															break
														else
															desired = 9
															break
														end
													elseif temp > 4 then
														if temp < 7 then
															if temp < 6 then
																desired = 6
																break
															else
																desired = 5
																break
															end
														elseif temp > 7 then
															desired = 3
															break
														else
															desired = 4
															break
														end
													else
														desired = 7
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												while true do
													if not br_map[3] then
														br_map[3] = (function()
															return { [0] = 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, }
														end)()
													end
													temp = br_map[3][rt_sub_i32(loc_5, 44)] or 9
													if temp < 9 then
														break
													else
														desired = 2
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[453](loc_0, loc_3)
												loc_1 = reg_0
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = FUNC_LIST[454](loc_0, loc_3, 1)
											loc_1 = reg_0
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[454](loc_0, loc_3, 2)
										loc_1 = reg_0
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[454](loc_0, loc_3, 3)
									loc_1 = reg_0
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[454](loc_0, loc_3, 4)
								loc_1 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[454](loc_0, loc_3, 5)
							loc_1 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[454](loc_0, loc_3, 6)
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = 7
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[454](loc_0, loc_3, loc_4)
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				reg_0 = FUNC_LIST[387](loc_3)
				loc_4 = reg_0
				if loc_4 == 0 then
					break
				end
				reg_0 = FUNC_LIST[584](loc_4, 4172)
				if reg_0 == 0 then
					while true do
						reg_0 = FUNC_LIST[455](loc_0, rt_add_i32(loc_3, 8), 0)
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					reg_0 = FUNC_LIST[584](loc_4, 1400)
					if reg_0 ~= 0 then
						break
					end
					if rt_load_i32(memory_at_0, loc_1) ~= 281 then
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 84)
					if loc_1 == 0 then
						break
					end
					reg_0 = FUNC_LIST[584](loc_1, 4172)
					if reg_0 ~= 0 then
						break
					end
					FUNC_LIST[435](loc_0)
					reg_0 = FUNC_LIST[455](loc_0, rt_add_i32(loc_3, 8), 1)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[584](loc_4, 3954)
				if reg_0 == 0 then
					while true do
						reg_0 = FUNC_LIST[456](loc_0, rt_add_i32(loc_3, 8))
						loc_1 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_load_i32_u8(memory_at_0, loc_0) ~= 1 then
					break
				end
				reg_0 = FUNC_LIST[584](loc_4, 4093)
				if reg_0 ~= 0 then
					break
				end
				rt_store_i64(memory_at_0, loc_2 + 40, rt_i64_ZERO)
				reg_0 = FUNC_LIST[457](loc_0, rt_add_i32(loc_3, 8), rt_add_i32(loc_2, 40))
				loc_1 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[424](rt_sub_i32(loc_2, 4294967232), rt_sub_i32(loc_0, 4294967232))
			if reg_0 ~= 0 then
				while true do
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
			loc_1 = reg_0
			rt_store_i32(memory_at_0, loc_2 + 44, 1)
			rt_store_i32(memory_at_0, loc_2 + 40, loc_1)
			rt_store_i32(memory_at_0, loc_1, loc_3)
			rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
			reg_0 = FUNC_LIST[458](loc_0, rt_add_i32(loc_3, 8), rt_add_i32(loc_2, 40), rt_add_i32(loc_2, 24), 3452, 0)
			loc_1 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 96)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[440] = --[[ Luau::TempVector<Luau::AstStat*>::push_back(Luau::AstStat* const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0)
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 8)
					if loc_4 < loc_7 then
						while true do
							rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_1))
							loc_1 = rt_add_i32(loc_4, 4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					loc_9 = rt_shr_i32(rt_sub_i32(loc_4, loc_3), 2)
					loc_5 = rt_add_i32(loc_9, 1)
					if loc_5 >= 1073741824 then
						desired = 2
						break
					end
					loc_6 = rt_sub_i32(loc_7, loc_3)
					loc_8 = rt_shr_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 2147483644 then 1073741823 else (if loc_5 < loc_8 then loc_8 else loc_5))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_5 = rt_add_i32(loc_8, rt_shl_i32(loc_9, 2))
					rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_1))
					loc_6 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_8)
					loc_1 = rt_add_i32(loc_5, 4)
					if loc_3 ~= loc_4 then
						while true do
							while true do
								loc_5 = rt_sub_i32(loc_5, 4)
								loc_4 = rt_sub_i32(loc_4, 4)
								rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_4))
								if loc_3 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_2 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_2)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_2, loc_5)
					if loc_3 == 0 then
						break
					end
					FUNC_LIST[653](loc_3, rt_sub_i32(loc_7, loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_2)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[441] = --[[ Luau::Parser::parseIf() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_1
		loc_9 = rt_load_i64(memory_at_0, loc_0 + 64)
		FUNC_LIST[435](loc_0)
		reg_0 = FUNC_LIST[459](loc_0, 0)
		loc_6 = reg_0
		loc_7 = rt_load_i64(memory_at_0, loc_0 + 72)
		loc_8 = rt_load_i64(memory_at_0, loc_0 + 64)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
		rt_store_i32_n8(memory_at_0, loc_1 + 40, 0)
		rt_store_i32_n8(memory_at_0, loc_1 + 24, 0)
		while true do
			if loc_3 ~= 307 then
				while true do
					FUNC_LIST[432](loc_0, 307, 1530)
					FUNC_LIST[418](rt_add_i32(loc_1, 48), rt_add_i32(loc_0, 40))
					if rt_load_i32(memory_at_0, loc_1 + 48) ~= 307 then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_0)
					FUNC_LIST[435](loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_0)
			rt_store_i32_n8(memory_at_0, loc_1 + 40, 1)
			rt_store_i64(memory_at_0, loc_1 + 32, loc_7)
			rt_store_i64(memory_at_0, loc_1 + 24, loc_8)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = rt_sub_i32(loc_0, 4294967232)
		reg_0 = FUNC_LIST[431](loc_0)
		loc_5 = reg_0
		rt_store_i32_n8(memory_at_0, loc_1 + 64, 0)
		rt_store_i32_n8(memory_at_0, loc_1 + 48, 0)
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 60), 293)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32_n8(memory_at_0, loc_5 + 36, 1)
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 156)
						loc_2 = rt_add_i32(loc_3, 1)
						rt_store_i32(memory_at_0, loc_0 + 156, loc_2)
						if rt_load_i32(memory_at_0, 49008) < loc_2 then
							desired = 1
							break
						end
						rt_store_i64(memory_at_0, loc_1 + 56, rt_load_i64(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_4))
						rt_store_i32_n8(memory_at_0, loc_1 + 64, 1)
						reg_0 = FUNC_LIST[441](loc_0)
						loc_2 = reg_0
						loc_7 = rt_load_i64(memory_at_0, loc_2 + 16)
						rt_store_i32(memory_at_0, loc_0 + 156, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32_n8(memory_at_0, loc_5 + 36, 1)
					rt_store_i64(memory_at_0, loc_1 + 56, rt_load_i64(memory_at_0, loc_4 + 8))
					rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_4))
					rt_store_i32_n8(memory_at_0, loc_1 + 64, 1)
					loc_8 = rt_load_i64(memory_at_0, loc_0 + 64)
					loc_7 = rt_load_i64(memory_at_0, loc_0 + 72)
					FUNC_LIST[435](loc_0)
					reg_0 = FUNC_LIST[431](loc_0)
					loc_2 = reg_0
					rt_store_i64(memory_at_0, loc_2 + 8, loc_7)
					loc_3 = 293
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = rt_load_i64(memory_at_0, loc_0 + 72)
				rt_store_i64(memory_at_0, loc_1 + 12, loc_8)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
				reg_0 = FUNC_LIST[443](loc_0, 295, rt_add_i32(loc_1, 8))
				loc_3 = reg_0
				if loc_2 ~= 0 then
					while true do
						if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48716) then
							desired = 2
							break
						end
						rt_store_i32_n8(memory_at_0, loc_2 + 36, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32_n8(memory_at_0, loc_5 + 36, loc_3)
				loc_2 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
			rt_store_i64(memory_at_0, loc_1 + 16, loc_7)
			rt_store_i64(memory_at_0, loc_1 + 8, loc_9)
			reg_0 = FUNC_LIST[392](loc_0, 80)
			reg_0 = FUNC_LIST[322](reg_0, rt_add_i32(loc_1, 8), loc_6, loc_5, loc_2, rt_add_i32(loc_1, 24), rt_add_i32(loc_1, 48))
			loc_0 = reg_0
			GLOBAL_LIST[0].value = rt_add_i32(loc_1, 80)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_1, 3924)
		FUNC_LIST[427](loc_4, 4634, loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[442] = --[[ Luau::Parser::parseWhile() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local loc_7 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_1
		loc_6 = rt_load_i64(memory_at_0, loc_0 + 64)
		FUNC_LIST[435](loc_0)
		reg_0 = FUNC_LIST[459](loc_0, 0)
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 24, rt_load_i32(memory_at_0, loc_0 + 84))
		rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_0 + 76))
		rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_0 + 68))
		rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_0 + 60))
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
			if loc_4 ~= 292 then
				while true do
					FUNC_LIST[432](loc_0, 292, 3052)
					FUNC_LIST[418](rt_add_i32(loc_1, 32), rt_add_i32(loc_0, 40))
					if rt_load_i32(memory_at_0, loc_1 + 32) ~= 292 then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_0)
			break
		end
		loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
		rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_load_i32(memory_at_0, loc_2), 1))
		reg_0 = FUNC_LIST[431](loc_0)
		loc_2 = reg_0
		loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
		rt_store_i32(memory_at_0, loc_5, rt_sub_i32(rt_load_i32(memory_at_0, loc_5), 1))
		loc_7 = rt_load_i64(memory_at_0, loc_0 + 72)
		rt_store_i32(memory_at_0, loc_1 + 32, rt_load_i32(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_1 + 36, rt_load_i64(memory_at_0, loc_1 + 4))
		reg_1 = FUNC_LIST[443](loc_0, 295, rt_add_i32(loc_1, 32))
		rt_store_i32_n8(memory_at_0, loc_2 + 36, reg_1)
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
		rt_store_i64(memory_at_0, loc_1 + 40, loc_7)
		rt_store_i64(memory_at_0, loc_1 + 32, loc_6)
		reg_0 = FUNC_LIST[392](loc_0, 56)
		reg_0 = FUNC_LIST[324](reg_0, rt_add_i32(loc_1, 32), loc_3, loc_2, (if loc_4 == 292 then 1 else 0), bit_or(loc_1, 4))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_sub_i32(loc_1, 4294967232)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[443] = --[[ Luau::Parser::expectMatchEndAndConsume(Luau::Lexeme::Type, Luau::Parser::MatchLexeme const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 60) ~= loc_1 then
					while true do
						FUNC_LIST[485](loc_0, loc_1, loc_2)
						FUNC_LIST[418](rt_add_i32(loc_3, 4), rt_add_i32(loc_0, 40))
						loc_2 = 0
						reg_0 = loc_2
						if loc_1 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
							desired = 1
							break
						end
						FUNC_LIST[435](loc_0)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_load_i32(memory_at_0, loc_2 + 4)
				if loc_1 == rt_load_i32(memory_at_0, loc_0 + 64) then
					break
				end
				if rt_load_i32(memory_at_0, loc_0 + 68) == rt_load_i32(memory_at_0, loc_2 + 8) then
					break
				end
				if loc_1 <= rt_load_i32(memory_at_0, loc_0 + 180) then
					break
				end
				rt_store_i64(memory_at_0, loc_0 + 176, rt_load_i64(memory_at_0, loc_2))
				rt_store_i32(memory_at_0, loc_0 + 184, rt_load_i32(memory_at_0, loc_2 + 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[435](loc_0)
			reg_0 = 1
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 32)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[444] = --[[ Luau::Parser::parseFor() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_1
		loc_16 = rt_load_i64(memory_at_0, loc_0 + 64)
		FUNC_LIST[435](loc_0)
		FUNC_LIST[460](rt_add_i32(loc_1, 104), loc_0)
		loc_2 = rt_add_i32(loc_0, 60)
		loc_4 = rt_add_i32(loc_0, 40)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 60) == 61 then
				while true do
					FUNC_LIST[435](loc_0)
					reg_0 = FUNC_LIST[459](loc_0, 0)
					loc_11 = reg_0
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) ~= 44 then
							while true do
								FUNC_LIST[432](loc_0, 44, 4874)
								FUNC_LIST[418](rt_add_i32(loc_1, 128), loc_4)
								if rt_load_i32(memory_at_0, loc_1 + 128) ~= 44 then
									desired = 3
									break
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						break
					end
					reg_0 = FUNC_LIST[459](loc_0, 0)
					loc_12 = reg_0
					loc_8 = rt_load_i32(memory_at_0, loc_0 + 60)
					if loc_8 == 44 then
						while true do
							FUNC_LIST[435](loc_0)
							reg_0 = FUNC_LIST[459](loc_0, 0)
							loc_9 = reg_0
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 60)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_8
							break
						end
						if desired then
							break
						end
					end
					loc_8 = reg_0
					rt_store_i32(memory_at_0, loc_1 + 96, rt_load_i32(memory_at_0, loc_2 + 24))
					rt_store_i64(memory_at_0, loc_1 + 88, rt_load_i64(memory_at_0, loc_2 + 16))
					rt_store_i64(memory_at_0, loc_1 + 80, rt_load_i64(memory_at_0, loc_2 + 8))
					rt_store_i64(memory_at_0, loc_1 + 72, rt_load_i64(memory_at_0, loc_2))
					while true do
						if loc_8 ~= 292 then
							while true do
								FUNC_LIST[432](loc_0, 292, 3043)
								FUNC_LIST[418](rt_add_i32(loc_1, 128), loc_4)
								if rt_load_i32(memory_at_0, loc_1 + 128) ~= 292 then
									desired = 3
									break
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 228)
					loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
					rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_load_i32(memory_at_0, loc_2), 1))
					reg_0 = FUNC_LIST[461](loc_0, rt_add_i32(loc_1, 104))
					loc_13 = reg_0
					reg_0 = FUNC_LIST[431](loc_0)
					loc_10 = reg_0
					loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
					rt_store_i32(memory_at_0, loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_2), 1))
					loc_6 = rt_add_i32(loc_0, 224)
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 224)
						loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_7), 2)
						loc_3 = rt_shr_i32(rt_sub_i32(loc_5, loc_4), 2)
						if loc_2 > loc_3 then
							while true do
								loc_7 = rt_add_i32(loc_0, 204)
								while true do
									loc_2 = rt_sub_i32(loc_2, 1)
									loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_6), rt_shl_i32(loc_2, 2)))
									loc_5 = rt_load_i32(memory_at_0, loc_4 + 20)
									reg_0 = FUNC_LIST[8](loc_7, loc_4)
									rt_store_i32(memory_at_0, reg_0, loc_5)
									if loc_2 > loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_0 + 224)
								reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_7), 2)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_2 = reg_0
						if loc_2 < loc_3 then
							while true do
								FUNC_LIST[220](loc_6, rt_sub_i32(loc_3, loc_2))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_2 <= loc_3 then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 228, rt_add_i32(rt_shl_i32(loc_3, 2), loc_7))
						break
					end
					if desired then
						break
					end
					loc_15 = rt_load_i64(memory_at_0, loc_0 + 72)
					rt_store_i32(memory_at_0, loc_1 + 128, rt_load_i32(memory_at_0, loc_1 + 72))
					rt_store_i64(memory_at_0, loc_1 + 132, rt_load_i64(memory_at_0, loc_1 + 76))
					reg_1 = FUNC_LIST[443](loc_0, 295, rt_add_i32(loc_1, 128))
					rt_store_i32_n8(memory_at_0, loc_10 + 36, reg_1)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_1 + 136, loc_15)
					rt_store_i64(memory_at_0, loc_1 + 128, loc_16)
					reg_0 = FUNC_LIST[392](loc_0, 68)
					reg_0 = FUNC_LIST[338](reg_0, rt_add_i32(loc_1, 128), loc_13, loc_11, loc_12, loc_9, loc_10, (if loc_8 == 292 then 1 else 0), bit_or(rt_add_i32(loc_1, 72), 4))
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = rt_sub_i32(loc_0, 4294967232)
			rt_store_i32(memory_at_0, loc_1 + 60, rt_add_i32(loc_0, 344))
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 344)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 348)
			rt_store_i32(memory_at_0, loc_1 + 68, 0)
			rt_store_i32(memory_at_0, loc_1 + 64, rt_div_i32(rt_sub_i32(loc_6, loc_3), 24))
			FUNC_LIST[462](rt_add_i32(loc_1, 60), rt_add_i32(loc_1, 104))
			while true do
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_9 ~= 44 then
					break
				end
				FUNC_LIST[435](loc_0)
				FUNC_LIST[460](rt_add_i32(loc_1, 128), loc_0)
				FUNC_LIST[462](rt_add_i32(loc_1, 60), rt_add_i32(loc_1, 128))
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_9 ~= 44 then
					break
				end
				while true do
					FUNC_LIST[435](loc_0)
					FUNC_LIST[460](rt_add_i32(loc_1, 128), loc_0)
					FUNC_LIST[462](rt_add_i32(loc_1, 60), rt_add_i32(loc_1, 128))
					loc_9 = rt_load_i32(memory_at_0, loc_0 + 60)
					if loc_9 == 44 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_5 + 8))
			rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_5))
			while true do
				if loc_9 ~= 300 then
					while true do
						FUNC_LIST[432](loc_0, 300, 3043)
						FUNC_LIST[418](rt_add_i32(loc_1, 128), loc_4)
						if rt_load_i32(memory_at_0, loc_1 + 128) ~= 300 then
							desired = 2
							break
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[435](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 28, rt_add_i32(loc_0, 296))
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 296)
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 300)
			rt_store_i32(memory_at_0, loc_1 + 36, 0)
			rt_store_i32(memory_at_0, loc_1 + 32, rt_shr_i32(rt_sub_i32(loc_3, loc_5), 2))
			FUNC_LIST[463](loc_0, rt_add_i32(loc_1, 28))
			rt_store_i32(memory_at_0, loc_1 + 96, rt_load_i32(memory_at_0, loc_2 + 24))
			rt_store_i64(memory_at_0, loc_1 + 88, rt_load_i64(memory_at_0, loc_2 + 16))
			rt_store_i64(memory_at_0, loc_1 + 80, rt_load_i64(memory_at_0, loc_2 + 8))
			rt_store_i64(memory_at_0, loc_1 + 72, rt_load_i64(memory_at_0, loc_2))
			while true do
				loc_14 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_14 ~= 292 then
					while true do
						FUNC_LIST[432](loc_0, 292, 3043)
						FUNC_LIST[418](rt_add_i32(loc_1, 128), loc_4)
						if rt_load_i32(memory_at_0, loc_1 + 128) ~= 292 then
							desired = 2
							break
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[435](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 228)
			loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
			rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_load_i32(memory_at_0, loc_2), 1))
			rt_store_i32(memory_at_0, loc_1 + 16, rt_add_i32(loc_0, 356))
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 356)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 360)
			loc_2 = 0
			rt_store_i32(memory_at_0, loc_1 + 24, 0)
			rt_store_i32(memory_at_0, loc_1 + 20, rt_shr_i32(rt_sub_i32(loc_6, loc_3), 2))
			loc_3 = rt_shr_i32(rt_sub_i32(loc_5, loc_4), 2)
			if rt_load_i32(memory_at_0, loc_1 + 68) ~= 0 then
				while true do
					while true do
						reg_1 = FUNC_LIST[461](loc_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 60)), rt_mul_i32(rt_load_i32(memory_at_0, loc_1 + 64), 24)), rt_mul_i32(loc_2, 24)))
						rt_store_i32(memory_at_0, loc_1 + 128, reg_1)
						FUNC_LIST[440](rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 128))
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_2 < rt_load_i32(memory_at_0, loc_1 + 68) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = rt_add_i32(loc_0, 224)
			reg_0 = FUNC_LIST[431](loc_0)
			loc_12 = reg_0
			loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
			rt_store_i32(memory_at_0, loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_2), 1))
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
				loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_4), 2)
				reg_0 = loc_3
				if loc_2 > loc_3 then
					while true do
						loc_7 = rt_add_i32(loc_0, 204)
						while true do
							loc_2 = rt_sub_i32(loc_2, 1)
							loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_6), rt_shl_i32(loc_2, 2)))
							loc_5 = rt_load_i32(memory_at_0, loc_4 + 20)
							reg_1 = FUNC_LIST[8](loc_7, loc_4)
							rt_store_i32(memory_at_0, reg_1, loc_5)
							if loc_2 > loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
						reg_1 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_4), 2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_1
				if reg_0 > loc_2 then
					while true do
						FUNC_LIST[220](loc_6, rt_sub_i32(loc_3, loc_2))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 <= loc_3 then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 228, rt_add_i32(rt_shl_i32(loc_3, 2), loc_4))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_15 = rt_load_i64(memory_at_0, loc_0 + 72)
			rt_store_i32(memory_at_0, loc_1 + 128, rt_load_i32(memory_at_0, loc_1 + 72))
			rt_store_i64(memory_at_0, loc_1 + 132, rt_load_i64(memory_at_0, loc_1 + 76))
			reg_1 = FUNC_LIST[443](loc_0, 295, rt_add_i32(loc_1, 128))
			rt_store_i32_n8(memory_at_0, loc_12 + 36, reg_1)
			loc_13 = rt_load_i32(memory_at_0, loc_0 + 124)
			rt_store_i64(memory_at_0, loc_1 + 136, loc_15)
			rt_store_i64(memory_at_0, loc_1 + 128, loc_16)
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
				if loc_3 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 16))
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 20)
				reg_0 = FUNC_LIST[392](loc_13, rt_shl_i32(loc_3, 2))
				loc_4 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 12, loc_3)
				rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
				loc_10 = bit_and(loc_3, 3)
				loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_2)
				loc_6 = 0
				loc_2 = 0
				if loc_3 >= 4 then
					while true do
						loc_11 = bit_and(loc_3, 4294967292)
						loc_7 = 0
						while true do
							loc_3 = rt_shl_i32(loc_2, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_5)))
							loc_8 = bit_or(loc_3, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_8, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_8)))
							loc_8 = bit_or(loc_3, 8)
							rt_store_i32(memory_at_0, rt_add_i32(loc_8, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_8)))
							loc_3 = bit_or(loc_3, 12)
							rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_5)))
							loc_2 = rt_add_i32(loc_2, 4)
							loc_7 = rt_add_i32(loc_7, 4)
							if loc_11 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 == 0 then
					break
				end
				while true do
					loc_3 = rt_shl_i32(loc_2, 2)
					rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_5)))
					loc_2 = rt_add_i32(loc_2, 1)
					loc_6 = rt_add_i32(loc_6, 1)
					if loc_10 ~= loc_6 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = bit_or(rt_add_i32(loc_1, 72), 4)
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 36)
				if loc_5 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 28))
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), rt_shl_i32(loc_5, 2))
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 4, loc_5)
				rt_store_i32(memory_at_0, loc_1, loc_2)
				loc_8 = bit_and(loc_5, 3)
				loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_4)
				loc_3 = 0
				loc_0 = 0
				if loc_5 >= 4 then
					while true do
						loc_10 = bit_and(loc_5, 4294967292)
						loc_6 = 0
						while true do
							loc_5 = rt_shl_i32(loc_0, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_7 = bit_or(loc_5, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
							loc_7 = bit_or(loc_5, 8)
							rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
							loc_5 = bit_or(loc_5, 12)
							rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_0 = rt_add_i32(loc_0, 4)
							loc_6 = rt_add_i32(loc_6, 4)
							if loc_10 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_8 == 0 then
					break
				end
				while true do
					loc_5 = rt_shl_i32(loc_0, 2)
					rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
					loc_0 = rt_add_i32(loc_0, 1)
					loc_3 = rt_add_i32(loc_3, 1)
					if loc_8 ~= loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[392](loc_13, 88)
			reg_0 = FUNC_LIST[340](reg_0, rt_add_i32(loc_1, 128), rt_add_i32(loc_1, 8), loc_1, loc_12, (if loc_9 == 300 then 1 else 0), rt_add_i32(loc_1, 40), (if loc_14 == 292 then 1 else 0), loc_11)
			loc_0 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
			loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 20), 2))
			if loc_4 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
				while true do
					rt_store_i32(memory_at_0, loc_2 + 4, loc_4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
			loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 32), 2))
			if loc_4 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
				while true do
					rt_store_i32(memory_at_0, loc_2 + 4, loc_4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 60)
			loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), rt_mul_i32(rt_load_i32(memory_at_0, loc_1 + 64), 24))
			if loc_4 == rt_load_i32(memory_at_0, loc_2 + 4) then
				break
			end
			rt_store_i32(memory_at_0, loc_2 + 4, loc_4)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 160)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[445] = --[[ Luau::Parser::parseRepeat() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
		loc_11 = rt_load_i64(memory_at_0, loc_0 + 64)
		FUNC_LIST[435](loc_0)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 224)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 228)
		loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
		rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_load_i32(memory_at_0, loc_2), 1))
		reg_0 = FUNC_LIST[437](loc_0)
		loc_7 = reg_0
		loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)
		rt_store_i32(memory_at_0, loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_2), 1))
		rt_store_i64(memory_at_0, loc_3 + 4, loc_11)
		rt_store_i32(memory_at_0, loc_3, loc_1)
		reg_1 = FUNC_LIST[443](loc_0, 309, loc_3)
		loc_10 = reg_1
		rt_store_i32_n8(memory_at_0, loc_7 + 36, loc_10)
		reg_0 = FUNC_LIST[459](loc_0, 0)
		loc_8 = reg_0
		loc_9 = rt_add_i32(loc_0, 224)
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
			loc_1 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_4), 2)
			loc_2 = rt_shr_i32(rt_sub_i32(loc_6, loc_5), 2)
			if loc_1 > loc_2 then
				while true do
					loc_4 = rt_add_i32(loc_0, 204)
					while true do
						loc_1 = rt_sub_i32(loc_1, 1)
						loc_5 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_9), rt_shl_i32(loc_1, 2)))
						loc_6 = rt_load_i32(memory_at_0, loc_5 + 20)
						reg_0 = FUNC_LIST[8](loc_4, loc_5)
						rt_store_i32(memory_at_0, reg_0, loc_6)
						if loc_1 > loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 224)
					reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 228), loc_4), 2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			if loc_1 < loc_2 then
				while true do
					FUNC_LIST[220](loc_9, rt_sub_i32(loc_2, loc_1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_1 <= loc_2 then
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 228, rt_add_i32(rt_shl_i32(loc_2, 2), loc_4))
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 124)
		rt_store_i64(memory_at_0, loc_3, loc_11)
		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_8 + 16))
		reg_0 = FUNC_LIST[392](loc_1, 40)
		reg_0 = FUNC_LIST[326](reg_0, loc_3, loc_8, loc_7, loc_10)
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[446] = --[[ Luau::Parser::parseFunctionName(Luau::Location, bool&, Luau::AstName&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
			while true do
				rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_0 + 84))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[488](loc_0, 4233)
		loc_7 = reg_0
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 156)
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 60)
			if loc_5 == 46 then
				while true do
					loc_6 = rt_sub_i32(loc_0, 4294967232)
					loc_11 = rt_load_i64(memory_at_0, loc_1)
					loc_8 = rt_add_i32(loc_4, 8)
					while true do
						rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_0 + 64))
						FUNC_LIST[435](loc_0)
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
								while true do
									loc_5 = rt_load_i32(memory_at_0, loc_0 + 84)
									rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_6 + 8))
									rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_6))
									FUNC_LIST[435](loc_0)
									rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_4 + 40))
									rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_4 + 32))
									loc_10 = rt_load_i64(memory_at_0, loc_4 + 16)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[464](loc_0, 4366)
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 168)
							loc_10 = rt_load_i64(memory_at_0, loc_0 + 64)
							rt_store_i64(memory_at_0, loc_4 + 16, loc_10)
							rt_store_i64(memory_at_0, loc_4 + 8, loc_10)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						rt_store_i32(memory_at_0, loc_4 + 4, loc_5)
						rt_store_i32(memory_at_0, loc_3, loc_5)
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 124)
						rt_store_i64(memory_at_0, loc_4 + 40, loc_10)
						rt_store_i64(memory_at_0, loc_4 + 32, loc_11)
						reg_0 = FUNC_LIST[392](loc_5, 60)
						reg_0 = FUNC_LIST[299](reg_0, rt_add_i32(loc_4, 32), loc_7, rt_add_i32(loc_4, 4), loc_8, rt_add_i32(loc_4, 24), 46)
						loc_7 = reg_0
						loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 156), 1)
						rt_store_i32(memory_at_0, loc_0 + 156, loc_5)
						if rt_load_i32(memory_at_0, 49008) < loc_5 then
							desired = 1
							break
						end
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 60)
						if loc_5 == 46 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_0 + 156, loc_9)
			if loc_5 == 58 then
				while true do
					rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_0 + 64))
					FUNC_LIST[435](loc_0)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
							while true do
								loc_5 = rt_load_i32(memory_at_0, loc_0 + 84)
								loc_8 = rt_add_i32(loc_4, 40)
								loc_6 = rt_sub_i32(loc_0, 4294967232)
								rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6 + 8))
								rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_6))
								FUNC_LIST[435](loc_0)
								loc_6 = rt_add_i32(loc_4, 8)
								rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 40))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_4 + 32))
								loc_10 = rt_load_i64(memory_at_0, loc_4 + 16)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[464](loc_0, 4354)
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 168)
						loc_10 = rt_load_i64(memory_at_0, loc_0 + 64)
						rt_store_i64(memory_at_0, loc_4 + 16, loc_10)
						rt_store_i64(memory_at_0, loc_4 + 8, loc_10)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_4 + 4, loc_5)
					rt_store_i32(memory_at_0, loc_3, loc_5)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
					loc_11 = rt_load_i64(memory_at_0, loc_1)
					rt_store_i64(memory_at_0, loc_4 + 40, loc_10)
					rt_store_i64(memory_at_0, loc_4 + 32, loc_11)
					reg_0 = FUNC_LIST[392](loc_0, 60)
					reg_0 = FUNC_LIST[299](reg_0, rt_add_i32(loc_4, 32), loc_7, rt_add_i32(loc_4, 4), rt_add_i32(loc_4, 8), rt_add_i32(loc_4, 24), 58)
					loc_7 = reg_0
					rt_store_i32_n8(memory_at_0, loc_2, 1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_4, 48)
			reg_0 = loc_7
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_4, 4233)
		FUNC_LIST[427](loc_6, 4634, loc_4)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[447] = --[[ Luau::Parser::parseFunctionBody(bool, Luau::Lexeme const&, Luau::AstName const&, Luau::Parser::Name const*, Luau::AstArray<Luau::AstAttr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6)
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_7
		rt_store_i64(memory_at_0, loc_7 + 120, rt_load_i64(memory_at_0, loc_3 + 12))
		rt_store_i64(memory_at_0, loc_7 + 112, rt_load_i64(memory_at_0, loc_3 + 4))
		FUNC_LIST[473](rt_add_i32(loc_7, 96), loc_1, 0)
		loc_10 = rt_load_i32(memory_at_0, loc_1 + 60)
		rt_store_i32(memory_at_0, loc_7 + 84, loc_10)
		loc_19 = rt_load_i64(memory_at_0, loc_1 + 64)
		rt_store_i64(memory_at_0, loc_7 + 88, loc_19)
		while true do
			if loc_10 ~= 40 then
				while true do
					FUNC_LIST[432](loc_1, 40, 3227)
					FUNC_LIST[418](rt_add_i32(loc_7, 128), rt_add_i32(loc_1, 40))
					if rt_load_i32(memory_at_0, loc_7 + 128) ~= 40 then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_7 + 72, rt_add_i32(loc_1, 344))
		loc_9 = rt_load_i32(memory_at_0, loc_1 + 344)
		loc_8 = rt_load_i32(memory_at_0, loc_1 + 348)
		rt_store_i32(memory_at_0, loc_7 + 80, 0)
		rt_store_i32(memory_at_0, loc_7 + 76, rt_div_i32(rt_sub_i32(loc_8, loc_9), 24))
		loc_9 = rt_sub_i32(loc_7, 4294967232)
		rt_store_i64(memory_at_0, loc_9, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_7 + 56, rt_i64_ZERO)
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 60) == 41 then
				while true do
					reg_0 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[476](rt_add_i32(loc_7, 128), loc_1, rt_add_i32(loc_7, 72), 1)
			rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_7 + 140))
			rt_store_i64(memory_at_0, loc_7 + 56, rt_load_i64(memory_at_0, loc_7 + 132))
			loc_13 = rt_load_i32_u8(memory_at_0, loc_7 + 128)
			loc_14 = rt_load_i32(memory_at_0, loc_7 + 148)
			reg_0 = (if rt_load_i32(memory_at_0, loc_1 + 60) == 41 then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_9 = reg_0
		rt_store_i32_n8(memory_at_0, loc_7 + 48, 0)
		rt_store_i32_n8(memory_at_0, loc_7 + 32, 0)
		while true do
			if loc_10 ~= 40 then
				break
			end
			if loc_9 == 0 then
				break
			end
			loc_20 = rt_load_i64(memory_at_0, loc_1 + 72)
			rt_store_i32_n8(memory_at_0, loc_7 + 48, 1)
			rt_store_i64(memory_at_0, loc_7 + 40, loc_20)
			rt_store_i64(memory_at_0, loc_7 + 32, loc_19)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if loc_9 == 0 then
				while true do
					FUNC_LIST[469](loc_1, 41, rt_add_i32(loc_7, 84), 0)
					reg_0 = FUNC_LIST[470](loc_1, 41, loc_5, 1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[477](rt_add_i32(loc_7, 16), loc_1)
		if loc_5 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_7 + 144, rt_load_i32(memory_at_0, loc_5 + 16))
				rt_store_i64(memory_at_0, loc_7 + 136, rt_load_i64(memory_at_0, loc_5 + 8))
				rt_store_i64(memory_at_0, loc_7 + 128, rt_load_i64(memory_at_0, loc_5))
				rt_store_i32(memory_at_0, loc_7 + 148, 0)
				reg_0 = FUNC_LIST[461](loc_1, rt_add_i32(loc_7, 128))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_15 = reg_0
		loc_16 = rt_load_i32(memory_at_0, loc_1 + 224)
		loc_17 = rt_load_i32(memory_at_0, loc_1 + 228)
		while true do
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_1 + 192)
					loc_12 = rt_load_i32(memory_at_0, loc_1 + 196)
					if loc_5 < loc_12 then
						while true do
							rt_store_i64(memory_at_0, loc_5, rt_bit_and_i64(rt_extend_i64_u32(loc_13), rt_i64_from_u32(255, 0)))
							loc_8 = rt_add_i32(loc_5, 8)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = rt_add_i32(loc_1, 188)
					loc_9 = rt_load_i32(memory_at_0, loc_8)
					loc_18 = rt_shr_i32(rt_sub_i32(loc_5, loc_9), 3)
					loc_10 = rt_add_i32(loc_18, 1)
					if loc_10 >= 536870912 then
						desired = 2
						break
					end
					loc_8 = rt_sub_i32(loc_12, loc_9)
					loc_11 = rt_shr_i32(loc_8, 2)
					loc_8 = (if loc_8 >= 2147483640 then 536870911 else (if loc_10 < loc_11 then loc_11 else loc_10))
					if loc_8 ~= 0 then
						while true do
							if loc_8 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_8, 3))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_11 = reg_0
					loc_10 = rt_add_i32(loc_11, rt_shl_i32(loc_18, 3))
					rt_store_i64(memory_at_0, loc_10, rt_bit_and_i64(rt_extend_i64_u32(loc_13), rt_i64_from_u32(255, 0)))
					loc_11 = rt_add_i32(rt_shl_i32(loc_8, 3), loc_11)
					loc_8 = rt_add_i32(loc_10, 8)
					if loc_5 ~= loc_9 then
						while true do
							while true do
								loc_10 = rt_sub_i32(loc_10, 8)
								loc_5 = rt_sub_i32(loc_5, 8)
								rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_5))
								if loc_5 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_12 = rt_load_i32(memory_at_0, loc_1 + 196)
							reg_0 = rt_load_i32(memory_at_0, loc_1 + 188)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_9
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = reg_0
					rt_store_i32(memory_at_0, loc_1 + 196, loc_11)
					rt_store_i32(memory_at_0, loc_1 + 192, loc_8)
					rt_store_i32(memory_at_0, loc_1 + 188, loc_10)
					if loc_9 == 0 then
						break
					end
					FUNC_LIST[653](loc_9, rt_sub_i32(loc_12, loc_9))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_12 = rt_add_i32(loc_1, 224)
				rt_store_i32(memory_at_0, loc_1 + 192, loc_8)
				FUNC_LIST[490](rt_add_i32(loc_7, 4), loc_1, rt_add_i32(loc_7, 112), loc_2, rt_add_i32(loc_7, 72))
				reg_0 = FUNC_LIST[431](loc_1)
				loc_11 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 192, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 192), 8))
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 224)
				loc_5 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 228), loc_2), 2)
				loc_8 = rt_shr_i32(rt_sub_i32(loc_17, loc_16), 2)
				if loc_5 > loc_8 then
					while true do
						loc_2 = rt_add_i32(loc_1, 204)
						while true do
							loc_5 = rt_sub_i32(loc_5, 1)
							loc_10 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_12), rt_shl_i32(loc_5, 2)))
							loc_9 = rt_load_i32(memory_at_0, loc_10 + 20)
							reg_0 = FUNC_LIST[8](loc_2, loc_10)
							rt_store_i32(memory_at_0, reg_0, loc_9)
							if loc_5 > loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 224)
						reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 228), loc_2), 2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_5
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = reg_0
				loc_10 = rt_add_i32(loc_7, 104)
				loc_9 = rt_add_i32(loc_7, 8)
				while true do
					if loc_5 < loc_8 then
						while true do
							FUNC_LIST[220](loc_12, rt_sub_i32(loc_8, loc_5))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_5 <= loc_8 then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 228, rt_add_i32(rt_shl_i32(loc_8, 2), loc_2))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_19 = rt_load_i64(memory_at_0, loc_1 + 72)
				rt_store_i32(memory_at_0, loc_7 + 128, rt_load_i32(memory_at_0, loc_3))
				rt_store_i64(memory_at_0, loc_7 + 132, rt_load_i64(memory_at_0, loc_3 + 4))
				reg_1 = FUNC_LIST[443](loc_1, 295, rt_add_i32(loc_7, 128))
				rt_store_i32_n8(memory_at_0, loc_11 + 36, reg_1)
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 124)
				rt_store_i64(memory_at_0, loc_7 + 136, loc_19)
				rt_store_i64(memory_at_0, loc_7 + 128, rt_load_i64(memory_at_0, loc_7 + 112))
				loc_8 = rt_load_i32(memory_at_0, loc_1 + 188)
				loc_1 = rt_load_i32(memory_at_0, loc_1 + 192)
				reg_0 = FUNC_LIST[392](loc_5, 132)
				reg_0 = FUNC_LIST[303](reg_0, rt_add_i32(loc_7, 128), loc_6, rt_add_i32(loc_7, 96), loc_10, rt_load_i32(memory_at_0, loc_7 + 4), loc_9, bit_and(loc_13, 1), rt_add_i32(loc_7, 56), loc_11, rt_shr_i32(rt_sub_i32(loc_1, loc_8), 3), loc_4, rt_add_i32(loc_7, 16), loc_14, rt_add_i32(loc_7, 32))
				loc_5 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 4, loc_15)
				rt_store_i32(memory_at_0, loc_0, loc_5)
				loc_5 = rt_load_i32(memory_at_0, loc_7 + 72)
				loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(rt_load_i32(memory_at_0, loc_7 + 76), 24))
				if loc_1 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
					while true do
						rt_store_i32(memory_at_0, loc_5 + 4, loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_7, 160)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_8)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[448] = --[[ Luau::Parser::parseLocal(Luau::AstArray<Luau::AstAttr*> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_2
		loc_12 = rt_load_i64(memory_at_0, loc_0 + 64)
		FUNC_LIST[435](loc_0)
		loc_4 = rt_sub_i32(loc_0, 4294967232)
		loc_3 = rt_add_i32(loc_0, 60)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 60) == 298 then
				while true do
					rt_store_i32(memory_at_0, loc_2 + 104, rt_load_i32(memory_at_0, loc_3 + 24))
					rt_store_i64(memory_at_0, loc_2 + 96, rt_load_i64(memory_at_0, loc_3 + 16))
					rt_store_i64(memory_at_0, loc_2 + 88, rt_load_i64(memory_at_0, loc_3 + 8))
					rt_store_i64(memory_at_0, loc_2 + 80, rt_load_i64(memory_at_0, loc_3))
					FUNC_LIST[435](loc_0)
					if rt_load_i32(memory_at_0, loc_2 + 84) == rt_wrap_i32_i64(loc_12) then
						while true do
							rt_store_i64_n32(memory_at_0, loc_2 + 88, rt_shr_u64(loc_12, rt_i64_from_u32(32, 0)))
							break
						end
						if desired then
							break
						end
					end
					while true do
						if rt_load_i32(memory_at_0, loc_3) == 281 then
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_0 + 84)
								loc_5 = rt_add_i32(loc_2, 120)
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4 + 8))
								rt_store_i64(memory_at_0, loc_2 + 112, rt_load_i64(memory_at_0, loc_4))
								FUNC_LIST[435](loc_0)
								loc_4 = rt_add_i32(loc_2, 60)
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 120))
								rt_store_i64(memory_at_0, loc_2 + 60, rt_load_i64(memory_at_0, loc_2 + 112))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[464](loc_0, 4340)
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 168)
						loc_13 = rt_load_i64(memory_at_0, loc_0 + 64)
						rt_store_i64(memory_at_0, loc_2 + 68, loc_13)
						rt_store_i64(memory_at_0, loc_2 + 60, loc_13)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_2 + 56, loc_3)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 248)
					rt_store_i32(memory_at_0, loc_3 + 1180, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 1180), 1))
					FUNC_LIST[447](rt_add_i32(loc_2, 44), loc_0, 0, rt_add_i32(loc_2, 80), rt_add_i32(loc_2, 56), rt_add_i32(loc_2, 56), loc_1)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 248)
					rt_store_i32(memory_at_0, loc_3 + 1180, rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 1180), 1))
					rt_store_i64(memory_at_0, loc_2 + 112, loc_12)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 44)
					rt_store_i64(memory_at_0, loc_2 + 120, rt_load_i64(memory_at_0, loc_3 + 16))
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 36)
					reg_0 = FUNC_LIST[348](reg_0, rt_add_i32(loc_2, 112), rt_load_i32(memory_at_0, loc_2 + 48), loc_3)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_load_i32(memory_at_0, loc_1 + 4) ~= 0 then
				while true do
					rt_store_i64(memory_at_0, loc_2 + 56, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_2 + 112, rt_i64_ZERO)
					FUNC_LIST[395](rt_add_i32(loc_2, 80), loc_3)
					rt_store_i32(memory_at_0, loc_2, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_2 + 91), 0) then rt_load_i32(memory_at_0, loc_2 + 80) else rt_add_i32(loc_2, 80)))
					reg_0 = FUNC_LIST[458](loc_0, loc_4, rt_add_i32(loc_2, 56), rt_add_i32(loc_2, 112), 5590, loc_2)
					loc_0 = reg_0
					if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_2 + 91), 0) then
						desired = 1
						break
					end
					FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2 + 80), bit_and(rt_load_i32(memory_at_0, loc_2 + 88), 2147483647))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 248)
			rt_store_i32(memory_at_0, loc_3 + 244, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 244), 1))
			rt_store_i32(memory_at_0, loc_2 + 112, rt_add_i32(loc_0, 344))
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 344)
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 348)
			rt_store_i32(memory_at_0, loc_2 + 120, 0)
			rt_store_i32(memory_at_0, loc_2 + 116, rt_div_i32(rt_sub_i32(loc_1, loc_3), 24))
			FUNC_LIST[460](rt_add_i32(loc_2, 80), loc_0)
			FUNC_LIST[462](rt_add_i32(loc_2, 112), rt_add_i32(loc_2, 80))
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
			if loc_3 == 44 then
				while true do
					while true do
						FUNC_LIST[435](loc_0)
						FUNC_LIST[460](rt_add_i32(loc_2, 80), loc_0)
						FUNC_LIST[462](rt_add_i32(loc_2, 112), rt_add_i32(loc_2, 80))
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
						if loc_3 == 44 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 248)
			rt_store_i32(memory_at_0, loc_1 + 244, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 244), 1))
			rt_store_i32(memory_at_0, loc_2 + 44, rt_add_i32(loc_0, 356))
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 356)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 360)
			rt_store_i32(memory_at_0, loc_2 + 52, 0)
			rt_store_i32(memory_at_0, loc_2 + 48, rt_shr_i32(rt_sub_i32(loc_5, loc_1), 2))
			rt_store_i32(memory_at_0, loc_2 + 32, rt_add_i32(loc_0, 296))
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 296)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 300)
			rt_store_i32(memory_at_0, loc_2 + 40, 0)
			rt_store_i32(memory_at_0, loc_2 + 36, rt_shr_i32(rt_sub_i32(loc_5, loc_1), 2))
			rt_store_i32_n8(memory_at_0, loc_2 + 96, 0)
			rt_store_i32_n8(memory_at_0, loc_2 + 80, 0)
			if loc_3 == 61 then
				while true do
					rt_store_i64(memory_at_0, loc_2 + 88, rt_load_i64(memory_at_0, loc_4 + 8))
					rt_store_i64(memory_at_0, loc_2 + 80, rt_load_i64(memory_at_0, loc_4))
					rt_store_i32_n8(memory_at_0, loc_2 + 96, 1)
					FUNC_LIST[435](loc_0)
					FUNC_LIST[463](loc_0, rt_add_i32(loc_2, 32))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_load_i32(memory_at_0, loc_2 + 120) ~= 0 then
				while true do
					loc_3 = 0
					while true do
						reg_1 = FUNC_LIST[461](loc_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 112)), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 116), 24)), rt_mul_i32(loc_3, 24)))
						rt_store_i32(memory_at_0, loc_2 + 56, reg_1)
						FUNC_LIST[440](rt_add_i32(loc_2, 44), rt_add_i32(loc_2, 56))
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_3 < rt_load_i32(memory_at_0, loc_2 + 120) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_load_i32(memory_at_0, loc_0 + 124)
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 40)
			reg_0 = loc_2
			if loc_4 ~= 0 then
				while true do
					reg_1 = rt_add_i32(rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 32) + 4), 4)), 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = rt_add_i32(loc_0, 88)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_1
			rt_store_i64(memory_at_0, reg_0 + 64, rt_load_i64(memory_at_0, loc_3 + 8))
			rt_store_i64(memory_at_0, loc_2 + 56, loc_12)
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_2 + 52)
				if loc_5 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 44))
				loc_4 = rt_load_i32(memory_at_0, loc_2 + 48)
				reg_0 = FUNC_LIST[392](loc_10, rt_shl_i32(loc_5, 2))
				loc_1 = reg_0
				rt_store_i32(memory_at_0, loc_2 + 28, loc_5)
				rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
				loc_9 = bit_and(loc_5, 3)
				loc_4 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_3)
				loc_3 = 0
				if loc_5 >= 4 then
					while true do
						loc_11 = bit_and(loc_5, 4294967292)
						while true do
							loc_5 = rt_shl_i32(loc_3, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_7 = bit_or(loc_5, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
							loc_7 = bit_or(loc_5, 8)
							rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
							loc_5 = bit_or(loc_5, 12)
							rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_3 = rt_add_i32(loc_3, 4)
							loc_6 = rt_add_i32(loc_6, 4)
							if loc_11 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_9 ~= 0 then
					while true do
						while true do
							loc_5 = rt_shl_i32(loc_3, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_3 = rt_add_i32(loc_3, 1)
							loc_8 = rt_add_i32(loc_8, 1)
							if loc_9 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_load_i32(memory_at_0, loc_2 + 40)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_4 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 32))
				loc_5 = rt_load_i32(memory_at_0, loc_2 + 36)
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), rt_shl_i32(loc_4, 2))
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_2 + 20, loc_4)
				rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
				loc_7 = bit_and(loc_4, 3)
				loc_1 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_1)
				loc_5 = 0
				loc_0 = 0
				if loc_4 >= 4 then
					while true do
						loc_9 = bit_and(loc_4, 4294967292)
						loc_8 = 0
						while true do
							loc_4 = rt_shl_i32(loc_0, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_4)))
							loc_6 = bit_or(loc_4, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_6)))
							loc_6 = bit_or(loc_4, 8)
							rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_6)))
							loc_4 = bit_or(loc_4, 12)
							rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_4)))
							loc_0 = rt_add_i32(loc_0, 4)
							loc_8 = rt_add_i32(loc_8, 4)
							if loc_9 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_7 == 0 then
					break
				end
				while true do
					loc_4 = rt_shl_i32(loc_0, 2)
					rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_4)))
					loc_0 = rt_add_i32(loc_0, 1)
					loc_5 = rt_add_i32(loc_5, 1)
					if loc_7 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[392](loc_10, 64)
			reg_0 = FUNC_LIST[336](reg_0, rt_add_i32(loc_2, 56), rt_add_i32(loc_2, 24), rt_add_i32(loc_2, 16), rt_add_i32(loc_2, 80))
			loc_0 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 32)
			loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 36), 2))
			if loc_1 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
				while true do
					rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 44)
			loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 48), 2))
			if loc_1 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
				while true do
					rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 112)
			loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 116), 24))
			if loc_1 == rt_load_i32(memory_at_0, loc_3 + 4) then
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 128)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[449] = --[[ Luau::Parser::parseReturn() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		loc_12 = rt_load_i64(memory_at_0, loc_0 + 72)
		loc_11 = rt_load_i64(memory_at_0, loc_0 + 64)
		FUNC_LIST[435](loc_0)
		rt_store_i32(memory_at_0, loc_1 + 36, rt_add_i32(loc_0, 296))
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 296)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 300)
		rt_store_i32(memory_at_0, loc_1 + 44, 0)
		rt_store_i32(memory_at_0, loc_1 + 40, rt_shr_i32(rt_sub_i32(loc_4, loc_3), 2))
		while true do
			while true do
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
					loc_4 = rt_sub_i32(loc_3, 293)
					if (if bit_and(rt_shl_i32(1, loc_4), 65543) ~= 0 then (if loc_4 <= 16 then 1 else 0) else 0) ~= 0 then
						break
					end
					if loc_3 == 0 then
						break
					end
					if loc_3 == 59 then
						break
					end
					FUNC_LIST[463](loc_0, rt_add_i32(loc_1, 36))
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 44)
					if loc_2 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 124)
				rt_store_i64(memory_at_0, loc_1 + 24, loc_12)
				rt_store_i64(memory_at_0, loc_1 + 16, loc_11)
				rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 124)
			loc_0 = rt_load_i32(memory_at_0, loc_1 + 36)
			rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 4)) + 16))
			rt_store_i64(memory_at_0, loc_1 + 16, loc_11)
			loc_0 = rt_load_i32(memory_at_0, loc_0)
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 40)
			reg_0 = FUNC_LIST[392](loc_5, rt_shl_i32(loc_2, 2))
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
			loc_7 = bit_and(loc_2, 3)
			loc_4 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_0)
			loc_0 = 0
			if loc_2 >= 4 then
				while true do
					loc_10 = bit_and(loc_2, 4294967292)
					while true do
						loc_2 = rt_shl_i32(loc_0, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_4)))
						loc_6 = bit_or(loc_2, 4)
						rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_6)))
						loc_6 = bit_or(loc_2, 8)
						rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_6)))
						loc_2 = bit_or(loc_2, 12)
						rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_4)))
						loc_0 = rt_add_i32(loc_0, 4)
						loc_9 = rt_add_i32(loc_9, 4)
						if loc_10 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 == 0 then
				break
			end
			while true do
				loc_2 = rt_shl_i32(loc_0, 2)
				rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_4)))
				loc_0 = rt_add_i32(loc_0, 1)
				loc_8 = rt_add_i32(loc_8, 1)
				if loc_7 ~= loc_8 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[392](loc_5, 36)
		reg_0 = FUNC_LIST[332](reg_0, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 8))
		loc_3 = reg_0
		loc_0 = rt_load_i32(memory_at_0, loc_1 + 36)
		loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 40), 2))
		if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 48)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[450] = --[[ Luau::Parser::parseBreak() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_0 + 72))
		rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_0 + 64))
		FUNC_LIST[435](loc_0)
		while true do
			if rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)) == 0 then
				while true do
					rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
					reg_0 = FUNC_LIST[328](reg_0, rt_add_i32(loc_1, 16))
					loc_3 = reg_0
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
					loc_2 = reg_0
					rt_store_i32(memory_at_0, loc_1 + 4, 1)
					rt_store_i32(memory_at_0, loc_1, loc_2)
					rt_store_i32(memory_at_0, loc_2, loc_3)
					reg_0 = FUNC_LIST[458](loc_0, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 8), loc_1, 3063, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
			reg_0 = FUNC_LIST[328](reg_0, rt_add_i32(loc_1, 16))
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 32)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[451] = --[[ Luau::Parser::parseAttributeStat() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[465](rt_add_i32(loc_1, 32), loc_0)
		loc_2 = rt_add_i32(loc_0, 60)
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 1, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 60), 281)] or 3
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_load_i64(memory_at_0, loc_0 + 64)
						loc_6 = rt_load_i64(memory_at_0, loc_0 + 72)
						rt_store_i32(memory_at_0, loc_1 + 104, rt_load_i32(memory_at_0, loc_2 + 24))
						rt_store_i64(memory_at_0, loc_1 + 96, rt_load_i64(memory_at_0, loc_2 + 16))
						rt_store_i64(memory_at_0, loc_1 + 88, rt_load_i64(memory_at_0, loc_2 + 8))
						rt_store_i64(memory_at_0, loc_1 + 80, rt_load_i64(memory_at_0, loc_2))
						FUNC_LIST[435](loc_0)
						rt_store_i64(memory_at_0, rt_sub_i32(loc_1, 4294967232), loc_6)
						rt_store_i64(memory_at_0, loc_1 + 24, loc_6)
						rt_store_i32_n8(memory_at_0, loc_1 + 79, 0)
						rt_store_i64(memory_at_0, loc_1 + 56, loc_5)
						rt_store_i64(memory_at_0, loc_1 + 16, loc_5)
						rt_store_i32(memory_at_0, loc_1 + 72, 0)
						reg_0 = FUNC_LIST[446](loc_0, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 79), rt_add_i32(loc_1, 72))
						loc_3 = reg_0
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 248)
						rt_store_i32(memory_at_0, loc_2 + 1180, rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 1180), 1))
						FUNC_LIST[447](rt_add_i32(loc_1, 40), loc_0, rt_load_i32_u8(memory_at_0, loc_1 + 79), rt_add_i32(loc_1, 80), rt_add_i32(loc_1, 72), 0, rt_add_i32(loc_1, 32))
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 40)
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 248)
						rt_store_i32(memory_at_0, loc_4 + 1180, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 1180), 1))
						loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
						rt_store_i64(memory_at_0, loc_1 + 40, loc_5)
						rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_2 + 16))
						reg_0 = FUNC_LIST[392](loc_0, 36)
						reg_0 = FUNC_LIST[346](reg_0, rt_add_i32(loc_1, 40), loc_3, loc_2)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[448](loc_0, rt_add_i32(loc_1, 32))
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_0) ~= 1 then
					break
				end
				reg_0 = FUNC_LIST[584](4093, rt_load_i32(memory_at_0, loc_0 + 84))
				if reg_0 ~= 0 then
					break
				end
				reg_1 = FUNC_LIST[452](loc_0, 1)
				reg_0 = FUNC_LIST[457](loc_0, rt_add_i32(reg_1, 8), rt_add_i32(loc_1, 32))
				loc_0 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_1 + 56, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_ZERO)
			FUNC_LIST[395](rt_add_i32(loc_1, 80), loc_2)
			rt_store_i32(memory_at_0, loc_1, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 91), 0) then rt_load_i32(memory_at_0, loc_1 + 80) else rt_add_i32(loc_1, 80)))
			reg_0 = FUNC_LIST[458](loc_0, rt_sub_i32(loc_0, 4294967232), rt_add_i32(loc_1, 56), rt_add_i32(loc_1, 40), 5324, loc_1)
			loc_0 = reg_0
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 91), 0) then
				break
			end
			FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1 + 80), bit_and(rt_load_i32(memory_at_0, loc_1 + 88), 2147483647))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 112)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[452] = --[[ Luau::Parser::parsePrimaryExpr(bool) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_2
		loc_4 = rt_sub_i32(loc_0, 4294967232)
		loc_10 = rt_load_i64(memory_at_0, loc_0 + 64)
		loc_5 = rt_add_i32(loc_2, 20)
		reg_0 = FUNC_LIST[466](loc_0)
		loc_6 = reg_0
		loc_8 = rt_load_i32(memory_at_0, loc_0 + 156)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
											if rt_le_i32(loc_3, 122) then
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 3, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, }
														end)()
													end
													temp = br_map[1][rt_sub_i32(loc_3, 40)] or 4
													if temp < 3 then
														if temp < 2 then
															desired = 9
															break
														else
															desired = 8
															break
														end
													elseif temp > 3 then
														if temp < 5 then
															desired = 6
															break
														else
															desired = 5
															break
														end
													else
														desired = 7
														break
													end
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											if rt_sub_i32(loc_3, 278) < 2 then
												desired = 3
												break
											end
											if loc_3 ~= 123 then
												desired = 5
												break
											end
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_0 + 64))
										FUNC_LIST[435](loc_0)
										while true do
											if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
												while true do
													loc_3 = rt_load_i32(memory_at_0, loc_0 + 84)
													loc_7 = rt_add_i32(loc_2, 56)
													rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_4 + 8))
													rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_4))
													FUNC_LIST[435](loc_0)
													rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
													rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_2 + 56))
													rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_2 + 48))
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[464](loc_0, 0)
											while true do
												if rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 60), 290) > 20 then
													break
												end
												if rt_load_i32(memory_at_0, loc_4) ~= rt_load_i32(memory_at_0, loc_2 + 40) then
													break
												end
												rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_0 + 84))
												rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
												rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
												FUNC_LIST[435](loc_0)
												desired = 9
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_3 = rt_load_i32(memory_at_0, loc_0 + 168)
											loc_9 = rt_load_i64(memory_at_0, loc_0 + 64)
											rt_store_i64(memory_at_0, loc_2 + 28, loc_9)
											rt_store_i64(memory_at_0, loc_2 + 20, loc_9)
											rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = rt_load_i32(memory_at_0, loc_0 + 124)
										rt_store_i64(memory_at_0, loc_2 + 48, loc_10)
										rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_2 + 28))
										reg_0 = FUNC_LIST[392](loc_3, 60)
										reg_0 = FUNC_LIST[299](reg_0, rt_add_i32(loc_2, 48), loc_6, rt_add_i32(loc_2, 16), loc_5, rt_add_i32(loc_2, 40), 46)
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_0 + 64))
									FUNC_LIST[435](loc_0)
									while true do
										if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
											while true do
												loc_3 = rt_load_i32(memory_at_0, loc_0 + 84)
												loc_7 = rt_add_i32(loc_2, 56)
												rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_4 + 8))
												rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_4))
												FUNC_LIST[435](loc_0)
												rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
												rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_2 + 56))
												rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_2 + 48))
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[464](loc_0, 4354)
										while true do
											if rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 60), 290) > 20 then
												break
											end
											if rt_load_i32(memory_at_0, loc_4) ~= rt_load_i32(memory_at_0, loc_2 + 40) then
												break
											end
											rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_0 + 84))
											rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
											rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
											FUNC_LIST[435](loc_0)
											desired = 8
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = rt_load_i32(memory_at_0, loc_0 + 168)
										loc_9 = rt_load_i64(memory_at_0, loc_0 + 64)
										rt_store_i64(memory_at_0, loc_2 + 28, loc_9)
										rt_store_i64(memory_at_0, loc_2 + 20, loc_9)
										rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_3 = rt_load_i32(memory_at_0, loc_0 + 124)
									rt_store_i64(memory_at_0, loc_2 + 48, loc_10)
									rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_2 + 28))
									reg_1 = FUNC_LIST[392](loc_3, 60)
									reg_1 = FUNC_LIST[299](reg_1, rt_add_i32(loc_2, 48), loc_6, rt_add_i32(loc_2, 16), loc_5, rt_add_i32(loc_2, 40), 58)
									reg_0 = FUNC_LIST[467](loc_0, reg_1, 1)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_1 ~= 0 then
									desired = 3
									break
								end
								if rt_load_i32(memory_at_0, loc_6 + 16) == rt_load_i32(memory_at_0, loc_4) then
									desired = 3
									break
								end
								FUNC_LIST[468](loc_0)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_3 == 91 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 156, loc_8)
						GLOBAL_LIST[0].value = rt_sub_i32(loc_2, 4294967232)
						reg_0 = loc_6
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_2 + 48, 91)
					rt_store_i64(memory_at_0, loc_2 + 52, rt_load_i64(memory_at_0, loc_0 + 64))
					FUNC_LIST[435](loc_0)
					reg_0 = FUNC_LIST[459](loc_0, 0)
					loc_3 = reg_0
					loc_9 = rt_load_i64(memory_at_0, loc_0 + 72)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) ~= 93 then
							while true do
								FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_2, 48), 0)
								reg_0 = FUNC_LIST[470](loc_0, 93, loc_0, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_2 + 24, loc_9)
					rt_store_i64(memory_at_0, loc_2 + 16, loc_10)
					reg_0 = FUNC_LIST[392](loc_7, 32)
					reg_0 = FUNC_LIST[301](reg_0, rt_add_i32(loc_2, 16), loc_6, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[467](loc_0, loc_6, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_6 = reg_0
			loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 156), 1)
			rt_store_i32(memory_at_0, loc_0 + 156, loc_3)
			if rt_load_i32(memory_at_0, 49008) >= loc_3 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_2, 3398)
		FUNC_LIST[427](loc_4, 4634, loc_2)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[453] = --[[ Luau::Parser::parseAssignment(Luau::AstExpr*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i32(memory_at_0, loc_2 + 44, loc_1)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_3 == rt_load_i32(memory_at_0, 48612) then
				break
			end
			if rt_load_i32(memory_at_0, 48620) == loc_3 then
				break
			end
			if rt_load_i32(memory_at_0, 48652) == loc_3 then
				break
			end
			if rt_load_i32(memory_at_0, 48644) == loc_3 then
				break
			end
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_2 + 52, 1)
			rt_store_i32(memory_at_0, loc_2 + 48, loc_3)
			rt_store_i32(memory_at_0, loc_3, loc_1)
			reg_1 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 8), rt_add_i32(loc_2, 48), 5120, 0)
			rt_store_i32(memory_at_0, loc_2 + 44, reg_1)
			break
		end
		rt_store_i32(memory_at_0, loc_2 + 32, rt_add_i32(loc_0, 296))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 296)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 300)
		rt_store_i32(memory_at_0, loc_2 + 40, 0)
		rt_store_i32(memory_at_0, loc_2 + 36, rt_shr_i32(rt_sub_i32(loc_3, loc_1), 2))
		FUNC_LIST[440](rt_add_i32(loc_2, 32), rt_add_i32(loc_2, 44))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
		if loc_1 == 44 then
			while true do
				while true do
					FUNC_LIST[435](loc_0)
					reg_1 = FUNC_LIST[452](loc_0, 1)
					loc_3 = reg_1
					rt_store_i32(memory_at_0, loc_2 + 20, loc_3)
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_3 + 4)
						if loc_1 == rt_load_i32(memory_at_0, 48612) then
							break
						end
						if rt_load_i32(memory_at_0, 48620) == loc_1 then
							break
						end
						if rt_load_i32(memory_at_0, 48652) == loc_1 then
							break
						end
						if rt_load_i32(memory_at_0, 48644) == loc_1 then
							break
						end
						reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
						loc_1 = reg_0
						rt_store_i32(memory_at_0, loc_2 + 52, 1)
						rt_store_i32(memory_at_0, loc_2 + 48, loc_1)
						rt_store_i32(memory_at_0, loc_1, loc_3)
						reg_1 = FUNC_LIST[471](loc_0, rt_add_i32(loc_3, 8), rt_add_i32(loc_2, 48), 5120, 0)
						rt_store_i32(memory_at_0, loc_2 + 20, reg_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					FUNC_LIST[440](rt_add_i32(loc_2, 32), rt_add_i32(loc_2, 20))
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
					if loc_1 == 44 then
						continue
					end
					break
				end
				break
			end
		end
		while true do
			if loc_1 ~= 61 then
				while true do
					FUNC_LIST[432](loc_0, 61, 1500)
					FUNC_LIST[418](rt_add_i32(loc_2, 48), rt_add_i32(loc_0, 40))
					if rt_load_i32(memory_at_0, loc_2 + 48) ~= 61 then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_0)
			break
		end
		rt_store_i32(memory_at_0, loc_2 + 20, rt_add_i32(loc_0, 308))
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 308)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 312)
		loc_1 = 0
		rt_store_i32(memory_at_0, loc_2 + 28, 0)
		rt_store_i32(memory_at_0, loc_2 + 24, rt_shr_i32(rt_sub_i32(loc_4, loc_3), 2))
		FUNC_LIST[463](loc_0, rt_add_i32(loc_2, 20))
		loc_10 = rt_load_i32(memory_at_0, loc_0 + 124)
		loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 20) + 4), 4))
		rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 44) + 8))
		rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_3 + 16))
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 40)
			if loc_5 == 0 then
				while true do
					rt_store_i64(memory_at_0, loc_2 + 12, rt_i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 32))
			loc_6 = rt_load_i32(memory_at_0, loc_2 + 36)
			reg_0 = FUNC_LIST[392](loc_10, rt_shl_i32(loc_5, 2))
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_2 + 16, loc_5)
			rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
			loc_8 = bit_and(loc_5, 3)
			loc_4 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_4)
			if loc_5 >= 4 then
				while true do
					loc_9 = bit_and(loc_5, 4294967292)
					loc_6 = 0
					while true do
						loc_5 = rt_shl_i32(loc_1, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
						loc_7 = bit_or(loc_5, 4)
						rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
						loc_7 = bit_or(loc_5, 8)
						rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
						loc_5 = bit_or(loc_5, 12)
						rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
						loc_1 = rt_add_i32(loc_1, 4)
						loc_6 = rt_add_i32(loc_6, 4)
						if loc_9 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				break
			end
			loc_5 = 0
			while true do
				loc_6 = rt_shl_i32(loc_1, 2)
				rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_6)))
				loc_1 = rt_add_i32(loc_1, 1)
				loc_5 = rt_add_i32(loc_5, 1)
				if loc_8 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 28)
			if loc_4 == 0 then
				while true do
					rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 20))
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 24)
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), rt_shl_i32(loc_4, 2))
			loc_1 = reg_0
			rt_store_i32(memory_at_0, loc_2 + 8, loc_4)
			rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
			loc_8 = bit_and(loc_4, 3)
			loc_3 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_3)
			loc_5 = 0
			loc_0 = 0
			if loc_4 >= 4 then
				while true do
					loc_9 = bit_and(loc_4, 4294967292)
					loc_6 = 0
					while true do
						loc_4 = rt_shl_i32(loc_0, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
						loc_7 = bit_or(loc_4, 4)
						rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_7)))
						loc_7 = bit_or(loc_4, 8)
						rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_7)))
						loc_4 = bit_or(loc_4, 12)
						rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
						loc_0 = rt_add_i32(loc_0, 4)
						loc_6 = rt_add_i32(loc_6, 4)
						if loc_9 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				break
			end
			while true do
				loc_4 = rt_shl_i32(loc_0, 2)
				rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
				loc_0 = rt_add_i32(loc_0, 1)
				loc_5 = rt_add_i32(loc_5, 1)
				if loc_8 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[392](loc_10, 44)
		reg_0 = FUNC_LIST[342](reg_0, rt_add_i32(loc_2, 48), rt_add_i32(loc_2, 12), rt_add_i32(loc_2, 4))
		loc_1 = reg_0
		loc_0 = rt_load_i32(memory_at_0, loc_2 + 20)
		loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 24), 2))
		if loc_3 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, loc_3)
				break
			end
		end
		loc_0 = rt_load_i32(memory_at_0, loc_2 + 32)
		loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 36), 2))
		if loc_3 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, loc_3)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 80)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[454] = --[[ Luau::Parser::parseCompoundAssignment(Luau::AstExpr*, Luau::AstExprBinary::Op) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_3 == rt_load_i32(memory_at_0, 48612) then
				break
			end
			if rt_load_i32(memory_at_0, 48620) == loc_3 then
				break
			end
			if rt_load_i32(memory_at_0, 48652) == loc_3 then
				break
			end
			if rt_load_i32(memory_at_0, 48644) == loc_3 then
				break
			end
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_4 + 4, 1)
			rt_store_i32(memory_at_0, loc_4, loc_3)
			rt_store_i32(memory_at_0, loc_3, loc_1)
			reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 8), loc_4, 5120, 0)
			loc_1 = reg_0
			break
		end
		FUNC_LIST[435](loc_0)
		reg_0 = FUNC_LIST[459](loc_0, 0)
		loc_3 = reg_0
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
		rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 16))
		reg_0 = FUNC_LIST[392](loc_0, 40)
		reg_0 = FUNC_LIST[344](reg_0, loc_4, loc_2, loc_1, loc_3)
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[455] = --[[ Luau::Parser::parseTypeAlias(Luau::Location const&, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
		while true do
			while true do
				if rt_load_i32_u8(memory_at_0, 49092) ~= 1 then
					break
				end
				if loc_4 ~= 298 then
					break
				end
				reg_0 = FUNC_LIST[472](loc_0, loc_1, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_sub_i32(loc_0, 4294967232)
			while true do
				if loc_4 == 281 then
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 84)
						loc_6 = rt_add_i32(loc_3, 48)
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5 + 8))
						rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_5))
						FUNC_LIST[435](loc_0)
						rt_store_i64(memory_at_0, loc_3 + 28, rt_load_i64(memory_at_0, loc_3 + 48))
						rt_store_i32(memory_at_0, loc_3 + 16, loc_4)
						rt_store_i64(memory_at_0, loc_3 + 20, rt_load_i64(memory_at_0, loc_3 + 40))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[464](loc_0, 4323)
				rt_store_i32(memory_at_0, loc_3 + 16, rt_load_i32(memory_at_0, loc_0 + 168))
				rt_store_i64(memory_at_0, loc_3 + 28, rt_load_i64(memory_at_0, loc_5 + 8))
				rt_store_i64(memory_at_0, loc_3 + 20, rt_load_i64(memory_at_0, loc_5))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_3 + 36, 1)
			FUNC_LIST[473](loc_3, loc_0, 1)
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 60) ~= 61 then
					while true do
						FUNC_LIST[432](loc_0, 61, 2388)
						FUNC_LIST[418](rt_add_i32(loc_3, 40), rt_add_i32(loc_0, 40))
						if rt_load_i32(memory_at_0, loc_3 + 40) ~= 61 then
							desired = 2
							break
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[435](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_add_i32(loc_3, 8)
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 156)
			rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_0 + 72))
			rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_0 + 64))
			loc_4 = 0
			while true do
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_7 == 38 then
					break
				end
				if loc_7 == 124 then
					break
				end
				FUNC_LIST[474](rt_add_i32(loc_3, 72), loc_0, 0, 0)
				loc_4 = rt_load_i32(memory_at_0, loc_3 + 72)
				rt_store_i32(memory_at_0, loc_0 + 156, loc_5)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[475](loc_0, loc_4, rt_add_i32(loc_3, 40))
			loc_4 = reg_0
			rt_store_i32(memory_at_0, loc_0 + 156, loc_5)
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
			rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_1))
			rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_4 + 16))
			reg_0 = FUNC_LIST[392](loc_0, 72)
			reg_0 = FUNC_LIST[350](reg_0, rt_add_i32(loc_3, 40), rt_add_i32(loc_3, 16), rt_add_i32(loc_3, 20), loc_3, loc_6, loc_4, loc_2)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 80)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[456] = --[[ Luau::Parser::parseContinue(Luau::Location const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			if rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 4)) == 0 then
				while true do
					rt_store_i64(memory_at_0, loc_2 + 8, rt_i64_ZERO)
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
					reg_0 = FUNC_LIST[330](reg_0, loc_1)
					loc_4 = reg_0
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
					loc_3 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 4, 1)
					rt_store_i32(memory_at_0, loc_2, loc_3)
					rt_store_i32(memory_at_0, loc_3, loc_4)
					reg_0 = FUNC_LIST[458](loc_0, loc_1, rt_add_i32(loc_2, 8), loc_2, 3101, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
			reg_0 = FUNC_LIST[330](reg_0, loc_1)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[457] = --[[ Luau::Parser::parseDeclaration(Luau::Location const&, Luau::AstArray<Luau::AstAttr*> const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local loc_22 = rt_i64_ZERO
	local loc_23 = rt_i64_ZERO
	local loc_24 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 224)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = rt_add_i32(loc_0, 60)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
		while true do
			while true do
				while true do
					if rt_load_i32(memory_at_0, loc_2 + 4) ~= 0 then
						while true do
							if loc_4 == 298 then
								while true do
									loc_7 = rt_add_i32(loc_0, 40)
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							rt_store_i64(memory_at_0, loc_3 + 24, rt_i64_ZERO)
							rt_store_i64(memory_at_0, loc_3 + 104, rt_i64_ZERO)
							FUNC_LIST[395](rt_add_i32(loc_3, 56), loc_5)
							rt_store_i32(memory_at_0, loc_3 + 16, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 67), 0) then rt_load_i32(memory_at_0, loc_3 + 56) else rt_add_i32(loc_3, 56)))
							reg_0 = FUNC_LIST[458](loc_0, rt_sub_i32(loc_0, 4294967232), rt_add_i32(loc_3, 24), rt_add_i32(loc_3, 104), 5449, rt_add_i32(loc_3, 16))
							loc_0 = reg_0
							if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_3 + 67), 0) then
								desired = 1
								break
							end
							FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 56), bit_and(rt_load_i32(memory_at_0, loc_3 + 64), 2147483647))
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_add_i32(loc_0, 40)
					if loc_4 ~= 298 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[435](loc_0)
				while true do
					if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 84)
							loc_4 = rt_sub_i32(loc_3, 4294967232)
							loc_6 = rt_sub_i32(loc_0, 4294967232)
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_6 + 8))
							rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
							FUNC_LIST[435](loc_0)
							loc_6 = rt_add_i32(loc_3, 28)
							rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4))
							rt_store_i64(memory_at_0, loc_3 + 28, rt_load_i64(memory_at_0, loc_3 + 56))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[464](loc_0, 4207)
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 168)
					loc_20 = rt_load_i64(memory_at_0, loc_0 + 64)
					rt_store_i64(memory_at_0, loc_3 + 36, loc_20)
					rt_store_i64(memory_at_0, loc_3 + 28, loc_20)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 24, loc_5)
				FUNC_LIST[473](rt_add_i32(loc_3, 104), loc_0, 0)
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 60)
				rt_store_i32(memory_at_0, loc_3 + 212, loc_5)
				rt_store_i64(memory_at_0, loc_3 + 216, rt_load_i64(memory_at_0, loc_0 + 64))
				while true do
					if loc_5 ~= 40 then
						while true do
							FUNC_LIST[432](loc_0, 40, 3329)
							FUNC_LIST[418](rt_add_i32(loc_3, 56), loc_7)
							if rt_load_i32(memory_at_0, loc_3 + 56) ~= 40 then
								desired = 3
								break
							end
							FUNC_LIST[435](loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 200, rt_add_i32(loc_0, 344))
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 344)
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 348)
				rt_store_i32(memory_at_0, loc_3 + 208, 0)
				rt_store_i32(memory_at_0, loc_3 + 204, rt_div_i32(rt_sub_i32(loc_4, loc_5), 24))
				loc_5 = rt_add_i32(loc_3, 192)
				rt_store_i64(memory_at_0, loc_5, rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_3 + 184, rt_i64_ZERO)
				while true do
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) == 41 then
							break
						end
						FUNC_LIST[476](rt_add_i32(loc_3, 56), loc_0, rt_add_i32(loc_3, 200), 1)
						rt_store_i64(memory_at_0, loc_3 + 192, rt_load_i64(memory_at_0, loc_3 + 68))
						rt_store_i64(memory_at_0, loc_3 + 184, rt_load_i64(memory_at_0, loc_3 + 60))
						loc_12 = rt_load_i32_u8(memory_at_0, loc_3 + 56)
						loc_13 = rt_load_i32(memory_at_0, loc_3 + 76)
						if rt_load_i32(memory_at_0, loc_0 + 60) == 41 then
							break
						end
						FUNC_LIST[469](loc_0, 41, rt_add_i32(loc_3, 212), 0)
						reg_0 = FUNC_LIST[470](loc_0, 41, loc_3, 0)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[477](rt_add_i32(loc_3, 56), loc_0)
				loc_5 = 0
				rt_store_i32(memory_at_0, loc_3 + 164, 0)
				rt_store_i64(memory_at_0, loc_3 + 156, rt_i64_ZERO)
				loc_4 = (if rt_load_i32_u8(memory_at_0, loc_3 + 68) ~= 0 then rt_add_i32(loc_3, 56) else rt_add_i32(loc_3, 156))
				rt_store_i32(memory_at_0, loc_3 + 176, rt_load_i32(memory_at_0, loc_4 + 8))
				rt_store_i64(memory_at_0, loc_3 + 168, rt_load_i64(memory_at_0, loc_4))
				loc_20 = rt_load_i64(memory_at_0, loc_0 + 72)
				rt_store_i32(memory_at_0, loc_3 + 156, rt_add_i32(loc_0, 380))
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 380)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 384)
				rt_store_i32(memory_at_0, loc_3 + 164, 0)
				rt_store_i32(memory_at_0, loc_3 + 160, rt_shr_i32(rt_sub_i32(loc_6, loc_4), 2))
				rt_store_i32(memory_at_0, loc_3 + 144, rt_add_i32(loc_0, 428))
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 428)
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 432)
				rt_store_i32(memory_at_0, loc_3 + 152, 0)
				rt_store_i32(memory_at_0, loc_3 + 148, rt_div_i32(rt_sub_i32(loc_6, loc_4), 20))
				while true do
					if rt_load_i32(memory_at_0, loc_3 + 208) ~= 0 then
						while true do
							loc_15 = loc_3
							loc_7 = rt_add_i32(loc_15, 60)
							loc_16 = loc_7
							loc_8 = rt_add_i32(loc_16, 8)
							while true do
								loc_4 = rt_mul_i32(loc_5, 24)
								loc_6 = rt_add_i32(rt_add_i32(loc_4, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 200)), rt_mul_i32(rt_load_i32(memory_at_0, loc_3 + 204), 24))), 20)
								if rt_load_i32(memory_at_0, loc_6) == 0 then
									while true do
										loc_21 = rt_load_i64(memory_at_0, loc_1)
										rt_store_i64(memory_at_0, loc_3 + 64, loc_20)
										rt_store_i64(memory_at_0, loc_3 + 56, loc_21)
										rt_store_i64(memory_at_0, loc_3 + 124, rt_i64_ZERO)
										rt_store_i64(memory_at_0, loc_3 + 136, rt_i64_ZERO)
										reg_0 = FUNC_LIST[458](loc_0, rt_add_i32(loc_3, 56), rt_add_i32(loc_3, 124), rt_add_i32(loc_3, 136), 5203, 0)
										desired = 3
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								FUNC_LIST[440](rt_add_i32(loc_3, 156), loc_6)
								loc_4 = rt_add_i32(loc_4, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 200)), rt_mul_i32(rt_load_i32(memory_at_0, loc_3 + 204), 24)))
								rt_store_i32(memory_at_0, loc_3 + 56, rt_load_i32(memory_at_0, loc_4))
								rt_store_i64(memory_at_0, loc_16 + 8, rt_load_i64(memory_at_0, loc_4 + 12))
								rt_store_i64(memory_at_0, loc_15 + 60, rt_load_i64(memory_at_0, loc_4 + 4))
								FUNC_LIST[478](rt_add_i32(loc_3, 144), rt_add_i32(loc_3, 56))
								loc_5 = rt_add_i32(loc_5, 1)
								if loc_5 < rt_load_i32(memory_at_0, loc_3 + 208) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if bit_and(loc_12, (if loc_13 == 0 then 1 else 0)) ~= 0 then
						while true do
							loc_21 = rt_load_i64(memory_at_0, loc_1)
							rt_store_i64(memory_at_0, loc_3 + 64, loc_20)
							rt_store_i64(memory_at_0, loc_3 + 56, loc_21)
							rt_store_i64(memory_at_0, loc_3 + 124, rt_i64_ZERO)
							rt_store_i64(memory_at_0, loc_3 + 136, rt_i64_ZERO)
							reg_0 = FUNC_LIST[458](loc_0, rt_add_i32(loc_3, 56), rt_add_i32(loc_3, 124), rt_add_i32(loc_3, 136), 5203, 0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_14 = rt_load_i32(memory_at_0, loc_0 + 124)
					loc_21 = rt_load_i64(memory_at_0, loc_1)
					rt_store_i64(memory_at_0, loc_3 + 64, loc_20)
					rt_store_i64(memory_at_0, loc_3 + 56, loc_21)
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_3 + 164)
						if loc_7 == 0 then
							while true do
								rt_store_i64(memory_at_0, loc_3 + 124, rt_i64_ZERO)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 156))
						loc_6 = rt_load_i32(memory_at_0, loc_3 + 160)
						reg_0 = FUNC_LIST[392](loc_14, rt_shl_i32(loc_7, 2))
						loc_4 = reg_0
						rt_store_i32(memory_at_0, loc_3 + 128, loc_7)
						rt_store_i32(memory_at_0, loc_3 + 124, loc_4)
						loc_9 = bit_and(loc_7, 3)
						loc_6 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_5)
						loc_8 = 0
						loc_5 = 0
						if loc_7 >= 4 then
							while true do
								loc_11 = bit_and(loc_7, 4294967292)
								loc_1 = 0
								while true do
									loc_7 = rt_shl_i32(loc_5, 2)
									rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_7)))
									loc_10 = bit_or(loc_7, 4)
									rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_10)))
									loc_10 = bit_or(loc_7, 8)
									rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_10)))
									loc_7 = bit_or(loc_7, 12)
									rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_7)))
									loc_5 = rt_add_i32(loc_5, 4)
									loc_1 = rt_add_i32(loc_1, 4)
									if loc_11 ~= loc_1 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_9 == 0 then
							break
						end
						while true do
							loc_7 = rt_shl_i32(loc_5, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_7)))
							loc_5 = rt_add_i32(loc_5, 1)
							loc_8 = rt_add_i32(loc_8, 1)
							if loc_9 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_11 = rt_add_i32(loc_3, 112)
					loc_17 = rt_add_i32(loc_3, 28)
					rt_store_i32(memory_at_0, loc_3 + 132, loc_13)
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_3 + 152)
						if loc_6 == 0 then
							while true do
								rt_store_i64(memory_at_0, loc_3 + 136, rt_i64_ZERO)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 144))
						loc_7 = rt_load_i32(memory_at_0, loc_3 + 148)
						reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), rt_mul_i32(loc_6, 20))
						loc_5 = reg_0
						rt_store_i32(memory_at_0, loc_3 + 140, loc_6)
						rt_store_i32(memory_at_0, loc_3 + 136, loc_5)
						loc_10 = bit_and(loc_6, 3)
						loc_4 = rt_add_i32(rt_mul_i32(loc_7, 20), loc_4)
						loc_8 = 0
						loc_0 = 0
						if loc_6 >= 4 then
							while true do
								loc_9 = bit_and(loc_6, 4294967292)
								loc_1 = 0
								while true do
									loc_7 = rt_mul_i32(loc_0, 20)
									loc_6 = rt_add_i32(loc_7, loc_5)
									loc_7 = rt_add_i32(loc_4, loc_7)
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
									rt_store_i32(memory_at_0, loc_6 + 16, rt_load_i32(memory_at_0, loc_7 + 16))
									rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
									loc_7 = rt_mul_i32(bit_or(loc_0, 1), 20)
									loc_6 = rt_add_i32(loc_7, loc_5)
									loc_7 = rt_add_i32(loc_4, loc_7)
									rt_store_i32(memory_at_0, loc_6 + 16, rt_load_i32(memory_at_0, loc_7 + 16))
									rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
									loc_7 = rt_mul_i32(bit_or(loc_0, 2), 20)
									loc_6 = rt_add_i32(loc_7, loc_5)
									loc_7 = rt_add_i32(loc_4, loc_7)
									rt_store_i32(memory_at_0, loc_6 + 16, rt_load_i32(memory_at_0, loc_7 + 16))
									rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
									loc_7 = rt_mul_i32(bit_or(loc_0, 3), 20)
									loc_6 = rt_add_i32(loc_7, loc_5)
									loc_7 = rt_add_i32(loc_4, loc_7)
									rt_store_i32(memory_at_0, loc_6 + 16, rt_load_i32(memory_at_0, loc_7 + 16))
									rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
									loc_0 = rt_add_i32(loc_0, 4)
									loc_1 = rt_add_i32(loc_1, 4)
									if loc_9 ~= loc_1 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_10 == 0 then
							break
						end
						while true do
							loc_7 = rt_mul_i32(loc_0, 20)
							loc_6 = rt_add_i32(loc_7, loc_5)
							loc_7 = rt_add_i32(loc_4, loc_7)
							rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
							rt_store_i32(memory_at_0, loc_6 + 16, rt_load_i32(memory_at_0, loc_7 + 16))
							rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
							loc_0 = rt_add_i32(loc_0, 1)
							loc_8 = rt_add_i32(loc_8, 1)
							if loc_10 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[392](loc_14, 124)
					reg_0 = FUNC_LIST[356](reg_0, rt_add_i32(loc_3, 56), loc_2, rt_add_i32(loc_3, 24), loc_17, rt_add_i32(loc_3, 104), loc_11, rt_add_i32(loc_3, 124), rt_add_i32(loc_3, 136), bit_and(loc_12, 1), rt_add_i32(loc_3, 184), rt_add_i32(loc_3, 168))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = reg_0
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 144)
				loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(rt_load_i32(memory_at_0, loc_3 + 148), 20))
				if loc_4 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
					while true do
						rt_store_i32(memory_at_0, loc_5 + 4, loc_4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 156)
				loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_shl_i32(rt_load_i32(memory_at_0, loc_3 + 160), 2))
				if loc_4 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
					while true do
						rt_store_i32(memory_at_0, loc_5 + 4, loc_4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 200)
				loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(rt_load_i32(memory_at_0, loc_3 + 204), 24))
				if loc_4 == rt_load_i32(memory_at_0, loc_5 + 4) then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_5 + 4, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 84)
				if loc_6 == 0 then
					break
				end
				reg_0 = FUNC_LIST[584](loc_6, 2060)
				if reg_0 ~= 0 then
					break
				end
				FUNC_LIST[435](loc_0)
				loc_6 = rt_sub_i32(loc_0, 4294967232)
				loc_23 = rt_load_i64(memory_at_0, loc_0 + 64)
				while true do
					if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
						while true do
							loc_4 = rt_load_i32(memory_at_0, loc_0 + 84)
							loc_8 = rt_sub_i32(loc_3, 4294967232)
							rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6 + 8))
							rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
							FUNC_LIST[435](loc_0)
							rt_store_i64(memory_at_0, loc_3 + 116, rt_load_i64(memory_at_0, loc_8))
							rt_store_i64(memory_at_0, loc_3 + 108, rt_load_i64(memory_at_0, loc_3 + 56))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[464](loc_0, 4196)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 168)
					loc_20 = rt_load_i64(memory_at_0, loc_0 + 64)
					rt_store_i64(memory_at_0, loc_3 + 116, loc_20)
					rt_store_i64(memory_at_0, loc_3 + 108, loc_20)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 104, loc_4)
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 84)
					if loc_4 == 0 then
						while true do
							reg_0 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = FUNC_LIST[584](loc_4, 2376)
					reg_0 = 0
					if reg_1 ~= 0 then
						break
					end
					FUNC_LIST[435](loc_0)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_0 + 84)
								FUNC_LIST[435](loc_0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[464](loc_0, 4191)
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 168)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_12 = bit_and(loc_4, 4294967040)
					loc_22 = rt_i64_from_u32(0, 1)
					reg_0 = bit_and(loc_4, 255)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_13 = reg_0
				rt_store_i32(memory_at_0, loc_3 + 184, rt_add_i32(loc_0, 404))
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 404)
				loc_8 = rt_load_i32(memory_at_0, loc_0 + 408)
				rt_store_i32(memory_at_0, loc_3 + 192, 0)
				rt_store_i32(memory_at_0, loc_3 + 188, rt_div_i32(rt_sub_i32(loc_8, loc_4), 44))
				loc_11 = rt_add_i32(loc_3, 28)
				loc_2 = 0
				while true do
					while true do
						while true do
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_5)
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 2, 1, 1, 0, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(loc_4, 295)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[479](rt_add_i32(loc_3, 56), loc_0)
							FUNC_LIST[480](rt_add_i32(loc_3, 184), rt_add_i32(loc_3, 56))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							while true do
								while true do
									while true do
										while true do
											if loc_4 == 91 then
												while true do
													FUNC_LIST[418](rt_add_i32(loc_3, 56), loc_7)
													if rt_load_i32(memory_at_0, loc_3 + 56) == 278 then
														desired = 9
														break
													end
													FUNC_LIST[418](rt_add_i32(loc_3, 24), loc_7)
													if rt_load_i32(memory_at_0, loc_3 + 24) == 279 then
														desired = 9
														break
													end
													reg_0 = rt_load_i32(memory_at_0, loc_5)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											else
												while true do
													reg_0 = loc_4
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_4 = reg_0
											if loc_4 ~= 91 then
												desired = 5
												break
											end
											loc_20 = rt_load_i64(memory_at_0, loc_0 + 64)
											FUNC_LIST[435](loc_0)
											loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
											if loc_2 == 0 then
												desired = 6
												break
											end
											loc_1 = rt_sub_i32(loc_3, 4294967232)
											loc_18 = loc_6
											loc_10 = rt_add_i32(loc_18, 8)
											rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_10))
											rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
											loc_8 = 0
											while true do
												loc_9 = rt_load_i32(memory_at_0, loc_5)
												if loc_9 == 38 then
													break
												end
												if loc_9 == 124 then
													break
												end
												FUNC_LIST[474](rt_add_i32(loc_3, 24), loc_0, 0, 0)
												loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
												rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = FUNC_LIST[475](loc_0, loc_8, rt_add_i32(loc_3, 56))
											loc_9 = reg_0
											rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
											rt_store_i64(memory_at_0, loc_3 + 60, loc_20)
											rt_store_i32(memory_at_0, loc_3 + 56, 91)
											if rt_load_i32(memory_at_0, loc_0 + 60) == 93 then
												desired = 8
												break
											end
											FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_3, 56), 0)
											reg_0 = FUNC_LIST[470](loc_0, 93, loc_3, 0)
											desired = 7
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32(memory_at_0, loc_3 + 48, rt_load_i32(memory_at_0, loc_5 + 24))
										rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_5 + 16))
										rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_5 + 8))
										rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_5))
										FUNC_LIST[435](loc_0)
										loc_20 = rt_load_i64(memory_at_0, loc_0 + 64)
										FUNC_LIST[481](rt_add_i32(loc_3, 212), loc_0)
										loc_21 = rt_load_i64(memory_at_0, loc_0 + 96)
										rt_store_i32(memory_at_0, loc_3 + 56, rt_load_i32(memory_at_0, loc_3 + 24))
										rt_store_i64(memory_at_0, loc_3 + 60, rt_load_i64(memory_at_0, loc_3 + 28))
										while true do
											if rt_load_i32(memory_at_0, loc_0 + 60) ~= 93 then
												while true do
													FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_3, 56), 0)
													reg_0 = FUNC_LIST[470](loc_0, 93, loc_3, 0)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[435](loc_0)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										while true do
											if rt_load_i32(memory_at_0, loc_5) ~= 58 then
												while true do
													FUNC_LIST[432](loc_0, 58, 3265)
													FUNC_LIST[418](rt_add_i32(loc_3, 56), loc_7)
													if rt_load_i32(memory_at_0, loc_3 + 56) ~= 58 then
														desired = 9
														break
													end
													FUNC_LIST[435](loc_0)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[435](loc_0)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
										rt_store_i64(memory_at_0, rt_sub_i32(loc_3, 4294967232), rt_load_i64(memory_at_0, loc_6 + 8))
										rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
										loc_8 = 0
										while true do
											loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
											if loc_1 == 38 then
												break
											end
											if loc_1 == 124 then
												break
											end
											FUNC_LIST[474](rt_add_i32(loc_3, 200), loc_0, 0, 0)
											loc_8 = rt_load_i32(memory_at_0, loc_3 + 200)
											rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[475](loc_0, loc_8, rt_add_i32(loc_3, 56))
										loc_8 = reg_0
										rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
										while true do
											if rt_load_i32_u8(memory_at_0, loc_3 + 220) ~= 1 then
												break
											end
											loc_1 = rt_load_i32(memory_at_0, loc_3 + 212)
											loc_4 = rt_load_i32(memory_at_0, loc_3 + 216)
											reg_0 = FUNC_LIST[610](loc_1, loc_4)
											if reg_0 < loc_4 then
												break
											end
											rt_store_i32_n8(memory_at_0, loc_3 + 80, 0)
											rt_store_i32(memory_at_0, loc_3 + 76, loc_8)
											rt_store_i64(memory_at_0, loc_3 + 68, loc_21)
											rt_store_i64(memory_at_0, loc_3 + 60, loc_20)
											rt_store_i32(memory_at_0, loc_3 + 56, loc_1)
											rt_store_i64(memory_at_0, loc_3 + 84, rt_load_i64(memory_at_0, loc_3 + 28))
											rt_store_i64(memory_at_0, loc_3 + 92, rt_load_i64(memory_at_0, loc_0 + 96))
											FUNC_LIST[480](rt_add_i32(loc_3, 184), rt_add_i32(loc_3, 56))
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[438](loc_0, loc_11, 7118, 0)
										desired = 3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[435](loc_0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if rt_load_i32(memory_at_0, loc_5) ~= 58 then
										while true do
											FUNC_LIST[432](loc_0, 58, 5108)
											FUNC_LIST[418](rt_add_i32(loc_3, 56), loc_7)
											if rt_load_i32(memory_at_0, loc_3 + 56) ~= 58 then
												desired = 7
												break
											end
											FUNC_LIST[435](loc_0)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[435](loc_0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
								rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_18 + 8))
								rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
								loc_8 = 0
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
									if loc_1 == 38 then
										break
									end
									if loc_1 == 124 then
										break
									end
									FUNC_LIST[474](rt_add_i32(loc_3, 24), loc_0, 0, 0)
									loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
									rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[475](loc_0, loc_8, rt_add_i32(loc_3, 56))
								loc_8 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
								loc_21 = rt_load_i64(memory_at_0, loc_8 + 16)
								reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 48)
								loc_4 = reg_0
								rt_store_i32_n8(memory_at_0, loc_4 + 44, 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 28, 0)
								rt_store_i32(memory_at_0, loc_4 + 24, 3)
								rt_store_i64(memory_at_0, loc_4 + 16, loc_21)
								rt_store_i64(memory_at_0, loc_4 + 8, loc_20)
								rt_store_i32(memory_at_0, loc_4 + 4, loc_8)
								rt_store_i32(memory_at_0, loc_4, loc_9)
								FUNC_LIST[438](loc_0, rt_add_i32(loc_4, 8), 2844, 0)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_1 = rt_sub_i32(loc_3, 4294967232)
							loc_19 = loc_6
							loc_10 = rt_add_i32(loc_19, 8)
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_10))
							rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
							loc_8 = 0
							while true do
								loc_9 = rt_load_i32(memory_at_0, loc_5)
								if loc_9 == 38 then
									break
								end
								if loc_9 == 124 then
									break
								end
								FUNC_LIST[474](rt_add_i32(loc_3, 24), loc_0, 0, 0)
								loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
								rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[475](loc_0, loc_8, rt_add_i32(loc_3, 56))
							loc_9 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
							rt_store_i64(memory_at_0, loc_3 + 60, loc_20)
							rt_store_i32(memory_at_0, loc_3 + 56, 91)
							while true do
								if rt_load_i32(memory_at_0, loc_0 + 60) ~= 93 then
									while true do
										FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_3, 56), 0)
										reg_0 = FUNC_LIST[470](loc_0, 93, loc_3, 0)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if rt_load_i32(memory_at_0, loc_5) ~= 58 then
									while true do
										FUNC_LIST[432](loc_0, 58, 5108)
										FUNC_LIST[418](rt_add_i32(loc_3, 56), loc_7)
										if rt_load_i32(memory_at_0, loc_3 + 56) ~= 58 then
											desired = 6
											break
										end
										FUNC_LIST[435](loc_0)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_8 = rt_load_i32(memory_at_0, loc_0 + 156)
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_19 + 8))
							rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
							loc_4 = 0
							while true do
								loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
								if loc_1 == 38 then
									break
								end
								if loc_1 == 124 then
									break
								end
								FUNC_LIST[474](rt_add_i32(loc_3, 24), loc_0, 0, 0)
								loc_4 = rt_load_i32(memory_at_0, loc_3 + 24)
								rt_store_i32(memory_at_0, loc_0 + 156, loc_8)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[475](loc_0, loc_4, rt_add_i32(loc_3, 56))
							loc_4 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 156, loc_8)
							loc_21 = rt_load_i64(memory_at_0, loc_4 + 16)
							reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 48)
							loc_2 = reg_0
							rt_store_i32_n8(memory_at_0, loc_2 + 44, 0)
							rt_store_i32_n8(memory_at_0, loc_2 + 28, 0)
							rt_store_i32(memory_at_0, loc_2 + 24, 3)
							rt_store_i64(memory_at_0, loc_2 + 16, loc_21)
							rt_store_i64(memory_at_0, loc_2 + 8, loc_20)
							rt_store_i32(memory_at_0, loc_2 + 4, loc_4)
							rt_store_i32(memory_at_0, loc_2, loc_9)
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_20 = rt_load_i64(memory_at_0, loc_6)
						while true do
							if loc_4 == 281 then
								while true do
									loc_21 = rt_load_i64(memory_at_0, loc_0 + 72)
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 84)
									FUNC_LIST[435](loc_0)
									reg_0 = loc_20
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[464](loc_0, 4177)
							loc_1 = rt_load_i32(memory_at_0, loc_0 + 168)
							loc_21 = rt_load_i64(memory_at_0, loc_0 + 64)
							reg_0 = loc_21
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_24 = reg_0
						while true do
							if rt_load_i32(memory_at_0, loc_5) ~= 58 then
								while true do
									FUNC_LIST[432](loc_0, 58, 3265)
									FUNC_LIST[418](rt_add_i32(loc_3, 56), loc_7)
									if rt_load_i32(memory_at_0, loc_3 + 56) ~= 58 then
										desired = 5
										break
									end
									FUNC_LIST[435](loc_0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[435](loc_0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
						rt_store_i64(memory_at_0, rt_sub_i32(loc_3, 4294967232), rt_load_i64(memory_at_0, loc_6 + 8))
						rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_6))
						loc_8 = 0
						while true do
							loc_10 = rt_load_i32(memory_at_0, loc_0 + 60)
							if loc_10 == 38 then
								break
							end
							if loc_10 == 124 then
								break
							end
							FUNC_LIST[474](rt_add_i32(loc_3, 24), loc_0, 0, 0)
							loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
							rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[475](loc_0, loc_8, rt_add_i32(loc_3, 56))
						loc_8 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
						rt_store_i64(memory_at_0, loc_3 + 84, loc_20)
						rt_store_i32_n8(memory_at_0, loc_3 + 80, 0)
						rt_store_i32(memory_at_0, loc_3 + 76, loc_8)
						rt_store_i64(memory_at_0, loc_3 + 68, loc_21)
						rt_store_i64(memory_at_0, loc_3 + 60, loc_24)
						rt_store_i32(memory_at_0, loc_3 + 56, loc_1)
						rt_store_i64(memory_at_0, loc_3 + 92, rt_load_i64(memory_at_0, loc_0 + 96))
						FUNC_LIST[480](rt_add_i32(loc_3, 184), rt_add_i32(loc_3, 56))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_20 = rt_load_i64(memory_at_0, loc_0 + 72)
				FUNC_LIST[435](loc_0)
				loc_11 = rt_load_i32(memory_at_0, loc_0 + 124)
				rt_store_i64(memory_at_0, loc_3 + 64, loc_20)
				rt_store_i64(memory_at_0, loc_3 + 56, loc_23)
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_3 + 192)
					if loc_5 == 0 then
						while true do
							rt_store_i64(memory_at_0, loc_3 + 212, rt_i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 184))
					loc_4 = rt_load_i32(memory_at_0, loc_3 + 188)
					reg_0 = FUNC_LIST[392](loc_11, rt_mul_i32(loc_5, 44))
					loc_6 = reg_0
					rt_store_i32(memory_at_0, loc_3 + 216, loc_5)
					rt_store_i32(memory_at_0, loc_3 + 212, loc_6)
					loc_10 = bit_and(loc_5, 3)
					loc_7 = rt_add_i32(rt_mul_i32(loc_4, 44), loc_0)
					loc_8 = 0
					loc_0 = 0
					if loc_5 >= 4 then
						while true do
							loc_9 = bit_and(loc_5, 4294967292)
							loc_1 = 0
							while true do
								loc_4 = rt_mul_i32(loc_0, 44)
								loc_5 = rt_add_i32(loc_4, loc_6)
								loc_4 = rt_add_i32(loc_4, loc_7)
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
								rt_store_i32(memory_at_0, loc_5 + 40, rt_load_i32(memory_at_0, loc_4 + 40))
								rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_4 + 32))
								rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_4 + 24))
								rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
								rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
								loc_4 = rt_mul_i32(bit_or(loc_0, 1), 44)
								loc_5 = rt_add_i32(loc_4, loc_6)
								loc_4 = rt_add_i32(loc_4, loc_7)
								rt_store_i32(memory_at_0, loc_5 + 40, rt_load_i32(memory_at_0, loc_4 + 40))
								rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_4 + 32))
								rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_4 + 24))
								rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
								rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
								loc_4 = rt_mul_i32(bit_or(loc_0, 2), 44)
								loc_5 = rt_add_i32(loc_4, loc_6)
								loc_4 = rt_add_i32(loc_4, loc_7)
								rt_store_i32(memory_at_0, loc_5 + 40, rt_load_i32(memory_at_0, loc_4 + 40))
								rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_4 + 32))
								rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_4 + 24))
								rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
								rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
								loc_4 = rt_mul_i32(bit_or(loc_0, 3), 44)
								loc_5 = rt_add_i32(loc_4, loc_6)
								loc_4 = rt_add_i32(loc_4, loc_7)
								rt_store_i32(memory_at_0, loc_5 + 40, rt_load_i32(memory_at_0, loc_4 + 40))
								rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_4 + 32))
								rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_4 + 24))
								rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
								rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
								loc_0 = rt_add_i32(loc_0, 4)
								loc_1 = rt_add_i32(loc_1, 4)
								if loc_9 ~= loc_1 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_10 == 0 then
						break
					end
					while true do
						loc_4 = rt_mul_i32(loc_0, 44)
						loc_5 = rt_add_i32(loc_4, loc_6)
						loc_4 = rt_add_i32(loc_4, loc_7)
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
						rt_store_i32(memory_at_0, loc_5 + 40, rt_load_i32(memory_at_0, loc_4 + 40))
						rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_4 + 32))
						rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_4 + 24))
						rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
						loc_0 = rt_add_i32(loc_0, 1)
						loc_8 = rt_add_i32(loc_8, 1)
						if loc_10 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[392](loc_11, 52)
				loc_0 = reg_0
				loc_20 = rt_bit_or_i64(rt_extend_i64_u32(bit_or(loc_12, loc_13)), loc_22)
				rt_store_i64(memory_at_0, loc_3 + 8, loc_20)
				rt_store_i64(memory_at_0, loc_3 + 24, loc_20)
				reg_0 = FUNC_LIST[358](loc_0, rt_add_i32(loc_3, 56), rt_add_i32(loc_3, 104), rt_add_i32(loc_3, 8), rt_add_i32(loc_3, 212), loc_2)
				loc_0 = reg_0
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 184)
				loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(rt_load_i32(memory_at_0, loc_3 + 188), 44))
				if loc_4 == rt_load_i32(memory_at_0, loc_5 + 4) then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_5 + 4, loc_4)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_4 == 281 then
				while true do
					loc_5 = rt_sub_i32(loc_3, 4294967232)
					rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_0 + 72))
					rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_0 + 64))
					FUNC_LIST[435](loc_0)
					rt_store_i64(memory_at_0, loc_3 + 36, rt_load_i64(memory_at_0, loc_5))
					rt_store_i32(memory_at_0, loc_3 + 24, loc_6)
					rt_store_i64(memory_at_0, loc_3 + 28, rt_load_i64(memory_at_0, loc_3 + 56))
					rt_store_i32_n8(memory_at_0, loc_3 + 44, 1)
					loc_5 = rt_sub_i32(loc_0, 4294967232)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) ~= 58 then
							while true do
								FUNC_LIST[432](loc_0, 58, 3357)
								FUNC_LIST[418](rt_add_i32(loc_3, 56), loc_7)
								if rt_load_i32(memory_at_0, loc_3 + 56) ~= 58 then
									desired = 3
									break
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						break
					end
					loc_6 = rt_add_i32(loc_3, 28)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
					rt_store_i64(memory_at_0, rt_sub_i32(loc_3, 4294967232), rt_load_i64(memory_at_0, loc_5 + 8))
					rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_5))
					loc_5 = 0
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 60)
						if loc_7 == 38 then
							break
						end
						if loc_7 == 124 then
							break
						end
						FUNC_LIST[474](rt_add_i32(loc_3, 104), loc_0, 0, 1)
						loc_5 = rt_load_i32(memory_at_0, loc_3 + 104)
						rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
						break
					end
					if desired then
						break
					end
					reg_0 = FUNC_LIST[475](loc_0, loc_5, rt_add_i32(loc_3, 56))
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_3 + 64, rt_load_i64(memory_at_0, loc_5 + 16))
					reg_0 = FUNC_LIST[392](loc_0, 52)
					reg_0 = FUNC_LIST[354](reg_0, rt_add_i32(loc_3, 56), rt_add_i32(loc_3, 24), loc_6, loc_5)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[464](loc_0, 4333)
			rt_store_i64(memory_at_0, loc_3 + 56, rt_i64_ZERO)
			rt_store_i64(memory_at_0, loc_3 + 24, rt_i64_ZERO)
			reg_0 = FUNC_LIST[458](loc_0, loc_1, rt_add_i32(loc_3, 56), rt_add_i32(loc_3, 24), 7923, 0)
			loc_0 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 224)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[458] = --[[ Luau::Parser::reportStatError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, Luau::AstArray<Luau::AstStat*> const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 12, loc_5)
		FUNC_LIST[482](loc_0, loc_1, loc_4, loc_5)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 236)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 240)
		reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 48)
		reg_0 = FUNC_LIST[360](reg_0, loc_1, loc_2, loc_3, rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_4, loc_5), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[459] = --[[ Luau::Parser::parseExpr(unsigned int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 156)
		loc_4 = rt_add_i32(loc_9, 1)
		rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
		while true do
			while true do
				if loc_4 <= rt_load_i32(memory_at_0, 49008) then
					while true do
						loc_7 = rt_sub_i32(loc_0, 4294967232)
						loc_10 = rt_load_i64(memory_at_0, loc_0 + 64)
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
											if not br_map[1] then
												br_map[1] = (function()
													return { [0] = 2, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, }
												end)()
											end
											temp = br_map[1][rt_sub_i32(loc_4, 33)] or 3
											if temp < 2 then
												if temp < 1 then
													break
												else
													desired = 7
													break
												end
											elseif temp > 2 then
												if temp < 4 then
													desired = 5
													break
												else
													desired = 4
													break
												end
											else
												desired = 6
												break
											end
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										loc_2 = 1
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_2 = 2
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_7 + 8))
								rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_7))
								FUNC_LIST[438](loc_0, rt_add_i32(loc_3, 32), 6599, 0)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_4 == 303 then
								desired = 2
								break
							end
							break
						end
						if desired then
							break
						end
						reg_0 = FUNC_LIST[483](loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_3, 3398)
				FUNC_LIST[427](rt_sub_i32(loc_0, 4294967232), 4634, loc_3)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[435](loc_0)
			reg_0 = FUNC_LIST[459](loc_0, 8)
			loc_4 = reg_0
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 124)
			rt_store_i64(memory_at_0, loc_3 + 32, loc_10)
			rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_4 + 16))
			reg_0 = FUNC_LIST[392](loc_5, 32)
			reg_0 = FUNC_LIST[308](reg_0, rt_add_i32(loc_3, 32), loc_2, loc_4)
			break
		end
		loc_8 = reg_0
		loc_4 = 0
		loc_2 = 0
		loc_5 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				loc_6 = rt_load_i32(memory_at_0, loc_0 + 60)
																				if not br_map[2] then
																					br_map[2] = (function()
																						return { [0] = 5, 16, 16, 16, 16, 2, 17, 16, 1, 16, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, }
																					end)()
																				end
																				temp = br_map[2][rt_sub_i32(loc_6, 37)] or 0
																				if temp < 6 then
																					if temp < 2 then
																						if temp < 1 then
																							break
																						else
																							desired = 17
																							break
																						end
																					elseif temp > 2 then
																						if temp < 5 then
																							desired = 15
																							break
																						else
																							desired = 13
																							break
																						end
																					else
																						desired = 16
																						break
																					end
																				elseif temp > 6 then
																					if temp < 16 then
																						if temp < 12 then
																							desired = 8
																							break
																						else
																							desired = 6
																							break
																						end
																					elseif temp > 16 then
																						desired = 1
																						break
																					else
																						desired = 2
																						break
																					end
																				else
																					desired = 12
																					break
																				end
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			if not br_map[3] then
																				br_map[3] = (function()
																					return { [0] = 8, 10, 12, 7, 6, 15, 15, 15, 3, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, }
																				end)()
																			end
																			temp = br_map[3][rt_sub_i32(loc_6, 257)] or 15
																			if temp < 10 then
																				if temp < 7 then
																					if temp < 6 then
																						desired = 14
																						break
																					else
																						desired = 11
																						break
																					end
																				elseif temp > 7 then
																					desired = 9
																					break
																				else
																					desired = 10
																					break
																				end
																			elseif temp > 10 then
																				if temp < 14 then
																					if temp < 13 then
																						desired = 5
																						break
																					else
																						desired = 4
																						break
																					end
																				elseif temp > 14 then
																					desired = 2
																					break
																				else
																					desired = 3
																					break
																				end
																			else
																				desired = 7
																				break
																			end
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_2 = 1
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_2 = 2
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_2 = 3
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_2 = 4
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = 5
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = 6
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = 7
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = 8
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = 9
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = 10
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = 11
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = 12
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 13
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 14
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 15
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[484](rt_add_i32(loc_3, 32), loc_0, 31312, loc_1)
			loc_5 = rt_load_i32_u8(memory_at_0, loc_3 + 36)
			loc_4 = rt_load_i32(memory_at_0, loc_3 + 32)
			loc_2 = loc_4
			break
		end
		while true do
			while true do
				if bit_and(loc_5, 1) == 0 then
					desired = 1
					break
				end
				loc_2 = bit_or(bit_and(loc_2, 255), bit_and(loc_4, 4294967040))
				if rt_load_i32_u8(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 1), 31312)) <= loc_1 then
					desired = 1
					break
				end
				FUNC_LIST[435](loc_0)
				loc_5 = 1
				reg_0 = FUNC_LIST[459](loc_0, rt_load_i32_u8(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 1), 31313)))
				loc_4 = reg_0
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 124)
				rt_store_i64(memory_at_0, loc_3 + 32, loc_10)
				rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_4 + 16))
				reg_0 = FUNC_LIST[392](loc_6, 36)
				reg_0 = FUNC_LIST[310](reg_0, rt_add_i32(loc_3, 32), loc_2, loc_8, loc_4)
				loc_8 = reg_0
				loc_4 = 0
				loc_2 = 0
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						loc_6 = rt_load_i32(memory_at_0, loc_0 + 60)
																						if not br_map[4] then
																							br_map[4] = (function()
																								return { [0] = 5, 16, 16, 16, 16, 2, 17, 16, 1, 16, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, }
																							end)()
																						end
																						temp = br_map[4][rt_sub_i32(loc_6, 37)] or 0
																						if temp < 6 then
																							if temp < 2 then
																								if temp < 1 then
																									break
																								else
																									desired = 19
																									break
																								end
																							elseif temp > 2 then
																								if temp < 5 then
																									desired = 17
																									break
																								else
																									desired = 15
																									break
																								end
																							else
																								desired = 18
																								break
																							end
																						elseif temp > 6 then
																							if temp < 16 then
																								if temp < 12 then
																									desired = 10
																									break
																								else
																									desired = 8
																									break
																								end
																							elseif temp > 16 then
																								desired = 3
																								break
																							else
																								desired = 4
																								break
																							end
																						else
																							desired = 14
																							break
																						end
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					if not br_map[5] then
																						br_map[5] = (function()
																							return { [0] = 8, 10, 12, 7, 6, 15, 15, 15, 3, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, }
																						end)()
																					end
																					temp = br_map[5][rt_sub_i32(loc_6, 257)] or 15
																					if temp < 10 then
																						if temp < 7 then
																							if temp < 6 then
																								desired = 16
																								break
																							else
																								desired = 13
																								break
																							end
																						elseif temp > 7 then
																							desired = 11
																							break
																						else
																							desired = 12
																							break
																						end
																					elseif temp > 10 then
																						if temp < 14 then
																							if temp < 13 then
																								desired = 7
																								break
																							else
																								desired = 6
																								break
																							end
																						elseif temp > 14 then
																							desired = 4
																							break
																						else
																							desired = 5
																							break
																						end
																					else
																						desired = 9
																						break
																					end
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_2 = 1
																				desired = 3
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_2 = 2
																			desired = 3
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_2 = 3
																		desired = 3
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_2 = 4
																	desired = 3
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_2 = 5
																desired = 3
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_2 = 6
															desired = 3
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = 7
														desired = 3
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_2 = 8
													desired = 3
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = 9
												desired = 3
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = 10
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = 11
										desired = 3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = 12
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = 13
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = 14
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 15
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[484](rt_add_i32(loc_3, 32), loc_0, 31312, loc_1)
					loc_5 = rt_load_i32_u8(memory_at_0, loc_3 + 36)
					loc_4 = rt_load_i32(memory_at_0, loc_3 + 32)
					loc_2 = loc_4
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_6 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 156), 1)
				rt_store_i32(memory_at_0, loc_0 + 156, loc_6)
				if rt_load_i32(memory_at_0, 49008) >= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 16, 3398)
			FUNC_LIST[427](loc_7, 4634, rt_add_i32(loc_3, 16))
			error("out of code bounds")
		end
		rt_store_i32(memory_at_0, loc_0 + 156, loc_9)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 48)
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[460] = --[[ Luau::Parser::parseBinding() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = rt_sub_i32(loc_1, 4294967232)
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 60) == 281 then
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 84)
					rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3 + 8))
					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3))
					FUNC_LIST[435](loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[464](loc_1, 4340)
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 168)
			rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3 + 8))
			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3))
			break
		end
		loc_3 = 0
		if rt_load_i32(memory_at_0, loc_1 + 60) == 58 then
			while true do
				FUNC_LIST[435](loc_1)
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 156)
				rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_1 + 72))
				rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1 + 64))
				while true do
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 60)
					if loc_6 == 38 then
						break
					end
					if loc_6 == 124 then
						break
					end
					FUNC_LIST[474](rt_add_i32(loc_2, 24), loc_1, 0, 0)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 24)
					rt_store_i32(memory_at_0, loc_1 + 156, loc_5)
					break
				end
				reg_0 = FUNC_LIST[475](loc_1, loc_3, rt_add_i32(loc_2, 32))
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 156, loc_5)
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0, loc_4)
		rt_store_i64(memory_at_0, loc_0 + 4, rt_load_i64(memory_at_0, loc_2 + 8))
		rt_store_i64(memory_at_0, loc_0 + 12, rt_load_i64(memory_at_0, loc_2 + 16))
		rt_store_i32(memory_at_0, loc_0 + 20, loc_3)
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[461] = --[[ Luau::Parser::pushLocal(Luau::Parser::Binding const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[8](rt_add_i32(loc_0, 204), loc_1)
		loc_8 = reg_0
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 188)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 192)
		reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 36)
		loc_2 = reg_0
		loc_6 = rt_load_i32(memory_at_0, loc_8)
		loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_5, 4))
		loc_7 = rt_load_i32(memory_at_0, loc_1 + 20)
		rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_2 + 4, rt_load_i64(memory_at_0, loc_1 + 4))
		rt_store_i64(memory_at_0, loc_2 + 12, rt_load_i64(memory_at_0, loc_1 + 12))
		rt_store_i32(memory_at_0, loc_2 + 32, loc_7)
		rt_store_i32(memory_at_0, loc_2 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_2 + 24, rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_5, loc_4), 3), 1))
		rt_store_i32(memory_at_0, loc_2 + 20, loc_6)
		rt_store_i32(memory_at_0, loc_8, loc_2)
		while true do
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 228)
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 232)
					if loc_1 < loc_6 then
						while true do
							rt_store_i32(memory_at_0, loc_1, loc_2)
							loc_2 = rt_add_i32(loc_1, 4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_add_i32(loc_0, 224)
					loc_4 = rt_load_i32(memory_at_0, loc_3)
					loc_9 = rt_shr_i32(rt_sub_i32(loc_1, loc_4), 2)
					loc_5 = rt_add_i32(loc_9, 1)
					if loc_5 >= 1073741824 then
						desired = 2
						break
					end
					loc_3 = rt_sub_i32(loc_6, loc_4)
					loc_7 = rt_shr_i32(loc_3, 1)
					loc_3 = (if loc_3 >= 2147483644 then 1073741823 else (if loc_5 < loc_7 then loc_7 else loc_5))
					if loc_3 ~= 0 then
						while true do
							if loc_3 >= 1073741824 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_3, 2))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = reg_0
					loc_5 = rt_add_i32(loc_7, rt_shl_i32(loc_9, 2))
					rt_store_i32(memory_at_0, loc_5, loc_2)
					loc_3 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_7)
					loc_2 = rt_add_i32(loc_5, 4)
					if loc_1 ~= loc_4 then
						while true do
							while true do
								loc_5 = rt_sub_i32(loc_5, 4)
								loc_1 = rt_sub_i32(loc_1, 4)
								rt_store_i32(memory_at_0, loc_5, rt_load_i32(memory_at_0, loc_1))
								if loc_1 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 232)
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 224)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_4
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 232, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 228, loc_2)
					rt_store_i32(memory_at_0, loc_0 + 224, loc_5)
					if loc_4 == 0 then
						break
					end
					FUNC_LIST[653](loc_4, rt_sub_i32(loc_6, loc_4))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 228, loc_2)
				reg_0 = rt_load_i32(memory_at_0, loc_8)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_3)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[462] = --[[ Luau::TempVector<Luau::Parser::Binding>::push_back(Luau::Parser::Binding const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
					if loc_2 < loc_7 then
						while true do
							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
							rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
							loc_1 = rt_add_i32(loc_2, 24)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_load_i32(memory_at_0, loc_4)
					loc_9 = rt_div_i32(rt_sub_i32(loc_2, loc_5), 24)
					loc_3 = rt_add_i32(loc_9, 1)
					if loc_3 >= 178956971 then
						desired = 2
						break
					end
					loc_6 = rt_div_i32(rt_sub_i32(loc_7, loc_5), 24)
					loc_8 = rt_shl_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 89478485 then 178956970 else (if loc_3 < loc_8 then loc_8 else loc_3))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 178956971 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 24))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_3 = rt_add_i32(loc_8, rt_mul_i32(loc_9, 24))
					rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
					rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_6 = rt_add_i32(rt_mul_i32(loc_6, 24), loc_8)
					loc_1 = rt_add_i32(loc_3, 24)
					if loc_2 ~= loc_5 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 24)
								loc_2 = rt_sub_i32(loc_2, 24)
								rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
								rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_4 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_4, loc_3)
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[463] = --[[ Luau::Parser::parseExprList(Luau::TempVector<Luau::AstExpr*>&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_1 = FUNC_LIST[459](loc_0, 0)
		rt_store_i32(memory_at_0, loc_2 + 12, reg_1)
		FUNC_LIST[440](loc_1, rt_add_i32(loc_2, 12))
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 60) ~= 44 then
				break
			end
			while true do
				FUNC_LIST[435](loc_0)
				if rt_load_i32(memory_at_0, loc_0 + 60) == 41 then
					while true do
						FUNC_LIST[438](loc_0, rt_sub_i32(loc_0, 4294967232), 5713, 0)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				reg_1 = FUNC_LIST[459](loc_0, 0)
				rt_store_i32(memory_at_0, loc_2 + 8, reg_1)
				FUNC_LIST[440](loc_1, rt_add_i32(loc_2, 8))
				if rt_load_i32(memory_at_0, loc_0 + 60) == 44 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[464] = --[[ Luau::Parser::reportNameError(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_3 = rt_sub_i32(loc_0, 4294967232)
		loc_4 = rt_add_i32(loc_0, 60)
		while true do
			if loc_1 ~= 0 then
				while true do
					FUNC_LIST[395](rt_add_i32(loc_2, 36), loc_4)
					rt_store_i32(memory_at_0, loc_2 + 16, loc_1)
					rt_store_i32(memory_at_0, loc_2 + 20, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_2 + 47), 0) then rt_load_i32(memory_at_0, loc_2 + 36) else rt_add_i32(loc_2, 36)))
					FUNC_LIST[438](loc_0, loc_3, 2566, rt_add_i32(loc_2, 16))
					if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_2 + 47), 0) then
						desired = 1
						break
					end
					FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2 + 36), bit_and(rt_load_i32(memory_at_0, loc_2 + 44), 2147483647))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[395](rt_add_i32(loc_2, 36), loc_4)
			rt_store_i32(memory_at_0, loc_2, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_2 + 47), 0) then rt_load_i32(memory_at_0, loc_2 + 36) else rt_add_i32(loc_2, 36)))
			FUNC_LIST[438](loc_0, loc_3, 2630, loc_2)
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_2 + 47), 0) then
				break
			end
			FUNC_LIST[653](rt_load_i32(memory_at_0, loc_2 + 36), bit_and(rt_load_i32(memory_at_0, loc_2 + 44), 2147483647))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[465] = --[[ Luau::Parser::parseAttributes() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i32(memory_at_0, loc_2 + 8, rt_add_i32(loc_1, 260))
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 260)
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 264)
		rt_store_i32(memory_at_0, loc_2 + 16, 0)
		rt_store_i32(memory_at_0, loc_2 + 12, rt_shr_i32(rt_sub_i32(loc_3, loc_4), 2))
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_1 + 60) == 284 then
					while true do
						loc_4 = rt_sub_i32(loc_1, 4294967232)
						while true do
							rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
							rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_4))
							FUNC_LIST[489](rt_add_i32(loc_2, 24), loc_1, rt_load_i32(memory_at_0, loc_1 + 84), rt_add_i32(loc_2, 8))
							FUNC_LIST[435](loc_1)
							if rt_load_i32_u8(memory_at_0, loc_2 + 24) == 1 then
								while true do
									reg_1 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), 28)
									reg_1 = FUNC_LIST[279](reg_1, rt_add_i32(loc_2, 32), rt_load_i32(memory_at_0, loc_2 + 28))
									rt_store_i32(memory_at_0, loc_2 + 20, reg_1)
									FUNC_LIST[440](rt_add_i32(loc_2, 8), rt_add_i32(loc_2, 20))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							if rt_load_i32(memory_at_0, loc_1 + 60) == 284 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
						if loc_3 ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 8))
			loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_shl_i32(loc_3, 2))
			loc_4 = reg_0
			rt_store_i32(memory_at_0, loc_0 + 4, loc_3)
			rt_store_i32(memory_at_0, loc_0, loc_4)
			loc_8 = bit_and(loc_3, 3)
			loc_0 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_5)
			loc_5 = 0
			loc_1 = 0
			if loc_3 >= 4 then
				while true do
					loc_9 = bit_and(loc_3, 4294967292)
					loc_6 = 0
					while true do
						loc_3 = rt_shl_i32(loc_1, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_0, loc_3)))
						loc_7 = bit_or(loc_3, 4)
						rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_0, loc_7)))
						loc_7 = bit_or(loc_3, 8)
						rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_0, loc_7)))
						loc_3 = bit_or(loc_3, 12)
						rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_0, loc_3)))
						loc_1 = rt_add_i32(loc_1, 4)
						loc_6 = rt_add_i32(loc_6, 4)
						if loc_9 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				break
			end
			while true do
				loc_3 = rt_shl_i32(loc_1, 2)
				rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_0, loc_3)))
				loc_1 = rt_add_i32(loc_1, 1)
				loc_5 = rt_add_i32(loc_5, 1)
				if loc_8 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 8)
		loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 12), 2))
		if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_1 + 4, loc_4)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		break
	end
end
FUNC_LIST[466] = --[[ Luau::Parser::parsePrefixExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 60) == 40 then
				while true do
					loc_5 = rt_load_i64(memory_at_0, loc_0 + 64)
					rt_store_i64(memory_at_0, loc_1 + 24, loc_5)
					rt_store_i32(memory_at_0, loc_1 + 20, 40)
					FUNC_LIST[435](loc_0)
					reg_0 = FUNC_LIST[459](loc_0, 0)
					loc_2 = reg_0
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
						if loc_3 ~= 41 then
							while true do
								FUNC_LIST[469](loc_0, 41, rt_add_i32(loc_1, 20), (if loc_3 == 61 then 6369 else 0))
								loc_4 = rt_load_i64(memory_at_0, loc_0 + 96)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i64(memory_at_0, loc_0 + 72)
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_1 + 8, loc_4)
					rt_store_i64(memory_at_0, loc_1, loc_5)
					reg_0 = FUNC_LIST[392](loc_0, 28)
					reg_0 = FUNC_LIST[281](reg_0, loc_1, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[488](loc_0, 3398)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 32)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[467] = --[[ Luau::Parser::parseFunctionArgs(Luau::AstExpr*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
						if rt_sub_i32(loc_4, 278) >= 2 then
							while true do
								if loc_4 ~= 123 then
									while true do
										loc_5 = 40
										if loc_4 ~= 40 then
											desired = 4
											break
										end
										loc_14 = rt_load_i64(memory_at_0, loc_0 + 72)
										reg_0 = loc_3
										if rt_load_i32(memory_at_0, loc_1 + 16) ~= rt_load_i32(memory_at_0, loc_0 + 64) then
											while true do
												FUNC_LIST[468](loc_0)
												reg_1 = rt_load_i32(memory_at_0, loc_0 + 60)
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_1 = loc_5
												break
											end
											if desired then
												break
											end
										end
										loc_5 = reg_1
										rt_store_i32(memory_at_0, reg_0 + 36, loc_5)
										rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_0 + 64))
										FUNC_LIST[435](loc_0)
										rt_store_i32(memory_at_0, loc_3 + 24, rt_add_i32(loc_0, 296))
										loc_4 = rt_load_i32(memory_at_0, loc_0 + 296)
										loc_5 = rt_load_i32(memory_at_0, loc_0 + 300)
										rt_store_i32(memory_at_0, loc_3 + 32, 0)
										rt_store_i32(memory_at_0, loc_3 + 28, rt_shr_i32(rt_sub_i32(loc_5, loc_4), 2))
										if rt_load_i32(memory_at_0, loc_0 + 60) == 41 then
											while true do
												loc_13 = rt_load_i64(memory_at_0, loc_0 + 72)
												desired = 3
												break
											end
											if desired then
												break
											end
										end
										FUNC_LIST[463](loc_0, rt_add_i32(loc_3, 24))
										loc_13 = rt_load_i64(memory_at_0, loc_0 + 72)
										if rt_load_i32(memory_at_0, loc_0 + 60) == 41 then
											desired = 3
											break
										end
										FUNC_LIST[469](loc_0, 41, rt_add_i32(loc_3, 36), 0)
										reg_0 = FUNC_LIST[470](loc_0, 41, loc_3, 0)
										desired = 2
										break
									end
									if desired then
										break
									end
								end
								loc_13 = rt_load_i64(memory_at_0, loc_0 + 72)
								reg_0 = FUNC_LIST[505](loc_0)
								loc_4 = reg_0
								loc_14 = rt_load_i64(memory_at_0, loc_0 + 96)
								loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
								rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_1 + 8))
								rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_4 + 16))
								reg_0 = FUNC_LIST[392](loc_0, 4)
								loc_5 = reg_0
								rt_store_i32(memory_at_0, loc_3 + 40, 1)
								rt_store_i32(memory_at_0, loc_3 + 36, loc_5)
								rt_store_i32(memory_at_0, loc_5, loc_4)
								rt_store_i64(memory_at_0, loc_3 + 8, loc_14)
								rt_store_i64(memory_at_0, loc_3, loc_13)
								reg_0 = FUNC_LIST[392](loc_0, 56)
								reg_0 = FUNC_LIST[297](reg_0, rt_add_i32(loc_3, 48), loc_1, rt_add_i32(loc_3, 36), loc_2, loc_3)
								loc_0 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_add_i32(loc_0, 72)
						rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_4))
						rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_0 + 64))
						rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_0 + 72))
						rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_0 + 64))
						FUNC_LIST[481](rt_add_i32(loc_3, 36), loc_0)
						while true do
							if rt_load_i32_u8(memory_at_0, loc_3 + 44) == 1 then
								while true do
									reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 36)
									reg_0 = FUNC_LIST[289](reg_0, rt_add_i32(loc_3, 48), rt_add_i32(loc_3, 36), 0)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i64(memory_at_0, loc_3 + 24, rt_i64_ZERO)
							reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_3, 48), rt_add_i32(loc_3, 24), 4949, 0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = reg_0
						loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
						rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_1 + 8))
						rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_4 + 16))
						reg_0 = FUNC_LIST[392](loc_0, 4)
						loc_5 = reg_0
						rt_store_i32(memory_at_0, loc_3 + 40, 1)
						rt_store_i32(memory_at_0, loc_3 + 36, loc_5)
						rt_store_i32(memory_at_0, loc_5, loc_4)
						reg_0 = FUNC_LIST[392](loc_0, 56)
						reg_0 = FUNC_LIST[297](reg_0, rt_add_i32(loc_3, 48), loc_1, rt_add_i32(loc_3, 36), loc_2, loc_3)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[506](loc_0, loc_1, loc_2)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[435](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = rt_load_i32(memory_at_0, loc_0 + 124)
			loc_15 = rt_load_i64(memory_at_0, loc_1 + 8)
			rt_store_i64(memory_at_0, loc_3 + 56, loc_13)
			rt_store_i64(memory_at_0, loc_3 + 48, loc_15)
			while true do
				loc_6 = rt_load_i32(memory_at_0, loc_3 + 32)
				if loc_6 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 24))
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 28)
				reg_0 = FUNC_LIST[392](loc_8, rt_shl_i32(loc_6, 2))
				loc_4 = reg_0
				rt_store_i32(memory_at_0, loc_3 + 20, loc_6)
				rt_store_i32(memory_at_0, loc_3 + 16, loc_4)
				loc_9 = bit_and(loc_6, 3)
				loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_0)
				loc_0 = 0
				if loc_6 >= 4 then
					while true do
						loc_12 = bit_and(loc_6, 4294967292)
						while true do
							loc_6 = rt_shl_i32(loc_0, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_6)))
							loc_7 = bit_or(loc_6, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_7)))
							loc_7 = bit_or(loc_6, 8)
							rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_7)))
							loc_6 = bit_or(loc_6, 12)
							rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_6)))
							loc_0 = rt_add_i32(loc_0, 4)
							loc_11 = rt_add_i32(loc_11, 4)
							if loc_12 ~= loc_11 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_9 == 0 then
					break
				end
				while true do
					loc_6 = rt_shl_i32(loc_0, 2)
					rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_6)))
					loc_0 = rt_add_i32(loc_0, 1)
					loc_10 = rt_add_i32(loc_10, 1)
					if loc_9 ~= loc_10 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_3 + 8, loc_13)
			rt_store_i64(memory_at_0, loc_3, loc_14)
			reg_0 = FUNC_LIST[392](loc_8, 56)
			reg_0 = FUNC_LIST[297](reg_0, rt_add_i32(loc_3, 48), loc_1, rt_add_i32(loc_3, 16), loc_2, loc_3)
			loc_0 = reg_0
			loc_4 = rt_load_i32(memory_at_0, loc_3 + 24)
			loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_4), rt_shl_i32(rt_load_i32(memory_at_0, loc_3 + 28), 2))
			if loc_5 == rt_load_i32(memory_at_0, loc_4 + 4) then
				break
			end
			rt_store_i32(memory_at_0, loc_4 + 4, loc_5)
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_3, 4294967232)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[468] = --[[ Luau::Parser::reportAmbiguousCallError() ]] function(loc_0)
	while true do
		FUNC_LIST[438](loc_0, rt_sub_i32(loc_0, 4294967232), 1871, 0)
		break
	end
end
FUNC_LIST[469] = --[[ Luau::Parser::expectMatchAndConsumeFail(Luau::Lexeme::Type, Luau::Parser::MatchLexeme const&, char const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = rt_add_i32(loc_4, 80)
		rt_store_i64(memory_at_0, loc_5, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 72, rt_i64_ZERO)
		reg_1 = FUNC_LIST[393](rt_add_i32(loc_4, 88), rt_add_i32(loc_4, 72), loc_1)
		FUNC_LIST[395](rt_add_i32(loc_4, 116), reg_1)
		rt_store_i64(memory_at_0, loc_4 + 80, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 72, rt_i64_ZERO)
		reg_1 = FUNC_LIST[393](rt_add_i32(loc_4, 88), rt_add_i32(loc_4, 72), rt_load_i32(memory_at_0, loc_2))
		FUNC_LIST[395](rt_add_i32(loc_4, 60), reg_1)
		loc_1 = rt_sub_i32(loc_0, 4294967232)
		loc_5 = rt_add_i32(loc_0, 60)
		loc_6 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 71), 0) then rt_load_i32(memory_at_0, loc_4 + 60) else rt_add_i32(loc_4, 60))
		loc_7 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 127), 0) then rt_load_i32(memory_at_0, loc_4 + 116) else rt_add_i32(loc_4, 116))
		while true do
			loc_8 = rt_load_i32(memory_at_0, loc_2 + 4)
			if loc_8 == rt_load_i32(memory_at_0, loc_0 + 64) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_2 + 8)
					FUNC_LIST[395](rt_add_i32(loc_4, 88), loc_5)
					rt_store_i32(memory_at_0, loc_4 + 16, (if loc_3 ~= 0 then loc_3 else 8343))
					rt_store_i32(memory_at_0, loc_4, loc_7)
					rt_store_i32(memory_at_0, loc_4 + 4, loc_6)
					rt_store_i32(memory_at_0, loc_4 + 8, rt_add_i32(loc_2, 1))
					rt_store_i32(memory_at_0, loc_4 + 12, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 99), 0) then rt_load_i32(memory_at_0, loc_4 + 88) else rt_add_i32(loc_4, 88)))
					FUNC_LIST[438](loc_0, loc_1, 2399, loc_4)
					if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_4 + 99), 0) then
						desired = 1
						break
					end
					FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 88), bit_and(rt_load_i32(memory_at_0, loc_4 + 96), 2147483647))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[395](rt_add_i32(loc_4, 88), loc_5)
			rt_store_i32(memory_at_0, loc_4 + 48, (if loc_3 ~= 0 then loc_3 else 8343))
			rt_store_i32(memory_at_0, loc_4 + 32, loc_7)
			rt_store_i32(memory_at_0, loc_4 + 36, loc_6)
			rt_store_i32(memory_at_0, loc_4 + 40, rt_add_i32(loc_8, 1))
			rt_store_i32(memory_at_0, loc_4 + 44, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 99), 0) then rt_load_i32(memory_at_0, loc_4 + 88) else rt_add_i32(loc_4, 88)))
			FUNC_LIST[438](loc_0, loc_1, 2448, rt_add_i32(loc_4, 32))
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_4 + 99), 0) then
				break
			end
			FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 88), bit_and(rt_load_i32(memory_at_0, loc_4 + 96), 2147483647))
			break
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 71), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 60), bit_and(rt_load_i32(memory_at_0, loc_4 + 68), 2147483647))
				break
			end
		end
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 127), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 116), bit_and(rt_load_i32(memory_at_0, loc_4 + 124), 2147483647))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 128)
		break
	end
end
FUNC_LIST[470] = --[[ Luau::Parser::expectMatchAndConsumeRecover(char, Luau::Parser::MatchLexeme const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_4 = bit_and(loc_1, 255)
		while true do
			while true do
				if loc_3 ~= 0 then
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
						loc_3 = (if loc_4 == loc_1 then 1 else 0)
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 96)
							if loc_6 ~= rt_load_i32(memory_at_0, loc_0 + 64) then
								break
							end
							if loc_1 == loc_4 then
								break
							end
							while true do
								reg_0 = 0
								if rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 248), rt_shl_i32(loc_1, 2))) ~= 0 then
									desired = 1
									break
								end
								FUNC_LIST[435](loc_0)
								loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
								loc_3 = (if loc_4 == loc_1 then 1 else 0)
								if rt_load_i32(memory_at_0, loc_0 + 64) ~= loc_6 then
									desired = 4
									break
								end
								if loc_1 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						if loc_3 ~= 0 then
							desired = 2
							break
						end
						reg_0 = 0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[418](rt_add_i32(loc_5, 4), rt_add_i32(loc_0, 40))
				reg_0 = 0
				if rt_load_i32(memory_at_0, loc_5 + 4) ~= loc_4 then
					desired = 1
					break
				end
				FUNC_LIST[435](loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[435](loc_0)
			reg_0 = 1
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[471] = --[[ Luau::Parser::reportExprError(Luau::Location const&, Luau::AstArray<Luau::AstExpr*> const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 12, loc_4)
		FUNC_LIST[482](loc_0, loc_1, loc_3, loc_4)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 236)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 240)
		reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 36)
		reg_0 = FUNC_LIST[316](reg_0, loc_1, loc_2, rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_3, loc_4), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[472] = --[[ Luau::Parser::parseTypeFunction(Luau::Location const&, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 56, rt_load_i32(memory_at_0, loc_0 + 84))
		rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_0 + 76))
		rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_0 + 68))
		rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_0 + 60))
		FUNC_LIST[435](loc_0)
		if loc_2 ~= 0 then
			while true do
				FUNC_LIST[438](loc_0, loc_1, 5170, 0)
				break
			end
		end
		loc_2 = rt_sub_i32(loc_0, 4294967232)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 84)
					rt_store_i64(memory_at_0, loc_3 + 72, rt_load_i64(memory_at_0, loc_2 + 8))
					rt_store_i64(memory_at_0, loc_3 + 64, rt_load_i64(memory_at_0, loc_2))
					FUNC_LIST[435](loc_0)
					rt_store_i64(memory_at_0, loc_3 + 20, rt_load_i64(memory_at_0, loc_3 + 72))
					rt_store_i32(memory_at_0, loc_3 + 8, loc_4)
					rt_store_i64(memory_at_0, loc_3 + 12, rt_load_i64(memory_at_0, loc_3 + 64))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[464](loc_0, 4228)
			rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_0 + 168))
			rt_store_i64(memory_at_0, loc_3 + 20, rt_load_i64(memory_at_0, loc_2 + 8))
			rt_store_i64(memory_at_0, loc_3 + 12, rt_load_i64(memory_at_0, loc_2))
			break
		end
		rt_store_i32_n8(memory_at_0, loc_3 + 28, 1)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 248)
		rt_store_i32(memory_at_0, loc_2 + 1180, rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 1180), 1))
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 200)
		rt_store_i32(memory_at_0, loc_0 + 200, rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), rt_load_i32(memory_at_0, loc_0 + 188)), 3))
		rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
		FUNC_LIST[447](rt_sub_i32(loc_3, 4294967232), loc_0, 0, rt_add_i32(loc_3, 32), rt_add_i32(loc_3, 8), 0, loc_3)
		loc_2 = rt_load_i32(memory_at_0, loc_3 + 64)
		rt_store_i32(memory_at_0, loc_0 + 200, loc_4)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 248)
		rt_store_i32(memory_at_0, loc_4 + 1180, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 1180), 1))
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
		rt_store_i64(memory_at_0, loc_3 + 64, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_3 + 72, rt_load_i64(memory_at_0, loc_2 + 16))
		reg_0 = FUNC_LIST[392](loc_0, 52)
		reg_0 = FUNC_LIST[352](reg_0, rt_sub_i32(loc_3, 4294967232), rt_add_i32(loc_3, 8), rt_add_i32(loc_3, 12), loc_2)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 80)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[473] = --[[ Luau::Parser::parseGenericTypeList(bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 28, rt_add_i32(loc_1, 440))
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 440)
		loc_9 = rt_load_i32(memory_at_0, loc_1 + 444)
		rt_store_i32(memory_at_0, loc_3 + 36, 0)
		rt_store_i32(memory_at_0, loc_3 + 32, rt_div_i32(rt_sub_i32(loc_9, loc_5), 24))
		rt_store_i32(memory_at_0, loc_3 + 16, rt_add_i32(loc_1, 452))
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 452)
		loc_9 = rt_load_i32(memory_at_0, loc_1 + 456)
		rt_store_i32(memory_at_0, loc_3 + 24, 0)
		rt_store_i32(memory_at_0, loc_3 + 20, rt_div_i32(rt_sub_i32(loc_9, loc_5), 24))
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 60) ~= 60 then
				while true do
					loc_6 = rt_load_i32(memory_at_0, loc_3 + 20)
					loc_5 = rt_load_i32(memory_at_0, loc_3 + 16)
					loc_9 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_13 = rt_add_i32(loc_1, 40)
			loc_17 = rt_load_i64(memory_at_0, loc_1 + 64)
			FUNC_LIST[435](loc_1)
			loc_5 = rt_sub_i32(loc_1, 4294967232)
			loc_11 = loc_3
			loc_12 = rt_add_i32(loc_11, 44)
			loc_6 = rt_load_i32(memory_at_0, loc_1 + 60)
			loc_9 = 0
			while true do
				while true do
					loc_15 = loc_3
					loc_4 = rt_add_i32(loc_15, 8)
					loc_16 = loc_5
					loc_14 = rt_add_i32(loc_16, 8)
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_14))
					rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
					while true do
						if loc_6 == 281 then
							while true do
								loc_6 = rt_load_i32(memory_at_0, loc_1 + 84)
								FUNC_LIST[435](loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[464](loc_1, 0)
						loc_6 = rt_load_i32(memory_at_0, loc_1 + 168)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					while true do
						loc_8 = rt_load_i32(memory_at_0, loc_1 + 60)
						loc_7 = (if loc_8 == 262 then 1 else 0)
						loc_9 = bit_or(loc_7, loc_9)
						if bit_and(loc_9, 1) ~= 0 then
							while true do
								while true do
									if loc_7 == 0 then
										while true do
											FUNC_LIST[438](loc_1, loc_5, 2200, 0)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[435](loc_1)
									break
								end
								if desired then
									break
								end
								while true do
									if loc_2 == 0 then
										break
									end
									if rt_load_i32(memory_at_0, loc_1 + 60) ~= 61 then
										break
									end
									FUNC_LIST[435](loc_1)
									while true do
										loc_7 = rt_load_i32(memory_at_0, loc_1 + 60)
										if loc_7 ~= 262 then
											while true do
												if loc_7 ~= 281 then
													desired = 7
													break
												end
												FUNC_LIST[418](rt_add_i32(loc_3, 40), loc_13)
												if rt_load_i32(memory_at_0, loc_3 + 40) ~= 262 then
													desired = 7
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										reg_0 = FUNC_LIST[491](loc_1)
										loc_7 = reg_0
										rt_store_i32(memory_at_0, loc_3 + 40, loc_6)
										rt_store_i64(memory_at_0, loc_11 + 52, rt_load_i64(memory_at_0, loc_15 + 8))
										rt_store_i64(memory_at_0, loc_11 + 44, rt_load_i64(memory_at_0, loc_3))
										rt_store_i32(memory_at_0, loc_3 + 60, loc_7)
										FUNC_LIST[462](rt_add_i32(loc_3, 16), rt_add_i32(loc_3, 40))
										loc_10 = 1
										desired = 4
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_8 = rt_load_i32(memory_at_0, loc_1 + 156)
									rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_16 + 8))
									rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_5))
									FUNC_LIST[474](rt_add_i32(loc_3, 72), loc_1, 1, 0)
									while true do
										loc_7 = rt_load_i32(memory_at_0, loc_3 + 76)
										if loc_7 ~= 0 then
											break
										end
										rt_store_i32(memory_at_0, loc_1 + 156, loc_8)
										reg_0 = FUNC_LIST[475](loc_1, rt_load_i32(memory_at_0, loc_3 + 72), rt_add_i32(loc_3, 40))
										loc_8 = reg_0
										if loc_8 == 0 then
											break
										end
										FUNC_LIST[438](loc_1, rt_add_i32(loc_8, 8), 4101, 0)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									rt_store_i32(memory_at_0, loc_3 + 40, loc_6)
									rt_store_i64(memory_at_0, loc_11 + 44, rt_load_i64(memory_at_0, loc_3))
									rt_store_i64(memory_at_0, loc_11 + 52, rt_load_i64(memory_at_0, loc_15 + 8))
									rt_store_i32(memory_at_0, loc_3 + 60, loc_7)
									FUNC_LIST[462](rt_add_i32(loc_3, 16), rt_add_i32(loc_3, 40))
									loc_10 = 1
									desired = 4
									break
								end
								if desired then
									break
								end
								if bit_and(loc_10, 1) ~= 0 then
									while true do
										FUNC_LIST[438](loc_1, loc_5, 4247, 0)
										break
									end
									if desired then
										break
									end
								end
								rt_store_i32(memory_at_0, loc_3 + 40, loc_6)
								rt_store_i64(memory_at_0, loc_11 + 44, rt_load_i64(memory_at_0, loc_3))
								rt_store_i64(memory_at_0, loc_11 + 52, rt_load_i64(memory_at_0, loc_15 + 8))
								rt_store_i32(memory_at_0, loc_3 + 60, 0)
								FUNC_LIST[462](rt_add_i32(loc_3, 16), rt_add_i32(loc_3, 40))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_2 == 0 then
								break
							end
							if loc_8 ~= 61 then
								break
							end
							FUNC_LIST[435](loc_1)
							loc_7 = rt_load_i32(memory_at_0, loc_1 + 156)
							rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_16 + 8))
							rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_5))
							loc_8 = 0
							while true do
								loc_14 = rt_load_i32(memory_at_0, loc_1 + 60)
								if loc_14 == 38 then
									break
								end
								if loc_14 == 124 then
									break
								end
								FUNC_LIST[474](rt_add_i32(loc_3, 72), loc_1, 0, 0)
								loc_8 = rt_load_i32(memory_at_0, loc_3 + 72)
								rt_store_i32(memory_at_0, loc_1 + 156, loc_7)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[475](loc_1, loc_8, rt_add_i32(loc_3, 40))
							loc_8 = reg_0
							rt_store_i32(memory_at_0, loc_1 + 156, loc_7)
							rt_store_i32(memory_at_0, loc_3 + 40, loc_6)
							rt_store_i64(memory_at_0, loc_11 + 52, rt_load_i64(memory_at_0, loc_15 + 8))
							rt_store_i64(memory_at_0, loc_11 + 44, rt_load_i64(memory_at_0, loc_3))
							rt_store_i32(memory_at_0, loc_3 + 60, loc_8)
							FUNC_LIST[462](rt_add_i32(loc_3, 28), rt_add_i32(loc_3, 40))
							loc_10 = 1
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if bit_and(loc_10, 1) ~= 0 then
							while true do
								FUNC_LIST[438](loc_1, loc_5, 4295, 0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_3 + 40, loc_6)
						rt_store_i64(memory_at_0, loc_11 + 44, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_11 + 52, rt_load_i64(memory_at_0, loc_15 + 8))
						rt_store_i32(memory_at_0, loc_3 + 60, 0)
						FUNC_LIST[462](rt_add_i32(loc_3, 28), rt_add_i32(loc_3, 40))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 60)
					if loc_6 ~= 44 then
						desired = 2
						break
					end
					FUNC_LIST[435](loc_1)
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 60)
					if loc_6 ~= 62 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[438](loc_1, loc_5, 5669, 0)
				loc_6 = rt_load_i32(memory_at_0, loc_1 + 60)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_3 + 44, loc_17)
			rt_store_i32(memory_at_0, loc_3 + 40, 60)
			while true do
				if loc_6 ~= 62 then
					while true do
						FUNC_LIST[469](loc_1, 62, rt_add_i32(loc_3, 40), 0)
						reg_0 = FUNC_LIST[470](loc_1, 62, loc_1, 0)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[435](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = 0
			loc_12 = 0
			while true do
				loc_13 = rt_load_i32(memory_at_0, loc_3 + 36)
				if loc_13 == 0 then
					break
				end
				loc_2 = bit_and(loc_13, 3)
				loc_6 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 28)), rt_mul_i32(rt_load_i32(memory_at_0, loc_3 + 32), 24))
				loc_8 = 0
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_mul_i32(loc_13, 24))
				loc_12 = reg_0
				loc_5 = 0
				if loc_13 >= 4 then
					while true do
						loc_10 = bit_and(loc_13, 4294967292)
						loc_14 = 0
						while true do
							loc_7 = rt_mul_i32(loc_5, 24)
							loc_4 = rt_add_i32(loc_7, loc_12)
							loc_7 = rt_add_i32(loc_6, loc_7)
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_7))
							rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_7 + 16))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
							loc_7 = rt_mul_i32(bit_or(loc_5, 1), 24)
							loc_4 = rt_add_i32(loc_7, loc_12)
							loc_7 = rt_add_i32(loc_6, loc_7)
							rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_7 + 16))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_7))
							loc_7 = rt_mul_i32(bit_or(loc_5, 2), 24)
							loc_4 = rt_add_i32(loc_7, loc_12)
							loc_7 = rt_add_i32(loc_6, loc_7)
							rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_7 + 16))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_7))
							loc_7 = rt_mul_i32(bit_or(loc_5, 3), 24)
							loc_4 = rt_add_i32(loc_7, loc_12)
							loc_7 = rt_add_i32(loc_6, loc_7)
							rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_7 + 16))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_7))
							loc_5 = rt_add_i32(loc_5, 4)
							loc_14 = rt_add_i32(loc_14, 4)
							if loc_10 ~= loc_14 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 == 0 then
					break
				end
				while true do
					loc_7 = rt_mul_i32(loc_5, 24)
					loc_4 = rt_add_i32(loc_7, loc_12)
					loc_7 = rt_add_i32(loc_6, loc_7)
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_7))
					rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_7 + 16))
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
					loc_5 = rt_add_i32(loc_5, 1)
					loc_8 = rt_add_i32(loc_8, 1)
					if loc_2 ~= loc_8 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_3 + 20)
			loc_5 = rt_load_i32(memory_at_0, loc_3 + 16)
			loc_10 = rt_load_i32(memory_at_0, loc_3 + 24)
			if loc_10 == 0 then
				while true do
					loc_10 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_14 = bit_and(loc_10, 3)
			loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(loc_6, 24))
			loc_7 = 0
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_mul_i32(loc_10, 24))
			loc_9 = reg_0
			loc_1 = 0
			if loc_10 >= 4 then
				while true do
					loc_2 = bit_and(loc_10, 4294967292)
					loc_8 = 0
					while true do
						loc_4 = rt_mul_i32(loc_1, 24)
						loc_6 = rt_add_i32(loc_4, loc_9)
						loc_4 = rt_add_i32(loc_4, loc_5)
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
						rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
						loc_4 = rt_mul_i32(bit_or(loc_1, 1), 24)
						loc_6 = rt_add_i32(loc_4, loc_9)
						loc_4 = rt_add_i32(loc_4, loc_5)
						rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
						loc_4 = rt_mul_i32(bit_or(loc_1, 2), 24)
						loc_6 = rt_add_i32(loc_4, loc_9)
						loc_4 = rt_add_i32(loc_4, loc_5)
						rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
						loc_4 = rt_mul_i32(bit_or(loc_1, 3), 24)
						loc_6 = rt_add_i32(loc_4, loc_9)
						loc_4 = rt_add_i32(loc_4, loc_5)
						rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
						loc_1 = rt_add_i32(loc_1, 4)
						loc_8 = rt_add_i32(loc_8, 4)
						if loc_2 ~= loc_8 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_14 ~= 0 then
				while true do
					while true do
						loc_4 = rt_mul_i32(loc_1, 24)
						loc_6 = rt_add_i32(loc_4, loc_9)
						loc_4 = rt_add_i32(loc_4, loc_5)
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
						rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_4 + 16))
						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
						loc_1 = rt_add_i32(loc_1, 1)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_14 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = rt_load_i32(memory_at_0, loc_3 + 20)
			loc_5 = rt_load_i32(memory_at_0, loc_3 + 16)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 12, loc_10)
		rt_store_i32(memory_at_0, loc_0 + 8, loc_9)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_13)
		rt_store_i32(memory_at_0, loc_0, loc_12)
		loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(loc_6, 24))
		if loc_1 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_5 + 4, loc_1)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_3 + 28)
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_mul_i32(rt_load_i32(memory_at_0, loc_3 + 32), 24))
		if loc_5 ~= rt_load_i32(memory_at_0, loc_1 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_1 + 4, loc_5)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 80)
		break
	end
end
FUNC_LIST[474] = --[[ Luau::Parser::parseSimpleType(bool, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 192)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 156), 1)
		rt_store_i32(memory_at_0, loc_1 + 156, loc_5)
		if loc_5 <= rt_load_i32(memory_at_0, 49008) then
			while true do
				rt_store_i64(memory_at_0, loc_4 + 136, rt_load_i64(memory_at_0, loc_1 + 72))
				rt_store_i64(memory_at_0, loc_4 + 128, rt_load_i64(memory_at_0, loc_1 + 64))
				rt_store_i64(memory_at_0, loc_4 + 120, rt_i64_ZERO)
				loc_8 = rt_add_i32(loc_1, 60)
				while true do
					while true do
						while true do
							while true do
								loc_5 = rt_load_i32(memory_at_0, loc_1 + 60)
								if rt_le_i32(loc_5, 265) then
									while true do
										if loc_5 == 40 then
											desired = 5
											break
										end
										if loc_5 == 60 then
											desired = 5
											break
										end
										if loc_5 ~= 123 then
											desired = 3
											break
										end
										reg_0 = FUNC_LIST[497](loc_1, loc_3)
										loc_1 = reg_0
										rt_store_i32(memory_at_0, loc_0 + 4, 0)
										rt_store_i32(memory_at_0, loc_0, loc_1)
										desired = 2
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																if not br_map[1] then
																	br_map[1] = (function()
																		return { [0] = 5, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 10, 7, 10, 10, 0, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 10, 9, 10, 10, 10, 1, 10, 10, 10, 10, 10, 2, }
																	end)()
																end
																temp = br_map[1][rt_sub_i32(loc_5, 266)] or 10
																if temp < 5 then
																	if temp < 2 then
																		if temp < 1 then
																			break
																		else
																			desired = 12
																			break
																		end
																	elseif temp > 2 then
																		if temp < 4 then
																			desired = 10
																			break
																		else
																			desired = 9
																			break
																		end
																	else
																		desired = 11
																		break
																	end
																elseif temp > 5 then
																	if temp < 9 then
																		if temp < 7 then
																			desired = 7
																			break
																		else
																			desired = 6
																			break
																		end
																	elseif temp > 9 then
																		desired = 3
																		break
																	else
																		desired = 4
																		break
																	end
																else
																	desired = 8
																	break
																end
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															if loc_3 == 0 then
																while true do
																	rt_store_i64(memory_at_0, loc_4 + 144, rt_i64_ZERO)
																	reg_0 = FUNC_LIST[492](loc_1, rt_add_i32(loc_4, 128), rt_add_i32(loc_4, 144), 1260, 0)
																	loc_1 = reg_0
																	rt_store_i32(memory_at_0, loc_0 + 4, 0)
																	rt_store_i32(memory_at_0, loc_0, loc_1)
																	desired = 2
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															FUNC_LIST[465](rt_add_i32(loc_4, 120), loc_1)
															FUNC_LIST[499](loc_0, loc_1, loc_2, rt_add_i32(loc_4, 120))
															desired = 2
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														FUNC_LIST[435](loc_1)
														reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), 84)
														loc_5 = reg_0
														rt_store_i32_n8(memory_at_0, loc_4 + 100, 0)
														rt_store_i32_n8(memory_at_0, loc_4 + 96, 0)
														loc_1 = rt_load_i32(memory_at_0, loc_1 + 172)
														loc_2 = rt_add_i32(loc_4, 160)
														rt_store_i32_n8(memory_at_0, loc_2, 0)
														rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_4 + 152))
														rt_store_i32(memory_at_0, loc_4 + 40, rt_load_i32(memory_at_0, loc_4 + 160))
														rt_store_i32_n8(memory_at_0, loc_4 + 144, 0)
														rt_store_i64(memory_at_0, loc_4 + 48, rt_load_i64(memory_at_0, loc_4 + 96))
														rt_store_i64(memory_at_0, loc_4 + 168, rt_i64_ZERO)
														rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_4 + 144))
														reg_0 = FUNC_LIST[362](loc_5, rt_add_i32(loc_4, 128), rt_add_i32(loc_4, 48), loc_1, rt_add_i32(loc_4, 24), rt_add_i32(loc_4, 128), 0, rt_add_i32(loc_4, 168))
														loc_1 = reg_0
														rt_store_i32(memory_at_0, loc_0 + 4, 0)
														rt_store_i32(memory_at_0, loc_0, loc_1)
														desired = 2
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													FUNC_LIST[435](loc_1)
													reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), 28)
													reg_0 = FUNC_LIST[375](reg_0, rt_add_i32(loc_4, 128), 1)
													loc_1 = reg_0
													rt_store_i32(memory_at_0, loc_0 + 4, 0)
													rt_store_i32(memory_at_0, loc_0, loc_1)
													desired = 2
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												FUNC_LIST[435](loc_1)
												reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), 28)
												reg_0 = FUNC_LIST[375](reg_0, rt_add_i32(loc_4, 128), 0)
												loc_1 = reg_0
												rt_store_i32(memory_at_0, loc_0 + 4, 0)
												rt_store_i32(memory_at_0, loc_0, loc_1)
												desired = 2
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											FUNC_LIST[481](rt_add_i32(loc_4, 144), loc_1)
											while true do
												if rt_load_i32_u8(memory_at_0, loc_4 + 152) == 1 then
													while true do
														rt_store_i64(memory_at_0, loc_4 + 96, rt_load_i64(memory_at_0, loc_4 + 144))
														reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), 32)
														reg_0 = FUNC_LIST[377](reg_0, rt_add_i32(loc_4, 128), rt_add_i32(loc_4, 96))
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												rt_store_i64(memory_at_0, loc_4 + 96, rt_i64_ZERO)
												reg_0 = FUNC_LIST[492](loc_1, rt_add_i32(loc_4, 128), rt_add_i32(loc_4, 96), 4949, 0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_1 = reg_0
											rt_store_i32(memory_at_0, loc_0 + 4, 0)
											rt_store_i32(memory_at_0, loc_0, loc_1)
											desired = 2
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[500](loc_1)
										rt_store_i64(memory_at_0, loc_4 + 144, rt_i64_ZERO)
										reg_0 = FUNC_LIST[492](loc_1, rt_add_i32(loc_4, 128), rt_add_i32(loc_4, 144), 2282, 0)
										loc_1 = reg_0
										rt_store_i32(memory_at_0, loc_0 + 4, 0)
										rt_store_i32(memory_at_0, loc_0, loc_1)
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									FUNC_LIST[435](loc_1)
									rt_store_i64(memory_at_0, loc_4 + 144, rt_i64_ZERO)
									reg_0 = FUNC_LIST[492](loc_1, rt_add_i32(loc_4, 128), rt_add_i32(loc_4, 144), 6227, 0)
									loc_1 = reg_0
									rt_store_i32(memory_at_0, loc_0 + 4, 0)
									rt_store_i32(memory_at_0, loc_0, loc_1)
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i32_n8(memory_at_0, loc_4 + 160, 0)
								rt_store_i32_n8(memory_at_0, loc_4 + 144, 0)
								loc_5 = rt_load_i32(memory_at_0, loc_1 + 84)
								loc_2 = rt_add_i32(loc_4, 176)
								loc_6 = rt_sub_i32(loc_1, 4294967232)
								rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_6 + 8))
								rt_store_i64(memory_at_0, loc_4 + 168, rt_load_i64(memory_at_0, loc_6))
								FUNC_LIST[435](loc_1)
								rt_store_i64(memory_at_0, loc_4 + 108, rt_load_i64(memory_at_0, loc_4 + 176))
								rt_store_i64(memory_at_0, loc_4 + 100, rt_load_i64(memory_at_0, loc_4 + 168))
								rt_store_i32(memory_at_0, loc_4 + 96, loc_5)
								loc_3 = rt_add_i32(loc_4, 100)
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															loc_2 = rt_load_i32(memory_at_0, loc_1 + 60)
															if loc_2 ~= 262 then
																while true do
																	if loc_2 ~= 46 then
																		desired = 12
																		break
																	end
																	loc_10 = rt_load_i64(memory_at_0, loc_1 + 64)
																	FUNC_LIST[435](loc_1)
																	loc_2 = rt_add_i32(loc_3, 8)
																	rt_store_i64(memory_at_0, loc_4 + 152, rt_load_i64(memory_at_0, loc_2))
																	rt_store_i64(memory_at_0, loc_4 + 144, rt_load_i64(memory_at_0, loc_3))
																	rt_store_i32_n8(memory_at_0, loc_4 + 160, 1)
																	loc_9 = rt_shr_u32(loc_5, 8)
																	if rt_load_i32(memory_at_0, loc_1 + 60) == 281 then
																		while true do
																			loc_7 = rt_load_i32(memory_at_0, loc_1 + 84)
																			rt_store_i64(memory_at_0, loc_4 + 176, rt_load_i64(memory_at_0, loc_6 + 8))
																			rt_store_i64(memory_at_0, loc_4 + 168, rt_load_i64(memory_at_0, loc_6))
																			FUNC_LIST[435](loc_1)
																			rt_store_i32(memory_at_0, loc_4 + 96, loc_7)
																			rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_4 + 176))
																			rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4 + 168))
																			desired = 8
																			break
																		end
																		if desired then
																			break
																		end
																	end
																	FUNC_LIST[464](loc_1, 4366)
																	if rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 60), 290) > 20 then
																		desired = 9
																		break
																	end
																	if rt_load_i32(memory_at_0, loc_1 + 64) ~= rt_wrap_i32_i64(loc_10) then
																		desired = 9
																		break
																	end
																	loc_7 = rt_load_i32(memory_at_0, loc_1 + 84)
																	rt_store_i32(memory_at_0, loc_4 + 96, loc_7)
																	rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
																	rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_6))
																	FUNC_LIST[435](loc_1)
																	desired = 8
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															FUNC_LIST[438](loc_1, loc_6, 1185, 0)
															FUNC_LIST[435](loc_1)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														if loc_5 == 0 then
															while true do
																loc_6 = 0
																reg_0 = 0
																desired = 6
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														reg_0 = FUNC_LIST[584](loc_5, 3908)
														if reg_0 == 0 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													loc_7 = loc_5
													loc_5 = 0
													reg_0 = rt_i64_ZERO
													desired = 7
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												loc_10 = rt_load_i64(memory_at_0, loc_1 + 64)
												reg_0 = FUNC_LIST[486](loc_1, 40, 4154)
												reg_0 = FUNC_LIST[459](loc_1, 0)
												loc_5 = reg_0
												loc_11 = rt_load_i64(memory_at_0, loc_1 + 72)
												rt_store_i64(memory_at_0, loc_4 + 172, loc_10)
												rt_store_i32(memory_at_0, loc_4 + 168, loc_2)
												reg_0 = FUNC_LIST[493](loc_1, 41, rt_add_i32(loc_4, 168), 0)
												loc_1 = rt_load_i32(memory_at_0, loc_1 + 124)
												rt_store_i64(memory_at_0, loc_4 + 176, loc_11)
												rt_store_i64(memory_at_0, loc_4 + 168, rt_load_i64(memory_at_0, loc_4 + 128))
												reg_0 = FUNC_LIST[392](loc_1, 28)
												reg_0 = FUNC_LIST[369](reg_0, rt_add_i32(loc_4, 168), loc_5)
												loc_1 = reg_0
												rt_store_i32(memory_at_0, loc_0 + 4, 0)
												rt_store_i32(memory_at_0, loc_0, loc_1)
												desired = 2
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_7 = rt_load_i32(memory_at_0, loc_1 + 168)
											loc_10 = rt_load_i64(memory_at_0, loc_1 + 64)
											rt_store_i64(memory_at_0, loc_4 + 108, loc_10)
											rt_store_i64(memory_at_0, loc_4 + 100, loc_10)
											rt_store_i32(memory_at_0, loc_4 + 96, loc_7)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										reg_0 = rt_i64_from_u32(0, 1)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_10 = reg_0
									loc_6 = rt_shl_i32(loc_9, 8)
									loc_2 = rt_load_i32(memory_at_0, loc_8)
									reg_0 = bit_and(loc_5, 255)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_5 = reg_0
								rt_store_i64(memory_at_0, loc_4 + 88, rt_i64_ZERO)
								if loc_2 == 60 then
									while true do
										FUNC_LIST[501](rt_add_i32(loc_4, 88), loc_1)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_8 = rt_load_i32(memory_at_0, loc_1 + 124)
								rt_store_i64(memory_at_0, loc_4 + 176, rt_load_i64(memory_at_0, loc_1 + 96))
								rt_store_i64(memory_at_0, loc_4 + 168, rt_load_i64(memory_at_0, loc_4 + 128))
								reg_0 = FUNC_LIST[392](loc_8, 84)
								loc_1 = reg_0
								rt_store_i64(memory_at_0, rt_sub_i32(loc_4, 4294967232), rt_load_i64(memory_at_0, loc_4 + 152))
								rt_store_i32(memory_at_0, loc_4 + 72, rt_load_i32(memory_at_0, loc_4 + 160))
								loc_10 = rt_bit_or_i64(rt_extend_i64_u32(bit_or(loc_5, loc_6)), loc_10)
								rt_store_i64(memory_at_0, loc_4 + 80, loc_10)
								rt_store_i64(memory_at_0, loc_4 + 184, loc_10)
								rt_store_i64(memory_at_0, loc_4 + 56, rt_load_i64(memory_at_0, loc_4 + 144))
								reg_0 = FUNC_LIST[362](loc_1, rt_add_i32(loc_4, 168), rt_add_i32(loc_4, 80), loc_7, rt_add_i32(loc_4, 56), loc_3, (if loc_2 == 60 then 1 else 0), rt_add_i32(loc_4, 88))
								loc_1 = reg_0
								rt_store_i32(memory_at_0, loc_0 + 4, 0)
								rt_store_i32(memory_at_0, loc_0, loc_1)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							rt_store_i64(memory_at_0, loc_4 + 144, rt_i64_ZERO)
							FUNC_LIST[499](loc_0, loc_1, loc_2, rt_add_i32(loc_4, 144))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						FUNC_LIST[435](loc_1)
						rt_store_i64(memory_at_0, loc_4 + 144, rt_i64_ZERO)
						reg_0 = FUNC_LIST[492](loc_1, rt_add_i32(loc_4, 128), rt_add_i32(loc_4, 144), 7790, 0)
						loc_1 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 4, 0)
						rt_store_i32(memory_at_0, loc_0, loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					loc_10 = rt_load_i64(memory_at_0, loc_1 + 96)
					rt_store_i64(memory_at_0, loc_4 + 144, loc_10)
					rt_store_i64(memory_at_0, loc_4 + 152, rt_load_i64(memory_at_0, loc_4 + 128))
					rt_store_i64(memory_at_0, loc_4 + 96, loc_10)
					rt_store_i64(memory_at_0, loc_4 + 104, rt_load_i64(memory_at_0, loc_4 + 136))
					FUNC_LIST[395](rt_add_i32(loc_4, 168), loc_8)
					rt_store_i32(memory_at_0, loc_4 + 16, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 179), 0) then rt_load_i32(memory_at_0, loc_4 + 168) else rt_add_i32(loc_4, 168)))
					reg_0 = FUNC_LIST[502](loc_1, rt_add_i32(loc_4, 96), rt_add_i32(loc_4, 144), 2761, rt_add_i32(loc_4, 16))
					loc_1 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 4, 0)
					rt_store_i32(memory_at_0, loc_0, loc_1)
					if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_4 + 179), 0) then
						break
					end
					FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 168), bit_and(rt_load_i32(memory_at_0, loc_4 + 176), 2147483647))
					break
				end
				if desired then
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_4, 192)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_4, 3313)
		FUNC_LIST[427](rt_sub_i32(loc_1, 4294967232), 4634, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[475] = --[[ Luau::Parser::parseTypeSuffix(Luau::AstType*, Luau::Location const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 144)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 100, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 88, rt_add_i32(loc_0, 380))
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 380)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 384)
		rt_store_i32(memory_at_0, loc_3 + 96, 0)
		rt_store_i32(memory_at_0, loc_3 + 92, rt_shr_i32(rt_sub_i32(loc_5, loc_4), 2))
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[440](rt_add_i32(loc_3, 88), rt_add_i32(loc_3, 100))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 156), 1)
		rt_store_i32(memory_at_0, loc_0 + 156, loc_1)
		while true do
			if loc_1 <= rt_load_i32(memory_at_0, 49008) then
				while true do
					rt_store_i64(memory_at_0, loc_3 + 72, rt_load_i64(memory_at_0, loc_2))
					loc_5 = rt_sub_i32(loc_0, 4294967232)
					loc_4 = 0
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_1 = rt_load_i32(memory_at_0, loc_0 + 60)
										if rt_le_i32(loc_1, 123) then
											while true do
												if loc_1 == 38 then
													desired = 7
													break
												end
												if loc_1 ~= 63 then
													desired = 3
													break
												end
												rt_store_i64(memory_at_0, rt_sub_i32(loc_3, 4294967232), rt_load_i64(memory_at_0, loc_5 + 8))
												rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_5))
												FUNC_LIST[435](loc_0)
												if bit_and(loc_4, 1) == 0 then
													while true do
														reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 84)
														loc_1 = reg_0
														rt_store_i32_n8(memory_at_0, loc_3 + 140, 0)
														rt_store_i32_n8(memory_at_0, loc_3 + 136, 0)
														loc_4 = rt_load_i32(memory_at_0, loc_0 + 172)
														loc_7 = rt_add_i32(loc_3, 128)
														rt_store_i32_n8(memory_at_0, loc_7, 0)
														rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_3 + 120))
														rt_store_i32(memory_at_0, loc_3 + 32, rt_load_i32(memory_at_0, loc_3 + 128))
														rt_store_i32_n8(memory_at_0, loc_3 + 112, 0)
														rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_3 + 136))
														rt_store_i64(memory_at_0, loc_3 + 104, rt_i64_ZERO)
														rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_3 + 112))
														reg_1 = FUNC_LIST[362](loc_1, rt_add_i32(loc_3, 56), rt_add_i32(loc_3, 40), loc_4, rt_add_i32(loc_3, 16), rt_add_i32(loc_3, 56), 0, rt_add_i32(loc_3, 104))
														rt_store_i32(memory_at_0, loc_3 + 52, reg_1)
														FUNC_LIST[440](rt_add_i32(loc_3, 88), rt_add_i32(loc_3, 52))
														break
													end
													if desired then
														break
													end
												end
												loc_4 = 1
												loc_7 = 1
												desired = 5
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										if loc_1 == 262 then
											desired = 6
											break
										end
										if loc_1 ~= 124 then
											desired = 3
											break
										end
										FUNC_LIST[435](loc_0)
										loc_1 = rt_load_i32(memory_at_0, loc_0 + 156)
										FUNC_LIST[474](rt_add_i32(loc_3, 112), loc_0, 0, 0)
										FUNC_LIST[440](rt_add_i32(loc_3, 88), rt_add_i32(loc_3, 112))
										rt_store_i32(memory_at_0, loc_0 + 156, loc_1)
										loc_7 = 1
										desired = 5
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									FUNC_LIST[435](loc_0)
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 156)
									FUNC_LIST[474](rt_add_i32(loc_3, 112), loc_0, 0, 0)
									FUNC_LIST[440](rt_add_i32(loc_3, 88), rt_add_i32(loc_3, 112))
									rt_store_i32(memory_at_0, loc_0 + 156, loc_1)
									loc_8 = 1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								FUNC_LIST[438](loc_0, loc_5, 3290, 0)
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_3 + 96) <= rt_add_i32(rt_load_i32(memory_at_0, 49024), bit_and(loc_4, 1)) then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						FUNC_LIST[427](rt_add_i32(rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 88) + 4), 4)), 8), 4710, 0)
						error("out of code bounds")
					end
					if desired then
						break
					end
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_3 + 96)
						if loc_6 == 1 then
							while true do
								reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 88)), rt_shl_i32(rt_load_i32(memory_at_0, loc_3 + 92), 2)))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if bit_and(bit_and(loc_7, loc_8), 1) ~= 0 then
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_3 + 88)
								loc_1 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 4), 4))
								rt_store_i64(memory_at_0, loc_3 + 112, rt_load_i64(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_3 + 120, rt_load_i64(memory_at_0, loc_1 + 16))
								while true do
									if loc_6 == 0 then
										while true do
											rt_store_i64(memory_at_0, loc_3 + 56, rt_i64_ZERO)
											desired = 5
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									loc_1 = rt_load_i32(memory_at_0, loc_4)
									loc_5 = rt_load_i32(memory_at_0, loc_3 + 92)
									reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), rt_shl_i32(loc_6, 2))
									loc_4 = reg_0
									rt_store_i32(memory_at_0, loc_3 + 60, loc_6)
									rt_store_i32(memory_at_0, loc_3 + 56, loc_4)
									loc_10 = bit_and(loc_6, 3)
									loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_1)
									loc_8 = 0
									loc_1 = 0
									if loc_6 >= 4 then
										while true do
											loc_9 = bit_and(loc_6, 4294967292)
											loc_6 = 0
											while true do
												loc_7 = rt_shl_i32(loc_1, 2)
												rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_7)))
												loc_2 = bit_or(loc_7, 4)
												rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_5)))
												loc_2 = bit_or(loc_7, 8)
												rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_5)))
												loc_7 = bit_or(loc_7, 12)
												rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_7)))
												loc_1 = rt_add_i32(loc_1, 4)
												loc_6 = rt_add_i32(loc_6, 4)
												if loc_9 ~= loc_6 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									if loc_10 == 0 then
										break
									end
									while true do
										loc_7 = rt_shl_i32(loc_1, 2)
										rt_store_i32(memory_at_0, rt_add_i32(loc_7, loc_4), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_7)))
										loc_1 = rt_add_i32(loc_1, 1)
										loc_8 = rt_add_i32(loc_8, 1)
										if loc_10 ~= loc_8 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									break
								end
								reg_0 = FUNC_LIST[492](loc_0, rt_add_i32(loc_3, 112), rt_add_i32(loc_3, 56), 7180, 0)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_load_i32(memory_at_0, loc_3 + 88)
						rt_store_i64(memory_at_0, loc_3 + 80, rt_load_i64(memory_at_0, rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4)) + 16))
						if bit_and(loc_7, 1) ~= 0 then
							while true do
								loc_9 = rt_load_i32(memory_at_0, loc_0 + 124)
								while true do
									if loc_6 == 0 then
										while true do
											rt_store_i64(memory_at_0, loc_3 + 112, rt_i64_ZERO)
											desired = 5
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									loc_0 = rt_load_i32(memory_at_0, loc_1)
									loc_4 = rt_load_i32(memory_at_0, loc_3 + 92)
									reg_0 = FUNC_LIST[392](loc_9, rt_shl_i32(loc_6, 2))
									loc_1 = reg_0
									rt_store_i32(memory_at_0, loc_3 + 116, loc_6)
									rt_store_i32(memory_at_0, loc_3 + 112, loc_1)
									loc_2 = bit_and(loc_6, 3)
									loc_4 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_0)
									loc_7 = 0
									loc_0 = 0
									if loc_6 >= 4 then
										while true do
											loc_10 = bit_and(loc_6, 4294967292)
											loc_8 = 0
											while true do
												loc_5 = rt_shl_i32(loc_0, 2)
												rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
												loc_6 = bit_or(loc_5, 4)
												rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_6)))
												loc_6 = bit_or(loc_5, 8)
												rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_6)))
												loc_5 = bit_or(loc_5, 12)
												rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
												loc_0 = rt_add_i32(loc_0, 4)
												loc_8 = rt_add_i32(loc_8, 4)
												if loc_10 ~= loc_8 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 5 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 0 then
										break
									end
									while true do
										loc_5 = rt_shl_i32(loc_0, 2)
										rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
										loc_0 = rt_add_i32(loc_0, 1)
										loc_7 = rt_add_i32(loc_7, 1)
										if loc_2 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									break
								end
								reg_0 = FUNC_LIST[392](loc_9, 32)
								reg_0 = FUNC_LIST[371](reg_0, rt_add_i32(loc_3, 72), rt_add_i32(loc_3, 112))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if bit_and(loc_8, 1) == 0 then
							desired = 1
							break
						end
						loc_9 = rt_load_i32(memory_at_0, loc_0 + 124)
						while true do
							if loc_6 == 0 then
								while true do
									rt_store_i64(memory_at_0, loc_3 + 112, rt_i64_ZERO)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_0 = rt_load_i32(memory_at_0, loc_1)
							loc_4 = rt_load_i32(memory_at_0, loc_3 + 92)
							reg_0 = FUNC_LIST[392](loc_9, rt_shl_i32(loc_6, 2))
							loc_1 = reg_0
							rt_store_i32(memory_at_0, loc_3 + 116, loc_6)
							rt_store_i32(memory_at_0, loc_3 + 112, loc_1)
							loc_2 = bit_and(loc_6, 3)
							loc_4 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_0)
							loc_7 = 0
							loc_0 = 0
							if loc_6 >= 4 then
								while true do
									loc_10 = bit_and(loc_6, 4294967292)
									loc_8 = 0
									while true do
										loc_5 = rt_shl_i32(loc_0, 2)
										rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
										loc_6 = bit_or(loc_5, 4)
										rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_6)))
										loc_6 = bit_or(loc_5, 8)
										rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_6)))
										loc_5 = bit_or(loc_5, 12)
										rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
										loc_0 = rt_add_i32(loc_0, 4)
										loc_8 = rt_add_i32(loc_8, 4)
										if loc_10 ~= loc_8 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							if loc_2 == 0 then
								break
							end
							while true do
								loc_5 = rt_shl_i32(loc_0, 2)
								rt_store_i32(memory_at_0, rt_add_i32(loc_5, loc_1), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
								loc_0 = rt_add_i32(loc_0, 1)
								loc_7 = rt_add_i32(loc_7, 1)
								if loc_2 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[392](loc_9, 32)
						reg_0 = FUNC_LIST[373](reg_0, rt_add_i32(loc_3, 72), rt_add_i32(loc_3, 112))
						break
					end
					if desired then
						break
					end
					loc_1 = reg_0
					loc_0 = rt_load_i32(memory_at_0, loc_3 + 88)
					loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_shl_i32(rt_load_i32(memory_at_0, loc_3 + 92), 2))
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
							break
						end
						if desired then
							break
						end
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_3, 144)
					reg_0 = loc_1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_3, 3313)
			FUNC_LIST[427](rt_sub_i32(loc_0, 4294967232), 4634, loc_3)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[427](loc_2, 7266, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[476] = --[[ Luau::Parser::parseBindingList(Luau::TempVector<Luau::Parser::Binding>&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				if loc_3 ~= 0 then
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 60) == 262 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					while true do
						FUNC_LIST[460](rt_add_i32(loc_4, 8), loc_1)
						FUNC_LIST[462](loc_2, rt_add_i32(loc_4, 8))
						if rt_load_i32(memory_at_0, loc_1 + 60) ~= 44 then
							break
						end
						FUNC_LIST[435](loc_1)
						if loc_3 == 0 then
							desired = 3
							break
						end
						if rt_load_i32(memory_at_0, loc_1 + 60) ~= 262 then
							desired = 3
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_ZERO)
				rt_store_i32_n8(memory_at_0, loc_0, 0)
				rt_store_i64(memory_at_0, loc_0 + 12, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_0 + 20, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = loc_4
			loc_2 = rt_add_i32(loc_5, 16)
			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1 + 72))
			rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_1 + 64))
			FUNC_LIST[435](loc_1)
			loc_3 = 0
			if rt_load_i32(memory_at_0, loc_1 + 60) == 58 then
				while true do
					FUNC_LIST[435](loc_1)
					reg_0 = FUNC_LIST[487](loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			rt_store_i32_n8(memory_at_0, loc_0, 1)
			rt_store_i64(memory_at_0, loc_0 + 4, rt_load_i64(memory_at_0, loc_4 + 8))
			rt_store_i64(memory_at_0, loc_0 + 12, rt_load_i64(memory_at_0, loc_5 + 16))
			rt_store_i32(memory_at_0, loc_0 + 20, loc_3)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[477] = --[[ Luau::Parser::parseOptionalReturnType() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 60)
				if loc_2 ~= 58 then
					while true do
						if loc_2 ~= 263 then
							desired = 2
							break
						end
						FUNC_LIST[438](loc_1, rt_sub_i32(loc_1, 4294967232), 8104, 0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[435](loc_1)
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 156)
				FUNC_LIST[494](rt_add_i32(loc_3, 4), loc_1)
				loc_2 = rt_add_i32(loc_3, 20)
				if rt_load_i32(memory_at_0, loc_1 + 60) == 44 then
					while true do
						FUNC_LIST[438](loc_1, rt_sub_i32(loc_1, 4294967232), 6274, 0)
						FUNC_LIST[435](loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_1 + 156, loc_4)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
				rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_2))
				rt_store_i32_n8(memory_at_0, loc_0 + 12, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 12, 0)
			rt_store_i32_n8(memory_at_0, loc_0, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 32)
		break
	end
end
FUNC_LIST[478] = --[[ Luau::TempVector<std::__2::pair<Luau::AstName, Luau::Location>>::push_back(std::__2::pair<Luau::AstName, Luau::Location> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
					if loc_2 < loc_7 then
						while true do
							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
							rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
							loc_1 = rt_add_i32(loc_2, 20)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_load_i32(memory_at_0, loc_4)
					loc_9 = rt_div_i32(rt_sub_i32(loc_2, loc_5), 20)
					loc_3 = rt_add_i32(loc_9, 1)
					if loc_3 >= 214748365 then
						desired = 2
						break
					end
					loc_6 = rt_div_i32(rt_sub_i32(loc_7, loc_5), 20)
					loc_8 = rt_shl_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 107374182 then 214748364 else (if loc_3 < loc_8 then loc_8 else loc_3))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 214748365 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 20))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_3 = rt_add_i32(loc_8, rt_mul_i32(loc_9, 20))
					rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32(memory_at_0, loc_3 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
					rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_6 = rt_add_i32(rt_mul_i32(loc_6, 20), loc_8)
					loc_1 = rt_add_i32(loc_3, 20)
					if loc_2 ~= loc_5 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 20)
								loc_2 = rt_sub_i32(loc_2, 20)
								rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
								rt_store_i32(memory_at_0, loc_3 + 16, rt_load_i32(memory_at_0, loc_2 + 16))
								rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_4 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_4, loc_3)
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[479] = --[[ Luau::Parser::parseDeclaredClassMethod() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local loc_18 = rt_i64_ZERO
	local loc_19 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i64(memory_at_0, loc_2 + 120, rt_load_i64(memory_at_0, loc_1 + 72))
		rt_store_i64(memory_at_0, loc_2 + 112, rt_load_i64(memory_at_0, loc_1 + 64))
		FUNC_LIST[435](loc_1)
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 60) == 281 then
				while true do
					loc_16 = rt_load_i64(memory_at_0, loc_1 + 72)
					loc_17 = rt_load_i64(memory_at_0, loc_1 + 64)
					loc_11 = rt_load_i32(memory_at_0, loc_1 + 84)
					FUNC_LIST[435](loc_1)
					loc_15 = rt_load_i64(memory_at_0, loc_1 + 64)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[464](loc_1, 4233)
			loc_11 = rt_load_i32(memory_at_0, loc_1 + 168)
			loc_15 = rt_load_i64(memory_at_0, loc_1 + 64)
			loc_17 = loc_15
			loc_16 = loc_15
			break
		end
		rt_store_i64(memory_at_0, loc_2 + 104, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_2 + 96, rt_i64_ZERO)
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 60)
		rt_store_i64(memory_at_0, loc_2 + 88, loc_15)
		rt_store_i32(memory_at_0, loc_2 + 84, loc_5)
		while true do
			if loc_5 ~= 40 then
				while true do
					FUNC_LIST[432](loc_1, 40, 1421)
					FUNC_LIST[418](rt_add_i32(loc_2, 128), rt_add_i32(loc_1, 40))
					if rt_load_i32(memory_at_0, loc_2 + 128) ~= 40 then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_1)
			break
		end
		rt_store_i32(memory_at_0, loc_2 + 72, rt_add_i32(loc_1, 344))
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 344)
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 348)
		rt_store_i32(memory_at_0, loc_2 + 80, 0)
		rt_store_i32(memory_at_0, loc_2 + 76, rt_div_i32(rt_sub_i32(loc_6, loc_5), 24))
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_1 + 60) == 41 then
					break
				end
				FUNC_LIST[476](rt_add_i32(loc_2, 128), loc_1, rt_add_i32(loc_2, 72), 1)
				loc_9 = rt_load_i32(memory_at_0, loc_2 + 148)
				loc_8 = rt_load_i32_u8(memory_at_0, loc_2 + 128)
				if rt_load_i32(memory_at_0, loc_1 + 60) == 41 then
					break
				end
				FUNC_LIST[469](loc_1, 41, rt_add_i32(loc_2, 84), 0)
				reg_0 = FUNC_LIST[470](loc_1, 41, loc_2, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[435](loc_1)
			break
		end
		FUNC_LIST[477](rt_add_i32(loc_2, 128), loc_1)
		rt_store_i32(memory_at_0, loc_2 + 24, 0)
		rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
		loc_5 = (if rt_load_i32_u8(memory_at_0, loc_2 + 140) ~= 0 then rt_add_i32(loc_2, 128) else rt_add_i32(loc_2, 16))
		rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 4294967232), rt_load_i32(memory_at_0, loc_5 + 8))
		rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_5))
		loc_15 = rt_load_i64(memory_at_0, loc_1 + 96)
		rt_store_i32(memory_at_0, loc_2 + 44, rt_add_i32(loc_1, 380))
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 380)
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 384)
		rt_store_i32(memory_at_0, loc_2 + 52, 0)
		rt_store_i32(memory_at_0, loc_2 + 48, rt_shr_i32(rt_sub_i32(loc_6, loc_5), 2))
		loc_5 = rt_add_i32(loc_1, 464)
		rt_store_i32(memory_at_0, loc_2 + 32, loc_5)
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 464)
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 468)
		rt_store_i32(memory_at_0, loc_2 + 40, 0)
		loc_6 = rt_div_i32(rt_sub_i32(loc_4, loc_6), 24)
		rt_store_i32(memory_at_0, loc_2 + 36, loc_6)
		while true do
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_2 + 80)
				if loc_4 == 0 then
					break
				end
				loc_7 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 72)), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 76), 24))
				loc_3 = rt_load_i32(memory_at_0, loc_7)
				if loc_3 == 0 then
					break
				end
				reg_0 = FUNC_LIST[584](loc_3, 3919)
				if reg_0 ~= 0 then
					break
				end
				if rt_load_i32(memory_at_0, loc_7 + 20) ~= 0 then
					break
				end
				if loc_4 ~= 1 then
					while true do
						loc_4 = rt_add_i32(loc_2, 132)
						loc_5 = 1
						while true do
							loc_3 = rt_mul_i32(loc_5, 24)
							loc_6 = rt_add_i32(loc_3, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 72)), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 76), 24)))
							loc_7 = rt_load_i32(memory_at_0, loc_6)
							loc_18 = rt_load_i64(memory_at_0, loc_6 + 12)
							rt_store_i64(memory_at_0, loc_2 + 24, loc_18)
							loc_19 = rt_load_i64(memory_at_0, loc_6 + 4)
							rt_store_i64(memory_at_0, loc_2 + 16, loc_19)
							rt_store_i32(memory_at_0, loc_2 + 128, loc_7)
							rt_store_i64(memory_at_0, loc_4 + 8, loc_18)
							rt_store_i64(memory_at_0, loc_4, loc_19)
							rt_store_i32_n8(memory_at_0, loc_2 + 148, 1)
							FUNC_LIST[462](rt_add_i32(loc_2, 32), rt_add_i32(loc_2, 128))
							while true do
								loc_6 = rt_add_i32(rt_add_i32(loc_3, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 72)), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 76), 24))), 20)
								if rt_load_i32(memory_at_0, loc_6) ~= 0 then
									while true do
										FUNC_LIST[440](rt_add_i32(loc_2, 44), loc_6)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								rt_store_i64(memory_at_0, loc_2 + 136, loc_15)
								rt_store_i64(memory_at_0, loc_2 + 128, rt_load_i64(memory_at_0, loc_2 + 112))
								rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
								reg_1 = FUNC_LIST[492](loc_1, rt_add_i32(loc_2, 128), rt_add_i32(loc_2, 16), 5248, 0)
								rt_store_i32(memory_at_0, loc_2 + 8, reg_1)
								FUNC_LIST[440](rt_add_i32(loc_2, 44), rt_add_i32(loc_2, 8))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_5 = rt_add_i32(loc_5, 1)
							if loc_5 < rt_load_i32(memory_at_0, loc_2 + 80) then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and(loc_8, (if loc_9 == 0 then 1 else 0)) ~= 0 then
					while true do
						FUNC_LIST[438](loc_1, rt_add_i32(loc_2, 112), 5248, 0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_12 = rt_load_i32(memory_at_0, loc_1 + 124)
				rt_store_i64(memory_at_0, loc_2 + 136, loc_15)
				rt_store_i64(memory_at_0, loc_2 + 128, rt_load_i64(memory_at_0, loc_2 + 112))
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 52)
					if loc_3 == 0 then
						while true do
							rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 44))
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 48)
					reg_0 = FUNC_LIST[392](loc_12, rt_shl_i32(loc_3, 2))
					loc_6 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 20, loc_3)
					rt_store_i32(memory_at_0, loc_2 + 16, loc_6)
					loc_13 = bit_and(loc_3, 3)
					loc_4 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_5)
					loc_7 = 0
					loc_5 = 0
					if loc_3 >= 4 then
						while true do
							loc_14 = bit_and(loc_3, 4294967292)
							loc_8 = 0
							while true do
								loc_3 = rt_shl_i32(loc_5, 2)
								rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_6), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
								loc_10 = bit_or(loc_3, 4)
								rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_6), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_10)))
								loc_10 = bit_or(loc_3, 8)
								rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_6), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_10)))
								loc_3 = bit_or(loc_3, 12)
								rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_6), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
								loc_5 = rt_add_i32(loc_5, 4)
								loc_8 = rt_add_i32(loc_8, 4)
								if loc_14 ~= loc_8 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_13 == 0 then
						break
					end
					while true do
						loc_3 = rt_shl_i32(loc_5, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_3, loc_6), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_4)))
						loc_5 = rt_add_i32(loc_5, 1)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_13 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 24, loc_9)
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 40)
					if loc_4 == 0 then
						while true do
							rt_store_i64(memory_at_0, loc_2 + 8, rt_i64_ZERO)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 32))
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 36)
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_mul_i32(loc_4, 24))
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 12, loc_4)
					rt_store_i32(memory_at_0, loc_2 + 8, loc_5)
					loc_8 = bit_and(loc_4, 3)
					loc_6 = rt_add_i32(rt_mul_i32(loc_3, 24), loc_6)
					loc_7 = 0
					loc_1 = 0
					if loc_4 >= 4 then
						while true do
							loc_10 = bit_and(loc_4, 4294967292)
							loc_9 = 0
							while true do
								loc_3 = rt_mul_i32(loc_1, 24)
								loc_4 = rt_add_i32(loc_3, loc_5)
								loc_3 = rt_add_i32(loc_3, loc_6)
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
								loc_3 = rt_mul_i32(bit_or(loc_1, 1), 24)
								loc_4 = rt_add_i32(loc_3, loc_5)
								loc_3 = rt_add_i32(loc_3, loc_6)
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								loc_3 = rt_mul_i32(bit_or(loc_1, 2), 24)
								loc_4 = rt_add_i32(loc_3, loc_5)
								loc_3 = rt_add_i32(loc_3, loc_6)
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								loc_3 = rt_mul_i32(bit_or(loc_1, 3), 24)
								loc_4 = rt_add_i32(loc_3, loc_5)
								loc_3 = rt_add_i32(loc_3, loc_6)
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								loc_1 = rt_add_i32(loc_1, 4)
								loc_9 = rt_add_i32(loc_9, 4)
								if loc_10 ~= loc_9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 == 0 then
						break
					end
					while true do
						loc_3 = rt_mul_i32(loc_1, 24)
						loc_4 = rt_add_i32(loc_3, loc_5)
						loc_3 = rt_add_i32(loc_3, loc_6)
						rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
						rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						loc_1 = rt_add_i32(loc_1, 1)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_8 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[392](loc_12, 80)
				reg_0 = FUNC_LIST[366](reg_0, rt_add_i32(loc_2, 128), rt_add_i32(loc_2, 104), rt_add_i32(loc_2, 96), rt_add_i32(loc_2, 16), rt_add_i32(loc_2, 8), rt_add_i32(loc_2, 56))
				loc_1 = reg_0
				rt_store_i32_n8(memory_at_0, loc_0 + 24, 1)
				rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
				rt_store_i64(memory_at_0, loc_0 + 12, loc_16)
				rt_store_i64(memory_at_0, loc_0 + 4, loc_17)
				rt_store_i32(memory_at_0, loc_0, loc_11)
				loc_16 = rt_load_i64(memory_at_0, loc_2 + 112)
				rt_store_i64(memory_at_0, loc_0 + 36, loc_15)
				rt_store_i64(memory_at_0, loc_0 + 28, loc_16)
				loc_6 = rt_load_i32(memory_at_0, loc_2 + 36)
				loc_5 = rt_load_i32(memory_at_0, loc_2 + 32)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_0 + 12, loc_16)
			rt_store_i64(memory_at_0, loc_0 + 4, loc_17)
			rt_store_i32(memory_at_0, loc_0, loc_11)
			rt_store_i64(memory_at_0, loc_2 + 136, loc_15)
			rt_store_i64(memory_at_0, loc_2 + 128, rt_load_i64(memory_at_0, loc_2 + 112))
			rt_store_i64(memory_at_0, loc_2 + 16, rt_i64_ZERO)
			reg_0 = FUNC_LIST[492](loc_1, rt_add_i32(loc_2, 128), rt_add_i32(loc_2, 16), 2924, 0)
			loc_1 = reg_0
			rt_store_i64(memory_at_0, loc_0 + 28, rt_i64_ZERO)
			rt_store_i32_n8(memory_at_0, loc_0 + 24, 1)
			rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
			rt_store_i64(memory_at_0, loc_0 + 36, rt_i64_ZERO)
			break
		end
		loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(loc_6, 24))
		if loc_1 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_5 + 4, loc_1)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 44)
		loc_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 48), 2))
		if loc_0 ~= rt_load_i32(memory_at_0, loc_1 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_1 + 4, loc_0)
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 72)
		loc_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 76), 24))
		if loc_0 ~= rt_load_i32(memory_at_0, loc_1 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_1 + 4, loc_0)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 160)
		break
	end
end
FUNC_LIST[480] = --[[ Luau::TempVector<Luau::AstDeclaredClassProp>::push_back(Luau::AstDeclaredClassProp const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
					if loc_2 < loc_7 then
						while true do
							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
							rt_store_i32(memory_at_0, loc_2 + 40, rt_load_i32(memory_at_0, loc_1 + 40))
							rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1 + 32))
							rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_1 + 24))
							rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
							loc_1 = rt_add_i32(loc_2, 44)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_load_i32(memory_at_0, loc_4)
					loc_9 = rt_div_i32(rt_sub_i32(loc_2, loc_5), 44)
					loc_3 = rt_add_i32(loc_9, 1)
					if loc_3 >= 97612894 then
						desired = 2
						break
					end
					loc_6 = rt_div_i32(rt_sub_i32(loc_7, loc_5), 44)
					loc_8 = rt_shl_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 48806446 then 97612893 else (if loc_3 < loc_8 then loc_8 else loc_3))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 97612894 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 44))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_3 = rt_add_i32(loc_8, rt_mul_i32(loc_9, 44))
					rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32(memory_at_0, loc_3 + 40, rt_load_i32(memory_at_0, loc_1 + 40))
					rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_1 + 32))
					rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_1 + 24))
					rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
					rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_6 = rt_add_i32(rt_mul_i32(loc_6, 44), loc_8)
					loc_1 = rt_add_i32(loc_3, 44)
					if loc_2 ~= loc_5 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 44)
								loc_2 = rt_sub_i32(loc_2, 44)
								rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
								rt_store_i32(memory_at_0, loc_3 + 40, rt_load_i32(memory_at_0, loc_2 + 40))
								rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_2 + 32))
								rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 24))
								rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
								rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_4 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_4, loc_3)
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[481] = --[[ Luau::Parser::parseCharArray() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_add_i32(loc_1, 476)
		reg_1 = rt_load_i32(memory_at_0, loc_1 + 84)
		reg_2 = FUNC_LIST[394](rt_add_i32(loc_1, 60))
		reg_0 = FUNC_LIST[717](loc_3, reg_1, reg_2)
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 60), 269)] or 1
					if temp < 1 then
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[420](loc_3)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				FUNC_LIST[435](loc_1)
				rt_store_i32_n8(memory_at_0, loc_0, 0)
				rt_store_i32_n8(memory_at_0, loc_0 + 8, 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[422](loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_7 = rt_load_i32(memory_at_0, loc_1 + 480)
		loc_2 = rt_load_i32_i8(memory_at_0, loc_1 + 487)
		loc_5 = (if rt_lt_i32(loc_2, 0) then 1 else 0)
		loc_8 = (if loc_5 ~= 0 then loc_7 else loc_2)
		loc_6 = rt_add_i32(loc_8, 1)
		if loc_6 ~= 0 then
			while true do
				loc_3 = (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_1 + 476) else loc_3)
				loc_9 = bit_and(loc_6, 3)
				loc_7 = 0
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), loc_6)
				loc_4 = reg_0
				loc_2 = 0
				if loc_8 >= 3 then
					while true do
						loc_8 = bit_and(loc_6, 4294967292)
						loc_6 = 0
						while true do
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_4), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3)))
							loc_5 = bit_or(loc_2, 1)
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, loc_4), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_5)))
							loc_5 = bit_or(loc_2, 2)
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, loc_4), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_5)))
							loc_5 = bit_or(loc_2, 3)
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, loc_4), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_5)))
							loc_2 = rt_add_i32(loc_2, 4)
							loc_6 = rt_add_i32(loc_6, 4)
							if loc_8 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				if loc_9 ~= 0 then
					while true do
						while true do
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_4), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3)))
							loc_2 = rt_add_i32(loc_2, 1)
							loc_7 = rt_add_i32(loc_7, 1)
							if loc_9 ~= loc_7 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				loc_7 = rt_load_i32(memory_at_0, loc_1 + 480)
				reg_0 = rt_load_i32_u8(memory_at_0, loc_1 + 487)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = reg_0
		FUNC_LIST[435](loc_1)
		rt_store_i32(memory_at_0, loc_0, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 4, (if rt_lt_i32(rt_extend_i32_n8(loc_2), 0) then loc_7 else loc_2))
		rt_store_i32_n8(memory_at_0, loc_0 + 8, 1)
		break
	end
end
FUNC_LIST[482] = --[[ Luau::Parser::report(Luau::Location const&, char const*, void*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 240)
					if loc_5 ~= rt_load_i32(memory_at_0, loc_0 + 236) then
						while true do
							reg_0 = FUNC_LIST[424](loc_1, rt_sub_i32(loc_5, 28))
							if reg_0 ~= 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[514](rt_add_i32(loc_4, 4), loc_2, loc_3)
					if rt_load_i32(memory_at_0, 49040) == 1 then
						desired = 2
						break
					end
					reg_0 = loc_0
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 240)
						if loc_3 < rt_load_i32(memory_at_0, loc_0 + 244) then
							while true do
								rt_store_i32(memory_at_0, loc_3, 31260)
								rt_store_i64(memory_at_0, loc_3 + 12, rt_load_i64(memory_at_0, loc_1 + 8))
								rt_store_i64(memory_at_0, loc_3 + 4, rt_load_i64(memory_at_0, loc_1))
								loc_2 = rt_add_i32(loc_3, 20)
								while true do
									if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_4 + 15), 0) then
										while true do
											rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4 + 4))
											rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_4 + 12))
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[716](loc_2, rt_load_i32(memory_at_0, loc_4 + 4), rt_load_i32(memory_at_0, loc_4 + 8))
									break
								end
								if desired then
									break
								end
								reg_1 = rt_add_i32(loc_3, 32)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_1 = FUNC_LIST[510](rt_add_i32(loc_0, 236), loc_1, rt_add_i32(loc_4, 4))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = reg_1
					rt_store_i32(memory_at_0, reg_0 + 240, loc_3)
					reg_0 = rt_shr_i32(rt_sub_i32(loc_3, rt_load_i32(memory_at_0, loc_0 + 236)), 5)
					loc_0 = rt_load_i32(memory_at_0, 49040)
					if reg_0 >= loc_0 then
						desired = 1
						break
					end
					if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_4 + 15), 0) then
						break
					end
					FUNC_LIST[653](rt_load_i32(memory_at_0, loc_4 + 4), bit_and(rt_load_i32(memory_at_0, loc_4 + 12), 2147483647))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[578](32)
			reg_0 = FUNC_LIST[425](reg_0, loc_1, rt_add_i32(loc_4, 4))
			FUNC_LIST[0](reg_0, 31292, 194)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_4, loc_0)
		FUNC_LIST[427](loc_1, 7516, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[483] = --[[ Luau::Parser::parseAssertionExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		loc_6 = rt_load_i64(memory_at_0, loc_0 + 64)
		reg_0 = FUNC_LIST[504](loc_0)
		loc_3 = reg_0
		if rt_load_i32(memory_at_0, loc_0 + 60) == 264 then
			while true do
				FUNC_LIST[435](loc_0)
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
				loc_2 = rt_sub_i32(loc_0, 4294967232)
				rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
				rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
				loc_2 = 0
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 60)
					if loc_5 == 38 then
						break
					end
					if loc_5 == 124 then
						break
					end
					FUNC_LIST[474](rt_add_i32(loc_1, 8), loc_0, 0, 0)
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
					rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
					break
				end
				reg_0 = FUNC_LIST[475](loc_0, loc_2, rt_add_i32(loc_1, 16))
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
				rt_store_i64(memory_at_0, loc_1 + 16, loc_6)
				rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 16))
				reg_0 = FUNC_LIST[392](loc_0, 32)
				reg_0 = FUNC_LIST[312](reg_0, rt_add_i32(loc_1, 16), loc_3, loc_2)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 32)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[484] = --[[ Luau::Parser::checkBinaryConfusables(Luau::Parser::BinaryOpPriority const*, unsigned int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 60)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 1, 1, 1, 1, 2, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(loc_5, 33)] or 0
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_5 == 124 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32_n8(memory_at_0, loc_0 + 4, 0)
				rt_store_i32_n8(memory_at_0, loc_0, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_load_i64(memory_at_0, loc_1 + 64)
			FUNC_LIST[418](rt_add_i32(loc_4, 20), rt_add_i32(loc_1, 40))
			reg_0 = loc_0
			while true do
				while true do
					if rt_load_i32(memory_at_0, loc_1 + 60) ~= 38 then
						break
					end
					if rt_load_i32(memory_at_0, loc_4 + 20) ~= 38 then
						break
					end
					reg_1 = FUNC_LIST[423](rt_add_i32(loc_1, 72), rt_add_i32(loc_4, 24))
					if reg_1 == 0 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_2 + 28) <= loc_3 then
						break
					end
					FUNC_LIST[435](loc_1)
					rt_store_i64(memory_at_0, loc_4, loc_6)
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_4 + 32))
					FUNC_LIST[438](loc_1, loc_4, 6744, 0)
					rt_store_i32(memory_at_0, loc_0, 14)
					reg_1 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_load_i32(memory_at_0, loc_1 + 60) ~= 124 then
						break
					end
					if rt_load_i32(memory_at_0, loc_4 + 20) ~= 124 then
						break
					end
					reg_1 = FUNC_LIST[423](rt_add_i32(loc_1, 72), rt_add_i32(loc_4, 24))
					if reg_1 == 0 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_2 + 30) <= loc_3 then
						break
					end
					FUNC_LIST[435](loc_1)
					rt_store_i64(memory_at_0, loc_4, loc_6)
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_4 + 32))
					FUNC_LIST[438](loc_1, loc_4, 6635, 0)
					rt_store_i32(memory_at_0, loc_0, 15)
					reg_1 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_load_i32(memory_at_0, loc_1 + 60) ~= 33 then
						break
					end
					if rt_load_i32(memory_at_0, loc_4 + 20) ~= 61 then
						break
					end
					reg_1 = FUNC_LIST[423](rt_add_i32(loc_1, 72), rt_add_i32(loc_4, 24))
					if reg_1 == 0 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_2 + 16) <= loc_3 then
						break
					end
					FUNC_LIST[435](loc_1)
					rt_store_i64(memory_at_0, loc_4, loc_6)
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_4 + 32))
					FUNC_LIST[438](loc_1, loc_4, 6841, 0)
					rt_store_i32(memory_at_0, loc_0, 8)
					reg_1 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32_n8(memory_at_0, loc_0, 0)
				reg_1 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = reg_1
			rt_store_i32_n8(memory_at_0, reg_0 + 4, loc_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 48)
		break
	end
end
FUNC_LIST[485] = --[[ Luau::Parser::expectMatchEndAndConsumeFail(Luau::Lexeme::Type, Luau::Parser::MatchLexeme const&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 176)
				if loc_4 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, loc_0 + 180) <= rt_load_i32(memory_at_0, loc_2 + 4) then
					break
				end
				rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_3 + 8, rt_i64_ZERO)
				reg_1 = FUNC_LIST[393](rt_add_i32(loc_3, 24), rt_add_i32(loc_3, 8), loc_4)
				FUNC_LIST[395](rt_add_i32(loc_3, 52), reg_1)
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 180)
				rt_store_i32(memory_at_0, loc_3, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 63), 0) then rt_load_i32(memory_at_0, loc_3 + 52) else rt_add_i32(loc_3, 52)))
				rt_store_i32(memory_at_0, loc_3 + 4, rt_add_i32(loc_4, 1))
				FUNC_LIST[513](rt_add_i32(loc_3, 24), 6418, loc_3)
				FUNC_LIST[469](loc_0, loc_1, loc_2, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 35), 0) then rt_load_i32(memory_at_0, loc_3 + 24) else rt_add_i32(loc_3, 24)))
				if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 35), 0) then
					while true do
						FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 24), bit_and(rt_load_i32(memory_at_0, loc_3 + 32), 2147483647))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_3 + 63), 0) then
					desired = 1
					break
				end
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 52), bit_and(rt_load_i32(memory_at_0, loc_3 + 60), 2147483647))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[469](loc_0, loc_1, loc_2, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_3, 4294967232)
		break
	end
end
FUNC_LIST[486] = --[[ Luau::Parser::expectAndConsume(char, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_1 = bit_and(loc_1, 255)
			loc_4 = (if loc_1 == rt_load_i32(memory_at_0, loc_0 + 60) then 1 else 0)
			if loc_4 == 0 then
				while true do
					FUNC_LIST[432](loc_0, loc_1, loc_2)
					FUNC_LIST[418](rt_add_i32(loc_3, 4), rt_add_i32(loc_0, 40))
					if loc_1 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 32)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[487] = --[[ Luau::Parser::parseVariadicArgumentTypePack() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_2 ~= 281 then
					break
				end
				loc_3 = rt_add_i32(loc_0, 40)
				FUNC_LIST[418](rt_add_i32(loc_1, 8), loc_3)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
				if rt_load_i32(memory_at_0, loc_1 + 8) ~= 262 then
					break
				end
				while true do
					if loc_2 == 281 then
						while true do
							loc_5 = rt_load_i64(memory_at_0, loc_0 + 64)
							loc_2 = rt_load_i32(memory_at_0, loc_0 + 84)
							FUNC_LIST[435](loc_0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[464](loc_0, 4377)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 168)
					loc_5 = rt_load_i64(memory_at_0, loc_0 + 64)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_load_i64(memory_at_0, loc_0 + 72)
				while true do
					if rt_load_i32(memory_at_0, loc_0 + 60) ~= 262 then
						while true do
							FUNC_LIST[432](loc_0, 262, 3236)
							FUNC_LIST[418](rt_add_i32(loc_1, 8), loc_3)
							if rt_load_i32(memory_at_0, loc_1 + 8) ~= 262 then
								desired = 3
								break
							end
							FUNC_LIST[435](loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
				rt_store_i64(memory_at_0, loc_1 + 16, loc_6)
				rt_store_i64(memory_at_0, loc_1 + 8, loc_5)
				reg_0 = FUNC_LIST[392](loc_0, 28)
				reg_0 = FUNC_LIST[385](reg_0, rt_add_i32(loc_1, 8), loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 156)
			rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_0 + 72))
			rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_0 + 64))
			while true do
				if loc_2 == 38 then
					break
				end
				if loc_2 == 124 then
					break
				end
				FUNC_LIST[474](rt_add_i32(loc_1, 40), loc_0, 0, 0)
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 40)
				rt_store_i32(memory_at_0, loc_0 + 156, loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[475](loc_0, loc_4, rt_add_i32(loc_1, 8))
			loc_2 = reg_0
			rt_store_i32(memory_at_0, loc_0 + 156, loc_3)
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
			reg_0 = FUNC_LIST[383](reg_0, rt_add_i32(loc_2, 8), loc_2)
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[488] = --[[ Luau::Parser::parseNameExpr(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_2
		loc_5 = rt_sub_i32(loc_0, 4294967232)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 60) ~= 281 then
				while true do
					FUNC_LIST[464](loc_0, loc_1)
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_2 + 8, rt_i64_ZERO)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 236)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 240)
					reg_0 = FUNC_LIST[392](loc_1, 36)
					reg_0 = FUNC_LIST[316](reg_0, loc_5, rt_add_i32(loc_2, 8), rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_0, loc_3), 5), 1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 84)
			loc_1 = rt_add_i32(loc_2, 40)
			rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5 + 8))
			rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_5))
			FUNC_LIST[435](loc_0)
			rt_store_i64(memory_at_0, loc_2 + 20, rt_load_i64(memory_at_0, loc_2 + 40))
			rt_store_i32(memory_at_0, loc_2 + 8, loc_4)
			rt_store_i64(memory_at_0, loc_2 + 12, rt_load_i64(memory_at_0, loc_2 + 32))
			rt_store_i32_n8(memory_at_0, loc_2 + 28, 1)
			loc_8 = rt_add_i32(loc_2, 12)
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 212) == 0 then
					break
				end
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 216)
				if loc_9 == loc_4 then
					break
				end
				loc_3 = bit_xor(rt_shr_u32(loc_4, 4), rt_shr_u32(loc_4, 9))
				loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 208), 1)
				loc_10 = rt_load_i32(memory_at_0, loc_0 + 204)
				loc_1 = 0
				while true do
					loc_7 = bit_and(loc_3, loc_6)
					loc_11 = rt_add_i32(rt_shl_i32(loc_7, 3), loc_10)
					loc_3 = rt_load_i32(memory_at_0, loc_11)
					if loc_3 ~= loc_4 then
						while true do
							if loc_3 == loc_9 then
								desired = 2
								break
							end
							loc_1 = rt_add_i32(loc_1, 1)
							loc_3 = rt_add_i32(loc_7, loc_1)
							if loc_1 <= loc_6 then
								desired = 3
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_11 + 4)
				if loc_1 == 0 then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
				while true do
					if rt_load_i32_u8(memory_at_0, 49092) ~= 1 then
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 200) <= loc_3 then
						break
					end
					rt_store_i64(memory_at_0, loc_2 + 32, rt_i64_ZERO)
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
					reg_0 = FUNC_LIST[471](loc_0, loc_5, rt_add_i32(loc_2, 32), 7996, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 188)
				loc_7 = rt_load_i32(memory_at_0, loc_0 + 192)
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 32)
				reg_0 = FUNC_LIST[291](reg_0, loc_8, loc_1, (if rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_7, loc_6), 3), 1) ~= loc_3 then 1 else 0))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
			reg_0 = FUNC_LIST[293](reg_0, loc_8, rt_add_i32(loc_2, 8))
			break
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[489] = --[[ Luau::Parser::validateAttribute(char const*, Luau::TempVector<Luau::AstAttr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, 48448)
					if loc_5 == 0 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[584](loc_2, loc_5)
						if reg_0 == 0 then
							while true do
								loc_6 = 48448
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_4 = rt_add_i32(loc_4, 1)
							loc_6 = rt_add_i32(rt_shl_i32(loc_4, 3), 48448)
							loc_5 = rt_load_i32(memory_at_0, loc_6)
							if loc_5 == 0 then
								desired = 3
								break
							end
							reg_0 = FUNC_LIST[584](loc_2, loc_5)
							if reg_0 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = rt_load_i32(memory_at_0, loc_6 + 4)
					if rt_load_i32_u8(memory_at_0, 49068) ~= 0 then
						desired = 2
						break
					end
					if loc_5 ~= 1 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_sub_i32(loc_1, 4294967232)
				loc_5 = 1
				reg_0 = FUNC_LIST[544](loc_2)
				if reg_0 == 1 then
					while true do
						FUNC_LIST[438](loc_1, loc_4, 3644, 0)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_7, loc_2)
				FUNC_LIST[438](loc_1, loc_4, 8076, loc_7)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = 1
			loc_6 = rt_load_i32(memory_at_0, loc_3 + 8)
			if loc_6 == 0 then
				break
			end
			loc_4 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3)), rt_shl_i32(rt_load_i32(memory_at_0, loc_3 + 4), 2))
			loc_6 = rt_add_i32(loc_4, rt_shl_i32(loc_6, 2))
			loc_3 = rt_sub_i32(loc_1, 4294967232)
			while true do
				if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4) + 24) == loc_5 then
					while true do
						rt_store_i32(memory_at_0, loc_7 + 16, loc_2)
						FUNC_LIST[438](loc_1, loc_3, 8044, rt_add_i32(loc_7, 16))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_4 = rt_add_i32(loc_4, 4)
				if loc_6 ~= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 4, loc_5)
		rt_store_i32_n8(memory_at_0, loc_0, loc_8)
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 32)
		break
	end
end
FUNC_LIST[490] = --[[ Luau::Parser::prepareFunctionArguments(Luau::Location const&, bool, Luau::TempVector<Luau::Parser::Binding> const&) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		if loc_3 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_5 + 8, rt_load_i32(memory_at_0, loc_1 + 160))
				rt_store_i64(memory_at_0, loc_5 + 20, rt_load_i64(memory_at_0, loc_2 + 8))
				rt_store_i64(memory_at_0, loc_5 + 12, rt_load_i64(memory_at_0, loc_2))
				rt_store_i32(memory_at_0, loc_5 + 28, 0)
				reg_0 = FUNC_LIST[461](loc_1, rt_add_i32(loc_5, 8))
				break
			end
		else
			while true do
				reg_0 = loc_8
				break
			end
		end
		loc_8 = reg_0
		loc_3 = rt_add_i32(loc_1, 356)
		rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 356)
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 360)
		rt_store_i32(memory_at_0, loc_5 + 16, 0)
		loc_6 = rt_shr_i32(rt_sub_i32(loc_6, loc_2), 2)
		rt_store_i32(memory_at_0, loc_5 + 12, loc_6)
		loc_2 = 0
		while true do
			if rt_load_i32(memory_at_0, loc_4 + 8) == 0 then
				break
			end
			while true do
				reg_1 = FUNC_LIST[461](loc_1, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4)), rt_mul_i32(rt_load_i32(memory_at_0, loc_4 + 4), 24)), rt_mul_i32(loc_2, 24)))
				rt_store_i32(memory_at_0, loc_5 + 4, reg_1)
				FUNC_LIST[440](rt_add_i32(loc_5, 8), rt_add_i32(loc_5, 4))
				loc_2 = rt_add_i32(loc_2, 1)
				if loc_2 < rt_load_i32(memory_at_0, loc_4 + 8) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_5 + 12)
			loc_3 = rt_load_i32(memory_at_0, loc_5 + 8)
			loc_7 = rt_load_i32(memory_at_0, loc_5 + 16)
			if loc_7 == 0 then
				while true do
					loc_7 = 0
					loc_2 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(loc_6, 2))
			loc_6 = 0
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_shl_i32(loc_7, 2))
			loc_2 = reg_0
			loc_4 = 0
			if loc_7 >= 4 then
				while true do
					loc_11 = bit_and(loc_7, 4294967292)
					while true do
						loc_1 = rt_shl_i32(loc_4, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_3)))
						loc_9 = bit_or(loc_1, 4)
						rt_store_i32(memory_at_0, rt_add_i32(loc_9, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_9)))
						loc_9 = bit_or(loc_1, 8)
						rt_store_i32(memory_at_0, rt_add_i32(loc_9, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_9)))
						loc_1 = bit_or(loc_1, 12)
						rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_3)))
						loc_4 = rt_add_i32(loc_4, 4)
						loc_10 = rt_add_i32(loc_10, 4)
						if loc_11 ~= loc_10 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_12 = bit_and(loc_7, 3)
			if loc_12 ~= 0 then
				while true do
					while true do
						loc_1 = rt_shl_i32(loc_4, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_2), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_3)))
						loc_4 = rt_add_i32(loc_4, 1)
						loc_6 = rt_add_i32(loc_6, 1)
						if loc_12 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = rt_load_i32(memory_at_0, loc_5 + 12)
			loc_3 = rt_load_i32(memory_at_0, loc_5 + 8)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 8, loc_7)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_2)
		rt_store_i32(memory_at_0, loc_0, loc_8)
		loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(loc_6, 2))
		if loc_4 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_3 + 4, loc_4)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
		break
	end
end
FUNC_LIST[491] = --[[ Luau::Parser::parseTypePack() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
			if loc_2 == 262 then
				while true do
					loc_5 = rt_load_i64(memory_at_0, loc_0 + 64)
					FUNC_LIST[435](loc_0)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 156)
					rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_0 + 72))
					rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_0 + 64))
					loc_2 = 0
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
						if loc_4 == 38 then
							break
						end
						if loc_4 == 124 then
							break
						end
						FUNC_LIST[474](rt_add_i32(loc_1, 8), loc_0, 0, 0)
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
						rt_store_i32(memory_at_0, loc_0 + 156, loc_3)
						break
					end
					if desired then
						break
					end
					reg_0 = FUNC_LIST[475](loc_0, loc_2, rt_add_i32(loc_1, 16))
					loc_2 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 156, loc_3)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_1 + 16, loc_5)
					rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 16))
					reg_0 = FUNC_LIST[392](loc_0, 28)
					reg_0 = FUNC_LIST[383](reg_0, rt_add_i32(loc_1, 16), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 == 281 then
				while true do
					loc_3 = rt_add_i32(loc_0, 40)
					FUNC_LIST[418](rt_add_i32(loc_1, 16), loc_3)
					loc_2 = 0
					reg_0 = loc_2
					if rt_load_i32(memory_at_0, loc_1 + 16) ~= 262 then
						desired = 1
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
							while true do
								loc_5 = rt_load_i64(memory_at_0, loc_0 + 64)
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 84)
								FUNC_LIST[435](loc_0)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[464](loc_0, 4377)
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 168)
						loc_5 = rt_load_i64(memory_at_0, loc_0 + 64)
						break
					end
					if desired then
						break
					end
					loc_6 = rt_load_i64(memory_at_0, loc_0 + 72)
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 60) ~= 262 then
							while true do
								FUNC_LIST[432](loc_0, 262, 3236)
								FUNC_LIST[418](rt_add_i32(loc_1, 16), loc_3)
								if rt_load_i32(memory_at_0, loc_1 + 16) ~= 262 then
									desired = 3
									break
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_1 + 24, loc_6)
					rt_store_i64(memory_at_0, loc_1 + 16, loc_5)
					reg_0 = FUNC_LIST[392](loc_0, 28)
					reg_0 = FUNC_LIST[385](reg_0, rt_add_i32(loc_1, 16), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = 0
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 48)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[492] = --[[ Luau::Parser::reportTypeError(Luau::Location const&, Luau::AstArray<Luau::AstType*> const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 12, loc_4)
		FUNC_LIST[482](loc_0, loc_1, loc_3, loc_4)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 236)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 240)
		reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 40)
		reg_0 = FUNC_LIST[379](reg_0, loc_1, loc_2, 0, rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_3, loc_4), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[493] = --[[ Luau::Parser::expectMatchAndConsume(char, Luau::Parser::MatchLexeme const&, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = bit_and(loc_1, 255)
		if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 60) then
			while true do
				FUNC_LIST[469](loc_0, loc_4, loc_2, 0)
				reg_0 = FUNC_LIST[470](loc_0, loc_1, loc_0, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[435](loc_0)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[494] = --[[ Luau::Parser::parseReturnType() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 192)
		GLOBAL_LIST[0].value = loc_2
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 156), 1)
		rt_store_i32(memory_at_0, loc_1 + 156, loc_5)
		while true do
			while true do
				while true do
					while true do
						if loc_5 <= rt_load_i32(memory_at_0, 49008) then
							while true do
								rt_store_i32(memory_at_0, loc_2 + 152, rt_load_i32(memory_at_0, loc_1 + 84))
								rt_store_i64(memory_at_0, loc_2 + 144, rt_load_i64(memory_at_0, loc_1 + 76))
								rt_store_i64(memory_at_0, loc_2 + 136, rt_load_i64(memory_at_0, loc_1 + 68))
								rt_store_i64(memory_at_0, loc_2 + 128, rt_load_i64(memory_at_0, loc_1 + 60))
								loc_3 = rt_load_i32(memory_at_0, loc_1 + 60)
								if loc_3 ~= 40 then
									while true do
										if loc_3 == 262 then
											desired = 4
											break
										end
										if loc_3 == 281 then
											while true do
												FUNC_LIST[418](rt_add_i32(loc_2, 160), rt_add_i32(loc_1, 40))
												if rt_load_i32(memory_at_0, loc_2 + 160) == 262 then
													desired = 4
													break
												end
												loc_5 = rt_load_i32(memory_at_0, loc_1 + 156)
												reg_0 = rt_load_i32(memory_at_0, loc_1 + 60)
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_0 = loc_3
												break
											end
											if desired then
												break
											end
										end
										loc_3 = reg_0
										rt_store_i64(memory_at_0, loc_2 + 168, rt_load_i64(memory_at_0, loc_1 + 72))
										rt_store_i64(memory_at_0, loc_2 + 160, rt_load_i64(memory_at_0, loc_1 + 64))
										while true do
											if loc_3 == 38 then
												break
											end
											if loc_3 == 124 then
												break
											end
											FUNC_LIST[474](rt_add_i32(loc_2, 116), loc_1, 0, 0)
											loc_7 = rt_load_i32(memory_at_0, loc_2 + 116)
											rt_store_i32(memory_at_0, loc_1 + 156, loc_5)
											break
										end
										if desired then
											break
										end
										reg_0 = FUNC_LIST[475](loc_1, loc_7, rt_add_i32(loc_2, 160))
										loc_3 = reg_0
										rt_store_i32(memory_at_0, loc_1 + 156, loc_5)
										reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), 4)
										loc_1 = reg_0
										rt_store_i32(memory_at_0, loc_1, loc_3)
										rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_3 + 16))
										rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_3 + 8))
										rt_store_i64(memory_at_0, loc_0 + 20, rt_i64_ONE)
										rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
										desired = 1
										break
									end
									if desired then
										break
									end
								end
								FUNC_LIST[435](loc_1)
								rt_store_i64(memory_at_0, loc_2 + 168, rt_load_i64(memory_at_0, loc_1 + 72))
								rt_store_i64(memory_at_0, loc_2 + 160, rt_load_i64(memory_at_0, loc_1 + 64))
								loc_3 = rt_load_i32(memory_at_0, loc_1 + 248)
								rt_store_i32(memory_at_0, loc_3 + 1052, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 1052), 1))
								rt_store_i32(memory_at_0, loc_2 + 116, rt_add_i32(loc_1, 380))
								loc_3 = rt_load_i32(memory_at_0, loc_1 + 380)
								loc_5 = rt_load_i32(memory_at_0, loc_1 + 384)
								rt_store_i32(memory_at_0, loc_2 + 124, 0)
								rt_store_i32(memory_at_0, loc_2 + 120, rt_shr_i32(rt_sub_i32(loc_5, loc_3), 2))
								rt_store_i32(memory_at_0, loc_2 + 104, rt_add_i32(loc_1, 464))
								loc_3 = rt_load_i32(memory_at_0, loc_1 + 464)
								loc_5 = rt_load_i32(memory_at_0, loc_1 + 468)
								rt_store_i32(memory_at_0, loc_2 + 112, 0)
								rt_store_i32(memory_at_0, loc_2 + 108, rt_div_i32(rt_sub_i32(loc_5, loc_3), 24))
								if rt_load_i32(memory_at_0, loc_1 + 60) == 41 then
									while true do
										loc_13 = rt_load_i64(memory_at_0, loc_1 + 72)
										rt_store_i64(memory_at_0, loc_2 + 96, loc_13)
										loc_14 = rt_load_i64(memory_at_0, loc_2 + 132)
										desired = 3
										break
									end
									if desired then
										break
									end
								end
								reg_0 = FUNC_LIST[495](loc_1, rt_add_i32(loc_2, 116), rt_add_i32(loc_2, 104))
								loc_12 = reg_0
								loc_3 = rt_load_i32(memory_at_0, loc_1 + 60)
								loc_13 = rt_load_i64(memory_at_0, loc_1 + 72)
								rt_store_i64(memory_at_0, loc_2 + 96, loc_13)
								loc_14 = rt_load_i64(memory_at_0, loc_2 + 132)
								rt_store_i64(memory_at_0, loc_2 + 88, loc_14)
								rt_store_i32(memory_at_0, loc_2 + 84, rt_load_i32(memory_at_0, loc_2 + 128))
								if loc_3 == 41 then
									desired = 3
									break
								end
								FUNC_LIST[469](loc_1, 41, rt_add_i32(loc_2, 84), 0)
								reg_0 = FUNC_LIST[470](loc_1, 41, loc_2, 1)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_2, 3313)
						FUNC_LIST[427](rt_sub_i32(loc_1, 4294967232), 4634, loc_2)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = FUNC_LIST[491](loc_1)
					loc_3 = reg_1
					rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_3 + 8))
					rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_3 + 16))
					rt_store_i32(memory_at_0, loc_0 + 24, loc_3)
					rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[435](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 248)
			rt_store_i32(memory_at_0, loc_3 + 1052, rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 1052), 1))
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 112)
			while true do
				while true do
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 60) == 263 then
							break
						end
						if loc_4 ~= 0 then
							break
						end
						loc_5 = 0
						while true do
							while true do
								loc_9 = rt_load_i32(memory_at_0, loc_2 + 124)
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 4, 0, }
									end)()
								end
								temp = br_map[1][loc_9] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 2
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_1 = FUNC_LIST[475](loc_1, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 116)), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 120), 2))), rt_add_i32(loc_2, 160))
							loc_3 = reg_1
							reg_0 = (if rt_load_i32(memory_at_0, loc_2 + 124) == 1 then rt_add_i32(loc_2, 96) else rt_add_i32(loc_3, 16))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = bit_and(loc_9, 3)
						loc_7 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 116)), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 120), 2))
						loc_4 = 0
						reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_shl_i32(loc_9, 2))
						loc_5 = reg_0
						loc_3 = 0
						if rt_sub_i32(loc_9, 1) >= 3 then
							while true do
								loc_11 = bit_and(loc_9, 4294967292)
								while true do
									loc_1 = rt_shl_i32(loc_3, 2)
									rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_7)))
									loc_8 = bit_or(loc_1, 4)
									rt_store_i32(memory_at_0, rt_add_i32(loc_8, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_8)))
									loc_8 = bit_or(loc_1, 8)
									rt_store_i32(memory_at_0, rt_add_i32(loc_8, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_8)))
									loc_1 = bit_or(loc_1, 12)
									rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_7)))
									loc_3 = rt_add_i32(loc_3, 4)
									loc_6 = rt_add_i32(loc_6, 4)
									if loc_11 ~= loc_6 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_10 == 0 then
							desired = 2
							break
						end
						while true do
							loc_1 = rt_shl_i32(loc_3, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_7)))
							loc_3 = rt_add_i32(loc_3, 1)
							loc_4 = rt_add_i32(loc_4, 1)
							if loc_10 ~= loc_4 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i64(memory_at_0, loc_2 + 76, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_2 + 84, rt_i64_ZERO)
					rt_store_i64(memory_at_0, loc_2 + 68, rt_i64_ZERO)
					while true do
						loc_8 = rt_load_i32(memory_at_0, loc_2 + 124)
						if loc_8 == 0 then
							while true do
								rt_store_i64(memory_at_0, loc_2 + 60, rt_i64_ZERO)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 116))
						loc_7 = rt_load_i32(memory_at_0, loc_2 + 120)
						reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_shl_i32(loc_8, 2))
						loc_5 = reg_0
						rt_store_i32(memory_at_0, loc_2 + 64, loc_8)
						rt_store_i32(memory_at_0, loc_2 + 60, loc_5)
						loc_9 = bit_and(loc_8, 3)
						loc_7 = rt_add_i32(rt_shl_i32(loc_7, 2), loc_3)
						loc_3 = 0
						if loc_8 >= 4 then
							while true do
								loc_11 = bit_and(loc_8, 4294967292)
								loc_8 = 0
								while true do
									loc_4 = rt_shl_i32(loc_3, 2)
									rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
									loc_10 = bit_or(loc_4, 4)
									rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_10)))
									loc_10 = bit_or(loc_4, 8)
									rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_10)))
									loc_4 = bit_or(loc_4, 12)
									rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
									loc_3 = rt_add_i32(loc_3, 4)
									loc_8 = rt_add_i32(loc_8, 4)
									if loc_11 ~= loc_8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_9 ~= 0 then
							while true do
								while true do
									loc_4 = rt_shl_i32(loc_3, 2)
									rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_5), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_7)))
									loc_3 = rt_add_i32(loc_3, 1)
									loc_6 = rt_add_i32(loc_6, 1)
									if loc_9 ~= loc_6 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, loc_2 + 112)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_4 == 0 then
							while true do
								rt_store_i64(memory_at_0, loc_2 + 52, rt_i64_ZERO)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 104))
						loc_7 = rt_load_i32(memory_at_0, loc_2 + 108)
						reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_mul_i32(loc_4, 24))
						loc_5 = reg_0
						rt_store_i32(memory_at_0, loc_2 + 56, loc_4)
						rt_store_i32(memory_at_0, loc_2 + 52, loc_5)
						loc_9 = bit_and(loc_4, 3)
						loc_7 = rt_add_i32(rt_mul_i32(loc_7, 24), loc_3)
						loc_8 = 0
						loc_3 = 0
						if loc_4 >= 4 then
							while true do
								loc_11 = bit_and(loc_4, 4294967292)
								loc_10 = 0
								while true do
									loc_6 = rt_mul_i32(loc_3, 24)
									loc_4 = rt_add_i32(loc_6, loc_5)
									loc_6 = rt_add_i32(loc_6, loc_7)
									rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_6))
									rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									loc_6 = rt_mul_i32(bit_or(loc_3, 1), 24)
									loc_4 = rt_add_i32(loc_6, loc_5)
									loc_6 = rt_add_i32(loc_6, loc_7)
									rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_6))
									loc_6 = rt_mul_i32(bit_or(loc_3, 2), 24)
									loc_4 = rt_add_i32(loc_6, loc_5)
									loc_6 = rt_add_i32(loc_6, loc_7)
									rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_6))
									loc_6 = rt_mul_i32(bit_or(loc_3, 3), 24)
									loc_4 = rt_add_i32(loc_6, loc_5)
									loc_6 = rt_add_i32(loc_6, loc_7)
									rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_6))
									loc_3 = rt_add_i32(loc_3, 4)
									loc_10 = rt_add_i32(loc_10, 4)
									if loc_11 ~= loc_10 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_9 == 0 then
							break
						end
						while true do
							loc_6 = rt_mul_i32(loc_3, 24)
							loc_4 = rt_add_i32(loc_6, loc_5)
							loc_6 = rt_add_i32(loc_6, loc_7)
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_6))
							rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
							loc_3 = rt_add_i32(loc_3, 1)
							loc_8 = rt_add_i32(loc_8, 1)
							if loc_9 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_2 + 76))
					rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_2 + 68))
					rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_2 + 60))
					rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_2 + 52))
					reg_0 = FUNC_LIST[496](loc_1, rt_add_i32(loc_2, 128), rt_add_i32(loc_2, 84), rt_add_i32(loc_2, 40), rt_add_i32(loc_2, 32), rt_add_i32(loc_2, 24), rt_add_i32(loc_2, 16), loc_12)
					loc_3 = reg_0
					reg_0 = rt_add_i32(loc_3, 16)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = reg_0
				loc_13 = rt_load_i64(memory_at_0, loc_5)
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), 4)
				loc_5 = reg_0
				rt_store_i32(memory_at_0, loc_5, loc_3)
				loc_9 = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 24, loc_12)
			rt_store_i32(memory_at_0, loc_0 + 20, loc_9)
			rt_store_i32(memory_at_0, loc_0 + 16, loc_5)
			rt_store_i64(memory_at_0, loc_0 + 8, loc_13)
			rt_store_i64(memory_at_0, loc_0, loc_14)
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 104)
			loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 108), 24))
			if loc_1 ~= rt_load_i32(memory_at_0, loc_3 + 4) then
				while true do
					rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 116)
			loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 120), 2))
			if loc_1 == rt_load_i32(memory_at_0, loc_3 + 4) then
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 192)
		break
	end
end
FUNC_LIST[495] = --[[ Luau::Parser::parseTypeList(Luau::TempVector<Luau::AstType*>&, Luau::TempVector<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>>&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = rt_sub_i32(loc_0, 4294967232)
		loc_6 = rt_add_i32(loc_0, 40)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
		loc_8 = rt_add_i32(loc_3, 12)
		while true do
			while true do
				while true do
					while true do
						while true do
							if loc_4 ~= 262 then
								while true do
									if loc_4 ~= 281 then
										desired = 4
										break
									end
									FUNC_LIST[418](rt_add_i32(loc_3, 8), loc_6)
									if rt_load_i32(memory_at_0, loc_3 + 8) ~= 262 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[491](loc_0)
							loc_7 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 60) ~= 281 then
							break
						end
						FUNC_LIST[418](rt_add_i32(loc_3, 8), loc_6)
						if rt_load_i32(memory_at_0, loc_3 + 8) ~= 58 then
							break
						end
						if rt_load_i32(memory_at_0, loc_2 + 8) < rt_load_i32(memory_at_0, loc_1 + 8) then
							while true do
								while true do
									rt_store_i32_n8(memory_at_0, loc_3 + 28, 0)
									rt_store_i32_n8(memory_at_0, loc_3 + 8, 0)
									FUNC_LIST[462](loc_2, rt_add_i32(loc_3, 8))
									if rt_load_i32(memory_at_0, loc_2 + 8) < rt_load_i32(memory_at_0, loc_1 + 8) then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_0 + 84))
						rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
						rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_5))
						rt_store_i32_n8(memory_at_0, loc_3 + 28, 1)
						FUNC_LIST[462](loc_2, rt_add_i32(loc_3, 8))
						FUNC_LIST[435](loc_0)
						if rt_load_i32(memory_at_0, loc_0 + 60) ~= 58 then
							while true do
								FUNC_LIST[432](loc_0, 58, 0)
								FUNC_LIST[418](rt_add_i32(loc_3, 8), loc_6)
								if rt_load_i32(memory_at_0, loc_3 + 8) ~= 58 then
									desired = 3
									break
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[435](loc_0)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_2 + 8) == 0 then
						break
					end
					rt_store_i32_n8(memory_at_0, loc_3 + 28, 0)
					rt_store_i32_n8(memory_at_0, loc_3 + 8, 0)
					FUNC_LIST[462](loc_2, rt_add_i32(loc_3, 8))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 156)
				rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_5 + 8))
				rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_5))
				loc_4 = 0
				while true do
					loc_10 = rt_load_i32(memory_at_0, loc_0 + 60)
					if loc_10 == 38 then
						break
					end
					if loc_10 == 124 then
						break
					end
					FUNC_LIST[474](rt_add_i32(loc_3, 40), loc_0, 0, 0)
					loc_4 = rt_load_i32(memory_at_0, loc_3 + 40)
					rt_store_i32(memory_at_0, loc_0 + 156, loc_9)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				reg_0 = FUNC_LIST[475](loc_0, loc_4, rt_add_i32(loc_3, 8))
				loc_4 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 156, loc_9)
				rt_store_i32(memory_at_0, loc_3 + 40, loc_4)
				FUNC_LIST[440](loc_1, rt_add_i32(loc_3, 40))
				if rt_load_i32(memory_at_0, loc_0 + 60) ~= 44 then
					desired = 1
					break
				end
				FUNC_LIST[435](loc_0)
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_4 ~= 41 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[438](loc_0, loc_5, 5763, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 48)
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[496] = --[[ Luau::Parser::parseFunctionTypeTail(Luau::Lexeme const&, Luau::AstArray<Luau::AstAttr*> const&, Luau::AstArray<Luau::AstGenericType>, Luau::AstArray<Luau::AstGenericTypePack>, Luau::AstArray<Luau::AstType*>, Luau::AstArray<std::__2::optional<std::__2::pair<Luau::AstName, Luau::Location>>>, Luau::AstTypePack*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_8
		loc_9 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 156), 1)
		rt_store_i32(memory_at_0, loc_0 + 156, loc_9)
		if loc_9 <= rt_load_i32(memory_at_0, 49008) then
			while true do
				loc_9 = rt_add_i32(loc_0, 40)
				while true do
					while true do
						loc_10 = rt_load_i32(memory_at_0, loc_0 + 60)
						if loc_10 == 58 then
							while true do
								FUNC_LIST[438](loc_0, rt_sub_i32(loc_0, 4294967232), 8187, 0)
								reg_0 = FUNC_LIST[407](loc_9)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_10 = (if loc_10 == 263 then 1 else 0)
							if loc_10 ~= 0 then
								break
							end
							if rt_load_i32(memory_at_0, loc_3 + 4) ~= 0 then
								break
							end
							if rt_load_i32(memory_at_0, loc_4 + 4) ~= 0 then
								break
							end
							if rt_load_i32(memory_at_0, loc_5 + 4) ~= 0 then
								break
							end
							rt_store_i64(memory_at_0, loc_8 + 80, rt_load_i64(memory_at_0, loc_1 + 4))
							rt_store_i64(memory_at_0, loc_8 + 88, rt_load_i64(memory_at_0, loc_0 + 96))
							FUNC_LIST[438](loc_0, rt_add_i32(loc_8, 80), 6671, 0)
							reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 84)
							loc_3 = reg_0
							rt_store_i32_n8(memory_at_0, loc_8 + 52, 0)
							rt_store_i32_n8(memory_at_0, loc_8 + 48, 0)
							loc_0 = rt_load_i32(memory_at_0, loc_0 + 172)
							loc_4 = rt_add_i32(loc_8, 96)
							rt_store_i32_n8(memory_at_0, loc_4, 0)
							rt_store_i64(memory_at_0, loc_8 + 24, rt_load_i64(memory_at_0, loc_8 + 88))
							rt_store_i32(memory_at_0, loc_8 + 32, rt_load_i32(memory_at_0, loc_8 + 96))
							rt_store_i32_n8(memory_at_0, loc_8 + 80, 0)
							rt_store_i64(memory_at_0, loc_8 + 40, rt_load_i64(memory_at_0, loc_8 + 48))
							rt_store_i64(memory_at_0, loc_8 + 64, rt_i64_ZERO)
							rt_store_i64(memory_at_0, loc_8 + 16, rt_load_i64(memory_at_0, loc_8 + 80))
							loc_1 = rt_add_i32(loc_1, 4)
							reg_0 = FUNC_LIST[362](loc_3, loc_1, rt_add_i32(loc_8, 40), loc_0, rt_add_i32(loc_8, 16), loc_1, 0, rt_sub_i32(loc_8, 4294967232))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_10 == 0 then
							while true do
								FUNC_LIST[432](loc_0, 263, 4140)
								FUNC_LIST[418](rt_add_i32(loc_8, 80), loc_9)
								if rt_load_i32(memory_at_0, loc_8 + 80) ~= 263 then
									desired = 3
									break
								end
								FUNC_LIST[435](loc_0)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[435](loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					FUNC_LIST[494](rt_add_i32(loc_8, 80), loc_0)
					loc_11 = rt_load_i64(memory_at_0, loc_5)
					rt_store_i32(memory_at_0, loc_8 + 72, loc_7)
					rt_store_i64(memory_at_0, loc_8 + 64, loc_11)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
					rt_store_i64(memory_at_0, loc_8 + 48, rt_load_i64(memory_at_0, loc_1 + 4))
					rt_store_i64(memory_at_0, loc_8 + 56, rt_load_i64(memory_at_0, loc_8 + 88))
					reg_0 = FUNC_LIST[392](loc_0, 80)
					reg_0 = FUNC_LIST[367](reg_0, rt_add_i32(loc_8, 48), loc_2, loc_3, loc_4, rt_sub_i32(loc_8, 4294967232), loc_6, rt_add_i32(loc_8, 96))
					break
				end
				if desired then
					break
				end
				loc_0 = reg_0
				GLOBAL_LIST[0].value = rt_add_i32(loc_8, 112)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_8, 3313)
		FUNC_LIST[427](rt_sub_i32(loc_0, 4294967232), 4634, loc_8)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[497] = --[[ Luau::Parser::parseTableType(bool) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local loc_26 = 0
	local loc_27 = 0
	local loc_28 = 0
	local loc_29 = 0
	local loc_30 = rt_i64_ZERO
	local loc_31 = rt_i64_ZERO
	local loc_32 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 192)
		GLOBAL_LIST[0].value = loc_2
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 156), 1)
		rt_store_i32(memory_at_0, loc_0 + 156, loc_5)
		while true do
			while true do
				if loc_5 <= rt_load_i32(memory_at_0, 49008) then
					while true do
						rt_store_i32(memory_at_0, loc_2 + 172, rt_add_i32(loc_0, 368))
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 368)
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 372)
						rt_store_i32(memory_at_0, loc_2 + 180, 0)
						rt_store_i32(memory_at_0, loc_2 + 176, rt_div_i32(rt_sub_i32(loc_3, loc_5), 48))
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
						loc_32 = rt_load_i64(memory_at_0, loc_0 + 64)
						rt_store_i64(memory_at_0, loc_2 + 164, loc_32)
						rt_store_i32(memory_at_0, loc_2 + 160, loc_3)
						loc_9 = loc_0
						loc_5 = rt_add_i32(loc_9, 60)
						loc_8 = rt_add_i32(loc_0, 40)
						while true do
							if loc_3 ~= 123 then
								while true do
									FUNC_LIST[432](loc_0, 123, 4166)
									FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
									if rt_load_i32(memory_at_0, loc_2 + 48) ~= 123 then
										desired = 4
										break
									end
									FUNC_LIST[435](loc_0)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[435](loc_0)
							break
						end
						if desired then
							break
						end
						while true do
							while true do
								while true do
									while true do
										loc_4 = rt_load_i32(memory_at_0, loc_9 + 60)
										if loc_4 == 125 then
											break
										end
										loc_3 = rt_sub_i32(loc_0, 4294967232)
										loc_17 = loc_2
										loc_12 = rt_add_i32(loc_17, 77)
										loc_18 = loc_2
										loc_19 = rt_add_i32(loc_18, 52)
										loc_20 = rt_add_i32(loc_2, 116)
										loc_22 = loc_0
										loc_23 = rt_add_i32(loc_22, 65)
										while true do
											while true do
												while true do
													if loc_4 == 281 then
														while true do
															FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
															loc_10 = 3
															loc_11 = 0
															if rt_load_i32(memory_at_0, loc_2 + 48) == 58 then
																desired = 10
																break
															end
															loc_4 = rt_load_i32(memory_at_0, loc_0 + 84)
															if loc_4 == 0 then
																desired = 10
																break
															end
															reg_0 = FUNC_LIST[584](loc_4, 5809)
															if reg_0 == 0 then
																while true do
																	loc_11 = rt_load_i32_u8(memory_at_0, loc_3)
																	rt_store_i64(memory_at_0, loc_2 + 144, rt_load_i64(memory_at_0, loc_22 + 65))
																	rt_store_i64(memory_at_0, loc_2 + 151, rt_load_i64(memory_at_0, loc_23 + 7))
																	reg_0 = FUNC_LIST[407](loc_8)
																	loc_10 = 1
																	reg_0 = 1
																	desired = 9
																	break
																end
																if desired then
																	break
																end
															end
															loc_13 = 0
															reg_1 = FUNC_LIST[584](loc_4, 3998)
															reg_0 = loc_13
															if reg_1 ~= 0 then
																desired = 9
																break
															end
															loc_11 = rt_load_i32_u8(memory_at_0, loc_3)
															rt_store_i64(memory_at_0, loc_2 + 144, rt_load_i64(memory_at_0, loc_22 + 65))
															rt_store_i64(memory_at_0, loc_2 + 151, rt_load_i64(memory_at_0, loc_23 + 7))
															reg_0 = FUNC_LIST[407](loc_8)
															loc_10 = 2
															reg_0 = 1
															desired = 9
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_10 = 3
													loc_11 = 0
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												reg_0 = 0
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											loc_13 = reg_0
											while true do
												while true do
													while true do
														loc_4 = rt_load_i32(memory_at_0, loc_9 + 60)
														if loc_4 ~= 91 then
															break
														end
														FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
														while true do
															if rt_load_i32(memory_at_0, loc_2 + 48) ~= 278 then
																while true do
																	FUNC_LIST[418](rt_add_i32(loc_2, 112), loc_8)
																	if rt_load_i32(memory_at_0, loc_2 + 112) ~= 279 then
																		desired = 12
																		break
																	end
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															rt_store_i32(memory_at_0, loc_2 + 136, rt_load_i32(memory_at_0, loc_9 + 84))
															rt_store_i64(memory_at_0, loc_2 + 128, rt_load_i64(memory_at_0, loc_9 + 76))
															rt_store_i64(memory_at_0, loc_2 + 120, rt_load_i64(memory_at_0, loc_9 + 68))
															rt_store_i64(memory_at_0, loc_2 + 112, rt_load_i64(memory_at_0, loc_9 + 60))
															FUNC_LIST[435](loc_0)
															FUNC_LIST[481](rt_add_i32(loc_2, 100), loc_0)
															rt_store_i32(memory_at_0, loc_2 + 48, rt_load_i32(memory_at_0, loc_2 + 112))
															rt_store_i64(memory_at_0, loc_2 + 52, rt_load_i64(memory_at_0, loc_2 + 116))
															while true do
																if rt_load_i32(memory_at_0, loc_0 + 60) ~= 93 then
																	while true do
																		FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_2, 48), 0)
																		reg_0 = FUNC_LIST[470](loc_0, 93, loc_2, 0)
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																FUNC_LIST[435](loc_0)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															while true do
																if rt_load_i32(memory_at_0, loc_9 + 60) ~= 58 then
																	while true do
																		FUNC_LIST[432](loc_0, 58, 5108)
																		FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
																		if rt_load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																			desired = 13
																			break
																		end
																		FUNC_LIST[435](loc_0)
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																FUNC_LIST[435](loc_0)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
															rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_3 + 8))
															rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_3))
															loc_7 = 0
															while true do
																loc_14 = rt_load_i32(memory_at_0, loc_0 + 60)
																if loc_14 == 38 then
																	break
																end
																if loc_14 == 124 then
																	break
																end
																FUNC_LIST[474](rt_add_i32(loc_2, 184), loc_0, 0, 0)
																loc_7 = rt_load_i32(memory_at_0, loc_2 + 184)
																rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															reg_0 = FUNC_LIST[475](loc_0, loc_7, rt_add_i32(loc_2, 48))
															loc_7 = reg_0
															rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
															if rt_load_i32_u8(memory_at_0, loc_2 + 108) ~= 1 then
																desired = 10
																break
															end
															loc_14 = rt_load_i32(memory_at_0, loc_2 + 100)
															loc_4 = rt_load_i32(memory_at_0, loc_2 + 104)
															reg_0 = FUNC_LIST[610](loc_14, loc_4)
															if reg_0 < loc_4 then
																desired = 10
																break
															end
															rt_store_i32(memory_at_0, loc_2 + 48, loc_14)
															rt_store_i64(memory_at_0, loc_18 + 60, rt_load_i64(memory_at_0, loc_20 + 8))
															rt_store_i64(memory_at_0, loc_18 + 52, rt_load_i64(memory_at_0, loc_20))
															rt_store_i32_n8(memory_at_0, loc_2 + 76, loc_11)
															rt_store_i32(memory_at_0, loc_2 + 72, loc_10)
															rt_store_i32(memory_at_0, loc_2 + 68, loc_7)
															rt_store_i64(memory_at_0, loc_17 + 84, rt_load_i64(memory_at_0, loc_2 + 151))
															rt_store_i64(memory_at_0, loc_17 + 77, rt_load_i64(memory_at_0, loc_2 + 144))
															rt_store_i32_n8(memory_at_0, loc_2 + 92, loc_13)
															FUNC_LIST[498](rt_add_i32(loc_2, 172), rt_add_i32(loc_2, 48))
															desired = 9
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														loc_4 = rt_load_i32(memory_at_0, loc_9 + 60)
														if loc_4 ~= 91 then
															break
														end
														loc_30 = rt_load_i64(memory_at_0, loc_0 + 64)
														FUNC_LIST[435](loc_0)
														loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
														if loc_6 ~= 0 then
															while true do
																loc_24 = loc_2
																loc_14 = rt_add_i32(loc_24, 56)
																loc_25 = loc_3
																loc_15 = rt_add_i32(loc_25, 8)
																rt_store_i64(memory_at_0, loc_14, rt_load_i64(memory_at_0, loc_15))
																rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_3))
																loc_7 = 0
																while true do
																	loc_16 = rt_load_i32(memory_at_0, loc_9 + 60)
																	if loc_16 == 38 then
																		break
																	end
																	if loc_16 == 124 then
																		break
																	end
																	FUNC_LIST[474](rt_add_i32(loc_2, 112), loc_0, 0, 0)
																	loc_7 = rt_load_i32(memory_at_0, loc_2 + 112)
																	rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
																	break
																end
																if desired then
																	break
																end
																reg_0 = FUNC_LIST[475](loc_0, loc_7, rt_add_i32(loc_2, 48))
																loc_16 = reg_0
																rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
																rt_store_i64(memory_at_0, loc_2 + 52, loc_30)
																rt_store_i32(memory_at_0, loc_2 + 48, 91)
																while true do
																	if rt_load_i32(memory_at_0, loc_0 + 60) ~= 93 then
																		while true do
																			FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_2, 48), 0)
																			reg_0 = FUNC_LIST[470](loc_0, 93, loc_2, 0)
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	FUNC_LIST[435](loc_0)
																	break
																end
																if desired then
																	break
																end
																while true do
																	if rt_load_i32(memory_at_0, loc_9 + 60) ~= 58 then
																		while true do
																			FUNC_LIST[432](loc_0, 58, 5108)
																			FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
																			if rt_load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																				desired = 13
																				break
																			end
																			FUNC_LIST[435](loc_0)
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	FUNC_LIST[435](loc_0)
																	break
																end
																if desired then
																	break
																end
																loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
																rt_store_i64(memory_at_0, loc_24 + 56, rt_load_i64(memory_at_0, loc_25 + 8))
																rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_3))
																loc_7 = 0
																while true do
																	loc_14 = rt_load_i32(memory_at_0, loc_0 + 60)
																	if loc_14 == 38 then
																		break
																	end
																	if loc_14 == 124 then
																		break
																	end
																	FUNC_LIST[474](rt_add_i32(loc_2, 112), loc_0, 0, 0)
																	loc_7 = rt_load_i32(memory_at_0, loc_2 + 112)
																	rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
																	break
																end
																if desired then
																	break
																end
																reg_0 = FUNC_LIST[475](loc_0, loc_7, rt_add_i32(loc_2, 48))
																loc_7 = reg_0
																rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
																loc_31 = rt_load_i64(memory_at_0, loc_7 + 16)
																reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 48)
																loc_4 = reg_0
																rt_store_i32_n8(memory_at_0, loc_4 + 28, loc_11)
																rt_store_i32(memory_at_0, loc_4 + 24, loc_10)
																rt_store_i64(memory_at_0, loc_4 + 16, loc_31)
																rt_store_i64(memory_at_0, loc_4 + 8, loc_30)
																rt_store_i32(memory_at_0, loc_4 + 4, loc_7)
																rt_store_i32(memory_at_0, loc_4, loc_16)
																rt_store_i64(memory_at_0, loc_4 + 29, rt_load_i64(memory_at_0, loc_2 + 144))
																rt_store_i64(memory_at_0, loc_4 + 36, rt_load_i64(memory_at_0, loc_2 + 151))
																rt_store_i32_n8(memory_at_0, loc_4 + 44, loc_13)
																FUNC_LIST[438](loc_0, rt_add_i32(loc_4, 8), 2884, 0)
																desired = 9
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_26 = loc_2
														loc_7 = rt_add_i32(loc_26, 56)
														loc_27 = loc_3
														loc_14 = rt_add_i32(loc_27, 8)
														rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_14))
														rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_3))
														loc_6 = 0
														while true do
															loc_15 = rt_load_i32(memory_at_0, loc_9 + 60)
															if loc_15 == 38 then
																break
															end
															if loc_15 == 124 then
																break
															end
															FUNC_LIST[474](rt_add_i32(loc_2, 112), loc_0, 0, 0)
															loc_6 = rt_load_i32(memory_at_0, loc_2 + 112)
															rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[475](loc_0, loc_6, rt_add_i32(loc_2, 48))
														loc_15 = reg_0
														rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
														rt_store_i64(memory_at_0, loc_2 + 52, loc_30)
														rt_store_i32(memory_at_0, loc_2 + 48, 91)
														while true do
															if rt_load_i32(memory_at_0, loc_0 + 60) ~= 93 then
																while true do
																	FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_2, 48), 0)
																	reg_0 = FUNC_LIST[470](loc_0, 93, loc_2, 0)
																	desired = 12
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															FUNC_LIST[435](loc_0)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														while true do
															if rt_load_i32(memory_at_0, loc_9 + 60) ~= 58 then
																while true do
																	FUNC_LIST[432](loc_0, 58, 5108)
																	FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
																	if rt_load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																		desired = 12
																		break
																	end
																	FUNC_LIST[435](loc_0)
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
															end
															FUNC_LIST[435](loc_0)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														loc_6 = rt_load_i32(memory_at_0, loc_0 + 156)
														rt_store_i64(memory_at_0, loc_26 + 56, rt_load_i64(memory_at_0, loc_27 + 8))
														rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_3))
														loc_4 = 0
														while true do
															loc_7 = rt_load_i32(memory_at_0, loc_0 + 60)
															if loc_7 == 38 then
																break
															end
															if loc_7 == 124 then
																break
															end
															FUNC_LIST[474](rt_add_i32(loc_2, 112), loc_0, 0, 0)
															loc_4 = rt_load_i32(memory_at_0, loc_2 + 112)
															rt_store_i32(memory_at_0, loc_0 + 156, loc_6)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[475](loc_0, loc_4, rt_add_i32(loc_2, 48))
														loc_4 = reg_0
														rt_store_i32(memory_at_0, loc_0 + 156, loc_6)
														loc_31 = rt_load_i64(memory_at_0, loc_4 + 16)
														reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 48)
														loc_6 = reg_0
														rt_store_i32_n8(memory_at_0, loc_6 + 28, loc_11)
														rt_store_i32(memory_at_0, loc_6 + 24, loc_10)
														rt_store_i64(memory_at_0, loc_6 + 16, loc_31)
														rt_store_i64(memory_at_0, loc_6 + 8, loc_30)
														rt_store_i32(memory_at_0, loc_6 + 4, loc_4)
														rt_store_i32(memory_at_0, loc_6, loc_15)
														rt_store_i64(memory_at_0, loc_6 + 29, rt_load_i64(memory_at_0, loc_2 + 144))
														rt_store_i64(memory_at_0, loc_6 + 36, rt_load_i64(memory_at_0, loc_2 + 151))
														rt_store_i32_n8(memory_at_0, loc_6 + 44, loc_13)
														desired = 9
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													while true do
														if rt_load_i32(memory_at_0, loc_2 + 180) ~= 0 then
															break
														end
														if loc_6 ~= 0 then
															break
														end
														if loc_4 == 281 then
															while true do
																FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
																loc_4 = rt_load_i32(memory_at_0, loc_9 + 60)
																if rt_load_i32(memory_at_0, loc_2 + 48) == 58 then
																	desired = 11
																	break
																end
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_12 = rt_load_i32(memory_at_0, loc_0 + 156)
														loc_21 = loc_2
														loc_8 = rt_add_i32(loc_21, 56)
														rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_3 + 8))
														rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_3))
														loc_5 = 0
														while true do
															if loc_4 == 38 then
																break
															end
															if loc_4 == 124 then
																break
															end
															FUNC_LIST[474](rt_add_i32(loc_2, 112), loc_0, 0, 0)
															loc_5 = rt_load_i32(memory_at_0, loc_2 + 112)
															rt_store_i32(memory_at_0, loc_0 + 156, loc_12)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[475](loc_0, loc_5, rt_add_i32(loc_2, 48))
														loc_5 = reg_0
														rt_store_i32(memory_at_0, loc_0 + 156, loc_12)
														reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 84)
														loc_3 = reg_0
														rt_store_i32_n8(memory_at_0, loc_2 + 116, 0)
														rt_store_i32_n8(memory_at_0, loc_2 + 112, 0)
														loc_4 = rt_load_i32(memory_at_0, loc_0 + 164)
														loc_12 = rt_sub_i32(loc_2, 4294967232)
														rt_store_i32_n8(memory_at_0, loc_12, 0)
														rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_21 + 56))
														rt_store_i32(memory_at_0, loc_2 + 32, rt_load_i32(memory_at_0, loc_12))
														rt_store_i32_n8(memory_at_0, loc_2 + 48, 0)
														rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_2 + 112))
														rt_store_i64(memory_at_0, loc_2 + 100, rt_i64_ZERO)
														rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_2 + 48))
														loc_12 = rt_add_i32(loc_5, 8)
														reg_0 = FUNC_LIST[362](loc_3, loc_12, rt_add_i32(loc_2, 40), loc_4, rt_add_i32(loc_2, 16), loc_12, 0, rt_add_i32(loc_2, 100))
														loc_3 = reg_0
														loc_4 = rt_load_i32(memory_at_0, loc_0 + 124)
														rt_store_i64(memory_at_0, loc_21 + 56, rt_load_i64(memory_at_0, loc_5 + 16))
														rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_5 + 8))
														reg_0 = FUNC_LIST[392](loc_4, 48)
														loc_6 = reg_0
														rt_store_i32(memory_at_0, loc_6 + 4, loc_5)
														rt_store_i32(memory_at_0, loc_6, loc_3)
														rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_2 + 48))
														rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_21 + 56))
														rt_store_i32_n8(memory_at_0, loc_6 + 28, loc_11)
														rt_store_i32(memory_at_0, loc_6 + 24, loc_10)
														loc_30 = rt_load_i64(memory_at_0, loc_2 + 151)
														loc_31 = rt_load_i64(memory_at_0, loc_2 + 144)
														rt_store_i32_n8(memory_at_0, loc_6 + 44, loc_13)
														rt_store_i64(memory_at_0, loc_6 + 29, loc_31)
														rt_store_i64(memory_at_0, loc_6 + 36, loc_30)
														desired = 5
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													if loc_4 ~= 281 then
														desired = 6
														break
													end
													loc_14 = rt_load_i32(memory_at_0, loc_0 + 84)
													loc_28 = loc_2
													loc_15 = rt_add_i32(loc_28, 120)
													loc_29 = loc_3
													loc_7 = rt_add_i32(loc_29, 8)
													rt_store_i64(memory_at_0, loc_15, rt_load_i64(memory_at_0, loc_7))
													rt_store_i64(memory_at_0, loc_2 + 112, rt_load_i64(memory_at_0, loc_3))
													FUNC_LIST[435](loc_0)
													while true do
														if rt_load_i32(memory_at_0, loc_0 + 60) ~= 58 then
															while true do
																FUNC_LIST[432](loc_0, 58, 5108)
																FUNC_LIST[418](rt_add_i32(loc_2, 48), loc_8)
																if rt_load_i32(memory_at_0, loc_2 + 48) ~= 58 then
																	desired = 11
																	break
																end
																FUNC_LIST[435](loc_0)
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														FUNC_LIST[435](loc_0)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													loc_4 = rt_load_i32(memory_at_0, loc_0 + 156)
													rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_29 + 8))
													rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_3))
													loc_7 = 0
													while true do
														loc_16 = rt_load_i32(memory_at_0, loc_0 + 60)
														if loc_16 == 38 then
															break
														end
														if loc_16 == 124 then
															break
														end
														FUNC_LIST[474](rt_add_i32(loc_2, 100), loc_0, 0, loc_1)
														loc_7 = rt_load_i32(memory_at_0, loc_2 + 100)
														rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													reg_0 = FUNC_LIST[475](loc_0, loc_7, rt_add_i32(loc_2, 48))
													loc_7 = reg_0
													rt_store_i32(memory_at_0, loc_0 + 156, loc_4)
													rt_store_i32(memory_at_0, loc_2 + 48, loc_14)
													rt_store_i64(memory_at_0, loc_18 + 60, rt_load_i64(memory_at_0, loc_28 + 120))
													rt_store_i64(memory_at_0, loc_18 + 52, rt_load_i64(memory_at_0, loc_2 + 112))
													rt_store_i32_n8(memory_at_0, loc_2 + 76, loc_11)
													rt_store_i32(memory_at_0, loc_2 + 72, loc_10)
													rt_store_i32(memory_at_0, loc_2 + 68, loc_7)
													rt_store_i64(memory_at_0, loc_17 + 84, rt_load_i64(memory_at_0, loc_2 + 151))
													rt_store_i64(memory_at_0, loc_17 + 77, rt_load_i64(memory_at_0, loc_2 + 144))
													rt_store_i32_n8(memory_at_0, loc_2 + 92, loc_13)
													FUNC_LIST[498](rt_add_i32(loc_2, 172), rt_add_i32(loc_2, 48))
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												FUNC_LIST[438](loc_0, loc_20, 7118, 0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											while true do
												while true do
													while true do
														loc_4 = rt_load_i32(memory_at_0, loc_9 + 60)
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, }
															end)()
														end
														temp = br_map[1][rt_sub_i32(loc_4, 44)] or 0
														if temp < 1 then
															break
														elseif temp > 1 then
															desired = 9
															break
														else
															desired = 10
															break
														end
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													if loc_4 == 125 then
														desired = 7
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												loc_30 = rt_load_i64(memory_at_0, loc_0 + 72)
												desired = 2
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											FUNC_LIST[435](loc_0)
											loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
											if loc_4 ~= 125 then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_30 = rt_load_i64(memory_at_0, loc_0 + 72)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								FUNC_LIST[464](loc_0, 5108)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_30 = rt_load_i64(memory_at_0, loc_0 + 72)
							if rt_load_i32(memory_at_0, loc_0 + 60) ~= 125 then
								desired = 2
								break
							end
							break
						end
						if desired then
							break
						end
						FUNC_LIST[435](loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_2, 3313)
				FUNC_LIST[427](rt_sub_i32(loc_0, 4294967232), 4634, loc_2)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[469](loc_0, 125, rt_add_i32(loc_2, 160), 0)
			reg_0 = FUNC_LIST[470](loc_0, 125, loc_2, 0)
			if reg_0 ~= 0 then
				break
			end
			loc_30 = rt_load_i64(memory_at_0, loc_0 + 96)
			break
		end
		loc_19 = rt_load_i32(memory_at_0, loc_0 + 124)
		rt_store_i64(memory_at_0, loc_2 + 56, loc_30)
		rt_store_i64(memory_at_0, loc_2 + 48, loc_32)
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_2 + 180)
			if loc_5 == 0 then
				while true do
					rt_store_i64(memory_at_0, loc_2 + 112, rt_i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 172))
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 176)
			reg_0 = FUNC_LIST[392](loc_19, rt_mul_i32(loc_5, 48))
			loc_8 = reg_0
			rt_store_i32(memory_at_0, loc_2 + 116, loc_5)
			rt_store_i32(memory_at_0, loc_2 + 112, loc_8)
			loc_13 = bit_and(loc_5, 3)
			loc_4 = rt_add_i32(rt_mul_i32(loc_3, 48), loc_0)
			loc_10 = 0
			loc_0 = 0
			if loc_5 >= 4 then
				while true do
					loc_12 = bit_and(loc_5, 4294967292)
					loc_11 = 0
					while true do
						loc_3 = rt_mul_i32(loc_0, 48)
						loc_5 = rt_add_i32(loc_3, loc_8)
						loc_3 = rt_add_i32(loc_3, loc_4)
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_5 + 40, rt_load_i64(memory_at_0, loc_3 + 40))
						rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_3 + 32))
						rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_3 + 24))
						rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						loc_3 = rt_mul_i32(bit_or(loc_0, 1), 48)
						loc_5 = rt_add_i32(loc_3, loc_8)
						loc_3 = rt_add_i32(loc_3, loc_4)
						rt_store_i64(memory_at_0, loc_5 + 40, rt_load_i64(memory_at_0, loc_3 + 40))
						rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_3 + 32))
						rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_3 + 24))
						rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
						loc_3 = rt_mul_i32(bit_or(loc_0, 2), 48)
						loc_5 = rt_add_i32(loc_3, loc_8)
						loc_3 = rt_add_i32(loc_3, loc_4)
						rt_store_i64(memory_at_0, loc_5 + 40, rt_load_i64(memory_at_0, loc_3 + 40))
						rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_3 + 32))
						rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_3 + 24))
						rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
						loc_3 = rt_mul_i32(bit_or(loc_0, 3), 48)
						loc_5 = rt_add_i32(loc_3, loc_8)
						loc_3 = rt_add_i32(loc_3, loc_4)
						rt_store_i64(memory_at_0, loc_5 + 40, rt_load_i64(memory_at_0, loc_3 + 40))
						rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_3 + 32))
						rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_3 + 24))
						rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
						loc_0 = rt_add_i32(loc_0, 4)
						loc_11 = rt_add_i32(loc_11, 4)
						if loc_12 ~= loc_11 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_13 == 0 then
				break
			end
			while true do
				loc_3 = rt_mul_i32(loc_0, 48)
				loc_5 = rt_add_i32(loc_3, loc_8)
				loc_3 = rt_add_i32(loc_3, loc_4)
				rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
				rt_store_i64(memory_at_0, loc_5 + 40, rt_load_i64(memory_at_0, loc_3 + 40))
				rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_3 + 32))
				rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_3 + 24))
				rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
				rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
				loc_0 = rt_add_i32(loc_0, 1)
				loc_10 = rt_add_i32(loc_10, 1)
				if loc_13 ~= loc_10 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[392](loc_19, 36)
		reg_0 = FUNC_LIST[364](reg_0, rt_add_i32(loc_2, 48), rt_add_i32(loc_2, 112), loc_6)
		loc_5 = reg_0
		loc_0 = rt_load_i32(memory_at_0, loc_2 + 172)
		loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 176), 48))
		if loc_3 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, loc_3)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 192)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[498] = --[[ Luau::TempVector<Luau::AstTableProp>::push_back(Luau::AstTableProp const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
					if loc_2 < loc_7 then
						while true do
							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
							rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_1 + 40))
							rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1 + 32))
							rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_1 + 24))
							rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
							loc_1 = rt_add_i32(loc_2, 48)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_load_i32(memory_at_0, loc_4)
					loc_9 = rt_div_i32(rt_sub_i32(loc_2, loc_5), 48)
					loc_3 = rt_add_i32(loc_9, 1)
					if loc_3 >= 89478486 then
						desired = 2
						break
					end
					loc_6 = rt_div_i32(rt_sub_i32(loc_7, loc_5), 48)
					loc_8 = rt_shl_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 44739242 then 89478485 else (if loc_3 < loc_8 then loc_8 else loc_3))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 89478486 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 48))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_3 = rt_add_i32(loc_8, rt_mul_i32(loc_9, 48))
					rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_1 + 40))
					rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_1 + 32))
					rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_1 + 24))
					rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_1 + 16))
					rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_6 = rt_add_i32(rt_mul_i32(loc_6, 48), loc_8)
					loc_1 = rt_add_i32(loc_3, 48)
					if loc_2 ~= loc_5 then
						while true do
							while true do
								loc_3 = rt_sub_i32(loc_3, 48)
								loc_2 = rt_sub_i32(loc_2, 48)
								rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
								rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_2 + 40))
								rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_2 + 32))
								rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 24))
								rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2 + 16))
								rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
								if loc_2 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_4 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_4 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_4, loc_3)
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_4)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[499] = --[[ Luau::Parser::parseFunctionType(bool, Luau::AstArray<Luau::AstAttr*> const&) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 208)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 156), 1)
		rt_store_i32(memory_at_0, loc_1 + 156, loc_5)
		if loc_5 <= rt_load_i32(memory_at_0, 49008) then
			while true do
				loc_18 = rt_load_i32(memory_at_0, loc_1 + 60)
				rt_store_i32(memory_at_0, loc_4 + 176, rt_load_i32(memory_at_0, loc_1 + 84))
				rt_store_i64(memory_at_0, loc_4 + 168, rt_load_i64(memory_at_0, loc_1 + 76))
				rt_store_i64(memory_at_0, loc_4 + 160, rt_load_i64(memory_at_0, loc_1 + 68))
				rt_store_i64(memory_at_0, loc_4 + 152, rt_load_i64(memory_at_0, loc_1 + 60))
				FUNC_LIST[473](rt_add_i32(loc_4, 136), loc_1, 0)
				loc_20 = rt_load_i64(memory_at_0, loc_1 + 64)
				while true do
					loc_7 = rt_load_i32(memory_at_0, loc_1 + 60)
					if loc_7 ~= 40 then
						while true do
							FUNC_LIST[432](loc_1, 40, 2073)
							FUNC_LIST[418](rt_add_i32(loc_4, 180), rt_add_i32(loc_1, 40))
							if rt_load_i32(memory_at_0, loc_4 + 180) ~= 40 then
								desired = 2
								break
							end
							FUNC_LIST[435](loc_1)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[435](loc_1)
					break
				end
				if desired then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 248)
				rt_store_i32(memory_at_0, loc_5 + 1052, rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 1052), 1))
				rt_store_i32(memory_at_0, loc_4 + 180, rt_add_i32(loc_1, 380))
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 380)
				loc_8 = rt_load_i32(memory_at_0, loc_1 + 384)
				rt_store_i32(memory_at_0, loc_4 + 188, 0)
				rt_store_i32(memory_at_0, loc_4 + 184, rt_shr_i32(rt_sub_i32(loc_8, loc_5), 2))
				rt_store_i32(memory_at_0, loc_4 + 124, rt_add_i32(loc_1, 464))
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 464)
				loc_8 = rt_load_i32(memory_at_0, loc_1 + 468)
				rt_store_i32(memory_at_0, loc_4 + 132, 0)
				rt_store_i32(memory_at_0, loc_4 + 128, rt_div_i32(rt_sub_i32(loc_8, loc_5), 24))
				while true do
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 60) == 41 then
							break
						end
						reg_0 = FUNC_LIST[495](loc_1, rt_add_i32(loc_4, 180), rt_add_i32(loc_4, 124))
						loc_15 = reg_0
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 60)
						rt_store_i64(memory_at_0, loc_4 + 116, loc_20)
						rt_store_i32(memory_at_0, loc_4 + 112, loc_7)
						if loc_5 == 41 then
							break
						end
						FUNC_LIST[469](loc_1, 41, rt_add_i32(loc_4, 112), 0)
						reg_0 = FUNC_LIST[470](loc_1, 41, loc_5, 1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					FUNC_LIST[435](loc_1)
					break
				end
				if desired then
					break
				end
				loc_19 = loc_1
				loc_17 = rt_add_i32(loc_19, 60)
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 248)
				rt_store_i32(memory_at_0, loc_5 + 1052, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 1052), 1))
				loc_8 = 0
				while true do
					loc_11 = rt_load_i32(memory_at_0, loc_4 + 188)
					if loc_11 == 0 then
						break
					end
					loc_14 = bit_and(loc_11, 3)
					loc_7 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 180)), rt_shl_i32(rt_load_i32(memory_at_0, loc_4 + 184), 2))
					reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_shl_i32(loc_11, 2))
					loc_8 = reg_0
					loc_5 = 0
					if loc_11 >= 4 then
						while true do
							loc_16 = bit_and(loc_11, 4294967292)
							while true do
								loc_10 = rt_shl_i32(loc_5, 2)
								rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_8), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_10)))
								loc_13 = bit_or(loc_10, 4)
								rt_store_i32(memory_at_0, rt_add_i32(loc_13, loc_8), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_13)))
								loc_13 = bit_or(loc_10, 8)
								rt_store_i32(memory_at_0, rt_add_i32(loc_13, loc_8), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_13)))
								loc_10 = bit_or(loc_10, 12)
								rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_8), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_10)))
								loc_5 = rt_add_i32(loc_5, 4)
								loc_6 = rt_add_i32(loc_6, 4)
								if loc_16 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_14 == 0 then
						break
					end
					while true do
						loc_10 = rt_shl_i32(loc_5, 2)
						rt_store_i32(memory_at_0, rt_add_i32(loc_10, loc_8), rt_load_i32(memory_at_0, rt_add_i32(loc_7, loc_10)))
						loc_5 = rt_add_i32(loc_5, 1)
						loc_9 = rt_add_i32(loc_9, 1)
						if loc_14 ~= loc_9 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				loc_12 = rt_load_i32(memory_at_0, loc_4 + 132)
				while true do
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_19 + 60)
						if loc_5 == 263 then
							break
						end
						loc_7 = bit_or((if loc_18 == 60 then 1 else 0), (if loc_12 ~= 0 then 1 else 0))
						while true do
							loc_5 = (if loc_5 == 58 then 1 else 0)
							if loc_5 ~= 0 then
								break
							end
							if bit_and(bit_or(loc_7, bit_or((if loc_15 ~= 0 then 1 else 0), (if rt_load_i32(memory_at_0, loc_4 + 188) ~= 1 then 1 else 0))), 1) ~= 0 then
								break
							end
							if loc_2 ~= 0 then
								while true do
									rt_store_i32(memory_at_0, loc_0, 0)
									loc_5 = rt_load_i32(memory_at_0, loc_1 + 124)
									loc_7 = rt_add_i32(loc_4, 120)
									rt_store_i32(memory_at_0, loc_7, 0)
									rt_store_i32(memory_at_0, loc_4 + 116, loc_11)
									rt_store_i32(memory_at_0, loc_4 + 112, loc_8)
									reg_0 = FUNC_LIST[392](loc_5, 36)
									loc_5 = reg_0
									rt_store_i32(memory_at_0, loc_4 + 72, rt_load_i32(memory_at_0, loc_4 + 120))
									rt_store_i64(memory_at_0, loc_4 + 64, rt_load_i64(memory_at_0, loc_4 + 112))
									reg_1 = FUNC_LIST[381](loc_5, bit_or(rt_add_i32(loc_4, 152), 4), rt_sub_i32(loc_4, 4294967232))
									rt_store_i32(memory_at_0, loc_0 + 4, reg_1)
									desired = 2
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 180)), rt_shl_i32(rt_load_i32(memory_at_0, loc_4 + 184), 2)))
							rt_store_i32(memory_at_0, loc_0 + 4, 0)
							rt_store_i32(memory_at_0, loc_0, loc_5)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if bit_or(bit_or(bit_xor(loc_2, 1), loc_5), loc_7) ~= 0 then
							break
						end
						rt_store_i32(memory_at_0, loc_0, 0)
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 124)
						loc_7 = rt_add_i32(loc_4, 120)
						rt_store_i32(memory_at_0, loc_7, loc_15)
						rt_store_i32(memory_at_0, loc_4 + 116, loc_11)
						rt_store_i32(memory_at_0, loc_4 + 112, loc_8)
						reg_0 = FUNC_LIST[392](loc_5, 36)
						loc_5 = reg_0
						rt_store_i32(memory_at_0, loc_4 + 56, rt_load_i32(memory_at_0, loc_4 + 120))
						rt_store_i64(memory_at_0, loc_4 + 48, rt_load_i64(memory_at_0, loc_4 + 112))
						reg_1 = FUNC_LIST[381](loc_5, bit_or(rt_add_i32(loc_4, 152), 4), rt_add_i32(loc_4, 48))
						rt_store_i32(memory_at_0, loc_0 + 4, reg_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					loc_7 = 0
					while true do
						if loc_12 == 0 then
							break
						end
						loc_16 = bit_and(loc_12, 3)
						loc_10 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 124)), rt_mul_i32(rt_load_i32(memory_at_0, loc_4 + 128), 24))
						loc_13 = 0
						reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_mul_i32(loc_12, 24))
						loc_7 = reg_0
						loc_5 = 0
						if loc_12 >= 4 then
							while true do
								loc_17 = bit_and(loc_12, 4294967292)
								loc_14 = 0
								while true do
									loc_6 = rt_mul_i32(loc_5, 24)
									loc_9 = rt_add_i32(loc_6, loc_7)
									loc_6 = rt_add_i32(loc_6, loc_10)
									rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
									rt_store_i64(memory_at_0, loc_9 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									loc_6 = rt_mul_i32(bit_or(loc_5, 1), 24)
									loc_9 = rt_add_i32(loc_6, loc_7)
									loc_6 = rt_add_i32(loc_6, loc_10)
									rt_store_i64(memory_at_0, loc_9 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
									loc_6 = rt_mul_i32(bit_or(loc_5, 2), 24)
									loc_9 = rt_add_i32(loc_6, loc_7)
									loc_6 = rt_add_i32(loc_6, loc_10)
									rt_store_i64(memory_at_0, loc_9 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
									loc_6 = rt_mul_i32(bit_or(loc_5, 3), 24)
									loc_9 = rt_add_i32(loc_6, loc_7)
									loc_6 = rt_add_i32(loc_6, loc_10)
									rt_store_i64(memory_at_0, loc_9 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
									rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
									rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
									loc_5 = rt_add_i32(loc_5, 4)
									loc_14 = rt_add_i32(loc_14, 4)
									if loc_17 ~= loc_14 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_16 == 0 then
							break
						end
						while true do
							loc_6 = rt_mul_i32(loc_5, 24)
							loc_9 = rt_add_i32(loc_6, loc_7)
							loc_6 = rt_add_i32(loc_6, loc_10)
							rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
							rt_store_i64(memory_at_0, loc_9 + 16, rt_load_i64(memory_at_0, loc_6 + 16))
							rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
							loc_5 = rt_add_i32(loc_5, 1)
							loc_13 = rt_add_i32(loc_13, 1)
							if loc_16 ~= loc_13 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_4 + 92, loc_11)
					rt_store_i32(memory_at_0, loc_4 + 88, loc_8)
					rt_store_i32(memory_at_0, loc_4 + 84, loc_12)
					rt_store_i32(memory_at_0, loc_4 + 80, loc_7)
					loc_20 = rt_load_i64(memory_at_0, loc_4 + 136)
					rt_store_i64(memory_at_0, loc_4 + 104, loc_20)
					loc_21 = rt_load_i64(memory_at_0, loc_4 + 144)
					rt_store_i64(memory_at_0, loc_4 + 96, loc_21)
					rt_store_i64(memory_at_0, loc_4 + 40, loc_20)
					rt_store_i64(memory_at_0, loc_4 + 32, loc_21)
					rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_4 + 88))
					rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_4 + 80))
					reg_0 = FUNC_LIST[496](loc_1, rt_add_i32(loc_4, 152), loc_3, rt_add_i32(loc_4, 40), rt_add_i32(loc_4, 32), rt_add_i32(loc_4, 24), rt_add_i32(loc_4, 16), loc_15)
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_0 + 4, 0)
					rt_store_i32(memory_at_0, loc_0, loc_5)
					break
				end
				if desired then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_4 + 124)
				loc_8 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_mul_i32(rt_load_i32(memory_at_0, loc_4 + 128), 24))
				if loc_8 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
					while true do
						rt_store_i32(memory_at_0, loc_5 + 4, loc_8)
						break
					end
					if desired then
						break
					end
				end
				loc_5 = rt_load_i32(memory_at_0, loc_4 + 180)
				loc_8 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_shl_i32(rt_load_i32(memory_at_0, loc_4 + 184), 2))
				if loc_8 ~= rt_load_i32(memory_at_0, loc_5 + 4) then
					while true do
						rt_store_i32(memory_at_0, loc_5 + 4, loc_8)
						break
					end
					if desired then
						break
					end
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_4, 208)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_4, 3313)
		FUNC_LIST[427](rt_sub_i32(loc_1, 4294967232), 4634, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[500] = --[[ Luau::Parser::parseInterpString() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 100, rt_add_i32(loc_0, 284))
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 284)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 288)
		rt_store_i32(memory_at_0, loc_1 + 108, 0)
		rt_store_i32(memory_at_0, loc_1 + 104, rt_shr_i32(rt_sub_i32(loc_3, loc_2), 3))
		rt_store_i32(memory_at_0, loc_1 + 88, rt_add_i32(loc_0, 296))
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 296)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 300)
		rt_store_i32(memory_at_0, loc_1 + 96, 0)
		rt_store_i32(memory_at_0, loc_1 + 92, rt_shr_i32(rt_sub_i32(loc_3, loc_2), 2))
		loc_12 = rt_sub_i32(loc_0, 4294967232)
		loc_11 = rt_add_i32(loc_0, 476)
		loc_8 = rt_add_i32(loc_0, 60)
		loc_13 = rt_load_i64(memory_at_0, loc_0 + 64)
		while true do
			while true do
				while true do
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_8 + 24)
						rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 4294967232), loc_2)
						rt_store_i64(memory_at_0, loc_1 + 56, rt_load_i64(memory_at_0, loc_8 + 16))
						rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_8 + 8))
						rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_8))
						rt_store_i64(memory_at_0, loc_1 + 80, rt_load_i64(memory_at_0, loc_12 + 8))
						rt_store_i64(memory_at_0, loc_1 + 72, rt_load_i64(memory_at_0, loc_12))
						reg_2 = FUNC_LIST[394](rt_add_i32(loc_1, 40))
						reg_0 = FUNC_LIST[717](loc_11, loc_2, reg_2)
						reg_0 = FUNC_LIST[420](loc_11)
						if reg_0 == 0 then
							while true do
								FUNC_LIST[435](loc_0)
								rt_store_i64(memory_at_0, loc_1 + 24, loc_13)
								rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_1 + 80))
								rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
								reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 24), rt_add_i32(loc_1, 16), 4886, 0)
								loc_3 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 480)
							loc_2 = rt_load_i32_i8(memory_at_0, loc_0 + 487)
							loc_5 = (if rt_lt_i32(loc_2, 0) then 1 else 0)
							loc_6 = (if loc_5 ~= 0 then loc_3 else loc_2)
							loc_7 = rt_add_i32(loc_6, 1)
							if loc_7 == 0 then
								while true do
									rt_store_i32(memory_at_0, loc_1 + 16, 0)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_3 = (if loc_5 ~= 0 then rt_load_i32(memory_at_0, loc_0 + 476) else loc_11)
							reg_1 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), loc_7)
							loc_5 = reg_1
							rt_store_i32(memory_at_0, loc_1 + 16, loc_5)
							loc_9 = bit_and(loc_7, 3)
							loc_4 = 0
							loc_2 = 0
							if loc_6 >= 3 then
								while true do
									loc_10 = bit_and(loc_7, 4294967292)
									loc_7 = 0
									while true do
										rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_5), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3)))
										loc_6 = bit_or(loc_2, 1)
										rt_store_i32_n8(memory_at_0, rt_add_i32(loc_6, loc_5), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_6)))
										loc_6 = bit_or(loc_2, 2)
										rt_store_i32_n8(memory_at_0, rt_add_i32(loc_6, loc_5), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_6)))
										loc_6 = bit_or(loc_2, 3)
										rt_store_i32_n8(memory_at_0, rt_add_i32(loc_6, loc_5), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_6)))
										loc_2 = rt_add_i32(loc_2, 4)
										loc_7 = rt_add_i32(loc_7, 4)
										if loc_10 ~= loc_7 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_9 ~= 0 then
								while true do
									while true do
										rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_5), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3)))
										loc_2 = rt_add_i32(loc_2, 1)
										loc_4 = rt_add_i32(loc_4, 1)
										if loc_9 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = rt_load_i32_u8(memory_at_0, loc_0 + 487)
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 480)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 20, (if rt_lt_i32(rt_extend_i32_n8(loc_2), 0) then loc_3 else loc_2))
						FUNC_LIST[435](loc_0)
						FUNC_LIST[503](rt_add_i32(loc_1, 100), rt_add_i32(loc_1, 16))
						if bit_and(rt_load_i32(memory_at_0, loc_1 + 40), 4294967294) == 268 then
							desired = 2
							break
						end
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_8), 267)] or 1
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 3
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[435](loc_0)
							rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
							reg_1 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 72), rt_add_i32(loc_1, 24), 6781, 0)
							rt_store_i32(memory_at_0, loc_1 + 8, reg_1)
							FUNC_LIST[440](rt_add_i32(loc_1, 88), rt_add_i32(loc_1, 8))
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						reg_1 = FUNC_LIST[459](loc_0, 0)
						rt_store_i32(memory_at_0, loc_1 + 24, reg_1)
						FUNC_LIST[440](rt_add_i32(loc_1, 88), rt_add_i32(loc_1, 24))
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
						if rt_sub_i32(loc_2, 266) < 3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							while true do
								if not br_map[2] then
									br_map[2] = (function()
										return { [0] = 1, 2, 2, 0, }
									end)()
								end
								temp = br_map[2][rt_sub_i32(loc_2, 285)] or 2
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 4
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[435](loc_0)
							rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
							reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 72), rt_add_i32(loc_1, 24), 6519, 0)
							loc_3 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[435](loc_0)
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 72), rt_add_i32(loc_1, 24), 6459, 0)
						loc_3 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
					FUNC_LIST[395](rt_add_i32(loc_1, 24), loc_8)
					rt_store_i32(memory_at_0, loc_1, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 35), 0) then rt_load_i32(memory_at_0, loc_1 + 24) else rt_add_i32(loc_1, 24)))
					reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 72), rt_add_i32(loc_1, 8), 2723, loc_1)
					loc_3 = reg_0
					if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 35), 0) then
						desired = 1
						break
					end
					FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1 + 24), bit_and(rt_load_i32(memory_at_0, loc_1 + 32), 2147483647))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[435](loc_0)
				rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
				reg_1 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 72), rt_add_i32(loc_1, 24), 7727, 0)
				rt_store_i32(memory_at_0, loc_1 + 8, reg_1)
				FUNC_LIST[440](rt_add_i32(loc_1, 88), rt_add_i32(loc_1, 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 108)
				if loc_4 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 100))
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 104)
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), rt_shl_i32(loc_4, 3))
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 28, loc_4)
				rt_store_i32(memory_at_0, loc_1 + 24, loc_3)
				loc_10 = bit_and(loc_4, 3)
				loc_5 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_2)
				loc_7 = 0
				loc_2 = 0
				if loc_4 >= 4 then
					while true do
						loc_8 = bit_and(loc_4, 4294967292)
						loc_6 = 0
						while true do
							loc_4 = rt_shl_i32(loc_2, 3)
							rt_store_i64(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_9 = bit_or(loc_4, 8)
							rt_store_i64(memory_at_0, rt_add_i32(loc_9, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_5, loc_9)))
							loc_9 = bit_or(loc_4, 16)
							rt_store_i64(memory_at_0, rt_add_i32(loc_9, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_5, loc_9)))
							loc_4 = bit_or(loc_4, 24)
							rt_store_i64(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_2 = rt_add_i32(loc_2, 4)
							loc_6 = rt_add_i32(loc_6, 4)
							if loc_8 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 == 0 then
					break
				end
				while true do
					loc_4 = rt_shl_i32(loc_2, 3)
					rt_store_i64(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_4, loc_5)))
					loc_2 = rt_add_i32(loc_2, 1)
					loc_7 = rt_add_i32(loc_7, 1)
					if loc_10 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 96)
				if loc_4 == 0 then
					while true do
						rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 88))
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 92)
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), rt_shl_i32(loc_4, 2))
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 20, loc_4)
				rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
				loc_10 = bit_and(loc_4, 3)
				loc_5 = rt_add_i32(rt_shl_i32(loc_5, 2), loc_2)
				loc_7 = 0
				loc_2 = 0
				if loc_4 >= 4 then
					while true do
						loc_8 = bit_and(loc_4, 4294967292)
						loc_6 = 0
						while true do
							loc_4 = rt_shl_i32(loc_2, 2)
							rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_9 = bit_or(loc_4, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_9, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_9)))
							loc_9 = bit_or(loc_4, 8)
							rt_store_i32(memory_at_0, rt_add_i32(loc_9, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_9)))
							loc_4 = bit_or(loc_4, 12)
							rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
							loc_2 = rt_add_i32(loc_2, 4)
							loc_6 = rt_add_i32(loc_6, 4)
							if loc_8 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 == 0 then
					break
				end
				while true do
					loc_4 = rt_shl_i32(loc_2, 2)
					rt_store_i32(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_4, loc_5)))
					loc_2 = rt_add_i32(loc_2, 1)
					loc_7 = rt_add_i32(loc_7, 1)
					if loc_10 ~= loc_7 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 124)
			rt_store_i64(memory_at_0, loc_1 + 40, loc_13)
			rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_1 + 80))
			reg_0 = FUNC_LIST[392](loc_2, 40)
			reg_0 = FUNC_LIST[317](reg_0, rt_add_i32(loc_1, 40), rt_add_i32(loc_1, 24), rt_add_i32(loc_1, 16))
			loc_3 = reg_0
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 88)
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 92), 2))
		if loc_5 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_2 + 4, loc_5)
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 100)
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 104), 3))
		if loc_5 ~= rt_load_i32(memory_at_0, loc_2 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_2 + 4, loc_5)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 112)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[501] = --[[ Luau::Parser::parseTypeParams() ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i32(memory_at_0, loc_2 + 12, rt_add_i32(loc_1, 392))
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 392)
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 396)
		rt_store_i32(memory_at_0, loc_2 + 20, 0)
		rt_store_i32(memory_at_0, loc_2 + 16, rt_shr_i32(rt_sub_i32(loc_5, loc_3), 3))
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_1 + 60) == 60 then
					while true do
						loc_7 = rt_add_i32(loc_1, 40)
						loc_10 = rt_load_i64(memory_at_0, loc_1 + 64)
						FUNC_LIST[435](loc_1)
						loc_5 = rt_sub_i32(loc_1, 4294967232)
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_1 + 60)
											if loc_3 == 262 then
												break
											end
											while true do
												while true do
													while true do
														if loc_3 == 281 then
															while true do
																FUNC_LIST[418](rt_add_i32(loc_2, 24), loc_7)
																if rt_load_i32(memory_at_0, loc_2 + 24) == 262 then
																	desired = 8
																	break
																end
																reg_0 = rt_load_i32(memory_at_0, loc_1 + 60)
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														else
															while true do
																reg_0 = loc_3
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_3 = reg_0
														if loc_3 ~= 62 then
															while true do
																if loc_3 ~= 40 then
																	desired = 11
																	break
																end
																loc_4 = rt_load_i32(memory_at_0, loc_1 + 156)
																rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_5 + 8))
																rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_5))
																FUNC_LIST[474](rt_add_i32(loc_2, 56), loc_1, 1, 0)
																loc_3 = rt_load_i32(memory_at_0, loc_2 + 60)
																if loc_3 ~= 0 then
																	while true do
																		rt_store_i32(memory_at_0, loc_2 + 28, loc_3)
																		rt_store_i32(memory_at_0, loc_2 + 24, 0)
																		FUNC_LIST[503](rt_add_i32(loc_2, 12), rt_add_i32(loc_2, 24))
																		desired = 7
																		break
																	end
																	if desired then
																		break
																	end
																end
																rt_store_i32(memory_at_0, loc_1 + 156, loc_4)
																reg_0 = FUNC_LIST[475](loc_1, rt_load_i32(memory_at_0, loc_2 + 56), rt_add_i32(loc_2, 24))
																loc_3 = reg_0
																rt_store_i32(memory_at_0, loc_2 + 28, 0)
																rt_store_i32(memory_at_0, loc_2 + 24, loc_3)
																FUNC_LIST[503](rt_add_i32(loc_2, 12), rt_add_i32(loc_2, 24))
																desired = 7
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														if rt_load_i32(memory_at_0, loc_2 + 20) == 0 then
															desired = 5
															break
														end
														loc_4 = rt_load_i32(memory_at_0, loc_1 + 156)
														rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_5 + 8))
														rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_5))
														desired = 10
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													loc_4 = rt_load_i32(memory_at_0, loc_1 + 156)
													rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_5 + 8))
													rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_5))
													loc_6 = 0
													if loc_3 == 38 then
														desired = 9
														break
													end
													if loc_3 == 124 then
														desired = 9
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												FUNC_LIST[474](rt_add_i32(loc_2, 56), loc_1, 0, 0)
												loc_6 = rt_load_i32(memory_at_0, loc_2 + 56)
												rt_store_i32(memory_at_0, loc_1 + 156, loc_4)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											reg_0 = FUNC_LIST[475](loc_1, loc_6, rt_add_i32(loc_2, 24))
											loc_3 = reg_0
											rt_store_i32(memory_at_0, loc_1 + 156, loc_4)
											rt_store_i32(memory_at_0, loc_2 + 8, 0)
											rt_store_i32(memory_at_0, loc_2 + 4, loc_3)
											FUNC_LIST[503](rt_add_i32(loc_2, 12), rt_add_i32(loc_2, 4))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										reg_1 = FUNC_LIST[491](loc_1)
										rt_store_i32(memory_at_0, loc_2 + 28, reg_1)
										rt_store_i32(memory_at_0, loc_2 + 24, 0)
										FUNC_LIST[503](rt_add_i32(loc_2, 12), rt_add_i32(loc_2, 24))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									loc_3 = rt_load_i32(memory_at_0, loc_1 + 60)
									if loc_3 == 44 then
										while true do
											FUNC_LIST[435](loc_1)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i64(memory_at_0, loc_2 + 28, loc_10)
								rt_store_i32(memory_at_0, loc_2 + 24, 60)
								if loc_3 == 62 then
									break
								end
								FUNC_LIST[469](loc_1, 62, rt_add_i32(loc_2, 24), 0)
								reg_0 = FUNC_LIST[470](loc_1, 62, loc_2, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							FUNC_LIST[435](loc_1)
							break
						end
						if desired then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_2 + 20)
						if loc_4 ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 12))
			loc_6 = rt_load_i32(memory_at_0, loc_2 + 16)
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_1 + 124), rt_shl_i32(loc_4, 3))
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_0 + 4, loc_4)
			rt_store_i32(memory_at_0, loc_0, loc_3)
			loc_8 = bit_and(loc_4, 3)
			loc_5 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_5)
			loc_6 = 0
			loc_1 = 0
			if loc_4 >= 4 then
				while true do
					loc_9 = bit_and(loc_4, 4294967292)
					loc_7 = 0
					while true do
						loc_4 = rt_shl_i32(loc_1, 3)
						rt_store_i64(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_4, loc_5)))
						loc_0 = bit_or(loc_4, 8)
						rt_store_i64(memory_at_0, rt_add_i32(loc_0, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_0, loc_5)))
						loc_0 = bit_or(loc_4, 16)
						rt_store_i64(memory_at_0, rt_add_i32(loc_0, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_0, loc_5)))
						loc_4 = bit_or(loc_4, 24)
						rt_store_i64(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_4, loc_5)))
						loc_1 = rt_add_i32(loc_1, 4)
						loc_7 = rt_add_i32(loc_7, 4)
						if loc_9 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 == 0 then
				break
			end
			while true do
				loc_4 = rt_shl_i32(loc_1, 3)
				rt_store_i64(memory_at_0, rt_add_i32(loc_4, loc_3), rt_load_i64(memory_at_0, rt_add_i32(loc_4, loc_5)))
				loc_1 = rt_add_i32(loc_1, 1)
				loc_6 = rt_add_i32(loc_6, 1)
				if loc_8 ~= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 12)
		loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 16), 3))
		if loc_3 ~= rt_load_i32(memory_at_0, loc_1 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_1 + 4, loc_3)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_2, 4294967232)
		break
	end
end
FUNC_LIST[502] = --[[ Luau::Parser::reportMissingTypeError(Luau::Location const&, Luau::Location const&, char const*, ...) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 12, loc_4)
		FUNC_LIST[482](loc_0, loc_1, loc_3, loc_4)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 124)
		rt_store_i64(memory_at_0, loc_5 + 4, rt_i64_ZERO)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 236)
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 240)
		reg_0 = FUNC_LIST[392](loc_4, 40)
		reg_0 = FUNC_LIST[379](reg_0, loc_2, rt_add_i32(loc_5, 4), 1, rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_0, loc_3), 5), 1))
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[503] = --[[ Luau::TempVector<Luau::AstArray<char>>::push_back(Luau::AstArray<char> const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0)
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 8)
					if loc_4 < loc_7 then
						while true do
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
							loc_1 = rt_add_i32(loc_4, 8)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					loc_9 = rt_shr_i32(rt_sub_i32(loc_4, loc_3), 3)
					loc_5 = rt_add_i32(loc_9, 1)
					if loc_5 >= 536870912 then
						desired = 2
						break
					end
					loc_6 = rt_sub_i32(loc_7, loc_3)
					loc_8 = rt_shr_i32(loc_6, 2)
					loc_6 = (if loc_6 >= 2147483640 then 536870911 else (if loc_5 < loc_8 then loc_8 else loc_5))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 536870912 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_6, 3))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_5 = rt_add_i32(loc_8, rt_shl_i32(loc_9, 3))
					rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_1))
					loc_6 = rt_add_i32(rt_shl_i32(loc_6, 3), loc_8)
					loc_1 = rt_add_i32(loc_5, 8)
					if loc_3 ~= loc_4 then
						while true do
							while true do
								loc_5 = rt_sub_i32(loc_5, 8)
								loc_4 = rt_sub_i32(loc_4, 8)
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
								if loc_3 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_2 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_2)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_2, loc_5)
					if loc_3 == 0 then
						break
					end
					FUNC_LIST[653](loc_3, rt_sub_i32(loc_7, loc_3))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_2)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[504] = --[[ Luau::Parser::parseSimpleExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i64(memory_at_0, rt_sub_i32(loc_1, 4294967232), rt_load_i64(memory_at_0, loc_0 + 72))
		rt_store_i64(memory_at_0, loc_1 + 56, rt_load_i64(memory_at_0, loc_0 + 64))
		rt_store_i64(memory_at_0, loc_1 + 48, rt_i64_ZERO)
		loc_2 = rt_add_i32(loc_0, 60)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															if rt_load_i32_u8(memory_at_0, 49080) ~= 1 then
																break
															end
															if loc_3 ~= 284 then
																break
															end
															FUNC_LIST[465](rt_add_i32(loc_1, 48), loc_0)
															if rt_load_i32(memory_at_0, loc_0 + 60) == 298 then
																desired = 12
																break
															end
															rt_store_i64(memory_at_0, loc_1 + 84, rt_i64_ZERO)
															FUNC_LIST[395](rt_add_i32(loc_1, 16), loc_2)
															rt_store_i32(memory_at_0, loc_1, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 27), 0) then rt_load_i32(memory_at_0, loc_1 + 16) else rt_add_i32(loc_1, 16)))
															reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 56), rt_add_i32(loc_1, 84), 5522, loc_1)
															loc_0 = reg_0
															if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_1 + 27), 0) then
																desired = 1
																break
															end
															FUNC_LIST[653](rt_load_i32(memory_at_0, loc_1 + 16), bit_and(rt_load_i32(memory_at_0, loc_1 + 24), 2147483647))
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														while true do
															while true do
																while true do
																	if not br_map[1] then
																		br_map[1] = (function()
																			return { [0] = 9, 12, 12, 12, 6, 12, 12, 5, 12, 12, 12, 12, 12, 12, 12, 12, 5, 5, 4, 12, 12, 12, 12, 7, 12, 12, 8, 12, 12, 12, 12, 12, 12, 12, 2, 12, 3, 10, 12, 12, 0, 12, 12, 12, 12, 12, 1, }
																		end)()
																	end
																	temp = br_map[1][rt_sub_i32(loc_3, 262)] or 11
																	if temp < 6 then
																		if temp < 3 then
																			if temp < 1 then
																				break
																			elseif temp > 1 then
																				desired = 13
																				break
																			else
																				desired = 14
																				break
																			end
																		elseif temp > 3 then
																			if temp < 5 then
																				desired = 11
																				break
																			else
																				desired = 10
																				break
																			end
																		else
																			desired = 12
																			break
																		end
																	elseif temp > 6 then
																		if temp < 10 then
																			if temp < 8 then
																				desired = 8
																				break
																			elseif temp > 8 then
																				desired = 6
																				break
																			else
																				desired = 7
																				break
																			end
																		elseif temp > 10 then
																			if temp < 12 then
																				desired = 4
																				break
																			else
																				desired = 3
																				break
																			end
																		else
																			desired = 5
																			break
																		end
																	else
																		desired = 9
																		break
																	end
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																FUNC_LIST[435](loc_0)
																reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 24)
																reg_0 = FUNC_LIST[283](reg_0, rt_add_i32(loc_1, 56))
																loc_0 = reg_0
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															FUNC_LIST[435](loc_0)
															reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
															reg_0 = FUNC_LIST[285](reg_0, rt_add_i32(loc_1, 56), 1)
															loc_0 = reg_0
															desired = 1
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														FUNC_LIST[435](loc_0)
														reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 28)
														reg_0 = FUNC_LIST[285](reg_0, rt_add_i32(loc_1, 56), 0)
														loc_0 = reg_0
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													rt_store_i32(memory_at_0, loc_1 + 40, rt_load_i32(memory_at_0, loc_2 + 24))
													rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_2 + 16))
													rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
													rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
													FUNC_LIST[435](loc_0)
													rt_store_i32(memory_at_0, loc_1 + 76, 0)
													FUNC_LIST[447](rt_add_i32(loc_1, 84), loc_0, 0, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 76), 0, rt_add_i32(loc_1, 48))
													loc_0 = rt_load_i32(memory_at_0, loc_1 + 84)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[507](loc_0)
												loc_0 = reg_0
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = rt_sub_i32(loc_0, 4294967232)
											rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
											rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
											FUNC_LIST[481](rt_add_i32(loc_1, 84), loc_0)
											if rt_load_i32_u8(memory_at_0, loc_1 + 92) == 1 then
												while true do
													reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 36)
													reg_0 = FUNC_LIST[289](reg_0, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 84), 0)
													loc_0 = reg_0
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											rt_store_i64(memory_at_0, loc_1 + 76, rt_i64_ZERO)
											reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 76), 4949, 0)
											loc_0 = reg_0
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[500](loc_0)
										loc_0 = reg_0
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[435](loc_0)
									rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
									reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 56), rt_add_i32(loc_1, 16), 6227, 0)
									loc_0 = reg_0
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[435](loc_0)
								rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
								reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 56), rt_add_i32(loc_1, 16), 6519, 0)
								loc_0 = reg_0
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = rt_load_i32_u8(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 192), 8))
							FUNC_LIST[435](loc_0)
							if loc_2 == 1 then
								while true do
									reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 24)
									reg_0 = FUNC_LIST[295](reg_0, rt_add_i32(loc_1, 56))
									loc_0 = reg_0
									desired = 1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
							reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 56), rt_add_i32(loc_1, 16), 3190, 0)
							loc_0 = reg_0
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[508](loc_0)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 == 123 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[452](loc_0, 0)
				loc_0 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[505](loc_0)
			loc_0 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 96)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[505] = --[[ Luau::Parser::parseTableConstructor() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 52, rt_add_i32(loc_0, 416))
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 416)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 420)
		rt_store_i32(memory_at_0, loc_1 + 60, 0)
		rt_store_i32(memory_at_0, loc_1 + 56, rt_div_i32(rt_sub_i32(loc_5, loc_2), 12))
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
		loc_12 = rt_load_i64(memory_at_0, loc_0 + 64)
		rt_store_i64(memory_at_0, loc_1 + 44, loc_12)
		rt_store_i32(memory_at_0, loc_1 + 40, loc_2)
		loc_7 = rt_add_i32(loc_0, 40)
		while true do
			if loc_2 ~= 123 then
				while true do
					FUNC_LIST[432](loc_0, 123, 3537)
					FUNC_LIST[418](rt_sub_i32(loc_1, 4294967232), loc_7)
					if rt_load_i32(memory_at_0, loc_1 + 64) ~= 123 then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_0)
			break
		end
		while true do
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
					if loc_2 == 125 then
						while true do
							loc_11 = rt_load_i64(memory_at_0, loc_0 + 72)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = rt_sub_i32(loc_0, 4294967232)
					loc_3 = rt_add_i32(loc_1, 24)
					while true do
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_0 + 68)
							while true do
								if loc_2 == 91 then
									while true do
										rt_store_i32(memory_at_0, loc_1 + 20, 91)
										rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_0 + 64))
										FUNC_LIST[435](loc_0)
										reg_0 = FUNC_LIST[459](loc_0, 0)
										loc_2 = reg_0
										while true do
											if rt_load_i32(memory_at_0, loc_0 + 60) ~= 93 then
												while true do
													FUNC_LIST[469](loc_0, 93, rt_add_i32(loc_1, 20), 0)
													reg_0 = FUNC_LIST[470](loc_0, 93, loc_0, 0)
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[435](loc_0)
											break
										end
										if desired then
											break
										end
										while true do
											if rt_load_i32(memory_at_0, loc_0 + 60) ~= 61 then
												while true do
													FUNC_LIST[432](loc_0, 61, 5108)
													FUNC_LIST[418](rt_sub_i32(loc_1, 4294967232), loc_7)
													if rt_load_i32(memory_at_0, loc_1 + 64) ~= 61 then
														desired = 8
														break
													end
													FUNC_LIST[435](loc_0)
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											FUNC_LIST[435](loc_0)
											break
										end
										if desired then
											break
										end
										reg_1 = FUNC_LIST[459](loc_0, 0)
										rt_store_i32(memory_at_0, loc_1 + 72, reg_1)
										rt_store_i32(memory_at_0, loc_1 + 68, loc_2)
										rt_store_i32(memory_at_0, loc_1 + 64, 2)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								while true do
									if loc_2 ~= 281 then
										break
									end
									FUNC_LIST[418](rt_sub_i32(loc_1, 4294967232), loc_7)
									if rt_load_i32(memory_at_0, loc_1 + 64) ~= 61 then
										break
									end
									while true do
										if rt_load_i32(memory_at_0, loc_0 + 60) == 281 then
											while true do
												loc_2 = rt_load_i32(memory_at_0, loc_0 + 84)
												loc_6 = rt_add_i32(loc_1, 72)
												rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4 + 8))
												rt_store_i64(memory_at_0, loc_1 + 64, rt_load_i64(memory_at_0, loc_4))
												FUNC_LIST[435](loc_0)
												rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 72))
												rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1 + 64))
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[464](loc_0, 5108)
										loc_2 = rt_load_i32(memory_at_0, loc_0 + 168)
										loc_11 = rt_load_i64(memory_at_0, loc_0 + 64)
										rt_store_i64(memory_at_0, loc_1 + 32, loc_11)
										rt_store_i64(memory_at_0, loc_1 + 24, loc_11)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
									while true do
										if rt_load_i32(memory_at_0, loc_0 + 60) ~= 61 then
											while true do
												FUNC_LIST[432](loc_0, 61, 5108)
												FUNC_LIST[418](rt_sub_i32(loc_1, 4294967232), loc_7)
												if rt_load_i32(memory_at_0, loc_1 + 64) ~= 61 then
													desired = 8
													break
												end
												FUNC_LIST[435](loc_0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[435](loc_0)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_2 = rt_load_i32(memory_at_0, loc_1 + 20)
									rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
									reg_1 = FUNC_LIST[544](loc_2)
									rt_store_i32(memory_at_0, loc_1 + 16, reg_1)
									reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 36)
									reg_0 = FUNC_LIST[289](reg_0, loc_3, rt_add_i32(loc_1, 12), 1)
									loc_6 = reg_0
									while true do
										reg_0 = FUNC_LIST[459](loc_0, 0)
										loc_2 = reg_0
										if loc_2 == 0 then
											break
										end
										if rt_load_i32(memory_at_0, loc_2 + 4) ~= rt_load_i32(memory_at_0, 48660) then
											break
										end
										rt_store_i32(memory_at_0, loc_2 + 108, rt_load_i32(memory_at_0, loc_1 + 20))
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i32(memory_at_0, loc_1 + 72, loc_2)
									rt_store_i32(memory_at_0, loc_1 + 68, loc_6)
									rt_store_i32(memory_at_0, loc_1 + 64, 1)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_1 = FUNC_LIST[459](loc_0, 0)
								rt_store_i32(memory_at_0, loc_1 + 72, reg_1)
								rt_store_i64(memory_at_0, loc_1 + 64, rt_i64_ZERO)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							FUNC_LIST[509](rt_add_i32(loc_1, 52), rt_sub_i32(loc_1, 4294967232))
							while true do
								while true do
									while true do
										while true do
											while true do
												loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
												if rt_le_i32(loc_2, 90) then
													while true do
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, }
															end)()
														end
														temp = br_map[1][rt_sub_i32(loc_2, 44)] or 1
														if temp < 2 then
															desired = 10
															break
														else
															desired = 9
															break
														end
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												if loc_2 == 91 then
													desired = 8
													break
												end
												if loc_2 == 281 then
													desired = 8
													break
												end
												if loc_2 == 125 then
													desired = 6
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_11 = rt_load_i64(memory_at_0, loc_0 + 72)
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[435](loc_0)
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_5 ~= rt_load_i32(memory_at_0, loc_0 + 68) then
										desired = 4
										break
									end
									FUNC_LIST[438](loc_0, loc_4, 1543, 0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
								if loc_2 ~= 125 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_11 = rt_load_i64(memory_at_0, loc_0 + 72)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_11 = rt_load_i64(memory_at_0, loc_0 + 72)
					if loc_2 ~= 125 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[435](loc_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[469](loc_0, 125, rt_add_i32(loc_1, 40), 0)
			reg_0 = FUNC_LIST[470](loc_0, 125, loc_0, 0)
			if reg_0 ~= 0 then
				break
			end
			loc_11 = rt_load_i64(memory_at_0, loc_0 + 96)
			break
		end
		loc_8 = rt_load_i32(memory_at_0, loc_0 + 124)
		rt_store_i64(memory_at_0, loc_1 + 72, loc_11)
		rt_store_i64(memory_at_0, loc_1 + 64, loc_12)
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 60)
			if loc_4 == 0 then
				while true do
					rt_store_i64(memory_at_0, loc_1 + 20, rt_i64_ZERO)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 52))
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 56)
			reg_0 = FUNC_LIST[392](loc_8, rt_mul_i32(loc_4, 12))
			loc_2 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 24, loc_4)
			rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
			loc_9 = bit_and(loc_4, 3)
			loc_5 = rt_add_i32(rt_mul_i32(loc_5, 12), loc_0)
			loc_7 = 0
			loc_0 = 0
			if loc_4 >= 4 then
				while true do
					loc_10 = bit_and(loc_4, 4294967292)
					loc_4 = 0
					while true do
						loc_3 = rt_mul_i32(loc_0, 12)
						loc_6 = rt_add_i32(loc_3, loc_2)
						loc_3 = rt_add_i32(loc_3, loc_5)
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_3))
						rt_store_i32(memory_at_0, loc_6 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
						loc_3 = rt_mul_i32(bit_or(loc_0, 1), 12)
						loc_6 = rt_add_i32(loc_3, loc_2)
						loc_3 = rt_add_i32(loc_3, loc_5)
						rt_store_i32(memory_at_0, loc_6 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_3))
						loc_3 = rt_mul_i32(bit_or(loc_0, 2), 12)
						loc_6 = rt_add_i32(loc_3, loc_2)
						loc_3 = rt_add_i32(loc_3, loc_5)
						rt_store_i32(memory_at_0, loc_6 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_3))
						loc_3 = rt_mul_i32(bit_or(loc_0, 3), 12)
						loc_6 = rt_add_i32(loc_3, loc_2)
						loc_3 = rt_add_i32(loc_3, loc_5)
						rt_store_i32(memory_at_0, loc_6 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_3))
						loc_0 = rt_add_i32(loc_0, 4)
						loc_4 = rt_add_i32(loc_4, 4)
						if loc_10 ~= loc_4 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_9 == 0 then
				break
			end
			while true do
				loc_4 = rt_mul_i32(loc_0, 12)
				loc_3 = rt_add_i32(loc_4, loc_2)
				loc_4 = rt_add_i32(loc_4, loc_5)
				rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4))
				rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_4 + 8))
				loc_0 = rt_add_i32(loc_0, 1)
				loc_7 = rt_add_i32(loc_7, 1)
				if loc_9 ~= loc_7 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[392](loc_8, 32)
		reg_0 = FUNC_LIST[306](reg_0, rt_sub_i32(loc_1, 4294967232), rt_add_i32(loc_1, 20))
		loc_2 = reg_0
		loc_0 = rt_load_i32(memory_at_0, loc_1 + 52)
		loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_mul_i32(rt_load_i32(memory_at_0, loc_1 + 56), 12))
		if loc_5 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, loc_5)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 96)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[506] = --[[ Luau::Parser::reportFunctionArgsError(Luau::AstExpr*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				if loc_2 == 0 then
					break
				end
				if rt_load_i32(memory_at_0, loc_0 + 64) == rt_load_i32(memory_at_0, loc_1 + 16) then
					break
				end
				reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_3 + 36, 1)
				rt_store_i32(memory_at_0, loc_3 + 32, loc_2)
				rt_store_i32(memory_at_0, loc_2, loc_1)
				reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_1, 8), rt_add_i32(loc_3, 32), 8273, 0)
				loc_0 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_3 + 32, rt_load_i64(memory_at_0, loc_1 + 8))
			rt_store_i64(memory_at_0, loc_3 + 40, rt_load_i64(memory_at_0, loc_0 + 64))
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 4)
			loc_2 = reg_0
			rt_store_i32(memory_at_0, loc_3 + 28, 1)
			rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
			rt_store_i32(memory_at_0, loc_2, loc_1)
			FUNC_LIST[395](rt_add_i32(loc_3, 12), rt_add_i32(loc_0, 60))
			rt_store_i32(memory_at_0, loc_3, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 23), 0) then rt_load_i32(memory_at_0, loc_3 + 12) else rt_add_i32(loc_3, 12)))
			reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_3, 32), rt_add_i32(loc_3, 24), 2658, loc_3)
			loc_0 = reg_0
			if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_3 + 23), 0) then
				break
			end
			FUNC_LIST[653](rt_load_i32(memory_at_0, loc_3 + 12), bit_and(rt_load_i32(memory_at_0, loc_3 + 20), 2147483647))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 48)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[507] = --[[ Luau::Parser::parseNumber() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local loc_12 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_0 + 72))
		rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_0 + 64))
		loc_5 = rt_add_i32(loc_0, 476)
		reg_1 = rt_load_i32(memory_at_0, loc_0 + 84)
		reg_2 = FUNC_LIST[394](rt_add_i32(loc_0, 60))
		reg_0 = FUNC_LIST[717](loc_5, reg_1, reg_2)
		while true do
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[722](loc_5, 95, 0)
						if reg_0 == 4294967295 then
							break
						end
						while true do
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 476)
							loc_4 = rt_load_i32_i8(memory_at_0, loc_0 + 487)
							loc_2 = (if rt_lt_i32(loc_4, 0) then 1 else 0)
							loc_1 = (if loc_2 ~= 0 then loc_7 else loc_5)
							loc_9 = rt_load_i32(memory_at_0, loc_0 + 480)
							loc_2 = (if loc_2 ~= 0 then loc_9 else loc_4)
							reg_0 = FUNC_LIST[604](loc_1, 95, loc_2)
							loc_8 = reg_0
							loc_6 = rt_add_i32(loc_1, loc_2)
							loc_1 = (if loc_8 ~= 0 then loc_8 else loc_6)
							if loc_1 == loc_6 then
								break
							end
							loc_2 = rt_add_i32(loc_1, 1)
							if loc_6 == loc_2 then
								break
							end
							loc_8 = rt_sub_i32(rt_sub_i32(loc_6, loc_1), 2)
							loc_9 = bit_and(rt_add_i32(bit_xor(loc_1, 4294967295), loc_6), 3)
							if loc_9 ~= 0 then
								while true do
									loc_4 = 0
									while true do
										loc_7 = rt_load_i32_u8(memory_at_0, loc_2)
										if loc_7 ~= 95 then
											while true do
												rt_store_i32_n8(memory_at_0, loc_1, loc_7)
												reg_0 = rt_add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_2 = rt_add_i32(loc_2, 1)
										loc_4 = rt_add_i32(loc_4, 1)
										if loc_9 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_8 >= 3 then
								while true do
									while true do
										loc_4 = rt_load_i32_u8(memory_at_0, loc_2)
										if loc_4 ~= 95 then
											while true do
												rt_store_i32_n8(memory_at_0, loc_1, loc_4)
												reg_0 = rt_add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_4 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
										if loc_4 ~= 95 then
											while true do
												rt_store_i32_n8(memory_at_0, loc_1, loc_4)
												reg_0 = rt_add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_4 = rt_load_i32_u8(memory_at_0, loc_2 + 2)
										if loc_4 ~= 95 then
											while true do
												rt_store_i32_n8(memory_at_0, loc_1, loc_4)
												reg_0 = rt_add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_4 = rt_load_i32_u8(memory_at_0, loc_2 + 3)
										if loc_4 ~= 95 then
											while true do
												rt_store_i32_n8(memory_at_0, loc_1, loc_4)
												reg_0 = rt_add_i32(loc_1, 1)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_1 = reg_0
										loc_2 = rt_add_i32(loc_2, 4)
										if loc_6 ~= loc_2 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_4 = rt_load_i32_u8(memory_at_0, loc_0 + 487)
							loc_9 = rt_load_i32(memory_at_0, loc_0 + 480)
							loc_7 = rt_load_i32(memory_at_0, loc_0 + 476)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = rt_extend_i32_n8(loc_4)
						loc_6 = (if rt_lt_i32(loc_10, 0) then 1 else 0)
						loc_8 = (if loc_6 ~= 0 then loc_7 else loc_5)
						loc_2 = rt_sub_i32(loc_1, loc_8)
						loc_4 = (if loc_6 ~= 0 then loc_9 else loc_4)
						if loc_2 > loc_4 then
							desired = 3
							break
						end
						loc_1 = rt_sub_i32(rt_add_i32(loc_4, loc_8), loc_1)
						if loc_1 == 4294967295 then
							while true do
								while true do
									if rt_lt_i32(loc_10, 0) then
										while true do
											rt_store_i32(memory_at_0, loc_0 + 480, loc_2)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									rt_store_i32_n8(memory_at_0, loc_0 + 487, bit_and(loc_2, 127))
									loc_7 = loc_5
									break
								end
								if desired then
									break
								end
								rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_7), 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[728](loc_5, loc_2, loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 487), 0) then rt_load_i32(memory_at_0, loc_0 + 476) else loc_5)
							if rt_load_i32_u8(memory_at_0, loc_2) ~= 48 then
								break
							end
							while true do
								while true do
									while true do
										loc_1 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, }
											end)()
										end
										temp = br_map[1][rt_sub_i32(loc_1, 88)] or 0
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 7
												break
											end
										elseif temp > 2 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_1 == 120 then
										desired = 6
										break
									end
									if loc_1 ~= 66 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_2 + 2) ~= 0 then
									while true do
										loc_1 = 2
										rt_store_i32(memory_at_0, loc_3 + 32, 0)
										loc_2 = rt_add_i32(loc_2, 2)
										reg_0 = FUNC_LIST[625](loc_2, rt_add_i32(loc_3, 32), 2)
										loc_11 = reg_0
										if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 32)) ~= 0 then
											while true do
												desired = 1
												break
											end
											if desired then
												break
											end
										end
										loc_12 = rt_convert_f64_u64(loc_11)
										while true do
											while true do
												if rt_ne_i64(loc_11, rt_i64_from_u32(4294967295, 4294967295)) then
													break
												end
												loc_11 = rt_i64_from_u32(4294967295, 4294967295)
												reg_0 = FUNC_LIST[516]()
												loc_1 = reg_0
												if rt_load_i32(memory_at_0, loc_1) ~= 68 then
													desired = 8
													break
												end
												rt_store_i32(memory_at_0, loc_1, 0)
												reg_0 = FUNC_LIST[625](loc_2, rt_add_i32(loc_3, 32), 2)
												loc_11 = reg_0
												if rt_load_i32(memory_at_0, loc_1) ~= 68 then
													break
												end
												loc_1 = 3
												desired = 1
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											if rt_lt_u64(loc_11, rt_i64_from_u32(0, 2097152)) then
												desired = 4
												break
											end
											break
										end
										if desired then
											break
										end
										while true do
											if bit_and((if loc_12 < 1.8446744073709552e19 then 1 else 0), (if loc_12 >= 0e0 then 1 else 0)) ~= 0 then
												while true do
													reg_0 = rt_truncate_u64_f64(loc_12)
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											reg_0 = rt_i64_ZERO
											break
										end
										if desired then
											break
										end
										if rt_eq_i64(reg_0, loc_11) then
											desired = 4
											break
										end
										loc_1 = 1
										desired = 1
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_1 ~= 88 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32_u8(memory_at_0, loc_2 + 2) == 0 then
								break
							end
							rt_store_i32(memory_at_0, loc_3 + 32, 0)
							reg_0 = FUNC_LIST[625](loc_2, rt_add_i32(loc_3, 32), 16)
							loc_11 = reg_0
							if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 32)) ~= 0 then
								desired = 2
								break
							end
							loc_12 = rt_convert_f64_u64(loc_11)
							while true do
								while true do
									if rt_ne_i64(loc_11, rt_i64_from_u32(4294967295, 4294967295)) then
										break
									end
									loc_11 = rt_i64_from_u32(4294967295, 4294967295)
									reg_0 = FUNC_LIST[516]()
									loc_1 = reg_0
									if rt_load_i32(memory_at_0, loc_1) ~= 68 then
										desired = 6
										break
									end
									rt_store_i32(memory_at_0, loc_1, 0)
									reg_0 = FUNC_LIST[625](loc_2, rt_add_i32(loc_3, 32), 16)
									loc_11 = reg_0
									if rt_load_i32(memory_at_0, loc_1) ~= 68 then
										break
									end
									loc_1 = 4
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_lt_u64(loc_11, rt_i64_from_u32(0, 2097152)) then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if bit_and((if loc_12 < 1.8446744073709552e19 then 1 else 0), (if loc_12 >= 0e0 then 1 else 0)) ~= 0 then
									while true do
										reg_0 = rt_truncate_u64_f64(loc_12)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = rt_i64_ZERO
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_eq_i64(reg_0, loc_11) then
								desired = 4
								break
							end
							loc_1 = 1
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_3 + 556, 0)
						reg_0 = FUNC_LIST[612](loc_2, rt_add_i32(loc_3, 556))
						loc_12 = reg_0
						if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 556)) ~= 0 then
							desired = 2
							break
						end
						if (if loc_12 >= 9.007199254740992e15 then 1 else 0) == 0 then
							break
						end
						reg_0 = FUNC_LIST[611](loc_2, 6893)
						reg_1 = FUNC_LIST[544](loc_2)
						if reg_0 ~= reg_1 then
							break
						end
						rt_store_f64(memory_at_0, loc_3, loc_12)
						reg_0 = FUNC_LIST[608](rt_add_i32(loc_3, 32), 512, 3936, loc_3)
						reg_0 = FUNC_LIST[584](rt_add_i32(loc_3, 32), loc_2)
						if reg_0 == 0 then
							break
						end
						loc_1 = 1
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[576](loc_5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 2
			loc_12 = 0e0
			break
		end
		FUNC_LIST[435](loc_0)
		while true do
			if loc_1 == 2 then
				while true do
					rt_store_i64(memory_at_0, loc_3 + 32, rt_i64_ZERO)
					reg_0 = FUNC_LIST[471](loc_0, rt_add_i32(loc_3, 16), rt_add_i32(loc_3, 32), 3009, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[392](rt_load_i32(memory_at_0, loc_0 + 124), 40)
			reg_0 = FUNC_LIST[287](reg_0, rt_add_i32(loc_3, 16), loc_12, loc_1)
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 560)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[508] = --[[ Luau::Parser::parseIfElseExpr() ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_1
		loc_8 = rt_load_i64(memory_at_0, loc_0 + 64)
		FUNC_LIST[435](loc_0)
		loc_2 = rt_add_i32(loc_0, 40)
		reg_0 = FUNC_LIST[459](loc_0, 0)
		loc_4 = reg_0
		while true do
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 60)
			if loc_5 ~= 307 then
				while true do
					FUNC_LIST[432](loc_0, 307, 3385)
					FUNC_LIST[418](rt_add_i32(loc_1, 16), loc_2)
					if rt_load_i32(memory_at_0, loc_1 + 16) ~= 307 then
						desired = 1
						break
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[435](loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[459](loc_0, 0)
		loc_6 = reg_0
		while true do
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_3 == 294 then
					while true do
						loc_3 = 1
						loc_7 = rt_load_i32(memory_at_0, loc_0 + 156)
						loc_2 = rt_add_i32(loc_7, 1)
						rt_store_i32(memory_at_0, loc_0 + 156, loc_2)
						if rt_load_i32(memory_at_0, 49008) < loc_2 then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[508](loc_0)
						loc_2 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 156, loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_3 = (if loc_3 == 293 then 1 else 0)
					if loc_3 == 0 then
						while true do
							FUNC_LIST[432](loc_0, 293, 3385)
							FUNC_LIST[418](rt_add_i32(loc_1, 16), loc_2)
							if rt_load_i32(memory_at_0, loc_1 + 16) ~= 293 then
								desired = 3
								break
							end
							FUNC_LIST[435](loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[435](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[459](loc_0, 0)
				loc_2 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 124)
			rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 16))
			rt_store_i64(memory_at_0, loc_1 + 16, loc_8)
			reg_0 = FUNC_LIST[392](loc_0, 44)
			reg_0 = FUNC_LIST[314](reg_0, rt_add_i32(loc_1, 16), loc_4, (if loc_5 == 307 then 1 else 0), loc_6, loc_3, loc_2)
			loc_0 = reg_0
			GLOBAL_LIST[0].value = rt_add_i32(loc_1, 48)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_1, 3398)
		FUNC_LIST[427](rt_sub_i32(loc_0, 4294967232), 4634, loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[509] = --[[ Luau::TempVector<Luau::AstExprTable::Item>::push_back(Luau::AstExprTable::Item const&) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
					loc_7 = rt_load_i32(memory_at_0, loc_2 + 8)
					if loc_3 < loc_7 then
						while true do
							rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
							rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
							loc_1 = rt_add_i32(loc_3, 12)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = rt_load_i32(memory_at_0, loc_2)
					loc_9 = rt_div_i32(rt_sub_i32(loc_3, loc_5), 12)
					loc_4 = rt_add_i32(loc_9, 1)
					if loc_4 >= 357913942 then
						desired = 2
						break
					end
					loc_6 = rt_div_i32(rt_sub_i32(loc_7, loc_5), 12)
					loc_8 = rt_shl_i32(loc_6, 1)
					loc_6 = (if loc_6 >= 178956970 then 357913941 else (if loc_4 < loc_8 then loc_8 else loc_4))
					if loc_6 ~= 0 then
						while true do
							if loc_6 >= 357913942 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_mul_i32(loc_6, 12))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_8 = reg_0
					loc_4 = rt_add_i32(loc_8, rt_mul_i32(loc_9, 12))
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
					rt_store_i32(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
					loc_6 = rt_add_i32(rt_mul_i32(loc_6, 12), loc_8)
					loc_1 = rt_add_i32(loc_4, 12)
					if loc_3 ~= loc_5 then
						while true do
							while true do
								loc_4 = rt_sub_i32(loc_4, 12)
								loc_3 = rt_sub_i32(loc_3, 12)
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								rt_store_i32(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_3 + 8))
								if loc_3 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_7 = rt_load_i32(memory_at_0, loc_2 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_2)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 8, loc_6)
					rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_2, loc_4)
					if loc_5 == 0 then
						break
					end
					FUNC_LIST[653](loc_5, rt_sub_i32(loc_7, loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[44](loc_2)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
end
FUNC_LIST[510] = --[[ Luau::ParseError* std::__2::vector<Luau::ParseError, std::__2::allocator<Luau::ParseError>>::__emplace_back_slow_path<Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&>(Luau::Location const&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			loc_8 = rt_shr_i32(rt_sub_i32(loc_4, loc_6), 5)
			loc_3 = rt_add_i32(loc_8, 1)
			if loc_3 < 134217728 then
				while true do
					loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_6)
					loc_9 = rt_shr_i32(loc_5, 4)
					loc_5 = (if loc_5 >= 2147483616 then 134217727 else (if loc_3 < loc_9 then loc_9 else loc_3))
					if loc_5 ~= 0 then
						while true do
							if loc_5 >= 134217728 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[646](rt_shl_i32(loc_5, 5))
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_7
							break
						end
						if desired then
							break
						end
					end
					loc_7 = reg_0
					loc_3 = rt_add_i32(loc_7, rt_shl_i32(loc_8, 5))
					rt_store_i32(memory_at_0, loc_3, 31260)
					rt_store_i64(memory_at_0, loc_3 + 12, rt_load_i64(memory_at_0, loc_1 + 8))
					rt_store_i64(memory_at_0, loc_3 + 4, rt_load_i64(memory_at_0, loc_1))
					loc_1 = rt_shl_i32(loc_5, 5)
					loc_5 = rt_add_i32(loc_3, 20)
					while true do
						if rt_ge_i32(rt_load_i32_i8(memory_at_0, loc_2 + 11), 0) then
							while true do
								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_2))
								rt_store_i32(memory_at_0, loc_5 + 8, rt_load_i32(memory_at_0, loc_2 + 8))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[716](loc_5, rt_load_i32(memory_at_0, loc_2), rt_load_i32(memory_at_0, loc_2 + 4))
						loc_6 = rt_load_i32(memory_at_0, loc_0)
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
						break
					end
					if desired then
						break
					end
					loc_8 = rt_add_i32(loc_1, loc_7)
					loc_1 = rt_add_i32(loc_3, 32)
					while true do
						if loc_4 == loc_6 then
							while true do
								loc_2 = loc_3
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_2 = rt_sub_i32(loc_3, 32)
							rt_store_i32(memory_at_0, loc_2, 31260)
							loc_7 = rt_sub_i32(loc_3, 28)
							loc_5 = rt_sub_i32(loc_4, 28)
							rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_5))
							rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
							loc_7 = rt_sub_i32(loc_3, 12)
							loc_3 = rt_sub_i32(loc_4, 12)
							loc_10 = loc_3
							loc_5 = rt_add_i32(loc_10, 8)
							rt_store_i32(memory_at_0, loc_7 + 8, rt_load_i32(memory_at_0, loc_5))
							rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
							rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
							rt_store_i32(memory_at_0, loc_10 + 8, 0)
							loc_3 = loc_2
							loc_4 = rt_sub_i32(loc_4, 32)
							if loc_6 ~= loc_4 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
						loc_6 = rt_load_i32(memory_at_0, loc_0)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
					rt_store_i32(memory_at_0, loc_0, loc_2)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_8)
					if loc_4 ~= loc_6 then
						while true do
							while true do
								loc_4 = rt_sub_i32(loc_4, 32)
								reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4))](loc_4)
								if loc_4 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					if loc_6 ~= 0 then
						while true do
							FUNC_LIST[653](loc_6, rt_sub_i32(loc_3, loc_6))
							break
						end
						if desired then
							break
						end
					end
					reg_0 = loc_1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[44](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[197]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[511] = --[[ Luau::ParseError::~ParseError()_704 ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 31260)
		if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 31), 0) then
			while true do
				FUNC_LIST[653](rt_load_i32(memory_at_0, loc_0 + 20), bit_and(rt_load_i32(memory_at_0, loc_0 + 28), 2147483647))
				break
			end
		end
		reg_0 = FUNC_LIST[188](loc_0)
		FUNC_LIST[653](reg_0, 32)
		break
	end
end
FUNC_LIST[512] = --[[ Luau::vformatAppend(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>&, char const*, void*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
		reg_0 = FUNC_LIST[609](0, 0, loc_1, loc_2)
		loc_2 = reg_0
		if rt_gt_i32(loc_2, 0) then
			while true do
				loc_4 = rt_load_i32_i8(memory_at_0, loc_0 + 11)
				loc_4 = (if rt_lt_i32(loc_4, 0) then rt_load_i32(memory_at_0, loc_0 + 4) else loc_4)
				FUNC_LIST[733](loc_0, rt_add_i32(loc_2, loc_4), 0)
				reg_0 = FUNC_LIST[609](rt_add_i32(loc_4, (if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then rt_load_i32(memory_at_0, loc_0) else loc_0)), rt_add_i32(loc_2, 1), loc_1, rt_load_i32(memory_at_0, loc_3 + 12))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[513] = --[[ Luau::format(char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_0 + 8, 0)
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_3 + 4, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
		reg_0 = FUNC_LIST[609](0, 0, loc_1, loc_2)
		loc_2 = reg_0
		if rt_gt_i32(loc_2, 0) then
			while true do
				FUNC_LIST[733](loc_0, loc_2, 0)
				reg_0 = FUNC_LIST[609]((if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then rt_load_i32(memory_at_0, loc_0) else loc_0), rt_add_i32(loc_2, 1), loc_1, rt_load_i32(memory_at_0, loc_3 + 12))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[514] = --[[ Luau::vformat(char const*, void*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i64(memory_at_0, loc_0, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 8, 0)
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
		reg_0 = FUNC_LIST[609](0, 0, loc_1, loc_2)
		loc_2 = reg_0
		if rt_gt_i32(loc_2, 0) then
			while true do
				FUNC_LIST[733](loc_0, loc_2, 0)
				reg_0 = FUNC_LIST[609]((if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_0 + 11), 0) then rt_load_i32(memory_at_0, loc_0) else loc_0), rt_add_i32(loc_2, 1), loc_1, rt_load_i32(memory_at_0, loc_3 + 12))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[515] = --[[ Luau::hashRange(char const*, unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		if loc_1 == 0 then
			while true do
				reg_0 = 2166136261
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = bit_and(loc_1, 3)
		while true do
			if loc_1 < 4 then
				while true do
					loc_2 = 2166136261
					loc_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = bit_and(loc_1, 4294967292)
			loc_2 = 2166136261
			loc_1 = 0
			while true do
				loc_3 = rt_add_i32(loc_0, loc_1)
				loc_2 = rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, loc_3), loc_2), 16777619), rt_load_i32_u8(memory_at_0, loc_3 + 1)), 16777619), rt_load_i32_u8(memory_at_0, loc_3 + 2)), 16777619), rt_load_i32_u8(memory_at_0, loc_3 + 3)), 16777619)
				loc_1 = rt_add_i32(loc_1, 4)
				loc_6 = rt_add_i32(loc_6, 4)
				if loc_7 ~= loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_4 ~= 0 then
			while true do
				while true do
					loc_2 = rt_mul_i32(bit_xor(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_0, loc_1)), loc_2), 16777619)
					loc_1 = rt_add_i32(loc_1, 1)
					loc_5 = rt_add_i32(loc_5, 1)
					if loc_4 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[516] = --[[ __errno_location ]] function()
	local reg_0
	while true do
		reg_0 = 49116
		break
	end
	return reg_0
end
FUNC_LIST[517] = --[[ __memcpy ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		if loc_2 >= 512 then
			while true do
				FUNC_LIST[1](loc_0, loc_1, loc_2)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_add_i32(loc_0, loc_2)
		while true do
			if bit_and(bit_xor(loc_0, loc_1), 3) == 0 then
				while true do
					while true do
						if bit_and(loc_0, 3) == 0 then
							while true do
								loc_2 = loc_0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_2 == 0 then
							while true do
								loc_2 = loc_0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_2 = loc_0
						while true do
							rt_store_i32_n8(memory_at_0, loc_2, rt_load_i32_u8(memory_at_0, loc_1))
							loc_1 = rt_add_i32(loc_1, 1)
							loc_2 = rt_add_i32(loc_2, 1)
							if bit_and(loc_2, 3) == 0 then
								desired = 3
								break
							end
							if loc_2 < loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					loc_4 = bit_and(loc_3, 4294967292)
					while true do
						if loc_3 < 64 then
							break
						end
						loc_5 = rt_add_i32(loc_4, 4294967232)
						if loc_5 < loc_2 then
							break
						end
						while true do
							rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
							rt_store_i32(memory_at_0, loc_2 + 4, rt_load_i32(memory_at_0, loc_1 + 4))
							rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
							rt_store_i32(memory_at_0, loc_2 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
							rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
							rt_store_i32(memory_at_0, loc_2 + 20, rt_load_i32(memory_at_0, loc_1 + 20))
							rt_store_i32(memory_at_0, loc_2 + 24, rt_load_i32(memory_at_0, loc_1 + 24))
							rt_store_i32(memory_at_0, loc_2 + 28, rt_load_i32(memory_at_0, loc_1 + 28))
							rt_store_i32(memory_at_0, loc_2 + 32, rt_load_i32(memory_at_0, loc_1 + 32))
							rt_store_i32(memory_at_0, loc_2 + 36, rt_load_i32(memory_at_0, loc_1 + 36))
							rt_store_i32(memory_at_0, loc_2 + 40, rt_load_i32(memory_at_0, loc_1 + 40))
							rt_store_i32(memory_at_0, loc_2 + 44, rt_load_i32(memory_at_0, loc_1 + 44))
							rt_store_i32(memory_at_0, loc_2 + 48, rt_load_i32(memory_at_0, loc_1 + 48))
							rt_store_i32(memory_at_0, loc_2 + 52, rt_load_i32(memory_at_0, loc_1 + 52))
							rt_store_i32(memory_at_0, loc_2 + 56, rt_load_i32(memory_at_0, loc_1 + 56))
							rt_store_i32(memory_at_0, loc_2 + 60, rt_load_i32(memory_at_0, loc_1 + 60))
							loc_1 = rt_sub_i32(loc_1, 4294967232)
							loc_2 = rt_sub_i32(loc_2, 4294967232)
							if loc_5 >= loc_2 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					if loc_2 >= loc_4 then
						desired = 1
						break
					end
					while true do
						rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
						loc_1 = rt_add_i32(loc_1, 4)
						loc_2 = rt_add_i32(loc_2, 4)
						if loc_4 > loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 < 4 then
				while true do
					loc_2 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_sub_i32(loc_3, 4)
			if loc_0 > loc_4 then
				while true do
					loc_2 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = loc_0
			while true do
				rt_store_i32_n8(memory_at_0, loc_2, rt_load_i32_u8(memory_at_0, loc_1))
				rt_store_i32_n8(memory_at_0, loc_2 + 1, rt_load_i32_u8(memory_at_0, loc_1 + 1))
				rt_store_i32_n8(memory_at_0, loc_2 + 2, rt_load_i32_u8(memory_at_0, loc_1 + 2))
				rt_store_i32_n8(memory_at_0, loc_2 + 3, rt_load_i32_u8(memory_at_0, loc_1 + 3))
				loc_1 = rt_add_i32(loc_1, 4)
				loc_2 = rt_add_i32(loc_2, 4)
				if loc_4 >= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_2 < loc_3 then
			while true do
				while true do
					rt_store_i32_n8(memory_at_0, loc_2, rt_load_i32_u8(memory_at_0, loc_1))
					loc_1 = rt_add_i32(loc_1, 1)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[518] = --[[ memmove ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			if loc_0 == loc_1 then
				break
			end
			loc_3 = rt_add_i32(loc_0, loc_2)
			if rt_sub_i32(loc_1, loc_3) <= rt_sub_i32(0, rt_shl_i32(loc_2, 1)) then
				while true do
					reg_0 = FUNC_LIST[517](loc_0, loc_1, loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = bit_and(bit_xor(loc_0, loc_1), 3)
			while true do
				while true do
					if loc_0 < loc_1 then
						while true do
							if loc_4 ~= 0 then
								while true do
									loc_3 = loc_0
									desired = 2
									break
								end
								if desired then
									break
								end
							end
							if bit_and(loc_0, 3) == 0 then
								while true do
									loc_3 = loc_0
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							loc_3 = loc_0
							while true do
								if loc_2 == 0 then
									desired = 1
									break
								end
								rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1))
								loc_1 = rt_add_i32(loc_1, 1)
								loc_2 = rt_sub_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_3, 1)
								if bit_and(loc_3, 3) ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_4 ~= 0 then
							break
						end
						if bit_and(loc_3, 3) ~= 0 then
							while true do
								while true do
									if loc_2 == 0 then
										desired = 1
										break
									end
									loc_2 = rt_sub_i32(loc_2, 1)
									loc_3 = rt_add_i32(loc_2, loc_0)
									rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)))
									if bit_and(loc_3, 3) ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_2 <= 3 then
							break
						end
						while true do
							loc_2 = rt_sub_i32(loc_2, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_0), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_2)))
							if loc_2 > 3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 1
						break
					end
					while true do
						loc_2 = rt_sub_i32(loc_2, 1)
						rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_0), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)))
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 <= 3 then
					break
				end
				while true do
					rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_1))
					loc_1 = rt_add_i32(loc_1, 4)
					loc_3 = rt_add_i32(loc_3, 4)
					loc_2 = rt_sub_i32(loc_2, 4)
					if loc_2 > 3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			while true do
				rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1))
				loc_3 = rt_add_i32(loc_3, 1)
				loc_1 = rt_add_i32(loc_1, 1)
				loc_2 = rt_sub_i32(loc_2, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[519] = --[[ __memset ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0, loc_1)
			loc_3 = rt_add_i32(loc_0, loc_2)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 1), loc_1)
			if loc_2 < 3 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 2, loc_1)
			rt_store_i32_n8(memory_at_0, loc_0 + 1, loc_1)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 3), loc_1)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 2), loc_1)
			if loc_2 < 7 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 3, loc_1)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 4), loc_1)
			if loc_2 < 9 then
				break
			end
			loc_4 = bit_and(rt_sub_i32(0, loc_0), 3)
			loc_3 = rt_add_i32(loc_4, loc_0)
			loc_1 = rt_mul_i32(bit_and(loc_1, 255), 16843009)
			rt_store_i32(memory_at_0, loc_3, loc_1)
			loc_4 = bit_and(rt_sub_i32(loc_2, loc_4), 4294967292)
			loc_2 = rt_add_i32(loc_4, loc_3)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 4), loc_1)
			if loc_4 < 9 then
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 8), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 12), loc_1)
			if loc_4 < 25 then
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 24, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 16, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 16), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 20), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 24), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 28), loc_1)
			loc_5 = bit_or(bit_and(loc_3, 4), 24)
			loc_2 = rt_sub_i32(loc_4, loc_5)
			if loc_2 < 32 then
				break
			end
			loc_6 = rt_mul_i64(rt_extend_i64_u32(loc_1), rt_i64_from_u32(1, 1))
			loc_1 = rt_add_i32(loc_3, loc_5)
			while true do
				rt_store_i64(memory_at_0, loc_1 + 24, loc_6)
				rt_store_i64(memory_at_0, loc_1 + 16, loc_6)
				rt_store_i64(memory_at_0, loc_1 + 8, loc_6)
				rt_store_i64(memory_at_0, loc_1, loc_6)
				loc_1 = rt_add_i32(loc_1, 32)
				loc_2 = rt_sub_i32(loc_2, 32)
				if loc_2 > 31 then
					continue
				end
				break
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[520] = --[[ __math_uflow ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[603](loc_0, 1.2882297539194267e-231)
		break
	end
	return reg_0
end
FUNC_LIST[521] = --[[ __math_oflow ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[603](loc_0, 3.105036184601418e231)
		break
	end
	return reg_0
end
FUNC_LIST[522] = --[[ exp ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				reg_0 = FUNC_LIST[523](loc_0)
				loc_3 = bit_and(reg_0, 2047)
				reg_1 = FUNC_LIST[523](5.551115123125783e-17)
				loc_4 = reg_1
				reg_1 = FUNC_LIST[523](5.12e2)
				if rt_sub_i32(loc_3, loc_4) < rt_sub_i32(reg_1, loc_4) then
					while true do
						loc_4 = loc_3
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 < loc_4 then
					while true do
						reg_0 = (loc_0 + 1e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = 0
				reg_0 = FUNC_LIST[523](1.024e3)
				if reg_0 > loc_3 then
					break
				end
				loc_5 = rt_reinterpret_i64_f64(loc_0)
				reg_0 = 0e0
				if rt_eq_i64(loc_5, rt_i64_from_u32(0, 4293918720)) then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[523](math.huge)
				if reg_0 <= loc_3 then
					while true do
						reg_0 = (loc_0 + 1e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_lt_i64(loc_5, rt_i64_ZERO) then
					while true do
						reg_0 = FUNC_LIST[520](0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[521](0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_f64(memory_at_0, 31352)
			loc_2 = ((loc_0 * rt_load_f64(memory_at_0, 31344)) + loc_1)
			loc_1 = (loc_2 - loc_1)
			loc_0 = ((loc_1 * rt_load_f64(memory_at_0, 31368)) + ((loc_1 * rt_load_f64(memory_at_0, 31360)) + loc_0))
			loc_1 = (loc_0 * loc_0)
			loc_5 = rt_reinterpret_i64_f64(loc_2)
			loc_3 = bit_and(rt_shl_i32(rt_wrap_i32_i64(loc_5), 4), 2032)
			loc_0 = (((loc_1 * loc_1) * ((loc_0 * rt_load_f64(memory_at_0, 31400)) + rt_load_f64(memory_at_0, 31392))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 31384)) + rt_load_f64(memory_at_0, 31376))) + (rt_load_f64(memory_at_0, rt_add_i32(loc_3, 31456)) + loc_0)))
			loc_6 = rt_add_i64(rt_load_i64(memory_at_0, rt_add_i32(loc_3, 31464)), rt_shl_i64(loc_5, rt_i64_from_u32(45, 0)))
			if loc_4 == 0 then
				while true do
					reg_0 = FUNC_LIST[524](loc_0, loc_6, loc_5)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_reinterpret_f64_i64(loc_6)
			reg_0 = ((loc_1 * loc_0) + loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[523] = --[[ top12 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(52, 0)))
		break
	end
	return reg_0
end
FUNC_LIST[524] = --[[ specialcase ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local desired
	while true do
		if rt_eq_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(2147483648, 0)), rt_i64_ZERO) then
			while true do
				loc_3 = rt_reinterpret_f64_i64(rt_sub_i64(loc_1, rt_i64_from_u32(0, 1058013184)))
				reg_0 = (((loc_3 * loc_0) + loc_3) * 5.486124068793689e303)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_reinterpret_f64_i64(rt_add_i64(loc_1, rt_i64_from_u32(0, 1071644672)))
		loc_4 = (loc_3 * loc_0)
		loc_0 = (loc_4 + loc_3)
		if loc_0 < 1e0 then
			while true do
				reg_0 = FUNC_LIST[525]()
				FUNC_LIST[526]((reg_0 * 2.2250738585072014e-308))
				loc_5 = (loc_0 + 1e0)
				loc_0 = ((loc_5 + ((loc_4 + (loc_3 - loc_0)) + (loc_0 + (1e0 - loc_5)))) + -1e0)
				reg_0 = (if loc_0 == 0e0 then 0e0 else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = (loc_0 * 2.2250738585072014e-308)
		break
	end
	return reg_0
end
FUNC_LIST[525] = --[[ fp_barrier ]] function()
	local loc_0 = 0
	local reg_0
	while true do
		loc_0 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_from_u32(0, 1048576))
		reg_0 = rt_load_f64(memory_at_0, loc_0 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[526] = --[[ fp_force_eval ]] function(loc_0)
	while true do
		rt_store_f64(memory_at_0, rt_sub_i32(GLOBAL_LIST[0].value, 16) + 8, loc_0)
		break
	end
end
FUNC_LIST[527] = --[[ fmod ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				loc_4 = rt_reinterpret_i64_f64(loc_1)
				loc_2 = rt_shl_i64(loc_4, rt_i64_ONE)
				if rt_eq_i64(loc_2, rt_i64_ZERO) then
					break
				end
				reg_0 = FUNC_LIST[528](loc_1)
				if rt_gt_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then
					break
				end
				loc_5 = rt_reinterpret_i64_f64(loc_0)
				loc_6 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_5, rt_i64_from_u32(52, 0))), 2047)
				if loc_6 ~= 2047 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = (loc_0 * loc_1)
			reg_0 = (loc_1 / loc_1)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = rt_shl_i64(loc_5, rt_i64_ONE)
		if rt_le_u64(loc_3, loc_2) then
			while true do
				reg_0 = (if rt_eq_i64(loc_2, loc_3) then (loc_0 * 0e0) else loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_7 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(52, 0))), 2047)
		while true do
			if loc_6 == 0 then
				while true do
					loc_6 = 0
					loc_2 = rt_shl_i64(loc_5, rt_i64_from_u32(12, 0))
					if rt_ge_i64(loc_2, rt_i64_ZERO) then
						while true do
							while true do
								loc_6 = rt_sub_i32(loc_6, 1)
								loc_2 = rt_shl_i64(loc_2, rt_i64_ONE)
								if rt_ge_i64(loc_2, rt_i64_ZERO) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_shl_i64(loc_5, rt_extend_i64_u32(rt_sub_i32(1, loc_6)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(4294967295, 1048575)), rt_i64_from_u32(0, 1048576))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_0
		while true do
			if loc_7 == 0 then
				while true do
					loc_7 = 0
					loc_3 = rt_shl_i64(loc_4, rt_i64_from_u32(12, 0))
					if rt_ge_i64(loc_3, rt_i64_ZERO) then
						while true do
							while true do
								loc_7 = rt_sub_i32(loc_7, 1)
								loc_3 = rt_shl_i64(loc_3, rt_i64_ONE)
								if rt_ge_i64(loc_3, rt_i64_ZERO) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_shl_i64(loc_4, rt_extend_i64_u32(rt_sub_i32(1, loc_7)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = rt_bit_or_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 1048575)), rt_i64_from_u32(0, 1048576))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = reg_0
		if rt_gt_i32(loc_6, loc_7) then
			while true do
				while true do
					while true do
						loc_3 = rt_sub_i64(loc_2, loc_4)
						if rt_lt_i64(loc_3, rt_i64_ZERO) then
							break
						end
						loc_2 = loc_3
						if rt_ne_i64(loc_2, rt_i64_ZERO) then
							break
						end
						reg_0 = (loc_0 * 0e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_2 = rt_shl_i64(loc_2, rt_i64_ONE)
					loc_6 = rt_sub_i32(loc_6, 1)
					if rt_lt_i32(loc_7, loc_6) then
						continue
					end
					break
				end
				if desired then
					break
				end
				reg_0 = loc_7
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_6
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_6 = reg_0
		while true do
			loc_3 = rt_sub_i64(loc_2, loc_4)
			if rt_lt_i64(loc_3, rt_i64_ZERO) then
				break
			end
			loc_2 = loc_3
			if rt_ne_i64(loc_2, rt_i64_ZERO) then
				break
			end
			reg_0 = (loc_0 * 0e0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 1048575)) then
				while true do
					loc_3 = loc_2
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_7 = (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 524288)) then 1 else 0)
				loc_3 = rt_shl_i64(loc_2, rt_i64_ONE)
				loc_2 = loc_3
				if loc_7 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = rt_bit_and_i64(loc_5, rt_i64_from_u32(0, 2147483648))
		reg_0 = loc_2
		if rt_gt_i32(loc_6, 0) then
			while true do
				reg_1 = rt_bit_or_i64(rt_sub_i64(loc_3, rt_i64_from_u32(0, 1048576)), rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(52, 0)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = rt_shr_u64(loc_3, rt_extend_i64_u32(rt_sub_i32(1, loc_6)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_1
		reg_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(reg_0, loc_3))
		break
	end
	return reg_0
end
FUNC_LIST[528] = --[[ __DOUBLE_BITS ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_reinterpret_i64_f64(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[529] = --[[ ldexp ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[543](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[530] = --[[ __math_divzero ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[531]((if loc_0 ~= 0 then -1e0 else 1e0))
		reg_0 = (reg_0 / 0e0)
		break
	end
	return reg_0
end
FUNC_LIST[531] = --[[ fp_barrier_726 ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		rt_store_f64(memory_at_0, loc_1 + 8, loc_0)
		reg_0 = rt_load_f64(memory_at_0, loc_1 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[532] = --[[ __math_invalid ]] function(loc_0)
	local reg_0
	while true do
		loc_0 = (loc_0 - loc_0)
		reg_0 = (loc_0 / loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[533] = --[[ log ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[534](loc_0)
		loc_7 = reg_0
		loc_8 = rt_reinterpret_i64_f64(loc_0)
		if rt_le_u64(rt_sub_i64(loc_8, rt_i64_from_u32(0, 1072562176)), rt_i64_from_u32(4294967295, 198911)) then
			while true do
				if rt_eq_i64(loc_8, rt_i64_from_u32(0, 1072693248)) then
					while true do
						reg_0 = 0e0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				loc_0 = (loc_0 + -1e0)
				loc_1 = (loc_0 * 1.34217728e8)
				loc_1 = ((loc_0 + loc_1) - loc_1)
				loc_4 = rt_load_f64(memory_at_0, 35752)
				loc_5 = ((loc_1 * loc_1) * loc_4)
				loc_6 = (loc_0 + loc_5)
				loc_2 = (loc_0 * loc_0)
				loc_3 = (loc_0 * loc_2)
				reg_0 = (loc_6 + ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * rt_load_f64(memory_at_0, 35832)) + ((loc_2 * rt_load_f64(memory_at_0, 35824)) + ((loc_0 * rt_load_f64(memory_at_0, 35816)) + rt_load_f64(memory_at_0, 35808))))) + ((loc_2 * rt_load_f64(memory_at_0, 35800)) + ((loc_0 * rt_load_f64(memory_at_0, 35792)) + rt_load_f64(memory_at_0, 35784))))) + ((loc_2 * rt_load_f64(memory_at_0, 35776)) + ((loc_0 * rt_load_f64(memory_at_0, 35768)) + rt_load_f64(memory_at_0, 35760))))) + ((((loc_0 - loc_1) * loc_4) * (loc_0 + loc_1)) + (loc_5 + (loc_0 - loc_6)))))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if rt_sub_i32(loc_7, 32752) <= 4294934559 then
				while true do
					if loc_0 == 0e0 then
						while true do
							reg_0 = FUNC_LIST[530](1)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					if rt_eq_i64(loc_8, rt_i64_from_u32(0, 2146435072)) then
						desired = 1
						break
					end
					if bit_and((if bit_and(loc_7, 32752) ~= 32752 then 1 else 0), (if loc_7 <= 32767 then 1 else 0)) == 0 then
						while true do
							reg_0 = FUNC_LIST[532](loc_0)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_sub_i64(rt_reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), rt_i64_from_u32(0, 54525952))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_8
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = reg_0
			loc_9 = rt_sub_i64(loc_8, rt_i64_from_u32(0, 1072037888))
			loc_2 = rt_convert_f64_i32(rt_wrap_i32_i64(rt_shr_i64(loc_9, rt_i64_from_u32(52, 0))))
			loc_7 = rt_shl_i32(bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_9, rt_i64_from_u32(45, 0))), 127), 4)
			loc_3 = ((loc_2 * rt_load_f64(memory_at_0, 35696)) + rt_load_f64(memory_at_0, rt_add_i32(loc_7, 35848)))
			loc_0 = (rt_load_f64(memory_at_0, rt_add_i32(loc_7, 35840)) * ((rt_reinterpret_f64_i64(rt_sub_i64(loc_8, rt_bit_and_i64(loc_9, rt_i64_from_u32(0, 4293918720)))) - rt_load_f64(memory_at_0, rt_add_i32(loc_7, 37888))) - rt_load_f64(memory_at_0, rt_add_i32(loc_7, 37896))))
			loc_4 = (loc_3 + loc_0)
			loc_1 = (loc_0 * loc_0)
			loc_0 = (loc_4 + (((loc_0 * loc_1) * ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 35744)) + rt_load_f64(memory_at_0, 35736))) + ((loc_0 * rt_load_f64(memory_at_0, 35728)) + rt_load_f64(memory_at_0, 35720)))) + ((loc_1 * rt_load_f64(memory_at_0, 35712)) + ((loc_2 * rt_load_f64(memory_at_0, 35704)) + (loc_0 + (loc_3 - loc_4))))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[534] = --[[ top16 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(48, 0)))
		break
	end
	return reg_0
end
FUNC_LIST[535] = --[[ log10 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_7 = rt_reinterpret_i64_f64(loc_0)
					if rt_le_i64(loc_7, rt_i64_from_u32(4294967295, 1048575)) then
						while true do
							if loc_0 == 0e0 then
								while true do
									reg_0 = (-1e0 / (loc_0 * loc_0))
									desired = 0
									break
								end
								if desired then
									break
								end
							end
							if rt_ge_i64(loc_7, rt_i64_ZERO) then
								desired = 3
								break
							end
							reg_0 = ((loc_0 - loc_0) / 0e0)
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_gt_u64(loc_7, rt_i64_from_u32(4294967295, 2146435071)) then
						desired = 1
						break
					end
					loc_10 = 4294966273
					loc_8 = rt_shr_u64(loc_7, rt_i64_from_u32(32, 0))
					if rt_ne_i64(loc_8, rt_i64_from_u32(1072693248, 0)) then
						while true do
							reg_0 = rt_wrap_i32_i64(loc_8)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = 1072693248
					reg_0 = loc_9
					if rt_wrap_i32_i64(loc_7) ~= 0 then
						desired = 2
						break
					end
					reg_0 = 0e0
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_10 = 4294966219
				loc_7 = rt_reinterpret_i64_f64((loc_0 * 1.8014398509481984e16))
				reg_0 = rt_wrap_i32_i64(rt_shr_u64(loc_7, rt_i64_from_u32(32, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = reg_0
			loc_9 = rt_add_i32(loc_9, 614242)
			loc_5 = rt_convert_f64_i32(rt_add_i32(rt_shr_u32(loc_9, 20), loc_10))
			loc_1 = (loc_5 * 3.0102999566361177e-1)
			loc_0 = (rt_reinterpret_f64_i64(rt_bit_or_i64(rt_bit_and_i64(loc_7, rt_i64_from_u32(4294967295, 0)), rt_shl_i64(rt_extend_i64_u32(rt_add_i32(bit_and(loc_9, 1048575), 1072079006)), rt_i64_from_u32(32, 0)))) + -1e0)
			loc_3 = (loc_0 * (loc_0 * 5e-1))
			loc_4 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64((loc_0 - loc_3)), rt_i64_from_u32(0, 4294967295)))
			loc_2 = (loc_4 * 4.342944818781689e-1)
			loc_6 = (loc_1 + loc_2)
			reg_1 = (loc_2 + (loc_1 - loc_6))
			loc_1 = (loc_0 / (loc_0 + 2e0))
			loc_2 = (loc_1 * loc_1)
			reg_2 = loc_1
			loc_1 = (loc_2 * loc_2)
			loc_0 = ((reg_2 * (loc_3 + ((loc_1 * ((loc_1 * ((loc_1 * 1.5313837699209373e-1) + 2.2222198432149784e-1)) + 3.999999999940942e-1)) + (loc_2 * ((loc_1 * ((loc_1 * ((loc_1 * 1.4798198605116586e-1) + 1.818357216161805e-1)) + 2.857142874366239e-1)) + 6.666666666666735e-1))))) + ((loc_0 - loc_4) - loc_3))
			loc_0 = (loc_6 + (reg_1 + ((loc_0 * 4.342944818781689e-1) + ((loc_5 * 3.694239077158931e-13) + ((loc_0 + loc_4) * 2.5082946711645275e-11)))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[536] = --[[ log2 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[534](loc_0)
		loc_8 = reg_0
		loc_9 = rt_reinterpret_i64_f64(loc_0)
		if rt_le_u64(rt_sub_i64(loc_9, rt_i64_from_u32(0, 1072604335)), rt_i64_from_u32(4294967295, 135337)) then
			while true do
				if rt_eq_i64(loc_9, rt_i64_from_u32(0, 1072693248)) then
					while true do
						reg_0 = 0e0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				loc_2 = rt_load_f64(memory_at_0, 33504)
				loc_0 = (loc_0 + -1e0)
				loc_3 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(0, 4294967295)))
				loc_4 = (loc_2 * loc_3)
				loc_1 = (loc_0 * loc_0)
				loc_5 = (loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 33576)) + rt_load_f64(memory_at_0, 33568)))
				loc_6 = (loc_4 + loc_5)
				loc_7 = (loc_1 * loc_1)
				reg_0 = (loc_6 + ((loc_7 * ((loc_7 * ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 33640)) + rt_load_f64(memory_at_0, 33632))) + ((loc_0 * rt_load_f64(memory_at_0, 33624)) + rt_load_f64(memory_at_0, 33616)))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 33608)) + rt_load_f64(memory_at_0, 33600))) + ((loc_0 * rt_load_f64(memory_at_0, 33592)) + rt_load_f64(memory_at_0, 33584))))) + ((((loc_0 - loc_3) * loc_2) + (loc_0 * rt_load_f64(memory_at_0, 33512))) + (loc_5 + (loc_4 - loc_6)))))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if rt_sub_i32(loc_8, 32752) <= 4294934559 then
				while true do
					if loc_0 == 0e0 then
						while true do
							reg_0 = FUNC_LIST[530](1)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					if rt_eq_i64(loc_9, rt_i64_from_u32(0, 2146435072)) then
						desired = 1
						break
					end
					if bit_and((if bit_and(loc_8, 32752) ~= 32752 then 1 else 0), (if loc_8 <= 32767 then 1 else 0)) == 0 then
						while true do
							reg_0 = FUNC_LIST[532](loc_0)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_sub_i64(rt_reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), rt_i64_from_u32(0, 54525952))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_9
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = reg_0
			loc_10 = rt_sub_i64(loc_9, rt_i64_from_u32(0, 1072037888))
			loc_8 = rt_shl_i32(bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_10, rt_i64_from_u32(46, 0))), 63), 4)
			loc_2 = (rt_load_f64(memory_at_0, rt_add_i32(loc_8, 33656)) + rt_convert_f64_i32(rt_wrap_i32_i64(rt_shr_i64(loc_10, rt_i64_from_u32(52, 0)))))
			loc_3 = rt_load_f64(memory_at_0, 33504)
			loc_0 = (rt_load_f64(memory_at_0, rt_add_i32(loc_8, 33648)) * ((rt_reinterpret_f64_i64(rt_sub_i64(loc_9, rt_bit_and_i64(loc_10, rt_i64_from_u32(0, 4293918720)))) - rt_load_f64(memory_at_0, rt_add_i32(loc_8, 34672))) - rt_load_f64(memory_at_0, rt_add_i32(loc_8, 34680))))
			loc_4 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(0, 4294967295)))
			loc_5 = (loc_3 * loc_4)
			loc_6 = (loc_2 + loc_5)
			loc_1 = (loc_0 * loc_0)
			loc_0 = (loc_6 + ((loc_1 * (((loc_1 * loc_1) * ((loc_0 * rt_load_f64(memory_at_0, 33560)) + rt_load_f64(memory_at_0, 33552))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 33544)) + rt_load_f64(memory_at_0, 33536))) + ((loc_0 * rt_load_f64(memory_at_0, 33528)) + rt_load_f64(memory_at_0, 33520))))) + ((((loc_0 - loc_4) * loc_3) + (rt_load_f64(memory_at_0, 33512) * loc_0)) + (loc_5 + (loc_2 - loc_6)))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[537] = --[[ pow ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_9 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		reg_0 = FUNC_LIST[523](loc_0)
		loc_8 = reg_0
		reg_0 = FUNC_LIST[523](loc_1)
		loc_11 = reg_0
		loc_12 = bit_and(loc_11, 2047)
		loc_10 = rt_sub_i32(loc_12, 1086)
		loc_5 = rt_reinterpret_i64_f64(loc_1)
		loc_4 = rt_reinterpret_i64_f64(loc_0)
		while true do
			while true do
				if rt_sub_i32(loc_8, 2047) >= 4294965250 then
					while true do
						if loc_10 > 4294967167 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[538](loc_5)
				if reg_0 ~= 0 then
					while true do
						loc_2 = 1e0
						if rt_eq_i64(loc_4, rt_i64_from_u32(0, 1072693248)) then
							desired = 1
							break
						end
						loc_6 = rt_shl_i64(loc_5, rt_i64_ONE)
						if rt_eq_i64(loc_6, rt_i64_ZERO) then
							desired = 1
							break
						end
						loc_4 = rt_shl_i64(loc_4, rt_i64_ONE)
						if bit_and((if rt_lt_u64(loc_6, rt_i64_from_u32(1, 4292870144)) then 1 else 0), (if rt_le_u64(loc_4, rt_i64_from_u32(0, 4292870144)) then 1 else 0)) == 0 then
							while true do
								loc_2 = (loc_0 + loc_1)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						if rt_eq_i64(loc_4, rt_i64_from_u32(0, 2145386496)) then
							desired = 1
							break
						end
						loc_2 = (if bit_xor((if rt_lt_i64(loc_5, rt_i64_ZERO) then 1 else 0), (if rt_lt_u64(loc_4, rt_i64_from_u32(0, 2145386496)) then 1 else 0)) ~= 0 then 0e0 else (loc_1 * loc_1))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[538](loc_4)
				if reg_0 ~= 0 then
					while true do
						loc_2 = (loc_0 * loc_0)
						if rt_lt_i64(loc_4, rt_i64_ZERO) then
							while true do
								reg_2 = FUNC_LIST[539](loc_5)
								reg_0 = (if reg_2 == 1 then rt_neg_f64(loc_2) else loc_2)
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_0
						if rt_ge_i64(loc_5, rt_i64_ZERO) then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[531]((1e0 / loc_2))
						loc_2 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_lt_i64(loc_4, rt_i64_ZERO) then
					while true do
						reg_0 = FUNC_LIST[539](loc_5)
						loc_7 = reg_0
						if loc_7 == 0 then
							while true do
								reg_0 = FUNC_LIST[532](loc_0)
								loc_2 = reg_0
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_8 = bit_and(loc_8, 2047)
						loc_7 = rt_shl_i32((if loc_7 == 1 then 1 else 0), 18)
						reg_0 = rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(4294967295, 2147483647))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = reg_0
				if loc_10 <= 4294967167 then
					while true do
						loc_2 = 1e0
						if rt_eq_i64(loc_4, rt_i64_from_u32(0, 1072693248)) then
							desired = 1
							break
						end
						if loc_12 <= 957 then
							while true do
								loc_2 = ((if rt_gt_u64(loc_4, rt_i64_from_u32(0, 1072693248)) then loc_1 else rt_neg_f64(loc_1)) + 1e0)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						if (if loc_11 > 2047 then 1 else 0) ~= (if rt_gt_u64(loc_4, rt_i64_from_u32(0, 1072693248)) then 1 else 0) then
							while true do
								reg_0 = FUNC_LIST[521](0)
								loc_2 = reg_0
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						reg_0 = FUNC_LIST[520](0)
						loc_2 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_8 ~= 0 then
					break
				end
				loc_4 = rt_sub_i64(rt_bit_and_i64(rt_reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 54525952))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_reinterpret_f64_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(4160749568, 4294967295)))
			reg_1 = FUNC_LIST[540](loc_4, rt_add_i32(loc_9, 8))
			loc_3 = reg_1
			loc_0 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_3), rt_i64_from_u32(4160749568, 4294967295)))
			reg_0 = FUNC_LIST[541]((loc_2 * loc_0), (((loc_1 - loc_2) * loc_0) + (loc_1 * (rt_load_f64(memory_at_0, loc_9 + 8) + (loc_3 - loc_0)))), loc_7)
			loc_2 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_9, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[538] = --[[ zeroinfnan ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_lt_u64(rt_add_i64(rt_shl_i64(loc_0, rt_i64_ONE), rt_i64_from_u32(0, 2097152)), rt_i64_from_u32(1, 2097152)) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[539] = --[[ checkint ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = rt_i64_ZERO
	local reg_0
	while true do
		while true do
			loc_1 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(52, 0))), 2047)
			reg_0 = 0
			if loc_1 < 1023 then
				break
			end
			reg_0 = 2
			if loc_1 > 1075 then
				break
			end
			loc_2 = rt_shl_i64(rt_i64_ONE, rt_extend_i64_u32(rt_sub_i32(1075, loc_1)))
			reg_0 = 0
			if rt_ne_i64(rt_bit_and_i64(loc_0, rt_sub_i64(loc_2, rt_i64_ONE)), rt_i64_ZERO) then
				break
			end
			reg_0 = (if rt_eq_i64(rt_bit_and_i64(loc_0, loc_2), rt_i64_ZERO) then 2 else 1)
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[540] = --[[ log_inline ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = rt_i64_ZERO
	local loc_9 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		loc_8 = rt_sub_i64(loc_0, rt_i64_from_u32(0, 1072076117))
		loc_3 = rt_convert_f64_i32(rt_wrap_i32_i64(rt_shr_i64(loc_8, rt_i64_from_u32(52, 0))))
		loc_9 = rt_shl_i32(bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(45, 0))), 127), 5)
		loc_0 = rt_sub_i64(loc_0, rt_bit_and_i64(loc_8, rt_i64_from_u32(0, 4293918720)))
		loc_2 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_add_i64(loc_0, rt_i64_from_u32(2147483648, 0)), rt_i64_from_u32(0, 4294967295)))
		loc_5 = rt_load_f64(memory_at_0, rt_add_i32(loc_9, 40008))
		loc_4 = ((loc_2 * loc_5) + -1e0)
		loc_5 = ((rt_reinterpret_f64_i64(loc_0) - loc_2) * loc_5)
		loc_2 = (loc_4 + loc_5)
		reg_1 = ((loc_3 * rt_load_f64(memory_at_0, 39944)) + rt_load_f64(memory_at_0, rt_add_i32(loc_9, 40032)))
		loc_3 = ((loc_3 * rt_load_f64(memory_at_0, 39936)) + rt_load_f64(memory_at_0, rt_add_i32(loc_9, 40024)))
		reg_3 = loc_3
		loc_3 = (loc_2 + loc_3)
		loc_6 = rt_load_f64(memory_at_0, 39952)
		loc_7 = (loc_2 * loc_6)
		loc_6 = (loc_4 * loc_6)
		loc_4 = (loc_4 * loc_6)
		reg_2 = loc_4
		loc_4 = (loc_3 + loc_4)
		reg_1 = (((reg_1 + (loc_2 + (reg_3 - loc_3))) + (loc_5 * (loc_7 + loc_6))) + (reg_2 + (loc_3 - loc_4)))
		loc_3 = (loc_2 * loc_7)
		loc_2 = (reg_1 + ((loc_2 * loc_3) * ((loc_3 * ((loc_3 * ((loc_2 * rt_load_f64(memory_at_0, 40000)) + rt_load_f64(memory_at_0, 39992))) + ((loc_2 * rt_load_f64(memory_at_0, 39984)) + rt_load_f64(memory_at_0, 39976)))) + ((loc_2 * rt_load_f64(memory_at_0, 39968)) + rt_load_f64(memory_at_0, 39960)))))
		reg_1 = loc_2
		loc_2 = (loc_4 + loc_2)
		rt_store_f64(memory_at_0, loc_1, (reg_1 + (loc_4 - loc_2)))
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[541] = --[[ exp_inline ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[523](loc_0)
			loc_4 = bit_and(reg_0, 2047)
			reg_1 = FUNC_LIST[523](5.551115123125783e-17)
			loc_3 = reg_1
			reg_1 = FUNC_LIST[523](5.12e2)
			if rt_sub_i32(loc_4, loc_3) < rt_sub_i32(reg_1, loc_3) then
				break
			end
			if loc_3 > loc_4 then
				while true do
					loc_0 = (loc_0 + 1e0)
					reg_0 = (if loc_2 ~= 0 then rt_neg_f64(loc_0) else loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[523](1.024e3)
			loc_3 = (if reg_0 > loc_4 then 1 else 0)
			loc_4 = 0
			if loc_3 ~= 0 then
				break
			end
			if rt_lt_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_ZERO) then
				while true do
					reg_0 = FUNC_LIST[520](loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[521](loc_2)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = rt_load_f64(memory_at_0, 31352)
		loc_6 = ((loc_0 * rt_load_f64(memory_at_0, 31344)) + loc_5)
		loc_5 = (loc_6 - loc_5)
		loc_0 = (loc_1 + ((loc_5 * rt_load_f64(memory_at_0, 31368)) + ((loc_5 * rt_load_f64(memory_at_0, 31360)) + loc_0)))
		loc_1 = (loc_0 * loc_0)
		loc_7 = rt_reinterpret_i64_f64(loc_6)
		loc_3 = bit_and(rt_shl_i32(rt_wrap_i32_i64(loc_7), 4), 2032)
		loc_0 = (((loc_1 * loc_1) * ((loc_0 * rt_load_f64(memory_at_0, 31400)) + rt_load_f64(memory_at_0, 31392))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 31384)) + rt_load_f64(memory_at_0, 31376))) + (rt_load_f64(memory_at_0, rt_add_i32(loc_3, 31456)) + loc_0)))
		loc_8 = rt_add_i64(rt_load_i64(memory_at_0, rt_add_i32(loc_3, 31464)), rt_shl_i64(rt_add_i64(rt_extend_i64_u32(loc_2), loc_7), rt_i64_from_u32(45, 0)))
		if loc_4 == 0 then
			while true do
				reg_0 = FUNC_LIST[542](loc_0, loc_8, loc_7)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = rt_reinterpret_f64_i64(loc_8)
		reg_0 = ((loc_1 * loc_0) + loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[542] = --[[ specialcase_740 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local reg_0
	local desired
	while true do
		if rt_eq_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(2147483648, 0)), rt_i64_ZERO) then
			while true do
				loc_3 = rt_reinterpret_f64_i64(rt_sub_i64(loc_1, rt_i64_from_u32(0, 1058013184)))
				reg_0 = (((loc_3 * loc_0) + loc_3) * 5.486124068793689e303)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = rt_add_i64(loc_1, rt_i64_from_u32(0, 1071644672))
		loc_3 = rt_reinterpret_f64_i64(loc_2)
		loc_5 = (loc_3 * loc_0)
		loc_0 = (loc_5 + loc_3)
		reg_0 = FUNC_LIST[589](loc_0)
		if reg_0 < 1e0 then
			while true do
				reg_0 = FUNC_LIST[531](2.2250738585072014e-308)
				FUNC_LIST[526]((reg_0 * 2.2250738585072014e-308))
				loc_4 = (if loc_0 < 0e0 then -1e0 else 1e0)
				loc_6 = (loc_0 + loc_4)
				loc_0 = ((loc_6 + ((loc_5 + (loc_3 - loc_0)) + (loc_0 + (loc_4 - loc_6)))) - loc_4)
				reg_0 = (if loc_0 == 0e0 then rt_reinterpret_f64_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(0, 2147483648))) else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = (loc_0 * 2.2250738585072014e-308)
		break
	end
	return reg_0
end
FUNC_LIST[543] = --[[ scalbn ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_ge_i32(loc_1, 1024) then
				while true do
					loc_0 = (loc_0 * 8.98846567431158e307)
					if loc_1 < 2047 then
						while true do
							loc_1 = rt_sub_i32(loc_1, 1023)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_0 = (loc_0 * 8.98846567431158e307)
					loc_1 = rt_sub_i32((if loc_1 >= 3069 then 3069 else loc_1), 2046)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_gt_i32(loc_1, 4294966273) then
				break
			end
			loc_0 = (loc_0 * 2.004168360008973e-292)
			if loc_1 > 4294965304 then
				while true do
					loc_1 = rt_add_i32(loc_1, 969)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = (loc_0 * 2.004168360008973e-292)
			loc_1 = rt_add_i32((if loc_1 <= 4294964336 then 4294964336 else loc_1), 1938)
			break
		end
		reg_0 = (loc_0 * rt_reinterpret_f64_i64(rt_shl_i64(rt_extend_i64_u32(rt_add_i32(loc_1, 1023)), rt_i64_from_u32(52, 0))))
		break
	end
	return reg_0
end
FUNC_LIST[544] = --[[ strlen ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_1 = loc_0
				if bit_and(loc_1, 3) == 0 then
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_1) == 0 then
					while true do
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_1 = rt_add_i32(loc_1, 1)
					if bit_and(loc_1, 3) == 0 then
						desired = 2
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_1) ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_2 = loc_1
				loc_1 = rt_add_i32(loc_2, 4)
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				if bit_and(bit_or(rt_sub_i32(16843008, loc_3), loc_3), 2155905152) == 2155905152 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_1 = loc_2
				loc_2 = rt_add_i32(loc_1, 1)
				if rt_load_i32_u8(memory_at_0, loc_1) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = rt_sub_i32(loc_1, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[545] = --[[ __lockfile ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[546] = --[[ __unlockfile ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[547] = --[[ __fpclassifyl ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 65535))
		while true do
			loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_1, rt_i64_from_u32(48, 0))), 32767)
			if loc_3 ~= 32767 then
				while true do
					reg_0 = 4
					if loc_3 ~= 0 then
						desired = 1
						break
					end
					reg_0 = (if rt_eq_i64(rt_bit_or_i64(loc_0, loc_2), rt_i64_ZERO) then 2 else 3)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (if rt_eq_i64(rt_bit_or_i64(loc_0, loc_2), rt_i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[548] = --[[ fmodl ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					reg_0 = FUNC_LIST[556](loc_3, loc_4, rt_i64_ZERO, rt_i64_ZERO)
					if reg_0 == 0 then
						break
					end
					reg_0 = FUNC_LIST[547](loc_3, loc_4)
					if reg_0 == 0 then
						break
					end
					loc_8 = rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(48, 0)))
					loc_6 = bit_and(loc_8, 32767)
					if loc_6 ~= 32767 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[561](rt_add_i32(loc_5, 16), loc_1, loc_2, loc_3, loc_4)
				loc_4 = rt_load_i64(memory_at_0, loc_5 + 16)
				loc_3 = rt_load_i64(memory_at_0, loc_5 + 24)
				FUNC_LIST[559](loc_5, loc_4, loc_3, loc_4, loc_3)
				loc_2 = rt_load_i64(memory_at_0, loc_5 + 8)
				loc_4 = rt_load_i64(memory_at_0, loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
			loc_9 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
			reg_0 = FUNC_LIST[556](loc_1, loc_10, loc_3, loc_9)
			if rt_le_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[556](loc_1, loc_10, loc_3, loc_9)
					if reg_0 ~= 0 then
						while true do
							loc_4 = loc_1
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[561](rt_add_i32(loc_5, 112), loc_1, loc_2, rt_i64_ZERO, rt_i64_ZERO)
					loc_2 = rt_load_i64(memory_at_0, loc_5 + 120)
					loc_4 = rt_load_i64(memory_at_0, loc_5 + 112)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32767)
			if loc_6 ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[561](rt_add_i32(loc_5, 96), loc_1, loc_10, rt_i64_ZERO, rt_i64_from_u32(0, 1081540608))
					loc_10 = rt_load_i64(memory_at_0, loc_5 + 104)
					loc_6 = rt_sub_i32(rt_wrap_i32_i64(rt_shr_u64(loc_10, rt_i64_from_u32(48, 0))), 120)
					reg_0 = rt_load_i64(memory_at_0, loc_5 + 96)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = reg_0
			if loc_7 ~= 0 then
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[561](rt_add_i32(loc_5, 80), loc_3, loc_9, rt_i64_ZERO, rt_i64_from_u32(0, 1081540608))
					loc_9 = rt_load_i64(memory_at_0, loc_5 + 88)
					loc_7 = rt_sub_i32(rt_wrap_i32_i64(rt_shr_u64(loc_9, rt_i64_from_u32(48, 0))), 120)
					reg_0 = rt_load_i64(memory_at_0, loc_5 + 80)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			loc_11 = rt_bit_or_i64(rt_bit_and_i64(loc_9, rt_i64_from_u32(4294967295, 65535)), rt_i64_from_u32(0, 65536))
			loc_10 = rt_bit_or_i64(rt_bit_and_i64(loc_10, rt_i64_from_u32(4294967295, 65535)), rt_i64_from_u32(0, 65536))
			if rt_gt_i32(loc_6, loc_7) then
				while true do
					while true do
						while true do
							loc_9 = rt_sub_i64(rt_sub_i64(loc_10, loc_11), rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_4) then 1 else 0)))
							if rt_ge_i64(loc_9, rt_i64_ZERO) then
								while true do
									loc_4 = rt_sub_i64(loc_4, loc_3)
									if rt_eq_i64(rt_bit_or_i64(loc_4, loc_9), rt_i64_ZERO) then
										while true do
											FUNC_LIST[561](rt_add_i32(loc_5, 32), loc_1, loc_2, rt_i64_ZERO, rt_i64_ZERO)
											loc_2 = rt_load_i64(memory_at_0, loc_5 + 40)
											loc_4 = rt_load_i64(memory_at_0, loc_5 + 32)
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									reg_0 = rt_bit_or_i64(rt_shl_i64(loc_9, rt_i64_ONE), rt_shr_u64(loc_4, rt_i64_from_u32(63, 0)))
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_bit_or_i64(rt_shl_i64(loc_10, rt_i64_ONE), rt_shr_u64(loc_4, rt_i64_from_u32(63, 0)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_10 = reg_0
						loc_4 = rt_shl_i64(loc_4, rt_i64_ONE)
						loc_6 = rt_sub_i32(loc_6, 1)
						if rt_lt_i32(loc_7, loc_6) then
							continue
						end
						break
					end
					if desired then
						break
					end
					reg_0 = loc_7
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_6
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = reg_0
			while true do
				loc_9 = rt_sub_i64(rt_sub_i64(loc_10, loc_11), rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_4) then 1 else 0)))
				if rt_lt_i64(loc_9, rt_i64_ZERO) then
					while true do
						loc_9 = loc_10
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_sub_i64(loc_4, loc_3)
				if rt_ne_i64(rt_bit_or_i64(loc_4, loc_9), rt_i64_ZERO) then
					break
				end
				FUNC_LIST[561](rt_add_i32(loc_5, 48), loc_1, loc_2, rt_i64_ZERO, rt_i64_ZERO)
				loc_2 = rt_load_i64(memory_at_0, loc_5 + 56)
				loc_4 = rt_load_i64(memory_at_0, loc_5 + 48)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_le_u64(loc_9, rt_i64_from_u32(4294967295, 65535)) then
				while true do
					while true do
						loc_3 = rt_shr_u64(loc_4, rt_i64_from_u32(63, 0))
						loc_6 = rt_sub_i32(loc_6, 1)
						loc_4 = rt_shl_i64(loc_4, rt_i64_ONE)
						loc_9 = rt_bit_or_i64(rt_shl_i64(loc_9, rt_i64_ONE), loc_3)
						if rt_lt_u64(loc_9, rt_i64_from_u32(0, 65536)) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = bit_and(loc_8, 32768)
			if rt_le_i32(loc_6, 0) then
				while true do
					FUNC_LIST[561](rt_sub_i32(loc_5, 4294967232), loc_4, rt_bit_or_i64(rt_bit_and_i64(loc_9, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(bit_or(loc_7, rt_add_i32(loc_6, 120))), rt_i64_from_u32(48, 0))), rt_i64_ZERO, rt_i64_from_u32(0, 1065811968))
					loc_2 = rt_load_i64(memory_at_0, loc_5 + 72)
					loc_4 = rt_load_i64(memory_at_0, loc_5 + 64)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_bit_or_i64(rt_bit_and_i64(loc_9, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(bit_or(loc_6, loc_7)), rt_i64_from_u32(48, 0)))
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_4)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 128)
		break
	end
end
FUNC_LIST[549] = --[[ __towrite ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
		rt_store_i32(memory_at_0, loc_0 + 72, bit_or(rt_sub_i32(loc_1, 1), loc_1))
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		if bit_and(loc_1, 8) ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0, bit_or(loc_1, 32))
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_ZERO)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 44)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 48), loc_1))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[550] = --[[ __fwritex ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
			reg_0 = loc_1
			if loc_3 ~= 0 then
				while true do
					reg_1 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = FUNC_LIST[549](loc_2)
					if reg_1 ~= 0 then
						desired = 1
						break
					end
					reg_1 = rt_load_i32(memory_at_0, loc_2 + 16)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_1
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 20)
			if reg_0 > rt_sub_i32(loc_3, loc_4) then
				while true do
					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_2 + 36)](loc_2, loc_0, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 80), 0) then
						break
					end
					if loc_1 == 0 then
						break
					end
					loc_3 = loc_1
					while true do
						loc_5 = rt_add_i32(loc_0, loc_3)
						if rt_load_i32_u8(memory_at_0, rt_sub_i32(loc_5, 1)) ~= 10 then
							while true do
								loc_3 = rt_sub_i32(loc_3, 1)
								if loc_3 ~= 0 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_2 + 36)](loc_2, loc_0, loc_3)
					loc_4 = reg_1
					if loc_3 > loc_4 then
						desired = 1
						break
					end
					loc_1 = rt_sub_i32(loc_1, loc_3)
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 20)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_0
				loc_3 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[517](loc_4, loc_5, loc_1)
			rt_store_i32(memory_at_0, loc_2 + 20, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_2 + 20)))
			loc_4 = rt_add_i32(loc_1, loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[551] = --[[ emscripten_get_heap_size ]] function()
	local reg_0
	while true do
		reg_0 = rt_shl_i32(rt_allocator_size(memory_at_0), 16)
		break
	end
	return reg_0
end
FUNC_LIST[552] = --[[ sbrk ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, 48472)
		loc_2 = bit_and(rt_add_i32(loc_0, 7), 4294967288)
		loc_0 = rt_add_i32(loc_1, loc_2)
		while true do
			if (if loc_0 <= loc_1 then loc_2 else 0) == 0 then
				while true do
					reg_0 = FUNC_LIST[551]()
					if reg_0 >= loc_0 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[2](loc_0)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[516]()
			rt_store_i32(memory_at_0, reg_0, 48)
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, 48472, loc_0)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[553] = --[[ emscripten_builtin_malloc ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_10
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												if loc_0 <= 244 then
													while true do
														loc_6 = rt_load_i32(memory_at_0, 49120)
														loc_5 = (if loc_0 < 11 then 16 else bit_and(rt_add_i32(loc_0, 11), 504))
														loc_1 = rt_shr_u32(loc_5, 3)
														loc_0 = rt_shr_u32(loc_6, loc_1)
														if bit_and(loc_0, 3) ~= 0 then
															while true do
																while true do
																	loc_5 = rt_add_i32(loc_1, bit_and(bit_xor(loc_0, 4294967295), 1))
																	loc_1 = rt_shl_i32(loc_5, 3)
																	loc_0 = rt_add_i32(loc_1, 49160)
																	loc_1 = rt_load_i32(memory_at_0, rt_add_i32(loc_1, 49168))
																	loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
																	if loc_0 == loc_2 then
																		while true do
																			rt_store_i32(memory_at_0, 49120, bit_and(rt_rotl_i32(4294967294, loc_5), loc_6))
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i32(memory_at_0, loc_2 + 12, loc_0)
																	rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
																	break
																end
																if desired then
																	break
																end
																loc_0 = rt_add_i32(loc_1, 8)
																loc_5 = rt_shl_i32(loc_5, 3)
																rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_5, 3))
																loc_1 = rt_add_i32(loc_1, loc_5)
																rt_store_i32(memory_at_0, loc_1 + 4, bit_or(rt_load_i32(memory_at_0, loc_1 + 4), 1))
																desired = 1
																break
															end
															if desired then
																break
															end
														end
														loc_7 = rt_load_i32(memory_at_0, 49128)
														if loc_7 >= loc_5 then
															desired = 10
															break
														end
														if loc_0 ~= 0 then
															while true do
																while true do
																	reg_0 = rt_shl_i32(loc_0, loc_1)
																	loc_0 = rt_shl_i32(2, loc_1)
																	loc_1 = bit_countrz(bit_and(reg_0, bit_or(loc_0, rt_sub_i32(0, loc_0))))
																	loc_0 = rt_shl_i32(loc_1, 3)
																	loc_2 = rt_add_i32(loc_0, 49160)
																	loc_0 = rt_load_i32(memory_at_0, rt_add_i32(loc_0, 49168))
																	loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
																	if loc_2 == loc_3 then
																		while true do
																			loc_6 = bit_and(rt_rotl_i32(4294967294, loc_1), loc_6)
																			rt_store_i32(memory_at_0, 49120, loc_6)
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
																	rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
																	break
																end
																if desired then
																	break
																end
																rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_5, 3))
																loc_3 = rt_add_i32(loc_0, loc_5)
																loc_1 = rt_shl_i32(loc_1, 3)
																loc_5 = rt_sub_i32(loc_1, loc_5)
																rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_5, 1))
																rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_1), loc_5)
																if loc_7 ~= 0 then
																	while true do
																		loc_2 = rt_add_i32(bit_and(loc_7, 4294967288), 49160)
																		loc_1 = rt_load_i32(memory_at_0, 49140)
																		while true do
																			loc_4 = rt_shl_i32(1, rt_shr_u32(loc_7, 3))
																			if bit_and(loc_4, loc_6) == 0 then
																				while true do
																					rt_store_i32(memory_at_0, 49120, bit_or(loc_4, loc_6))
																					reg_0 = loc_2
																					desired = 14
																					break
																				end
																				if desired then
																					if desired == 14 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_0 = rt_load_i32(memory_at_0, loc_2 + 8)
																			break
																		end
																		if desired then
																			break
																		end
																		loc_4 = reg_0
																		rt_store_i32(memory_at_0, loc_2 + 8, loc_1)
																		rt_store_i32(memory_at_0, loc_4 + 12, loc_1)
																		rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
																		rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
																		break
																	end
																	if desired then
																		break
																	end
																end
																loc_0 = rt_add_i32(loc_0, 8)
																rt_store_i32(memory_at_0, 49140, loc_3)
																rt_store_i32(memory_at_0, 49128, loc_5)
																desired = 1
																break
															end
															if desired then
																break
															end
														end
														loc_11 = rt_load_i32(memory_at_0, 49124)
														if loc_11 == 0 then
															desired = 10
															break
														end
														loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_countrz(loc_11), 2), 49424))
														loc_1 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_3 + 4), 4294967288), loc_5)
														loc_2 = loc_3
														while true do
															while true do
																loc_0 = rt_load_i32(memory_at_0, loc_2 + 16)
																if loc_0 == 0 then
																	while true do
																		loc_0 = rt_load_i32(memory_at_0, loc_2 + 20)
																		if loc_0 == 0 then
																			desired = 13
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_2 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_0 + 4), 4294967288), loc_5)
																reg_0 = loc_2
																loc_2 = (if loc_1 > loc_2 then 1 else 0)
																loc_1 = (if loc_2 ~= 0 then reg_0 else loc_1)
																loc_3 = (if loc_2 ~= 0 then loc_0 else loc_3)
																loc_2 = loc_0
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															break
														end
														if desired then
															break
														end
														loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
														loc_0 = rt_load_i32(memory_at_0, loc_3 + 12)
														if loc_0 ~= loc_3 then
															while true do
																loc_2 = rt_load_i32(memory_at_0, loc_3 + 8)
																rt_store_i32(memory_at_0, loc_2 + 12, loc_0)
																rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
														if loc_2 ~= 0 then
															while true do
																reg_0 = rt_add_i32(loc_3, 20)
																break
															end
															if desired then
																break
															end
														else
															while true do
																loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
																if loc_2 == 0 then
																	desired = 9
																	break
																end
																reg_0 = rt_add_i32(loc_3, 16)
																break
															end
															if desired then
																break
															end
														end
														loc_4 = reg_0
														while true do
															loc_9 = loc_4
															loc_0 = loc_2
															loc_4 = rt_add_i32(loc_0, 20)
															loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
															if loc_2 ~= 0 then
																continue
															end
															loc_4 = rt_add_i32(loc_0, 16)
															loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
															if loc_2 ~= 0 then
																continue
															end
															break
														end
														if desired then
															break
														end
														rt_store_i32(memory_at_0, loc_9, 0)
														desired = 2
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_5 = 4294967295
												if loc_0 > 4294967231 then
													break
												end
												loc_1 = rt_add_i32(loc_0, 11)
												loc_5 = bit_and(loc_1, 4294967288)
												loc_8 = rt_load_i32(memory_at_0, 49124)
												if loc_8 == 0 then
													break
												end
												loc_7 = 31
												if loc_0 <= 16777204 then
													while true do
														loc_0 = bit_countlz(rt_shr_u32(loc_1, 8))
														reg_0 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_5, rt_sub_i32(38, loc_0)), 1), rt_shl_i32(loc_0, 1)), 62)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = loc_7
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_7 = reg_0
												loc_1 = rt_sub_i32(0, loc_5)
												while true do
													while true do
														while true do
															loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 2), 49424))
															if loc_2 == 0 then
																while true do
																	loc_0 = 0
																	desired = 13
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_0 = 0
															loc_3 = rt_shl_i32(loc_5, (if loc_7 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_7, 1)) else 0))
															while true do
																while true do
																	loc_6 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_2 + 4), 4294967288), loc_5)
																	if loc_1 <= loc_6 then
																		break
																	end
																	loc_4 = loc_2
																	loc_1 = loc_6
																	if loc_1 ~= 0 then
																		break
																	end
																	loc_1 = 0
																	loc_0 = loc_2
																	desired = 12
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																		continue
																	end
																	break
																end
																loc_6 = rt_load_i32(memory_at_0, loc_2 + 20)
																loc_9 = rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_3, 29), 4), loc_2) + 16)
																loc_0 = (if loc_6 ~= 0 then (if loc_9 == loc_6 then loc_0 else loc_6) else loc_0)
																loc_3 = rt_shl_i32(loc_3, 1)
																loc_2 = loc_9
																if loc_2 ~= 0 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if bit_or(loc_0, loc_4) ~= 0 then
															while true do
																reg_0 = loc_0
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																loc_4 = 0
																loc_0 = rt_shl_i32(2, loc_7)
																loc_0 = bit_and(loc_8, bit_or(loc_0, rt_sub_i32(0, loc_0)))
																if loc_0 == 0 then
																	desired = 10
																	break
																end
																reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_countrz(loc_0), 2), 49424))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_0 = reg_0
														if loc_0 == 0 then
															desired = 11
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													while true do
														loc_6 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_0 + 4), 4294967288), loc_5)
														loc_3 = (if loc_1 > loc_6 then 1 else 0)
														loc_1 = (if loc_3 ~= 0 then loc_6 else loc_1)
														loc_4 = (if loc_3 ~= 0 then loc_0 else loc_4)
														loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
														if loc_2 ~= 0 then
															while true do
																reg_0 = loc_2
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														else
															while true do
																reg_0 = rt_load_i32(memory_at_0, loc_0 + 20)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														loc_2 = reg_0
														loc_0 = loc_2
														if loc_0 ~= 0 then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_4 == 0 then
													break
												end
												if rt_sub_i32(rt_load_i32(memory_at_0, 49128), loc_5) <= loc_1 then
													break
												end
												loc_9 = rt_load_i32(memory_at_0, loc_4 + 24)
												loc_0 = rt_load_i32(memory_at_0, loc_4 + 12)
												if loc_0 ~= loc_4 then
													while true do
														loc_2 = rt_load_i32(memory_at_0, loc_4 + 8)
														rt_store_i32(memory_at_0, loc_2 + 12, loc_0)
														rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
														desired = 3
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
												if loc_2 ~= 0 then
													while true do
														reg_0 = rt_add_i32(loc_4, 20)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
														if loc_2 == 0 then
															desired = 8
															break
														end
														reg_0 = rt_add_i32(loc_4, 16)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_3 = reg_0
												while true do
													loc_6 = loc_3
													loc_0 = loc_2
													loc_3 = rt_add_i32(loc_0, 20)
													loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
													if loc_2 ~= 0 then
														continue
													end
													loc_3 = rt_add_i32(loc_0, 16)
													loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
													if loc_2 ~= 0 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												rt_store_i32(memory_at_0, loc_6, 0)
												desired = 3
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_0 = rt_load_i32(memory_at_0, 49128)
											if loc_0 >= loc_5 then
												while true do
													loc_1 = rt_load_i32(memory_at_0, 49140)
													while true do
														loc_2 = rt_sub_i32(loc_0, loc_5)
														if loc_2 >= 16 then
															while true do
																loc_3 = rt_add_i32(loc_1, loc_5)
																rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_2, 1))
																rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_1), loc_2)
																rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_5, 3))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_0, 3))
														loc_0 = rt_add_i32(loc_0, loc_1)
														rt_store_i32(memory_at_0, loc_0 + 4, bit_or(rt_load_i32(memory_at_0, loc_0 + 4), 1))
														loc_3 = 0
														loc_2 = 0
														break
													end
													if desired then
														break
													end
													rt_store_i32(memory_at_0, 49128, loc_2)
													rt_store_i32(memory_at_0, 49140, loc_3)
													loc_0 = rt_add_i32(loc_1, 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_3 = rt_load_i32(memory_at_0, 49132)
											if loc_3 > loc_5 then
												while true do
													loc_1 = rt_sub_i32(loc_3, loc_5)
													rt_store_i32(memory_at_0, 49132, loc_1)
													loc_0 = rt_load_i32(memory_at_0, 49144)
													loc_2 = rt_add_i32(loc_5, loc_0)
													rt_store_i32(memory_at_0, 49144, loc_2)
													rt_store_i32(memory_at_0, loc_2 + 4, bit_or(loc_1, 1))
													rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_5, 3))
													loc_0 = rt_add_i32(loc_0, 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_0 = 0
											loc_7 = rt_add_i32(loc_5, 47)
											reg_0 = loc_5
											reg_1 = loc_7
											while true do
												if rt_load_i32(memory_at_0, 49592) ~= 0 then
													while true do
														reg_2 = rt_load_i32(memory_at_0, 49600)
														desired = 10
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												rt_store_i64(memory_at_0, 49604, rt_i64_from_u32(4294967295, 4294967295))
												rt_store_i64(memory_at_0, 49596, rt_i64_from_u32(4096, 4096))
												rt_store_i32(memory_at_0, 49592, bit_xor(bit_and(rt_add_i32(loc_10, 12), 4294967280), 1431655768))
												rt_store_i32(memory_at_0, 49612, 0)
												rt_store_i32(memory_at_0, 49564, 0)
												reg_2 = 4096
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_1 = reg_2
											loc_6 = rt_add_i32(reg_1, loc_1)
											loc_9 = rt_sub_i32(0, loc_1)
											loc_4 = bit_and(loc_6, loc_9)
											if reg_0 >= loc_4 then
												desired = 1
												break
											end
											loc_1 = rt_load_i32(memory_at_0, 49560)
											if loc_1 ~= 0 then
												while true do
													loc_2 = rt_load_i32(memory_at_0, 49552)
													loc_8 = rt_add_i32(loc_4, loc_2)
													if loc_8 <= loc_2 then
														desired = 1
														break
													end
													if loc_1 < loc_8 then
														desired = 1
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											while true do
												if bit_and(rt_load_i32_u8(memory_at_0, 49564), 4) == 0 then
													while true do
														while true do
															while true do
																while true do
																	while true do
																		loc_1 = rt_load_i32(memory_at_0, 49144)
																		if loc_1 ~= 0 then
																			while true do
																				loc_0 = 49568
																				while true do
																					loc_2 = rt_load_i32(memory_at_0, loc_0)
																					if loc_1 >= loc_2 then
																						while true do
																							if rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2) > loc_1 then
																								desired = 15
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 17 then
																								desired = nil
																								continue
																							end
																							break
																						end
																					end
																					loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
																					if loc_0 ~= 0 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_0 = FUNC_LIST[552](0)
																		loc_3 = reg_0
																		if loc_3 == 4294967295 then
																			desired = 12
																			break
																		end
																		loc_6 = loc_4
																		loc_0 = rt_load_i32(memory_at_0, 49596)
																		loc_1 = rt_sub_i32(loc_0, 1)
																		if bit_and(loc_3, loc_1) ~= 0 then
																			while true do
																				reg_0 = rt_add_i32(rt_sub_i32(loc_4, loc_3), bit_and(rt_add_i32(loc_1, loc_3), rt_sub_i32(0, loc_0)))
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		else
																			while true do
																				reg_0 = loc_6
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_6 = reg_0
																		if loc_6 <= loc_5 then
																			desired = 12
																			break
																		end
																		loc_0 = rt_load_i32(memory_at_0, 49560)
																		if loc_0 ~= 0 then
																			while true do
																				loc_1 = rt_load_i32(memory_at_0, 49552)
																				loc_2 = rt_add_i32(loc_6, loc_1)
																				if loc_2 <= loc_1 then
																					desired = 12
																					break
																				end
																				if loc_0 < loc_2 then
																					desired = 12
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_1 = FUNC_LIST[552](loc_6)
																		loc_0 = reg_1
																		if loc_3 ~= loc_0 then
																			desired = 14
																			break
																		end
																		desired = 10
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_6 = bit_and(loc_9, rt_sub_i32(loc_6, loc_3))
																	reg_0 = FUNC_LIST[552](loc_6)
																	loc_3 = reg_0
																	if loc_3 == rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_0 + 4)) then
																		desired = 13
																		break
																	end
																	loc_0 = loc_3
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if loc_0 == 4294967295 then
																	desired = 12
																	break
																end
																if loc_6 >= rt_add_i32(loc_5, 48) then
																	while true do
																		loc_3 = loc_0
																		desired = 10
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_1 = rt_load_i32(memory_at_0, 49600)
																loc_1 = bit_and(rt_add_i32(loc_1, rt_sub_i32(loc_7, loc_6)), rt_sub_i32(0, loc_1))
																reg_0 = FUNC_LIST[552](loc_1)
																if reg_0 == 4294967295 then
																	desired = 12
																	break
																end
																loc_6 = rt_add_i32(loc_1, loc_6)
																loc_3 = loc_0
																desired = 10
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															if loc_3 ~= 4294967295 then
																desired = 10
																break
															end
															break
														end
														if desired then
															break
														end
														rt_store_i32(memory_at_0, 49564, bit_or(rt_load_i32(memory_at_0, 49564), 4))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												reg_0 = FUNC_LIST[552](loc_4)
												loc_3 = reg_0
												reg_0 = FUNC_LIST[552](0)
												loc_0 = reg_0
												if loc_3 == 4294967295 then
													desired = 5
													break
												end
												if loc_0 == 4294967295 then
													desired = 5
													break
												end
												if loc_0 <= loc_3 then
													desired = 5
													break
												end
												loc_6 = rt_sub_i32(loc_0, loc_3)
												if loc_6 <= rt_add_i32(loc_5, 40) then
													desired = 5
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_0 = rt_add_i32(loc_6, rt_load_i32(memory_at_0, 49552))
											rt_store_i32(memory_at_0, 49552, loc_0)
											if loc_0 > rt_load_i32(memory_at_0, 49556) then
												while true do
													rt_store_i32(memory_at_0, 49556, loc_0)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											while true do
												loc_1 = rt_load_i32(memory_at_0, 49144)
												if loc_1 ~= 0 then
													while true do
														loc_0 = 49568
														while true do
															loc_2 = rt_load_i32(memory_at_0, loc_0)
															loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
															if rt_add_i32(loc_2, loc_4) == loc_3 then
																desired = 10
																break
															end
															loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
															if loc_0 ~= 0 then
																continue
															end
															break
														end
														if desired then
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_0 = rt_load_i32(memory_at_0, 49136)
												if (if loc_0 <= loc_3 then loc_0 else 0) == 0 then
													while true do
														rt_store_i32(memory_at_0, 49136, loc_3)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_0 = 0
												rt_store_i32(memory_at_0, 49572, loc_6)
												rt_store_i32(memory_at_0, 49568, loc_3)
												rt_store_i32(memory_at_0, 49152, 4294967295)
												rt_store_i32(memory_at_0, 49156, rt_load_i32(memory_at_0, 49592))
												rt_store_i32(memory_at_0, 49580, 0)
												while true do
													loc_1 = rt_shl_i32(loc_0, 3)
													loc_2 = rt_add_i32(loc_1, 49160)
													rt_store_i32(memory_at_0, rt_add_i32(loc_1, 49168), loc_2)
													rt_store_i32(memory_at_0, rt_add_i32(loc_1, 49172), loc_2)
													loc_0 = rt_add_i32(loc_0, 1)
													if loc_0 ~= 32 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_0 = rt_sub_i32(loc_6, 40)
												loc_1 = bit_and(rt_sub_i32(4294967288, loc_3), 7)
												loc_2 = rt_sub_i32(loc_0, loc_1)
												rt_store_i32(memory_at_0, 49132, loc_2)
												loc_1 = rt_add_i32(loc_1, loc_3)
												rt_store_i32(memory_at_0, 49144, loc_1)
												rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_2, 1))
												rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3) + 4, 40)
												rt_store_i32(memory_at_0, 49148, rt_load_i32(memory_at_0, 49608))
												desired = 6
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_1 >= loc_3 then
												desired = 7
												break
											end
											if loc_1 < loc_2 then
												desired = 7
												break
											end
											if bit_and(rt_load_i32(memory_at_0, loc_0 + 12), 8) ~= 0 then
												desired = 7
												break
											end
											rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_4, loc_6))
											loc_0 = bit_and(rt_sub_i32(4294967288, loc_1), 7)
											loc_2 = rt_add_i32(loc_0, loc_1)
											rt_store_i32(memory_at_0, 49144, loc_2)
											loc_3 = rt_add_i32(loc_6, rt_load_i32(memory_at_0, 49132))
											loc_0 = rt_sub_i32(loc_3, loc_0)
											rt_store_i32(memory_at_0, 49132, loc_0)
											rt_store_i32(memory_at_0, loc_2 + 4, bit_or(loc_0, 1))
											rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3) + 4, 40)
											rt_store_i32(memory_at_0, 49148, rt_load_i32(memory_at_0, 49608))
											desired = 6
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_0 = 0
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_0 = 0
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_3 < rt_load_i32(memory_at_0, 49136) then
									while true do
										rt_store_i32(memory_at_0, 49136, loc_3)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_2 = rt_add_i32(loc_3, loc_6)
								loc_0 = 49568
								while true do
									while true do
										loc_4 = rt_load_i32(memory_at_0, loc_0)
										if loc_4 ~= loc_2 then
											while true do
												loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
												if loc_0 ~= 0 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 12), 8) == 0 then
										desired = 4
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_0 = 49568
								while true do
									while true do
										loc_2 = rt_load_i32(memory_at_0, loc_0)
										if loc_1 >= loc_2 then
											while true do
												loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2)
												if loc_2 > loc_1 then
													desired = 8
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_0 = rt_sub_i32(loc_6, 40)
								loc_4 = bit_and(rt_sub_i32(4294967288, loc_3), 7)
								loc_9 = rt_sub_i32(loc_0, loc_4)
								rt_store_i32(memory_at_0, 49132, loc_9)
								loc_4 = rt_add_i32(loc_3, loc_4)
								rt_store_i32(memory_at_0, 49144, loc_4)
								rt_store_i32(memory_at_0, loc_4 + 4, bit_or(loc_9, 1))
								rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3) + 4, 40)
								rt_store_i32(memory_at_0, 49148, rt_load_i32(memory_at_0, 49608))
								loc_0 = rt_sub_i32(rt_add_i32(bit_and(rt_sub_i32(39, loc_2), 7), loc_2), 47)
								loc_4 = (if rt_add_i32(loc_1, 16) > loc_0 then loc_1 else loc_0)
								rt_store_i32(memory_at_0, loc_4 + 4, 27)
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, 49576))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, 49568))
								rt_store_i32(memory_at_0, 49576, rt_add_i32(loc_4, 8))
								rt_store_i32(memory_at_0, 49572, loc_6)
								rt_store_i32(memory_at_0, 49568, loc_3)
								rt_store_i32(memory_at_0, 49580, 0)
								loc_0 = rt_add_i32(loc_4, 24)
								while true do
									rt_store_i32(memory_at_0, loc_0 + 4, 7)
									loc_3 = rt_add_i32(loc_0, 8)
									loc_0 = rt_add_i32(loc_0, 4)
									if loc_2 > loc_3 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_1 == loc_4 then
									break
								end
								rt_store_i32(memory_at_0, loc_4 + 4, bit_and(rt_load_i32(memory_at_0, loc_4 + 4), 4294967294))
								loc_3 = rt_sub_i32(loc_4, loc_1)
								rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_3, 1))
								rt_store_i32(memory_at_0, loc_4, loc_3)
								while true do
									if loc_3 <= 255 then
										while true do
											loc_0 = rt_add_i32(bit_and(loc_3, 4294967288), 49160)
											while true do
												loc_2 = rt_load_i32(memory_at_0, 49120)
												loc_3 = rt_shl_i32(1, rt_shr_u32(loc_3, 3))
												if bit_and(loc_2, loc_3) == 0 then
													while true do
														rt_store_i32(memory_at_0, 49120, bit_or(loc_2, loc_3))
														reg_0 = loc_0
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
												break
											end
											if desired then
												break
											end
											loc_2 = reg_0
											rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
											rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
											loc_4 = 8
											reg_0 = 12
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_0 = 31
									reg_0 = loc_1
									if loc_3 <= 16777215 then
										while true do
											loc_0 = bit_countlz(rt_shr_u32(loc_3, 8))
											reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_3, rt_sub_i32(38, loc_0)), 1), rt_shl_i32(loc_0, 1)), 62)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_1 = loc_0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_0 = reg_1
									rt_store_i32(memory_at_0, reg_0 + 28, loc_0)
									rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
									loc_2 = rt_add_i32(rt_shl_i32(loc_0, 2), 49424)
									while true do
										while true do
											loc_4 = rt_load_i32(memory_at_0, 49124)
											loc_6 = rt_shl_i32(1, loc_0)
											if bit_and(loc_4, loc_6) == 0 then
												while true do
													rt_store_i32(memory_at_0, 49124, bit_or(loc_4, loc_6))
													rt_store_i32(memory_at_0, loc_2, loc_1)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_0 = rt_shl_i32(loc_3, (if loc_0 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_0, 1)) else 0))
											loc_4 = rt_load_i32(memory_at_0, loc_2)
											while true do
												loc_2 = loc_4
												if loc_3 == bit_and(rt_load_i32(memory_at_0, loc_2 + 4), 4294967288) then
													desired = 8
													break
												end
												loc_4 = rt_shr_u32(loc_0, 29)
												loc_0 = rt_shl_i32(loc_0, 1)
												loc_12 = rt_add_i32(bit_and(loc_4, 4), loc_2)
												loc_6 = rt_add_i32(loc_12, 16)
												loc_4 = rt_load_i32(memory_at_0, loc_6)
												if loc_4 ~= 0 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											rt_store_i32(memory_at_0, loc_12 + 16, loc_1)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
										loc_4 = 12
										loc_2 = loc_1
										loc_0 = loc_1
										reg_0 = 8
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_0 = rt_load_i32(memory_at_0, loc_2 + 8)
									rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
									rt_store_i32(memory_at_0, loc_2 + 8, loc_1)
									rt_store_i32(memory_at_0, loc_1 + 8, loc_0)
									loc_0 = 0
									loc_4 = 12
									reg_0 = 24
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = reg_0
								rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_4), loc_2)
								rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3), loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_0 = rt_load_i32(memory_at_0, 49132)
							if loc_5 >= loc_0 then
								break
							end
							loc_1 = rt_sub_i32(loc_0, loc_5)
							rt_store_i32(memory_at_0, 49132, loc_1)
							loc_0 = rt_load_i32(memory_at_0, 49144)
							loc_2 = rt_add_i32(loc_5, loc_0)
							rt_store_i32(memory_at_0, 49144, loc_2)
							rt_store_i32(memory_at_0, loc_2 + 4, bit_or(loc_1, 1))
							rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_5, 3))
							loc_0 = rt_add_i32(loc_0, 8)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[516]()
						rt_store_i32(memory_at_0, reg_0, 48)
						loc_0 = 0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_6, rt_load_i32(memory_at_0, loc_0 + 4)))
					reg_0 = FUNC_LIST[554](loc_3, loc_4, loc_5)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_9 == 0 then
						break
					end
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_4 + 28)
						loc_2 = rt_add_i32(rt_shl_i32(loc_3, 2), 49424)
						if loc_4 == rt_load_i32(memory_at_0, loc_2) then
							while true do
								rt_store_i32(memory_at_0, loc_2, loc_0)
								if loc_0 ~= 0 then
									desired = 4
									break
								end
								loc_8 = bit_and(rt_rotl_i32(4294967294, loc_3), loc_8)
								rt_store_i32(memory_at_0, 49124, loc_8)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, rt_add_i32((if loc_4 == rt_load_i32(memory_at_0, loc_9 + 16) then 16 else 20), loc_9), loc_0)
						if loc_0 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 24, loc_9)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
					if loc_2 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 16, loc_2)
							rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
					if loc_2 == 0 then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
					rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_1 <= 15 then
						while true do
							loc_0 = rt_add_i32(loc_1, loc_5)
							rt_store_i32(memory_at_0, loc_4 + 4, bit_or(loc_0, 3))
							loc_0 = rt_add_i32(loc_0, loc_4)
							rt_store_i32(memory_at_0, loc_0 + 4, bit_or(rt_load_i32(memory_at_0, loc_0 + 4), 1))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_4 + 4, bit_or(loc_5, 3))
					loc_3 = rt_add_i32(loc_4, loc_5)
					rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_1, 1))
					rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3), loc_1)
					if loc_1 <= 255 then
						while true do
							loc_0 = rt_add_i32(bit_and(loc_1, 4294967288), 49160)
							while true do
								loc_5 = rt_load_i32(memory_at_0, 49120)
								loc_1 = rt_shl_i32(1, rt_shr_u32(loc_1, 3))
								if bit_and(loc_5, loc_1) == 0 then
									while true do
										rt_store_i32(memory_at_0, 49120, bit_or(loc_1, loc_5))
										reg_0 = loc_0
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
								break
							end
							if desired then
								break
							end
							loc_1 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
							rt_store_i32(memory_at_0, loc_1 + 12, loc_3)
							rt_store_i32(memory_at_0, loc_3 + 12, loc_0)
							rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = 31
					reg_0 = loc_3
					if loc_1 <= 16777215 then
						while true do
							loc_0 = bit_countlz(rt_shr_u32(loc_1, 8))
							reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_1, rt_sub_i32(38, loc_0)), 1), rt_shl_i32(loc_0, 1)), 62)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_1 = loc_0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = reg_1
					rt_store_i32(memory_at_0, reg_0 + 28, loc_0)
					rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
					loc_5 = rt_add_i32(rt_shl_i32(loc_0, 2), 49424)
					while true do
						while true do
							loc_2 = rt_shl_i32(1, loc_0)
							if bit_and(loc_2, loc_8) == 0 then
								while true do
									rt_store_i32(memory_at_0, 49124, bit_or(loc_2, loc_8))
									rt_store_i32(memory_at_0, loc_5, loc_3)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_0 = rt_shl_i32(loc_1, (if loc_0 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_0, 1)) else 0))
							loc_2 = rt_load_i32(memory_at_0, loc_5)
							while true do
								loc_5 = loc_2
								if loc_1 == bit_and(rt_load_i32(memory_at_0, loc_5 + 4), 4294967288) then
									desired = 4
									break
								end
								loc_2 = rt_shr_u32(loc_0, 29)
								loc_0 = rt_shl_i32(loc_0, 1)
								loc_13 = rt_add_i32(bit_and(loc_2, 4), loc_5)
								loc_6 = rt_add_i32(loc_13, 16)
								loc_2 = rt_load_i32(memory_at_0, loc_6)
								if loc_2 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_13 + 16, loc_3)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_3 + 24, loc_5)
						rt_store_i32(memory_at_0, loc_3 + 12, loc_3)
						rt_store_i32(memory_at_0, loc_3 + 8, loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_5 + 8)
					rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
					rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 24, 0)
					rt_store_i32(memory_at_0, loc_3 + 12, loc_5)
					rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = rt_add_i32(loc_4, 8)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_8 == 0 then
					break
				end
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
					loc_2 = rt_add_i32(rt_shl_i32(loc_4, 2), 49424)
					if loc_3 == rt_load_i32(memory_at_0, loc_2) then
						while true do
							rt_store_i32(memory_at_0, loc_2, loc_0)
							if loc_0 ~= 0 then
								desired = 3
								break
							end
							rt_store_i32(memory_at_0, 49124, bit_and(rt_rotl_i32(4294967294, loc_4), loc_11))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, rt_add_i32((if loc_3 == rt_load_i32(memory_at_0, loc_8 + 16) then 16 else 20), loc_8), loc_0)
					if loc_0 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 24, loc_8)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
				if loc_2 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_0 + 16, loc_2)
						rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
				if loc_2 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
				rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 <= 15 then
					while true do
						loc_0 = rt_add_i32(loc_1, loc_5)
						rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 3))
						loc_0 = rt_add_i32(loc_0, loc_3)
						rt_store_i32(memory_at_0, loc_0 + 4, bit_or(rt_load_i32(memory_at_0, loc_0 + 4), 1))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_5, 3))
				loc_5 = rt_add_i32(loc_3, loc_5)
				rt_store_i32(memory_at_0, loc_5 + 4, bit_or(loc_1, 1))
				rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_5), loc_1)
				if loc_7 ~= 0 then
					while true do
						loc_2 = rt_add_i32(bit_and(loc_7, 4294967288), 49160)
						loc_0 = rt_load_i32(memory_at_0, 49140)
						while true do
							loc_4 = rt_shl_i32(1, rt_shr_u32(loc_7, 3))
							if bit_and(loc_6, loc_4) == 0 then
								while true do
									rt_store_i32(memory_at_0, 49120, bit_or(loc_4, loc_6))
									reg_0 = loc_2
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_load_i32(memory_at_0, loc_2 + 8)
							break
						end
						if desired then
							break
						end
						loc_4 = reg_0
						rt_store_i32(memory_at_0, loc_2 + 8, loc_0)
						rt_store_i32(memory_at_0, loc_4 + 12, loc_0)
						rt_store_i32(memory_at_0, loc_0 + 12, loc_2)
						rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, 49140, loc_5)
				rt_store_i32(memory_at_0, 49128, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = rt_add_i32(loc_3, 8)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_10, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[554] = --[[ prepend_alloc ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_add_i32(bit_and(rt_sub_i32(4294967288, loc_0), 7), loc_0)
		rt_store_i32(memory_at_0, loc_7 + 4, bit_or(loc_2, 3))
		loc_4 = rt_add_i32(bit_and(rt_sub_i32(4294967288, loc_1), 7), loc_1)
		loc_3 = rt_add_i32(loc_2, loc_7)
		loc_0 = rt_sub_i32(loc_4, loc_3)
		while true do
			if loc_4 == rt_load_i32(memory_at_0, 49144) then
				while true do
					rt_store_i32(memory_at_0, 49144, loc_3)
					loc_2 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 49132))
					rt_store_i32(memory_at_0, 49132, loc_2)
					rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_2, 1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_4 == rt_load_i32(memory_at_0, 49140) then
				while true do
					rt_store_i32(memory_at_0, 49140, loc_3)
					loc_2 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 49128))
					rt_store_i32(memory_at_0, 49128, loc_2)
					rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_2, 1))
					rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_3), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
			if bit_and(loc_1, 3) == 1 then
				while true do
					loc_8 = bit_and(loc_1, 4294967288)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 12)
					while true do
						if loc_1 <= 255 then
							while true do
								loc_5 = rt_load_i32(memory_at_0, loc_4 + 8)
								if loc_2 == loc_5 then
									while true do
										rt_store_i32(memory_at_0, 49120, bit_and(rt_load_i32(memory_at_0, 49120), rt_rotl_i32(4294967294, rt_shr_u32(loc_1, 3))))
										desired = 3
										break
									end
									if desired then
										break
									end
								end
								rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
								rt_store_i32(memory_at_0, loc_2 + 8, loc_5)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_load_i32(memory_at_0, loc_4 + 24)
						while true do
							if loc_2 ~= loc_4 then
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_4 + 8)
									rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
									rt_store_i32(memory_at_0, loc_2 + 8, loc_1)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							while true do
								loc_1 = rt_load_i32(memory_at_0, loc_4 + 20)
								if loc_1 ~= 0 then
									while true do
										reg_0 = rt_add_i32(loc_4, 20)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										loc_1 = rt_load_i32(memory_at_0, loc_4 + 16)
										if loc_1 == 0 then
											desired = 5
											break
										end
										reg_0 = rt_add_i32(loc_4, 16)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_5 = reg_0
								while true do
									loc_9 = loc_5
									loc_2 = loc_1
									loc_5 = rt_add_i32(loc_2, 20)
									loc_1 = rt_load_i32(memory_at_0, loc_2 + 20)
									if loc_1 ~= 0 then
										continue
									end
									loc_5 = rt_add_i32(loc_2, 16)
									loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
									if loc_1 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_9, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_2 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_6 == 0 then
							break
						end
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_4 + 28)
							loc_1 = rt_add_i32(rt_shl_i32(loc_5, 2), 49424)
							if loc_4 == rt_load_i32(memory_at_0, loc_1) then
								while true do
									rt_store_i32(memory_at_0, loc_1, loc_2)
									if loc_2 ~= 0 then
										desired = 4
										break
									end
									rt_store_i32(memory_at_0, 49124, bit_and(rt_load_i32(memory_at_0, 49124), rt_rotl_i32(4294967294, loc_5)))
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, rt_add_i32((if loc_4 == rt_load_i32(memory_at_0, loc_6 + 16) then 16 else 20), loc_6), loc_2)
							if loc_2 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_2 + 24, loc_6)
						loc_1 = rt_load_i32(memory_at_0, loc_4 + 16)
						if loc_1 ~= 0 then
							while true do
								rt_store_i32(memory_at_0, loc_2 + 16, loc_1)
								rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_load_i32(memory_at_0, loc_4 + 20)
						if loc_1 == 0 then
							break
						end
						rt_store_i32(memory_at_0, loc_2 + 20, loc_1)
						rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
						break
					end
					if desired then
						break
					end
					loc_4 = rt_add_i32(loc_4, loc_8)
					loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
					reg_0 = rt_add_i32(loc_0, loc_8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = reg_0
			rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_1, 4294967294))
			rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
			rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
			if loc_0 <= 255 then
				while true do
					loc_2 = rt_add_i32(bit_and(loc_0, 4294967288), 49160)
					while true do
						loc_1 = rt_load_i32(memory_at_0, 49120)
						loc_0 = rt_shl_i32(1, rt_shr_u32(loc_0, 3))
						if bit_and(loc_1, loc_0) == 0 then
							while true do
								rt_store_i32(memory_at_0, 49120, bit_or(loc_0, loc_1))
								reg_0 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = rt_load_i32(memory_at_0, loc_2 + 8)
						break
					end
					if desired then
						break
					end
					loc_0 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
					rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = 31
			reg_0 = loc_3
			if loc_0 <= 16777215 then
				while true do
					loc_2 = bit_countlz(rt_shr_u32(loc_0, 8))
					reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_0, rt_sub_i32(38, loc_2)), 1), rt_shl_i32(loc_2, 1)), 62)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 28, loc_2)
			rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
			loc_1 = rt_add_i32(rt_shl_i32(loc_2, 2), 49424)
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, 49124)
					loc_4 = rt_shl_i32(1, loc_2)
					if bit_and(loc_5, loc_4) == 0 then
						while true do
							rt_store_i32(memory_at_0, 49124, bit_or(loc_4, loc_5))
							rt_store_i32(memory_at_0, loc_1, loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_shl_i32(loc_0, (if loc_2 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_2, 1)) else 0))
					loc_5 = rt_load_i32(memory_at_0, loc_1)
					while true do
						loc_1 = loc_5
						if loc_0 == bit_and(rt_load_i32(memory_at_0, loc_1 + 4), 4294967288) then
							desired = 2
							break
						end
						loc_5 = rt_shr_u32(loc_2, 29)
						loc_2 = rt_shl_i32(loc_2, 1)
						loc_10 = rt_add_i32(bit_and(loc_5, 4), loc_1)
						loc_4 = rt_add_i32(loc_10, 16)
						loc_5 = rt_load_i32(memory_at_0, loc_4)
						if loc_5 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_10 + 16, loc_3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 24, loc_1)
				rt_store_i32(memory_at_0, loc_3 + 12, loc_3)
				rt_store_i32(memory_at_0, loc_3 + 8, loc_3)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
			rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
			rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
			rt_store_i32(memory_at_0, loc_3 + 24, 0)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
			break
		end
		reg_0 = rt_add_i32(loc_7, 8)
		break
	end
	return reg_0
end
FUNC_LIST[555] = --[[ emscripten_builtin_free ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			if loc_0 == 0 then
				break
			end
			loc_3 = rt_sub_i32(loc_0, 8)
			loc_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_0, 4))
			loc_0 = bit_and(loc_1, 4294967288)
			loc_4 = rt_add_i32(loc_3, loc_0)
			while true do
				if bit_and(loc_1, 1) ~= 0 then
					break
				end
				if bit_and(loc_1, 2) == 0 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_3)
				loc_3 = rt_sub_i32(loc_3, loc_2)
				if loc_3 < rt_load_i32(memory_at_0, 49136) then
					desired = 1
					break
				end
				loc_0 = rt_add_i32(loc_0, loc_2)
				while true do
					while true do
						while true do
							if loc_3 ~= rt_load_i32(memory_at_0, 49140) then
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_3 + 12)
									if loc_2 <= 255 then
										while true do
											loc_5 = rt_load_i32(memory_at_0, loc_3 + 8)
											if loc_5 ~= loc_1 then
												desired = 5
												break
											end
											rt_store_i32(memory_at_0, 49120, bit_and(rt_load_i32(memory_at_0, 49120), rt_rotl_i32(4294967294, rt_shr_u32(loc_2, 3))))
											desired = 2
											break
										end
										if desired then
											break
										end
									end
									loc_6 = rt_load_i32(memory_at_0, loc_3 + 24)
									if loc_1 ~= loc_3 then
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_3 + 8)
											rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
											desired = 3
											break
										end
										if desired then
											break
										end
									end
									loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
									if loc_2 ~= 0 then
										while true do
											reg_0 = rt_add_i32(loc_3, 20)
											break
										end
										if desired then
											break
										end
									else
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
											if loc_2 == 0 then
												desired = 4
												break
											end
											reg_0 = rt_add_i32(loc_3, 16)
											break
										end
										if desired then
											break
										end
									end
									loc_5 = reg_0
									while true do
										loc_7 = loc_5
										loc_1 = loc_2
										loc_5 = rt_add_i32(loc_1, 20)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 20)
										if loc_2 ~= 0 then
											continue
										end
										loc_5 = rt_add_i32(loc_1, 16)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_7, 0)
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
							if bit_and(loc_1, 3) ~= 3 then
								desired = 2
								break
							end
							rt_store_i32(memory_at_0, 49128, loc_0)
							rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_1, 4294967294))
							rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
							rt_store_i32(memory_at_0, loc_4, loc_0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_5 + 12, loc_1)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_3 + 28)
					loc_2 = rt_add_i32(rt_shl_i32(loc_5, 2), 49424)
					if loc_3 == rt_load_i32(memory_at_0, loc_2) then
						while true do
							rt_store_i32(memory_at_0, loc_2, loc_1)
							if loc_1 ~= 0 then
								desired = 3
								break
							end
							rt_store_i32(memory_at_0, 49124, bit_and(rt_load_i32(memory_at_0, 49124), rt_rotl_i32(4294967294, loc_5)))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, rt_add_i32((if loc_3 == rt_load_i32(memory_at_0, loc_6 + 16) then 16 else 20), loc_6), loc_1)
					if loc_1 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 24, loc_6)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
				if loc_2 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 16, loc_2)
						rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
				if loc_2 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
				rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_3 >= loc_4 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
			if bit_and(loc_2, 1) == 0 then
				break
			end
			while true do
				while true do
					while true do
						while true do
							if bit_and(loc_2, 2) == 0 then
								while true do
									if loc_4 == rt_load_i32(memory_at_0, 49144) then
										while true do
											rt_store_i32(memory_at_0, 49144, loc_3)
											loc_0 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 49132))
											rt_store_i32(memory_at_0, 49132, loc_0)
											rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
											if rt_load_i32(memory_at_0, 49140) ~= loc_3 then
												desired = 1
												break
											end
											rt_store_i32(memory_at_0, 49128, 0)
											rt_store_i32(memory_at_0, 49140, 0)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									if loc_4 == rt_load_i32(memory_at_0, 49140) then
										while true do
											rt_store_i32(memory_at_0, 49140, loc_3)
											loc_0 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 49128))
											rt_store_i32(memory_at_0, 49128, loc_0)
											rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
											rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									loc_0 = rt_add_i32(loc_0, bit_and(loc_2, 4294967288))
									loc_1 = rt_load_i32(memory_at_0, loc_4 + 12)
									if loc_2 <= 255 then
										while true do
											loc_5 = rt_load_i32(memory_at_0, loc_4 + 8)
											if loc_1 == loc_5 then
												while true do
													rt_store_i32(memory_at_0, 49120, bit_and(rt_load_i32(memory_at_0, 49120), rt_rotl_i32(4294967294, rt_shr_u32(loc_2, 3))))
													desired = 3
													break
												end
												if desired then
													break
												end
											end
											rt_store_i32(memory_at_0, loc_5 + 12, loc_1)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
											desired = 3
											break
										end
										if desired then
											break
										end
									end
									loc_6 = rt_load_i32(memory_at_0, loc_4 + 24)
									if loc_1 ~= loc_4 then
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_4 + 8)
											rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
											desired = 4
											break
										end
										if desired then
											break
										end
									end
									loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
									if loc_2 ~= 0 then
										while true do
											reg_0 = rt_add_i32(loc_4, 20)
											break
										end
										if desired then
											break
										end
									else
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
											if loc_2 == 0 then
												desired = 5
												break
											end
											reg_0 = rt_add_i32(loc_4, 16)
											break
										end
										if desired then
											break
										end
									end
									loc_5 = reg_0
									while true do
										loc_7 = loc_5
										loc_1 = loc_2
										loc_5 = rt_add_i32(loc_1, 20)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 20)
										if loc_2 ~= 0 then
											continue
										end
										loc_5 = rt_add_i32(loc_1, 16)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_7, 0)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_2, 4294967294))
							rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
							rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_6 == 0 then
						break
					end
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 28)
						loc_2 = rt_add_i32(rt_shl_i32(loc_5, 2), 49424)
						if loc_4 == rt_load_i32(memory_at_0, loc_2) then
							while true do
								rt_store_i32(memory_at_0, loc_2, loc_1)
								if loc_1 ~= 0 then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, 49124, bit_and(rt_load_i32(memory_at_0, 49124), rt_rotl_i32(4294967294, loc_5)))
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, rt_add_i32((if loc_4 == rt_load_i32(memory_at_0, loc_6 + 16) then 16 else 20), loc_6), loc_1)
						if loc_1 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 24, loc_6)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
					if loc_2 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 16, loc_2)
							rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
					if loc_2 == 0 then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
					rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
				rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
				if rt_load_i32(memory_at_0, 49140) ~= loc_3 then
					break
				end
				rt_store_i32(memory_at_0, 49128, loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_0 <= 255 then
				while true do
					loc_1 = rt_add_i32(bit_and(loc_0, 4294967288), 49160)
					while true do
						loc_2 = rt_load_i32(memory_at_0, 49120)
						loc_0 = rt_shl_i32(1, rt_shr_u32(loc_0, 3))
						if bit_and(loc_2, loc_0) == 0 then
							while true do
								rt_store_i32(memory_at_0, 49120, bit_or(loc_0, loc_2))
								reg_0 = loc_1
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = rt_load_i32(memory_at_0, loc_1 + 8)
						break
					end
					if desired then
						break
					end
					loc_0 = reg_0
					rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
					rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = 31
			reg_0 = loc_3
			if loc_0 <= 16777215 then
				while true do
					loc_1 = bit_countlz(rt_shr_u32(loc_0, 8))
					reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_0, rt_sub_i32(38, loc_1)), 1), rt_shl_i32(loc_1, 1)), 62)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 28, loc_1)
			rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
			loc_4 = rt_add_i32(rt_shl_i32(loc_1, 2), 49424)
			while true do
				while true do
					while true do
						loc_2 = rt_load_i32(memory_at_0, 49124)
						loc_5 = rt_shl_i32(1, loc_1)
						if bit_and(loc_2, loc_5) == 0 then
							while true do
								rt_store_i32(memory_at_0, 49124, bit_or(loc_2, loc_5))
								loc_1 = 24
								loc_5 = loc_4
								reg_0 = 8
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_shl_i32(loc_0, (if loc_1 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_1, 1)) else 0))
						loc_5 = rt_load_i32(memory_at_0, loc_4)
						while true do
							loc_2 = loc_5
							if loc_0 == bit_and(rt_load_i32(memory_at_0, loc_2 + 4), 4294967288) then
								desired = 3
								break
							end
							loc_5 = rt_shr_u32(loc_1, 29)
							loc_1 = rt_shl_i32(loc_1, 1)
							loc_4 = rt_add_i32(rt_add_i32(bit_and(loc_5, 4), loc_2), 16)
							loc_5 = rt_load_i32(memory_at_0, loc_4)
							if loc_5 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 24
						loc_5 = loc_2
						reg_0 = 8
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = reg_0
					loc_2 = loc_3
					reg_0 = loc_3
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_2 + 8)
				rt_store_i32(memory_at_0, loc_5 + 12, loc_3)
				loc_1 = 8
				loc_4 = rt_add_i32(loc_2, 8)
				loc_0 = 24
				reg_0 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = reg_0
			rt_store_i32(memory_at_0, loc_4, loc_3)
			rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3), loc_5)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
			rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_7)
			loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, 49152), 1)
			rt_store_i32(memory_at_0, 49152, (if loc_3 ~= 0 then loc_3 else 4294967295))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[556] = --[[ __letf2 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = 1
		while true do
			loc_5 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_5, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_0, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_5, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			loc_6 = rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_6, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_2, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_6, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			if rt_eq_i64(rt_bit_or_i64(rt_bit_or_i64(loc_0, loc_2), rt_bit_or_i64(loc_5, loc_6)), rt_i64_ZERO) then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i64(rt_bit_and_i64(loc_1, loc_3), rt_i64_ZERO) then
				while true do
					if (if rt_eq_i64(loc_1, loc_3) then (if rt_lt_u64(loc_0, loc_2) then 1 else 0) else (if rt_lt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
						while true do
							reg_0 = 4294967295
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if (if rt_eq_i64(loc_1, loc_3) then (if rt_gt_u64(loc_0, loc_2) then 1 else 0) else (if rt_gt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
				while true do
					reg_0 = 4294967295
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[557] = --[[ __getf2 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = 4294967295
		while true do
			loc_5 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_5, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_0, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_5, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			loc_6 = rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_6, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_2, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_6, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			if rt_eq_i64(rt_bit_or_i64(rt_bit_or_i64(loc_0, loc_2), rt_bit_or_i64(loc_5, loc_6)), rt_i64_ZERO) then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i64(rt_bit_and_i64(loc_1, loc_3), rt_i64_ZERO) then
				while true do
					if (if rt_eq_i64(loc_1, loc_3) then (if rt_lt_u64(loc_0, loc_2) then 1 else 0) else (if rt_lt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					reg_0 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if (if rt_eq_i64(loc_1, loc_3) then (if rt_gt_u64(loc_0, loc_2) then 1 else 0) else (if rt_gt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			loc_4 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[558] = --[[ __ashlti3 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local desired
	while true do
		while true do
			if bit_and(loc_3, 64) ~= 0 then
				while true do
					loc_2 = rt_shl_i64(loc_1, rt_extend_i64_u32(rt_add_i32(loc_3, 4294967232)))
					loc_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 == 0 then
				break
			end
			loc_4 = rt_extend_i64_u32(loc_3)
			loc_2 = rt_bit_or_i64(rt_shl_i64(loc_2, loc_4), rt_shr_u64(loc_1, rt_extend_i64_u32(rt_sub_i32(64, loc_3))))
			loc_1 = rt_shl_i64(loc_1, loc_4)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
		break
	end
end
FUNC_LIST[559] = --[[ __divtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local loc_18 = rt_i64_ZERO
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local loc_22 = rt_i64_ZERO
	local loc_23 = rt_i64_ZERO
	local loc_24 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 336)
		GLOBAL_LIST[0].value = loc_5
		loc_11 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535))
		loc_10 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 65535))
		loc_12 = rt_bit_and_i64(rt_bit_xor_i64(loc_2, loc_4), rt_i64_from_u32(0, 2147483648))
		loc_6 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32767)
		while true do
			while true do
				loc_9 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(48, 0))), 32767)
				if rt_sub_i32(loc_9, 32767) >= 4294934530 then
					while true do
						if rt_sub_i32(loc_6, 32767) > 4294934529 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_13 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_13, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_13, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_12 = rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_2, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_12 = rt_bit_or_i64(loc_4, rt_i64_from_u32(0, 32768))
						loc_1 = loc_3
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_13, rt_i64_from_u32(0, 2147418112)), loc_1), rt_i64_ZERO) then
					while true do
						if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_2, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
							while true do
								loc_1 = rt_i64_ZERO
								loc_12 = rt_i64_from_u32(0, 2147450880)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_12 = rt_bit_or_i64(loc_12, rt_i64_from_u32(0, 2147418112))
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_2, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_1, loc_13), rt_i64_ZERO) then
					while true do
						loc_12 = (if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then rt_i64_from_u32(0, 2147450880) else loc_12)
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then
					while true do
						loc_12 = rt_bit_or_i64(loc_12, rt_i64_from_u32(0, 2147418112))
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_u64(loc_13, rt_i64_from_u32(4294967295, 65535)) then
					while true do
						loc_7 = (if rt_eq_i64(loc_10, rt_i64_ZERO) then 1 else 0)
						loc_7 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_7 ~= 0 then loc_1 else loc_10)), rt_extend_i64_u32(rt_shl_i32(loc_7, 6))))
						FUNC_LIST[558](rt_add_i32(loc_5, 320), loc_1, loc_10, rt_sub_i32(loc_7, 15))
						loc_7 = rt_sub_i32(16, loc_7)
						loc_10 = rt_load_i64(memory_at_0, loc_5 + 328)
						reg_0 = rt_load_i64(memory_at_0, loc_5 + 320)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 65535)) then
					break
				end
				loc_8 = (if rt_eq_i64(loc_11, rt_i64_ZERO) then 1 else 0)
				loc_8 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_8 ~= 0 then loc_3 else loc_11)), rt_extend_i64_u32(rt_shl_i32(loc_8, 6))))
				FUNC_LIST[558](rt_add_i32(loc_5, 304), loc_3, loc_11, rt_sub_i32(loc_8, 15))
				loc_7 = rt_sub_i32(rt_add_i32(loc_7, loc_8), 16)
				loc_11 = rt_load_i64(memory_at_0, loc_5 + 312)
				loc_3 = rt_load_i64(memory_at_0, loc_5 + 304)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_17 = rt_bit_or_i64(loc_11, rt_i64_from_u32(0, 65536))
			loc_2 = rt_bit_or_i64(rt_shl_i64(loc_17, rt_i64_from_u32(15, 0)), rt_shr_u64(loc_3, rt_i64_from_u32(49, 0)))
			loc_4 = rt_sub_i64(rt_i64_from_u32(0, 1963258675), loc_2)
			FUNC_LIST[562](rt_add_i32(loc_5, 288), loc_2, rt_i64_ZERO, loc_4, rt_i64_ZERO)
			FUNC_LIST[562](rt_add_i32(loc_5, 272), rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 296)), rt_i64_ZERO, loc_4, rt_i64_ZERO)
			loc_4 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 280), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 272), rt_i64_from_u32(63, 0)))
			FUNC_LIST[562](rt_add_i32(loc_5, 256), loc_4, rt_i64_ZERO, loc_2, rt_i64_ZERO)
			FUNC_LIST[562](rt_add_i32(loc_5, 240), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 264)), rt_i64_ZERO)
			loc_4 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 248), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 240), rt_i64_from_u32(63, 0)))
			FUNC_LIST[562](rt_add_i32(loc_5, 224), loc_4, rt_i64_ZERO, loc_2, rt_i64_ZERO)
			FUNC_LIST[562](rt_add_i32(loc_5, 208), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 232)), rt_i64_ZERO)
			loc_4 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 216), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 208), rt_i64_from_u32(63, 0)))
			FUNC_LIST[562](rt_add_i32(loc_5, 192), loc_4, rt_i64_ZERO, loc_2, rt_i64_ZERO)
			FUNC_LIST[562](rt_add_i32(loc_5, 176), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 200)), rt_i64_ZERO)
			loc_4 = rt_sub_i64(rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 184), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 176), rt_i64_from_u32(63, 0))), rt_i64_ONE)
			FUNC_LIST[562](rt_add_i32(loc_5, 160), loc_2, rt_i64_ZERO, loc_4, rt_i64_ZERO)
			FUNC_LIST[562](rt_add_i32(loc_5, 144), rt_shl_i64(loc_3, rt_i64_from_u32(15, 0)), rt_i64_ZERO, loc_4, rt_i64_ZERO)
			loc_11 = rt_load_i64(memory_at_0, loc_5 + 160)
			loc_2 = rt_add_i64(loc_11, rt_load_i64(memory_at_0, loc_5 + 152))
			FUNC_LIST[562](rt_add_i32(loc_5, 112), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_add_i64(rt_add_i64(rt_load_i64(memory_at_0, loc_5 + 168), rt_extend_i64_u32((if rt_lt_u64(loc_2, loc_11) then 1 else 0))), rt_extend_i64_u32((if rt_gt_u64(loc_2, rt_i64_ONE) then 1 else 0)))), rt_i64_ZERO)
			FUNC_LIST[562](rt_add_i32(loc_5, 128), rt_sub_i64(rt_i64_ONE, loc_2), rt_i64_ZERO, loc_4, rt_i64_ZERO)
			loc_6 = rt_add_i32(rt_sub_i32(loc_9, loc_6), loc_7)
			while true do
				loc_18 = rt_load_i64(memory_at_0, loc_5 + 112)
				loc_14 = rt_shl_i64(loc_18, rt_i64_ONE)
				loc_15 = rt_load_i64(memory_at_0, loc_5 + 136)
				loc_13 = rt_add_i64(loc_14, rt_bit_or_i64(rt_shl_i64(loc_15, rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 128), rt_i64_from_u32(63, 0))))
				loc_19 = rt_sub_i64(loc_13, rt_i64_from_u32(13927, 0))
				loc_2 = rt_shr_u64(loc_19, rt_i64_from_u32(32, 0))
				loc_21 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 65536))
				loc_23 = rt_shl_i64(loc_21, rt_i64_ONE)
				loc_4 = rt_shr_u64(loc_23, rt_i64_from_u32(32, 0))
				loc_16 = rt_mul_i64(loc_2, loc_4)
				loc_20 = rt_shl_i64(loc_1, rt_i64_ONE)
				loc_11 = rt_shr_u64(loc_20, rt_i64_from_u32(32, 0))
				loc_18 = rt_sub_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_13, loc_19) then 1 else 0)), rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_13, loc_14) then 1 else 0)), rt_add_i64(rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 120), rt_i64_ONE), rt_shr_u64(loc_18, rt_i64_from_u32(63, 0))), rt_shr_u64(loc_15, rt_i64_from_u32(63, 0))))), rt_i64_ONE)
				loc_13 = rt_shr_u64(loc_18, rt_i64_from_u32(32, 0))
				loc_14 = rt_add_i64(loc_16, rt_mul_i64(loc_11, loc_13))
				loc_18 = rt_bit_and_i64(loc_18, rt_i64_from_u32(4294967295, 0))
				loc_24 = rt_shr_u64(loc_1, rt_i64_from_u32(63, 0))
				loc_10 = rt_bit_and_i64(rt_bit_or_i64(loc_24, rt_shl_i64(loc_10, rt_i64_ONE)), rt_i64_from_u32(4294967295, 0))
				loc_15 = rt_add_i64(rt_mul_i64(loc_18, loc_10), loc_14)
				reg_0 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_14, loc_16) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_14, loc_15) then 1 else 0))), rt_mul_i64(loc_4, loc_13))
				loc_16 = rt_mul_i64(loc_4, loc_18)
				loc_14 = rt_add_i64(loc_16, rt_mul_i64(loc_10, loc_13))
				reg_0 = rt_add_i64(reg_0, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32((if rt_lt_u64(loc_14, loc_16) then 1 else 0)), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_14, rt_i64_from_u32(32, 0))))
				loc_14 = rt_add_i64(rt_shl_i64(loc_14, rt_i64_from_u32(32, 0)), loc_15)
				loc_19 = rt_bit_and_i64(loc_19, rt_i64_from_u32(4294967295, 0))
				loc_16 = rt_mul_i64(loc_10, loc_19)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_14) then 1 else 0)))
				loc_15 = rt_add_i64(loc_16, rt_mul_i64(loc_2, loc_11))
				reg_2 = rt_extend_i64_u32((if rt_lt_u64(loc_15, loc_16) then 1 else 0))
				loc_16 = rt_bit_and_i64(loc_20, rt_i64_from_u32(4294967294, 0))
				loc_22 = rt_add_i64(rt_mul_i64(loc_16, loc_18), loc_15)
				loc_15 = rt_add_i64(rt_add_i64(reg_2, rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_22) then 1 else 0))), loc_14)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_14, loc_15) then 1 else 0)))
				loc_14 = rt_mul_i64(loc_4, loc_19)
				loc_4 = rt_add_i64(loc_14, rt_mul_i64(loc_13, loc_16))
				loc_10 = rt_add_i64(loc_4, rt_mul_i64(loc_2, loc_10))
				loc_13 = rt_add_i64(loc_10, rt_mul_i64(loc_11, loc_18))
				loc_4 = rt_add_i64(rt_bit_or_i64(rt_shr_u64(loc_13, rt_i64_from_u32(32, 0)), rt_shl_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_10, loc_13) then 1 else 0)), rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_14) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_10) then 1 else 0)))), rt_i64_from_u32(32, 0))), loc_15)
				loc_2 = rt_mul_i64(loc_2, loc_16)
				loc_10 = rt_add_i64(loc_2, rt_mul_i64(loc_11, loc_19))
				loc_2 = rt_add_i64(rt_bit_or_i64(rt_shr_u64(loc_10, rt_i64_from_u32(32, 0)), rt_shl_i64(rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_10) then 1 else 0)), rt_i64_from_u32(32, 0))), loc_22)
				loc_2 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_22, loc_2) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_2, rt_add_i64(rt_shl_i64(loc_13, rt_i64_from_u32(32, 0)), loc_2)) then 1 else 0))), loc_4)
				loc_4 = rt_add_i64(rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_4) then 1 else 0))), rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_2) then 1 else 0)))
				if rt_le_u64(loc_4, rt_i64_from_u32(4294967295, 131071)) then
					while true do
						loc_21 = rt_bit_or_i64(loc_23, loc_24)
						FUNC_LIST[562](rt_add_i32(loc_5, 80), loc_2, loc_4, loc_3, loc_17)
						reg_0 = rt_sub_i64(rt_shl_i64(loc_1, rt_i64_from_u32(49, 0)), rt_load_i64(memory_at_0, loc_5 + 88))
						loc_1 = rt_load_i64(memory_at_0, loc_5 + 80)
						loc_11 = rt_sub_i64(reg_0, rt_extend_i64_u32((if rt_ne_i64(loc_1, rt_i64_ZERO) then 1 else 0)))
						loc_6 = rt_add_i32(loc_6, 16382)
						reg_0 = rt_sub_i64(rt_i64_ZERO, loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_from_u32(63, 0)), rt_shr_u64(loc_2, rt_i64_ONE))
				loc_4 = rt_shr_u64(loc_4, rt_i64_ONE)
				FUNC_LIST[562](rt_add_i32(loc_5, 96), loc_2, loc_4, loc_3, loc_17)
				loc_10 = rt_load_i64(memory_at_0, loc_5 + 96)
				loc_11 = rt_sub_i64(rt_sub_i64(rt_shl_i64(loc_1, rt_i64_from_u32(48, 0)), rt_load_i64(memory_at_0, loc_5 + 104)), rt_extend_i64_u32((if rt_ne_i64(loc_10, rt_i64_ZERO) then 1 else 0)))
				loc_6 = rt_add_i32(loc_6, 16383)
				loc_20 = loc_1
				reg_0 = rt_sub_i64(rt_i64_ZERO, loc_10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = reg_0
			if rt_ge_i32(loc_6, 32767) then
				while true do
					loc_12 = rt_bit_or_i64(loc_12, rt_i64_from_u32(0, 2147418112))
					loc_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_gt_i32(loc_6, 0) then
					while true do
						loc_1 = rt_bit_or_i64(rt_shl_i64(loc_11, rt_i64_ONE), rt_shr_u64(loc_10, rt_i64_from_u32(63, 0)))
						loc_11 = rt_bit_or_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(48, 0)))
						reg_0 = rt_shl_i64(loc_10, rt_i64_ONE)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_i32(loc_6, 4294967183) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[560](rt_sub_i32(loc_5, 4294967232), loc_2, loc_4, rt_sub_i32(1, loc_6))
				FUNC_LIST[558](rt_add_i32(loc_5, 48), loc_20, loc_21, rt_add_i32(loc_6, 112))
				loc_2 = rt_load_i64(memory_at_0, loc_5 + 64)
				loc_11 = rt_load_i64(memory_at_0, loc_5 + 72)
				FUNC_LIST[562](rt_add_i32(loc_5, 32), loc_3, loc_17, loc_2, loc_11)
				loc_1 = rt_load_i64(memory_at_0, loc_5 + 32)
				loc_4 = rt_load_i64(memory_at_0, loc_5 + 48)
				loc_10 = rt_shl_i64(loc_1, rt_i64_ONE)
				loc_1 = rt_sub_i64(rt_sub_i64(rt_load_i64(memory_at_0, loc_5 + 56), rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 40), rt_i64_ONE), rt_shr_u64(loc_1, rt_i64_from_u32(63, 0)))), rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_10) then 1 else 0)))
				reg_0 = rt_sub_i64(loc_4, loc_10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			FUNC_LIST[562](rt_add_i32(loc_5, 16), loc_3, loc_17, rt_i64_from_u32(3, 0), rt_i64_ZERO)
			FUNC_LIST[562](loc_5, loc_3, loc_17, rt_i64_from_u32(5, 0), rt_i64_ZERO)
			loc_10 = rt_bit_and_i64(loc_2, rt_i64_ONE)
			loc_4 = rt_add_i64(loc_4, loc_10)
			loc_1 = rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_10) then 1 else 0)), loc_1)
			loc_3 = rt_add_i64(rt_extend_i64_u32((if rt_eq_i64(loc_1, loc_17) then (if rt_lt_u64(loc_3, loc_4) then 1 else 0) else (if rt_lt_u64(loc_17, loc_1) then 1 else 0))), loc_2)
			loc_2 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_3) then 1 else 0)), loc_11)
			reg_1 = loc_2
			reg_3 = (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 2147418112)) then 1 else 0)
			loc_2 = rt_load_i64(memory_at_0, loc_5 + 24)
			loc_2 = rt_add_i64(rt_extend_i64_u32(bit_and(reg_3, (if rt_eq_i64(loc_1, loc_2) then (if rt_lt_u64(rt_load_i64(memory_at_0, loc_5 + 16), loc_4) then 1 else 0) else (if rt_lt_u64(loc_2, loc_1) then 1 else 0)))), loc_3)
			loc_3 = rt_add_i64(reg_1, rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_2) then 1 else 0)))
			reg_4 = (if rt_lt_u64(rt_load_i64(memory_at_0, loc_5), loc_4) then 1 else 0)
			loc_4 = rt_load_i64(memory_at_0, loc_5 + 8)
			loc_1 = rt_add_i64(rt_extend_i64_u32(bit_and((if rt_lt_u64(loc_3, rt_i64_from_u32(0, 2147418112)) then 1 else 0), (if rt_eq_i64(loc_1, loc_4) then reg_4 else (if rt_lt_u64(loc_4, loc_1) then 1 else 0)))), loc_2)
			loc_12 = rt_bit_or_i64(loc_12, rt_add_i64(loc_3, rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_1) then 1 else 0))))
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_12)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 336)
		break
	end
end
FUNC_LIST[560] = --[[ __lshrti3 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local desired
	while true do
		while true do
			if bit_and(loc_3, 64) ~= 0 then
				while true do
					loc_1 = rt_shr_u64(loc_2, rt_extend_i64_u32(rt_add_i32(loc_3, 4294967232)))
					loc_2 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 == 0 then
				break
			end
			loc_4 = rt_extend_i64_u32(loc_3)
			loc_1 = rt_bit_or_i64(rt_shl_i64(loc_2, rt_extend_i64_u32(rt_sub_i32(64, loc_3))), rt_shr_u64(loc_1, loc_4))
			loc_2 = rt_shr_u64(loc_2, loc_4)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
		break
	end
end
FUNC_LIST[561] = --[[ __multf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local loc_18 = rt_i64_ZERO
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local loc_22 = rt_i64_ZERO
	local loc_23 = rt_i64_ZERO
	local loc_24 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		loc_12 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535))
		loc_10 = rt_bit_and_i64(rt_bit_xor_i64(loc_2, loc_4), rt_i64_from_u32(0, 2147483648))
		loc_13 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 65535))
		loc_15 = rt_shr_u64(loc_13, rt_i64_from_u32(32, 0))
		loc_6 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32767)
		while true do
			while true do
				loc_8 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(48, 0))), 32767)
				if rt_sub_i32(loc_8, 32767) >= 4294934530 then
					while true do
						if rt_sub_i32(loc_6, 32767) > 4294934529 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_11 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_11, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_11, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_10 = rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_2, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_10 = rt_bit_or_i64(loc_4, rt_i64_from_u32(0, 32768))
						loc_1 = loc_3
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_11, rt_i64_from_u32(0, 2147418112)), loc_1), rt_i64_ZERO) then
					while true do
						if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then
							while true do
								loc_10 = rt_i64_from_u32(0, 2147450880)
								loc_1 = rt_i64_ZERO
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_10 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 2147418112))
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_2, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
					while true do
						loc_2 = rt_bit_or_i64(loc_1, loc_11)
						loc_1 = rt_i64_ZERO
						if rt_eq_i64(loc_2, rt_i64_ZERO) then
							while true do
								loc_10 = rt_i64_from_u32(0, 2147450880)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_10 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 2147418112))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_1, loc_11), rt_i64_ZERO) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_u64(loc_11, rt_i64_from_u32(4294967295, 65535)) then
					while true do
						loc_7 = (if rt_eq_i64(loc_13, rt_i64_ZERO) then 1 else 0)
						loc_7 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_7 ~= 0 then loc_1 else loc_13)), rt_extend_i64_u32(rt_shl_i32(loc_7, 6))))
						FUNC_LIST[558](rt_add_i32(loc_5, 80), loc_1, loc_13, rt_sub_i32(loc_7, 15))
						loc_7 = rt_sub_i32(16, loc_7)
						loc_13 = rt_load_i64(memory_at_0, loc_5 + 88)
						loc_15 = rt_shr_u64(loc_13, rt_i64_from_u32(32, 0))
						reg_0 = rt_load_i64(memory_at_0, loc_5 + 80)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 65535)) then
					break
				end
				loc_9 = (if rt_eq_i64(loc_12, rt_i64_ZERO) then 1 else 0)
				loc_9 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_9 ~= 0 then loc_3 else loc_12)), rt_extend_i64_u32(rt_shl_i32(loc_9, 6))))
				FUNC_LIST[558](rt_sub_i32(loc_5, 4294967232), loc_3, loc_12, rt_sub_i32(loc_9, 15))
				loc_7 = rt_add_i32(rt_sub_i32(loc_7, loc_9), 16)
				loc_12 = rt_load_i64(memory_at_0, loc_5 + 72)
				loc_3 = rt_load_i64(memory_at_0, loc_5 + 64)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = rt_shl_i64(loc_3, rt_i64_from_u32(15, 0))
			loc_2 = rt_bit_and_i64(loc_11, rt_i64_from_u32(4294934528, 0))
			loc_4 = rt_shr_u64(loc_1, rt_i64_from_u32(32, 0))
			loc_17 = rt_mul_i64(loc_2, loc_4)
			loc_11 = rt_shr_u64(loc_11, rt_i64_from_u32(32, 0))
			loc_1 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 0))
			loc_16 = rt_add_i64(loc_17, rt_mul_i64(loc_11, loc_1))
			loc_18 = rt_shl_i64(loc_16, rt_i64_from_u32(32, 0))
			loc_14 = rt_add_i64(loc_18, rt_mul_i64(loc_1, loc_2))
			loc_13 = rt_bit_and_i64(loc_13, rt_i64_from_u32(4294967295, 0))
			loc_21 = rt_mul_i64(loc_13, loc_2)
			reg_0 = rt_extend_i64_u32((if rt_lt_u64(loc_14, loc_18) then 1 else 0))
			loc_18 = rt_add_i64(loc_21, rt_mul_i64(loc_4, loc_11))
			loc_19 = rt_shl_i64(loc_12, rt_i64_from_u32(15, 0))
			loc_3 = rt_bit_and_i64(rt_bit_or_i64(loc_19, rt_shr_u64(loc_3, rt_i64_from_u32(49, 0))), rt_i64_from_u32(4294967295, 0))
			loc_20 = rt_add_i64(loc_18, rt_mul_i64(loc_1, loc_3))
			loc_16 = rt_add_i64(loc_20, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32((if rt_lt_u64(loc_16, loc_17) then 1 else 0)), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_16, rt_i64_from_u32(32, 0))))
			loc_12 = rt_bit_or_i64(loc_15, rt_i64_from_u32(65536, 0))
			loc_22 = rt_mul_i64(loc_12, loc_2)
			loc_15 = rt_add_i64(loc_22, rt_mul_i64(loc_11, loc_13))
			loc_2 = rt_bit_or_i64(rt_shr_u64(loc_19, rt_i64_from_u32(32, 0)), rt_i64_from_u32(2147483648, 0))
			loc_17 = rt_add_i64(loc_15, rt_mul_i64(loc_1, loc_2))
			loc_19 = rt_add_i64(loc_17, rt_mul_i64(loc_3, loc_4))
			loc_23 = rt_add_i64(loc_16, rt_shl_i64(loc_19, rt_i64_from_u32(32, 0)))
			loc_1 = rt_add_i64(reg_0, loc_23)
			loc_6 = rt_sub_i32(rt_add_i32(loc_7, rt_add_i32(loc_6, loc_8)), 16383)
			while true do
				loc_24 = rt_mul_i64(loc_2, loc_4)
				loc_4 = rt_add_i64(loc_24, rt_mul_i64(loc_11, loc_12))
				loc_11 = rt_add_i64(rt_mul_i64(loc_3, loc_13), loc_4)
				reg_0 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_24) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_11) then 1 else 0))), rt_mul_i64(loc_2, loc_12))
				loc_4 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_18, loc_21) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_18, loc_20) then 1 else 0))), loc_11)
				loc_3 = rt_mul_i64(loc_3, loc_12)
				loc_2 = rt_add_i64(loc_3, rt_mul_i64(loc_2, loc_13))
				reg_0 = rt_add_i64(rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_11, loc_4) then 1 else 0))), rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32((if rt_lt_u64(loc_2, loc_3) then 1 else 0)), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_2, rt_i64_from_u32(32, 0))))
				loc_2 = rt_add_i64(rt_shl_i64(loc_2, rt_i64_from_u32(32, 0)), loc_4)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_2) then 1 else 0)))
				loc_4 = rt_add_i64(rt_bit_or_i64(rt_shl_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_17, loc_19) then 1 else 0)), rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_15, loc_22) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_17) then 1 else 0)))), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_19, rt_i64_from_u32(32, 0))), loc_2)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_4) then 1 else 0)))
				loc_2 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_16, loc_20) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_16, loc_23) then 1 else 0))), loc_4)
				loc_4 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_2) then 1 else 0)))
				if rt_ne_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(0, 65536)), rt_i64_ZERO) then
					while true do
						loc_6 = rt_add_i32(loc_6, 1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = rt_shr_u64(loc_14, rt_i64_from_u32(63, 0))
				loc_4 = rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_ONE), rt_shr_u64(loc_2, rt_i64_from_u32(63, 0)))
				loc_2 = rt_bit_or_i64(rt_shl_i64(loc_2, rt_i64_ONE), rt_shr_u64(loc_1, rt_i64_from_u32(63, 0)))
				loc_14 = rt_shl_i64(loc_14, rt_i64_ONE)
				loc_1 = rt_bit_or_i64(rt_shl_i64(loc_1, rt_i64_ONE), loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_ge_i32(loc_6, 32767) then
				while true do
					loc_10 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 2147418112))
					loc_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_le_i32(loc_6, 0) then
					while true do
						loc_8 = rt_sub_i32(1, loc_6)
						if loc_8 <= 127 then
							while true do
								loc_6 = rt_add_i32(loc_6, 127)
								FUNC_LIST[558](rt_add_i32(loc_5, 48), loc_14, loc_1, loc_6)
								FUNC_LIST[558](rt_add_i32(loc_5, 32), loc_2, loc_4, loc_6)
								FUNC_LIST[560](rt_add_i32(loc_5, 16), loc_14, loc_1, loc_8)
								FUNC_LIST[560](loc_5, loc_2, loc_4, loc_8)
								loc_14 = rt_bit_or_i64(rt_extend_i64_u32((if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 48), rt_load_i64(memory_at_0, loc_5 + 56)), rt_i64_ZERO) then 1 else 0)), rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 32), rt_load_i64(memory_at_0, loc_5 + 16)))
								loc_1 = rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 40), rt_load_i64(memory_at_0, loc_5 + 24))
								loc_2 = rt_load_i64(memory_at_0, loc_5)
								reg_0 = rt_load_i64(memory_at_0, loc_5 + 8)
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_bit_or_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(48, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			loc_10 = rt_bit_or_i64(loc_4, loc_10)
			if (if rt_eq_i64(loc_1, rt_i64_from_u32(0, 2147483648)) then (if rt_eq_i64(loc_14, rt_i64_ZERO) then 1 else 0) else (if rt_ge_i64(loc_1, rt_i64_ZERO) then 1 else 0)) == 0 then
				while true do
					loc_1 = rt_add_i64(loc_2, rt_i64_ONE)
					loc_10 = rt_add_i64(rt_extend_i64_u32((if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0)), loc_10)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_1, rt_i64_from_u32(0, 2147483648)), loc_14), rt_i64_ZERO) then
				while true do
					loc_1 = loc_2
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_add_i64(rt_bit_and_i64(loc_2, rt_i64_ONE), loc_2)
			loc_10 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_1) then 1 else 0)), loc_10)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_10)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[562] = --[[ __multi3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	while true do
		reg_1 = rt_add_i64(rt_mul_i64(loc_1, loc_4), rt_mul_i64(loc_2, loc_3))
		loc_2 = rt_shr_u64(loc_3, rt_i64_from_u32(32, 0))
		loc_4 = rt_shr_u64(loc_1, rt_i64_from_u32(32, 0))
		loc_3 = rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 0))
		loc_1 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 0))
		loc_5 = rt_mul_i64(loc_3, loc_1)
		loc_3 = rt_add_i64(rt_shr_u64(loc_5, rt_i64_from_u32(32, 0)), rt_mul_i64(loc_3, loc_4))
		loc_1 = rt_add_i64(rt_mul_i64(loc_1, loc_2), rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 0)))
		rt_store_i64(memory_at_0, loc_0 + 8, rt_add_i64(rt_add_i64(rt_add_i64(reg_1, rt_mul_i64(loc_2, loc_4)), rt_shr_u64(loc_3, rt_i64_from_u32(32, 0))), rt_shr_u64(loc_1, rt_i64_from_u32(32, 0))))
		rt_store_i64(memory_at_0, loc_0, rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(4294967295, 0)), rt_shl_i64(loc_1, rt_i64_from_u32(32, 0))))
		break
	end
end
FUNC_LIST[563] = --[[ _emscripten_stack_restore ]] function(loc_0)
	while true do
		GLOBAL_LIST[0].value = loc_0
		break
	end
end
FUNC_LIST[564] = --[[ _emscripten_stack_alloc ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = bit_and(rt_sub_i32(GLOBAL_LIST[0].value, loc_0), 4294967280)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[565] = --[[ emscripten_stack_get_current ]] function()
	local reg_0
	while true do
		reg_0 = GLOBAL_LIST[0].value
		break
	end
	return reg_0
end
FUNC_LIST[566] = --[[ __fe_getround ]] function()
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[567] = --[[ __addtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_10
		loc_6 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
		while true do
			while true do
				loc_9 = (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0)
				loc_5 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_5, rt_i64_ZERO) then loc_9 else (if rt_lt_u64(rt_sub_i64(loc_5, rt_i64_from_u32(0, 2147418112)), rt_i64_from_u32(0, 2147549184)) then 1 else 0)) == 0 then
					while true do
						loc_8 = rt_sub_i64(loc_6, rt_i64_from_u32(0, 2147418112))
						if (if rt_eq_i64(loc_8, rt_i64_from_u32(0, 2147549184)) then (if rt_ne_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_8, rt_i64_from_u32(0, 2147549184)) then 1 else 0)) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if (if rt_eq_i64(loc_5, rt_i64_from_u32(0, 2147418112)) then loc_9 else (if rt_lt_u64(loc_5, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_4 = rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 32768))
						loc_3 = loc_1
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if (if rt_eq_i64(loc_6, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_6, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_4 = rt_bit_or_i64(loc_4, rt_i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_5, rt_i64_from_u32(0, 2147418112)), loc_1), rt_i64_ZERO) then
					while true do
						loc_9 = (if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_1, loc_3), rt_bit_xor_i64(rt_bit_xor_i64(loc_2, loc_4), rt_i64_from_u32(0, 2147483648))), rt_i64_ZERO) then 1 else 0)
						loc_4 = (if loc_9 ~= 0 then rt_i64_from_u32(0, 2147450880) else loc_2)
						loc_3 = (if loc_9 ~= 0 then rt_i64_ZERO else loc_1)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_6, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
					desired = 1
					break
				end
				if rt_eq_i64(rt_bit_or_i64(loc_1, loc_5), rt_i64_ZERO) then
					while true do
						if rt_ne_i64(rt_bit_or_i64(loc_3, loc_6), rt_i64_ZERO) then
							desired = 1
							break
						end
						loc_3 = rt_bit_and_i64(loc_1, loc_3)
						loc_4 = rt_bit_and_i64(loc_2, loc_4)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ne_i64(rt_bit_or_i64(loc_3, loc_6), rt_i64_ZERO) then
					break
				end
				loc_3 = loc_1
				loc_4 = loc_2
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = (if rt_eq_i64(loc_5, loc_6) then (if rt_lt_u64(loc_1, loc_3) then 1 else 0) else (if rt_lt_u64(loc_5, loc_6) then 1 else 0))
			loc_6 = (if loc_11 ~= 0 then loc_3 else loc_1)
			loc_8 = (if loc_11 ~= 0 then loc_4 else loc_2)
			loc_5 = rt_bit_and_i64(loc_8, rt_i64_from_u32(4294967295, 65535))
			loc_7 = (if loc_11 ~= 0 then loc_2 else loc_4)
			loc_12 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_7, rt_i64_from_u32(48, 0))), 32767)
			loc_9 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(48, 0))), 32767)
			if loc_9 ~= 0 then
				while true do
					reg_0 = loc_5
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_9 = (if rt_eq_i64(loc_5, rt_i64_ZERO) then 1 else 0)
					loc_9 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_9 ~= 0 then loc_6 else loc_5)), rt_extend_i64_u32(rt_shl_i32(loc_9, 6))))
					FUNC_LIST[558](rt_add_i32(loc_10, 96), loc_6, loc_5, rt_sub_i32(loc_9, 15))
					loc_9 = rt_sub_i32(16, loc_9)
					loc_6 = rt_load_i64(memory_at_0, loc_10 + 96)
					reg_0 = rt_load_i64(memory_at_0, loc_10 + 104)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = reg_0
			loc_3 = (if loc_11 ~= 0 then loc_1 else loc_3)
			loc_1 = rt_bit_and_i64(loc_7, rt_i64_from_u32(4294967295, 65535))
			if loc_12 ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_11 = (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0)
					loc_11 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_11 ~= 0 then loc_3 else loc_1)), rt_extend_i64_u32(rt_shl_i32(loc_11, 6))))
					FUNC_LIST[558](rt_add_i32(loc_10, 80), loc_3, loc_1, rt_sub_i32(loc_11, 15))
					loc_12 = rt_sub_i32(16, loc_11)
					loc_3 = rt_load_i64(memory_at_0, loc_10 + 80)
					reg_0 = rt_load_i64(memory_at_0, loc_10 + 88)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			loc_1 = rt_bit_or_i64(rt_bit_or_i64(rt_shl_i64(loc_1, rt_i64_from_u32(3, 0)), rt_shr_u64(loc_3, rt_i64_from_u32(61, 0))), rt_i64_from_u32(0, 524288))
			loc_7 = rt_bit_or_i64(rt_shl_i64(loc_5, rt_i64_from_u32(3, 0)), rt_shr_u64(loc_6, rt_i64_from_u32(61, 0)))
			loc_5 = rt_shl_i64(loc_3, rt_i64_from_u32(3, 0))
			loc_3 = rt_bit_xor_i64(loc_2, loc_4)
			while true do
				if loc_9 == loc_12 then
					break
				end
				loc_11 = rt_sub_i32(loc_9, loc_12)
				if loc_11 > 127 then
					while true do
						loc_1 = rt_i64_ZERO
						loc_5 = rt_i64_ONE
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[558](rt_sub_i32(loc_10, 4294967232), loc_5, loc_1, rt_sub_i32(128, loc_11))
				FUNC_LIST[560](rt_add_i32(loc_10, 48), loc_5, loc_1, loc_11)
				loc_5 = rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10 + 48), rt_extend_i64_u32((if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10 + 64), rt_load_i64(memory_at_0, loc_10 + 72)), rt_i64_ZERO) then 1 else 0)))
				loc_1 = rt_load_i64(memory_at_0, loc_10 + 56)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = rt_bit_or_i64(loc_7, rt_i64_from_u32(0, 524288))
			loc_6 = rt_shl_i64(loc_6, rt_i64_from_u32(3, 0))
			while true do
				if rt_lt_i64(loc_3, rt_i64_ZERO) then
					while true do
						loc_3 = rt_i64_ZERO
						loc_4 = rt_i64_ZERO
						if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_5, loc_6), rt_bit_xor_i64(loc_1, loc_7)), rt_i64_ZERO) then
							desired = 1
							break
						end
						loc_2 = rt_sub_i64(loc_6, loc_5)
						loc_4 = rt_sub_i64(rt_sub_i64(loc_7, loc_1), rt_extend_i64_u32((if rt_gt_u64(loc_5, loc_6) then 1 else 0)))
						if rt_gt_u64(loc_4, rt_i64_from_u32(4294967295, 524287)) then
							desired = 2
							break
						end
						loc_11 = (if rt_eq_i64(loc_4, rt_i64_ZERO) then 1 else 0)
						loc_11 = rt_sub_i32(rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_11 ~= 0 then loc_2 else loc_4)), rt_extend_i64_u32(rt_shl_i32(loc_11, 6)))), 12)
						FUNC_LIST[558](rt_add_i32(loc_10, 32), loc_2, loc_4, loc_11)
						loc_9 = rt_sub_i32(loc_9, loc_11)
						loc_4 = rt_load_i64(memory_at_0, loc_10 + 40)
						loc_2 = rt_load_i64(memory_at_0, loc_10 + 32)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_add_i64(loc_5, loc_6)
				loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_5, loc_2) then 1 else 0)), rt_add_i64(loc_1, loc_7))
				if rt_eq_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(0, 1048576)), rt_i64_ZERO) then
					break
				end
				loc_2 = rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_ONE), rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_from_u32(63, 0)), rt_shr_u64(loc_2, rt_i64_ONE)))
				loc_9 = rt_add_i32(loc_9, 1)
				loc_4 = rt_shr_u64(loc_4, rt_i64_ONE)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_bit_and_i64(loc_8, rt_i64_from_u32(0, 2147483648))
			if rt_ge_i32(loc_9, 32767) then
				while true do
					loc_4 = rt_bit_or_i64(loc_5, rt_i64_from_u32(0, 2147418112))
					loc_3 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = 0
			while true do
				if rt_gt_i32(loc_9, 0) then
					while true do
						loc_11 = loc_9
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[558](rt_add_i32(loc_10, 16), loc_2, loc_4, rt_add_i32(loc_9, 127))
				FUNC_LIST[560](loc_10, loc_2, loc_4, rt_sub_i32(1, loc_9))
				loc_2 = rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10), rt_extend_i64_u32((if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10 + 16), rt_load_i64(memory_at_0, loc_10 + 24)), rt_i64_ZERO) then 1 else 0)))
				loc_4 = rt_load_i64(memory_at_0, loc_10 + 8)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_from_u32(61, 0)), rt_shr_u64(loc_2, rt_i64_from_u32(3, 0)))
			loc_4 = rt_bit_or_i64(loc_5, rt_bit_or_i64(rt_bit_and_i64(rt_shr_u64(loc_4, rt_i64_from_u32(3, 0)), rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(loc_11), rt_i64_from_u32(48, 0))))
			loc_9 = bit_and(rt_wrap_i32_i64(loc_2), 7)
			while true do
				while true do
					while true do
						while true do
							while true do
								reg_0 = FUNC_LIST[566]()
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, }
									end)()
								end
								temp = br_map[1][reg_0] or 3
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_9 ~= 4 then
								while true do
									loc_5 = rt_add_i64(rt_extend_i64_u32((if loc_9 > 4 then 1 else 0)), loc_3)
									loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
									loc_3 = loc_5
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_add_i64(rt_bit_and_i64(loc_3, rt_i64_ONE), loc_3)
							loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
							loc_3 = loc_5
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_add_i64(rt_extend_i64_u32(bit_and((if loc_9 ~= 0 then 1 else 0), (if rt_ne_i64(loc_5, rt_i64_ZERO) then 1 else 0))), loc_3)
						loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
						loc_3 = loc_5
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = rt_add_i64(rt_extend_i64_u32(bit_and((if rt_eq_i64(loc_5, rt_i64_ZERO) then 1 else 0), (if loc_9 ~= 0 then 1 else 0))), loc_3)
					loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
					loc_3 = loc_5
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_9 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[566]()
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_10, 112)
		break
	end
end
FUNC_LIST[568] = --[[ __subtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[567](loc_5, loc_1, loc_2, loc_3, rt_bit_xor_i64(loc_4, rt_i64_from_u32(0, 2147483648)))
		loc_4 = rt_load_i64(memory_at_0, loc_5)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
		rt_store_i64(memory_at_0, loc_0, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[569] = --[[ __trunctfdf2 ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_2 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 65535))
		while true do
			loc_3 = rt_bit_and_i64(rt_shr_u64(loc_1, rt_i64_from_u32(48, 0)), rt_i64_from_u32(32767, 0))
			loc_4 = rt_wrap_i32_i64(loc_3)
			if rt_sub_i32(loc_4, 15361) <= 2045 then
				while true do
					loc_2 = rt_bit_or_i64(rt_shl_i64(loc_2, rt_i64_from_u32(4, 0)), rt_shr_u64(loc_0, rt_i64_from_u32(60, 0)))
					loc_3 = rt_extend_i64_u32(rt_sub_i32(loc_4, 15360))
					while true do
						loc_0 = rt_bit_and_i64(loc_0, rt_i64_from_u32(4294967295, 268435455))
						if rt_ge_u64(loc_0, rt_i64_from_u32(1, 134217728)) then
							while true do
								loc_2 = rt_add_i64(loc_2, rt_i64_ONE)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if rt_ne_i64(loc_0, rt_i64_from_u32(0, 134217728)) then
							break
						end
						loc_2 = rt_add_i64(loc_2, rt_bit_and_i64(loc_2, rt_i64_ONE))
						break
					end
					if desired then
						break
					end
					loc_4 = (if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 1048575)) then 1 else 0)
					loc_0 = (if loc_4 ~= 0 then rt_i64_ZERO else loc_2)
					reg_0 = rt_add_i64(loc_3, rt_extend_i64_u32(loc_4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_eq_i64(rt_bit_or_i64(loc_0, loc_2), rt_i64_ZERO) then
					break
				end
				if rt_ne_i64(loc_3, rt_i64_from_u32(32767, 0)) then
					break
				end
				loc_0 = rt_bit_or_i64(rt_bit_or_i64(rt_shl_i64(loc_2, rt_i64_from_u32(4, 0)), rt_shr_u64(loc_0, rt_i64_from_u32(60, 0))), rt_i64_from_u32(0, 524288))
				reg_0 = rt_i64_from_u32(2047, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_4 > 17406 then
				while true do
					loc_0 = rt_i64_ZERO
					reg_0 = rt_i64_from_u32(2047, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0)
			loc_8 = (if loc_7 ~= 0 then 15360 else 15361)
			loc_6 = rt_sub_i32(loc_8, loc_4)
			if rt_gt_i32(loc_6, 112) then
				while true do
					loc_0 = rt_i64_ZERO
					reg_0 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = (if loc_7 ~= 0 then loc_2 else rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 65536)))
			FUNC_LIST[558](rt_add_i32(loc_5, 16), loc_0, loc_2, rt_sub_i32(128, loc_6))
			FUNC_LIST[560](loc_5, loc_0, loc_2, loc_6)
			loc_2 = rt_load_i64(memory_at_0, loc_5)
			loc_0 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 8), rt_i64_from_u32(4, 0)), rt_shr_u64(loc_2, rt_i64_from_u32(60, 0)))
			while true do
				loc_2 = rt_bit_or_i64(rt_extend_i64_u32(bit_and((if loc_4 ~= loc_8 then 1 else 0), (if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 16), rt_load_i64(memory_at_0, loc_5 + 24)), rt_i64_ZERO) then 1 else 0))), rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 268435455)))
				if rt_ge_u64(loc_2, rt_i64_from_u32(1, 134217728)) then
					while true do
						loc_0 = rt_add_i64(loc_0, rt_i64_ONE)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ne_i64(loc_2, rt_i64_from_u32(0, 134217728)) then
					break
				end
				loc_0 = rt_add_i64(loc_0, rt_bit_and_i64(loc_0, rt_i64_ONE))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = (if rt_gt_u64(loc_0, rt_i64_from_u32(4294967295, 1048575)) then 1 else 0)
			loc_0 = (if loc_4 ~= 0 then rt_bit_xor_i64(loc_0, rt_i64_from_u32(0, 1048576)) else loc_0)
			reg_0 = rt_extend_i64_u32(loc_4)
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
		reg_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(loc_0, rt_bit_or_i64(rt_bit_and_i64(loc_1, rt_i64_from_u32(0, 2147483648)), rt_shl_i64(loc_2, rt_i64_from_u32(52, 0)))))
		break
	end
	return reg_0
end
FUNC_LIST[570] = --[[ __extendsftf2 ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = rt_reinterpret_i32_f32(loc_1)
		loc_2 = bit_and(loc_4, 8388607)
		while true do
			loc_5 = rt_shr_u32(loc_4, 23)
			loc_6 = bit_and(loc_5, 255)
			if loc_6 ~= 0 then
				while true do
					if loc_6 ~= 255 then
						while true do
							loc_7 = rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(25, 0))
							reg_0 = rt_add_i32(bit_and(loc_5, 255), 16256)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_7 = rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(25, 0))
					reg_0 = 32767
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 == 0 then
				while true do
					reg_0 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = rt_extend_i64_u32(loc_2)
			loc_2 = bit_countlz(loc_2)
			FUNC_LIST[558](loc_3, reg_1, rt_i64_ZERO, rt_add_i32(loc_2, 81))
			loc_7 = rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_3 + 8), rt_i64_from_u32(0, 65536))
			loc_8 = rt_load_i64(memory_at_0, loc_3)
			reg_0 = rt_sub_i32(16265, loc_2)
			break
		end
		loc_2 = reg_0
		rt_store_i64(memory_at_0, loc_0, loc_8)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_or_i64(loc_7, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(48, 0)), rt_shl_i64(rt_extend_i64_u32(rt_shr_u32(loc_4, 31)), rt_i64_from_u32(63, 0)))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[571] = --[[ __floatsitf ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = loc_0
		while true do
			if loc_1 == 0 then
				while true do
					reg_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_shr_i32(loc_1, 31)
			loc_2 = rt_sub_i32(bit_xor(loc_2, loc_1), loc_2)
			reg_2 = rt_extend_i64_u32(loc_2)
			loc_2 = bit_countlz(loc_2)
			FUNC_LIST[558](loc_3, reg_2, rt_i64_ZERO, rt_add_i32(loc_2, 81))
			loc_4 = rt_bit_or_i64(rt_add_i64(rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_3 + 8), rt_i64_from_u32(0, 65536)), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(16414, loc_2)), rt_i64_from_u32(48, 0))), rt_shl_i64(rt_extend_i64_u32(bit_and(loc_1, 2147483648)), rt_i64_from_u32(32, 0)))
			reg_1 = rt_load_i64(memory_at_0, loc_3)
			break
		end
		rt_store_i64(memory_at_0, reg_0, reg_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[572] = --[[ __extenddftf2 ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_5 = rt_reinterpret_i64_f64(loc_1)
		loc_2 = rt_bit_and_i64(loc_5, rt_i64_from_u32(4294967295, 1048575))
		reg_0 = loc_0
		while true do
			loc_3 = rt_bit_and_i64(rt_shr_u64(loc_5, rt_i64_from_u32(52, 0)), rt_i64_from_u32(2047, 0))
			if rt_ne_i64(loc_3, rt_i64_ZERO) then
				while true do
					if rt_ne_i64(loc_3, rt_i64_from_u32(2047, 0)) then
						while true do
							loc_4 = rt_shr_u64(loc_2, rt_i64_from_u32(4, 0))
							loc_3 = rt_add_i64(loc_3, rt_i64_from_u32(15360, 0))
							reg_1 = rt_shl_i64(loc_2, rt_i64_from_u32(60, 0))
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_4 = rt_shr_u64(loc_2, rt_i64_from_u32(4, 0))
					loc_3 = rt_i64_from_u32(32767, 0)
					reg_1 = rt_shl_i64(loc_2, rt_i64_from_u32(60, 0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_eq_i64(loc_2, rt_i64_ZERO) then
				while true do
					loc_3 = rt_i64_ZERO
					reg_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 1)) then bit_or(bit_countlz(rt_wrap_i32_i64(loc_5)), 32) else bit_countlz(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(32, 0)))))
			FUNC_LIST[558](loc_6, loc_2, rt_i64_ZERO, rt_add_i32(loc_7, 49))
			loc_3 = rt_extend_i64_u32(rt_sub_i32(15372, loc_7))
			loc_4 = rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_6 + 8), rt_i64_from_u32(0, 65536))
			reg_1 = rt_load_i64(memory_at_0, loc_6)
			break
		end
		loc_2 = reg_1
		rt_store_i64(memory_at_0, reg_0, loc_2)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_or_i64(loc_4, rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(0, 2147483648)), rt_shl_i64(loc_3, rt_i64_from_u32(48, 0)))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		break
	end
end
FUNC_LIST[573] = --[[ __floatunsitf ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = loc_0
		while true do
			if loc_1 == 0 then
				while true do
					reg_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_2 = rt_extend_i64_u32(loc_1)
			loc_1 = bit_countlz(loc_1)
			FUNC_LIST[558](loc_2, reg_2, rt_i64_ZERO, rt_sub_i32(112, bit_xor(loc_1, 31)))
			loc_3 = rt_add_i64(rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_2 + 8), rt_i64_from_u32(0, 65536)), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(16414, loc_1)), rt_i64_from_u32(48, 0)))
			reg_1 = rt_load_i64(memory_at_0, loc_2)
			break
		end
		rt_store_i64(memory_at_0, reg_0, reg_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_3)
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[574] = --[[ set_flag ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_3 = rt_load_i32(memory_at_0, 49616)
				if loc_3 ~= 0 then
					while true do
						loc_2 = rt_load_i32_u8(memory_at_0, loc_0 + 11)
						loc_4 = rt_extend_i32_n8(loc_2)
						loc_2 = (if rt_lt_i32(loc_4, 0) then rt_load_i32(memory_at_0, loc_0 + 4) else loc_2)
						while true do
							if rt_lt_i32(loc_4, 0) then
								while true do
									loc_5 = (if loc_2 == 4294967295 then 1 else 0)
									while true do
										loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
										reg_0 = FUNC_LIST[544](loc_4)
										if reg_0 == loc_2 then
											while true do
												if loc_5 ~= 0 then
													desired = 2
													break
												end
												reg_0 = FUNC_LIST[575](rt_load_i32(memory_at_0, loc_0), loc_4, loc_2)
												if reg_0 == 0 then
													desired = 1
													break
												end
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_3 = rt_load_i32(memory_at_0, loc_3 + 8)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_5 = (if loc_2 ~= 4294967295 then 1 else 0)
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
								reg_0 = FUNC_LIST[544](loc_4)
								if reg_0 == loc_2 then
									while true do
										if loc_5 == 0 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[575](loc_0, loc_4, loc_2)
										if reg_0 == 0 then
											desired = 1
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_3 = rt_load_i32(memory_at_0, loc_3 + 8)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						reg_0 = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[576](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32_n8(memory_at_0, loc_3, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[575] = --[[ memcmp ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if loc_2 >= 4 then
					while true do
						if bit_and(bit_or(loc_0, loc_1), 3) ~= 0 then
							desired = 2
							break
						end
						while true do
							if rt_load_i32(memory_at_0, loc_0) ~= rt_load_i32(memory_at_0, loc_1) then
								desired = 2
								break
							end
							loc_1 = rt_add_i32(loc_1, 4)
							loc_0 = rt_add_i32(loc_0, 4)
							loc_2 = rt_sub_i32(loc_2, 4)
							if loc_2 > 3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_3 = rt_load_i32_u8(memory_at_0, loc_0)
				loc_4 = rt_load_i32_u8(memory_at_0, loc_1)
				if loc_3 == loc_4 then
					while true do
						loc_1 = rt_add_i32(loc_1, 1)
						loc_0 = rt_add_i32(loc_0, 1)
						loc_2 = rt_sub_i32(loc_2, 1)
						if loc_2 ~= 0 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_sub_i32(loc_3, loc_4)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[576] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__throw_out_of_range[abi:ne180100]() const ]] function(loc_0)
	while true do
		FUNC_LIST[577](3704)
		error("out of code bounds")
	end
end
FUNC_LIST[577] = --[[ std::__2::__throw_out_of_range[abi:ne180100](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[578](8)
		reg_0 = FUNC_LIST[579](reg_0, loc_0)
		FUNC_LIST[0](reg_0, 48024, 131)
		error("out of code bounds")
	end
end
FUNC_LIST[578] = --[[ __cxa_allocate_exception ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[553](rt_add_i32(loc_0, 80))
		reg_0 = rt_add_i32(reg_0, 80)
		break
	end
	return reg_0
end
FUNC_LIST[579] = --[[ std::out_of_range::out_of_range[abi:ne180100](char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[580](loc_0, loc_1)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_1, 47992)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[580] = --[[ std::logic_error::logic_error(char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[656](loc_0)
		loc_0 = reg_0
		rt_store_i32(memory_at_0, loc_0, 47892)
		reg_0 = FUNC_LIST[657](rt_add_i32(loc_0, 4), loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[581] = --[[ set_all_flags ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, 49616)
		if loc_1 ~= 0 then
			while true do
				while true do
					reg_0 = FUNC_LIST[582](rt_load_i32(memory_at_0, loc_1 + 4))
					if reg_0 == 0 then
						while true do
							rt_store_i32_n8(memory_at_0, loc_1, loc_0)
							break
						end
					end
					loc_1 = rt_load_i32(memory_at_0, loc_1 + 8)
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[582] = --[[ strncmp ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_2 = 1180
		while true do
			loc_1 = rt_load_i32_u8(memory_at_0, loc_0)
			if loc_1 == 0 then
				while true do
					loc_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = 4
			while true do
				while true do
					loc_4 = rt_load_i32_u8(memory_at_0, loc_2)
					if loc_4 ~= loc_1 then
						desired = 2
						break
					end
					if loc_4 == 0 then
						desired = 2
						break
					end
					loc_3 = rt_sub_i32(loc_3, 1)
					if loc_3 == 0 then
						desired = 2
						break
					end
					loc_2 = rt_add_i32(loc_2, 1)
					loc_1 = rt_load_i32_u8(memory_at_0, loc_0 + 1)
					loc_0 = rt_add_i32(loc_0, 1)
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = rt_sub_i32(loc_1, rt_load_i32_u8(memory_at_0, loc_2))
		break
	end
	return reg_0
end
FUNC_LIST[583] = --[[ reset_flags ]] function()
	local loc_0 = 0
	local loc_1 = 0
	local reg_0
	while true do
		loc_0 = rt_load_i32(memory_at_0, 49616)
		if loc_0 ~= 0 then
			while true do
				while true do
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						reg_0 = FUNC_LIST[582](loc_1)
						if reg_0 ~= 0 then
							break
						end
						reg_0 = FUNC_LIST[584](3877, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[584](3845, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[584](6985, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[584](7048, loc_1)
						if reg_0 == 0 then
							break
						end
						rt_store_i32_n8(memory_at_0, loc_0, 1)
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
					if loc_0 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[584] = --[[ strcmp ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
		while true do
			loc_3 = rt_load_i32_u8(memory_at_0, loc_0)
			if loc_3 == 0 then
				break
			end
			if loc_2 ~= loc_3 then
				break
			end
			while true do
				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
				loc_3 = rt_load_i32_u8(memory_at_0, loc_0 + 1)
				if loc_3 == 0 then
					desired = 1
					break
				end
				loc_1 = rt_add_i32(loc_1, 1)
				loc_0 = rt_add_i32(loc_0, 1)
				if loc_2 == loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = rt_sub_i32(loc_3, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[585] = --[[ acos ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		loc_3 = rt_reinterpret_i64_f64(loc_0)
		loc_4 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_3, rt_i64_from_u32(32, 0))), 2147483647)
		if loc_4 >= 1072693248 then
			while true do
				if bit_or(rt_wrap_i32_i64(loc_3), rt_sub_i32(loc_4, 1072693248)) == 0 then
					while true do
						reg_0 = (if rt_ge_i64(loc_3, rt_i64_ZERO) then 0e0 else 3.141592653589793e0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				reg_0 = (0e0 / (loc_0 - loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if loc_4 <= 1071644671 then
				while true do
					loc_1 = 1.5707963267948966e0
					reg_0 = loc_1
					if loc_4 < 1012924417 then
						desired = 1
						break
					end
					reg_2 = FUNC_LIST[586]((loc_0 * loc_0))
					reg_0 = (((6.123233995736766e-17 - (loc_0 * reg_2)) - loc_0) + 1.5707963267948966e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_lt_i64(loc_3, rt_i64_ZERO) then
				while true do
					loc_0 = ((loc_0 + 1e0) * 5e-1)
					reg_1 = FUNC_LIST[587](loc_0)
					loc_1 = reg_1
					reg_3 = FUNC_LIST[586](loc_0)
					loc_0 = (1.5707963267948966e0 - (loc_1 + ((loc_1 * reg_3) + -6.123233995736766e-17)))
					reg_0 = (loc_0 + loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = ((1e0 - loc_0) * 5e-1)
			reg_0 = FUNC_LIST[587](loc_1)
			loc_2 = reg_0
			reg_1 = FUNC_LIST[586](loc_1)
			loc_0 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_2), rt_i64_from_u32(0, 4294967295)))
			loc_0 = (((loc_2 * reg_1) + ((loc_1 - (loc_0 * loc_0)) / (loc_2 + loc_0))) + loc_0)
			reg_0 = (loc_0 + loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[586] = --[[ R ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * 3.479331075960212e-5) + 7.915349942898145e-4)) + -4.005553450067941e-2)) + 2.0121253213486293e-1)) + -3.255658186224009e-1)) + 1.6666666666666666e-1)) / ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * 7.703815055590194e-2) + -6.882839716054533e-1)) + 2.0209457602335057e0)) + -2.403394911734414e0)) + 1e0))
		break
	end
	return reg_0
end
FUNC_LIST[587] = --[[ sqrt ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = math_sqrt(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[588] = --[[ asin ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = rt_reinterpret_i64_f64(loc_0)
		loc_1 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_5, rt_i64_from_u32(32, 0))), 2147483647)
		if loc_1 >= 1072693248 then
			while true do
				if bit_or(rt_wrap_i32_i64(loc_5), rt_sub_i32(loc_1, 1072693248)) == 0 then
					while true do
						reg_0 = ((loc_0 * 1.5707963267948966e0) + 7.52316384526264e-37)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				reg_0 = (0e0 / (loc_0 - loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if loc_1 <= 1071644671 then
				while true do
					if rt_add_i32(loc_1, 4293918720) < 1044381696 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[586]((loc_0 * loc_0))
					reg_0 = ((loc_0 * reg_1) + loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[589](loc_0)
			loc_3 = ((1e0 - reg_1) * 5e-1)
			reg_0 = FUNC_LIST[587](loc_3)
			loc_0 = reg_0
			reg_0 = FUNC_LIST[586](loc_3)
			loc_4 = reg_0
			while true do
				if loc_1 >= 1072640819 then
					while true do
						loc_0 = ((loc_0 * loc_4) + loc_0)
						reg_0 = (1.5707963267948966e0 - ((loc_0 + loc_0) + -6.123233995736766e-17))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(0, 4294967295)))
				reg_1 = ((loc_0 + loc_0) * loc_4)
				loc_0 = ((loc_3 - (loc_2 * loc_2)) / (loc_0 + loc_2))
				reg_0 = (((7.853981633974483e-1 - (loc_2 + loc_2)) - (reg_1 - (6.123233995736766e-17 - (loc_0 + loc_0)))) + 7.853981633974483e-1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = reg_0
			loc_0 = (if rt_lt_i64(loc_5, rt_i64_ZERO) then rt_neg_f64(loc_0) else loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[589] = --[[ fabs ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = math_abs(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[590] = --[[ atan ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = rt_reinterpret_i64_f64(loc_0)
		loc_4 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_6, rt_i64_from_u32(32, 0))), 2147483647)
		if loc_4 >= 1141899264 then
			while true do
				reg_2 = FUNC_LIST[528](loc_0)
				reg_0 = (if rt_gt_u64(rt_bit_and_i64(reg_2, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then loc_0 else rt_copysign_f64(1.5707963267948966e0, loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				if loc_4 <= 1071382527 then
					while true do
						loc_5 = 4294967295
						reg_0 = loc_5
						if loc_4 >= 1044381696 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[589](loc_0)
				loc_0 = reg_0
				if loc_4 <= 1072889855 then
					while true do
						if loc_4 <= 1072037887 then
							while true do
								loc_0 = (((loc_0 + loc_0) + -1e0) / (loc_0 + 2e0))
								reg_0 = 0
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						loc_0 = ((loc_0 + -1e0) / (loc_0 + 1e0))
						reg_0 = 1
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_4 <= 1073971199 then
					while true do
						loc_0 = ((loc_0 + -1.5e0) / ((loc_0 * 1.5e0) + 1e0))
						reg_0 = 2
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = (-1e0 / loc_0)
				reg_0 = 3
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			loc_2 = (loc_0 * loc_0)
			loc_1 = (loc_2 * loc_2)
			loc_3 = (loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * -3.6531572744216916e-2) + -5.8335701337905735e-2)) + -7.69187620504483e-2)) + -1.1111110405462356e-1)) + -1.9999999999876483e-1))
			loc_1 = (loc_2 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * 1.6285820115365782e-2) + 4.9768779946159324e-2)) + 6.661073137387531e-2)) + 9.090887133436507e-2)) + 1.4285714272503466e-1)) + 3.333333333333293e-1))
			if loc_4 <= 1071382527 then
				while true do
					reg_0 = (loc_0 - (loc_0 * (loc_3 + loc_1)))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_shl_i32(loc_5, 3)
			loc_0 = (rt_load_f64(memory_at_0, rt_add_i32(loc_4, 44112)) - (((loc_0 * (loc_3 + loc_1)) - rt_load_f64(memory_at_0, rt_add_i32(loc_4, 44144))) - loc_0))
			loc_0 = (if rt_lt_i64(loc_6, rt_i64_ZERO) then rt_neg_f64(loc_0) else loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[591] = --[[ atan2 ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			reg_0 = FUNC_LIST[528](loc_1)
			if rt_le_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then
				while true do
					reg_0 = FUNC_LIST[528](loc_0)
					if rt_lt_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(1, 2146435072)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (loc_0 + loc_1)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_8 = rt_reinterpret_i64_f64(loc_1)
		loc_3 = rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(32, 0)))
		loc_6 = rt_wrap_i32_i64(loc_8)
		if bit_or(rt_sub_i32(loc_3, 1072693248), loc_6) == 0 then
			while true do
				reg_0 = FUNC_LIST[590](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_7 = bit_and(rt_shr_u32(loc_3, 30), 2)
		loc_8 = rt_reinterpret_i64_f64(loc_0)
		loc_4 = bit_or(loc_7, rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(63, 0))))
		while true do
			loc_5 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(32, 0))), 2147483647)
			if bit_or(loc_5, rt_wrap_i32_i64(loc_8)) == 0 then
				while true do
					loc_2 = loc_0
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(loc_4, 2)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = 3.141592653589793e0
						desired = 0
						break
					end
					if desired then
						break
					end
					reg_0 = -3.141592653589793e0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = bit_and(loc_3, 2147483647)
			if bit_or(loc_6, loc_3) == 0 then
				while true do
					reg_0 = rt_copysign_f64(1.5707963267948966e0, loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if loc_3 == 2146435072 then
					while true do
						if loc_5 ~= 2146435072 then
							desired = 2
							break
						end
						reg_0 = rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 3), 44176))
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and((if loc_5 ~= 2146435072 then 1 else 0), (if loc_5 <= rt_add_i32(loc_3, 67108864) then 1 else 0)) == 0 then
					while true do
						reg_0 = rt_copysign_f64(1.5707963267948966e0, loc_0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_7 ~= 0 then
						while true do
							reg_0 = 0e0
							if loc_3 > rt_add_i32(loc_5, 67108864) then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[589]((loc_0 / loc_1))
					reg_0 = FUNC_LIST[590](reg_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_0
				while true do
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 0, 1, 2, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(loc_4, 1)] or 4
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = rt_neg_f64(loc_2)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (3.141592653589793e0 - (loc_2 + -1.2246467991473532e-16))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = ((loc_2 + -1.2246467991473532e-16) + -3.141592653589793e0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 3), 44208))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[592] = --[[ atoi ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			loc_2 = loc_0
			loc_0 = rt_add_i32(loc_2, 1)
			loc_1 = rt_load_i32_i8(memory_at_0, loc_2)
			reg_0 = FUNC_LIST[593](loc_1)
			if reg_0 ~= 0 then
				continue
			end
			break
		end
		loc_3 = 1
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 2, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(bit_and(loc_1, 255), 43)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32_i8(memory_at_0, loc_0)
			loc_2 = loc_0
			break
		end
		loc_0 = 0
		loc_1 = rt_sub_i32(loc_1, 48)
		if loc_1 <= 9 then
			while true do
				while true do
					loc_0 = rt_sub_i32(rt_mul_i32(loc_0, 10), loc_1)
					loc_1 = rt_load_i32_i8(memory_at_0, loc_2 + 1)
					loc_2 = rt_add_i32(loc_2, 1)
					loc_1 = rt_sub_i32(loc_1, 48)
					if loc_1 < 10 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = (if loc_3 ~= 0 then rt_sub_i32(0, loc_0) else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[593] = --[[ __isspace ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_or((if loc_0 == 32 then 1 else 0), (if rt_sub_i32(loc_0, 9) < 5 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[594] = --[[ cos ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(32, 0))), 2147483647)
			if loc_3 <= 1072243195 then
				while true do
					loc_1 = 1e0
					reg_0 = loc_1
					if loc_3 < 1044816030 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[595](loc_0, 0e0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (loc_0 - loc_0)
			if loc_3 >= 2146435072 then
				break
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_2)
			loc_3 = reg_0
			loc_0 = rt_load_f64(memory_at_0, loc_2 + 8)
			loc_1 = rt_load_f64(memory_at_0, loc_2)
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 3, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(bit_and(loc_3, 3), 1)] or 0
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[595](loc_1, loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[597](loc_1, loc_0, 1)
					reg_0 = rt_neg_f64(reg_0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[595](loc_1, loc_0)
				reg_0 = rt_neg_f64(reg_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[597](loc_1, loc_0, 1)
			break
		end
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[595] = --[[ __cos ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_2 = (loc_0 * loc_0)
		loc_3 = (loc_2 * 5e-1)
		loc_4 = (1e0 - loc_3)
		reg_1 = ((1e0 - loc_4) - loc_3)
		loc_3 = (loc_2 * loc_2)
		reg_0 = (loc_4 + (reg_1 + ((loc_2 * ((loc_2 * ((loc_2 * ((loc_2 * 2.480158728947673e-5) + -1.388888888887411e-3)) + 4.16666666666666e-2)) + ((loc_3 * loc_3) * ((loc_2 * ((loc_2 * -1.1359647557788195e-11) + 2.087572321298175e-9)) + -2.7557314351390663e-7)))) - (loc_0 * loc_1))))
		break
	end
	return reg_0
end
FUNC_LIST[596] = --[[ __rem_pio2 ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					loc_12 = rt_reinterpret_i64_f64(loc_0)
					loc_6 = rt_wrap_i32_i64(rt_shr_u64(loc_12, rt_i64_from_u32(32, 0)))
					loc_8 = bit_and(loc_6, 2147483647)
					if loc_8 <= 1074752122 then
						while true do
							if bit_and(loc_6, 1048575) == 598523 then
								desired = 3
								break
							end
							if loc_8 <= 1073928572 then
								while true do
									if rt_ge_i64(loc_12, rt_i64_ZERO) then
										while true do
											loc_0 = (loc_0 + -1.5707963267341256e0)
											loc_2 = (loc_0 + -6.077100506506192e-11)
											rt_store_f64(memory_at_0, loc_1, loc_2)
											rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -6.077100506506192e-11))
											loc_6 = 1
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									loc_0 = (loc_0 + 1.5707963267341256e0)
									loc_2 = (loc_0 + 6.077100506506192e-11)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 6.077100506506192e-11))
									loc_6 = 4294967295
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							if rt_ge_i64(loc_12, rt_i64_ZERO) then
								while true do
									loc_0 = (loc_0 + -3.1415926534682512e0)
									loc_2 = (loc_0 + -1.2154201013012384e-10)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -1.2154201013012384e-10))
									loc_6 = 2
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							loc_0 = (loc_0 + 3.1415926534682512e0)
							loc_2 = (loc_0 + 1.2154201013012384e-10)
							rt_store_f64(memory_at_0, loc_1, loc_2)
							rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 1.2154201013012384e-10))
							loc_6 = 4294967294
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 <= 1075594811 then
						while true do
							if loc_8 <= 1075183036 then
								while true do
									if loc_8 == 1074977148 then
										desired = 3
										break
									end
									if rt_ge_i64(loc_12, rt_i64_ZERO) then
										while true do
											loc_0 = (loc_0 + -4.712388980202377e0)
											loc_2 = (loc_0 + -1.8231301519518578e-10)
											rt_store_f64(memory_at_0, loc_1, loc_2)
											rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -1.8231301519518578e-10))
											loc_6 = 3
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									loc_0 = (loc_0 + 4.712388980202377e0)
									loc_2 = (loc_0 + 1.8231301519518578e-10)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 1.8231301519518578e-10))
									loc_6 = 4294967293
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							if loc_8 == 1075388923 then
								desired = 3
								break
							end
							if rt_ge_i64(loc_12, rt_i64_ZERO) then
								while true do
									loc_0 = (loc_0 + -6.2831853069365025e0)
									loc_2 = (loc_0 + -2.430840202602477e-10)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -2.430840202602477e-10))
									loc_6 = 4
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							loc_0 = (loc_0 + 6.2831853069365025e0)
							loc_2 = (loc_0 + 2.430840202602477e-10)
							rt_store_f64(memory_at_0, loc_1, loc_2)
							rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 2.430840202602477e-10))
							loc_6 = 4294967292
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 > 1094263290 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = (((loc_0 * 6.366197723675814e-1) + 6.755399441055744e15) + -6.755399441055744e15)
				loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
				loc_4 = (loc_2 * 6.077100506506192e-11)
				loc_5 = (loc_3 - loc_4)
				loc_9 = (if loc_5 < -7.853981633974483e-1 then 1 else 0)
				while true do
					if math_abs(loc_2) < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = reg_0
				while true do
					if loc_9 ~= 0 then
						while true do
							loc_6 = rt_sub_i32(loc_6, 1)
							loc_2 = (loc_2 + -1e0)
							loc_4 = (loc_2 * 6.077100506506192e-11)
							loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if (if loc_5 > 7.853981633974483e-1 then 1 else 0) == 0 then
						break
					end
					loc_6 = rt_add_i32(loc_6, 1)
					loc_2 = (loc_2 + 1e0)
					loc_4 = (loc_2 * 6.077100506506192e-11)
					loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = (loc_3 - loc_4)
				rt_store_f64(memory_at_0, loc_1, loc_0)
				while true do
					loc_9 = rt_shr_u32(loc_8, 20)
					if rt_lt_i32(rt_sub_i32(loc_9, bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(52, 0))), 2047)), 17) then
						break
					end
					loc_0 = (loc_2 * 6.077100506303966e-11)
					loc_5 = (loc_3 - loc_0)
					loc_4 = ((loc_2 * 2.0222662487959506e-21) - ((loc_3 - loc_5) - loc_0))
					loc_0 = (loc_5 - loc_4)
					rt_store_f64(memory_at_0, loc_1, loc_0)
					if rt_lt_i32(rt_sub_i32(loc_9, bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(52, 0))), 2047)), 50) then
						while true do
							loc_3 = loc_5
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = (loc_2 * 2.0222662487111665e-21)
					loc_3 = (loc_5 - loc_0)
					loc_4 = ((loc_2 * 8.4784276603689e-32) - ((loc_5 - loc_3) - loc_0))
					loc_0 = (loc_3 - loc_4)
					rt_store_f64(memory_at_0, loc_1, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_f64(memory_at_0, loc_1 + 8, ((loc_3 - loc_0) - loc_4))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_8 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					rt_store_f64(memory_at_0, loc_1, loc_0)
					rt_store_f64(memory_at_0, loc_1 + 8, loc_0)
					loc_6 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = bit_or(rt_add_i32(loc_7, 16), 8)
			loc_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(rt_bit_and_i64(loc_12, rt_i64_from_u32(4294967295, 1048575)), rt_i64_from_u32(0, 1096810496)))
			loc_6 = rt_add_i32(loc_7, 16)
			loc_9 = 1
			while true do
				reg_0 = loc_6
				while true do
					if math_abs(loc_0) < 2.147483648e9 then
						while true do
							reg_1 = rt_truncate_f64(loc_0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_10 = reg_1
				loc_2 = rt_convert_f64_i32(loc_10)
				rt_store_f64(memory_at_0, reg_0, loc_2)
				loc_0 = ((loc_0 - loc_2) * 1.6777216e7)
				loc_10 = bit_and(loc_9, 1)
				loc_9 = 0
				loc_6 = loc_11
				if loc_10 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, loc_7 + 32, loc_0)
			loc_6 = 2
			while true do
				loc_9 = loc_6
				loc_6 = rt_sub_i32(loc_9, 1)
				if rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_7, 16), rt_shl_i32(loc_9, 3))) == 0e0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[598](rt_add_i32(loc_7, 16), loc_7, rt_sub_i32(rt_shr_u32(loc_8, 20), 1046), rt_add_i32(loc_9, 1), 1)
			loc_6 = reg_0
			loc_0 = rt_load_f64(memory_at_0, loc_7)
			if rt_lt_i64(loc_12, rt_i64_ZERO) then
				while true do
					rt_store_f64(memory_at_0, loc_1, rt_neg_f64(loc_0))
					rt_store_f64(memory_at_0, loc_1 + 8, rt_neg_f64(rt_load_f64(memory_at_0, loc_7 + 8)))
					loc_6 = rt_sub_i32(0, loc_6)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_f64(memory_at_0, loc_1, loc_0)
			rt_store_f64(memory_at_0, loc_1 + 8, rt_load_f64(memory_at_0, loc_7 + 8))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 48)
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[597] = --[[ __sin ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local desired
	while true do
		loc_3 = (loc_0 * loc_0)
		loc_5 = (((loc_3 * (loc_3 * loc_3)) * ((loc_3 * 1.58969099521155e-10) + -2.5050760253406863e-8)) + ((loc_3 * ((loc_3 * 2.7557313707070068e-6) + -1.984126982985795e-4)) + 8.33333333332249e-3))
		loc_4 = (loc_0 * loc_3)
		if loc_2 == 0 then
			while true do
				reg_0 = ((loc_4 * ((loc_3 * loc_5) + -1.6666666666666632e-1)) + loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (loc_0 - (((loc_3 * ((loc_1 * 5e-1) - (loc_4 * loc_5))) - loc_1) + (loc_4 * 1.6666666666666632e-1)))
		break
	end
	return reg_0
end
FUNC_LIST[598] = --[[ __rem_pio2_large ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_10
		loc_9 = rt_div_i32(rt_sub_i32(loc_2, 3), 24)
		loc_18 = (if rt_gt_i32(loc_9, 0) then loc_9 else 0)
		loc_12 = rt_add_i32(loc_2, rt_mul_i32(loc_18, 4294967272))
		loc_13 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), 44240))
		loc_14 = rt_sub_i32(loc_3, 1)
		if rt_ge_i32(rt_add_i32(loc_13, loc_14), 0) then
			while true do
				loc_8 = rt_add_i32(loc_3, loc_13)
				loc_2 = rt_sub_i32(loc_18, loc_14)
				loc_9 = 0
				while true do
					reg_0 = rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(loc_9, 3))
					if rt_lt_i32(loc_2, 0) then
						while true do
							reg_1 = 0e0
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_1 = rt_convert_f64_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), 44256)))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_5 = reg_1
					rt_store_f64(memory_at_0, reg_0, loc_5)
					loc_2 = rt_add_i32(loc_2, 1)
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_8 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_16 = rt_sub_i32(loc_12, 24)
		loc_8 = 0
		loc_11 = (if rt_gt_i32(loc_13, 0) then loc_13 else 0)
		loc_17 = (if rt_le_i32(loc_3, 0) then 1 else 0)
		while true do
			while true do
				if loc_17 ~= 0 then
					while true do
						loc_5 = 0e0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_9 = rt_add_i32(loc_8, loc_14)
				loc_2 = 0
				loc_5 = 0e0
				while true do
					loc_5 = ((rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), loc_0)) * rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(rt_sub_i32(loc_9, loc_2), 3)))) + loc_5)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			rt_store_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 3), loc_10), loc_5)
			loc_2 = (if loc_8 == loc_11 then 1 else 0)
			loc_8 = rt_add_i32(loc_8, 1)
			if loc_2 == 0 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_21 = rt_sub_i32(47, loc_12)
		loc_19 = rt_sub_i32(48, loc_12)
		loc_20 = (if rt_lt_i32(loc_12, 25) then 1 else 0)
		loc_22 = rt_sub_i32(loc_12, 25)
		loc_8 = loc_13
		while true do
			loc_5 = rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 3), loc_10))
			loc_2 = 0
			loc_9 = loc_8
			if rt_gt_i32(loc_8, 0) then
				while true do
					while true do
						loc_17 = rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))
						reg_0 = loc_17
						while true do
							while true do
								loc_6 = (loc_5 * 5.960464477539063e-8)
								if math_abs(loc_6) < 2.147483648e9 then
									while true do
										reg_1 = rt_truncate_f64(loc_6)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_1 = 2147483648
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_11 = reg_1
							loc_6 = rt_convert_f64_i32(loc_11)
							loc_5 = ((loc_6 * -1.6777216e7) + loc_5)
							if math_abs(loc_5) < 2.147483648e9 then
								while true do
									reg_1 = rt_truncate_f64(loc_5)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_1 = 2147483648
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_11 = reg_1
						rt_store_i32(memory_at_0, reg_0, loc_11)
						loc_9 = rt_sub_i32(loc_9, 1)
						loc_5 = (rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_9, 3), loc_10)) + loc_6)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_8 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			while true do
				reg_0 = FUNC_LIST[543](loc_5, loc_16)
				loc_5 = reg_0
				reg_1 = FUNC_LIST[599]((loc_5 * 1.25e-1))
				loc_5 = (loc_5 + (reg_1 * -8e0))
				if math_abs(loc_5) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_14 = reg_0
			loc_5 = (loc_5 - rt_convert_f64_i32(loc_14))
			while true do
				while true do
					while true do
						while true do
							if loc_20 == 0 then
								while true do
									loc_23 = rt_add_i32(loc_10, rt_shl_i32(loc_8, 2))
									loc_2 = rt_add_i32(loc_23, 476)
									reg_0 = loc_2
									loc_2 = rt_load_i32(memory_at_0, loc_23 + 476)
									reg_1 = loc_2
									loc_2 = rt_shr_i32(loc_2, loc_19)
									loc_9 = rt_sub_i32(reg_1, rt_shl_i32(loc_2, loc_19))
									rt_store_i32(memory_at_0, reg_0, loc_9)
									loc_14 = rt_add_i32(loc_2, loc_14)
									reg_0 = rt_shr_i32(loc_9, loc_21)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_16 ~= 0 then
								desired = 4
								break
							end
							reg_0 = rt_shr_i32(rt_load_i32(memory_at_0, rt_add_i32(loc_10, rt_shl_i32(loc_8, 2)) + 476), 23)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_15 = reg_0
						if rt_le_i32(loc_15, 0) then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_15 = 2
					if loc_5 >= 5e-1 then
						break
					end
					loc_15 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				loc_11 = 0
				loc_9 = 1
				if rt_gt_i32(loc_8, 0) then
					while true do
						while true do
							loc_17 = rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))
							loc_9 = rt_load_i32(memory_at_0, loc_17)
							while true do
								while true do
									reg_0 = loc_17
									if loc_11 ~= 0 then
										while true do
											reg_1 = 16777215
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									else
										while true do
											if loc_9 == 0 then
												desired = 6
												break
											end
											reg_1 = 16777216
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_11 = reg_1
									rt_store_i32(memory_at_0, reg_0, rt_sub_i32(loc_11, loc_9))
									loc_11 = 1
									reg_0 = 0
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_11 = 0
								reg_0 = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_9 = reg_0
							loc_2 = rt_add_i32(loc_2, 1)
							if loc_8 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_20 ~= 0 then
						break
					end
					loc_2 = 8388607
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][loc_22] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 4194303
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_24 = rt_add_i32(loc_10, rt_shl_i32(loc_8, 2))
					loc_11 = rt_add_i32(loc_24, 476)
					rt_store_i32(memory_at_0, loc_11, bit_and(loc_2, rt_load_i32(memory_at_0, loc_24 + 476)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_14 = rt_add_i32(loc_14, 1)
				if loc_15 ~= 2 then
					break
				end
				loc_5 = (1e0 - loc_5)
				loc_15 = 2
				if loc_9 ~= 0 then
					break
				end
				reg_1 = FUNC_LIST[543](1e0, loc_16)
				loc_5 = (loc_5 - reg_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			while true do
				while true do
					if loc_5 == 0e0 then
						while true do
							loc_9 = 0
							loc_2 = loc_8
							if rt_ge_i32(loc_13, loc_2) then
								desired = 2
								break
							end
							while true do
								loc_2 = rt_sub_i32(loc_2, 1)
								loc_9 = bit_or(loc_9, rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))))
								if rt_gt_i32(loc_2, loc_13) then
									continue
								end
								break
							end
							if desired then
								break
							end
							if loc_9 == 0 then
								desired = 2
								break
							end
							loc_12 = loc_16
							while true do
								loc_12 = rt_sub_i32(loc_12, 24)
								loc_8 = rt_sub_i32(loc_8, 1)
								if rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_8, 2))) == 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						reg_0 = FUNC_LIST[543](loc_5, rt_sub_i32(24, loc_12))
						loc_5 = reg_0
						if loc_5 >= 1.6777216e7 then
							while true do
								loc_3 = rt_shl_i32(loc_8, 2)
								loc_3 = rt_add_i32(loc_3, rt_add_i32(loc_10, 480))
								reg_0 = loc_3
								while true do
									while true do
										loc_6 = (loc_5 * 5.960464477539063e-8)
										if math_abs(loc_6) < 2.147483648e9 then
											while true do
												reg_1 = rt_truncate_f64(loc_6)
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										reg_1 = 2147483648
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_2 = reg_1
									loc_5 = ((rt_convert_f64_i32(loc_2) * -1.6777216e7) + loc_5)
									if math_abs(loc_5) < 2.147483648e9 then
										while true do
											reg_1 = rt_truncate_f64(loc_5)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									reg_1 = 2147483648
									break
								end
								if desired then
									break
								end
								loc_9 = reg_1
								rt_store_i32(memory_at_0, reg_0, loc_9)
								loc_8 = rt_add_i32(loc_8, 1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if math_abs(loc_5) < 2.147483648e9 then
								while true do
									reg_0 = rt_truncate_f64(loc_5)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = reg_0
						loc_12 = loc_16
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_8, 2)), loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[543](1e0, loc_12)
				loc_5 = reg_0
				if rt_ge_i32(loc_8, 0) then
					while true do
						loc_3 = loc_8
						while true do
							loc_2 = loc_3
							rt_store_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), loc_10), (loc_5 * rt_convert_f64_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))))))
							loc_3 = rt_sub_i32(loc_2, 1)
							loc_5 = (loc_5 * 5.960464477539063e-8)
							if loc_2 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_9 = loc_8
						while true do
							loc_5 = 0e0
							loc_2 = 0
							loc_11 = rt_sub_i32(loc_8, loc_9)
							loc_0 = (if rt_gt_i32(loc_11, loc_13) then loc_13 else loc_11)
							if rt_ge_i32(loc_0, 0) then
								while true do
									while true do
										loc_5 = ((rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), 47024)) * rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(rt_add_i32(loc_2, loc_9), 3), loc_10))) + loc_5)
										loc_3 = (if loc_0 ~= loc_2 then 1 else 0)
										loc_2 = rt_add_i32(loc_2, 1)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_11, 3)), loc_5)
							loc_2 = (if rt_gt_i32(loc_9, 0) then 1 else 0)
							loc_9 = rt_sub_i32(loc_9, 1)
							if loc_2 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[2] then
										br_map[2] = (function()
											return { [0] = 2, 2, 0, }
										end)()
									end
									temp = br_map[2][rt_sub_i32(loc_4, 1)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 5
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if rt_le_i32(loc_8, 0) then
										break
									end
									loc_0 = rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_8, 3))
									loc_5 = rt_load_f64(memory_at_0, loc_0)
									loc_2 = loc_8
									while true do
										loc_3 = rt_sub_i32(loc_2, 1)
										loc_9 = rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_3, 3))
										loc_6 = rt_load_f64(memory_at_0, loc_9)
										reg_2 = loc_6
										loc_6 = (loc_6 + loc_5)
										rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3)), (loc_5 + (reg_2 - loc_6)))
										rt_store_f64(memory_at_0, loc_9, loc_6)
										loc_9 = (if loc_2 > 1 then 1 else 0)
										loc_5 = loc_6
										loc_2 = loc_3
										if loc_9 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_8 == 1 then
										break
									end
									loc_5 = rt_load_f64(memory_at_0, loc_0)
									loc_2 = loc_8
									while true do
										loc_3 = rt_sub_i32(loc_2, 1)
										loc_9 = rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_3, 3))
										loc_6 = rt_load_f64(memory_at_0, loc_9)
										reg_2 = loc_6
										loc_6 = (loc_6 + loc_5)
										rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3)), (loc_5 + (reg_2 - loc_6)))
										rt_store_f64(memory_at_0, loc_9, loc_6)
										loc_9 = (if loc_2 > 2 then 1 else 0)
										loc_5 = loc_6
										loc_2 = loc_3
										if loc_9 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										loc_7 = (loc_7 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_8, 3))))
										loc_2 = (if rt_gt_i32(loc_8, 2) then 1 else 0)
										loc_8 = rt_sub_i32(loc_8, 1)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = rt_load_f64(memory_at_0, loc_10 + 160)
								if loc_15 ~= 0 then
									desired = 4
									break
								end
								rt_store_f64(memory_at_0, loc_1, loc_5)
								loc_5 = rt_load_f64(memory_at_0, loc_10 + 168)
								rt_store_f64(memory_at_0, loc_1 + 16, loc_7)
								rt_store_f64(memory_at_0, loc_1 + 8, loc_5)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = 0e0
							if rt_ge_i32(loc_8, 0) then
								while true do
									while true do
										loc_2 = loc_8
										loc_8 = rt_sub_i32(loc_2, 1)
										loc_5 = (loc_5 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3))))
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_f64(memory_at_0, loc_1, (if loc_15 ~= 0 then rt_neg_f64(loc_5) else loc_5))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = 0e0
						if rt_ge_i32(loc_8, 0) then
							while true do
								loc_3 = loc_8
								while true do
									loc_2 = loc_3
									loc_3 = rt_sub_i32(loc_2, 1)
									loc_5 = (loc_5 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3))))
									if loc_2 ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_f64(memory_at_0, loc_1, (if loc_15 ~= 0 then rt_neg_f64(loc_5) else loc_5))
						loc_5 = (rt_load_f64(memory_at_0, loc_10 + 160) - loc_5)
						loc_2 = 1
						if rt_gt_i32(loc_8, 0) then
							while true do
								while true do
									loc_5 = (loc_5 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3))))
									loc_3 = (if loc_2 ~= loc_8 then 1 else 0)
									loc_2 = rt_add_i32(loc_2, 1)
									if loc_3 ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_f64(memory_at_0, loc_1 + 8, (if loc_15 ~= 0 then rt_neg_f64(loc_5) else loc_5))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, rt_neg_f64(loc_5))
					loc_5 = rt_load_f64(memory_at_0, loc_10 + 168)
					rt_store_f64(memory_at_0, loc_1 + 16, rt_neg_f64(loc_7))
					rt_store_f64(memory_at_0, loc_1 + 8, rt_neg_f64(loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_10, 560)
				reg_0 = bit_and(loc_14, 7)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_2 = 1
			while true do
				loc_9 = loc_2
				loc_2 = rt_add_i32(loc_9, 1)
				if rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(rt_sub_i32(loc_13, loc_9), 2))) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_11 = rt_add_i32(loc_8, loc_9)
			while true do
				loc_9 = rt_add_i32(loc_3, loc_8)
				loc_8 = rt_add_i32(loc_8, 1)
				rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(loc_9, 3)), rt_convert_f64_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_add_i32(loc_18, loc_8), 2), 44256))))
				loc_2 = 0
				loc_5 = 0e0
				if rt_gt_i32(loc_3, 0) then
					while true do
						while true do
							loc_5 = ((rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), loc_0)) * rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(rt_sub_i32(loc_9, loc_2), 3)))) + loc_5)
							loc_2 = rt_add_i32(loc_2, 1)
							if loc_3 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				rt_store_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 3), loc_10), loc_5)
				if rt_lt_i32(loc_8, loc_11) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_8 = loc_11
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[599] = --[[ floor ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = math_floor(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[600] = --[[ cosh ]] function(loc_0)
	local loc_1 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_0 = math_abs(loc_0)
			loc_1 = rt_reinterpret_i64_f64(loc_0)
			if rt_le_u64(loc_1, rt_i64_from_u32(4294967295, 1072049729)) then
				while true do
					reg_0 = 1e0
					if rt_lt_u64(loc_1, rt_i64_from_u32(0, 1045430272)) then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[601](loc_0)
					loc_0 = reg_0
					reg_0 = (loc_0 * loc_0)
					loc_0 = (loc_0 + 1e0)
					reg_0 = ((reg_0 / (loc_0 + loc_0)) + 1e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_le_u64(loc_1, rt_i64_from_u32(4294967295, 1082535489)) then
				while true do
					reg_0 = FUNC_LIST[522](loc_0)
					loc_0 = reg_0
					reg_0 = ((loc_0 + (1e0 / loc_0)) * 5e-1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[602](loc_0, 1e0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[601] = --[[ expm1 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_6 = rt_reinterpret_i64_f64(loc_0)
							loc_5 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_6, rt_i64_from_u32(32, 0))), 2147483647)
							if loc_5 >= 1078159482 then
								while true do
									reg_0 = FUNC_LIST[528](loc_0)
									if rt_gt_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then
										desired = 1
										break
									end
									if rt_lt_i64(loc_6, rt_i64_ZERO) then
										while true do
											reg_0 = -1e0
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									if (if loc_0 > 7.09782712893384e2 then 1 else 0) == 0 then
										desired = 5
										break
									end
									reg_0 = (loc_0 * 8.98846567431158e307)
									desired = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_5 < 1071001155 then
								desired = 3
								break
							end
							if loc_5 > 1072734897 then
								break
							end
							if rt_ge_i64(loc_6, rt_i64_ZERO) then
								while true do
									loc_5 = 1
									loc_2 = 1.9082149292705877e-10
									reg_0 = (loc_0 + -6.931471803691238e-1)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = 4294967295
							loc_2 = -1.9082149292705877e-10
							reg_0 = (loc_0 + 6.931471803691238e-1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_1 = ((loc_0 * 1.4426950408889634e0) + rt_copysign_f64(5e-1, loc_0))
							if math_abs(loc_1) < 2.147483648e9 then
								while true do
									reg_0 = rt_truncate_f64(loc_1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = reg_0
						loc_1 = rt_convert_f64_i32(loc_5)
						loc_2 = (loc_1 * 1.9082149292705877e-10)
						reg_0 = (loc_0 + (loc_1 * -6.931471803691238e-1))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					loc_0 = (loc_1 - loc_2)
					loc_2 = ((loc_1 - loc_0) - loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 < 1016070144 then
					desired = 1
					break
				end
				loc_5 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = (loc_0 * 5e-1)
			loc_1 = (loc_0 * loc_3)
			loc_4 = ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * -2.0109921818362437e-7) + 4.008217827329362e-6)) + -7.93650757867488e-5)) + 1.5873015872548146e-3)) + -3.333333333333313e-2)) + 1e0)
			loc_3 = (3e0 - (loc_4 * loc_3))
			loc_3 = (loc_1 * ((loc_4 - loc_3) / (6e0 - (loc_0 * loc_3))))
			if loc_5 == 0 then
				while true do
					reg_0 = (loc_0 - ((loc_0 * loc_3) - loc_1))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = (((loc_0 * (loc_3 - loc_2)) - loc_2) - loc_1)
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, 1, }
							end)()
						end
						temp = br_map[1][rt_add_i32(loc_5, 1)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (((loc_0 - loc_1) * 5e-1) + -5e-1)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_0 < -2.5e-1 then
					while true do
						reg_0 = ((loc_1 - (loc_0 + 5e-1)) * -2e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = (loc_0 - loc_1)
				reg_0 = ((loc_0 + loc_0) + 1e0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_reinterpret_f64_i64(rt_shl_i64(rt_extend_i64_u32(rt_add_i32(loc_5, 1023)), rt_i64_from_u32(52, 0)))
			if loc_5 >= 57 then
				while true do
					loc_0 = ((loc_0 - loc_1) + 1e0)
					reg_0 = ((if loc_5 == 1024 then ((loc_0 + loc_0) * 8.98846567431158e307) else (loc_0 * loc_2)) + -1e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_reinterpret_f64_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(1023, loc_5)), rt_i64_from_u32(52, 0)))
			if loc_5 <= 19 then
				while true do
					reg_0 = ((1e0 - loc_3) + (loc_0 - loc_1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = ((loc_0 - (loc_1 + loc_3)) + 1e0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = reg_0
			loc_0 = (loc_0 * loc_2)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[602] = --[[ __expo2 ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[522]((loc_0 + -1.4160996898839683e3))
		reg_0 = (((loc_1 * 2.247116418577895e307) * reg_1) * 2.247116418577895e307)
		break
	end
	return reg_0
end
FUNC_LIST[603] = --[[ __math_xflow ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[531]((if loc_0 ~= 0 then rt_neg_f64(loc_1) else loc_1))
		reg_0 = (loc_1 * reg_1)
		break
	end
	return reg_0
end
FUNC_LIST[604] = --[[ memchr ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = (if loc_2 ~= 0 then 1 else 0)
		while true do
			while true do
				while true do
					if bit_and(loc_0, 3) == 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					loc_4 = bit_and(loc_1, 255)
					while true do
						if loc_4 == rt_load_i32_u8(memory_at_0, loc_0) then
							desired = 2
							break
						end
						loc_2 = rt_sub_i32(loc_2, 1)
						loc_3 = (if loc_2 ~= 0 then 1 else 0)
						loc_0 = rt_add_i32(loc_0, 1)
						if bit_and(loc_0, 3) == 0 then
							desired = 3
							break
						end
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 == 0 then
					desired = 1
					break
				end
				while true do
					if rt_load_i32_u8(memory_at_0, loc_0) == bit_and(loc_1, 255) then
						break
					end
					if loc_2 < 4 then
						break
					end
					loc_4 = rt_mul_i32(bit_and(loc_1, 255), 16843009)
					while true do
						loc_3 = bit_xor(loc_4, rt_load_i32(memory_at_0, loc_0))
						if bit_and(bit_or(rt_sub_i32(16843008, loc_3), loc_3), 2155905152) ~= 2155905152 then
							desired = 2
							break
						end
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_sub_i32(loc_2, 4)
						if loc_2 > 3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = bit_and(loc_1, 255)
			while true do
				if rt_load_i32_u8(memory_at_0, loc_0) == loc_3 then
					while true do
						reg_0 = loc_0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_0 = rt_add_i32(loc_0, 1)
				loc_2 = rt_sub_i32(loc_2, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[605] = --[[ round ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = rt_i64_ZERO
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_reinterpret_i64_f64(loc_0)
		loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(52, 0))), 2047)
		if loc_3 <= 1074 then
			while true do
				if loc_3 <= 1021 then
					while true do
						reg_0 = (loc_0 * 0e0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				while true do
					loc_0 = math_abs(loc_0)
					loc_1 = (((loc_0 + 4.503599627370496e15) + -4.503599627370496e15) - loc_0)
					if loc_1 > 5e-1 then
						while true do
							reg_0 = ((loc_0 + loc_1) + -1e0)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_0 = (loc_0 + loc_1)
					reg_0 = loc_0
					if (if loc_1 <= -5e-1 then 1 else 0) == 0 then
						break
					end
					reg_0 = (loc_0 + 1e0)
					break
				end
				if desired then
					break
				end
				loc_0 = reg_0
				reg_0 = (if rt_lt_i64(loc_2, rt_i64_ZERO) then rt_neg_f64(loc_0) else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[606] = --[[ sin ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(32, 0))), 2147483647)
			if loc_2 <= 1072243195 then
				while true do
					if loc_2 < 1045430272 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[597](loc_0, 0e0, 0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_1)
			loc_2 = reg_0
			loc_0 = rt_load_f64(memory_at_0, loc_1 + 8)
			loc_3 = rt_load_f64(memory_at_0, loc_1)
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 3, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(bit_and(loc_2, 3), 1)] or 0
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[597](loc_3, loc_0, 1)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[595](loc_3, loc_0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[597](loc_3, loc_0, 1)
				loc_0 = rt_neg_f64(reg_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[595](loc_3, loc_0)
			loc_0 = rt_neg_f64(reg_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[607] = --[[ sinh ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = rt_copysign_f64(5e-1, loc_0)
		while true do
			loc_1 = math_abs(loc_0)
			loc_3 = rt_reinterpret_i64_f64(loc_1)
			if rt_le_u64(loc_3, rt_i64_from_u32(4294967295, 1082535489)) then
				while true do
					reg_0 = FUNC_LIST[601](loc_1)
					loc_1 = reg_0
					if rt_le_u64(loc_3, rt_i64_from_u32(4294967295, 1072693247)) then
						while true do
							if rt_lt_u64(loc_3, rt_i64_from_u32(0, 1045430272)) then
								desired = 1
								break
							end
							reg_0 = (loc_2 * ((loc_1 + loc_1) - ((loc_1 * loc_1) / (loc_1 + 1e0))))
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = (loc_2 * (loc_1 + (loc_1 / (loc_1 + 1e0))))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[602](loc_1, (loc_2 + loc_2))
			loc_0 = reg_0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[608] = --[[ snprintf ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 12, loc_3)
		reg_0 = FUNC_LIST[609](loc_0, loc_1, loc_2, loc_3)
		loc_3 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[609] = --[[ vsnprintf ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_4
		loc_0 = (if loc_1 ~= 0 then loc_0 else rt_add_i32(loc_4, 158))
		rt_store_i32(memory_at_0, loc_4 + 148, loc_0)
		loc_5 = rt_sub_i32(loc_1, 1)
		rt_store_i32(memory_at_0, loc_4 + 152, (if loc_1 >= loc_5 then loc_5 else 0))
		reg_0 = FUNC_LIST[519](loc_4, 0, 144)
		loc_4 = reg_0
		rt_store_i32(memory_at_0, loc_4 + 76, 4294967295)
		rt_store_i32(memory_at_0, loc_4 + 36, 197)
		rt_store_i32(memory_at_0, loc_4 + 80, 4294967295)
		rt_store_i32(memory_at_0, loc_4 + 44, rt_add_i32(loc_4, 159))
		rt_store_i32(memory_at_0, loc_4 + 84, rt_add_i32(loc_4, 148))
		rt_store_i32_n8(memory_at_0, loc_0, 0)
		reg_0 = FUNC_LIST[631](loc_4, loc_2, loc_3)
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 160)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[610] = --[[ strnlen ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[604](loc_0, 0, loc_1)
		loc_2 = reg_0
		reg_0 = (if loc_2 ~= 0 then rt_sub_i32(loc_2, loc_0) else loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[611] = --[[ strspn ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		rt_store_i64(memory_at_0, loc_4 + 24, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 16, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4 + 8, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_4, rt_i64_ZERO)
		loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
		if loc_2 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if rt_load_i32_u8(memory_at_0, loc_1 + 1) == 0 then
			while true do
				loc_1 = loc_0
				while true do
					loc_3 = loc_1
					loc_1 = rt_add_i32(loc_3, 1)
					if loc_2 == rt_load_i32_u8(memory_at_0, loc_3) then
						continue
					end
					break
				end
				if desired then
					break
				end
				reg_0 = rt_sub_i32(loc_3, loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 3), 28), loc_4)
			rt_store_i32(memory_at_0, loc_3, bit_or(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(1, loc_2)))
			loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
			loc_1 = rt_add_i32(loc_1, 1)
			if loc_2 ~= 0 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = loc_0
		while true do
			loc_2 = rt_load_i32_u8(memory_at_0, loc_0)
			if loc_2 == 0 then
				break
			end
			loc_1 = loc_0
			while true do
				if bit_and(rt_shr_u32(rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_2, 3), 28), loc_4)), loc_2), 1) == 0 then
					while true do
						loc_3 = loc_1
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
				loc_3 = rt_add_i32(loc_1, 1)
				loc_1 = loc_3
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = rt_sub_i32(loc_3, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[612] = --[[ strtod ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[613](loc_2, loc_0, loc_1)
		reg_0 = FUNC_LIST[569](rt_load_i64(memory_at_0, loc_2), rt_load_i64(memory_at_0, loc_2 + 8))
		loc_3 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[613] = --[[ strtox ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 60, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 24, 4294967295)
		FUNC_LIST[614](rt_add_i32(loc_3, 16))
		FUNC_LIST[615](loc_3, rt_add_i32(loc_3, 16))
		loc_4 = rt_load_i64(memory_at_0, loc_3 + 8)
		loc_5 = rt_load_i64(memory_at_0, loc_3)
		if loc_2 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 136), rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 20), rt_load_i32(memory_at_0, loc_3 + 60)), loc_1)))
				break
			end
		end
		rt_store_i64(memory_at_0, loc_0 + 8, loc_4)
		rt_store_i64(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 160)
		break
	end
end
FUNC_LIST[614] = --[[ __shlim ]] function(loc_0)
	while true do
		rt_store_i64(memory_at_0, loc_0 + 112, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 104, rt_load_i32(memory_at_0, loc_0 + 8))
		rt_store_i64(memory_at_0, loc_0 + 120, rt_extend_i64_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), rt_load_i32(memory_at_0, loc_0 + 4))))
		break
	end
end
FUNC_LIST[615] = --[[ __floatscan ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
				if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
						reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[616](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_2 = reg_0
			reg_0 = FUNC_LIST[593](loc_2)
			if reg_0 ~= 0 then
				continue
			end
			break
		end
		loc_6 = 1
		while true do
			while true do
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 0, 1, 0, }
					end)()
				end
				temp = br_map[1][rt_sub_i32(loc_2, 43)] or 1
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = (if loc_2 == 45 then 4294967295 else 1)
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
				while true do
					rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
					loc_2 = rt_load_i32_u8(memory_at_0, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[616](loc_1)
			loc_2 = reg_0
			break
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_4 = bit_and(loc_2, 4294967263)
							if loc_4 == 78 then
								while true do
									while true do
										if loc_3 == 2 then
											desired = 4
											break
										end
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
											if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
												while true do
													rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
													reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											reg_0 = FUNC_LIST[616](loc_1)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										loc_2 = reg_0
										loc_4 = rt_add_i32(loc_3, 3441)
										loc_3 = rt_add_i32(loc_3, 1)
										if rt_load_i32_i8(memory_at_0, loc_4) == bit_or(loc_2, 32) then
											continue
										end
										desired = 5
										break
									end
									if desired then
										break
									end
									error("out of code bounds")
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 ~= 73 then
								desired = 2
								break
							end
							while true do
								while true do
									loc_4 = loc_3
									if loc_4 == 7 then
										desired = 6
										break
									end
									while true do
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
										if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
											while true do
												rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
												reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										reg_0 = FUNC_LIST[616](loc_1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_2 = reg_0
									loc_3 = rt_add_i32(loc_4, 1)
									if rt_load_i32_i8(memory_at_0, rt_add_i32(loc_4, 1055)) == bit_or(loc_2, 32) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if loc_4 == 2 then
										while true do
											loc_3 = 3
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_4 == 7 then
										desired = 6
										break
									end
									if loc_4 < 3 then
										desired = 5
										break
									end
									if loc_3 == 8 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = rt_load_i64(memory_at_0, loc_1 + 112)
								if rt_ge_i64(loc_7, rt_i64_ZERO) then
									while true do
										rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_3 < 4 then
									break
								end
								loc_2 = (if rt_lt_i64(loc_7, rt_i64_ZERO) then 1 else 0)
								while true do
									if loc_2 == 0 then
										while true do
											rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_3 = rt_sub_i32(loc_3, 1)
									if loc_3 > 3 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[570](rt_add_i32(loc_5, 32), (rt_convert_f64_i32(loc_6) * math.huge))
							loc_8 = rt_load_i64(memory_at_0, loc_5 + 40)
							loc_7 = rt_load_i64(memory_at_0, loc_5 + 32)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if not br_map[2] then
							br_map[2] = (function()
								return { [0] = 2, 1, 1, 0, }
							end)()
						end
						temp = br_map[2][loc_3] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
								while true do
									rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
									reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[616](loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = reg_0
						if loc_2 == 40 then
							while true do
								loc_3 = 1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = rt_i64_from_u32(0, 2147450880)
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
								while true do
									rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
									reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[616](loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = reg_0
						loc_4 = rt_sub_i32(loc_2, 65)
						while true do
							while true do
								if rt_sub_i32(loc_2, 48) < 10 then
									break
								end
								if loc_4 < 26 then
									break
								end
								loc_4 = rt_sub_i32(loc_2, 97)
								if loc_2 == 95 then
									break
								end
								if loc_4 >= 26 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = rt_add_i32(loc_3, 1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = rt_i64_from_u32(0, 2147450880)
					if loc_2 == 41 then
						desired = 1
						break
					end
					loc_9 = rt_load_i64(memory_at_0, loc_1 + 112)
					if rt_ge_i64(loc_9, rt_i64_ZERO) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_3 == 0 then
						desired = 1
						break
					end
					while true do
						if rt_ge_i64(loc_9, rt_i64_ZERO) then
							while true do
								rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_3 = rt_sub_i32(loc_3, 1)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_ge_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[516]()
				rt_store_i32(memory_at_0, reg_0, 28)
				FUNC_LIST[614](loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 ~= 48 then
					break
				end
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_3 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_3, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[616](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = reg_0
				if bit_and(loc_3, 4294967263) == 88 then
					while true do
						FUNC_LIST[619](loc_5, loc_1, loc_6)
						loc_8 = rt_load_i64(memory_at_0, loc_5 + 8)
						loc_7 = rt_load_i64(memory_at_0, loc_5)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[620](rt_add_i32(loc_5, 16), loc_1, loc_2, loc_6)
			loc_8 = rt_load_i64(memory_at_0, loc_5 + 24)
			loc_7 = rt_load_i64(memory_at_0, loc_5 + 16)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_7)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_8)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 48)
		break
	end
end
FUNC_LIST[616] = --[[ __shgetc ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_4 = rt_load_i64(memory_at_0, loc_0 + 112)
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
			loc_5 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 120), rt_extend_i64_i32(rt_sub_i32(loc_1, loc_2)))
			if bit_and((if rt_ne_i64(loc_4, rt_i64_ZERO) then 1 else 0), (if rt_ge_i64(loc_5, loc_4) then 1 else 0)) ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[617](loc_0)
					loc_2 = reg_0
					if rt_ge_i32(loc_2, 0) then
						desired = 1
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
					reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			rt_store_i64(memory_at_0, loc_0 + 112, rt_i64_from_u32(4294967295, 4294967295))
			rt_store_i32(memory_at_0, loc_0 + 104, loc_1)
			rt_store_i64(memory_at_0, loc_0 + 120, rt_add_i64(rt_extend_i64_i32(rt_sub_i32(loc_2, loc_1)), loc_5))
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = rt_add_i64(loc_5, rt_i64_ONE)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		while true do
			loc_4 = rt_load_i64(memory_at_0, loc_0 + 112)
			if rt_eq_i64(loc_4, rt_i64_ZERO) then
				break
			end
			loc_4 = rt_sub_i64(loc_4, loc_5)
			if rt_ge_i64(loc_4, rt_extend_i64_i32(rt_sub_i32(loc_3, loc_1))) then
				break
			end
			loc_3 = rt_add_i32(rt_wrap_i32_i64(loc_4), loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 104, loc_3)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 44)
		rt_store_i64(memory_at_0, loc_0 + 120, rt_add_i64(rt_extend_i64_i32(rt_sub_i32(loc_3, loc_1)), loc_5))
		if loc_1 <= loc_3 then
			while true do
				rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_1, 1), loc_2)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[617] = --[[ __uflow ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		loc_2 = 4294967295
		while true do
			reg_0 = FUNC_LIST[618](loc_0)
			if reg_0 ~= 0 then
				break
			end
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 32)](loc_0, rt_add_i32(loc_1, 15), 1)
			if reg_0 ~= 1 then
				break
			end
			loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 15)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[618] = --[[ __toread ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
		rt_store_i32(memory_at_0, loc_0 + 72, bit_or(rt_sub_i32(loc_1, 1), loc_1))
		if rt_load_i32(memory_at_0, loc_0 + 20) ~= rt_load_i32(memory_at_0, loc_0 + 28) then
			while true do
				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 36)](loc_0, 0, 0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 28, 0)
		rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		if bit_and(loc_1, 4) ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0, bit_or(loc_1, 32))
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 44), rt_load_i32(memory_at_0, loc_0 + 48))
		rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_2)
		reg_0 = rt_shr_i32(rt_shl_i32(loc_1, 27), 31)
		break
	end
	return reg_0
end
FUNC_LIST[619] = --[[ hexfloat ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 432)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
				while true do
					rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
					reg_0 = rt_load_i32_u8(memory_at_0, loc_4)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[616](loc_1)
			break
		end
		loc_4 = reg_0
		while true do
			while true do
				while true do
					while true do
						if loc_4 ~= 48 then
							while true do
								if loc_4 ~= 46 then
									desired = 1
									break
								end
								loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
								if loc_4 == rt_load_i32(memory_at_0, loc_1 + 104) then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
								reg_0 = rt_load_i32_u8(memory_at_0, loc_4)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
						if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
							while true do
								loc_7 = 1
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
								loc_4 = rt_load_i32_u8(memory_at_0, loc_4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								loc_7 = 1
								reg_0 = FUNC_LIST[616](loc_1)
								loc_4 = reg_0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[616](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			if loc_4 ~= 48 then
				while true do
					loc_6 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_15 = rt_sub_i64(loc_15, rt_i64_ONE)
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[616](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_4 = reg_0
				if loc_4 == 48 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = 1
			loc_7 = 1
			break
		end
		loc_13 = rt_i64_from_u32(0, 1073676288)
		while true do
			while true do
				while true do
					loc_9 = loc_4
					while true do
						while true do
							loc_10 = rt_sub_i32(loc_4, 48)
							if loc_10 < 10 then
								break
							end
							loc_9 = bit_or(loc_4, 32)
							if bit_and((if loc_4 ~= 46 then 1 else 0), (if rt_sub_i32(loc_9, 97) > 5 then 1 else 0)) ~= 0 then
								desired = 1
								break
							end
							if loc_4 ~= 46 then
								break
							end
							if loc_6 ~= 0 then
								desired = 3
								break
							end
							loc_6 = 1
							loc_15 = loc_12
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = (if rt_gt_i32(loc_4, 57) then rt_sub_i32(loc_9, 87) else loc_10)
						while true do
							if rt_le_i64(loc_12, rt_i64_from_u32(7, 0)) then
								while true do
									loc_5 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_4)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_le_u64(loc_12, rt_i64_from_u32(28, 0)) then
								while true do
									FUNC_LIST[571](rt_add_i32(loc_3, 48), loc_4)
									FUNC_LIST[561](rt_add_i32(loc_3, 32), loc_16, loc_13, rt_i64_ZERO, rt_i64_from_u32(0, 1073414144))
									loc_16 = rt_load_i64(memory_at_0, loc_3 + 32)
									loc_13 = rt_load_i64(memory_at_0, loc_3 + 40)
									FUNC_LIST[561](rt_add_i32(loc_3, 16), rt_load_i64(memory_at_0, loc_3 + 48), rt_load_i64(memory_at_0, loc_3 + 56), loc_16, loc_13)
									FUNC_LIST[567](loc_3, rt_load_i64(memory_at_0, loc_3 + 16), rt_load_i64(memory_at_0, loc_3 + 24), loc_11, loc_14)
									loc_14 = rt_load_i64(memory_at_0, loc_3 + 8)
									loc_11 = rt_load_i64(memory_at_0, loc_3)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 == 0 then
								break
							end
							if loc_8 ~= 0 then
								break
							end
							FUNC_LIST[561](rt_add_i32(loc_3, 80), loc_16, loc_13, rt_i64_ZERO, rt_i64_from_u32(0, 1073610752))
							FUNC_LIST[567](rt_sub_i32(loc_3, 4294967232), rt_load_i64(memory_at_0, loc_3 + 80), rt_load_i64(memory_at_0, loc_3 + 88), loc_11, loc_14)
							loc_14 = rt_load_i64(memory_at_0, loc_3 + 72)
							loc_8 = 1
							loc_11 = rt_load_i64(memory_at_0, loc_3 + 64)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_12 = rt_add_i64(loc_12, rt_i64_ONE)
						loc_7 = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
							loc_4 = rt_load_i32_u8(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = FUNC_LIST[616](loc_1)
							loc_4 = reg_0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 46
			break
		end
		while true do
			if loc_7 == 0 then
				while true do
					while true do
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(loc_4, 2))
						if loc_6 == 0 then
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(loc_4, 3))
						break
					end
					if desired then
						break
					end
					FUNC_LIST[572](rt_add_i32(loc_3, 96), rt_copysign_f64(0e0, rt_convert_f64_i32(loc_2)))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 96)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 104)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_le_i64(loc_12, rt_i64_from_u32(7, 0)) then
				while true do
					loc_13 = loc_12
					while true do
						loc_5 = rt_shl_i32(loc_5, 4)
						loc_13 = rt_add_i64(loc_13, rt_i64_ONE)
						if rt_ne_i64(loc_13, rt_i64_from_u32(8, 0)) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						if bit_and(loc_4, 4294967263) == 80 then
							while true do
								reg_0 = FUNC_LIST[621](loc_1)
								loc_13 = reg_0
								if rt_ne_i64(loc_13, rt_i64_from_u32(0, 2147483648)) then
									desired = 2
									break
								end
								if rt_ge_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_13 = rt_i64_ZERO
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_13 = rt_i64_ZERO
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_5 == 0 then
				while true do
					FUNC_LIST[572](rt_add_i32(loc_3, 112), rt_copysign_f64(0e0, rt_convert_f64_i32(loc_2)))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 112)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 120)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_12 = rt_sub_i64(rt_add_i64(loc_13, rt_shl_i64((if loc_6 ~= 0 then loc_15 else loc_12), rt_i64_from_u32(2, 0))), rt_i64_from_u32(32, 0))
			if rt_ge_i64(loc_12, rt_i64_from_u32(1075, 0)) then
				while true do
					reg_0 = FUNC_LIST[516]()
					rt_store_i32(memory_at_0, reg_0, 68)
					FUNC_LIST[571](rt_add_i32(loc_3, 160), loc_2)
					FUNC_LIST[561](rt_add_i32(loc_3, 144), rt_load_i64(memory_at_0, loc_3 + 160), rt_load_i64(memory_at_0, loc_3 + 168), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					FUNC_LIST[561](rt_add_i32(loc_3, 128), rt_load_i64(memory_at_0, loc_3 + 144), rt_load_i64(memory_at_0, loc_3 + 152), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 128)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 136)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i64(loc_12, rt_i64_from_u32(4294965996, 4294967295)) then
				while true do
					if rt_ge_i32(loc_5, 0) then
						while true do
							while true do
								FUNC_LIST[567](rt_add_i32(loc_3, 416), loc_11, loc_14, rt_i64_ZERO, rt_i64_from_u32(0, 3221159936))
								reg_0 = FUNC_LIST[557](loc_11, loc_14, rt_i64_ZERO, rt_i64_from_u32(0, 1073610752))
								loc_4 = reg_0
								loc_4 = (if rt_ge_i32(loc_4, 0) then 1 else 0)
								FUNC_LIST[567](rt_add_i32(loc_3, 400), loc_11, loc_14, (if loc_4 ~= 0 then rt_load_i64(memory_at_0, loc_3 + 416) else loc_11), (if loc_4 ~= 0 then rt_load_i64(memory_at_0, loc_3 + 424) else loc_14))
								loc_1 = rt_shl_i32(loc_5, 1)
								loc_5 = bit_or(loc_4, loc_1)
								loc_12 = rt_sub_i64(loc_12, rt_i64_ONE)
								loc_14 = rt_load_i64(memory_at_0, loc_3 + 408)
								loc_11 = rt_load_i64(memory_at_0, loc_3 + 400)
								if rt_ge_i32(loc_1, 0) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					while true do
						loc_15 = rt_add_i64(loc_12, rt_i64_from_u32(1106, 0))
						loc_4 = rt_wrap_i32_i64(loc_15)
						loc_4 = (if rt_ge_i64(loc_15, rt_i64_from_u32(53, 0)) then 53 else (if rt_gt_i32(loc_4, 0) then loc_4 else 0))
						if loc_4 >= 113 then
							while true do
								FUNC_LIST[571](rt_add_i32(loc_3, 384), loc_2)
								loc_15 = rt_load_i64(memory_at_0, loc_3 + 392)
								loc_16 = rt_load_i64(memory_at_0, loc_3 + 384)
								reg_0 = rt_i64_ZERO
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_1 = FUNC_LIST[543](1e0, rt_sub_i32(144, loc_4))
						FUNC_LIST[572](rt_add_i32(loc_3, 352), reg_1)
						FUNC_LIST[571](rt_add_i32(loc_3, 336), loc_2)
						loc_16 = rt_load_i64(memory_at_0, loc_3 + 336)
						loc_15 = rt_load_i64(memory_at_0, loc_3 + 344)
						FUNC_LIST[622](rt_add_i32(loc_3, 368), rt_load_i64(memory_at_0, loc_3 + 352), rt_load_i64(memory_at_0, loc_3 + 360), loc_16, loc_15)
						loc_17 = rt_load_i64(memory_at_0, loc_3 + 376)
						reg_0 = rt_load_i64(memory_at_0, loc_3 + 368)
						break
					end
					if desired then
						break
					end
					loc_13 = reg_0
					reg_2 = FUNC_LIST[556](loc_11, loc_14, rt_i64_ZERO, rt_i64_ZERO)
					loc_4 = bit_and((if bit_and(loc_5, 1) == 0 then 1 else 0), bit_and((if reg_2 ~= 0 then 1 else 0), (if loc_4 < 32 then 1 else 0)))
					FUNC_LIST[573](rt_add_i32(loc_3, 320), bit_or(loc_4, loc_5))
					FUNC_LIST[561](rt_add_i32(loc_3, 304), loc_16, loc_15, rt_load_i64(memory_at_0, loc_3 + 320), rt_load_i64(memory_at_0, loc_3 + 328))
					FUNC_LIST[567](rt_add_i32(loc_3, 272), rt_load_i64(memory_at_0, loc_3 + 304), rt_load_i64(memory_at_0, loc_3 + 312), loc_13, loc_17)
					FUNC_LIST[561](rt_add_i32(loc_3, 288), loc_16, loc_15, (if loc_4 ~= 0 then rt_i64_ZERO else loc_11), (if loc_4 ~= 0 then rt_i64_ZERO else loc_14))
					FUNC_LIST[567](rt_add_i32(loc_3, 256), rt_load_i64(memory_at_0, loc_3 + 288), rt_load_i64(memory_at_0, loc_3 + 296), rt_load_i64(memory_at_0, loc_3 + 272), rt_load_i64(memory_at_0, loc_3 + 280))
					FUNC_LIST[568](rt_add_i32(loc_3, 240), rt_load_i64(memory_at_0, loc_3 + 256), rt_load_i64(memory_at_0, loc_3 + 264), loc_13, loc_17)
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 240)
					loc_14 = rt_load_i64(memory_at_0, loc_3 + 248)
					reg_0 = FUNC_LIST[556](loc_11, loc_14, rt_i64_ZERO, rt_i64_ZERO)
					if reg_0 == 0 then
						while true do
							reg_0 = FUNC_LIST[516]()
							rt_store_i32(memory_at_0, reg_0, 68)
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[623](rt_add_i32(loc_3, 224), loc_11, loc_14, rt_wrap_i32_i64(loc_12))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 224)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 232)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[516]()
			rt_store_i32(memory_at_0, reg_0, 68)
			FUNC_LIST[571](rt_add_i32(loc_3, 208), loc_2)
			FUNC_LIST[561](rt_add_i32(loc_3, 192), rt_load_i64(memory_at_0, loc_3 + 208), rt_load_i64(memory_at_0, loc_3 + 216), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
			FUNC_LIST[561](rt_add_i32(loc_3, 176), rt_load_i64(memory_at_0, loc_3 + 192), rt_load_i64(memory_at_0, loc_3 + 200), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
			loc_11 = rt_load_i64(memory_at_0, loc_3 + 176)
			reg_0 = rt_load_i64(memory_at_0, loc_3 + 184)
			break
		end
		loc_12 = reg_0
		rt_store_i64(memory_at_0, loc_0, loc_11)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_12)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 432)
		break
	end
end
FUNC_LIST[620] = --[[ decfloat ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local loc_18 = rt_i64_ZERO
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local loc_22 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 8976)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					while true do
						if loc_2 ~= 48 then
							while true do
								if loc_2 ~= 46 then
									desired = 1
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
								if loc_2 == rt_load_i32(memory_at_0, loc_1 + 104) then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
								reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
						if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
							while true do
								loc_7 = 1
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
								loc_2 = rt_load_i32_u8(memory_at_0, loc_2)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								loc_7 = 1
								reg_0 = FUNC_LIST[616](loc_1)
								loc_2 = reg_0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[616](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			if loc_2 == 48 then
				while true do
					while true do
						loc_16 = rt_sub_i64(loc_16, rt_i64_ONE)
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
								while true do
									rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
									reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[616](loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = reg_0
						if loc_2 == 48 then
							continue
						end
						break
					end
					if desired then
						break
					end
					reg_0 = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_7
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = reg_0
			loc_11 = 1
			break
		end
		rt_store_i32(memory_at_0, loc_4 + 784, 0)
		loc_6 = rt_sub_i32(loc_2, 48)
		reg_0 = loc_0
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_5 = (if loc_2 == 46 then 1 else 0)
								if loc_5 ~= 0 then
									break
								end
								if loc_6 <= 9 then
									break
								end
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									if bit_and(loc_5, 1) ~= 0 then
										while true do
											if loc_11 == 0 then
												while true do
													loc_16 = loc_17
													loc_11 = 1
													desired = 7
													break
												end
												if desired then
													break
												end
											end
											loc_5 = (if loc_7 == 0 then 1 else 0)
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_17 = rt_add_i64(loc_17, rt_i64_ONE)
									if rt_le_i32(loc_9, 2044) then
										while true do
											loc_10 = (if loc_2 == 48 then loc_10 else rt_wrap_i32_i64(loc_17))
											loc_5 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2))
											loc_15 = loc_5
											reg_1 = loc_15
											if loc_8 ~= 0 then
												while true do
													reg_2 = rt_sub_i32(rt_add_i32(rt_mul_i32(rt_load_i32(memory_at_0, loc_5), 10), loc_2), 48)
													break
												end
												if desired then
													break
												end
											else
												while true do
													reg_2 = loc_6
													break
												end
												if desired then
													break
												end
											end
											loc_6 = reg_2
											rt_store_i32(memory_at_0, reg_1, loc_6)
											loc_7 = 1
											loc_2 = rt_add_i32(loc_8, 1)
											reg_2 = loc_2
											loc_2 = (if loc_2 == 9 then 1 else 0)
											loc_8 = (if loc_2 ~= 0 then 0 else reg_2)
											loc_9 = rt_add_i32(loc_2, loc_9)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 48 then
										break
									end
									rt_store_i32(memory_at_0, loc_4 + 8960, bit_or(rt_load_i32(memory_at_0, loc_4 + 8960), 1))
									loc_10 = 18396
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								while true do
									loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
									if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
										while true do
											rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
											reg_1 = rt_load_i32_u8(memory_at_0, loc_2)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_1 = FUNC_LIST[616](loc_1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_2 = reg_1
								loc_6 = rt_sub_i32(loc_2, 48)
								loc_5 = (if loc_2 == 46 then 1 else 0)
								if loc_5 ~= 0 then
									continue
								end
								if loc_6 < 10 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_16 = (if loc_11 ~= 0 then loc_16 else loc_17)
						while true do
							if loc_7 == 0 then
								break
							end
							if bit_and(loc_2, 4294967263) ~= 69 then
								break
							end
							while true do
								reg_1 = FUNC_LIST[621](loc_1)
								loc_18 = reg_1
								if rt_ne_i64(loc_18, rt_i64_from_u32(0, 2147483648)) then
									break
								end
								loc_18 = rt_i64_ZERO
								if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_16 = rt_add_i64(loc_16, loc_18)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = (if loc_7 == 0 then 1 else 0)
						if rt_lt_i32(loc_2, 0) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 == 0 then
					break
				end
				reg_1 = FUNC_LIST[516]()
				rt_store_i32(memory_at_0, reg_1, 28)
				FUNC_LIST[614](loc_1)
				loc_17 = rt_i64_ZERO
				reg_1 = rt_i64_ZERO
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_4 + 784)
			if loc_1 == 0 then
				while true do
					FUNC_LIST[572](loc_4, rt_copysign_f64(0e0, rt_convert_f64_i32(loc_3)))
					loc_17 = rt_load_i64(memory_at_0, loc_4)
					reg_1 = rt_load_i64(memory_at_0, loc_4 + 8)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_gt_i64(loc_17, rt_i64_from_u32(9, 0)) then
					break
				end
				if rt_ne_i64(loc_16, loc_17) then
					break
				end
				FUNC_LIST[571](rt_add_i32(loc_4, 48), loc_3)
				FUNC_LIST[573](rt_add_i32(loc_4, 32), loc_1)
				FUNC_LIST[561](rt_add_i32(loc_4, 16), rt_load_i64(memory_at_0, loc_4 + 48), rt_load_i64(memory_at_0, loc_4 + 56), rt_load_i64(memory_at_0, loc_4 + 32), rt_load_i64(memory_at_0, loc_4 + 40))
				loc_17 = rt_load_i64(memory_at_0, loc_4 + 16)
				reg_1 = rt_load_i64(memory_at_0, loc_4 + 24)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_ge_i64(loc_16, rt_i64_from_u32(538, 0)) then
				while true do
					reg_1 = FUNC_LIST[516]()
					rt_store_i32(memory_at_0, reg_1, 68)
					FUNC_LIST[571](rt_add_i32(loc_4, 96), loc_3)
					FUNC_LIST[561](rt_add_i32(loc_4, 80), rt_load_i64(memory_at_0, loc_4 + 96), rt_load_i64(memory_at_0, loc_4 + 104), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					FUNC_LIST[561](rt_sub_i32(loc_4, 4294967232), rt_load_i64(memory_at_0, loc_4 + 80), rt_load_i64(memory_at_0, loc_4 + 88), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					loc_17 = rt_load_i64(memory_at_0, loc_4 + 64)
					reg_1 = rt_load_i64(memory_at_0, loc_4 + 72)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_le_i64(loc_16, rt_i64_from_u32(4294965995, 4294967295)) then
				while true do
					reg_1 = FUNC_LIST[516]()
					rt_store_i32(memory_at_0, reg_1, 68)
					FUNC_LIST[571](rt_add_i32(loc_4, 144), loc_3)
					FUNC_LIST[561](rt_add_i32(loc_4, 128), rt_load_i64(memory_at_0, loc_4 + 144), rt_load_i64(memory_at_0, loc_4 + 152), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
					FUNC_LIST[561](rt_add_i32(loc_4, 112), rt_load_i64(memory_at_0, loc_4 + 128), rt_load_i64(memory_at_0, loc_4 + 136), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
					loc_17 = rt_load_i64(memory_at_0, loc_4 + 112)
					reg_1 = rt_load_i64(memory_at_0, loc_4 + 120)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					if rt_le_i32(loc_8, 8) then
						while true do
							loc_2 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2))
							loc_1 = rt_load_i32(memory_at_0, loc_2)
							while true do
								loc_1 = rt_mul_i32(loc_1, 10)
								loc_8 = rt_add_i32(loc_8, 1)
								if loc_8 ~= 9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_2, loc_1)
							break
						end
						if desired then
							break
						end
					end
					reg_1 = rt_add_i32(loc_9, 1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_9
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = reg_1
			loc_8 = rt_wrap_i32_i64(loc_16)
			while true do
				if rt_ge_i32(loc_10, 9) then
					break
				end
				if rt_gt_i64(loc_16, rt_i64_from_u32(17, 0)) then
					break
				end
				if rt_lt_i32(loc_8, loc_10) then
					break
				end
				if rt_eq_i64(loc_16, rt_i64_from_u32(9, 0)) then
					while true do
						FUNC_LIST[571](rt_add_i32(loc_4, 192), loc_3)
						FUNC_LIST[573](rt_add_i32(loc_4, 176), rt_load_i32(memory_at_0, loc_4 + 784))
						FUNC_LIST[561](rt_add_i32(loc_4, 160), rt_load_i64(memory_at_0, loc_4 + 192), rt_load_i64(memory_at_0, loc_4 + 200), rt_load_i64(memory_at_0, loc_4 + 176), rt_load_i64(memory_at_0, loc_4 + 184))
						loc_17 = rt_load_i64(memory_at_0, loc_4 + 160)
						reg_1 = rt_load_i64(memory_at_0, loc_4 + 168)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_i64(loc_16, rt_i64_from_u32(8, 0)) then
					while true do
						FUNC_LIST[571](rt_add_i32(loc_4, 272), loc_3)
						FUNC_LIST[573](rt_add_i32(loc_4, 256), rt_load_i32(memory_at_0, loc_4 + 784))
						FUNC_LIST[561](rt_add_i32(loc_4, 240), rt_load_i64(memory_at_0, loc_4 + 272), rt_load_i64(memory_at_0, loc_4 + 280), rt_load_i64(memory_at_0, loc_4 + 256), rt_load_i64(memory_at_0, loc_4 + 264))
						FUNC_LIST[571](rt_add_i32(loc_4, 224), rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_sub_i32(0, loc_8), 2), 47136)))
						FUNC_LIST[559](rt_add_i32(loc_4, 208), rt_load_i64(memory_at_0, loc_4 + 240), rt_load_i64(memory_at_0, loc_4 + 248), rt_load_i64(memory_at_0, loc_4 + 224), rt_load_i64(memory_at_0, loc_4 + 232))
						loc_17 = rt_load_i64(memory_at_0, loc_4 + 208)
						reg_1 = rt_load_i64(memory_at_0, loc_4 + 216)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_load_i32(memory_at_0, loc_4 + 784)
				if rt_ge_i64(loc_16, rt_i64_from_u32(17, 0)) then
					while true do
						if rt_shr_u32(loc_1, rt_add_i32(rt_mul_i32(loc_8, 4294967293), 80)) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[571](rt_add_i32(loc_4, 352), loc_3)
				FUNC_LIST[573](rt_add_i32(loc_4, 336), loc_1)
				FUNC_LIST[561](rt_add_i32(loc_4, 320), rt_load_i64(memory_at_0, loc_4 + 352), rt_load_i64(memory_at_0, loc_4 + 360), rt_load_i64(memory_at_0, loc_4 + 336), rt_load_i64(memory_at_0, loc_4 + 344))
				FUNC_LIST[571](rt_add_i32(loc_4, 304), rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 2), 47064)))
				FUNC_LIST[561](rt_add_i32(loc_4, 288), rt_load_i64(memory_at_0, loc_4 + 320), rt_load_i64(memory_at_0, loc_4 + 328), rt_load_i64(memory_at_0, loc_4 + 304), rt_load_i64(memory_at_0, loc_4 + 312))
				loc_17 = rt_load_i64(memory_at_0, loc_4 + 288)
				reg_1 = rt_load_i64(memory_at_0, loc_4 + 296)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_5 = loc_9
				loc_9 = rt_sub_i32(loc_5, 1)
				if rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2))) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = 0
			while true do
				loc_1 = rt_rem_i32(loc_8, 9)
				if loc_1 == 0 then
					while true do
						loc_6 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_12 = (if rt_lt_i64(loc_16, rt_i64_ZERO) then rt_add_i32(loc_1, 9) else loc_1)
				while true do
					if loc_5 == 0 then
						while true do
							loc_6 = 0
							loc_5 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_sub_i32(0, loc_12), 2), 47136))
					loc_13 = rt_div_i32(1000000000, loc_7)
					loc_2 = 0
					loc_1 = 0
					loc_6 = 0
					while true do
						loc_9 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_1, 2))
						reg_1 = loc_9
						loc_9 = rt_load_i32(memory_at_0, loc_9)
						loc_11 = rt_div_u32(loc_9, loc_7)
						loc_2 = rt_add_i32(loc_2, loc_11)
						rt_store_i32(memory_at_0, reg_1, loc_2)
						loc_2 = bit_and((if loc_2 == 0 then 1 else 0), (if loc_1 == loc_6 then 1 else 0))
						loc_6 = (if loc_2 ~= 0 then bit_and(rt_add_i32(loc_6, 1), 2047) else loc_6)
						loc_8 = (if loc_2 ~= 0 then rt_sub_i32(loc_8, 9) else loc_8)
						loc_2 = rt_mul_i32(rt_sub_i32(loc_9, rt_mul_i32(loc_7, loc_11)), loc_13)
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_5 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						break
					end
					rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_5, 2)), loc_2)
					loc_5 = rt_add_i32(loc_5, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = rt_add_i32(rt_sub_i32(loc_8, loc_12), 9)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_12 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_6, 2))
				loc_13 = (if rt_lt_i32(loc_8, 36) then 1 else 0)
				while true do
					while true do
						while true do
							if loc_13 ~= 0 then
								break
							end
							if loc_8 ~= 36 then
								desired = 3
								break
							end
							if rt_load_i32(memory_at_0, loc_12) <= 10384592 then
								break
							end
							loc_8 = 36
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_9 = rt_add_i32(loc_5, 2047)
						loc_7 = 0
						while true do
							loc_2 = loc_5
							loc_1 = bit_and(loc_9, 2047)
							loc_5 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_1, 2))
							loc_16 = rt_add_i64(rt_extend_i64_u32(loc_7), rt_shl_i64(rt_load_i64_u32(memory_at_0, loc_5), rt_i64_from_u32(29, 0)))
							if rt_lt_u64(loc_16, rt_i64_from_u32(1000000001, 0)) then
								while true do
									reg_1 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									loc_17 = rt_div_u64(loc_16, rt_i64_from_u32(1000000000, 0))
									loc_16 = rt_add_i64(loc_16, rt_mul_i64(loc_17, rt_i64_from_u32(3294967296, 4294967295)))
									reg_1 = rt_wrap_i32_i64(loc_17)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_7 = reg_1
							rt_store_i64_n32(memory_at_0, loc_5, loc_16)
							loc_11 = bit_and(rt_sub_i32(loc_2, 1), 2047)
							loc_5 = (if loc_11 ~= loc_1 then loc_2 else (if loc_1 == loc_6 then loc_2 else (if rt_eq_i64(loc_16, rt_i64_ZERO) then loc_1 else loc_2)))
							loc_9 = rt_sub_i32(loc_1, 1)
							if loc_1 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_10 = rt_sub_i32(loc_10, 29)
						loc_5 = loc_2
						if loc_7 == 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = bit_and(rt_sub_i32(loc_6, 1), 2047)
					if loc_6 ~= loc_2 then
						while true do
							reg_1 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							loc_1 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(bit_and(rt_add_i32(loc_2, 2046), 2047), 2))
							rt_store_i32(memory_at_0, loc_1, bit_or(rt_load_i32(memory_at_0, loc_1), rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_11, 2)))))
							reg_1 = loc_11
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_1
					loc_8 = rt_add_i32(loc_8, 9)
					rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_6, 2)), loc_7)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					loc_14 = bit_and(rt_add_i32(loc_5, 1), 2047)
					loc_12 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(bit_and(rt_sub_i32(loc_5, 1), 2047), 2))
					while true do
						loc_9 = (if rt_gt_i32(loc_8, 45) then 9 else 1)
						loc_11 = (if loc_8 ~= 36 then 1 else 0)
						while true do
							while true do
								loc_7 = loc_6
								loc_1 = 0
								while true do
									while true do
										while true do
											loc_2 = bit_and(rt_add_i32(loc_1, loc_7), 2047)
											if loc_5 == loc_2 then
												break
											end
											loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_2, 2)))
											loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), 47088))
											if loc_2 < loc_6 then
												break
											end
											if loc_2 > loc_6 then
												desired = 7
												break
											end
											loc_1 = rt_add_i32(loc_1, 1)
											if loc_1 ~= 4 then
												desired = 8
												break
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_11 ~= 0 then
										break
									end
									loc_1 = 0
									loc_16 = rt_i64_ZERO
									loc_17 = rt_i64_ZERO
									while true do
										loc_2 = bit_and(rt_add_i32(loc_1, loc_7), 2047)
										if loc_2 == loc_5 then
											while true do
												loc_5 = bit_and(rt_add_i32(loc_5, 1), 2047)
												rt_store_i32(memory_at_0, rt_add_i32(loc_4, rt_shl_i32(loc_5, 2)) + 780, 0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										FUNC_LIST[573](rt_add_i32(loc_4, 768), rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_2, 2))))
										FUNC_LIST[561](rt_add_i32(loc_4, 752), loc_16, loc_17, rt_i64_ZERO, rt_i64_from_u32(1342177280, 1075633366))
										FUNC_LIST[567](rt_add_i32(loc_4, 736), rt_load_i64(memory_at_0, loc_4 + 752), rt_load_i64(memory_at_0, loc_4 + 760), rt_load_i64(memory_at_0, loc_4 + 768), rt_load_i64(memory_at_0, loc_4 + 776))
										loc_17 = rt_load_i64(memory_at_0, loc_4 + 744)
										loc_16 = rt_load_i64(memory_at_0, loc_4 + 736)
										loc_1 = rt_add_i32(loc_1, 1)
										if loc_1 ~= 4 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[571](rt_add_i32(loc_4, 720), loc_3)
									FUNC_LIST[561](rt_add_i32(loc_4, 704), loc_16, loc_17, rt_load_i64(memory_at_0, loc_4 + 720), rt_load_i64(memory_at_0, loc_4 + 728))
									loc_17 = rt_load_i64(memory_at_0, loc_4 + 712)
									loc_16 = rt_i64_ZERO
									loc_18 = rt_load_i64(memory_at_0, loc_4 + 704)
									loc_2 = rt_add_i32(loc_10, 1187)
									loc_1 = (if rt_ge_i32(loc_10, 4294966162) then 53 else (if rt_gt_i32(loc_2, 0) then loc_2 else 0))
									if loc_1 <= 112 then
										desired = 5
										break
									end
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_10 = rt_add_i32(loc_9, loc_10)
								loc_6 = loc_5
								if loc_5 == loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_11 = rt_shr_u32(1000000000, loc_9)
							loc_13 = bit_xor(rt_shl_i32(4294967295, loc_9), 4294967295)
							loc_1 = 0
							loc_6 = loc_7
							while true do
								loc_2 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_7, 2))
								reg_1 = loc_2
								loc_2 = rt_load_i32(memory_at_0, loc_2)
								loc_1 = rt_add_i32(loc_1, rt_shr_u32(loc_2, loc_9))
								rt_store_i32(memory_at_0, reg_1, loc_1)
								loc_1 = bit_and((if loc_1 == 0 then 1 else 0), (if loc_6 == loc_7 then 1 else 0))
								loc_6 = (if loc_1 ~= 0 then bit_and(rt_add_i32(loc_6, 1), 2047) else loc_6)
								loc_8 = (if loc_1 ~= 0 then rt_sub_i32(loc_8, 9) else loc_8)
								loc_1 = rt_mul_i32(loc_11, bit_and(loc_2, loc_13))
								loc_7 = bit_and(rt_add_i32(loc_7, 1), 2047)
								if loc_5 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 == 0 then
								desired = 4
								break
							end
							if loc_6 ~= loc_14 then
								while true do
									rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_5, 2)), loc_1)
									loc_5 = loc_14
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_12, bit_or(rt_load_i32(memory_at_0, loc_12), 1))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_2 = FUNC_LIST[543](1e0, rt_sub_i32(225, loc_1))
				FUNC_LIST[572](rt_add_i32(loc_4, 656), reg_2)
				FUNC_LIST[622](rt_add_i32(loc_4, 688), rt_load_i64(memory_at_0, loc_4 + 656), rt_load_i64(memory_at_0, loc_4 + 664), loc_18, loc_17)
				loc_21 = rt_load_i64(memory_at_0, loc_4 + 696)
				loc_20 = rt_load_i64(memory_at_0, loc_4 + 688)
				reg_2 = FUNC_LIST[543](1e0, rt_sub_i32(113, loc_1))
				FUNC_LIST[572](rt_add_i32(loc_4, 640), reg_2)
				FUNC_LIST[548](rt_add_i32(loc_4, 672), loc_18, loc_17, rt_load_i64(memory_at_0, loc_4 + 640), rt_load_i64(memory_at_0, loc_4 + 648))
				loc_16 = rt_load_i64(memory_at_0, loc_4 + 672)
				loc_19 = rt_load_i64(memory_at_0, loc_4 + 680)
				FUNC_LIST[568](rt_add_i32(loc_4, 624), loc_18, loc_17, loc_16, loc_19)
				FUNC_LIST[567](rt_add_i32(loc_4, 608), loc_20, loc_21, rt_load_i64(memory_at_0, loc_4 + 624), rt_load_i64(memory_at_0, loc_4 + 632))
				loc_17 = rt_load_i64(memory_at_0, loc_4 + 616)
				loc_18 = rt_load_i64(memory_at_0, loc_4 + 608)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_add_i32(loc_10, 113)
			while true do
				loc_9 = bit_and(rt_add_i32(loc_7, 4), 2047)
				if loc_5 == loc_9 then
					break
				end
				while true do
					loc_9 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2)))
					if loc_9 <= 499999999 then
						while true do
							if loc_9 == 0 then
								while true do
									if loc_5 == bit_and(rt_add_i32(loc_7, 5), 2047) then
										desired = 3
										break
									end
									break
								end
								if desired then
									break
								end
							end
							FUNC_LIST[572](rt_add_i32(loc_4, 496), (rt_convert_f64_i32(loc_3) * 2.5e-1))
							FUNC_LIST[567](rt_add_i32(loc_4, 480), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 496), rt_load_i64(memory_at_0, loc_4 + 504))
							loc_19 = rt_load_i64(memory_at_0, loc_4 + 488)
							loc_16 = rt_load_i64(memory_at_0, loc_4 + 480)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_9 ~= 500000000 then
						while true do
							FUNC_LIST[572](rt_add_i32(loc_4, 592), (rt_convert_f64_i32(loc_3) * 7.5e-1))
							FUNC_LIST[567](rt_add_i32(loc_4, 576), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 592), rt_load_i64(memory_at_0, loc_4 + 600))
							loc_19 = rt_load_i64(memory_at_0, loc_4 + 584)
							loc_16 = rt_load_i64(memory_at_0, loc_4 + 576)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_22 = rt_convert_f64_i32(loc_3)
					if bit_and(rt_add_i32(loc_7, 5), 2047) == loc_5 then
						while true do
							FUNC_LIST[572](rt_add_i32(loc_4, 528), (loc_22 * 5e-1))
							FUNC_LIST[567](rt_add_i32(loc_4, 512), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 528), rt_load_i64(memory_at_0, loc_4 + 536))
							loc_19 = rt_load_i64(memory_at_0, loc_4 + 520)
							loc_16 = rt_load_i64(memory_at_0, loc_4 + 512)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[572](rt_add_i32(loc_4, 560), (loc_22 * 7.5e-1))
					FUNC_LIST[567](rt_add_i32(loc_4, 544), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 560), rt_load_i64(memory_at_0, loc_4 + 568))
					loc_19 = rt_load_i64(memory_at_0, loc_4 + 552)
					loc_16 = rt_load_i64(memory_at_0, loc_4 + 544)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_1 > 111 then
					break
				end
				FUNC_LIST[548](rt_add_i32(loc_4, 464), loc_16, loc_19, rt_i64_ZERO, rt_i64_from_u32(0, 1073676288))
				reg_1 = FUNC_LIST[556](rt_load_i64(memory_at_0, loc_4 + 464), rt_load_i64(memory_at_0, loc_4 + 472), rt_i64_ZERO, rt_i64_ZERO)
				if reg_1 ~= 0 then
					break
				end
				FUNC_LIST[567](rt_add_i32(loc_4, 448), loc_16, loc_19, rt_i64_ZERO, rt_i64_from_u32(0, 1073676288))
				loc_19 = rt_load_i64(memory_at_0, loc_4 + 456)
				loc_16 = rt_load_i64(memory_at_0, loc_4 + 448)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[567](rt_add_i32(loc_4, 432), loc_18, loc_17, loc_16, loc_19)
			FUNC_LIST[568](rt_add_i32(loc_4, 416), rt_load_i64(memory_at_0, loc_4 + 432), rt_load_i64(memory_at_0, loc_4 + 440), loc_20, loc_21)
			loc_17 = rt_load_i64(memory_at_0, loc_4 + 424)
			loc_18 = rt_load_i64(memory_at_0, loc_4 + 416)
			while true do
				if bit_and(loc_6, 2147483644) < 1020 then
					while true do
						loc_5 = loc_10
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[624](rt_add_i32(loc_4, 400), loc_18, loc_17)
				FUNC_LIST[561](rt_add_i32(loc_4, 384), loc_18, loc_17, rt_i64_ZERO, rt_i64_from_u32(0, 1073610752))
				reg_1 = FUNC_LIST[557](rt_load_i64(memory_at_0, loc_4 + 400), rt_load_i64(memory_at_0, loc_4 + 408), rt_i64_ZERO, rt_i64_from_u32(0, 1081081856))
				loc_6 = reg_1
				loc_5 = (if rt_ge_i32(loc_6, 0) then 1 else 0)
				loc_17 = (if loc_5 ~= 0 then rt_load_i64(memory_at_0, loc_4 + 392) else loc_17)
				loc_18 = (if loc_5 ~= 0 then rt_load_i64(memory_at_0, loc_4 + 384) else loc_18)
				reg_1 = FUNC_LIST[556](loc_16, loc_19, rt_i64_ZERO, rt_i64_ZERO)
				loc_7 = reg_1
				loc_5 = rt_add_i32(loc_5, loc_10)
				if rt_le_i32(loc_5, 911) then
					while true do
						if bit_and(bit_and(bit_or((if loc_1 ~= loc_2 then 1 else 0), (if rt_lt_i32(loc_6, 0) then 1 else 0)), (if rt_lt_i32(loc_10, 4294966162) then 1 else 0)), (if loc_7 ~= 0 then 1 else 0)) == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = FUNC_LIST[516]()
				rt_store_i32(memory_at_0, reg_1, 68)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[623](rt_add_i32(loc_4, 368), loc_18, loc_17, loc_5)
			loc_17 = rt_load_i64(memory_at_0, loc_4 + 368)
			reg_1 = rt_load_i64(memory_at_0, loc_4 + 376)
			break
		end
		loc_16 = reg_1
		rt_store_i64(memory_at_0, reg_0 + 8, loc_16)
		rt_store_i64(memory_at_0, loc_0, loc_17)
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 8976)
		break
	end
end
FUNC_LIST[621] = --[[ scanexp ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
									if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
										while true do
											rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
											reg_0 = rt_load_i32_u8(memory_at_0, loc_1)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[616](loc_0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = reg_0
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 0, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(loc_1, 43)] or 1
								if temp < 1 then
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
								if loc_2 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
									while true do
										rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_2, 1))
										reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[616](loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = reg_0
							if rt_sub_i32(loc_2, 58) > 4294967285 then
								while true do
									loc_3 = (if loc_1 == 45 then 1 else 0)
									loc_1 = loc_2
									desired = 1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_ge_i64(rt_load_i64(memory_at_0, loc_0 + 112), rt_i64_ZERO) then
								desired = 4
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_sub_i32(loc_1, 58) > 4294967285 then
							desired = 1
							break
						end
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_0 + 112), rt_i64_ZERO) then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_i64_from_u32(0, 2147483648)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if rt_sub_i32(loc_1, 48) >= 10 then
				break
			end
			loc_2 = 0
			while true do
				loc_2 = rt_add_i32(rt_mul_i32(loc_2, 10), loc_1)
				loc_2 = rt_sub_i32(loc_2, 48)
				reg_0 = (if rt_lt_i32(loc_2, 214748364) then 1 else 0)
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
							reg_1 = rt_load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = FUNC_LIST[616](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_1
				loc_4 = rt_sub_i32(loc_1, 48)
				if bit_and(reg_0, (if loc_4 <= 9 then 1 else 0)) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_extend_i64_i32(loc_2)
			if loc_4 >= 10 then
				break
			end
			while true do
				loc_5 = rt_add_i64(rt_extend_i64_u32(loc_1), rt_mul_i64(loc_5, rt_i64_from_u32(10, 0)))
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[616](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_0
				loc_2 = rt_sub_i32(loc_1, 48)
				loc_5 = rt_sub_i64(loc_5, rt_i64_from_u32(48, 0))
				if bit_and((if loc_2 <= 9 then 1 else 0), (if rt_lt_i64(loc_5, rt_i64_from_u32(2061584302, 21474836)) then 1 else 0)) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 >= 10 then
				break
			end
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[616](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_0
				if rt_sub_i32(loc_1, 48) < 10 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if rt_ge_i64(rt_load_i64(memory_at_0, loc_0 + 112), rt_i64_ZERO) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (if loc_3 ~= 0 then rt_sub_i64(rt_i64_ZERO, loc_5) else loc_5)
		break
	end
	return reg_0
end
FUNC_LIST[622] = --[[ copysignl ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	while true do
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_or_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(bit_or(rt_wrap_i32_i64(rt_shr_u64(rt_bit_and_i64(loc_2, rt_i64_from_u32(0, 2147418112)), rt_i64_from_u32(48, 0))), bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32768))), rt_i64_from_u32(48, 0))))
		break
	end
end
FUNC_LIST[623] = --[[ scalbnl ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		while true do
			if rt_ge_i32(loc_3, 16384) then
				while true do
					FUNC_LIST[561](rt_add_i32(loc_4, 32), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 2147352576))
					loc_2 = rt_load_i64(memory_at_0, loc_4 + 40)
					loc_1 = rt_load_i64(memory_at_0, loc_4 + 32)
					if loc_3 < 32767 then
						while true do
							loc_3 = rt_sub_i32(loc_3, 16383)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[561](rt_add_i32(loc_4, 16), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 2147352576))
					loc_3 = rt_sub_i32((if loc_3 >= 49149 then 49149 else loc_3), 32766)
					loc_2 = rt_load_i64(memory_at_0, loc_4 + 24)
					loc_1 = rt_load_i64(memory_at_0, loc_4 + 16)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_gt_i32(loc_3, 4294950913) then
				break
			end
			FUNC_LIST[561](rt_sub_i32(loc_4, 4294967232), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 7471104))
			loc_2 = rt_load_i64(memory_at_0, loc_4 + 72)
			loc_1 = rt_load_i64(memory_at_0, loc_4 + 64)
			if loc_3 > 4294934644 then
				while true do
					loc_3 = rt_add_i32(loc_3, 16269)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[561](rt_add_i32(loc_4, 48), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 7471104))
			loc_3 = rt_add_i32((if loc_3 <= 4294918376 then 4294918376 else loc_3), 32538)
			loc_2 = rt_load_i64(memory_at_0, loc_4 + 56)
			loc_1 = rt_load_i64(memory_at_0, loc_4 + 48)
			break
		end
		FUNC_LIST[561](loc_4, loc_1, loc_2, rt_i64_ZERO, rt_shl_i64(rt_extend_i64_u32(rt_add_i32(loc_3, 16383)), rt_i64_from_u32(48, 0)))
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_4))
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 80)
		break
	end
end
FUNC_LIST[624] = --[[ fabsl ]] function(loc_0, loc_1, loc_2)
	while true do
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647)))
		rt_store_i64(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[625] = --[[ strtoull ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[626](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[626] = --[[ strtox.49 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		while true do
			while true do
				while true do
					if rt_le_i32(loc_2, 36) then
						while true do
							loc_4 = rt_load_i32_u8(memory_at_0, loc_0)
							if loc_4 ~= 0 then
								desired = 3
								break
							end
							loc_3 = loc_0
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[516]()
					rt_store_i32(memory_at_0, reg_0, 28)
					reg_0 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = loc_0
				while true do
					while true do
						reg_0 = FUNC_LIST[593](rt_extend_i32_n8(loc_4))
						if reg_0 == 0 then
							desired = 3
							break
						end
						loc_4 = rt_load_i32_u8(memory_at_0, loc_3 + 1)
						loc_5 = rt_add_i32(loc_3, 1)
						loc_3 = loc_5
						if loc_4 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					loc_4 = bit_and(loc_4, 255)
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(loc_4, 43)] or 1
					if temp < 1 then
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_10 = (if loc_4 == 45 then rt_i64_from_u32(4294967295, 4294967295) else rt_i64_ZERO)
				loc_3 = rt_add_i32(loc_3, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if bit_or(loc_2, 16) ~= 16 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_3) ~= 48 then
						break
					end
					loc_7 = 1
					if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 223) == 88 then
						while true do
							loc_3 = rt_add_i32(loc_3, 2)
							reg_0 = 16
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_add_i32(loc_3, 1)
					reg_0 = (if loc_2 ~= 0 then loc_2 else 8)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = (if loc_2 ~= 0 then loc_2 else 10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = reg_0
			loc_11 = rt_extend_i64_u32(loc_8)
			loc_2 = 0
			while true do
				while true do
					while true do
						loc_5 = rt_load_i32_u8(memory_at_0, loc_3)
						loc_4 = rt_sub_i32(loc_5, 48)
						if bit_and(loc_4, 255) < 10 then
							break
						end
						if bit_and(rt_sub_i32(loc_5, 97), 255) <= 25 then
							while true do
								loc_4 = rt_sub_i32(loc_5, 87)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if bit_and(rt_sub_i32(loc_5, 65), 255) > 25 then
							desired = 3
							break
						end
						loc_4 = rt_sub_i32(loc_5, 55)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_ge_i32(bit_and(loc_4, 255), loc_8) then
						break
					end
					FUNC_LIST[562](loc_6, loc_11, rt_i64_ZERO, loc_9, rt_i64_ZERO)
					loc_5 = 1
					while true do
						if rt_ne_i64(rt_load_i64(memory_at_0, loc_6 + 8), rt_i64_ZERO) then
							break
						end
						loc_12 = rt_mul_i64(loc_9, loc_11)
						loc_13 = rt_bit_and_i64(rt_extend_i64_u32(loc_4), rt_i64_from_u32(255, 0))
						if rt_gt_u64(loc_12, rt_bit_xor_i64(loc_13, rt_i64_from_u32(4294967295, 4294967295))) then
							break
						end
						loc_9 = rt_add_i64(loc_12, loc_13)
						loc_7 = 1
						loc_5 = loc_2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					loc_2 = loc_5
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_1 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_1, (if loc_7 ~= 0 then loc_3 else loc_0))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[516]()
					rt_store_i32(memory_at_0, reg_0, 68)
					loc_10 = rt_i64_ZERO
					reg_0 = rt_i64_from_u32(4294967295, 4294967295)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_9
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = reg_0
			reg_0 = rt_sub_i64(rt_bit_xor_i64(loc_9, loc_10), loc_10)
			break
		end
		loc_9 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = loc_9
		break
	end
	return reg_0
end
FUNC_LIST[627] = --[[ tan ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(32, 0))), 2147483647)
			if loc_2 <= 1072243195 then
				while true do
					if loc_2 < 1044381696 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[628](loc_0, 0e0, 0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_1)
			loc_2 = reg_0
			reg_0 = FUNC_LIST[628](rt_load_f64(memory_at_0, loc_1), rt_load_f64(memory_at_0, loc_1 + 8), bit_and(loc_2, 1))
			loc_0 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[628] = --[[ __tan ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = rt_i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_reinterpret_i64_f64(loc_0)
		loc_7 = (if rt_lt_u64(rt_bit_and_i64(loc_6, rt_i64_from_u32(0, 2147483640)), rt_i64_from_u32(1, 1072010279)) then 1 else 0)
		if loc_7 ~= 0 then
			while true do
				reg_0 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				loc_8 = (if rt_ge_i64(loc_6, rt_i64_ZERO) then 1 else 0)
				loc_0 = ((7.853981633974483e-1 - math_abs(loc_0)) + (3.061616997868383e-17 - (if loc_8 ~= 0 then loc_1 else rt_neg_f64(loc_1))))
				reg_0 = 0e0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_0
		loc_4 = (loc_0 * loc_0)
		loc_5 = (loc_0 * loc_4)
		loc_3 = (loc_4 * loc_4)
		loc_4 = ((loc_5 * 3.333333333333341e-1) + ((loc_4 * ((loc_5 * (((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * -1.8558637485527546e-5) + 7.817944429395571e-5)) + 5.880412408202641e-4)) + 3.5920791075913124e-3)) + 2.1869488294859542e-2)) + 1.3333333333320124e-1) + (loc_4 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * 2.590730518636337e-5) + 7.140724913826082e-5)) + 2.464631348184699e-4)) + 1.4562094543252903e-3)) + 8.8632398235993e-3)) + 5.396825397622605e-2)))) + loc_1)) + loc_1))
		loc_3 = (loc_0 + loc_4)
		if loc_7 == 0 then
			while true do
				loc_1 = rt_convert_f64_i32(rt_sub_i32(1, rt_shl_i32(loc_2, 1)))
				loc_3 = (loc_0 + (loc_4 - ((loc_3 * loc_3) / (loc_3 + loc_1))))
				loc_3 = (loc_1 - (loc_3 + loc_3))
				reg_0 = (if loc_8 ~= 0 then loc_3 else rt_neg_f64(loc_3))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_2 ~= 0 then
			while true do
				loc_1 = (-1e0 / loc_3)
				reg_0 = loc_1
				loc_1 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_1), rt_i64_from_u32(0, 4294967295)))
				loc_3 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_3), rt_i64_from_u32(0, 4294967295)))
				reg_0 = ((reg_0 * ((loc_1 * (loc_4 - (loc_3 - loc_0))) + ((loc_1 * loc_3) + 1e0))) + loc_1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[629] = --[[ tanh ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			loc_1 = math_abs(loc_0)
			loc_2 = rt_reinterpret_i64_f64(loc_1)
			if rt_ge_u64(loc_2, rt_i64_from_u32(0, 1071748075)) then
				while true do
					if rt_ge_u64(loc_2, rt_i64_from_u32(0, 1077149697)) then
						while true do
							loc_1 = ((-0e0 / loc_1) + 1e0)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					reg_2 = FUNC_LIST[601]((loc_1 + loc_1))
					loc_1 = (1e0 - (2e0 / (reg_2 + 2e0)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_u64(loc_2, rt_i64_from_u32(0, 1070618799)) then
				while true do
					reg_0 = FUNC_LIST[601]((loc_1 + loc_1))
					loc_1 = reg_0
					loc_1 = (loc_1 / (loc_1 + 2e0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_lt_u64(loc_2, rt_i64_from_u32(0, 1048576)) then
				break
			end
			reg_0 = FUNC_LIST[601]((loc_1 * -2e0))
			loc_1 = reg_0
			loc_1 = (rt_neg_f64(loc_1) / (loc_1 + 2e0))
			break
		end
		reg_0 = (if rt_lt_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_ZERO) then rt_neg_f64(loc_1) else loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[630] = --[[ sn_write ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 84)
		loc_5 = rt_load_i32(memory_at_0, loc_3)
		loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 28)
		loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), loc_7)
		loc_6 = (if loc_4 < loc_6 then loc_4 else loc_6)
		if loc_6 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[517](loc_5, loc_7, loc_6)
				loc_5 = rt_add_i32(loc_6, rt_load_i32(memory_at_0, loc_3))
				rt_store_i32(memory_at_0, loc_3, loc_5)
				loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), loc_6)
				rt_store_i32(memory_at_0, loc_3 + 4, loc_4)
				break
			end
		end
		loc_4 = (if loc_2 > loc_4 then loc_4 else loc_2)
		if loc_4 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[517](loc_5, loc_1, loc_4)
				loc_5 = rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_3))
				rt_store_i32(memory_at_0, loc_3, loc_5)
				rt_store_i32(memory_at_0, loc_3 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), loc_4))
				break
			end
		end
		rt_store_i32_n8(memory_at_0, loc_5, 0)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 44)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_3)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[631] = --[[ vfprintf ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[632](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[632] = --[[ __vfprintf_internal ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 208)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 204, loc_2)
		reg_0 = FUNC_LIST[519](rt_add_i32(loc_3, 160), 0, 40)
		rt_store_i32(memory_at_0, loc_3 + 200, rt_load_i32(memory_at_0, loc_3 + 204))
		while true do
			reg_0 = FUNC_LIST[633](0, loc_1, rt_add_i32(loc_3, 200), rt_add_i32(loc_3, 80), rt_add_i32(loc_3, 160))
			if rt_lt_i32(reg_0, 0) then
				while true do
					loc_1 = 4294967295
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 76), 0) then
				while true do
					reg_0 = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[545](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = (if reg_0 == 0 then 1 else 0)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			rt_store_i32(memory_at_0, loc_0, bit_and(loc_6, 4294967263))
			while true do
				while true do
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
							while true do
								rt_store_i32(memory_at_0, loc_0 + 48, 80)
								rt_store_i32(memory_at_0, loc_0 + 28, 0)
								rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
								loc_4 = rt_load_i32(memory_at_0, loc_0 + 44)
								rt_store_i32(memory_at_0, loc_0 + 44, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_load_i32(memory_at_0, loc_0 + 16) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 4294967295
					reg_1 = FUNC_LIST[549](loc_0)
					reg_0 = loc_2
					if reg_1 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[633](loc_0, loc_1, rt_add_i32(loc_3, 200), rt_add_i32(loc_3, 80), rt_add_i32(loc_3, 160))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			loc_1 = bit_and(loc_6, 32)
			if loc_4 ~= 0 then
				while true do
					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 36)](loc_0, 0, 0)
					rt_store_i32(memory_at_0, loc_0 + 48, 0)
					rt_store_i32(memory_at_0, loc_0 + 44, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 28, 0)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
					rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
					reg_0 = (if loc_4 ~= 0 then loc_2 else 4294967295)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			rt_store_i32(memory_at_0, loc_0, bit_or(loc_1, loc_4))
			loc_1 = (if bit_and(loc_4, 32) ~= 0 then 4294967295 else loc_2)
			if loc_5 ~= 0 then
				break
			end
			FUNC_LIST[546](loc_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 208)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[633] = --[[ printf_core ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local reg_5
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
		loc_22 = rt_add_i32(loc_6, 39)
		loc_16 = rt_add_i32(loc_6, 40)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_5 = 0
							while true do
								loc_11 = loc_1
								if rt_lt_i32(bit_xor(loc_12, 2147483647), loc_5) then
									desired = 4
									break
								end
								loc_12 = rt_add_i32(loc_5, loc_12)
								while true do
									while true do
										while true do
											while true do
												loc_5 = loc_1
												loc_10 = rt_load_i32_u8(memory_at_0, loc_5)
												if loc_10 ~= 0 then
													while true do
														while true do
															while true do
																while true do
																	loc_10 = bit_and(loc_10, 255)
																	if loc_10 == 0 then
																		while true do
																			loc_1 = loc_5
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	if loc_10 ~= 37 then
																		desired = 13
																		break
																	end
																	loc_10 = loc_5
																	while true do
																		if rt_load_i32_u8(memory_at_0, loc_10 + 1) ~= 37 then
																			while true do
																				loc_1 = loc_10
																				desired = 14
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		loc_5 = rt_add_i32(loc_5, 1)
																		loc_7 = rt_load_i32_u8(memory_at_0, loc_10 + 2)
																		loc_1 = rt_add_i32(loc_10, 2)
																		loc_10 = loc_1
																		if loc_7 == 37 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																loc_5 = rt_sub_i32(loc_5, loc_11)
																loc_10 = bit_xor(loc_12, 2147483647)
																if rt_gt_i32(loc_5, loc_10) then
																	desired = 4
																	break
																end
																if loc_0 ~= 0 then
																	while true do
																		FUNC_LIST[634](loc_0, loc_11, loc_5)
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																if loc_5 ~= 0 then
																	desired = 6
																	break
																end
																rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																loc_5 = rt_add_i32(loc_1, 1)
																loc_13 = 4294967295
																while true do
																	loc_7 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_1 + 1), 48)
																	if loc_7 > 9 then
																		break
																	end
																	if rt_load_i32_u8(memory_at_0, loc_1 + 2) ~= 36 then
																		break
																	end
																	loc_5 = rt_add_i32(loc_1, 3)
																	loc_17 = 1
																	loc_13 = loc_7
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_6 + 60, loc_5)
																loc_9 = 0
																while true do
																	loc_18 = rt_load_i32_i8(memory_at_0, loc_5)
																	loc_1 = rt_sub_i32(loc_18, 32)
																	if loc_1 > 31 then
																		while true do
																			loc_7 = loc_5
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_7 = loc_5
																	loc_1 = rt_shl_i32(1, loc_1)
																	if bit_and(loc_1, 75913) == 0 then
																		break
																	end
																	while true do
																		loc_7 = rt_add_i32(loc_5, 1)
																		rt_store_i32(memory_at_0, loc_6 + 60, loc_7)
																		loc_9 = bit_or(loc_1, loc_9)
																		loc_18 = rt_load_i32_i8(memory_at_0, loc_5 + 1)
																		loc_1 = rt_sub_i32(loc_18, 32)
																		if loc_1 >= 32 then
																			desired = 14
																			break
																		end
																		loc_5 = loc_7
																		loc_1 = rt_shl_i32(1, loc_1)
																		if bit_and(loc_1, 75913) ~= 0 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																while true do
																	if loc_18 == 42 then
																		while true do
																			while true do
																				while true do
																					loc_5 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_7 + 1), 48)
																					if loc_5 > 9 then
																						break
																					end
																					if rt_load_i32_u8(memory_at_0, loc_7 + 2) ~= 36 then
																						break
																					end
																					loc_1 = rt_add_i32(loc_7, 3)
																					loc_17 = 1
																					while true do
																						if loc_0 == 0 then
																							while true do
																								rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_4), 10)
																								reg_0 = 0
																								desired = 18
																								break
																							end
																							if desired then
																								if desired == 18 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 3), loc_3))
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																					desired = 16
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				if loc_17 ~= 0 then
																					desired = 10
																					break
																				end
																				loc_1 = rt_add_i32(loc_7, 1)
																				if loc_0 == 0 then
																					while true do
																						rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																						loc_17 = 0
																						loc_15 = 0
																						desired = 14
																						break
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_5 = rt_load_i32(memory_at_0, loc_2)
																				rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_5, 4))
																				loc_17 = 0
																				reg_0 = rt_load_i32(memory_at_0, loc_5)
																				break
																			end
																			if desired then
																				break
																			end
																			loc_15 = reg_0
																			rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																			if rt_ge_i32(loc_15, 0) then
																				desired = 14
																				break
																			end
																			loc_15 = rt_sub_i32(0, loc_15)
																			loc_9 = bit_or(loc_9, 8192)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[635](rt_add_i32(loc_6, 60))
																	loc_15 = reg_0
																	if rt_lt_i32(loc_15, 0) then
																		desired = 4
																		break
																	end
																	loc_1 = rt_load_i32(memory_at_0, loc_6 + 60)
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																loc_5 = 0
																loc_8 = 4294967295
																while true do
																	reg_0 = 0
																	if rt_load_i32_u8(memory_at_0, loc_1) ~= 46 then
																		break
																	end
																	if rt_load_i32_u8(memory_at_0, loc_1 + 1) == 42 then
																		while true do
																			while true do
																				while true do
																					loc_7 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_1 + 2), 48)
																					if loc_7 > 9 then
																						break
																					end
																					if rt_load_i32_u8(memory_at_0, loc_1 + 3) ~= 36 then
																						break
																					end
																					loc_1 = rt_add_i32(loc_1, 4)
																					while true do
																						if loc_0 == 0 then
																							while true do
																								rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 2), loc_4), 10)
																								reg_0 = 0
																								desired = 18
																								break
																							end
																							if desired then
																								if desired == 18 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 3), loc_3))
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																					desired = 16
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				if loc_17 ~= 0 then
																					desired = 10
																					break
																				end
																				loc_1 = rt_add_i32(loc_1, 2)
																				reg_0 = 0
																				if loc_0 == 0 then
																					break
																				end
																				loc_7 = rt_load_i32(memory_at_0, loc_2)
																				rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_7, 4))
																				reg_0 = rt_load_i32(memory_at_0, loc_7)
																				break
																			end
																			if desired then
																				break
																			end
																			loc_8 = reg_0
																			rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																			reg_0 = (if rt_ge_i32(loc_8, 0) then 1 else 0)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i32(memory_at_0, loc_6 + 60, rt_add_i32(loc_1, 1))
																	reg_0 = FUNC_LIST[635](rt_add_i32(loc_6, 60))
																	loc_8 = reg_0
																	loc_1 = rt_load_i32(memory_at_0, loc_6 + 60)
																	reg_0 = 1
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																loc_20 = reg_0
																while true do
																	loc_7 = loc_5
																	loc_14 = 28
																	loc_18 = loc_1
																	loc_5 = rt_load_i32_i8(memory_at_0, loc_18)
																	if rt_sub_i32(loc_5, 123) < 4294967238 then
																		desired = 3
																		break
																	end
																	loc_1 = rt_add_i32(loc_1, 1)
																	loc_5 = rt_load_i32_u8(memory_at_0, rt_add_i32(rt_add_i32(rt_mul_i32(loc_7, 58), loc_5), 47071))
																	if rt_sub_i32(loc_5, 1) < 8 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																while true do
																	if loc_5 ~= 27 then
																		while true do
																			if loc_5 == 0 then
																				desired = 3
																				break
																			end
																			if rt_ge_i32(loc_13, 0) then
																				while true do
																					if loc_0 == 0 then
																						while true do
																							rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_13, 2), loc_4), loc_5)
																							desired = 5
																							break
																						end
																						if desired then
																							break
																						end
																					end
																					rt_store_i64(memory_at_0, loc_6 + 48, rt_load_i64(memory_at_0, rt_add_i32(rt_shl_i32(loc_13, 3), loc_3)))
																					desired = 14
																					break
																				end
																				if desired then
																					break
																				end
																			end
																			if loc_0 == 0 then
																				desired = 7
																				break
																			end
																			FUNC_LIST[636](rt_add_i32(loc_6, 48), loc_5, loc_2)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	if rt_ge_i32(loc_13, 0) then
																		desired = 3
																		break
																	end
																	loc_5 = 0
																	if loc_0 == 0 then
																		desired = 6
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if bit_and(rt_load_i32_u8(memory_at_0, loc_0), 32) ~= 0 then
																	desired = 2
																	break
																end
																loc_21 = bit_and(loc_9, 4294901759)
																loc_9 = (if bit_and(loc_9, 8192) ~= 0 then loc_21 else loc_9)
																loc_13 = 0
																loc_19 = 1071
																loc_14 = loc_16
																while true do
																	reg_0 = loc_0
																	reg_1 = 32
																	reg_2 = loc_15
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	loc_5 = rt_load_i32_i8(memory_at_0, loc_18)
																																	loc_5 = (if loc_7 ~= 0 then (if bit_and(loc_5, 15) == 3 then bit_and(loc_5, 4294967251) else loc_5) else loc_5)
																																	if not br_map[1] then
																																		br_map[1] = (function()
																																			return { [0] = 4, 22, 22, 22, 22, 22, 22, 22, 22, 16, 22, 9, 6, 16, 16, 16, 22, 6, 22, 22, 22, 22, 2, 5, 3, 22, 22, 10, 22, 1, 22, 22, 4, }
																																		end)()
																																	end
																																	temp = br_map[1][rt_sub_i32(loc_5, 88)] or 0
																																	if temp < 5 then
																																		if temp < 2 then
																																			if temp < 1 then
																																				break
																																			else
																																				desired = 29
																																				break
																																			end
																																		elseif temp > 2 then
																																			if temp < 4 then
																																				desired = 27
																																				break
																																			else
																																				desired = 26
																																				break
																																			end
																																		else
																																			desired = 28
																																			break
																																		end
																																	elseif temp > 5 then
																																		if temp < 10 then
																																			if temp < 9 then
																																				desired = 24
																																				break
																																			else
																																				desired = 21
																																				break
																																			end
																																		elseif temp > 10 then
																																			if temp < 22 then
																																				desired = 14
																																				break
																																			else
																																				desired = 8
																																				break
																																			end
																																		else
																																			desired = 20
																																			break
																																		end
																																	else
																																		desired = 25
																																		break
																																	end
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																																while true do
																																	if not br_map[2] then
																																		br_map[2] = (function()
																																			return { [0] = 16, 22, 11, 22, 16, 16, 16, }
																																		end)()
																																	end
																																	temp = br_map[2][rt_sub_i32(loc_5, 65)] or 0
																																	if temp < 16 then
																																		if temp < 11 then
																																			break
																																		else
																																			desired = 19
																																			break
																																		end
																																	elseif temp > 16 then
																																		desired = 8
																																		break
																																	else
																																		desired = 14
																																		break
																																	end
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																																if loc_5 == 83 then
																																	desired = 18
																																	break
																																end
																																desired = 8
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																															loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																															reg_3 = 1071
																															desired = 23
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																														loc_5 = 0
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					if not br_map[3] then
																																						br_map[3] = (function()
																																							return { [0] = 0, 1, 2, 3, 4, 28, 5, 6, }
																																						end)()
																																					end
																																					temp = br_map[3][bit_and(loc_7, 255)] or 28
																																					if temp < 4 then
																																						if temp < 2 then
																																							if temp < 1 then
																																								break
																																							else
																																								desired = 33
																																								break
																																							end
																																						elseif temp > 2 then
																																							desired = 31
																																							break
																																						else
																																							desired = 32
																																							break
																																						end
																																					elseif temp > 4 then
																																						if temp < 6 then
																																							desired = 29
																																							break
																																						elseif temp > 6 then
																																							desired = 6
																																							break
																																						else
																																							desired = 28
																																							break
																																						end
																																					else
																																						desired = 30
																																						break
																																					end
																																				end
																																				if desired then
																																					if desired == 33 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																				desired = 6
																																				break
																																			end
																																			if desired then
																																				if desired == 32 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																			desired = 6
																																			break
																																		end
																																		if desired then
																																			if desired == 31 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		rt_store_i64(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), rt_extend_i64_i32(loc_12))
																																		desired = 6
																																		break
																																	end
																																	if desired then
																																		if desired == 30 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	rt_store_i32_n16(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																	desired = 6
																																	break
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																																rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																desired = 6
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																															desired = 6
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																														rt_store_i64(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), rt_extend_i64_i32(loc_12))
																														desired = 6
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																													loc_8 = (if loc_8 <= 8 then 8 else loc_8)
																													loc_9 = bit_or(loc_9, 8)
																													loc_5 = 120
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																												loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																												reg_3 = FUNC_LIST[637](loc_23, loc_16, bit_and(loc_5, 32))
																												loc_11 = reg_3
																												if rt_eq_i64(loc_23, rt_i64_ZERO) then
																													desired = 22
																													break
																												end
																												if bit_and(loc_9, 8) == 0 then
																													desired = 22
																													break
																												end
																												loc_19 = rt_add_i32(rt_shr_u32(loc_5, 4), 1071)
																												loc_13 = 2
																												desired = 22
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																											loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																											reg_3 = FUNC_LIST[638](loc_23, loc_16)
																											loc_11 = reg_3
																											if bit_and(loc_9, 8) == 0 then
																												desired = 22
																												break
																											end
																											loc_5 = rt_sub_i32(loc_16, loc_11)
																											loc_8 = (if rt_lt_i32(loc_5, loc_8) then loc_8 else rt_add_i32(loc_5, 1))
																											desired = 22
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																										loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																										if rt_lt_i64(loc_23, rt_i64_ZERO) then
																											while true do
																												loc_23 = rt_sub_i64(rt_i64_ZERO, loc_23)
																												rt_store_i64(memory_at_0, loc_6 + 48, loc_23)
																												loc_13 = 1
																												reg_3 = 1071
																												desired = 23
																												break
																											end
																											if desired then
																												if desired == 23 then
																													desired = nil
																												end
																												break
																											end
																										end
																										if bit_and(loc_9, 2048) ~= 0 then
																											while true do
																												loc_13 = 1
																												reg_3 = 1072
																												desired = 23
																												break
																											end
																											if desired then
																												if desired == 23 then
																													desired = nil
																												end
																												break
																											end
																										end
																										loc_13 = bit_and(loc_9, 1)
																										reg_3 = (if loc_13 ~= 0 then 1073 else 1071)
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									loc_19 = reg_3
																									reg_3 = FUNC_LIST[639](loc_23, loc_16)
																									loc_11 = reg_3
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								if bit_and((if rt_lt_i32(loc_8, 0) then 1 else 0), loc_20) ~= 0 then
																									desired = 4
																									break
																								end
																								loc_9 = (if loc_20 ~= 0 then bit_and(loc_9, 4294901759) else loc_9)
																								while true do
																									if rt_ne_i64(loc_23, rt_i64_ZERO) then
																										break
																									end
																									if loc_8 ~= 0 then
																										break
																									end
																									loc_11 = loc_16
																									loc_8 = 0
																									desired = 8
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								loc_5 = rt_add_i32((if rt_eq_i64(loc_23, rt_i64_ZERO) then 1 else 0), rt_sub_i32(loc_16, loc_11))
																								loc_8 = (if rt_lt_i32(loc_5, loc_8) then loc_8 else loc_5)
																								desired = 8
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							loc_5 = rt_load_i32_u8(memory_at_0, loc_6 + 48)
																							desired = 9
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						loc_5 = rt_load_i32(memory_at_0, loc_6 + 48)
																						loc_11 = (if loc_5 ~= 0 then loc_5 else 7509)
																						reg_3 = FUNC_LIST[610](loc_11, (if loc_8 >= 2147483647 then 2147483647 else loc_8))
																						loc_5 = reg_3
																						loc_14 = rt_add_i32(loc_5, loc_11)
																						if rt_ge_i32(loc_8, 0) then
																							while true do
																								loc_9 = loc_21
																								loc_8 = loc_5
																								desired = 8
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_9 = loc_21
																						loc_8 = loc_5
																						if rt_load_i32_u8(memory_at_0, loc_14) ~= 0 then
																							desired = 4
																							break
																						end
																						desired = 8
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																					if rt_ne_i64(loc_23, rt_i64_ZERO) then
																						desired = 17
																						break
																					end
																					loc_5 = 0
																					desired = 9
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				if loc_8 ~= 0 then
																					while true do
																						reg_3 = rt_load_i32(memory_at_0, loc_6 + 48)
																						desired = 16
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																				end
																				FUNC_LIST[640](loc_0, 32, loc_15, 0, loc_9)
																				reg_3 = 0
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			rt_store_i32(memory_at_0, loc_6 + 12, 0)
																			rt_store_i64_n32(memory_at_0, loc_6 + 8, loc_23)
																			rt_store_i32(memory_at_0, loc_6 + 48, rt_add_i32(loc_6, 8))
																			loc_8 = 4294967295
																			reg_3 = rt_add_i32(loc_6, 8)
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_11 = reg_3
																		loc_5 = 0
																		loc_10 = loc_11
																		while true do
																			while true do
																				loc_7 = rt_load_i32(memory_at_0, loc_10)
																				if loc_7 == 0 then
																					break
																				end
																				reg_3 = FUNC_LIST[641](rt_add_i32(loc_6, 4), loc_7)
																				loc_7 = reg_3
																				if rt_lt_i32(loc_7, 0) then
																					desired = 2
																					break
																				end
																				if rt_sub_i32(loc_8, loc_5) < loc_7 then
																					break
																				end
																				loc_10 = rt_add_i32(loc_10, 4)
																				loc_5 = rt_add_i32(loc_5, loc_7)
																				if loc_8 > loc_5 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_14 = 61
																		if rt_lt_i32(loc_5, 0) then
																			desired = 3
																			break
																		end
																		FUNC_LIST[640](loc_0, 32, loc_15, loc_5, loc_9)
																		loc_10 = 0
																		reg_3 = loc_10
																		if loc_5 == 0 then
																			break
																		end
																		while true do
																			while true do
																				loc_7 = rt_load_i32(memory_at_0, loc_11)
																				if loc_7 == 0 then
																					break
																				end
																				reg_5 = FUNC_LIST[641](rt_add_i32(loc_6, 4), loc_7)
																				loc_7 = reg_5
																				loc_10 = rt_add_i32(loc_10, loc_7)
																				if loc_5 < loc_10 then
																					break
																				end
																				FUNC_LIST[634](loc_0, rt_add_i32(loc_6, 4), loc_7)
																				loc_11 = rt_add_i32(loc_11, 4)
																				if loc_5 > loc_10 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		reg_3 = loc_5
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_10 = reg_3
																	FUNC_LIST[640](reg_0, reg_1, reg_2, loc_10, bit_xor(loc_9, 8192))
																	loc_5 = (if rt_lt_i32(loc_10, loc_15) then loc_15 else loc_10)
																	desired = 6
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if bit_and((if rt_lt_i32(loc_8, 0) then 1 else 0), loc_20) ~= 0 then
																	desired = 4
																	break
																end
																loc_14 = 61
																reg_0 = FUNC_LIST[642](loc_0, rt_load_f64(memory_at_0, loc_6 + 48), loc_15, loc_8, loc_9, loc_5)
																loc_5 = reg_0
																if rt_ge_i32(loc_5, 0) then
																	desired = 6
																	break
																end
																desired = 3
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															loc_10 = rt_load_i32_u8(memory_at_0, loc_5 + 1)
															loc_5 = rt_add_i32(loc_5, 1)
															continue
														end
														if desired then
															break
														end
														error("out of code bounds")
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												if loc_0 ~= 0 then
													desired = 1
													break
												end
												if loc_17 == 0 then
													desired = 7
													break
												end
												loc_5 = 1
												while true do
													loc_10 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_4))
													if loc_10 ~= 0 then
														while true do
															FUNC_LIST[636](rt_add_i32(rt_shl_i32(loc_5, 3), loc_3), loc_10, loc_2)
															loc_12 = 1
															loc_5 = rt_add_i32(loc_5, 1)
															if loc_5 ~= 10 then
																desired = 11
																break
															end
															desired = 1
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_5 >= 10 then
													while true do
														loc_12 = 1
														desired = 1
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												while true do
													if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_4)) ~= 0 then
														desired = 10
														break
													end
													loc_12 = 1
													loc_5 = rt_add_i32(loc_5, 1)
													if loc_5 ~= 10 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_14 = 28
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32_n8(memory_at_0, loc_6 + 39, loc_5)
										loc_8 = 1
										loc_11 = loc_22
										loc_9 = loc_21
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = rt_sub_i32(loc_14, loc_11)
									loc_18 = (if rt_lt_i32(loc_1, loc_8) then loc_8 else loc_1)
									if rt_gt_i32(loc_18, bit_xor(loc_13, 2147483647)) then
										desired = 4
										break
									end
									loc_14 = 61
									loc_7 = rt_add_i32(loc_13, loc_18)
									loc_5 = (if rt_lt_i32(loc_7, loc_15) then loc_15 else loc_7)
									if rt_lt_i32(loc_10, loc_5) then
										desired = 3
										break
									end
									FUNC_LIST[640](loc_0, 32, loc_5, loc_7, loc_9)
									FUNC_LIST[634](loc_0, loc_19, loc_13)
									FUNC_LIST[640](loc_0, 48, loc_5, loc_7, bit_xor(loc_9, 65536))
									FUNC_LIST[640](loc_0, 48, loc_18, loc_1, 0)
									FUNC_LIST[634](loc_0, loc_11, loc_1)
									FUNC_LIST[640](loc_0, 32, loc_5, loc_7, bit_xor(loc_9, 8192))
									loc_1 = rt_load_i32(memory_at_0, loc_6 + 60)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_12 = 0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_14 = 61
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[516]()
				rt_store_i32(memory_at_0, reg_0, loc_14)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_12 = 4294967295
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_6, 4294967232)
		reg_0 = loc_12
		break
	end
	return reg_0
end
FUNC_LIST[634] = --[[ out ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0), 32) == 0 then
			while true do
				reg_0 = FUNC_LIST[550](loc_1, loc_2, loc_0)
				break
			end
		end
		break
	end
end
FUNC_LIST[635] = --[[ getint ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0)
		loc_2 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_3), 48)
		if loc_2 > 9 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_4 = 4294967295
			if loc_1 <= 214748364 then
				while true do
					loc_1 = rt_mul_i32(loc_1, 10)
					reg_0 = (if bit_xor(loc_1, 2147483647) < loc_2 then 4294967295 else rt_add_i32(loc_1, loc_2))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			else
				while true do
					reg_0 = loc_4
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			loc_4 = reg_0
			loc_2 = rt_add_i32(loc_3, 1)
			rt_store_i32(memory_at_0, loc_0, loc_2)
			loc_5 = rt_load_i32_i8(memory_at_0, loc_3 + 1)
			loc_1 = loc_4
			loc_3 = loc_2
			loc_2 = rt_sub_i32(loc_5, 48)
			if loc_2 < 10 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[636] = --[[ pop_arg ]] function(loc_0, loc_1, loc_2)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 0, 8, 9, 10, 8, 9, 1, 2, 3, 4, 10, 9, 10, 10, 8, 9, 5, 6, }
														end)()
													end
													temp = br_map[1][rt_sub_i32(loc_1, 9)] or 7
													if temp < 5 then
														if temp < 2 then
															if temp < 1 then
																break
															else
																desired = 10
																break
															end
														elseif temp > 2 then
															if temp < 4 then
																desired = 8
																break
															else
																desired = 7
																break
															end
														else
															desired = 9
															break
														end
													elseif temp > 5 then
														if temp < 8 then
															if temp < 7 then
																desired = 5
																break
															else
																desired = 4
																break
															end
														elseif temp > 8 then
															if temp < 10 then
																desired = 2
																break
															else
																desired = 1
																break
															end
														else
															desired = 3
															break
														end
													else
														desired = 6
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_1 = rt_load_i32(memory_at_0, loc_2)
												rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
												rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, loc_1))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_1 = rt_load_i32(memory_at_0, loc_2)
											rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
											rt_store_i64(memory_at_0, loc_0, rt_load_i64_i16(memory_at_0, loc_1))
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_1 = rt_load_i32(memory_at_0, loc_2)
										rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
										rt_store_i64(memory_at_0, loc_0, rt_load_i64_u16(memory_at_0, loc_1))
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = rt_load_i32(memory_at_0, loc_2)
									rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
									rt_store_i64(memory_at_0, loc_0, rt_load_i64_i8(memory_at_0, loc_1))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = rt_load_i32(memory_at_0, loc_2)
								rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
								rt_store_i64(memory_at_0, loc_0, rt_load_i64_u8(memory_at_0, loc_1))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_1 = bit_and(rt_add_i32(rt_load_i32(memory_at_0, loc_2), 7), 4294967288)
							rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 8))
							rt_store_f64(memory_at_0, loc_0, rt_load_f64(memory_at_0, loc_1))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[643](loc_0, loc_2)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_2)
				rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
				rt_store_i64(memory_at_0, loc_0, rt_load_i64_i32(memory_at_0, loc_1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
			rt_store_i64(memory_at_0, loc_0, rt_load_i64_u32(memory_at_0, loc_1))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = bit_and(rt_add_i32(rt_load_i32(memory_at_0, loc_2), 7), 4294967288)
		rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 8))
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[637] = --[[ fmt_x ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		if rt_ne_i64(loc_0, rt_i64_ZERO) then
			while true do
				while true do
					loc_1 = rt_sub_i32(loc_1, 1)
					rt_store_i32_n8(memory_at_0, loc_1, bit_or(loc_2, rt_load_i32_u8(memory_at_0, rt_add_i32(bit_and(rt_wrap_i32_i64(loc_0), 15), 47600))))
					loc_3 = (if rt_gt_u64(loc_0, rt_i64_from_u32(15, 0)) then 1 else 0)
					loc_0 = rt_shr_u64(loc_0, rt_i64_from_u32(4, 0))
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[638] = --[[ fmt_o ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		if rt_ne_i64(loc_0, rt_i64_ZERO) then
			while true do
				while true do
					loc_1 = rt_sub_i32(loc_1, 1)
					rt_store_i32_n8(memory_at_0, loc_1, bit_or(bit_and(rt_wrap_i32_i64(loc_0), 7), 48))
					loc_2 = (if rt_gt_u64(loc_0, rt_i64_from_u32(7, 0)) then 1 else 0)
					loc_0 = rt_shr_u64(loc_0, rt_i64_from_u32(3, 0))
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[639] = --[[ fmt_u ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			if rt_lt_u64(loc_0, rt_i64_from_u32(0, 1)) then
				while true do
					loc_5 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_1 = rt_sub_i32(loc_1, 1)
				loc_5 = rt_div_u64(loc_0, rt_i64_from_u32(10, 0))
				rt_store_i32_n8(memory_at_0, loc_1, bit_or(rt_wrap_i32_i64(rt_add_i64(loc_0, rt_mul_i64(loc_5, rt_i64_from_u32(246, 0)))), 48))
				loc_2 = (if rt_gt_u64(loc_0, rt_i64_from_u32(4294967295, 9)) then 1 else 0)
				loc_0 = loc_5
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if rt_ne_i64(loc_5, rt_i64_ZERO) then
			while true do
				loc_2 = rt_wrap_i32_i64(loc_5)
				while true do
					loc_1 = rt_sub_i32(loc_1, 1)
					loc_3 = rt_div_u32(loc_2, 10)
					rt_store_i32_n8(memory_at_0, loc_1, bit_or(rt_add_i32(loc_2, rt_mul_i32(loc_3, 246)), 48))
					loc_4 = (if loc_2 > 9 then 1 else 0)
					loc_2 = loc_3
					if loc_4 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[640] = --[[ pad ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 256)
		GLOBAL_LIST[0].value = loc_5
		while true do
			if rt_le_i32(loc_2, loc_3) then
				break
			end
			if bit_and(loc_4, 73728) ~= 0 then
				break
			end
			loc_3 = rt_sub_i32(loc_2, loc_3)
			loc_2 = (if loc_3 < 256 then 1 else 0)
			reg_0 = FUNC_LIST[519](loc_5, loc_1, (if loc_2 ~= 0 then loc_3 else 256))
			if loc_2 == 0 then
				while true do
					while true do
						FUNC_LIST[634](loc_0, loc_5, 256)
						loc_3 = rt_sub_i32(loc_3, 256)
						if loc_3 > 255 then
							continue
						end
						break
					end
					break
				end
			end
			FUNC_LIST[634](loc_0, loc_5, loc_3)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 256)
		break
	end
end
FUNC_LIST[641] = --[[ wctomb ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[645](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[642] = --[[ fmt_fp ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0.0
	local loc_25 = rt_i64_ZERO
	local loc_26 = rt_i64_ZERO
	local loc_27 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_12 = rt_sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_12
		rt_store_i32(memory_at_0, loc_12 + 44, 0)
		while true do
			reg_0 = FUNC_LIST[528](loc_1)
			loc_25 = reg_0
			if rt_lt_i64(loc_25, rt_i64_ZERO) then
				while true do
					loc_17 = 1
					loc_19 = 1081
					loc_1 = rt_neg_f64(loc_1)
					reg_0 = FUNC_LIST[528](loc_1)
					loc_25 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if bit_and(loc_4, 2048) ~= 0 then
				while true do
					loc_17 = 1
					loc_19 = 1084
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_17 = bit_and(loc_4, 1)
			loc_19 = (if loc_17 ~= 0 then 1087 else 1082)
			loc_23 = (if loc_17 == 0 then 1 else 0)
			break
		end
		while true do
			if rt_eq_i64(rt_bit_and_i64(loc_25, rt_i64_from_u32(0, 2146435072)), rt_i64_from_u32(0, 2146435072)) then
				while true do
					loc_6 = rt_add_i32(loc_17, 3)
					FUNC_LIST[640](loc_0, 32, loc_2, loc_6, bit_and(loc_4, 4294901759))
					FUNC_LIST[634](loc_0, loc_19, loc_17)
					loc_7 = bit_and(loc_5, 32)
					FUNC_LIST[634](loc_0, (if loc_1 ~= loc_1 then (if loc_7 ~= 0 then 3440 else 6216) else (if loc_7 ~= 0 then 3915 else 6223)), 3)
					FUNC_LIST[640](loc_0, 32, loc_2, loc_6, bit_xor(loc_4, 8192))
					loc_8 = (if rt_gt_i32(loc_2, loc_6) then loc_2 else loc_6)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_18 = rt_add_i32(loc_12, 16)
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[644](loc_1, rt_add_i32(loc_12, 44))
						loc_1 = reg_0
						loc_1 = (loc_1 + loc_1)
						if loc_1 ~= 0e0 then
							while true do
								loc_6 = rt_load_i32(memory_at_0, loc_12 + 44)
								rt_store_i32(memory_at_0, loc_12 + 44, rt_sub_i32(loc_6, 1))
								loc_21 = bit_or(loc_5, 32)
								if loc_21 ~= 97 then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_21 = bit_or(loc_5, 32)
						if loc_21 == 97 then
							desired = 2
							break
						end
						loc_20 = rt_load_i32(memory_at_0, loc_12 + 44)
						reg_0 = (if rt_lt_i32(loc_3, 0) then 6 else loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_20 = rt_sub_i32(loc_6, 29)
					rt_store_i32(memory_at_0, loc_12 + 44, loc_20)
					loc_1 = (loc_1 * 2.68435456e8)
					reg_0 = (if rt_lt_i32(loc_3, 0) then 6 else loc_3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_11 = reg_0
				loc_15 = rt_add_i32(rt_add_i32(loc_12, 48), (if rt_ge_i32(loc_20, 0) then 288 else 0))
				loc_7 = loc_15
				while true do
					reg_0 = loc_7
					while true do
						if bit_and((if loc_1 < 4.294967296e9 then 1 else 0), (if loc_1 >= 0e0 then 1 else 0)) ~= 0 then
							while true do
								reg_1 = rt_truncate_f64(loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = reg_1
					rt_store_i32(memory_at_0, reg_0, loc_6)
					loc_7 = rt_add_i32(loc_7, 4)
					loc_1 = ((loc_1 - no_op(loc_6)) * 1e9)
					if loc_1 ~= 0e0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_le_i32(loc_20, 0) then
						while true do
							loc_3 = loc_20
							loc_6 = loc_7
							loc_9 = loc_15
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = loc_15
					loc_3 = loc_20
					while true do
						loc_3 = (if loc_3 >= 29 then 29 else loc_3)
						while true do
							loc_6 = rt_sub_i32(loc_7, 4)
							if loc_9 > loc_6 then
								break
							end
							loc_27 = rt_extend_i64_u32(loc_3)
							loc_25 = rt_i64_ZERO
							while true do
								loc_26 = rt_add_i64(rt_bit_and_i64(loc_25, rt_i64_from_u32(4294967295, 0)), rt_shl_i64(rt_load_i64_u32(memory_at_0, loc_6), loc_27))
								loc_25 = rt_div_u64(loc_26, rt_i64_from_u32(1000000000, 0))
								rt_store_i64_n32(memory_at_0, loc_6, rt_add_i64(rt_mul_i64(loc_25, rt_i64_from_u32(3294967296, 0)), loc_26))
								loc_6 = rt_sub_i32(loc_6, 4)
								if loc_9 <= loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_lt_u64(loc_26, rt_i64_from_u32(1000000000, 0)) then
								break
							end
							loc_9 = rt_sub_i32(loc_9, 4)
							rt_store_i64_n32(memory_at_0, loc_9, loc_25)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						while true do
							loc_6 = loc_7
							if loc_6 > loc_9 then
								while true do
									loc_7 = rt_sub_i32(loc_6, 4)
									if rt_load_i32(memory_at_0, loc_7) == 0 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_12 + 44), loc_3)
						rt_store_i32(memory_at_0, loc_12 + 44, loc_3)
						loc_7 = loc_6
						if rt_gt_i32(loc_3, 0) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_lt_i32(loc_3, 0) then
					while true do
						loc_16 = rt_add_i32(rt_div_u32(rt_add_i32(loc_11, 25), 9), 1)
						loc_22 = (if loc_21 == 102 then 1 else 0)
						while true do
							loc_7 = rt_sub_i32(0, loc_3)
							loc_10 = (if loc_7 >= 9 then 9 else loc_7)
							while true do
								if loc_6 <= loc_9 then
									while true do
										loc_7 = rt_shl_i32((if rt_load_i32(memory_at_0, loc_9) == 0 then 1 else 0), 2)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_13 = rt_shr_u32(1000000000, loc_10)
								loc_14 = bit_xor(rt_shl_i32(4294967295, loc_10), 4294967295)
								loc_3 = 0
								loc_7 = loc_9
								while true do
									loc_8 = rt_load_i32(memory_at_0, loc_7)
									rt_store_i32(memory_at_0, loc_7, rt_add_i32(loc_3, rt_shr_u32(loc_8, loc_10)))
									loc_3 = rt_mul_i32(loc_13, bit_and(loc_8, loc_14))
									loc_7 = rt_add_i32(loc_7, 4)
									if loc_6 > loc_7 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_7 = rt_shl_i32((if rt_load_i32(memory_at_0, loc_9) == 0 then 1 else 0), 2)
								if loc_3 == 0 then
									break
								end
								rt_store_i32(memory_at_0, loc_6, loc_3)
								loc_6 = rt_add_i32(loc_6, 4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_3 = rt_add_i32(loc_10, rt_load_i32(memory_at_0, loc_12 + 44))
							rt_store_i32(memory_at_0, loc_12 + 44, loc_3)
							loc_9 = rt_add_i32(loc_7, loc_9)
							loc_7 = (if loc_22 ~= 0 then loc_15 else loc_9)
							loc_6 = (if rt_lt_i32(loc_16, rt_shr_i32(rt_sub_i32(loc_6, loc_7), 2)) then rt_add_i32(loc_7, rt_shl_i32(loc_16, 2)) else loc_6)
							if rt_lt_i32(loc_3, 0) then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = 0
				while true do
					if loc_6 <= loc_9 then
						break
					end
					loc_3 = rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_15, loc_9), 2), 9)
					loc_7 = 10
					loc_8 = rt_load_i32(memory_at_0, loc_9)
					if loc_8 < 10 then
						break
					end
					while true do
						loc_3 = rt_add_i32(loc_3, 1)
						loc_7 = rt_mul_i32(loc_7, 10)
						if loc_7 <= loc_8 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = rt_sub_i32(rt_sub_i32(loc_11, (if loc_21 ~= 102 then loc_3 else 0)), bit_and((if loc_21 == 103 then 1 else 0), (if loc_11 ~= 0 then 1 else 0)))
				if rt_lt_i32(loc_7, rt_sub_i32(rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_6, loc_15), 2), 9), 9)) then
					while true do
						loc_8 = rt_add_i32(loc_7, 9216)
						loc_13 = rt_div_i32(loc_8, 9)
						loc_10 = rt_add_i32(rt_add_i32(rt_add_i32(loc_12, 48), (if rt_lt_i32(loc_20, 0) then 4294963204 else 4294963492)), rt_shl_i32(loc_13, 2))
						loc_7 = 10
						loc_8 = rt_add_i32(loc_8, rt_mul_i32(loc_13, 4294967287))
						if rt_le_i32(loc_8, 7) then
							while true do
								while true do
									loc_7 = rt_mul_i32(loc_7, 10)
									loc_8 = rt_add_i32(loc_8, 1)
									if loc_8 ~= 8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								break
							end
						end
						while true do
							loc_8 = rt_load_i32(memory_at_0, loc_10)
							loc_16 = rt_div_u32(loc_8, loc_7)
							loc_13 = rt_mul_i32(loc_7, loc_16)
							loc_14 = rt_add_i32(loc_10, 4)
							if bit_and((if loc_8 == loc_13 then 1 else 0), (if loc_6 == loc_14 then 1 else 0)) ~= 0 then
								break
							end
							loc_8 = rt_sub_i32(loc_8, loc_13)
							while true do
								if bit_and(loc_16, 1) == 0 then
									while true do
										loc_1 = 9.007199254740992e15
										if loc_7 ~= 1000000000 then
											desired = 5
											break
										end
										if loc_9 >= loc_10 then
											desired = 5
											break
										end
										if bit_and(rt_load_i32_u8(memory_at_0, rt_sub_i32(loc_10, 4)), 1) == 0 then
											desired = 5
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_1 = 9.007199254740994e15
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_1 = (if loc_6 == loc_14 then 1e0 else 1.5e0)
							loc_14 = rt_shr_u32(loc_7, 1)
							loc_24 = (if loc_8 < loc_14 then 5e-1 else (if loc_14 == loc_8 then reg_1 else 1.5e0))
							while true do
								if loc_23 ~= 0 then
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_19) ~= 45 then
									break
								end
								loc_24 = rt_neg_f64(loc_24)
								loc_1 = rt_neg_f64(loc_1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_10, loc_13)
							if loc_1 == (loc_1 + loc_24) then
								break
							end
							loc_7 = rt_add_i32(loc_7, loc_13)
							rt_store_i32(memory_at_0, loc_10, loc_7)
							if loc_7 >= 1000000000 then
								while true do
									while true do
										rt_store_i32(memory_at_0, loc_10, 0)
										loc_10 = rt_sub_i32(loc_10, 4)
										if loc_10 < loc_9 then
											while true do
												loc_9 = rt_sub_i32(loc_9, 4)
												rt_store_i32(memory_at_0, loc_9, 0)
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_7 = rt_add_i32(rt_load_i32(memory_at_0, loc_10), 1)
										rt_store_i32(memory_at_0, loc_10, loc_7)
										if loc_7 > 999999999 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_3 = rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_15, loc_9), 2), 9)
							loc_7 = 10
							loc_8 = rt_load_i32(memory_at_0, loc_9)
							if loc_8 < 10 then
								break
							end
							while true do
								loc_3 = rt_add_i32(loc_3, 1)
								loc_7 = rt_mul_i32(loc_7, 10)
								if loc_7 <= loc_8 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						loc_7 = rt_add_i32(loc_10, 4)
						reg_0 = (if loc_6 > loc_7 then loc_7 else loc_6)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_6
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = reg_0
				while true do
					loc_7 = loc_6
					loc_8 = (if loc_9 >= loc_7 then 1 else 0)
					if loc_8 == 0 then
						while true do
							loc_6 = rt_sub_i32(loc_6, 4)
							if rt_load_i32(memory_at_0, loc_6) == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_21 ~= 103 then
						while true do
							loc_10 = bit_and(loc_4, 8)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = (if loc_11 ~= 0 then loc_11 else 1)
					loc_10 = bit_and((if rt_lt_i32(loc_3, loc_6) then 1 else 0), (if rt_gt_i32(loc_3, 4294967291) then 1 else 0))
					loc_11 = rt_add_i32((if loc_10 ~= 0 then bit_xor(loc_3, 4294967295) else 4294967295), loc_6)
					loc_5 = rt_add_i32(loc_5, (if loc_10 ~= 0 then 4294967295 else 4294967294))
					loc_10 = bit_and(loc_4, 8)
					if loc_10 ~= 0 then
						break
					end
					loc_6 = 4294967287
					while true do
						if loc_8 ~= 0 then
							break
						end
						loc_10 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 4))
						if loc_10 == 0 then
							break
						end
						loc_8 = 10
						loc_6 = 0
						if (loc_10 % 10) ~= 0 then
							break
						end
						while true do
							loc_13 = loc_6
							loc_6 = rt_add_i32(loc_13, 1)
							loc_8 = rt_mul_i32(loc_8, 10)
							if (loc_10 % loc_8) == 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = bit_xor(loc_13, 4294967295)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_7, loc_15), 2), 9)
					if bit_and(loc_5, 4294967263) == 70 then
						while true do
							loc_10 = 0
							loc_6 = rt_sub_i32(rt_add_i32(loc_6, loc_8), 9)
							loc_6 = (if rt_gt_i32(loc_6, 0) then loc_6 else 0)
							loc_11 = (if rt_gt_i32(loc_6, loc_11) then loc_11 else loc_6)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_10 = 0
					loc_6 = rt_sub_i32(rt_add_i32(loc_6, rt_add_i32(loc_3, loc_8)), 9)
					loc_6 = (if rt_gt_i32(loc_6, 0) then loc_6 else 0)
					loc_11 = (if rt_gt_i32(loc_6, loc_11) then loc_11 else loc_6)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = 4294967295
				loc_13 = bit_or(loc_10, loc_11)
				if rt_lt_i32((if loc_13 ~= 0 then 2147483645 else 2147483646), loc_11) then
					desired = 1
					break
				end
				loc_14 = rt_add_i32(rt_add_i32((if loc_13 ~= 0 then 1 else 0), loc_11), 1)
				while true do
					loc_22 = bit_and(loc_5, 4294967263)
					if loc_22 == 70 then
						while true do
							if rt_lt_i32(bit_xor(loc_14, 2147483647), loc_3) then
								desired = 1
								break
							end
							loc_6 = (if rt_gt_i32(loc_3, 0) then loc_3 else 0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = rt_shr_i32(loc_3, 31)
					reg_1 = FUNC_LIST[639](rt_extend_i64_u32(rt_sub_i32(bit_xor(loc_6, loc_3), loc_6)), loc_18)
					loc_6 = reg_1
					if rt_le_i32(rt_sub_i32(loc_18, loc_6), 1) then
						while true do
							while true do
								loc_6 = rt_sub_i32(loc_6, 1)
								rt_store_i32_n8(memory_at_0, loc_6, 48)
								if rt_lt_i32(rt_sub_i32(loc_18, loc_6), 2) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_16 = rt_sub_i32(loc_6, 2)
					rt_store_i32_n8(memory_at_0, loc_16, loc_5)
					rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_6, 1), (if rt_lt_i32(loc_3, 0) then 45 else 43))
					loc_6 = rt_sub_i32(loc_18, loc_16)
					if rt_gt_i32(loc_6, bit_xor(loc_14, 2147483647)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_add_i32(loc_6, loc_14)
				if rt_gt_i32(loc_6, bit_xor(loc_17, 2147483647)) then
					desired = 1
					break
				end
				loc_14 = rt_add_i32(loc_6, loc_17)
				FUNC_LIST[640](loc_0, 32, loc_2, loc_14, loc_4)
				FUNC_LIST[634](loc_0, loc_19, loc_17)
				FUNC_LIST[640](loc_0, 48, loc_2, loc_14, bit_xor(loc_4, 65536))
				while true do
					while true do
						while true do
							if loc_22 == 70 then
								while true do
									loc_3 = bit_or(rt_add_i32(loc_12, 16), 9)
									loc_8 = (if loc_9 > loc_15 then loc_15 else loc_9)
									loc_9 = loc_8
									while true do
										reg_0 = FUNC_LIST[639](rt_load_i64_u32(memory_at_0, loc_9), loc_3)
										loc_6 = reg_0
										while true do
											if loc_8 ~= loc_9 then
												while true do
													if rt_add_i32(loc_12, 16) >= loc_6 then
														desired = 8
														break
													end
													while true do
														loc_6 = rt_sub_i32(loc_6, 1)
														rt_store_i32_n8(memory_at_0, loc_6, 48)
														if rt_add_i32(loc_12, 16) < loc_6 then
															continue
														end
														break
													end
													if desired then
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											if loc_3 ~= loc_6 then
												break
											end
											loc_6 = rt_sub_i32(loc_6, 1)
											rt_store_i32_n8(memory_at_0, loc_6, 48)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										FUNC_LIST[634](loc_0, loc_6, rt_sub_i32(loc_3, loc_6))
										loc_9 = rt_add_i32(loc_9, 4)
										if loc_15 >= loc_9 then
											continue
										end
										break
									end
									if desired then
										break
									end
									if loc_13 ~= 0 then
										while true do
											FUNC_LIST[634](loc_0, 7313, 1)
											break
										end
										if desired then
											break
										end
									end
									if loc_7 <= loc_9 then
										desired = 5
										break
									end
									if rt_le_i32(loc_11, 0) then
										desired = 5
										break
									end
									while true do
										reg_0 = FUNC_LIST[639](rt_load_i64_u32(memory_at_0, loc_9), loc_3)
										loc_6 = reg_0
										if loc_6 > rt_add_i32(loc_12, 16) then
											while true do
												while true do
													loc_6 = rt_sub_i32(loc_6, 1)
													rt_store_i32_n8(memory_at_0, loc_6, 48)
													if rt_add_i32(loc_12, 16) < loc_6 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										FUNC_LIST[634](loc_0, loc_6, (if rt_ge_i32(loc_11, 9) then 9 else loc_11))
										loc_6 = rt_sub_i32(loc_11, 9)
										loc_9 = rt_add_i32(loc_9, 4)
										if loc_7 <= loc_9 then
											desired = 4
											break
										end
										loc_8 = (if rt_gt_i32(loc_11, 9) then 1 else 0)
										loc_11 = loc_6
										if loc_8 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							while true do
								if rt_lt_i32(loc_11, 0) then
									break
								end
								loc_13 = (if loc_7 > loc_9 then loc_7 else rt_add_i32(loc_9, 4))
								loc_3 = bit_or(rt_add_i32(loc_12, 16), 9)
								loc_7 = loc_9
								while true do
									reg_0 = FUNC_LIST[639](rt_load_i64_u32(memory_at_0, loc_7), loc_3)
									loc_6 = reg_0
									if loc_6 == loc_3 then
										while true do
											loc_6 = rt_sub_i32(loc_6, 1)
											rt_store_i32_n8(memory_at_0, loc_6, 48)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									while true do
										if loc_7 ~= loc_9 then
											while true do
												if rt_add_i32(loc_12, 16) >= loc_6 then
													desired = 8
													break
												end
												while true do
													loc_6 = rt_sub_i32(loc_6, 1)
													rt_store_i32_n8(memory_at_0, loc_6, 48)
													if rt_add_i32(loc_12, 16) < loc_6 then
														continue
													end
													break
												end
												if desired then
													break
												end
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[634](loc_0, loc_6, 1)
										loc_6 = rt_add_i32(loc_6, 1)
										if bit_or(loc_10, loc_11) == 0 then
											break
										end
										FUNC_LIST[634](loc_0, 7313, 1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_8 = rt_sub_i32(loc_3, loc_6)
									FUNC_LIST[634](loc_0, loc_6, (if rt_lt_i32(loc_8, loc_11) then loc_8 else loc_11))
									loc_11 = rt_sub_i32(loc_11, loc_8)
									loc_7 = rt_add_i32(loc_7, 4)
									if loc_13 <= loc_7 then
										desired = 6
										break
									end
									if rt_ge_i32(loc_11, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[640](loc_0, 48, rt_add_i32(loc_11, 18), 18, 0)
							FUNC_LIST[634](loc_0, loc_16, rt_sub_i32(loc_18, loc_16))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = loc_11
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[640](loc_0, 48, rt_add_i32(loc_6, 9), 9, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[640](loc_0, 32, loc_2, loc_14, bit_xor(loc_4, 8192))
				loc_8 = (if rt_gt_i32(loc_2, loc_14) then loc_2 else loc_14)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_14 = rt_add_i32(bit_and(rt_shr_i32(rt_shl_i32(loc_5, 26), 31), 9), loc_19)
			while true do
				if loc_3 > 11 then
					break
				end
				loc_6 = rt_sub_i32(12, loc_3)
				loc_24 = 1.6e1
				while true do
					loc_24 = (loc_24 * 1.6e1)
					loc_6 = rt_sub_i32(loc_6, 1)
					if loc_6 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_14) == 45 then
					while true do
						loc_1 = rt_neg_f64((loc_24 + (rt_neg_f64(loc_1) - loc_24)))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = ((loc_1 + loc_24) - loc_24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = rt_load_i32(memory_at_0, loc_12 + 44)
			loc_6 = rt_shr_i32(loc_7, 31)
			reg_0 = FUNC_LIST[639](rt_extend_i64_u32(rt_sub_i32(bit_xor(loc_7, loc_6), loc_6)), loc_18)
			loc_6 = reg_0
			if loc_6 == loc_18 then
				while true do
					loc_6 = rt_sub_i32(loc_6, 1)
					rt_store_i32_n8(memory_at_0, loc_6, 48)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = bit_or(loc_17, 2)
			loc_9 = bit_and(loc_5, 32)
			loc_13 = rt_sub_i32(loc_6, 2)
			rt_store_i32_n8(memory_at_0, loc_13, rt_add_i32(loc_5, 15))
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_6, 1), (if rt_lt_i32(loc_7, 0) then 45 else 43))
			loc_8 = bit_and(loc_4, 8)
			loc_7 = rt_add_i32(loc_12, 16)
			while true do
				loc_6 = loc_7
				reg_0 = loc_6
				reg_1 = loc_9
				while true do
					if math_abs(loc_1) < 2.147483648e9 then
						while true do
							reg_2 = rt_truncate_f64(loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_2 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_7 = reg_2
				rt_store_i32_n8(memory_at_0, reg_0, bit_or(reg_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_7, 47600))))
				loc_1 = ((loc_1 - rt_convert_f64_i32(loc_7)) * 1.6e1)
				while true do
					loc_7 = rt_add_i32(loc_6, 1)
					if rt_sub_i32(loc_7, rt_add_i32(loc_12, 16)) ~= 1 then
						break
					end
					while true do
						if loc_8 ~= 0 then
							break
						end
						if rt_gt_i32(loc_3, 0) then
							break
						end
						if loc_1 == 0e0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32_n8(memory_at_0, loc_6 + 1, 46)
					loc_7 = rt_add_i32(loc_6, 2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_1 ~= 0e0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = 4294967295
			loc_9 = rt_sub_i32(loc_18, loc_13)
			loc_16 = rt_add_i32(loc_9, loc_10)
			if rt_lt_i32(rt_sub_i32(2147483645, loc_16), loc_3) then
				break
			end
			loc_6 = rt_sub_i32(loc_7, rt_add_i32(loc_12, 16))
			loc_3 = (if loc_3 ~= 0 then (if rt_gt_i32(loc_3, rt_sub_i32(loc_6, 2)) then rt_add_i32(loc_3, 2) else loc_6) else loc_6)
			loc_7 = rt_add_i32(loc_3, loc_16)
			FUNC_LIST[640](loc_0, 32, loc_2, loc_7, loc_4)
			FUNC_LIST[634](loc_0, loc_14, loc_10)
			FUNC_LIST[640](loc_0, 48, loc_2, loc_7, bit_xor(loc_4, 65536))
			FUNC_LIST[634](loc_0, rt_add_i32(loc_12, 16), loc_6)
			FUNC_LIST[640](loc_0, 48, rt_sub_i32(loc_3, loc_6), 0, 0)
			FUNC_LIST[634](loc_0, loc_13, loc_9)
			FUNC_LIST[640](loc_0, 32, loc_2, loc_7, bit_xor(loc_4, 8192))
			loc_8 = (if rt_gt_i32(loc_2, loc_7) then loc_2 else loc_7)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_12, 560)
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[643] = --[[ pop_arg_long_double ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		loc_2 = bit_and(rt_add_i32(rt_load_i32(memory_at_0, loc_1), 7), 4294967288)
		rt_store_i32(memory_at_0, loc_1, rt_add_i32(loc_2, 16))
		reg_1 = FUNC_LIST[569](rt_load_i64(memory_at_0, loc_2), rt_load_i64(memory_at_0, loc_2 + 8))
		rt_store_f64(memory_at_0, loc_0, reg_1)
		break
	end
end
FUNC_LIST[644] = --[[ frexp ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_reinterpret_i64_f64(loc_0)
		loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_3, rt_i64_from_u32(52, 0))), 2047)
		if loc_2 ~= 2047 then
			while true do
				if loc_2 == 0 then
					while true do
						reg_0 = loc_1
						if loc_0 == 0e0 then
							while true do
								reg_1 = 0
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_1 = FUNC_LIST[644]((loc_0 * 1.8446744073709552e19), loc_1)
								loc_0 = reg_1
								reg_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 4294967232)
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_1
						rt_store_i32(memory_at_0, reg_0, loc_2)
						reg_0 = loc_0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				rt_store_i32(memory_at_0, loc_1, rt_sub_i32(loc_2, 1022))
				reg_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 2148532223)), rt_i64_from_u32(0, 1071644672)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[645] = --[[ wcrtomb ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if loc_1 <= 127 then
				break
			end
			if bit_and(loc_1, 4294967168) == 57216 then
				break
			end
			reg_0 = FUNC_LIST[516]()
			rt_store_i32(memory_at_0, reg_0, 25)
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32_n8(memory_at_0, loc_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[646] = --[[ operator new(unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[647](loc_0)
		loc_0 = reg_0
		if loc_0 == 0 then
			while true do
				FUNC_LIST[648]()
				error("out of code bounds")
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[647] = --[[ operator_new_impl(unsigned long) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		loc_1 = (if loc_0 <= 1 then 1 else loc_0)
		while true do
			while true do
				reg_0 = FUNC_LIST[553](loc_1)
				loc_0 = reg_0
				if loc_0 ~= 0 then
					while true do
						reg_0 = loc_0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = FUNC_LIST[649]()
						loc_0 = reg_0
						if loc_0 ~= 0 then
							desired = 2
							break
						end
						reg_0 = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = reg_0
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			TABLE_LIST[0].data[loc_0]()
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[648] = --[[ __throw_bad_alloc_shim() ]] function()
	while true do
		FUNC_LIST[650]()
		error("out of code bounds")
	end
end
FUNC_LIST[649] = --[[ std::get_new_handler() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[736](49620)
		break
	end
	return reg_0
end
FUNC_LIST[650] = --[[ std::__throw_bad_alloc() ]] function()
	while true do
		FUNC_LIST[655]()
		error("out of code bounds")
	end
end
FUNC_LIST[651] = --[[ operator new[](unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[646](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[652] = --[[ operator delete(void*) ]] function(loc_0)
	while true do
		FUNC_LIST[555](loc_0)
		break
	end
end
FUNC_LIST[653] = --[[ operator delete(void*, unsigned long) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[652](loc_0)
		break
	end
end
FUNC_LIST[654] = --[[ operator delete[](void*) ]] function(loc_0)
	while true do
		FUNC_LIST[652](loc_0)
		break
	end
end
FUNC_LIST[655] = --[[ abort ]] function()
	while true do
		FUNC_LIST[3]()
		error("out of code bounds")
	end
end
FUNC_LIST[656] = --[[ std::exception::exception[abi:nn180100]() ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 48156)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[657] = --[[ std::__2::__libcpp_refstring::__libcpp_refstring(char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[544](loc_1)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[646](rt_add_i32(loc_2, 13))
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_3 + 8, 0)
		rt_store_i32(memory_at_0, loc_3 + 4, loc_2)
		rt_store_i32(memory_at_0, loc_3, loc_2)
		reg_1 = FUNC_LIST[658](loc_3)
		reg_1 = FUNC_LIST[517](reg_1, loc_1, rt_add_i32(loc_2, 1))
		rt_store_i32(memory_at_0, loc_0, reg_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[658] = --[[ std::__2::__refstring_imp::(anonymous namespace)::data_from_rep(std::__2::__refstring_imp::(anonymous namespace)::_Rep_base*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_add_i32(loc_0, 12)
		break
	end
	return reg_0
end
FUNC_LIST[659] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::data[abi:nn180100]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[660](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[660] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__get_pointer[abi:nn180100]() const ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0)
		reg_2 = FUNC_LIST[661](rt_load_i32_u8(memory_at_0, loc_0 + 11))
		reg_0 = (if reg_2 ~= 0 then reg_0 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[661] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__is_long[abi:nn180100]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_shr_u32(bit_and(loc_0, 128), 7)
		break
	end
	return reg_0
end
FUNC_LIST[662] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::size[abi:nn180100]() const ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[661](loc_1)
		if reg_0 ~= 0 then
			while true do
				reg_0 = loc_0
				break
			end
		else
			while true do
				reg_0 = FUNC_LIST[663](loc_1)
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[663] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__get_short_size[abi:nn180100]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_and(loc_0, 127)
		break
	end
	return reg_0
end
FUNC_LIST[664] = --[[ unsigned long const& std::__2::min[abi:nn180100]<unsigned long>(unsigned long const&, unsigned long const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[665](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[665] = --[[ unsigned long const& std::__2::min[abi:nn180100]<unsigned long, std::__2::__less<void, void>>(unsigned long const&, unsigned long const&, std::__2::__less<void, void>) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[666](rt_load_i32(memory_at_0, loc_1), rt_load_i32(memory_at_0, loc_0))
		reg_0 = (if reg_2 ~= 0 then loc_1 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[666] = --[[ bool std::__2::__less<void, void>::operator()[abi:nn180100]<unsigned long, unsigned long>(unsigned long const&, unsigned long const&) const ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = (if loc_0 < loc_1 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[667] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::capacity[abi:nn180100]() const ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = 10
		reg_0 = FUNC_LIST[661](rt_load_i32_u8(memory_at_0, loc_0 + 11))
		if reg_0 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[668](rt_load_i32(memory_at_0, loc_0 + 8))
				reg_0 = rt_sub_i32(reg_0, 1)
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[668] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__get_long_cap[abi:nn180100]() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_and(loc_0, 2147483647)
		break
	end
	return reg_0
end
FUNC_LIST[669] = --[[ std::__2::char_traits<char>::move[abi:nn180100](char*, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[670](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[670] = --[[ char* std::__2::__constexpr_memmove[abi:nn180100]<char, char const, 0>(char*, char const*, std::__2::__element_count) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		if loc_2 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[518](loc_0, loc_1, loc_2)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[671] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__null_terminate_at[abi:nn180100](char*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[672](loc_0, loc_2)
		FUNC_LIST[673](rt_add_i32(loc_1, loc_2), 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[672] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_size[abi:nn180100](unsigned long) ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[661](rt_load_i32_u8(memory_at_0, loc_0 + 11))
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[674](loc_0, loc_1)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[675](loc_0, loc_1)
		break
	end
end
FUNC_LIST[673] = --[[ std::__2::char_traits<char>::assign[abi:nn180100](char&, char const&) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32_n8(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[674] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_long_size[abi:nn180100](unsigned long) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
		break
	end
end
FUNC_LIST[675] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_short_size[abi:nn180100](unsigned long) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32_n8(memory_at_0, loc_0 + 11, bit_and(loc_1, 127))
		break
	end
end
FUNC_LIST[676] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5, loc_6, loc_7)
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		if loc_2 <= rt_sub_i32(2147483638, loc_1) then
			while true do
				reg_0 = FUNC_LIST[660](loc_0)
				loc_10 = reg_0
				loc_9 = 2147483639
				reg_0 = rt_add_i32(loc_8, 4)
				if loc_1 <= 1073741810 then
					while true do
						rt_store_i32(memory_at_0, loc_8 + 12, rt_shl_i32(loc_1, 1))
						rt_store_i32(memory_at_0, loc_8 + 4, rt_add_i32(loc_1, loc_2))
						reg_1 = FUNC_LIST[677](rt_add_i32(loc_8, 4), rt_add_i32(loc_8, 12))
						reg_1 = FUNC_LIST[678](rt_load_i32(memory_at_0, reg_1))
						reg_1 = rt_add_i32(reg_1, 1)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_9
						break
					end
					if desired then
						break
					end
				end
				loc_9 = reg_1
				FUNC_LIST[679](reg_0, loc_9)
				loc_2 = rt_load_i32(memory_at_0, loc_8 + 4)
				if loc_4 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[680](loc_2, loc_10, loc_4)
						break
					end
					if desired then
						break
					end
				end
				if loc_6 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[680](rt_add_i32(loc_2, loc_4), loc_7, loc_6)
						break
					end
					if desired then
						break
					end
				end
				loc_7 = rt_add_i32(loc_4, loc_5)
				loc_9 = rt_sub_i32(loc_3, loc_7)
				if loc_3 ~= loc_7 then
					while true do
						reg_0 = FUNC_LIST[680](rt_add_i32(loc_6, rt_add_i32(loc_2, loc_4)), rt_add_i32(loc_5, rt_add_i32(loc_4, loc_10)), loc_9)
						break
					end
					if desired then
						break
					end
				end
				loc_1 = rt_add_i32(loc_1, 1)
				if loc_1 ~= 11 then
					while true do
						FUNC_LIST[681](loc_10, loc_1)
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[682](loc_0, loc_2)
				FUNC_LIST[683](loc_0, rt_load_i32(memory_at_0, loc_8 + 8))
				loc_4 = rt_add_i32(loc_9, rt_add_i32(loc_4, loc_6))
				FUNC_LIST[674](loc_0, loc_4)
				FUNC_LIST[673](rt_add_i32(loc_2, loc_4), 0)
				GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[648]()
		error("out of code bounds")
	end
end
FUNC_LIST[677] = --[[ unsigned long const& std::__2::max[abi:nn180100]<unsigned long>(unsigned long const&, unsigned long const&) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[684](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[678] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__recommend[abi:nn180100](unsigned long) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = 10
		if loc_0 >= 11 then
			while true do
				reg_0 = FUNC_LIST[685](rt_add_i32(loc_0, 1))
				loc_0 = reg_0
				reg_0 = loc_0
				loc_0 = rt_sub_i32(loc_0, 1)
				reg_0 = (if loc_0 == 11 then reg_0 else loc_0)
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[679] = --[[ std::__2::__allocation_result<std::__2::allocator_traits<std::__2::allocator<char>>::pointer> std::__2::__allocate_at_least[abi:nn180100]<std::__2::allocator<char>>(std::__2::allocator<char>&, unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[686](loc_1)
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
		rt_store_i32(memory_at_0, loc_0, loc_2)
		break
	end
end
FUNC_LIST[680] = --[[ std::__2::char_traits<char>::copy[abi:nn180100](char*, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[687](loc_1, loc_2, loc_0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[681] = --[[ std::__2::allocator_traits<std::__2::allocator<char>>::deallocate[abi:nn180100](std::__2::allocator<char>&, char*, unsigned long) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[688](loc_0, loc_1)
		break
	end
end
FUNC_LIST[682] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_long_pointer[abi:nn180100](char*) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[683] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__set_long_cap[abi:nn180100](unsigned long) ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_0 + 8, bit_or(loc_1, 2147483648))
		break
	end
end
FUNC_LIST[684] = --[[ unsigned long const& std::__2::max[abi:nn180100]<unsigned long, std::__2::__less<void, void>>(unsigned long const&, unsigned long const&, std::__2::__less<void, void>) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[666](rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_1))
		reg_0 = (if reg_2 ~= 0 then loc_1 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[685] = --[[ unsigned long std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__align_it[abi:nn180100]<8ul>(unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_and(rt_add_i32(loc_0, 7), 4294967288)
		break
	end
	return reg_0
end
FUNC_LIST[686] = --[[ std::__2::allocator<char>::allocate[abi:nn180100](unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[706](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[687] = --[[ char* std::__2::copy_n[abi:nn180100]<char const*, unsigned long, char*, 0>(char const*, unsigned long, char*) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[692](loc_0, rt_add_i32(loc_0, loc_1), loc_2)
		break
	end
end
FUNC_LIST[688] = --[[ std::__2::allocator<char>::deallocate[abi:nn180100](char*, unsigned long) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[689](loc_0, loc_1)
		break
	end
end
FUNC_LIST[689] = --[[ std::__2::__libcpp_deallocate[abi:nn180100](void*, unsigned long, unsigned long) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[690](loc_0, loc_1)
		break
	end
end
FUNC_LIST[690] = --[[ void std::__2::__do_deallocate_handle_size[abi:nn180100]<>(void*, unsigned long) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[691](loc_0, loc_1)
		break
	end
end
FUNC_LIST[691] = --[[ void std::__2::__libcpp_operator_delete[abi:nn180100]<void*, unsigned long>(void*, unsigned long) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[653](loc_0, loc_1)
		break
	end
end
FUNC_LIST[692] = --[[ char* std::__2::copy[abi:nn180100]<char const*, char*>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[693](rt_add_i32(loc_3, 8), loc_0, loc_1, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[693] = --[[ std::__2::pair<char const*, char*> std::__2::__copy[abi:nn180100]<std::__2::_ClassicAlgPolicy, char const*, char const*, char*>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		FUNC_LIST[694](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[694] = --[[ std::__2::pair<char const*, char*> std::__2::__dispatch_copy_or_move[abi:nn180100]<std::__2::_ClassicAlgPolicy, std::__2::__copy_loop<std::__2::_ClassicAlgPolicy>, std::__2::__copy_trivial, char const*, char const*, char*>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		FUNC_LIST[695](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[695] = --[[ std::__2::pair<char const*, char*> std::__2::__unwrap_and_dispatch[abi:nn180100]<std::__2::__overload<std::__2::__copy_loop<std::__2::_ClassicAlgPolicy>, std::__2::__copy_trivial>, char const*, char const*, char*, 0>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		FUNC_LIST[696](rt_add_i32(loc_4, 24), loc_1, loc_2)
		FUNC_LIST[697](rt_add_i32(loc_4, 16), rt_load_i32(memory_at_0, loc_4 + 24), rt_load_i32(memory_at_0, loc_4 + 28), loc_3)
		reg_0 = FUNC_LIST[698](loc_1, rt_load_i32(memory_at_0, loc_4 + 16))
		loc_1 = reg_0
		reg_1 = FUNC_LIST[699](loc_3, rt_load_i32(memory_at_0, loc_4 + 20))
		rt_store_i32(memory_at_0, loc_4 + 12, reg_1)
		FUNC_LIST[700](loc_0, loc_1, rt_add_i32(loc_4, 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		break
	end
end
FUNC_LIST[696] = --[[ auto std::__2::__unwrap_range[abi:nn180100]<char const*, char const*>(char const*, char const*) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[701](loc_0, loc_1, loc_2)
		break
	end
end
FUNC_LIST[697] = --[[ std::__2::pair<char const*, char*> std::__2::__copy_trivial::operator()[abi:nn180100]<char const, char, 0>(char const*, char const*, char*) const ]] function(loc_0, loc_1, loc_2, loc_3)
	while true do
		FUNC_LIST[702](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[698] = --[[ char const* std::__2::__rewrap_range[abi:nn180100]<char const*, char const*, char const*>(char const*, char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[703](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[699] = --[[ char* std::__2::__rewrap_iter[abi:nn180100]<char*, char*, std::__2::__unwrap_iter_impl<char*, true>>(char*, char*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[704](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[700] = --[[ std::__2::pair<std::__2::__unwrap_ref_decay<char const*>::type, std::__2::__unwrap_ref_decay<char*>::type> std::__2::make_pair[abi:nn180100]<char const*, char*>(char const*&&, char*&&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[705](loc_0, loc_1, loc_2)
		break
	end
end
FUNC_LIST[701] = --[[ std::__2::__unwrap_range_impl<char const*, char const*>::__unwrap[abi:nn180100](char const*, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		reg_0 = FUNC_LIST[705](loc_0, loc_1, rt_add_i32(loc_3, 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[702] = --[[ std::__2::pair<char const*, char*> std::__2::__copy_trivial_impl[abi:nn180100]<char const, char>(char const*, char const*, char*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_5 = rt_sub_i32(loc_2, loc_1)
		reg_1 = FUNC_LIST[670](loc_3, loc_1, loc_5)
		rt_store_i32(memory_at_0, loc_4 + 12, rt_add_i32(reg_1, loc_5))
		FUNC_LIST[700](loc_0, loc_2, rt_add_i32(loc_4, 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[703] = --[[ std::__2::__unwrap_range_impl<char const*, char const*>::__rewrap[abi:nn180100](char const*, char const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[699](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[704] = --[[ std::__2::__unwrap_iter_impl<char*, true>::__rewrap[abi:nn180100](char*, char*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[705] = --[[ std::__2::pair<char const*, char*>::pair[abi:nn180100]<char const*, char*, 0>(char const*&&, char*&&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, loc_2))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[706] = --[[ std::__2::__libcpp_allocate[abi:nn180100](unsigned long, unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[651](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[707] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__fits_in_sso[abi:nn180100](unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if loc_0 < 11 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[708] = --[[ std::__2::char_traits<char>::length[abi:nn180100](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[709](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[709] = --[[ std::__2::__constexpr_strlen[abi:nn180100](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[544](loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[710] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__grow_by_without_replace[abi:nn180100](unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	while true do
		FUNC_LIST[711](loc_0, loc_1, loc_2, loc_3, loc_4)
		FUNC_LIST[674](loc_0, loc_3)
		break
	end
end
FUNC_LIST[711] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__grow_by[abi:nn180100](unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		loc_7 = 2147483639
		if loc_2 <= rt_sub_i32(2147483639, loc_1) then
			while true do
				reg_0 = FUNC_LIST[660](loc_0)
				loc_6 = reg_0
				reg_0 = rt_add_i32(loc_5, 4)
				if loc_1 <= 1073741810 then
					while true do
						rt_store_i32(memory_at_0, loc_5 + 12, rt_shl_i32(loc_1, 1))
						rt_store_i32(memory_at_0, loc_5 + 4, rt_add_i32(loc_1, loc_2))
						reg_1 = FUNC_LIST[677](rt_add_i32(loc_5, 4), rt_add_i32(loc_5, 12))
						reg_1 = FUNC_LIST[678](rt_load_i32(memory_at_0, reg_1))
						reg_1 = rt_add_i32(reg_1, 1)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_7
						break
					end
					if desired then
						break
					end
				end
				loc_7 = reg_1
				FUNC_LIST[679](reg_0, loc_7)
				loc_2 = rt_load_i32(memory_at_0, loc_5 + 4)
				if loc_4 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[680](loc_2, loc_6, loc_4)
						break
					end
					if desired then
						break
					end
				end
				if loc_3 ~= loc_4 then
					while true do
						reg_0 = FUNC_LIST[680](rt_add_i32(loc_2, loc_4), rt_add_i32(loc_4, loc_6), rt_sub_i32(loc_3, loc_4))
						break
					end
					if desired then
						break
					end
				end
				loc_4 = rt_add_i32(loc_1, 1)
				if loc_4 ~= 11 then
					while true do
						FUNC_LIST[681](loc_6, loc_4)
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[682](loc_0, loc_2)
				FUNC_LIST[683](loc_0, rt_load_i32(memory_at_0, loc_5 + 8))
				GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[648]()
		error("out of code bounds")
	end
end
FUNC_LIST[712] = --[[ std::__2::char_traits<char>::assign[abi:nn180100](char*, unsigned long, char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32_n8(memory_at_0, loc_3 + 15, loc_2)
		FUNC_LIST[713](loc_0, loc_1, rt_add_i32(loc_3, 15))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[713] = --[[ char* std::__2::fill_n[abi:nn180100]<char*, unsigned long, char>(char*, unsigned long, char const&) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[714](loc_0, loc_1, loc_2)
		break
	end
end
FUNC_LIST[714] = --[[ char* std::__2::__fill_n[abi:nn180100]<char*, unsigned long, char>(char*, unsigned long, char const&) ]] function(loc_0, loc_1, loc_2)
	local desired
	while true do
		while true do
			if loc_1 ~= 0 then
				while true do
					rt_store_i32_n8(memory_at_0, loc_0, rt_load_i32_u8(memory_at_0, loc_2))
					loc_1 = rt_sub_i32(loc_1, 1)
					loc_0 = rt_add_i32(loc_0, 1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		break
	end
end
FUNC_LIST[715] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::operator=(char) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[661](rt_load_i32_u8(memory_at_0, loc_0 + 11))
			if reg_0 ~= 0 then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0)
					FUNC_LIST[674](loc_0, 1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[675](loc_0, 1)
			loc_2 = loc_0
			break
		end
		FUNC_LIST[673](loc_2, loc_1)
		FUNC_LIST[673](rt_add_i32(loc_2, 1), 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[716] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__init_copy_ctor_external(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				reg_0 = FUNC_LIST[707](loc_2)
				if reg_0 ~= 0 then
					while true do
						FUNC_LIST[675](loc_0, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 >= 2147483640 then
					desired = 1
					break
				end
				reg_1 = FUNC_LIST[678](loc_2)
				FUNC_LIST[679](rt_add_i32(loc_3, 8), rt_add_i32(reg_1, 1))
				loc_4 = rt_load_i32(memory_at_0, loc_3 + 8)
				FUNC_LIST[682](loc_0, loc_4)
				FUNC_LIST[683](loc_0, rt_load_i32(memory_at_0, loc_3 + 12))
				FUNC_LIST[674](loc_0, loc_2)
				loc_0 = loc_4
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[680](loc_0, loc_1, rt_add_i32(loc_2, 1))
			GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[648]()
		error("out of code bounds")
	end
end
FUNC_LIST[717] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__assign_external(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		reg_1 = FUNC_LIST[667](loc_0)
		loc_3 = reg_1
		if loc_2 <= loc_3 then
			while true do
				reg_1 = FUNC_LIST[660](loc_0)
				reg_1 = FUNC_LIST[669](reg_1, loc_1, loc_2)
				reg_0 = FUNC_LIST[671](loc_0, reg_1, loc_2)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_3 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
		loc_4 = reg_3
		FUNC_LIST[676](loc_0, loc_3, rt_sub_i32(loc_2, loc_3), loc_4, 0, loc_4, loc_2, loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[718] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__assign_external(char const*) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[708](loc_1)
		reg_0 = FUNC_LIST[717](loc_0, loc_1, reg_2)
		break
	end
	return reg_0
end
FUNC_LIST[719] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::reserve(unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
		if loc_1 < 2147483640 then
			while true do
				while true do
					reg_0 = FUNC_LIST[667](loc_0)
					if reg_0 >= loc_1 then
						break
					end
					reg_1 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
					rt_store_i32(memory_at_0, loc_2 + 8, reg_1)
					reg_0 = FUNC_LIST[677](rt_add_i32(loc_2, 12), rt_add_i32(loc_2, 8))
					reg_0 = FUNC_LIST[678](rt_load_i32(memory_at_0, reg_0))
					loc_1 = reg_0
					reg_1 = FUNC_LIST[667](loc_0)
					if loc_1 == reg_1 then
						break
					end
					FUNC_LIST[720](loc_0, loc_1)
					break
				end
				if desired then
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[648]()
		error("out of code bounds")
	end
end
FUNC_LIST[720] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__shrink_or_extend[abi:nn180100](unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		loc_7 = 1
		loc_4 = rt_add_i32(loc_1, 1)
		reg_0 = FUNC_LIST[667](loc_0)
		loc_8 = reg_0
		reg_0 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
		loc_5 = reg_0
		while true do
			while true do
				reg_0 = FUNC_LIST[707](loc_1)
				loc_9 = reg_0
				if loc_9 ~= 0 then
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0)
						loc_3 = loc_0
						reg_0 = loc_5
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_1 > loc_8 then
						while true do
							FUNC_LIST[679](rt_add_i32(loc_2, 8), loc_4)
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
							reg_0 = rt_load_i32(memory_at_0, loc_2 + 12)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[679](rt_add_i32(loc_2, 8), loc_4)
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
					if loc_3 == 0 then
						desired = 1
						break
					end
					reg_0 = rt_load_i32(memory_at_0, loc_2 + 12)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = reg_0
				loc_6 = rt_load_i32_u8(memory_at_0, loc_0 + 11)
				reg_0 = FUNC_LIST[661](loc_6)
				loc_7 = reg_0
				reg_0 = FUNC_LIST[660](loc_0)
				loc_1 = reg_0
				reg_0 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), loc_6)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_0
			reg_0 = FUNC_LIST[680](loc_3, loc_1, rt_add_i32(loc_6, 1))
			loc_3 = reg_0
			if loc_7 ~= 0 then
				while true do
					FUNC_LIST[681](loc_1, rt_add_i32(loc_8, 1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_9 == 0 then
				while true do
					FUNC_LIST[683](loc_0, loc_4)
					FUNC_LIST[674](loc_0, loc_5)
					FUNC_LIST[682](loc_0, loc_3)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[675](loc_0, loc_5)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[721] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::append(char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[667](loc_0)
			loc_4 = reg_0
			reg_1 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
			loc_3 = reg_1
			if rt_sub_i32(loc_4, loc_3) >= loc_2 then
				while true do
					if loc_2 == 0 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[660](loc_0)
					loc_4 = reg_1
					reg_0 = FUNC_LIST[680](rt_add_i32(loc_3, loc_4), loc_1, loc_2)
					loc_2 = rt_add_i32(loc_2, loc_3)
					FUNC_LIST[672](loc_0, loc_2)
					FUNC_LIST[673](rt_add_i32(loc_2, loc_4), 0)
					reg_0 = loc_0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[676](loc_0, loc_4, rt_add_i32(loc_3, rt_sub_i32(loc_2, loc_4)), loc_3, loc_3, 0, loc_2, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[722] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::find(char, unsigned long) const ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[659](loc_0)
		reg_1 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
		reg_0 = FUNC_LIST[723](reg_0, reg_1, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[723] = --[[ unsigned long std::__2::__str_find[abi:nn180100]<char, unsigned long, std::__2::char_traits<char>, 4294967295ul>(char const*, unsigned long, char, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = 4294967295
		if loc_1 > loc_3 then
			while true do
				reg_0 = FUNC_LIST[724](rt_add_i32(loc_0, loc_3), rt_sub_i32(loc_1, loc_3), loc_2)
				loc_3 = reg_0
				reg_0 = (if loc_3 ~= 0 then rt_sub_i32(loc_3, loc_0) else 4294967295)
				break
			end
		else
			while true do
				reg_0 = loc_4
				break
			end
		end
		loc_4 = reg_0
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[724] = --[[ std::__2::char_traits<char>::find[abi:nn180100](char const*, unsigned long, char const&) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		if loc_1 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[725](loc_0, rt_extend_i32_n8(loc_2), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[725] = --[[ char const* std::__2::__constexpr_memchr[abi:nn180100]<char const, char>(char const*, char, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[604](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[726] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::push_back(char) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = rt_load_i32_u8(memory_at_0, loc_0 + 11)
						reg_0 = FUNC_LIST[661](loc_3)
						if reg_0 ~= 0 then
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_0 + 4)
								reg_1 = FUNC_LIST[668](rt_load_i32(memory_at_0, loc_0 + 8))
								loc_2 = rt_sub_i32(reg_1, 1)
								if loc_3 == loc_2 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = 10
						reg_0 = FUNC_LIST[663](loc_3)
						loc_3 = reg_0
						if loc_3 ~= 10 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[710](loc_0, loc_2, 1, loc_2, loc_2)
					loc_3 = loc_2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				FUNC_LIST[674](loc_0, rt_add_i32(loc_3, 1))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[675](loc_0, rt_add_i32(loc_3, 1))
			loc_2 = loc_0
			break
		end
		loc_0 = rt_add_i32(loc_2, loc_3)
		FUNC_LIST[673](loc_0, loc_1)
		FUNC_LIST[673](rt_add_i32(loc_0, 1), 0)
		break
	end
end
FUNC_LIST[727] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::append(unsigned long, char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		if loc_1 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[667](loc_0)
				loc_4 = reg_0
				reg_1 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
				loc_3 = reg_1
				if rt_sub_i32(loc_4, loc_3) < loc_1 then
					while true do
						FUNC_LIST[710](loc_0, loc_4, rt_add_i32(loc_3, rt_sub_i32(loc_1, loc_4)), loc_3, loc_3)
						break
					end
				end
				reg_1 = FUNC_LIST[660](loc_0)
				loc_4 = reg_1
				reg_0 = FUNC_LIST[712](rt_add_i32(loc_3, loc_4), loc_1, loc_2)
				loc_1 = rt_add_i32(loc_1, loc_3)
				FUNC_LIST[672](loc_0, loc_1)
				FUNC_LIST[673](rt_add_i32(loc_1, loc_4), 0)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[728] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__erase_external_with_move(unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		if loc_2 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
				loc_5 = reg_0
				reg_0 = FUNC_LIST[660](loc_0)
				loc_6 = reg_0
				loc_4 = rt_sub_i32(loc_5, loc_1)
				rt_store_i32(memory_at_0, loc_3 + 8, loc_4)
				while true do
					reg_1 = FUNC_LIST[664](rt_add_i32(loc_3, 12), rt_add_i32(loc_3, 8))
					loc_2 = rt_load_i32(memory_at_0, reg_1)
					if loc_4 == loc_2 then
						while true do
							loc_2 = loc_4
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_1 = rt_add_i32(loc_1, loc_6)
					reg_0 = FUNC_LIST[669](loc_1, rt_add_i32(loc_1, loc_2), rt_sub_i32(loc_4, loc_2))
					break
				end
				reg_0 = FUNC_LIST[671](loc_0, loc_6, rt_sub_i32(loc_5, loc_2))
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[729] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::compare(unsigned long, unsigned long, char const*, unsigned long) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 8, loc_4)
		rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
		while true do
			reg_1 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
			loc_2 = reg_1
			if loc_1 > loc_2 then
				break
			end
			if loc_4 == 4294967295 then
				break
			end
			rt_store_i32(memory_at_0, loc_5, rt_sub_i32(loc_2, loc_1))
			reg_1 = FUNC_LIST[664](rt_add_i32(loc_5, 12), loc_5)
			loc_2 = rt_load_i32(memory_at_0, reg_1)
			rt_store_i32(memory_at_0, loc_5 + 4, loc_2)
			while true do
				reg_0 = FUNC_LIST[659](loc_0)
				reg_2 = FUNC_LIST[664](rt_add_i32(loc_5, 4), rt_add_i32(loc_5, 8))
				reg_0 = FUNC_LIST[730](rt_add_i32(reg_0, loc_1), loc_3, rt_load_i32(memory_at_0, reg_2))
				loc_0 = reg_0
				if loc_0 ~= 0 then
					break
				end
				loc_0 = 4294967295
				if loc_2 < loc_4 then
					break
				end
				loc_0 = (if loc_2 > loc_4 then 1 else 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[648]()
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[730] = --[[ std::__2::char_traits<char>::compare[abi:nn180100](char const*, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[575](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[731] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::compare(unsigned long, unsigned long, char const*) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	while true do
		reg_4 = FUNC_LIST[708](loc_3)
		reg_0 = FUNC_LIST[729](loc_0, loc_1, loc_2, loc_3, reg_4)
		break
	end
	return reg_0
end
FUNC_LIST[732] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::append(char const*) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[708](loc_1)
		reg_0 = FUNC_LIST[721](loc_0, loc_1, reg_2)
		break
	end
	return reg_0
end
FUNC_LIST[733] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::resize(unsigned long, char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		reg_1 = FUNC_LIST[662](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32_u8(memory_at_0, loc_0 + 11))
		loc_3 = reg_1
		if loc_1 > loc_3 then
			while true do
				reg_0 = FUNC_LIST[727](loc_0, rt_sub_i32(loc_1, loc_3), loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[734](loc_0, loc_1)
		break
	end
end
FUNC_LIST[734] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__erase_to_end[abi:nn180100](unsigned long) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[660](loc_0)
		reg_0 = FUNC_LIST[671](loc_0, reg_1, loc_1)
		break
	end
end
FUNC_LIST[735] = --[[ std::get_terminate() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[736](48476)
		break
	end
	return reg_0
end
FUNC_LIST[736] = --[[ void (*std::__2::(anonymous namespace)::__libcpp_atomic_load[abi:nn180100]<void (*)()>(void (* const*)(), int))() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[737] = --[[ std::__terminate(void (*)()) ]] function(loc_0)
	while true do
		TABLE_LIST[0].data[loc_0]()
		FUNC_LIST[650]()
		error("out of code bounds")
	end
end
FUNC_LIST[738] = --[[ std::terminate() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[735]()
		FUNC_LIST[737](reg_0)
		error("out of code bounds")
	end
end
FUNC_LIST[739] = --[[ __cxa_increment_exception_refcount ]] function(loc_0)
	while true do
		if loc_0 ~= 0 then
			while true do
				FUNC_LIST[738]()
				error("out of code bounds")
			end
		end
		break
	end
end
FUNC_LIST[740] = --[[ __cxxabiv1::__class_type_info::~__class_type_info() ]] function(loc_0)
	while true do
		FUNC_LIST[653](loc_0, 8)
		break
	end
end
FUNC_LIST[741] = --[[ __cxxabiv1::__class_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = 1
			reg_1 = FUNC_LIST[742](loc_0, loc_1, 0)
			reg_0 = loc_4
			if reg_1 ~= 0 then
				break
			end
			reg_0 = 0
			if loc_1 == 0 then
				break
			end
			loc_4 = 0
			reg_1 = FUNC_LIST[743](loc_1, 47652, 47700)
			loc_1 = reg_1
			reg_0 = loc_4
			if loc_1 == 0 then
				break
			end
			reg_0 = FUNC_LIST[519](rt_add_i32(loc_3, 8), 0, 56)
			rt_store_i32_n8(memory_at_0, loc_3 + 59, 1)
			rt_store_i32(memory_at_0, loc_3 + 16, 4294967295)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_0)
			rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 52, 1)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 28)](loc_1, rt_add_i32(loc_3, 4), rt_load_i32(memory_at_0, loc_2), 1)
			loc_1 = rt_load_i32(memory_at_0, loc_3 + 28)
			if loc_1 == 1 then
				while true do
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3 + 20))
					break
				end
			end
			reg_0 = (if loc_1 == 1 then 1 else 0)
			break
		end
		loc_4 = reg_0
		GLOBAL_LIST[0].value = rt_sub_i32(loc_3, 4294967232)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[742] = --[[ is_equal(std::type_info const*, std::type_info const*, bool) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		if loc_2 == 0 then
			while true do
				reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 4) == rt_load_i32(memory_at_0, loc_1 + 4) then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_0 == loc_1 then
			while true do
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[584](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32(memory_at_0, loc_1 + 4))
		reg_0 = (if reg_0 == 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[743] = --[[ __dynamic_cast ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[744](rt_add_i32(loc_3, 4), loc_0)
		loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
		while true do
			loc_6 = rt_load_i32(memory_at_0, loc_3 + 8)
			reg_0 = FUNC_LIST[742](loc_6, loc_2, 0)
			if reg_0 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[745](loc_4, rt_load_i32(memory_at_0, loc_3 + 12))
					loc_5 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[746](loc_0, loc_4, loc_2, loc_6)
			loc_5 = reg_0
			if loc_5 ~= 0 then
				break
			end
			reg_0 = FUNC_LIST[747](loc_0, loc_4, loc_1, loc_2, loc_6)
			loc_5 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[744] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_get_derived_info(__cxxabiv1::(anonymous namespace)::derived_object_info*, void const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1)
		loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 8))
		rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
		rt_store_i32(memory_at_0, loc_0, rt_add_i32(loc_1, loc_3))
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4)))
		break
	end
end
FUNC_LIST[745] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_to_derived(void const*, void const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long, long) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = (if loc_1 ~= 0 then 0 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[746] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_try_downcast(void const*, void const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_4 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_4
		if rt_ge_i32(loc_0, loc_1) then
			while true do
				rt_store_i32(memory_at_0, loc_4 + 12, loc_2)
				rt_store_i32(memory_at_0, loc_4 + 4, loc_3)
				rt_store_i32(memory_at_0, loc_4 + 8, loc_0)
				reg_0 = FUNC_LIST[519](rt_add_i32(loc_4, 16), 0, 36)
				rt_store_i32(memory_at_0, loc_4 + 60, 0)
				rt_store_i64(memory_at_0, loc_4 + 52, rt_i64_from_u32(1, 16777216))
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 20)](loc_3, rt_add_i32(loc_4, 4), loc_1, loc_1, 1, 0)
				reg_0 = (if rt_load_i32(memory_at_0, loc_4 + 28) ~= 0 then loc_0 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		GLOBAL_LIST[0].value = rt_sub_i32(loc_4, 4294967232)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[747] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_slow(void const*, void const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_5 + 8, loc_0)
		rt_store_i32(memory_at_0, loc_5 + 4, loc_3)
		loc_2 = 0
		reg_0 = FUNC_LIST[519](rt_add_i32(loc_5, 16), 0, 43)
		rt_store_i32(memory_at_0, loc_5 + 60, 0)
		rt_store_i32_n8(memory_at_0, loc_5 + 59, 1)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4) + 24)](loc_4, rt_add_i32(loc_5, 4), loc_1, 1, 0)
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, }
						end)()
					end
					temp = br_map[1][rt_load_i32(memory_at_0, loc_5 + 40)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = (if rt_load_i32(memory_at_0, loc_5 + 44) == 1 then (if rt_load_i32(memory_at_0, loc_5 + 32) == 1 then (if rt_load_i32(memory_at_0, loc_5 + 36) == 1 then rt_load_i32(memory_at_0, loc_5 + 24) else 0) else 0) else 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_load_i32(memory_at_0, loc_5 + 28) ~= 1 then
				while true do
					if rt_load_i32(memory_at_0, loc_5 + 44) ~= 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_5 + 32) ~= 1 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_5 + 36) ~= 1 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_load_i32(memory_at_0, loc_5 + 20)
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_5, 4294967232)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[748] = --[[ __cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_5)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[749](loc_1, loc_2, loc_3, loc_4)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 20)](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
		break
	end
end
FUNC_LIST[749] = --[[ __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		rt_store_i32_n8(memory_at_0, loc_0 + 53, 1)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 4) ~= loc_2 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 52, 1)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
				if loc_2 == 0 then
					while true do
						rt_store_i32(memory_at_0, loc_0 + 36, 1)
						rt_store_i32(memory_at_0, loc_0 + 24, loc_3)
						rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
						if loc_3 ~= 1 then
							desired = 1
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 48) == 1 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_1 == loc_2 then
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
						if loc_2 == 2 then
							while true do
								rt_store_i32(memory_at_0, loc_0 + 24, loc_3)
								reg_0 = loc_3
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_0
						if rt_load_i32(memory_at_0, loc_0 + 48) ~= 1 then
							desired = 1
							break
						end
						if loc_2 == 1 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 36, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 54, 1)
			break
		end
		break
	end
end
FUNC_LIST[750] = --[[ __cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_4)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[751](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1), loc_4)
			if reg_0 ~= 0 then
				while true do
					while true do
						if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 16) then
							while true do
								if rt_load_i32(memory_at_0, loc_1 + 20) ~= loc_2 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_3 ~= 1 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 32, 1)
						desired = 0
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 44) == 4 then
							break
						end
						rt_store_i32_n16(memory_at_0, loc_1 + 52, 0)
						loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 20)](loc_0, loc_1, loc_2, loc_2, 1, loc_4)
						if rt_load_i32_u8(memory_at_0, loc_1 + 53) == 1 then
							while true do
								rt_store_i32(memory_at_0, loc_1 + 44, 3)
								if rt_load_i32_u8(memory_at_0, loc_1 + 52) == 0 then
									desired = 3
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_1 + 44, 4)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
					rt_store_i32(memory_at_0, loc_1 + 40, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 40), 1))
					if rt_load_i32(memory_at_0, loc_1 + 36) ~= 1 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_1 + 24) ~= 2 then
						desired = 1
						break
					end
					rt_store_i32_n8(memory_at_0, loc_1 + 54, 1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 24)](loc_0, loc_1, loc_2, loc_3, loc_4)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[751] = --[[ __cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const ]] function(loc_0, loc_1, loc_2)
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 4) ~= loc_1 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 28) == 1 then
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
			break
		end
		break
	end
end
FUNC_LIST[752] = --[[ __cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), 0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[753](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 28)](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[753] = --[[ __cxxabiv1::__class_type_info::process_found_base_class(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 36)
		if loc_3 == 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
				rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 36, 1)
				rt_store_i32(memory_at_0, loc_0 + 20, rt_load_i32(memory_at_0, loc_0 + 56))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 20) ~= rt_load_i32(memory_at_0, loc_0 + 56) then
					break
				end
				if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 16) then
					break
				end
				if rt_load_i32(memory_at_0, loc_0 + 24) ~= 2 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 54, 1)
			rt_store_i32(memory_at_0, loc_0 + 24, 2)
			rt_store_i32(memory_at_0, loc_0 + 36, rt_add_i32(loc_3, 1))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[754] = --[[ __cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), 0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[753](loc_1, loc_2, loc_3)
				break
			end
		end
		break
	end
end
FUNC_LIST[755] = --[[ __cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_4)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[751](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1), loc_4)
			if reg_0 == 0 then
				break
			end
			while true do
				if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 16) then
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 20) ~= loc_2 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 ~= 1 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 32, 1)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
			rt_store_i32(memory_at_0, loc_1 + 40, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 40), 1))
			while true do
				if rt_load_i32(memory_at_0, loc_1 + 36) ~= 1 then
					break
				end
				if rt_load_i32(memory_at_0, loc_1 + 24) ~= 2 then
					break
				end
				rt_store_i32_n8(memory_at_0, loc_1 + 54, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 44, 4)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[756] = --[[ __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[742](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_5)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[749](loc_1, loc_2, loc_3, loc_4)
				break
			end
		end
		break
	end
end
FUNC_LIST[757] = --[[ std::exception::~exception()_986 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[188](loc_0)
		FUNC_LIST[653](loc_0, 4)
		break
	end
end
FUNC_LIST[758] = --[[ std::exception::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 3175
		break
	end
	return reg_0
end
FUNC_LIST[759] = --[[ std::bad_alloc::bad_alloc() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[656](loc_0)
		loc_0 = reg_0
		rt_store_i32(memory_at_0, loc_0, 47772)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[760] = --[[ std::bad_alloc::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 6145
		break
	end
	return reg_0
end
FUNC_LIST[761] = --[[ std::bad_array_new_length::bad_array_new_length() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[759](loc_0)
		loc_0 = reg_0
		rt_store_i32(memory_at_0, loc_0, 47792)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[762] = --[[ std::bad_array_new_length::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 3599
		break
	end
	return reg_0
end
FUNC_LIST[763] = --[[ std::out_of_range::~out_of_range() ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 47892)
		reg_0 = FUNC_LIST[764](rt_add_i32(loc_0, 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[764] = --[[ std::__2::__libcpp_refstring::~__libcpp_refstring() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[765](rt_load_i32(memory_at_0, loc_0))
		loc_1 = reg_0
		reg_0 = FUNC_LIST[766](rt_add_i32(loc_1, 8))
		if rt_lt_i32(reg_0, 0) then
			while true do
				FUNC_LIST[652](loc_1)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[765] = --[[ std::__2::__refstring_imp::(anonymous namespace)::rep_from_data(char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_sub_i32(loc_0, 12)
		break
	end
	return reg_0
end
FUNC_LIST[766] = --[[ int std::__2::(anonymous namespace)::__libcpp_atomic_add[abi:nn180100]<int, int>(int*, int, int) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0), 1)
		rt_store_i32(memory_at_0, loc_0, loc_1)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[767] = --[[ std::logic_error::~logic_error() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[763](loc_0)
		FUNC_LIST[653](reg_0, 8)
		break
	end
end
FUNC_LIST[768] = --[[ std::logic_error::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
		break
	end
	return reg_0
end
FUNC_LIST[769] = --[[ std::length_error::~length_error() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[763](loc_0)
		FUNC_LIST[653](loc_0, 8)
		break
	end
end
FUNC_LIST[770] = --[[ _emscripten_timeout ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[4](loc_0, 0e0)
		FUNC_LIST[771]((if loc_0 == 2 then 27 else (if loc_0 == 1 then 26 else 14)))
		break
	end
end
FUNC_LIST[771] = --[[ raise ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[775](loc_0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[776](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_0, 2), 48176))
		if loc_1 ~= 0 then
			while true do
				TABLE_LIST[0].data[loc_1](loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[772] = --[[ action_abort ]] function(loc_0)
	while true do
		FUNC_LIST[655]()
		error("out of code bounds")
	end
end
FUNC_LIST[773] = --[[ action_terminate ]] function(loc_0)
	while true do
		FUNC_LIST[5]()
		FUNC_LIST[774](rt_add_i32(loc_0, 128))
		error("out of code bounds")
	end
end
FUNC_LIST[774] = --[[ _Exit ]] function(loc_0)
	while true do
		FUNC_LIST[6](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[775] = --[[ __sig_is_blocked ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[777](rt_load_i32(memory_at_0, 49624), loc_0)
		reg_0 = (if reg_0 ~= 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[776] = --[[ sigaddset ]] function(loc_0)
	while true do
		rt_store_i32(memory_at_0, 49752, bit_or(rt_load_i32(memory_at_0, 49752), rt_shl_i32(1, rt_sub_i32(loc_0, 1))))
		break
	end
end
FUNC_LIST[777] = --[[ sigismember ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = bit_and(rt_shr_u32(loc_0, rt_sub_i32(loc_1, 1)), 1)
		break
	end
	return reg_0
end
local function run_init_code()
	TABLE_LIST[0] = { min = 223, max = 223, data = {} }
	MEMORY_LIST[0] = rt_allocator_new(258, 258)
	GLOBAL_LIST[0] = { value = 115296 }
	do
		local target = TABLE_LIST[0].data
		local offset = 1
		local data = { FUNC_LIST[188],FUNC_LIST[11],FUNC_LIST[193],FUNC_LIST[194],FUNC_LIST[194],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[195],FUNC_LIST[194],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[12],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[14],FUNC_LIST[15],FUNC_LIST[16],FUNC_LIST[17],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[199],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[200],FUNC_LIST[199],FUNC_LIST[201],FUNC_LIST[201],FUNC_LIST[201],FUNC_LIST[22],FUNC_LIST[23],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[198],FUNC_LIST[30],FUNC_LIST[31],FUNC_LIST[32],FUNC_LIST[34],FUNC_LIST[49],FUNC_LIST[50],FUNC_LIST[51],FUNC_LIST[52],FUNC_LIST[53],FUNC_LIST[56],FUNC_LIST[124],FUNC_LIST[125],FUNC_LIST[126],FUNC_LIST[128],FUNC_LIST[129],FUNC_LIST[130],FUNC_LIST[131],FUNC_LIST[132],FUNC_LIST[133],FUNC_LIST[134],FUNC_LIST[135],FUNC_LIST[138],FUNC_LIST[139],FUNC_LIST[140],FUNC_LIST[141],FUNC_LIST[130],FUNC_LIST[142],FUNC_LIST[144],FUNC_LIST[145],FUNC_LIST[146],FUNC_LIST[153],FUNC_LIST[156],FUNC_LIST[157],FUNC_LIST[159],FUNC_LIST[160],FUNC_LIST[160],FUNC_LIST[161],FUNC_LIST[161],FUNC_LIST[162],FUNC_LIST[163],FUNC_LIST[164],FUNC_LIST[165],FUNC_LIST[166],FUNC_LIST[170],FUNC_LIST[188],FUNC_LIST[171],FUNC_LIST[172],FUNC_LIST[11],FUNC_LIST[196],FUNC_LIST[11],FUNC_LIST[202],FUNC_LIST[262],FUNC_LIST[263],FUNC_LIST[264],FUNC_LIST[265],FUNC_LIST[269],FUNC_LIST[270],FUNC_LIST[271],FUNC_LIST[272],FUNC_LIST[273],FUNC_LIST[199],FUNC_LIST[11],FUNC_LIST[199],FUNC_LIST[274],FUNC_LIST[763],FUNC_LIST[280],FUNC_LIST[388],FUNC_LIST[388],FUNC_LIST[388],FUNC_LIST[188],FUNC_LIST[282],FUNC_LIST[188],FUNC_LIST[388],FUNC_LIST[284],FUNC_LIST[286],FUNC_LIST[288],FUNC_LIST[290],FUNC_LIST[292],FUNC_LIST[294],FUNC_LIST[296],FUNC_LIST[298],FUNC_LIST[300],FUNC_LIST[302],FUNC_LIST[304],FUNC_LIST[307],FUNC_LIST[309],FUNC_LIST[311],FUNC_LIST[313],FUNC_LIST[315],FUNC_LIST[319],FUNC_LIST[318],FUNC_LIST[321],FUNC_LIST[188],FUNC_LIST[323],FUNC_LIST[325],FUNC_LIST[327],FUNC_LIST[329],FUNC_LIST[331],FUNC_LIST[333],FUNC_LIST[335],FUNC_LIST[337],FUNC_LIST[339],FUNC_LIST[341],FUNC_LIST[343],FUNC_LIST[345],FUNC_LIST[347],FUNC_LIST[349],FUNC_LIST[351],FUNC_LIST[353],FUNC_LIST[355],FUNC_LIST[357],FUNC_LIST[359],FUNC_LIST[361],FUNC_LIST[363],FUNC_LIST[188],FUNC_LIST[365],FUNC_LIST[368],FUNC_LIST[370],FUNC_LIST[372],FUNC_LIST[374],FUNC_LIST[376],FUNC_LIST[378],FUNC_LIST[380],FUNC_LIST[382],FUNC_LIST[384],FUNC_LIST[386],FUNC_LIST[648],FUNC_LIST[428],FUNC_LIST[511],FUNC_LIST[172],FUNC_LIST[630],FUNC_LIST[648],FUNC_LIST[757],FUNC_LIST[760],FUNC_LIST[757],FUNC_LIST[762],FUNC_LIST[767],FUNC_LIST[768],FUNC_LIST[769],FUNC_LIST[769],FUNC_LIST[188],FUNC_LIST[740],FUNC_LIST[546],FUNC_LIST[546],FUNC_LIST[741],FUNC_LIST[756],FUNC_LIST[755],FUNC_LIST[754],FUNC_LIST[11],FUNC_LIST[748],FUNC_LIST[750],FUNC_LIST[752],FUNC_LIST[757],FUNC_LIST[758],FUNC_LIST[773],FUNC_LIST[772], }
		table.move(data, 1, #data, offset, target)
	end
	rt_store_string(MEMORY_LIST[0], 1024,"}%.*s{\x00`%.*s{\x00countrz\x00countlz\x00infinity\x00any\x00max\x00-+   0X0x\x00-0X+0X 0X-0x+0x 0x\x00Unicode character U+%x\x00pow\x00inlining failed: module uses getfenv/setfenv\x00getfenv\x00Luau\x00Unexpected \'...\' after type name; type pack is not allowed in this context\x00attributes are not allowed in declaration context\x00next\x00LuauCompileLoopUnrollThresholdMaxBoost\x00LuauCompileInlineThresholdMaxBoost\x00btest\x00sqrt\x00export\x00assert\x00insert\x00function parameter list start\x00bnot\x00loop unroll failed: invalid iteration count\x00assignment\x00unfinished comment\x00if statement\x00Expected \',\' after table constructor element\x00LuauParseErrorLimit\x00LuauRecursionLimit\x00LuauTypeLengthLimit\x00Local %s used in the repeat..until condition is undefined because continue statement on line %d jumps over it\x00arshift\x00lshift\x00rawset\x00inlining failed: can\'t convert fixed returns to multret\x00rawget\x00select\x00extract\x00format\x00repeat\x00Ambiguous syntax: this looks like an argument list for a function call, but could also be a start of new statement; use \';\' to separate statements\x00expression only compiled for side effects\x00class\x00ipairs\x00function parameters\x00acos\x00Exceeded userdata type limit in the compilation options\x00inlining failed: can\'t inline recursive calls\x00Generic types come before generic type packs\x00allocation: closure with %d upvalues\x00Interpolated string literals cannot be used as types\x00inlining failed: too many inlined frames\x00extends\x00abs\x00type alias\x00Expected %s (to close %s at column %d), got %s%s\x00Expected %s (to close %s at line %d), got %s%s\x00builtin %s.%s/%d%s\x00builtin %s/%d%s\x00Expected %s when parsing %s, got %s\x00Expected identifier when parsing %s, got %s\x00Expected %s, got %s\x00Expected identifier, got %s\x00Expected \'(\', \'{\' or <string> when parsing function call, got %s\x00Malformed interpolated string, got %s\x00Expected type, got %s\x00:%d: %s\x00LuauAttributeSyntaxFunExpr\x00bxor\x00vector\x00floor\x00for\x00bor\x00Cannot have more than one class indexer\x00Cannot have more than one table indexer\x00\'self\' must be present as the unannotated first parameter\x00identifier\x00buffer\x00tonumber\x00Malformed number\x00char\x00frexp\x00ldexp\x00for loop\x00while loop\x00break statement must be inside a loop\x00continue statement must be inside a loop\x00clamp\x00byteswap\x00do\x00unknown\x00return\x00std::exception\x00Cannot use \'...\' outside of a vararg function\x00generic type pack annotation\x00property type annotation\x00Unexpected \'...\' after type annotation\x00global function declaration\x00global variable declaration\x00if then else expression\x00asin\x00min\x00sign\x00rawlen\x00then\x00atan\x00nan\x00boolean\x00Incomplete statement: expected assignment or a function call\x00until\x00nil\x00ceil\x00rawequal\x00table literal\x00local\x00block\x00unpack\x00break\x00LuauCompileInlineDepth\x00bad_array_new_length\x00math\x00cosh\x00sinh\x00tanh\x00log\x00Attribute name is missing\x00LuauAllowFragmentParsing\x00tostring\x00basic_string\x00the beginning of an interpolated string\x00the middle of an interpolated string\x00the end of an interpolated string\x00malformed string\x00LuauFixIndexerSubtypingOrdering\x00LuauInstantiateInSubtyping\x00deg\x00typeof\x00inf\x00self\x00elseif\x00modf\x00%.0f\x00@native\x00true\x00continue\x00byte\x00attribute\x00LuauNativeAttribute\x00write\x00rrotate\x00lrotate\x00else\x00false\x00LuauTypeSolverRelease\x00inlining failed: high register pressure\x00declare\x00Expected type pack after \'=\', got type\x00function type\x00typeof type\x00table type\x00property name\x00superclass name\x00global function name\x00type function name\x00Expected default type pack after type pack name\x00Expected default type after type name\x00global variable name\x00method name\x00field name\x00generic name\x00Exceeded function instruction limit; split the function into parts to compile\x00Exceeded constant limit; simplify the code to compile\x00Exceeded closure limit; simplify the code to compile\x00Exceeded jump distance limit; simplify the code to compile\x00Exceeded allowed recursion depth; simplify your %s to make the code compile\x00Exceeded allowed type length; simplify your type annotation to make the code compile\x00while\x00setmetatable\x00getmetatable\x00loop unroll failed: mutable loop variable\x00huge\x00index range\x00Interpolated string literal contains malformed escape sequence\x00String literal contains malformed escape sequence\x00invalid UTF-8 sequence\x00replace\x00fmod\x00round\x00end\x00band\x00LuauCompileLoopUnrollThreshold\x00LuauCompileInlineThreshold\x00table field\x00Assigned expression must be a variable or a field\x00Type function cannot be exported\x00All declaration parameters must be annotated\x00All declaration parameters aside from \'self\' must be annotated\x00@checked\x00rad\x00Expected \'function\', \'local function\', \'declare function\' or a function type declaration after attribute, but got %s instead\x00Expected a function type declaration after attribute, but got %s instead\x00Expected \'function\' declaration after attribute, but got %s instead\x00Expected \'function\' after local declaration with attribute, but got %s instead\x00Expected type after \',\' but got \'>\' instead\x00Expected expression after \',\' but got \')\' instead\x00Expected type after \',\' but got \')\' instead\x00thread\x00allocation: table array %d\x00allocation: table hash %d array %d\x00Out of registers when trying to allocate %d registers: exceeded limit %d\x00Out of local registers when trying to allocate %s: exceeded limit %d\x00Out of upvalue registers when trying to allocate %s: exceeded limit %d\x00allocation: table hash %d\x00allocation: table template %d\x00std::bad_alloc\x00inlining failed: function is variadic\x00sub\x00}%.*s`\x00`%.*s`\x00NAN\x00_G\x00INF\x00Malformed string; did you forget to finish it?\x00Expected a statement, got \',\'; did you forget to wrap the list of return types in parentheses?\x00; did you mean to use \'{\' when defining a table?\x00; did you forget to close %s at line %d?\x00Malformed interpolated string; did you forget to add a \'}\'?\x00Double braces are not permitted within interpolated strings; did you mean \'\\{\'?\x00Unexpected \'!\'; did you mean \'not\'?\x00Unexpected \'||\'; did you mean \'or\'?\x00Expected \'->\' after \'()\' when parsing function type; did you mean \'nil\'?\x00Unexpected \'&&\'; did you mean \'and\'?\x00Malformed interpolated string; did you forget to add a \'`\'?\x00Unexpected \'!=\'; did you mean \'~=\'?\x00<unknown>\x00<eof>\x000123456789\x00writeu8\x00readu8\x00writei8\x00readi8\x00writeu16\x00readu16\x00writei16\x00readi16\x00writef64\x00readf64\x00StudioReportLuauAny2\x00LuauUserDefinedTypeFunctionsSyntax2\x00atan2\x00LuauSolverV2\x00writeu32\x00readu32\x00bit32\x00writei32\x00readi32\x00writef32\x00readf32\x00String literal contains malformed escape sequence or \\0\x00log10\x00Mixing union and intersection types is not allowed; consider wrapping in parentheses.\x00Composite type was not an intersection or union.\x00+\x00%*\x00inlining failed: too expensive (cost %d, profit %.2fx)\x00loop unroll failed: too expensive (iterations %d, cost %d, profit %.2fx)\x00loop unroll succeeded (iterations %d, cost %d, profit %.2fx)\x00(null)\x00Reached error limit (%d)\x00loop unroll failed: too many iterations (%d)\x00inlining succeeded (cost %d, profit %.2fx, depth %d)\x00\'{{\', which is invalid (did you mean \'\\{\'?)\x00Unicode character U+%x (did you mean \'%s\'?)\x00Malformed interpolated string, expected expression inside \'{}\'\x00Using \'function\' as a type annotation is not supported, consider replacing with a function type annotation e.g. \'(...any) -> ...any\'\x00declare must be followed by an identifier, \'function\', or \'class\'\x00\'%.*s\'\x00Type function cannot reference outer local \'%s\'\x00Cannot duplicate attribute \'%s\'\x00Invalid attribute \'%s\'\x00\'%c\'\x00Function return type annotations are written after \':\' instead of \'->\'\x00\'//=\'\x00\'..=\'\x00Return types in function type annotations are written after \'->\' instead of \':\'\x00\'...\'\x00Expected function call arguments after \'(\'\x00%error-id%\x00\"%.*s\"\x00optimize \x00\x00\x00\x00\x00\xac!\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau7Compile12ValueVisitorE\x00\x00\x00\xec\xbb\x00\x00\x8c!\x00\x00\xf4,\x00\x00\x00\x00\x00\x00\xcc\"\x00\x00\x01\x00\x00\x00<\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00=\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00>\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau7Compile14BuiltinVisitorE\x00\xec\xbb\x00\x00\xac\"\x00\x00\xf4,\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\x02\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01")
	rt_store_string(MEMORY_LIST[0], 9552,"\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01")
	rt_store_string(MEMORY_LIST[0], 9624,"\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01")
	rt_store_string(MEMORY_LIST[0], 9684,"\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01")
	rt_store_string(MEMORY_LIST[0], 9716,"\x01")
	rt_store_string(MEMORY_LIST[0], 9728,"\x01\x00\x00\x00\x01\x00\x00\x00\x01")
	rt_store_string(MEMORY_LIST[0], 9764,"\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01")
	rt_store_string(MEMORY_LIST[0], 9800,"\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x98\'\x00\x00C\x00\x00\x00D\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00E\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00F\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau7Compile15ConstantVisitorE\x00\x00\x00\x00\xec\xbb\x00\x00t\'\x00\x00\xf4,\x00\x00\x00\x00\x00\x00\xb8(\x00\x00G\x00\x00\x00H\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00I\x00\x00\x00J\x00\x00\x00$\x00\x00\x00K\x00\x00\x00@\x00\x00\x00L\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau7Compile12ShapeVisitorE\x00\x00\x00\xec\xbb\x00\x00\x98(\x00\x00\xf4,")
	rt_store_string(MEMORY_LIST[0], 10464,"\x01")
	rt_store_string(MEMORY_LIST[0], 10488,"\x02")
	rt_store_string(MEMORY_LIST[0], 10512,"\x04")
	rt_store_string(MEMORY_LIST[0], 10536,"\x05")
	rt_store_string(MEMORY_LIST[0], 10560,"\x07")
	rt_store_string(MEMORY_LIST[0], 10588,"d*\x00\x00M\x00\x00\x00N\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00O\x00\x00\x00\x07\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00\x12\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00]\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00^\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00_\x00\x00\x00#\x00\x00\x00`\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau14TypeMapVisitorE\x00\xec\xbb\x00\x00L*\x00\x00\xf4,\x00\x00\x00\x00\x00\x00\x84+\x00\x00a\x00\x00\x00b\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00c\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00 \x00\x00\x00!\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau7Compile11CostVisitorE\x00\x00\x00\x00\xec\xbb\x00\x00d+\x00\x00\xf4,\x00\x00\x00\x00\x00\x00\xbc+\x00\x00n\x00\x00\x00p\x00\x00\x00q\x00\x00\x00N4Luau12CompileErrorE\x00\x00\x00\xec\xbb\x00\x00\xa4+\x00\x00\x0c\xbc\x00\x00\x00\x00\x00\x00\xfc,\x00\x00\x01\x00\x00\x00r\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00s\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00>\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau8Compiler15FunctionVisitorE\x00N4Luau10AstVisitorE\x00\x00\x00\xac\xbb\x00\x00\xde,\x00\x00\xec\xbb\x00\x00\xbc,\x00\x00\xf4,\x00\x00\x00\x00\x00\x00\x1c.\x00\x00\x01\x00\x00\x00t\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00u\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00>\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau8Compiler11FenvVisitorE\x00\x00\x00\xec\xbb\x00\x00\xfc-\x00\x00\xf4,\x00\x00\x00\x00\x00\x00D/\x00\x00v\x00\x00\x00w\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00x\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00y\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00>\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau8Compiler21UndefinedLocalVisitorE\x00\xec\xbb\x00\x00\x1c/\x00\x00\xf4,\x00\x00\x00\x00\x00\x00\xdc0\x00\x00\x01\x00\x00\x00z\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00{\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00>\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00ZN4Luau8Compiler22resolveAssignConflictsEPNS_7AstStatERNSt3__26vectorINS0_10AssignmentENS3_9allocatorIS5_EEEERKNS_8AstArrayIPNS_7AstExprEEEE7Visitor\x00\x00\x00\x00\xec\xbb\x00\x00D0\x00\x00\xf4,\x00\x00\x00\x00\x00\x00\x042\x00\x00|\x00\x00\x00}\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00~\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x7f\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00>\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau8Compiler19ConstUpvalueVisitorE\x00\x00\x00\xec\xbb\x00\x00\xdc1\x00\x00\xf4,\x00\x00\x00\x00\x00\x00$3\x00\x00\x01\x00\x00\x00\x80\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x81\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00\x82\x00\x00\x00!\x00\x00\x00>\x00\x00\x00#\x00\x00\x00$\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00N4Luau8Compiler13ReturnVisitorE\x00\xec\xbb\x00\x00\x043\x00\x00\xf4,\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00R\x00\x00\x00+\x00\x00\x00,\x00\x00\x00!\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00Q\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00\\9\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x00\x00\x00\x00\x9c9\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xc49\x00\x00\x8c\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xf09\x00\x00\x8d\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x1c:\x00\x00\x8e\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00H:\x00\x00\x8f\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00l:\x00\x00\x90\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x90:\x00\x00\x91\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xb4:\x00\x00\x92\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xd8:\x00\x00\x93\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x00;\x00\x00\x94\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00(;\x00\x00\x95\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00P;\x00\x00\x96\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00t;\x00\x00\x97\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x98;\x00\x00\x98\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xbc;\x00\x00\x99\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xe8;\x00\x00\x9a\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x0c<\x00\x00\x9b\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x000<\x00\x00\x9c\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\\<\x00\x00\x9d\x00\x00\x00\x8a\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x9c<\x00\x00\x9e\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xbc<\x00\x00\xa0\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xe0<\x00\x00\xa1\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x04=\x00\x00\xa2\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00(=\x00\x00\xa3\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00P=\x00\x00\xa4\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00t=\x00\x00\xa5\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x98=\x00\x00\xa6\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xbc=\x00\x00\xa7\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xdc=\x00\x00\xa8\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x00\xa9\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00$>\x00\x00\xaa\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00P>\x00\x00\xab\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00x>\x00\x00\xac\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xa4>\x00\x00\xad\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xcc>\x00\x00\xae\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xf8>\x00\x00\xaf\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00$?\x00\x00\xb0\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00P?\x00\x00\xb1\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00|?\x00\x00\xb2\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xa0?\x00\x00\xb3\x00\x00\x00\x85\x00\x00\x00\x9f\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xe4?\x00\x00\xb4\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x08@\x00\x00\xb6\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x000@\x00\x00\xb7\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00T@\x00\x00\xb8\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00x@\x00\x00\xb9\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xa4@\x00\x00\xba\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xd0@\x00\x00\xbb\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xfc@\x00\x00\xbc\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00 A\x00\x00\xbd\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\xb5\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00lA\x00\x00\xbe\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x98A\x00\x00\xbf\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00\x00\x00\x00\x00\xc0A\x00\x00\xc0\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b\x00\x00\x00N4Luau7AstAttrE\x00N4Luau7AstNodeE\x00\xac\xbb\x00\x00D9\x00\x00\xec\xbb\x00\x0049\x00\x00T9\x00\x00N4Luau12AstExprGroupE\x00N4Luau7AstExprE\x00\x00\x00\xec\xbb\x00\x00~9\x00\x00T9\x00\x00\xec\xbb\x00\x00h9\x00\x00\x909\x00\x00N4Luau18AstExprConstantNilE\x00\xec\xbb\x00\x00\xa89\x00\x00\x909\x00\x00N4Luau19AstExprConstantBoolE\x00\x00\x00\x00\xec\xbb\x00\x00\xd09\x00\x00\x909\x00\x00N4Luau21AstExprConstantNumberE\x00\x00\xec\xbb\x00\x00\xfc9\x00\x00\x909\x00\x00N4Luau21AstExprConstantStringE\x00\x00\xec\xbb\x00\x00(:\x00\x00\x909\x00\x00N4Luau12AstExprLocalE\x00\x00\x00\xec\xbb\x00\x00T:\x00\x00\x909\x00\x00N4Luau13AstExprGlobalE\x00\x00\xec\xbb\x00\x00x:\x00\x00\x909\x00\x00N4Luau14AstExprVarargsE\x00\xec\xbb\x00\x00\x9c:\x00\x00\x909\x00\x00N4Luau11AstExprCallE\x00\x00\x00\x00\xec\xbb\x00\x00\xc0:\x00\x00\x909\x00\x00N4Luau16AstExprIndexNameE\x00\x00\x00\xec\xbb\x00\x00\xe4:\x00\x00\x909\x00\x00N4Luau16AstExprIndexExprE\x00\x00\x00\xec\xbb\x00\x00\x0c;\x00\x00\x909\x00\x00N4Luau15AstExprFunctionE\x00\x00\x00\x00\xec\xbb\x00\x004;\x00\x00\x909\x00\x00N4Luau12AstExprTableE\x00\x00\x00\xec\xbb\x00\x00\\;\x00\x00\x909\x00\x00N4Luau12AstExprUnaryE\x00\x00\x00\xec\xbb\x00\x00\x80;\x00\x00\x909\x00\x00N4Luau13AstExprBinaryE\x00\x00\xec\xbb\x00\x00\xa4;\x00\x00\x909\x00\x00N4Luau20AstExprTypeAssertionE\x00\x00\x00\xec\xbb\x00\x00\xc8;\x00\x00\x909\x00\x00N4Luau13AstExprIfElseE\x00\x00\xec\xbb\x00\x00\xf4;\x00\x00\x909\x00\x00N4Luau12AstExprErrorE\x00\x00\x00\xec\xbb\x00\x00\x18<\x00\x00\x909\x00\x00N4Luau19AstExprInterpStringE\x00\x00\x00\x00\xec\xbb\x00\x00<<\x00\x00\x909\x00\x00N4Luau12AstStatBlockE\x00N4Luau7AstStatE\x00\x00\x00\xec\xbb\x00\x00~<\x00\x00T9\x00\x00\xec\xbb\x00\x00h<\x00\x00\x90<\x00\x00N4Luau9AstStatIfE\x00\x00\x00\xec\xbb\x00\x00\xa8<\x00\x00\x90<\x00\x00N4Luau12AstStatWhileE\x00\x00\x00\xec\xbb\x00\x00\xc8<\x00\x00\x90<\x00\x00N4Luau13AstStatRepeatE\x00\x00\xec\xbb\x00\x00\xec<\x00\x00\x90<\x00\x00N4Luau12AstStatBreakE\x00\x00\x00\xec\xbb\x00\x00\x10=\x00\x00\x90<\x00\x00N4Luau15AstStatContinueE\x00\x00\x00\x00\xec\xbb\x00\x004=\x00\x00\x90<\x00\x00N4Luau13AstStatReturnE\x00\x00\xec\xbb\x00\x00\\=\x00\x00\x90<\x00\x00N4Luau11AstStatExprE\x00\x00\x00\x00\xec\xbb\x00\x00\x80=\x00\x00\x90<\x00\x00N4Luau12AstStatLocalE\x00\x00\x00\xec\xbb\x00\x00\xa4=\x00\x00\x90<\x00\x00N4Luau10AstStatForE\x00\xec\xbb\x00\x00\xc8=\x00\x00\x90<\x00\x00N4Luau12AstStatForInE\x00\x00\x00\xec\xbb\x00\x00\xe8=\x00\x00\x90<\x00\x00N4Luau13AstStatAssignE\x00\x00\xec\xbb\x00\x00\x0c>\x00\x00\x90<\x00\x00N4Luau21AstStatCompoundAssignE\x00\x00\xec\xbb\x00\x000>\x00\x00\x90<\x00\x00N4Luau15AstStatFunctionE\x00\x00\x00\x00\xec\xbb\x00\x00\\>\x00\x00\x90<\x00\x00N4Luau20AstStatLocalFunctionE\x00\x00\x00\xec\xbb\x00\x00\x84>\x00\x00\x90<\x00\x00N4Luau16AstStatTypeAliasE\x00\x00\x00\xec\xbb\x00\x00\xb0>\x00\x00\x90<\x00\x00N4Luau19AstStatTypeFunctionE\x00\x00\x00\x00\xec\xbb\x00\x00\xd8>\x00\x00\x90<\x00\x00N4Luau20AstStatDeclareGlobalE\x00\x00\x00\xec\xbb\x00\x00\x04?\x00\x00\x90<\x00\x00N4Luau22AstStatDeclareFunctionE\x00\xec\xbb\x00\x000?\x00\x00\x90<\x00\x00N4Luau19AstStatDeclareClassE\x00\x00\x00\x00\xec\xbb\x00\x00\\?\x00\x00\x90<\x00\x00N4Luau12AstStatErrorE\x00\x00\x00\xec\xbb\x00\x00\x88?\x00\x00\x90<\x00\x00N4Luau16AstTypeReferenceE\x00N4Luau7AstTypeE\x00\x00\x00\xec\xbb\x00\x00\xc6?\x00\x00T9\x00\x00\xec\xbb\x00\x00\xac?\x00\x00\xd8?\x00\x00N4Luau12AstTypeTableE\x00\x00\x00\xec\xbb\x00\x00\xf0?\x00\x00\xd8?\x00\x00N4Luau15AstTypeFunctionE\x00\x00\x00\x00\xec\xbb\x00\x00\x14@\x00\x00\xd8?\x00\x00N4Luau13AstTypeTypeofE\x00\x00\xec\xbb\x00\x00<@\x00\x00\xd8?\x00\x00N4Luau12AstTypeUnionE\x00\x00\x00\xec\xbb\x00\x00`@\x00\x00\xd8?\x00\x00N4Luau19AstTypeIntersectionE\x00\x00\x00\x00\xec\xbb\x00\x00\x84@\x00\x00\xd8?\x00\x00N4Luau20AstTypeSingletonBoolE\x00\x00\x00\xec\xbb\x00\x00\xb0@\x00\x00\xd8?\x00\x00N4Luau22AstTypeSingletonStringE\x00\xec\xbb\x00\x00\xdc@\x00\x00\xd8?\x00\x00N4Luau12AstTypeErrorE\x00\x00\x00\xec\xbb\x00\x00\x08A\x00\x00\xd8?\x00\x00N4Luau19AstTypePackExplicitE\x00N4Luau11AstTypePackE\x00\x00\x00\xec\xbb\x00\x00IA\x00\x00T9\x00\x00\xec\xbb\x00\x00,A\x00\x00`A\x00\x00N4Luau19AstTypePackVariadicE\x00\x00\x00\x00\xec\xbb\x00\x00xA\x00\x00`A\x00\x00N4Luau18AstTypePackGenericE\x00\xec\xbb\x00\x00\xa4A\x00\x00`A\x00\x00\x00\x00\x00\x00T9\x00\x00\xc1\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x8b")
	rt_store_string(MEMORY_LIST[0], 16880,"\"\x00\x00\"\x00\x00\x00\x000\x00\x00O\x00\x00\x00\x001\x00\x00l\x00\x00\x00\x00I\x00\x00l\x00\x00\x00\x00`\x00\x00\'\x00\x00\x00\x00m\x00\x00rn\x00\x00\x00|\x00\x00l\x00\x00\x00\x00\xa0\x00\x00 \x00\x00\x00\x00\xb4\x00\x00\'\x00\x00\x00\x00\xb8\x00\x00,\x00\x00\x00\x00\xc6\x00\x00AE\x00\x00\x00\xd7\x00\x00x\x00\x00\x00\x00\xe6\x00\x00ae\x00\x00\x001\x01\x00i\x00\x00\x00\x002\x01\x00lJ\x00\x00\x003\x01\x00ij\x00\x00\x00I\x01\x00\'n\x00\x00\x00R\x01\x00OE\x00\x00\x00S\x01\x00oe\x00\x00\x00\x7f\x01\x00f\x00\x00\x00\x00\x81\x01\x00\'B\x00\x00\x00\x84\x01\x00b\x00\x00\x00\x00\x87\x01\x00C\'\x00\x00\x00\x8a\x01\x00\'D\x00\x00\x00\x8d\x01\x00g\x00\x00\x00\x00\x93\x01\x00G\'\x00\x00\x00\x96\x01\x00l\x00\x00\x00\x00\x98\x01\x00K\'\x00\x00\x00\xa0\x01\x00O\'\x00\x00\x00\xa1\x01\x00o\'\x00\x00\x00\xa4\x01\x00\'P\x00\x00\x00\xa6\x01\x00R\x00\x00\x00\x00\xa7\x01\x002\x00\x00\x00\x00\xac\x01\x00\'T\x00\x00\x00\xb3\x01\x00\'Y\x00\x00\x00\xb7\x01\x003\x00\x00\x00\x00\xbc\x01\x005\x00\x00\x00\x00\xbd\x01\x00s\x00\x00\x00\x00\xc0\x01\x00l\x00\x00\x00\x00\xc1\x01\x00ll\x00\x00\x00\xc3\x01\x00!\x00\x00\x00\x00\xc7\x01\x00LJ\x00\x00\x00\xc8\x01\x00Lj\x00\x00\x00\xc9\x01\x00lj\x00\x00\x00\xca\x01\x00NJ\x00\x00\x00\xcb\x01\x00Nj\x00\x00\x00\xcc\x01\x00nj\x00\x00\x00\xf1\x01\x00DZ\x00\x00\x00\xf2\x01\x00Dz\x00\x00\x00\xf3\x01\x00dz\x00\x00\x00\x1c\x02\x003\x00\x00\x00\x00\"\x02\x008\x00\x00\x00\x00#\x02\x008\x00\x00\x00\x00A\x02\x00?\x00\x00\x00\x00Q\x02\x00a\x00\x00\x00\x00a\x02\x00g\x00\x00\x00\x00c\x02\x00y\x00\x00\x00\x00i\x02\x00i\x00\x00\x00\x00j\x02\x00i\x00\x00\x00\x00o\x02\x00w\x00\x00\x00\x00\x8b\x02\x00u\x00\x00\x00\x00\x8f\x02\x00y\x00\x00\x00\x00\x94\x02\x00?\x00\x00\x00\x00\xa3\x02\x00dz\x00\x00\x00\xa6\x02\x00ts\x00\x00\x00\xaa\x02\x00ls\x00\x00\x00\xab\x02\x00lz\x00\x00\x00\xb9\x02\x00\'\x00\x00\x00\x00\xba\x02\x00\"\x00\x00\x00\x00\xbb\x02\x00\'\x00\x00\x00\x00\xbc\x02\x00\'\x00\x00\x00\x00\xbd\x02\x00\'\x00\x00\x00\x00\xbe\x02\x00\'\x00\x00\x00\x00\xc2\x02\x00<\x00\x00\x00\x00\xc3\x02\x00>\x00\x00\x00\x00\xc4\x02\x00^\x00\x00\x00\x00\xc6\x02\x00^\x00\x00\x00\x00\xc8\x02\x00\'\x00\x00\x00\x00\xca\x02\x00\'\x00\x00\x00\x00\xcb\x02\x00\'\x00\x00\x00\x00\xd0\x02\x00:\x00\x00\x00\x00\xd7\x02\x00-\x00\x00\x00\x00\xdb\x02\x00i\x00\x00\x00\x00\xdc\x02\x00~\x00\x00\x00\x00\xdd\x02\x00\"\x00\x00\x00\x00\xee\x02\x00\"\x00\x00\x00\x00\xf4\x02\x00\'\x00\x00\x00\x00\xf6\x02\x00\"\x00\x00\x00\x00\xf8\x02\x00:\x00\x00\x00\x00t\x03\x00\'\x00\x00\x00\x00z\x03\x00i\x00\x00\x00\x00~\x03\x00;\x00\x00\x00\x00\x7f\x03\x00J\x00\x00\x00\x00\x84\x03\x00\'\x00\x00\x00\x00\x91\x03\x00A\x00\x00\x00\x00\x92\x03\x00B\x00\x00\x00\x00\x95\x03\x00E\x00\x00\x00\x00\x96\x03\x00Z\x00\x00\x00\x00\x97\x03\x00H\x00\x00\x00\x00\x99\x03\x00l\x00\x00\x00\x00\x9a\x03\x00K\x00\x00\x00\x00\x9c\x03\x00M\x00\x00\x00\x00\x9d\x03\x00N\x00\x00\x00\x00\x9f\x03\x00O\x00\x00\x00\x00\xa1\x03\x00P\x00\x00\x00\x00\xa4\x03\x00T\x00\x00\x00\x00\xa5\x03\x00Y\x00\x00\x00\x00\xa7\x03\x00X\x00\x00\x00\x00\xb1\x03\x00a\x00\x00\x00\x00\xb3\x03\x00y\x00\x00\x00\x00\xb9\x03\x00i\x00\x00\x00\x00\xbd\x03\x00v\x00\x00\x00\x00\xbf\x03\x00o\x00\x00\x00\x00\xc1\x03\x00p\x00\x00\x00\x00\xc3\x03\x00o\x00\x00\x00\x00\xc5\x03\x00u\x00\x00\x00\x00\xd2\x03\x00Y\x00\x00\x00\x00\xdc\x03\x00F\x00\x00\x00\x00\xe8\x03\x002\x00\x00\x00\x00\xf1\x03\x00p\x00\x00\x00\x00\xf2\x03\x00c\x00\x00\x00\x00\xf3\x03\x00j\x00\x00\x00\x00\xf9\x03\x00C\x00\x00\x00\x00\xfa\x03\x00M\x00\x00\x00\x00\x05\x04\x00S\x00\x00\x00\x00\x06\x04\x00l\x00\x00\x00\x00\x08\x04\x00J\x00\x00\x00\x00\x10\x04\x00A\x00\x00\x00\x00\x12\x04\x00B\x00\x00\x00\x00\x15\x04\x00E\x00\x00\x00\x00\x17\x04\x003\x00\x00\x00\x00\x1a\x04\x00K\x00\x00\x00\x00\x1c\x04\x00M\x00\x00\x00\x00\x1d\x04\x00H\x00\x00\x00\x00\x1e\x04\x00O\x00\x00\x00\x00 \x04\x00P\x00\x00\x00\x00!\x04\x00C\x00\x00\x00\x00\"\x04\x00T\x00\x00\x00\x00#\x04\x00Y\x00\x00\x00\x00%\x04\x00X\x00\x00\x00\x00+\x04\x00bl\x00\x00\x00,\x04\x00b\x00\x00\x00\x00.\x04\x00lO\x00\x00\x000\x04\x00a\x00\x00\x00\x001\x04\x006\x00\x00\x00\x003\x04\x00r\x00\x00\x00\x005\x04\x00e\x00\x00\x00\x00>\x04\x00o\x00\x00\x00\x00@\x04\x00p\x00\x00\x00\x00A\x04\x00c\x00\x00\x00\x00C\x04\x00y\x00\x00\x00\x00E\x04\x00x\x00\x00\x00\x00U\x04\x00s\x00\x00\x00\x00V\x04\x00i\x00\x00\x00\x00X\x04\x00j\x00\x00\x00\x00a\x04\x00w\x00\x00\x00\x00t\x04\x00V\x00\x00\x00\x00u\x04\x00v\x00\x00\x00\x00\x91\x04\x00r\'\x00\x00\x00\xae\x04\x00Y\x00\x00\x00\x00\xaf\x04\x00y\x00\x00\x00\x00\xbb\x04\x00h\x00\x00\x00\x00\xbd\x04\x00e\x00\x00\x00\x00\xc0\x04\x00l\x00\x00\x00\x00\xcf\x04\x00i\x00\x00\x00\x00\xd4\x04\x00AE\x00\x00\x00\xd5\x04\x00ae\x00\x00\x00\xe0\x04\x003\x00\x00\x00\x00\x01\x05\x00d\x00\x00\x00\x00\x0c\x05\x00G\x00\x00\x00\x00\x1b\x05\x00q\x00\x00\x00\x00\x1c\x05\x00W\x00\x00\x00\x00\x1d\x05\x00w\x00\x00\x00\x00M\x05\x00U\x00\x00\x00\x00O\x05\x00S\x00\x00\x00\x00U\x05\x00O\x00\x00\x00\x00Z\x05\x00\'\x00\x00\x00\x00]\x05\x00\'\x00\x00\x00\x00a\x05\x00w\x00\x00\x00\x00c\x05\x00q\x00\x00\x00\x00f\x05\x00q\x00\x00\x00\x00p\x05\x00h\x00\x00\x00\x00x\x05\x00n\x00\x00\x00\x00|\x05\x00n\x00\x00\x00\x00}\x05\x00u\x00\x00\x00\x00\x81\x05\x00g\x00\x00\x00\x00\x84\x05\x00f\x00\x00\x00\x00\x85\x05\x00o\x00\x00\x00\x00\x89\x05\x00:\x00\x00\x00\x00\xc0\x05\x00l\x00\x00\x00\x00\xc3\x05\x00:\x00\x00\x00\x00\xd5\x05\x00l\x00\x00\x00\x00\xd8\x05\x00v\x00\x00\x00\x00\xd9\x05\x00\'\x00\x00\x00\x00\xdf\x05\x00l\x00\x00\x00\x00\xe1\x05\x00o\x00\x00\x00\x00\xf0\x05\x00ll\x00\x00\x00\xf1\x05\x00l\'\x00\x00\x00\xf2\x05\x00\"\x00\x00\x00\x00\xf3\x05\x00\'\x00\x00\x00\x00\xf4\x05\x00\"\x00\x00\x00\x00\r\x06\x00,\x00\x00\x00\x00\'\x06\x00l\x00\x00\x00\x00G\x06\x00o\x00\x00\x00\x00`\x06\x00.\x00\x00\x00\x00a\x06\x00l\x00\x00\x00\x00e\x06\x00o\x00\x00\x00\x00g\x06\x00V\x00\x00\x00\x00k\x06\x00,\x00\x00\x00\x00m\x06\x00*\x00\x00\x00\x00\xbe\x06\x00o\x00\x00\x00\x00\xc1\x06\x00o\x00\x00\x00\x00\xd4\x06\x00-\x00\x00\x00\x00\xd5\x06\x00o\x00\x00\x00\x00\xf0\x06\x00.\x00\x00\x00\x00\xf1\x06\x00l\x00\x00\x00\x00\xf5\x06\x00o\x00\x00\x00\x00\xf7\x06\x00V\x00\x00\x00\x00\x01\x07\x00.\x00\x00\x00\x00\x02\x07\x00.\x00\x00\x00\x00\x03\x07\x00:\x00\x00\x00\x00\x04\x07\x00:\x00\x00\x00\x00\xc0\x07\x00O\x00\x00\x00\x00\xca\x07\x00l\x00\x00\x00\x00\xf4\x07\x00\'\x00\x00\x00\x00\xf5\x07\x00\'\x00\x00\x00\x00\xfa\x07\x00_\x00\x00\x00\x00\x03\t\x00:\x00\x00\x00\x00f\t\x00o\x00\x00\x00\x00}\t\x00?\x00\x00\x00\x00\xe6\t\x00O\x00\x00\x00\x00\xea\t\x008\x00\x00\x00\x00\xed\t\x009\x00\x00\x00\x00f\n\x00o\x00\x00\x00\x00g\n\x009\x00\x00\x00\x00j\n\x008\x00\x00\x00\x00\x83\n\x00:\x00\x00\x00\x00\xe6\n\x00o\x00\x00\x00\x00\x03\x0b\x008\x00\x00\x00\x00 \x0b\x00O\x00\x00\x00\x00f\x0b\x00O\x00\x00\x00\x00h\x0b\x009\x00\x00\x00\x00\xe6\x0b\x00o\x00\x00\x00\x00\x02\x0c\x00o\x00\x00\x00\x00f\x0c\x00o\x00\x00\x00\x00\x82\x0c\x00o\x00\x00\x00\x00\xe6\x0c\x00o\x00\x00\x00\x00\x02\r\x00o\x00\x00\x00\x00 \r\x00o\x00\x00\x00\x00f\r\x00o\x00\x00\x00\x00m\r\x009\x00\x00\x00\x00\x82\r\x00o\x00\x00\x00\x00P\x0e\x00o\x00\x00\x00\x00\xd0\x0e\x00o\x00\x00\x00\x00\x1d\x10\x00o\x00\x00\x00\x00@\x10\x00o\x00\x00\x00\x00\xe7\x10\x00y\x00\x00\x00\x00\xff\x10\x00o\x00\x00\x00\x00\x00\x12\x00U\x00\x00\x00\x00\xd0\x12\x00O\x00\x00\x00\x00\xa0\x13\x00D\x00\x00\x00\x00\xa1\x13\x00R\x00\x00\x00\x00\xa2\x13\x00T\x00\x00\x00\x00\xa4\x13\x00O\'\x00\x00\x00\xa5\x13\x00i\x00\x00\x00\x00\xa9\x13\x00Y\x00\x00\x00\x00\xaa\x13\x00A\x00\x00\x00\x00\xab\x13\x00J\x00\x00\x00\x00\xac\x13\x00E\x00\x00\x00\x00\xae\x13\x00?\x00\x00\x00\x00\xb3\x13\x00W\x00\x00\x00\x00\xb7\x13\x00M\x00\x00\x00\x00\xbb\x13\x00H\x00\x00\x00\x00\xbd\x13\x00Y\x00\x00\x00\x00\xc0\x13\x00G\x00\x00\x00\x00\xc2\x13\x00h\x00\x00\x00\x00\xc3\x13\x00Z\x00\x00\x00\x00\xce\x13\x004\x00\x00\x00\x00\xcf\x13\x00b\x00\x00\x00\x00\xd2\x13\x00R\x00\x00\x00\x00\xd4\x13\x00W\x00\x00\x00\x00\xd5\x13\x00S\x00\x00\x00\x00\xd9\x13\x00V\x00\x00\x00\x00\xda\x13\x00S\x00\x00\x00\x00\xde\x13\x00L\x00\x00\x00\x00\xdf\x13\x00C\x00\x00\x00\x00\xe2\x13\x00P\x00\x00\x00\x00\xe6\x13\x00K\x00\x00\x00\x00\xe7\x13\x00d\x00\x00\x00\x00\xee\x13\x006\x00\x00\x00\x00\xf3\x13\x00G\x00\x00\x00\x00\xf4\x13\x00B\x00\x00\x00\x00\x00\x14\x00=\x00\x00\x00\x00/\x14\x00V\x00\x00\x00\x003\x14\x00>\x00\x00\x00\x008\x14\x00<\x00\x00\x00\x00J\x14\x00\'\x00\x00\x00\x00L\x14\x00U\x00\x00\x00\x00g\x14\x00U\'\x00\x00\x00m\x14\x00P\x00\x00\x00\x00o\x14\x00d\x00\x00\x00\x00\x86\x14\x00P\'\x00\x00\x00\x87\x14\x00d\'\x00\x00\x00\x8d\x14\x00J\x00\x00\x00\x00\xaa\x14\x00L\x00\x00\x00\x00\xbf\x14\x002\x00\x00\x00\x00A\x15\x00x\x00\x00\x00\x00|\x15\x00H\x00\x00\x00\x00}\x15\x00x\x00\x00\x00\x00\x87\x15\x00R\x00\x00\x00\x00\xaf\x15\x00b\x00\x00\x00\x00\xb4\x15\x00F\x00\x00\x00\x00\xc5\x15\x00A\x00\x00\x00\x00\xde\x15\x00D\x00\x00\x00\x00\xea\x15\x00D\x00\x00\x00\x00\xf0\x15\x00M\x00\x00\x00\x00\xf7\x15\x00B\x00\x00\x00\x00m\x16\x00X\x00\x00\x00\x00n\x16\x00x\x00\x00\x00\x00\x80\x16\x00 \x00\x00\x00\x00\xb2\x16\x00<\x00\x00\x00\x00\xb7\x16\x00X\x00\x00\x00\x00\xc1\x16\x00l\x00\x00\x00\x00\xcc\x16\x00\'\x00\x00\x00\x00\xd5\x16\x00K\x00\x00\x00\x00\xd6\x16\x00M\x00\x00\x00\x00\xec\x16\x00:\x00\x00\x00\x00\xed\x16\x00+\x00\x00\x00\x005\x17\x00/\x00\x00\x00\x00\x03\x18\x00:\x00\x00\x00\x00\t\x18\x00:\x00\x00\x00\x00\xd3\x1c\x00\"\x00\x00\x00\x00\x04\x1d\x00c\x00\x00\x00\x00\x0f\x1d\x00o\x00\x00\x00\x00\x11\x1d\x00o\x00\x00\x00\x00\x1c\x1d\x00u\x00\x00\x00\x00 \x1d\x00v\x00\x00\x00\x00!\x1d\x00w\x00\x00\x00\x00\"\x1d\x00z\x00\x00\x00\x00&\x1d\x00r\x00\x00\x00\x00k\x1d\x00ue\x00\x00\x00\x83\x1d\x00g\x00\x00\x00\x00\x8c\x1d\x00y\x00\x00\x00\x00\x9d\x1e\x00f\x00\x00\x00\x00\xff\x1e\x00y\x00\x00\x00\x00\xbd\x1f\x00\'\x00\x00\x00\x00\xbe\x1f\x00i\x00\x00\x00\x00\xbf\x1f\x00\'\x00\x00\x00\x00\xc0\x1f\x00~\x00\x00\x00\x00\xef\x1f\x00\'\x00\x00\x00\x00\xfd\x1f\x00\'\x00\x00\x00\x00\xfe\x1f\x00\'\x00\x00\x00\x00\x00 \x00 \x00\x00\x00\x00\x01 \x00 \x00\x00\x00\x00\x02 \x00 \x00\x00\x00\x00\x03 \x00 \x00\x00\x00\x00\x04 \x00 \x00\x00\x00\x00\x05 \x00 \x00\x00\x00\x00\x06 \x00 \x00\x00\x00\x00\x07 \x00 \x00\x00\x00\x00\x08 \x00 \x00\x00\x00\x00\t \x00 \x00\x00\x00\x00\n \x00 \x00\x00\x00\x00\x10 \x00-\x00\x00\x00\x00\x11 \x00-\x00\x00\x00\x00\x12 \x00-\x00\x00\x00\x00\x13 \x00-\x00\x00\x00\x00\x16 \x00ll\x00\x00\x00\x18 \x00\'\x00\x00\x00\x00\x19 \x00\'\x00\x00\x00\x00\x1a \x00,\x00\x00\x00\x00\x1b \x00\'\x00\x00\x00\x00\x1c \x00\"\x00\x00\x00\x00\x1d \x00\"\x00\x00\x00\x00\x1f \x00\"\x00\x00\x00\x00$ \x00.\x00\x00\x00\x00% \x00..\x00\x00\x00& \x00...\x00\x00( \x00 \x00\x00\x00\x00) \x00 \x00\x00\x00\x00/ \x00 \x00\x00\x00\x002 \x00\'\x00\x00\x00\x003 \x00\"\x00\x00\x00\x004 \x00\'\'\'\x00\x005 \x00\'\x00\x00\x00\x006 \x00\"\x00\x00\x00\x007 \x00\'\'\'\x00\x009 \x00<\x00\x00\x00\x00: \x00>\x00\x00\x00\x00< \x00!!\x00\x00\x00A \x00/\x00\x00\x00\x00C \x00-\x00\x00\x00\x00D \x00/\x00\x00\x00\x00G \x00??\x00\x00\x00H \x00?!\x00\x00\x00I \x00!?\x00\x00\x00N \x00*\x00\x00\x00\x00S \x00~\x00\x00\x00\x00W \x00\'\'\'\'\x00Z \x00:\x00\x00\x00\x00_ \x00 \x00\x00\x00\x00\xa8 \x00Rs\x00\x00\x00\xb6 \x00lt\x00\x00\x00\x00!\x00a/c\x00\x00\x01!\x00a/s\x00\x00\x02!\x00C\x00\x00\x00\x00\x05!\x00c/o\x00\x00\x06!\x00c/u\x00\x00\n!\x00g\x00\x00\x00\x00\x0b!\x00H\x00\x00\x00\x00\x0c!\x00H\x00\x00\x00\x00\r!\x00H\x00\x00\x00\x00\x0e!\x00h\x00\x00\x00\x00\x10!\x00l\x00\x00\x00\x00\x11!\x00l\x00\x00\x00\x00\x12!\x00L\x00\x00\x00\x00\x13!\x00l\x00\x00\x00\x00\x15!\x00N\x00\x00\x00\x00\x16!\x00No\x00\x00\x00\x19!\x00P\x00\x00\x00\x00\x1a!\x00Q\x00\x00\x00\x00\x1b!\x00R\x00\x00\x00\x00\x1c!\x00R\x00\x00\x00\x00\x1d!\x00R\x00\x00\x00\x00!!\x00TEL\x00\x00$!\x00Z\x00\x00\x00\x00(!\x00Z\x00\x00\x00\x00*!\x00K\x00\x00\x00\x00,!\x00B\x00\x00\x00\x00-!\x00C\x00\x00\x00\x00.!\x00e\x00\x00\x00\x00/!\x00e\x00\x00\x00\x000!\x00E\x00\x00\x00\x001!\x00F\x00\x00\x00\x003!\x00M\x00\x00\x00\x004!\x00o\x00\x00\x00\x009!\x00i\x00\x00\x00\x00;!\x00FAX\x00\x00=!\x00y\x00\x00\x00\x00E!\x00D\x00\x00\x00\x00F!\x00d\x00\x00\x00\x00G!\x00e\x00\x00\x00\x00H!\x00i\x00\x00\x00\x00I!\x00j\x00\x00\x00\x00`!\x00l\x00\x00\x00\x00a!\x00ll\x00\x00\x00b!\x00lll\x00\x00c!\x00lV\x00\x00\x00d!\x00V\x00\x00\x00\x00e!\x00Vl\x00\x00\x00f!\x00Vll\x00\x00g!\x00Vlll\x00h!\x00lX\x00\x00\x00i!\x00X\x00\x00\x00\x00j!\x00Xl\x00\x00\x00k!\x00Xll\x00\x00l!\x00L\x00\x00\x00\x00m!\x00C\x00\x00\x00\x00n!\x00D\x00\x00\x00\x00o!\x00M\x00\x00\x00\x00p!\x00i\x00\x00\x00\x00q!\x00ii\x00\x00\x00r!\x00iii\x00\x00s!\x00iv\x00\x00\x00t!\x00v\x00\x00\x00\x00u!\x00vi\x00\x00\x00v!\x00vii\x00\x00w!\x00viii\x00x!\x00ix\x00\x00\x00y!\x00x\x00\x00\x00\x00z!\x00xi\x00\x00\x00{!\x00xii\x00\x00|!\x00l\x00\x00\x00\x00}!\x00c\x00\x00\x00\x00~!\x00d\x00\x00\x00\x00\x7f!\x00rn\x00\x00\x00\x12\"\x00-\x00\x00\x00\x00\x15\"\x00/\x00\x00\x00\x00\x16\"\x00\\\x00\x00\x00\x00\x17\"\x00*\x00\x00\x00\x00\x1e\"\x00oo\x00\x00\x00#\"\x00l\x00\x00\x00\x00%\"\x00ll\x00\x00\x00(\"\x00v\x00\x00\x00\x00*\"\x00U\x00\x00\x00\x006\"\x00:\x00\x00\x00\x00<\"\x00~\x00\x00\x00\x00j\"\x00<<\x00\x00\x00k\"\x00>>\x00\x00\x00\xa4\"\x00T\x00\x00\x00\x00\xc1\"\x00v\x00\x00\x00\x00\xc3\"\x00U\x00\x00\x00\x00\xd8\"\x00<<<\x00\x00\xd9\"\x00>>>\x00\x00\xff\"\x00E\x00\x00\x00\x00s#\x00i\x00\x00\x00\x00t#\x00p\x00\x00\x00\x00z#\x00a\x00\x00\x00\x00\xfd#\x00l\x00\x00\x00\x00J$\x00\\\\\x00\x00\x00t$\x00(l)\x00\x00u$\x00(2)\x00\x00v$\x00(3)\x00\x00w$\x00(4)\x00\x00x$\x00(5)\x00\x00y$\x00(6)\x00\x00z$\x00(7)\x00\x00{$\x00(8)\x00\x00|$\x00(9)\x00\x00}$\x00(lO)\x00~$\x00(ll)\x00\x7f$\x00(l2)\x00\x80$\x00(l3)\x00\x81$\x00(l4)\x00\x82$\x00(l5)\x00\x83$\x00(l6)\x00\x84$\x00(l7)\x00\x85$\x00(l8)\x00\x86$\x00(l9)\x00\x87$\x00(2O)\x00\x88$\x00l.\x00\x00\x00\x89$\x002.\x00\x00\x00\x8a$\x003.\x00\x00\x00\x8b$\x004.\x00\x00\x00\x8c$\x005.\x00\x00\x00\x8d$\x006.\x00\x00\x00\x8e$\x007.\x00\x00\x00\x8f$\x008.\x00\x00\x00\x90$\x009.\x00\x00\x00\x91$\x00lO.\x00\x00\x92$\x00ll.\x00\x00\x93$\x00l2.\x00\x00\x94$\x00l3.\x00\x00\x95$\x00l4.\x00\x00\x96$\x00l5.\x00\x00\x97$\x00l6.\x00\x00\x98$\x00l7.\x00\x00\x99$\x00l8.\x00\x00\x9a$\x00l9.\x00\x00\x9b$\x002O.\x00\x00\x9c$\x00(a)\x00\x00\x9d$\x00(b)\x00\x00\x9e$\x00(c)\x00\x00\x9f$\x00(d)\x00\x00\xa0$\x00(e)\x00\x00\xa1$\x00(f)\x00\x00\xa2$\x00(g)\x00\x00\xa3$\x00(h)\x00\x00\xa4$\x00(i)\x00\x00\xa5$\x00(j)\x00\x00\xa6$\x00(k)\x00\x00\xa7$\x00(l)\x00\x00\xa8$\x00(rn)\x00\xa9$\x00(n)\x00\x00\xaa$\x00(o)\x00\x00\xab$\x00(p)\x00\x00\xac$\x00(q)\x00\x00\xad$\x00(r)\x00\x00\xae$\x00(s)\x00\x00\xaf$\x00(t)\x00\x00\xb0$\x00(u)\x00\x00\xb1$\x00(v)\x00\x00\xb2$\x00(w)\x00\x00\xb3$\x00(x)\x00\x00\xb4$\x00(y)\x00\x00\xb5$\x00(z)\x00\x00q%\x00/\x00\x00\x00\x00s%\x00X\x00\x00\x00\x00h\'\x00(\x00\x00\x00\x00i\'\x00)\x00\x00\x00\x00n\'\x00<\x00\x00\x00\x00o\'\x00>\x00\x00\x00\x00r\'\x00(\x00\x00\x00\x00s\'\x00)\x00\x00\x00\x00t\'\x00{\x00\x00\x00\x00u\'\x00}\x00\x00\x00\x00\x95\'\x00+\x00\x00\x00\x00\x96\'\x00-\x00\x00\x00\x00\xcb\'\x00/\x00\x00\x00\x00\xcd\'\x00\\\x00\x00\x00\x00\xd9\'\x00T\x00\x00\x00\x00+)\x00x\x00\x00\x00\x00,)\x00x\x00\x00\x00\x00\xf5)\x00\\\x00\x00\x00\x00\xf8)\x00/\x00\x00\x00\x00\xf9)\x00\\\x00\x00\x00\x00 *\x00>>\x00\x00\x00/*\x00x\x00\x00\x00\x00t*\x00::=\x00\x00u*\x00==\x00\x00\x00v*\x00===\x00\x00\xa5*\x00><\x00\x00\x00\xfb*\x00///\x00\x00\xfd*\x00//\x00\x00\x00\x85,\x00r\x00\x00\x00\x00\x8e,\x00H\x00\x00\x00\x00\x92,\x00l\x00\x00\x00\x00\x94,\x00K\x00\x00\x00\x00\x98,\x00M\x00\x00\x00\x00\x9a,\x00N\x00\x00\x00\x00\x9e,\x00O\x00\x00\x00\x00\x9f,\x00o\x00\x00\x00\x00\xa2,\x00P\x00\x00\x00\x00\xa3,\x00p\x00\x00\x00\x00\xa4,\x00C\x00\x00\x00\x00\xa5,\x00c\x00\x00\x00\x00\xa6,\x00T\x00\x00\x00\x00\xa8,\x00Y\x00\x00\x00\x00\xac,\x00X\x00\x00\x00\x00\xba,\x00-\x00\x00\x00\x00\xc6,\x00/\x00\x00\x00\x00\xca,\x009\x00\x00\x00\x00\xcc,\x003\x00\x00\x00\x00\xd0,\x00L\x00\x00\x00\x00\xd2,\x006\x00\x00\x00\x00\xf9,\x00\\\\\x00\x00\x008-\x00V\x00\x00\x00\x009-\x00E\x00\x00\x00\x00O-\x00l\x00\x00\x00\x00Q-\x00!\x00\x00\x00\x00T-\x00O\x00\x00\x00\x00U-\x00Q\x00\x00\x00\x00]-\x00X\x00\x00\x00\x00(.\x00((\x00\x00\x00).\x00))\x00\x00\x00@.\x00=\x00\x00\x00\x00\x02/\x00\\\x00\x00\x00\x00\x03/\x00/\x00\x00\x00\x00\x030\x00\"\x00\x00\x00\x00\x070\x00O\x00\x00\x00\x00\x140\x00(\x00\x00\x00\x00\x150\x00)\x00\x00\x00\x0030\x00/\x00\x00\x00\x00\xa00\x00=\x00\x00\x00\x00\xce0\x00/\x00\x00\x00\x00\xd31\x00/\x00\x00\x00\x00\xd41\x00\\\x00\x00\x00\x006N\x00\\\x00\x00\x00\x00?N\x00/\x00\x00\x00\x00\xd0\xa4\x00B\x00\x00\x00\x00\xd1\xa4\x00P\x00\x00\x00\x00\xd2\xa4\x00d\x00\x00\x00\x00\xd3\xa4\x00D\x00\x00\x00\x00\xd4\xa4\x00T\x00\x00\x00\x00\xd6\xa4\x00G\x00\x00\x00\x00\xd7\xa4\x00K\x00\x00\x00\x00\xd9\xa4\x00J\x00\x00\x00\x00\xda\xa4\x00C\x00\x00\x00\x00\xdc\xa4\x00Z\x00\x00\x00\x00\xdd\xa4\x00F\x00\x00\x00\x00\xdf\xa4\x00M\x00\x00\x00\x00\xe0\xa4\x00N\x00\x00\x00\x00\xe1\xa4\x00L\x00\x00\x00\x00\xe2\xa4\x00S\x00\x00\x00\x00\xe3\xa4\x00R\x00\x00\x00\x00\xe6\xa4\x00V\x00\x00\x00\x00\xe7\xa4\x00H\x00\x00\x00\x00\xea\xa4\x00W\x00\x00\x00\x00\xeb\xa4\x00X\x00\x00\x00\x00\xec\xa4\x00Y\x00\x00\x00\x00\xee\xa4\x00A\x00\x00\x00\x00\xf0\xa4\x00E\x00\x00\x00\x00\xf2\xa4\x00l\x00\x00\x00\x00\xf3\xa4\x00O\x00\x00\x00\x00\xf4\xa4\x00U\x00\x00\x00\x00\xf8\xa4\x00.\x00\x00\x00\x00\xf9\xa4\x00,\x00\x00\x00\x00\xfa\xa4\x00..\x00\x00\x00\xfb\xa4\x00.,\x00\x00\x00\xfd\xa4\x00:\x00\x00\x00\x00\xfe\xa4\x00-.\x00\x00\x00\xff\xa4\x00=\x00\x00\x00\x00\x0e\xa6\x00.\x00\x00\x00\x00D\xa6\x002\x00\x00\x00\x00G\xa6\x00i\x00\x00\x00\x00\x98\xa6\x00OO\x00\x00\x00\x99\xa6\x00oo\x00\x00\x00\xdf\xa6\x00V\x00\x00\x00\x00\xeb\xa6\x00?\x00\x00\x00\x00\xef\xa6\x002\x00\x00\x00\x00(\xa7\x00T3\x00\x00\x001\xa7\x00s\x00\x00\x00\x002\xa7\x00AA\x00\x00\x003\xa7\x00aa\x00\x00\x004\xa7\x00AO\x00\x00\x005\xa7\x00ao\x00\x00\x006\xa7\x00AU\x00\x00\x007\xa7\x00au\x00\x00\x008\xa7\x00AV\x00\x00\x009\xa7\x00av\x00\x00\x00:\xa7\x00AV\x00\x00\x00;\xa7\x00av\x00\x00\x00<\xa7\x00AY\x00\x00\x00=\xa7\x00ay\x00\x00\x00N\xa7\x00OO\x00\x00\x00O\xa7\x00oo\x00\x00\x00Z\xa7\x002\x00\x00\x00\x00j\xa7\x003\x00\x00\x00\x00n\xa7\x009\x00\x00\x00\x00w\xa7\x00tf\x00\x00\x00x\xa7\x00&\x00\x00\x00\x00\x89\xa7\x00:\x00\x00\x00\x00\x8c\xa7\x00\'\x00\x00\x00\x00\x98\xa7\x00F\x00\x00\x00\x00\x99\xa7\x00f\x00\x00\x00\x00\x9f\xa7\x00u\x00\x00\x00\x00\xab\xa7\x003\x00\x00\x00\x00\xb2\xa7\x00J\x00\x00\x00\x00\xb3\xa7\x00X\x00\x00\x00\x00\xb4\xa7\x00B\x00\x00\x00\x002\xab\x00e\x00\x00\x00\x005\xab\x00f\x00\x00\x00\x00=\xab\x00o\x00\x00\x00\x00G\xab\x00r\x00\x00\x00\x00H\xab\x00r\x00\x00\x00\x00N\xab\x00u\x00\x00\x00\x00R\xab\x00u\x00\x00\x00\x00Z\xab\x00y\x00\x00\x00\x00c\xab\x00uo\x00\x00\x00u\xab\x00i\x00\x00\x00\x00\x81\xab\x00r\x00\x00\x00\x00\x83\xab\x00w\x00\x00\x00\x00\x93\xab\x00z\x00\x00\x00\x00\xa9\xab\x00v\x00\x00\x00\x00\xaa\xab\x00s\x00\x00\x00\x00\xaf\xab\x00c\x00\x00\x00\x00\x00\xfb\x00ff\x00\x00\x00\x01\xfb\x00fi\x00\x00\x00\x02\xfb\x00fl\x00\x00\x00\x03\xfb\x00ffi\x00\x00\x04\xfb\x00ffl\x00\x00\x06\xfb\x00st\x00\x00\x00\xa6\xfb\x00o\x00\x00\x00\x00\xa7\xfb\x00o\x00\x00\x00\x00\xa8\xfb\x00o\x00\x00\x00\x00\xa9\xfb\x00o\x00\x00\x00\x00\xaa\xfb\x00o\x00\x00\x00\x00\xab\xfb\x00o\x00\x00\x00\x00\xac\xfb\x00o\x00\x00\x00\x00\xad\xfb\x00o\x00\x00\x00\x00>\xfd\x00(\x00\x00\x00\x00?\xfd\x00)\x00\x00\x00\x000\xfe\x00:\x00\x00\x00\x00M\xfe\x00_\x00\x00\x00\x00N\xfe\x00_\x00\x00\x00\x00O\xfe\x00_\x00\x00\x00\x00X\xfe\x00-\x00\x00\x00\x00h\xfe\x00\\\x00\x00\x00\x00\x8d\xfe\x00l\x00\x00\x00\x00\x8e\xfe\x00l\x00\x00\x00\x00\xe9\xfe\x00o\x00\x00\x00\x00\xea\xfe\x00o\x00\x00\x00\x00\xeb\xfe\x00o\x00\x00\x00\x00\xec\xfe\x00o\x00\x00\x00\x00\x01\xff\x00!\x00\x00\x00\x00\x02\xff\x00\"\x00\x00\x00\x00\x07\xff\x00\'\x00\x00\x00\x00\x1a\xff\x00:\x00\x00\x00\x00!\xff\x00A\x00\x00\x00\x00\"\xff\x00B\x00\x00\x00\x00#\xff\x00C\x00\x00\x00\x00%\xff\x00E\x00\x00\x00\x00(\xff\x00H\x00\x00\x00\x00)\xff\x00l\x00\x00\x00\x00*\xff\x00J\x00\x00\x00\x00+\xff\x00K\x00\x00\x00\x00-\xff\x00M\x00\x00\x00\x00.\xff\x00N\x00\x00\x00\x00/\xff\x00O\x00\x00\x00\x000\xff\x00P\x00\x00\x00\x003\xff\x00S\x00\x00\x00\x004\xff\x00T\x00\x00\x00\x008\xff\x00X\x00\x00\x00\x009\xff\x00Y\x00\x00\x00\x00:\xff\x00Z\x00\x00\x00\x00;\xff\x00(\x00\x00\x00\x00<\xff\x00\\\x00\x00\x00\x00=\xff\x00)\x00\x00\x00\x00@\xff\x00\'\x00\x00\x00\x00A\xff\x00a\x00\x00\x00\x00C\xff\x00c\x00\x00\x00\x00E\xff\x00e\x00\x00\x00\x00G\xff\x00g\x00\x00\x00\x00H\xff\x00h\x00\x00\x00\x00I\xff\x00i\x00\x00\x00\x00J\xff\x00j\x00\x00\x00\x00L\xff\x00l\x00\x00\x00\x00O\xff\x00o\x00\x00\x00\x00P\xff\x00p\x00\x00\x00\x00S\xff\x00s\x00\x00\x00\x00V\xff\x00v\x00\x00\x00\x00X\xff\x00x\x00\x00\x00\x00Y\xff\x00y\x00\x00\x00\x00\xe8\xff\x00l\x00\x00\x00\x00\x82\x02\x01B\x00\x00\x00\x00\x86\x02\x01E\x00\x00\x00\x00\x87\x02\x01F\x00\x00\x00\x00\x8a\x02\x01l\x00\x00\x00\x00\x90\x02\x01X\x00\x00\x00\x00\x92\x02\x01O\x00\x00\x00\x00\x95\x02\x01P\x00\x00\x00\x00\x96\x02\x01S\x00\x00\x00\x00\x97\x02\x01T\x00\x00\x00\x00\x9b\x02\x01+\x00\x00\x00\x00\xa0\x02\x01A\x00\x00\x00\x00\xa1\x02\x01B\x00\x00\x00\x00\xa2\x02\x01C\x00\x00\x00\x00\xa5\x02\x01F\x00\x00\x00\x00\xab\x02\x01O\x00\x00\x00\x00\xb0\x02\x01M\x00\x00\x00\x00\xb1\x02\x01T\x00\x00\x00\x00\xb2\x02\x01Y\x00\x00\x00\x00\xb4\x02\x01X\x00\x00\x00\x00\xcf\x02\x01H\x00\x00\x00\x00\xf5\x02\x01Z\x00\x00\x00\x00\x01\x03\x01B\x00\x00\x00\x00\x02\x03\x01C\x00\x00\x00\x00\t\x03\x01l\x00\x00\x00\x00\x11\x03\x01M\x00\x00\x00\x00\x15\x03\x01T\x00\x00\x00\x00\x17\x03\x01X\x00\x00\x00\x00\x1a\x03\x018\x00\x00\x00\x00\x1f\x03\x01*\x00\x00\x00\x00 \x03\x01l\x00\x00\x00\x00\"\x03\x01X\x00\x00\x00\x00\x04\x04\x01O\x00\x00\x00\x00\x15\x04\x01C\x00\x00\x00\x00\x1b\x04\x01L\x00\x00\x00\x00 \x04\x01S\x00\x00\x00\x00,\x04\x01o\x00\x00\x00\x00=\x04\x01c\x00\x00\x00\x00H\x04\x01s\x00\x00\x00\x00\xb4\x04\x01R\x00\x00\x00\x00\xc2\x04\x01O\x00\x00\x00\x00\xce\x04\x01U\x00\x00\x00\x00\xd2\x04\x017\x00\x00\x00\x00\xea\x04\x01o\x00\x00\x00\x00\xf6\x04\x01u\x00\x00\x00\x00\x13\x05\x01N\x00\x00\x00\x00\x16\x05\x01O\x00\x00\x00\x00\x18\x05\x01K\x00\x00\x00\x00\x1c\x05\x01C\x00\x00\x00\x00\x1d\x05\x01V\x00\x00\x00\x00%\x05\x01F\x00\x00\x00\x00&\x05\x01L\x00\x00\x00\x00\'\x05\x01X\x00\x00\x00\x00P\n\x01.\x00\x00\x00\x00\xd0\x14\x01O\x00\x00\x00\x00\x00\x17\x01rn\x00\x00\x00\x06\x17\x01v\x00\x00\x00\x00\n\x17\x01w\x00\x00\x00\x00\x0e\x17\x01w\x00\x00\x00\x00\x0f\x17\x01w\x00\x00\x00\x00\xa0\x18\x01V\x00\x00\x00\x00\xa2\x18\x01F\x00\x00\x00\x00\xa3\x18\x01L\x00\x00\x00\x00\xa4\x18\x01Y\x00\x00\x00\x00\xa6\x18\x01E\x00\x00\x00\x00\xa9\x18\x01Z\x00\x00\x00\x00\xac\x18\x019\x00\x00\x00\x00\xae\x18\x01E\x00\x00\x00\x00\xaf\x18\x014\x00\x00\x00\x00\xb2\x18\x01L\x00\x00\x00\x00\xb5\x18\x01O\x00\x00\x00\x00\xb8\x18\x01U\x00\x00\x00\x00\xbb\x18\x015\x00\x00\x00\x00\xbc\x18\x01T\x00\x00\x00\x00\xc0\x18\x01v\x00\x00\x00\x00\xc1\x18\x01s\x00\x00\x00\x00\xc2\x18\x01F\x00\x00\x00\x00\xc3\x18\x01i\x00\x00\x00\x00\xc4\x18\x01z\x00\x00\x00\x00\xc6\x18\x017\x00\x00\x00\x00\xc8\x18\x01o\x00\x00\x00\x00\xca\x18\x013\x00\x00\x00\x00\xcc\x18\x019\x00\x00\x00\x00\xd5\x18\x016\x00\x00\x00\x00\xd6\x18\x019\x00\x00\x00\x00\xd7\x18\x01o\x00\x00\x00\x00\xd8\x18\x01u\x00\x00\x00\x00\xdc\x18\x01y\x00\x00\x00\x00\xe0\x18\x01O\x00\x00\x00\x00\xe3\x18\x01rn\x00\x00\x00\xe5\x18\x01Z\x00\x00\x00\x00\xe6\x18\x01W\x00\x00\x00\x00\xe9\x18\x01C\x00\x00\x00\x00\xec\x18\x01X\x00\x00\x00\x00\xef\x18\x01W\x00\x00\x00\x00\xf2\x18\x01C\x00\x00\x00\x00\x08o\x01V\x00\x00\x00\x00\no\x01T\x00\x00\x00\x00\x16o\x01L\x00\x00\x00\x00(o\x01l\x00\x00\x00\x005o\x01R\x00\x00\x00\x00:o\x01S\x00\x00\x00\x00;o\x013\x00\x00\x00\x00?o\x01>\x00\x00\x00\x00@o\x01A\x00\x00\x00\x00Bo\x01U\x00\x00\x00\x00Co\x01Y\x00\x00\x00\x00Qo\x01\'\x00\x00\x00\x00Ro\x01\'\x00\x00\x00\x00\x14\xd1\x01{\x00\x00\x00\x00m\xd1\x01.\x00\x00\x00\x00\x06\xd2\x013\x00\x00\x00\x00\r\xd2\x01V\x00\x00\x00\x00\x0f\xd2\x01\\\x00\x00\x00\x00\x12\xd2\x017\x00\x00\x00\x00\x13\xd2\x01F\x00\x00\x00\x00\x16\xd2\x01R\x00\x00\x00\x00*\xd2\x01L\x00\x00\x00\x006\xd2\x01<\x00\x00\x00\x007\xd2\x01>\x00\x00\x00\x00:\xd2\x01/\x00\x00\x00\x00;\xd2\x01\\\x00\x00\x00\x00\x00\xd4\x01A\x00\x00\x00\x00\x01\xd4\x01B\x00\x00\x00\x00\x02\xd4\x01C\x00\x00\x00\x00\x03\xd4\x01D\x00\x00\x00\x00\x04\xd4\x01E\x00\x00\x00\x00\x05\xd4\x01F\x00\x00\x00\x00\x06\xd4\x01G\x00\x00\x00\x00\x07\xd4\x01H\x00\x00\x00\x00\x08\xd4\x01l\x00\x00\x00\x00\t\xd4\x01J\x00\x00\x00\x00\n\xd4\x01K\x00\x00\x00\x00\x0b\xd4\x01L\x00\x00\x00\x00\x0c\xd4\x01M\x00\x00\x00\x00\r\xd4\x01N\x00\x00\x00\x00\x0e\xd4\x01O\x00\x00\x00\x00\x0f\xd4\x01P\x00\x00\x00\x00\x10\xd4\x01Q\x00\x00\x00\x00\x11\xd4\x01R\x00\x00\x00\x00\x12\xd4\x01S\x00\x00\x00\x00\x13\xd4\x01T\x00\x00\x00\x00\x14\xd4\x01U\x00\x00\x00\x00\x15\xd4\x01V\x00\x00\x00\x00\x16\xd4\x01W\x00\x00\x00\x00\x17\xd4\x01X\x00\x00\x00\x00\x18\xd4\x01Y\x00\x00\x00\x00\x19\xd4\x01Z\x00\x00\x00\x00\x1a\xd4\x01a\x00\x00\x00\x00\x1b\xd4\x01b\x00\x00\x00\x00\x1c\xd4\x01c\x00\x00\x00\x00\x1d\xd4\x01d\x00\x00\x00\x00\x1e\xd4\x01e\x00\x00\x00\x00\x1f\xd4\x01f\x00\x00\x00\x00 \xd4\x01g\x00\x00\x00\x00!\xd4\x01h\x00\x00\x00\x00\"\xd4\x01i\x00\x00\x00\x00#\xd4\x01j\x00\x00\x00\x00$\xd4\x01k\x00\x00\x00\x00%\xd4\x01l\x00\x00\x00\x00&\xd4\x01rn\x00\x00\x00\'\xd4\x01n\x00\x00\x00\x00(\xd4\x01o\x00\x00\x00\x00)\xd4\x01p\x00\x00\x00\x00*\xd4\x01q\x00\x00\x00\x00+\xd4\x01r\x00\x00\x00\x00,\xd4\x01s\x00\x00\x00\x00-\xd4\x01t\x00\x00\x00\x00.\xd4\x01u\x00\x00\x00\x00/\xd4\x01v\x00\x00\x00\x000\xd4\x01w\x00\x00\x00\x001\xd4\x01x\x00\x00\x00\x002\xd4\x01y\x00\x00\x00\x003\xd4\x01z\x00\x00\x00\x004\xd4\x01A\x00\x00\x00\x005\xd4\x01B\x00\x00\x00\x006\xd4\x01C\x00\x00\x00\x007\xd4\x01D\x00\x00\x00\x008\xd4\x01E\x00\x00\x00\x009\xd4\x01F\x00\x00\x00\x00:\xd4\x01G\x00\x00\x00\x00;\xd4\x01H\x00\x00\x00\x00<\xd4\x01l\x00\x00\x00\x00=\xd4\x01J\x00\x00\x00\x00>\xd4\x01K\x00\x00\x00\x00?\xd4\x01L\x00\x00\x00\x00@\xd4\x01M\x00\x00\x00\x00A\xd4\x01N\x00\x00\x00\x00B\xd4\x01O\x00\x00\x00\x00C\xd4\x01P\x00\x00\x00\x00D\xd4\x01Q\x00\x00\x00\x00E\xd4\x01R\x00\x00\x00\x00F\xd4\x01S\x00\x00\x00\x00G\xd4\x01T\x00\x00\x00\x00H\xd4\x01U\x00\x00\x00\x00I\xd4\x01V\x00\x00\x00\x00J\xd4\x01W\x00\x00\x00\x00K\xd4\x01X\x00\x00\x00\x00L\xd4\x01Y\x00\x00\x00\x00M\xd4\x01Z\x00\x00\x00\x00N\xd4\x01a\x00\x00\x00\x00O\xd4\x01b\x00\x00\x00\x00P\xd4\x01c\x00\x00\x00\x00Q\xd4\x01d\x00\x00\x00\x00R\xd4\x01e\x00\x00\x00\x00S\xd4\x01f\x00\x00\x00\x00T\xd4\x01g\x00\x00\x00\x00V\xd4\x01i\x00\x00\x00\x00W\xd4\x01j\x00\x00\x00\x00X\xd4\x01k\x00\x00\x00\x00Y\xd4\x01l\x00\x00\x00\x00Z\xd4\x01rn\x00\x00\x00[\xd4\x01n\x00\x00\x00\x00\\\xd4\x01o\x00\x00\x00\x00]\xd4\x01p\x00\x00\x00\x00^\xd4\x01q\x00\x00\x00\x00_\xd4\x01r\x00\x00\x00\x00`\xd4\x01s\x00\x00\x00\x00a\xd4\x01t\x00\x00\x00\x00b\xd4\x01u\x00\x00\x00\x00c\xd4\x01v\x00\x00\x00\x00d\xd4\x01w\x00\x00\x00\x00e\xd4\x01x\x00\x00\x00\x00f\xd4\x01y\x00\x00\x00\x00g\xd4\x01z\x00\x00\x00\x00h\xd4\x01A\x00\x00\x00\x00i\xd4\x01B\x00\x00\x00\x00j\xd4\x01C\x00\x00\x00\x00k\xd4\x01D\x00\x00\x00\x00l\xd4\x01E\x00\x00\x00\x00m\xd4\x01F\x00\x00\x00\x00n\xd4\x01G\x00\x00\x00\x00o\xd4\x01H\x00\x00\x00\x00p\xd4\x01l\x00\x00\x00\x00q\xd4\x01J\x00\x00\x00\x00r\xd4\x01K\x00\x00\x00\x00s\xd4\x01L\x00\x00\x00\x00t\xd4\x01M\x00\x00\x00\x00u\xd4\x01N\x00\x00\x00\x00v\xd4\x01O\x00\x00\x00\x00w\xd4\x01P\x00\x00\x00\x00x\xd4\x01Q\x00\x00\x00\x00y\xd4\x01R\x00\x00\x00\x00z\xd4\x01S\x00\x00\x00\x00{\xd4\x01T\x00\x00\x00\x00|\xd4\x01U\x00\x00\x00\x00}\xd4\x01V\x00\x00\x00\x00~\xd4\x01W\x00\x00\x00\x00\x7f\xd4\x01X\x00\x00\x00\x00\x80\xd4\x01Y\x00\x00\x00\x00\x81\xd4\x01Z\x00\x00\x00\x00\x82\xd4\x01a\x00\x00\x00\x00\x83\xd4\x01b\x00\x00\x00\x00\x84\xd4\x01c\x00\x00\x00\x00\x85\xd4\x01d\x00\x00\x00\x00\x86\xd4\x01e\x00\x00\x00\x00\x87\xd4\x01f\x00\x00\x00\x00\x88\xd4\x01g\x00\x00\x00\x00\x89\xd4\x01h\x00\x00\x00\x00\x8a\xd4\x01i\x00\x00\x00\x00\x8b\xd4\x01j\x00\x00\x00\x00\x8c\xd4\x01k\x00\x00\x00\x00\x8d\xd4\x01l\x00\x00\x00\x00\x8e\xd4\x01rn\x00\x00\x00\x8f\xd4\x01n\x00\x00\x00\x00\x90\xd4\x01o\x00\x00\x00\x00\x91\xd4\x01p\x00\x00\x00\x00\x92\xd4\x01q\x00\x00\x00\x00\x93\xd4\x01r\x00\x00\x00\x00\x94\xd4\x01s\x00\x00\x00\x00\x95\xd4\x01t\x00\x00\x00\x00\x96\xd4\x01u\x00\x00\x00\x00\x97\xd4\x01v\x00\x00\x00\x00\x98\xd4\x01w\x00\x00\x00\x00\x99\xd4\x01x\x00\x00\x00\x00\x9a\xd4\x01y\x00\x00\x00\x00\x9b\xd4\x01z\x00\x00\x00\x00\x9c\xd4\x01A\x00\x00\x00\x00\x9e\xd4\x01C\x00\x00\x00\x00\x9f\xd4\x01D\x00\x00\x00\x00\xa2\xd4\x01G\x00\x00\x00\x00\xa5\xd4\x01J\x00\x00\x00\x00\xa6\xd4\x01K\x00\x00\x00\x00\xa9\xd4\x01N\x00\x00\x00\x00\xaa\xd4\x01O\x00\x00\x00\x00\xab\xd4\x01P\x00\x00\x00\x00\xac\xd4\x01Q\x00\x00\x00\x00\xae\xd4\x01S\x00\x00\x00\x00\xaf\xd4\x01T\x00\x00\x00\x00\xb0\xd4\x01U\x00\x00\x00\x00\xb1\xd4\x01V\x00\x00\x00\x00\xb2\xd4\x01W\x00\x00\x00\x00\xb3\xd4\x01X\x00\x00\x00\x00\xb4\xd4\x01Y\x00\x00\x00\x00\xb5\xd4\x01Z\x00\x00\x00\x00\xb6\xd4\x01a\x00\x00\x00\x00\xb7\xd4\x01b\x00\x00\x00\x00\xb8\xd4\x01c\x00\x00\x00\x00\xb9\xd4\x01d\x00\x00\x00\x00\xbb\xd4\x01f\x00\x00\x00\x00\xbd\xd4\x01h\x00\x00\x00\x00\xbe\xd4\x01i\x00\x00\x00\x00\xbf\xd4\x01j\x00\x00\x00\x00\xc0\xd4\x01k\x00\x00\x00\x00\xc1\xd4\x01l\x00\x00\x00\x00\xc2\xd4\x01rn\x00\x00\x00\xc3\xd4\x01n\x00\x00\x00\x00\xc5\xd4\x01p\x00\x00\x00\x00\xc6\xd4\x01q\x00\x00\x00\x00\xc7\xd4\x01r\x00\x00\x00\x00\xc8\xd4\x01s\x00\x00\x00\x00\xc9\xd4\x01t\x00\x00\x00\x00\xca\xd4\x01u\x00\x00\x00\x00\xcb\xd4\x01v\x00\x00\x00\x00\xcc\xd4\x01w\x00\x00\x00\x00\xcd\xd4\x01x\x00\x00\x00\x00\xce\xd4\x01y\x00\x00\x00\x00\xcf\xd4\x01z\x00\x00\x00\x00\xd0\xd4\x01A\x00\x00\x00\x00\xd1\xd4\x01B\x00\x00\x00\x00\xd2\xd4\x01C\x00\x00\x00\x00\xd3\xd4\x01D\x00\x00\x00\x00\xd4\xd4\x01E\x00\x00\x00\x00\xd5\xd4\x01F\x00\x00\x00\x00\xd6\xd4\x01G\x00\x00\x00\x00\xd7\xd4\x01H\x00\x00\x00\x00\xd8\xd4\x01l\x00\x00\x00\x00\xd9\xd4\x01J\x00\x00\x00\x00\xda\xd4\x01K\x00\x00\x00\x00\xdb\xd4\x01L\x00\x00\x00\x00\xdc\xd4\x01M\x00\x00\x00\x00\xdd\xd4\x01N\x00\x00\x00\x00\xde\xd4\x01O\x00\x00\x00\x00\xdf\xd4\x01P\x00\x00\x00\x00\xe0\xd4\x01Q\x00\x00\x00\x00\xe1\xd4\x01R\x00\x00\x00\x00\xe2\xd4\x01S\x00\x00\x00\x00\xe3\xd4\x01T\x00\x00\x00\x00\xe4\xd4\x01U\x00\x00\x00\x00\xe5\xd4\x01V\x00\x00\x00\x00\xe6\xd4\x01W\x00\x00\x00\x00\xe7\xd4\x01X\x00\x00\x00\x00\xe8\xd4\x01Y\x00\x00\x00\x00\xe9\xd4\x01Z\x00\x00\x00\x00\xea\xd4\x01a\x00\x00\x00\x00\xeb\xd4\x01b\x00\x00\x00\x00\xec\xd4\x01c\x00\x00\x00\x00\xed\xd4\x01d\x00\x00\x00\x00\xee\xd4\x01e\x00\x00\x00\x00\xef\xd4\x01f\x00\x00\x00\x00\xf0\xd4\x01g\x00\x00\x00\x00\xf1\xd4\x01h\x00\x00\x00\x00\xf2\xd4\x01i\x00\x00\x00\x00\xf3\xd4\x01j\x00\x00\x00\x00\xf4\xd4\x01k\x00\x00\x00\x00\xf5\xd4\x01l\x00\x00\x00\x00\xf6\xd4\x01rn\x00\x00\x00\xf7\xd4\x01n\x00\x00\x00\x00\xf8\xd4\x01o\x00\x00\x00\x00\xf9\xd4\x01p\x00\x00\x00\x00\xfa\xd4\x01q\x00\x00\x00\x00\xfb\xd4\x01r\x00\x00\x00\x00\xfc\xd4\x01s\x00\x00\x00\x00\xfd\xd4\x01t\x00\x00\x00\x00\xfe\xd4\x01u\x00\x00\x00\x00\xff\xd4\x01v\x00\x00\x00\x00\x00\xd5\x01w\x00\x00\x00\x00\x01\xd5\x01x\x00\x00\x00\x00\x02\xd5\x01y\x00\x00\x00\x00\x03\xd5\x01z\x00\x00\x00\x00\x04\xd5\x01A\x00\x00\x00\x00\x05\xd5\x01B\x00\x00\x00\x00\x07\xd5\x01D\x00\x00\x00\x00\x08\xd5\x01E\x00\x00\x00\x00\t\xd5\x01F\x00\x00\x00\x00\n\xd5\x01G\x00\x00\x00\x00\r\xd5\x01J\x00\x00\x00\x00\x0e\xd5\x01K\x00\x00\x00\x00\x0f\xd5\x01L\x00\x00\x00\x00\x10\xd5\x01M\x00\x00\x00\x00\x11\xd5\x01N\x00\x00\x00\x00\x12\xd5\x01O\x00\x00\x00\x00\x13\xd5\x01P\x00\x00\x00\x00\x14\xd5\x01Q\x00\x00\x00\x00\x16\xd5\x01S\x00\x00\x00\x00\x17\xd5\x01T\x00\x00\x00\x00\x18\xd5\x01U\x00\x00\x00\x00\x19\xd5\x01V\x00\x00\x00\x00\x1a\xd5\x01W\x00\x00\x00\x00\x1b\xd5\x01X\x00\x00\x00\x00\x1c\xd5\x01Y\x00\x00\x00\x00\x1e\xd5\x01a\x00\x00\x00\x00\x1f\xd5\x01b\x00\x00\x00\x00 \xd5\x01c\x00\x00\x00\x00!\xd5\x01d\x00\x00\x00\x00\"\xd5\x01e\x00\x00\x00\x00#\xd5\x01f\x00\x00\x00\x00$\xd5\x01g\x00\x00\x00\x00%\xd5\x01h\x00\x00\x00\x00&\xd5\x01i\x00\x00\x00\x00\'\xd5\x01j\x00\x00\x00\x00(\xd5\x01k\x00\x00\x00\x00)\xd5\x01l\x00\x00\x00\x00*\xd5\x01rn\x00\x00\x00+\xd5\x01n\x00\x00\x00\x00,\xd5\x01o\x00\x00\x00\x00-\xd5\x01p\x00\x00\x00\x00.\xd5\x01q\x00\x00\x00\x00/\xd5\x01r\x00\x00\x00\x000\xd5\x01s\x00\x00\x00\x001\xd5\x01t\x00\x00\x00\x002\xd5\x01u\x00\x00\x00\x003\xd5\x01v\x00\x00\x00\x004\xd5\x01w\x00\x00\x00\x005\xd5\x01x\x00\x00\x00\x006\xd5\x01y\x00\x00\x00\x007\xd5\x01z\x00\x00\x00\x008\xd5\x01A\x00\x00\x00\x009\xd5\x01B\x00\x00\x00\x00;\xd5\x01D\x00\x00\x00\x00<\xd5\x01E\x00\x00\x00\x00=\xd5\x01F\x00\x00\x00\x00>\xd5\x01G\x00\x00\x00\x00@\xd5\x01l\x00\x00\x00\x00A\xd5\x01J\x00\x00\x00\x00B\xd5\x01K\x00\x00\x00\x00C\xd5\x01L\x00\x00\x00\x00D\xd5\x01M\x00\x00\x00\x00F\xd5\x01O\x00\x00\x00\x00J\xd5\x01S\x00\x00\x00\x00K\xd5\x01T\x00\x00\x00\x00L\xd5\x01U\x00\x00\x00\x00M\xd5\x01V\x00\x00\x00\x00N\xd5\x01W\x00\x00\x00\x00O\xd5\x01X\x00\x00\x00\x00P\xd5\x01Y\x00\x00\x00\x00R\xd5\x01a\x00\x00\x00\x00S\xd5\x01b\x00\x00\x00\x00T\xd5\x01c\x00\x00\x00\x00U\xd5\x01d\x00\x00\x00\x00V\xd5\x01e\x00\x00\x00\x00W\xd5\x01f\x00\x00\x00\x00X\xd5\x01g\x00\x00\x00\x00Y\xd5\x01h\x00\x00\x00\x00Z\xd5\x01i\x00\x00\x00\x00[\xd5\x01j\x00\x00\x00\x00\\\xd5\x01k\x00\x00\x00\x00]\xd5\x01l\x00\x00\x00\x00^\xd5\x01rn\x00\x00\x00_\xd5\x01n\x00\x00\x00\x00`\xd5\x01o\x00\x00\x00\x00a\xd5\x01p\x00\x00\x00\x00b\xd5\x01q\x00\x00\x00\x00c\xd5\x01r\x00\x00\x00\x00d\xd5\x01s\x00\x00\x00\x00e\xd5\x01t\x00\x00\x00\x00f\xd5\x01u\x00\x00\x00\x00g\xd5\x01v\x00\x00\x00\x00h\xd5\x01w\x00\x00\x00\x00i\xd5\x01x\x00\x00\x00\x00j\xd5\x01y\x00\x00\x00\x00k\xd5\x01z\x00\x00\x00\x00l\xd5\x01A\x00\x00\x00\x00m\xd5\x01B\x00\x00\x00\x00n\xd5\x01C\x00\x00\x00\x00o\xd5\x01D\x00\x00\x00\x00p\xd5\x01E\x00\x00\x00\x00q\xd5\x01F\x00\x00\x00\x00r\xd5\x01G\x00\x00\x00\x00s\xd5\x01H\x00\x00\x00\x00t\xd5\x01l\x00\x00\x00\x00u\xd5\x01J\x00\x00\x00\x00v\xd5\x01K\x00\x00\x00\x00w\xd5\x01L\x00\x00\x00\x00x\xd5\x01M\x00\x00\x00\x00y\xd5\x01N\x00\x00\x00\x00z\xd5\x01O\x00\x00\x00\x00{\xd5\x01P\x00\x00\x00\x00|\xd5\x01Q\x00\x00\x00\x00}\xd5\x01R\x00\x00\x00\x00~\xd5\x01S\x00\x00\x00\x00\x7f\xd5\x01T\x00\x00\x00\x00\x80\xd5\x01U\x00\x00\x00\x00\x81\xd5\x01V\x00\x00\x00\x00\x82\xd5\x01W\x00\x00\x00\x00\x83\xd5\x01X\x00\x00\x00\x00\x84\xd5\x01Y\x00\x00\x00\x00\x85\xd5\x01Z\x00\x00\x00\x00\x86\xd5\x01a\x00\x00\x00\x00\x87\xd5\x01b\x00\x00\x00\x00\x88\xd5\x01c\x00\x00\x00\x00\x89\xd5\x01d\x00\x00\x00\x00\x8a\xd5\x01e\x00\x00\x00\x00\x8b\xd5\x01f\x00\x00\x00\x00\x8c\xd5\x01g\x00\x00\x00\x00\x8d\xd5\x01h\x00\x00\x00\x00\x8e\xd5\x01i\x00\x00\x00\x00\x8f\xd5\x01j\x00\x00\x00\x00\x90\xd5\x01k\x00\x00\x00\x00\x91\xd5\x01l\x00\x00\x00\x00\x92\xd5\x01rn\x00\x00\x00\x93\xd5\x01n\x00\x00\x00\x00\x94\xd5\x01o\x00\x00\x00\x00\x95\xd5\x01p\x00\x00\x00\x00\x96\xd5\x01q\x00\x00\x00\x00\x97\xd5\x01r\x00\x00\x00\x00\x98\xd5\x01s\x00\x00\x00\x00\x99\xd5\x01t\x00\x00\x00\x00\x9a\xd5\x01u\x00\x00\x00\x00\x9b\xd5\x01v\x00\x00\x00\x00\x9c\xd5\x01w\x00\x00\x00\x00\x9d\xd5\x01x\x00\x00\x00\x00\x9e\xd5\x01y\x00\x00\x00\x00\x9f\xd5\x01z\x00\x00\x00\x00\xa0\xd5\x01A\x00\x00\x00\x00\xa1\xd5\x01B\x00\x00\x00\x00\xa2\xd5\x01C\x00\x00\x00\x00\xa3\xd5\x01D\x00\x00\x00\x00\xa4\xd5\x01E\x00\x00\x00\x00\xa5\xd5\x01F\x00\x00\x00\x00\xa6\xd5\x01G\x00\x00\x00\x00\xa7\xd5\x01H\x00\x00\x00\x00\xa8\xd5\x01l\x00\x00\x00\x00\xa9\xd5\x01J\x00\x00\x00\x00\xaa\xd5\x01K\x00\x00\x00\x00\xab\xd5\x01L\x00\x00\x00\x00\xac\xd5\x01M\x00\x00\x00\x00\xad\xd5\x01N\x00\x00\x00\x00\xae\xd5\x01O\x00\x00\x00\x00\xaf\xd5\x01P\x00\x00\x00\x00\xb0\xd5\x01Q\x00\x00\x00\x00\xb1\xd5\x01R\x00\x00\x00\x00\xb2\xd5\x01S\x00\x00\x00\x00\xb3\xd5\x01T\x00\x00\x00\x00\xb4\xd5\x01U\x00\x00\x00\x00\xb5\xd5\x01V\x00\x00\x00\x00\xb6\xd5\x01W\x00\x00\x00\x00\xb7\xd5\x01X\x00\x00\x00\x00\xb8\xd5\x01Y\x00\x00\x00\x00\xb9\xd5\x01Z\x00\x00\x00\x00\xba\xd5\x01a\x00\x00\x00\x00\xbb\xd5\x01b\x00\x00\x00\x00\xbc\xd5\x01c\x00\x00\x00\x00\xbd\xd5\x01d\x00\x00\x00\x00\xbe\xd5\x01e\x00\x00\x00\x00\xbf\xd5\x01f\x00\x00\x00\x00\xc0\xd5\x01g\x00\x00\x00\x00\xc1\xd5\x01h\x00\x00\x00\x00\xc2\xd5\x01i\x00\x00\x00\x00\xc3\xd5\x01j\x00\x00\x00\x00\xc4\xd5\x01k\x00\x00\x00\x00\xc5\xd5\x01l\x00\x00\x00\x00\xc6\xd5\x01rn\x00\x00\x00\xc7\xd5\x01n\x00\x00\x00\x00\xc8\xd5\x01o\x00\x00\x00\x00\xc9\xd5\x01p\x00\x00\x00\x00\xca\xd5\x01q\x00\x00\x00\x00\xcb\xd5\x01r\x00\x00\x00\x00\xcc\xd5\x01s\x00\x00\x00\x00\xcd\xd5\x01t\x00\x00\x00\x00\xce\xd5\x01u\x00\x00\x00\x00\xcf\xd5\x01v\x00\x00\x00\x00\xd0\xd5\x01w\x00\x00\x00\x00\xd1\xd5\x01x\x00\x00\x00\x00\xd2\xd5\x01y\x00\x00\x00\x00\xd3\xd5\x01z\x00\x00\x00\x00\xd4\xd5\x01A\x00\x00\x00\x00\xd5\xd5\x01B\x00\x00\x00\x00\xd6\xd5\x01C\x00\x00\x00\x00\xd7\xd5\x01D\x00\x00\x00\x00\xd8\xd5\x01E\x00\x00\x00\x00\xd9\xd5\x01F\x00\x00\x00\x00\xda\xd5\x01G\x00\x00\x00\x00\xdb\xd5\x01H\x00\x00\x00\x00\xdc\xd5\x01l\x00\x00\x00\x00\xdd\xd5\x01J\x00\x00\x00\x00\xde\xd5\x01K\x00\x00\x00\x00\xdf\xd5\x01L\x00\x00\x00\x00\xe0\xd5\x01M\x00\x00\x00\x00\xe1\xd5\x01N\x00\x00\x00\x00\xe2\xd5\x01O\x00\x00\x00\x00\xe3\xd5\x01P\x00\x00\x00\x00\xe4\xd5\x01Q\x00\x00\x00\x00\xe5\xd5\x01R\x00\x00\x00\x00\xe6\xd5\x01S\x00\x00\x00\x00\xe7\xd5\x01T\x00\x00\x00\x00\xe8\xd5\x01U\x00\x00\x00\x00\xe9\xd5\x01V\x00\x00\x00\x00\xea\xd5\x01W\x00\x00\x00\x00\xeb\xd5\x01X\x00\x00\x00\x00\xec\xd5\x01Y\x00\x00\x00\x00\xed\xd5\x01Z\x00\x00\x00\x00\xee\xd5\x01a\x00\x00\x00\x00\xef\xd5\x01b\x00\x00\x00\x00\xf0\xd5\x01c\x00\x00\x00\x00\xf1\xd5\x01d\x00\x00\x00\x00\xf2\xd5\x01e\x00\x00\x00\x00\xf3\xd5\x01f\x00\x00\x00\x00\xf4\xd5\x01g\x00\x00\x00\x00\xf5\xd5\x01h\x00\x00\x00\x00\xf6\xd5\x01i\x00\x00\x00\x00\xf7\xd5\x01j\x00\x00\x00\x00\xf8\xd5\x01k\x00\x00\x00\x00\xf9\xd5\x01l\x00\x00\x00\x00\xfa\xd5\x01rn\x00\x00\x00\xfb\xd5\x01n\x00\x00\x00\x00\xfc\xd5\x01o\x00\x00\x00\x00\xfd\xd5\x01p\x00\x00\x00\x00\xfe\xd5\x01q\x00\x00\x00\x00\xff\xd5\x01r\x00\x00\x00\x00\x00\xd6\x01s\x00\x00\x00\x00\x01\xd6\x01t\x00\x00\x00\x00\x02\xd6\x01u\x00\x00\x00\x00\x03\xd6\x01v\x00\x00\x00\x00\x04\xd6\x01w\x00\x00\x00\x00\x05\xd6\x01x\x00\x00\x00\x00\x06\xd6\x01y\x00\x00\x00\x00\x07\xd6\x01z\x00\x00\x00\x00\x08\xd6\x01A\x00\x00\x00\x00\t\xd6\x01B\x00\x00\x00\x00\n\xd6\x01C\x00\x00\x00\x00\x0b\xd6\x01D\x00\x00\x00\x00\x0c\xd6\x01E\x00\x00\x00\x00\r\xd6\x01F\x00\x00\x00\x00\x0e\xd6\x01G\x00\x00\x00\x00\x0f\xd6\x01H\x00\x00\x00\x00\x10\xd6\x01l\x00\x00\x00\x00\x11\xd6\x01J\x00\x00\x00\x00\x12\xd6\x01K\x00\x00\x00\x00\x13\xd6\x01L\x00\x00\x00\x00\x14\xd6\x01M\x00\x00\x00\x00\x15\xd6\x01N\x00\x00\x00\x00\x16\xd6\x01O\x00\x00\x00\x00\x17\xd6\x01P\x00\x00\x00\x00\x18\xd6\x01Q\x00\x00\x00\x00\x19\xd6\x01R\x00\x00\x00\x00\x1a\xd6\x01S\x00\x00\x00\x00\x1b\xd6\x01T\x00\x00\x00\x00\x1c\xd6\x01U\x00\x00\x00\x00\x1d\xd6\x01V\x00\x00\x00\x00\x1e\xd6\x01W\x00\x00\x00\x00\x1f\xd6\x01X\x00\x00\x00\x00 \xd6\x01Y\x00\x00\x00\x00!\xd6\x01Z\x00\x00\x00\x00\"\xd6\x01a\x00\x00\x00\x00#\xd6\x01b\x00\x00\x00\x00$\xd6\x01c\x00\x00\x00\x00%\xd6\x01d\x00\x00\x00\x00&\xd6\x01e\x00\x00\x00\x00\'\xd6\x01f\x00\x00\x00\x00(\xd6\x01g\x00\x00\x00\x00)\xd6\x01h\x00\x00\x00\x00*\xd6\x01i\x00\x00\x00\x00+\xd6\x01j\x00\x00\x00\x00,\xd6\x01k\x00\x00\x00\x00-\xd6\x01l\x00\x00\x00\x00.\xd6\x01rn\x00\x00\x00/\xd6\x01n\x00\x00\x00\x000\xd6\x01o\x00\x00\x00\x001\xd6\x01p\x00\x00\x00\x002\xd6\x01q\x00\x00\x00\x003\xd6\x01r\x00\x00\x00\x004\xd6\x01s\x00\x00\x00\x005\xd6\x01t\x00\x00\x00\x006\xd6\x01u\x00\x00\x00\x007\xd6\x01v\x00\x00\x00\x008\xd6\x01w\x00\x00\x00\x009\xd6\x01x\x00\x00\x00\x00:\xd6\x01y\x00\x00\x00\x00;\xd6\x01z\x00\x00\x00\x00<\xd6\x01A\x00\x00\x00\x00=\xd6\x01B\x00\x00\x00\x00>\xd6\x01C\x00\x00\x00\x00?\xd6\x01D\x00\x00\x00\x00@\xd6\x01E\x00\x00\x00\x00A\xd6\x01F\x00\x00\x00\x00B\xd6\x01G\x00\x00\x00\x00C\xd6\x01H\x00\x00\x00\x00D\xd6\x01l\x00\x00\x00\x00E\xd6\x01J\x00\x00\x00\x00F\xd6\x01K\x00\x00\x00\x00G\xd6\x01L\x00\x00\x00\x00H\xd6\x01M\x00\x00\x00\x00I\xd6\x01N\x00\x00\x00\x00J\xd6\x01O\x00\x00\x00\x00K\xd6\x01P\x00\x00\x00\x00L\xd6\x01Q\x00\x00\x00\x00M\xd6\x01R\x00\x00\x00\x00N\xd6\x01S\x00\x00\x00\x00O\xd6\x01T\x00\x00\x00\x00P\xd6\x01U\x00\x00\x00\x00Q\xd6\x01V\x00\x00\x00\x00R\xd6\x01W\x00\x00\x00\x00S\xd6\x01X\x00\x00\x00\x00T\xd6\x01Y\x00\x00\x00\x00U\xd6\x01Z\x00\x00\x00\x00V\xd6\x01a\x00\x00\x00\x00W\xd6\x01b\x00\x00\x00\x00X\xd6\x01c\x00\x00\x00\x00Y\xd6\x01d\x00\x00\x00\x00Z\xd6\x01e\x00\x00\x00\x00[\xd6\x01f\x00\x00\x00\x00\\\xd6\x01g\x00\x00\x00\x00]\xd6\x01h\x00\x00\x00\x00^\xd6\x01i\x00\x00\x00\x00_\xd6\x01j\x00\x00\x00\x00`\xd6\x01k\x00\x00\x00\x00a\xd6\x01l\x00\x00\x00\x00b\xd6\x01rn\x00\x00\x00c\xd6\x01n\x00\x00\x00\x00d\xd6\x01o\x00\x00\x00\x00e\xd6\x01p\x00\x00\x00\x00f\xd6\x01q\x00\x00\x00\x00g\xd6\x01r\x00\x00\x00\x00h\xd6\x01s\x00\x00\x00\x00i\xd6\x01t\x00\x00\x00\x00j\xd6\x01u\x00\x00\x00\x00k\xd6\x01v\x00\x00\x00\x00l\xd6\x01w\x00\x00\x00\x00m\xd6\x01x\x00\x00\x00\x00n\xd6\x01y\x00\x00\x00\x00o\xd6\x01z\x00\x00\x00\x00p\xd6\x01A\x00\x00\x00\x00q\xd6\x01B\x00\x00\x00\x00r\xd6\x01C\x00\x00\x00\x00s\xd6\x01D\x00\x00\x00\x00t\xd6\x01E\x00\x00\x00\x00u\xd6\x01F\x00\x00\x00\x00v\xd6\x01G\x00\x00\x00\x00w\xd6\x01H\x00\x00\x00\x00x\xd6\x01l\x00\x00\x00\x00y\xd6\x01J\x00\x00\x00\x00z\xd6\x01K\x00\x00\x00\x00{\xd6\x01L\x00\x00\x00\x00|\xd6\x01M\x00\x00\x00\x00}\xd6\x01N\x00\x00\x00\x00~\xd6\x01O\x00\x00\x00\x00\x7f\xd6\x01P\x00\x00\x00\x00\x80\xd6\x01Q\x00\x00\x00\x00\x81\xd6\x01R\x00\x00\x00\x00\x82\xd6\x01S\x00\x00\x00\x00\x83\xd6\x01T\x00\x00\x00\x00\x84\xd6\x01U\x00\x00\x00\x00\x85\xd6\x01V\x00\x00\x00\x00\x86\xd6\x01W\x00\x00\x00\x00\x87\xd6\x01X\x00\x00\x00\x00\x88\xd6\x01Y\x00\x00\x00\x00\x89\xd6\x01Z\x00\x00\x00\x00\x8a\xd6\x01a\x00\x00\x00\x00\x8b\xd6\x01b\x00\x00\x00\x00\x8c\xd6\x01c\x00\x00\x00\x00\x8d\xd6\x01d\x00\x00\x00\x00\x8e\xd6\x01e\x00\x00\x00\x00\x8f\xd6\x01f\x00\x00\x00\x00\x90\xd6\x01g\x00\x00\x00\x00\x91\xd6\x01h\x00\x00\x00\x00\x92\xd6\x01i\x00\x00\x00\x00\x93\xd6\x01j\x00\x00\x00\x00\x94\xd6\x01k\x00\x00\x00\x00\x95\xd6\x01l\x00\x00\x00\x00\x96\xd6\x01rn\x00\x00\x00\x97\xd6\x01n\x00\x00\x00\x00\x98\xd6\x01o\x00\x00\x00\x00\x99\xd6\x01p\x00\x00\x00\x00\x9a\xd6\x01q\x00\x00\x00\x00\x9b\xd6\x01r\x00\x00\x00\x00\x9c\xd6\x01s\x00\x00\x00\x00\x9d\xd6\x01t\x00\x00\x00\x00\x9e\xd6\x01u\x00\x00\x00\x00\x9f\xd6\x01v\x00\x00\x00\x00\xa0\xd6\x01w\x00\x00\x00\x00\xa1\xd6\x01x\x00\x00\x00\x00\xa2\xd6\x01y\x00\x00\x00\x00\xa3\xd6\x01z\x00\x00\x00\x00\xa4\xd6\x01i\x00\x00\x00\x00\xa8\xd6\x01A\x00\x00\x00\x00\xa9\xd6\x01B\x00\x00\x00\x00\xac\xd6\x01E\x00\x00\x00\x00\xad\xd6\x01Z\x00\x00\x00\x00\xae\xd6\x01H\x00\x00\x00\x00\xb0\xd6\x01l\x00\x00\x00\x00\xb1\xd6\x01K\x00\x00\x00\x00\xb3\xd6\x01M\x00\x00\x00\x00\xb4\xd6\x01N\x00\x00\x00\x00\xb6\xd6\x01O\x00\x00\x00\x00\xb8\xd6\x01P\x00\x00\x00\x00\xbb\xd6\x01T\x00\x00\x00\x00\xbc\xd6\x01Y\x00\x00\x00\x00\xbe\xd6\x01X\x00\x00\x00\x00\xc2\xd6\x01a\x00\x00\x00\x00\xc4\xd6\x01y\x00\x00\x00\x00\xca\xd6\x01i\x00\x00\x00\x00\xce\xd6\x01v\x00\x00\x00\x00\xd0\xd6\x01o\x00\x00\x00\x00\xd2\xd6\x01p\x00\x00\x00\x00\xd4\xd6\x01o\x00\x00\x00\x00\xd6\xd6\x01u\x00\x00\x00\x00\xe0\xd6\x01p\x00\x00\x00\x00\xe2\xd6\x01A\x00\x00\x00\x00\xe3\xd6\x01B\x00\x00\x00\x00\xe6\xd6\x01E\x00\x00\x00\x00\xe7\xd6\x01Z\x00\x00\x00\x00\xe8\xd6\x01H\x00\x00\x00\x00\xea\xd6\x01l\x00\x00\x00\x00\xeb\xd6\x01K\x00\x00\x00\x00\xed\xd6\x01M\x00\x00\x00\x00\xee\xd6\x01N\x00\x00\x00\x00\xf0\xd6\x01O\x00\x00\x00\x00\xf2\xd6\x01P\x00\x00\x00\x00\xf5\xd6\x01T\x00\x00\x00\x00\xf6\xd6\x01Y\x00\x00\x00\x00\xf8\xd6\x01X\x00\x00\x00\x00\xfc\xd6\x01a\x00\x00\x00\x00\xfe\xd6\x01y\x00\x00\x00\x00\x04\xd7\x01i\x00\x00\x00\x00\x08\xd7\x01v\x00\x00\x00\x00\n\xd7\x01o\x00\x00\x00\x00\x0c\xd7\x01p\x00\x00\x00\x00\x0e\xd7\x01o\x00\x00\x00\x00\x10\xd7\x01u\x00\x00\x00\x00\x1a\xd7\x01p\x00\x00\x00\x00\x1c\xd7\x01A\x00\x00\x00\x00\x1d\xd7\x01B\x00\x00\x00\x00 \xd7\x01E\x00\x00\x00\x00!\xd7\x01Z\x00\x00\x00\x00\"\xd7\x01H\x00\x00\x00\x00$\xd7\x01l\x00\x00\x00\x00%\xd7\x01K\x00\x00\x00\x00\'\xd7\x01M\x00\x00\x00\x00(\xd7\x01N\x00\x00\x00\x00*\xd7\x01O\x00\x00\x00\x00,\xd7\x01P\x00\x00\x00\x00/\xd7\x01T\x00\x00\x00\x000\xd7\x01Y\x00\x00\x00\x002\xd7\x01X\x00\x00\x00\x006\xd7\x01a\x00\x00\x00\x008\xd7\x01y\x00\x00\x00\x00>\xd7\x01i\x00\x00\x00\x00B\xd7\x01v\x00\x00\x00\x00D\xd7\x01o\x00\x00\x00\x00F\xd7\x01p\x00\x00\x00\x00H\xd7\x01o\x00\x00\x00\x00J\xd7\x01u\x00\x00\x00\x00T\xd7\x01p\x00\x00\x00\x00V\xd7\x01A\x00\x00\x00\x00W\xd7\x01B\x00\x00\x00\x00Z\xd7\x01E\x00\x00\x00\x00[\xd7\x01Z\x00\x00\x00\x00\\\xd7\x01H\x00\x00\x00\x00^\xd7\x01l\x00\x00\x00\x00_\xd7\x01K\x00\x00\x00\x00a\xd7\x01M\x00\x00\x00\x00b\xd7\x01N\x00\x00\x00\x00d\xd7\x01O\x00\x00\x00\x00f\xd7\x01P\x00\x00\x00\x00i\xd7\x01T\x00\x00\x00\x00j\xd7\x01Y\x00\x00\x00\x00l\xd7\x01X\x00\x00\x00\x00p\xd7\x01a\x00\x00\x00\x00r\xd7\x01y\x00\x00\x00\x00x\xd7\x01i\x00\x00\x00\x00|\xd7\x01v\x00\x00\x00\x00~\xd7\x01o\x00\x00\x00\x00\x80\xd7\x01p\x00\x00\x00\x00\x82\xd7\x01o\x00\x00\x00\x00\x84\xd7\x01u\x00\x00\x00\x00\x8e\xd7\x01p\x00\x00\x00\x00\x90\xd7\x01A\x00\x00\x00\x00\x91\xd7\x01B\x00\x00\x00\x00\x94\xd7\x01E\x00\x00\x00\x00\x95\xd7\x01Z\x00\x00\x00\x00\x96\xd7\x01H\x00\x00\x00\x00\x98\xd7\x01l\x00\x00\x00\x00\x99\xd7\x01K\x00\x00\x00\x00\x9b\xd7\x01M\x00\x00\x00\x00\x9c\xd7\x01N\x00\x00\x00\x00\x9e\xd7\x01O\x00\x00\x00\x00\xa0\xd7\x01P\x00\x00\x00\x00\xa3\xd7\x01T\x00\x00\x00\x00\xa4\xd7\x01Y\x00\x00\x00\x00\xa6\xd7\x01X\x00\x00\x00\x00\xaa\xd7\x01a\x00\x00\x00\x00\xac\xd7\x01y\x00\x00\x00\x00\xb2\xd7\x01i\x00\x00\x00\x00\xb6\xd7\x01v\x00\x00\x00\x00\xb8\xd7\x01o\x00\x00\x00\x00\xba\xd7\x01p\x00\x00\x00\x00\xbc\xd7\x01o\x00\x00\x00\x00\xbe\xd7\x01u\x00\x00\x00\x00\xc8\xd7\x01p\x00\x00\x00\x00\xca\xd7\x01F\x00\x00\x00\x00\xce\xd7\x01O\x00\x00\x00\x00\xcf\xd7\x01l\x00\x00\x00\x00\xd0\xd7\x012\x00\x00\x00\x00\xd1\xd7\x013\x00\x00\x00\x00\xd2\xd7\x014\x00\x00\x00\x00\xd3\xd7\x015\x00\x00\x00\x00\xd4\xd7\x016\x00\x00\x00\x00\xd5\xd7\x017\x00\x00\x00\x00\xd6\xd7\x018\x00\x00\x00\x00\xd7\xd7\x019\x00\x00\x00\x00\xd8\xd7\x01O\x00\x00\x00\x00\xd9\xd7\x01l\x00\x00\x00\x00\xda\xd7\x012\x00\x00\x00\x00\xdb\xd7\x013\x00\x00\x00\x00\xdc\xd7\x014\x00\x00\x00\x00\xdd\xd7\x015\x00\x00\x00\x00\xde\xd7\x016\x00\x00\x00\x00\xdf\xd7\x017\x00\x00\x00\x00\xe0\xd7\x018\x00\x00\x00\x00\xe1\xd7\x019\x00\x00\x00\x00\xe2\xd7\x01O\x00\x00\x00\x00\xe3\xd7\x01l\x00\x00\x00\x00\xe4\xd7\x012\x00\x00\x00\x00\xe5\xd7\x013\x00\x00\x00\x00\xe6\xd7\x014\x00\x00\x00\x00\xe7\xd7\x015\x00\x00\x00\x00\xe8\xd7\x016\x00\x00\x00\x00\xe9\xd7\x017\x00\x00\x00\x00\xea\xd7\x018\x00\x00\x00\x00\xeb\xd7\x019\x00\x00\x00\x00\xec\xd7\x01O\x00\x00\x00\x00\xed\xd7\x01l\x00\x00\x00\x00\xee\xd7\x012\x00\x00\x00\x00\xef\xd7\x013\x00\x00\x00\x00\xf0\xd7\x014\x00\x00\x00\x00\xf1\xd7\x015\x00\x00\x00\x00\xf2\xd7\x016\x00\x00\x00\x00\xf3\xd7\x017\x00\x00\x00\x00\xf4\xd7\x018\x00\x00\x00\x00\xf5\xd7\x019\x00\x00\x00\x00\xf6\xd7\x01O\x00\x00\x00\x00\xf7\xd7\x01l\x00\x00\x00\x00\xf8\xd7\x012\x00\x00\x00\x00\xf9\xd7\x013\x00\x00\x00\x00\xfa\xd7\x014\x00\x00\x00\x00\xfb\xd7\x015\x00\x00\x00\x00\xfc\xd7\x016\x00\x00\x00\x00\xfd\xd7\x017\x00\x00\x00\x00\xfe\xd7\x018\x00\x00\x00\x00\xff\xd7\x019\x00\x00\x00\x00\xc7\xe8\x01l\x00\x00\x00\x00\xcb\xe8\x018\x00\x00\x00\x00\x00\xee\x01l\x00\x00\x00\x00$\xee\x01o\x00\x00\x00\x00d\xee\x01o\x00\x00\x00\x00\x80\xee\x01l\x00\x00\x00\x00\x84\xee\x01o\x00\x00\x00\x00\x00\xf1\x01O.\x00\x00\x00\x01\xf1\x01O,\x00\x00\x00\x02\xf1\x01l,\x00\x00\x00\x03\xf1\x012,\x00\x00\x00\x04\xf1\x013,\x00\x00\x00\x05\xf1\x014,\x00\x00\x00\x06\xf1\x015,\x00\x00\x00\x07\xf1\x016,\x00\x00\x00\x08\xf1\x017,\x00\x00\x00\t\xf1\x018,\x00\x00\x00\n\xf1\x019,\x00\x00\x00\x10\xf1\x01(A)\x00\x00\x11\xf1\x01(B)\x00\x00\x12\xf1\x01(C)\x00\x00\x13\xf1\x01(D)\x00\x00\x14\xf1\x01(E)\x00\x00\x15\xf1\x01(F)\x00\x00\x16\xf1\x01(G)\x00\x00\x17\xf1\x01(H)\x00\x00\x18\xf1\x01(l)\x00\x00\x19\xf1\x01(J)\x00\x00\x1a\xf1\x01(K)\x00\x00\x1b\xf1\x01(L)\x00\x00\x1c\xf1\x01(M)\x00\x00\x1d\xf1\x01(N)\x00\x00\x1e\xf1\x01(O)\x00\x00\x1f\xf1\x01(P)\x00\x00 \xf1\x01(Q)\x00\x00!\xf1\x01(R)\x00\x00\"\xf1\x01(S)\x00\x00#\xf1\x01(T)\x00\x00$\xf1\x01(U)\x00\x00%\xf1\x01(V)\x00\x00&\xf1\x01(W)\x00\x00\'\xf1\x01(X)\x00\x00(\xf1\x01(Y)\x00\x00)\xf1\x01(Z)\x00\x00*\xf1\x01(S)\x00\x00\x00\xf7\x01QE\x00\x00\x00\x07\xf7\x01AR\x00\x00\x00L\xf7\x01C\x00\x00\x00\x00\\\xf7\x01sss\x00\x00h\xf7\x01T\x00\x00\x00\x00k\xf7\x01MB\x00\x00\x00l\xf7\x01VB\x00\x00\x00\xb6\x13\x00\x00\xf2\r\x00\x00U\x0c\x00\x00\xb4\x0f\x00\x00T\x0f\x00\x00\xb1\x13\x00\x00\xb9\x0f\x00\x00\x14\x0b\x00\x00\x9b\x0c\x00\x00X\x0f\x00\x00W\r\x00\x00\xdf\r\x00\x00\xbf\r\x00\x00\xac\x05\x00\x00\x19\x0b\x00\x00H\x07\x00\x00`\x0c\x00\x00f\r\x00\x00m\x0f\x00\x00\xb9\r\x00\x00\xbb\x12\x00\x00\x00\x00\x00\x00<z\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00N4Luau10ParseErrorE\x00\xec\xbb\x00\x00(z\x00\x00\x0c\xbc")
	rt_store_string(MEMORY_LIST[0], 31312,"\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\n\t\x05\x04\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x01\x01\xfe\x82+eG\x15g@\x00\x00\x00\x00\x00\x008C\x00\x00\xfa\xfeB.v\xbf:;\x9e\xbc\x9a\xf7\x0c\xbd\xbd\xfd\xff\xff\xff\xff\xdf?<TUUUU\xc5?\x91+\x17\xcfUU\xa5?\x17\xd0\xa4g\x11\x11\x81?\x00\x00\x00\x00\x00\x00\xc8B\xef9\xfa\xfeB.\xe6?$\xc4\x82\xff\xbd\xbf\xce?\xb5\xf4\x0c\xd7\x08k\xac?\xccPF\xd2\xab\xb2\x83?\x84:N\x9b\xe0\xd7U?")
	rt_store_string(MEMORY_LIST[0], 31470,"\xf0?n\xbf\x88\x1aO;\x9b<53\xfb\xa9=\xf6\xef?]\xdc\xd8\x9c\x13`q\xbca\x80w>\x9a\xec\xef?\xd1f\x87\x10z^\x90\xbc\x85\x7fn\xe8\x15\xe3\xef?\x13\xf6g5R\xd2\x8c<t\x85\x15\xd3\xb0\xd9\xef?\xfa\x8e\xf9#\x80\xce\x8b\xbc\xde\xf6\xdd)k\xd0\xef?a\xc8\xe6aN\xf7`<\xc8\x9bu\x18E\xc7\xef?\x99\xd33[\xe4\xa3\x90<\x83\xf3\xc6\xca>\xbe\xef?m{\x83]\xa6\x9a\x97<\x0f\x89\xf9lX\xb5\xef?\xfc\xef\xfd\x92\x1a\xb5\x8e<\xf7Gr+\x92\xac\xef?\xd1\x9c/p=\xbe><\xa2\xd1\xd32\xec\xa3\xef?\x0bn\x90\x894\x03j\xbc\x1b\xd3\xfe\xaff\x9b\xef?\x0e\xbd/*RV\x95\xbcQ[\x12\xd0\x01\x93\xef?U\xeaN\x8c\xef\x80P\xbc\xcc1l\xc0\xbd\x8a\xef?\x16\xf4\xd5\xb9#\xc9\x91\xbc\xe0-\xa9\xae\x9a\x82\xef?\xafU\\\xe9\xe3\xd3\x80<Q\x8e\xa5\xc8\x98z\xef?H\x93\xa5\xea\x15\x1b\x80\xbc{Q}<\xb8r\xef?=2\xdeU\xf0\x1f\x8f\xbc\xea\x8d\x8c8\xf9j\xef?\xbfS\x13?\x8c\x89\x8b<u\xcbo\xeb[c\xef?&\xeb\x11v\x9c\xd9\x96\xbc\xd4\\\x04\x84\xe0[\xef?`/:>\xf7\xec\x9a<\xaa\xb9h1\x87T\xef?\x9d8\x86\xcb\x82\xe7\x8f\xbc\x1d\xd9\xfc\"PM\xef?\x8d\xc3\xa6DAo\x8a<\xd6\x8cb\x88;F\xef?}\x04\xe4\xb0\x05z\x80<\x96\xdc}\x91I?\xef?\x94\xa8\xa8\xe3\xfd\x8e\x96<8bunz8\xef?}Ht\xf2\x18^\x87<?\xa6\xb2O\xce1\xef?\xf2\xe7\x1f\x98+G\x80<\xdd|\xe2eE+\xef?^\x08q?{\xb8\x96\xbc\x81c\xf5\xe1\xdf$\xef?1\xab\tm\xe1\xf7\x82<\xe1\xde\x1f\xf5\x9d\x1e\xef?\xfa\xbfo\x1a\x9b!=\xbc\x90\xd9\xda\xd0\x7f\x18\xef?\xb4\n\x0cr\x827\x8b<\x0b\x03\xe4\xa6\x85\x12\xef?\x8f\xcb\xce\x89\x92\x14n<V/>\xa9\xaf\x0c\xef?\xb6\xab\xb0MuM\x83<\x15\xb71\n\xfe\x06\xef?Lt\xac\xe2\x01B\x86<1\xd8L\xfcp\x01\xef?J\xf8\xd3]9\xdd\x8f<\xff\x16d\xb2\x08\xfc\xee?\x04[\x8e;\x80\xa3\x86\xbc\xf1\x9f\x92_\xc5\xf6\xee?hPK\xcc\xedJ\x92\xbc\xcb\xa9:7\xa7\xf1\xee?\x8e-Q\x1b\xf8\x07\x99\xbcf\xd8\x05m\xae\xec\xee?\xd26\x94>\xe8\xd1q\xbc\xf7\x9f\xe54\xdb\xe7\xee?\x15\x1b\xce\xb3\x19\x19\x99\xbc\xe5\xa8\x13\xc3-\xe3\xee?mL*\xa7H\x9f\x85<\"4\x12L\xa6\xde\xee?\x8ai(z`\x12\x93\xbc\x1c\x80\xac\x04E\xda\xee?[\x89\x17H\x8f\xa7X\xbc*.\xf7!\n\xd6\xee?\x1b\x9aIg\x9b,|\xbc\x97\xa8P\xd9\xf5\xd1\xee?\x11\xac\xc2`\xedcC<-\x89a`\x08\xce\xee?\xefd\x06;\tf\x96<W\x00\x1d\xedA\xca\xee?y\x03\xa1\xda\xe1\xccn<\xd0<\xc1\xb5\xa2\xc6\xee?0\x12\x0f?\x8e\xff\x93<\xde\xd3\xd7\xf0*\xc3\xee?\xb0\xafz\xbb\xce\x90v<\'*6\xd5\xda\xbf\xee?w\xe0T\xeb\xbd\x1d\x93<\r\xdd\xfd\x99\xb2\xbc\xee?\x8e\xa3q\x004\x94\x8f\xbc\xa7,\x9dv\xb2\xb9\xee?I\xa3\x93\xdc\xcc\xde\x87\xbcBf\xcf\xa2\xda\xb6\xee?_8\x0f\xbd\xc6\xdex\xbc\x82O\x9dV+\xb4\xee?\xf6\\{\xecF\x12\x86\xbc\x0f\x92]\xca\xa4\xb1\xee?\x8e\xd7\xfd\x18\x055\x93<\xda\'\xb56G\xaf\xee?\x05\x9b\x8a/\xb7\x98{<\xfd\xc7\x97\xd4\x12\xad\xee?\tT\x1c\xe2\xe1c\x90<)TH\xdd\x07\xab\xee?\xea\xc6\x19P\x85\xc74<\xb7FY\x8a&\xa9\xee?5\xc0d+\xe62\x94<H!\xad\x15o\xa7\xee?\x9fv\x99aJ\xe4\x8c\xbc\t\xdcv\xb9\xe1\xa5\xee?\xa8M\xef;\xc53\x8c\xbc\x85U:\xb0~\xa4\xee?\xae\xe9+\x89xS\x84\xbc \xc3\xcc4F\xa3\xee?XXVx\xdd\xce\x93\xbc%\"U\x828\xa2\xee?d\x19~\x80\xaa\x10W<s\xa9L\xd4U\xa1\xee?(\"^\xbf\xef\xb3\x93\xbc\xcd;\x7ff\x9e\xa0\xee?\x82\xb94\x87\xad\x12j\xbc\xbf\xda\x0bu\x12\xa0\xee?\xee\xa9m\xb8\xefgc\xbc/\x1ae<\xb2\x9f\xee?Q\x88\xe0T=\xdc\x80\xbc\x84\x94Q\xf9}\x9f\xee?\xcf>Z~d\x1fx\xbct_\xec\xe8u\x9f\xee?\xb0}\x8b\xc0J\xee\x86\xbct\x81\xa5H\x9a\x9f\xee?\x8a\xe6U\x1e2\x19\x86\xbc\xc9gBV\xeb\x9f\xee?\xd3\xd4\t^\xcb\x9c\x90<?]\xdeOi\xa0\xee?\x1d\xa5M\xb9\xdc2{\xbc\x87\x01\xebs\x14\xa1\xee?k\xc0gT\xfd\xec\x94<2\xc10\x01\xed\xa1\xee?Ul\xd6\xab\xe1\xebe<bN\xcf6\xf3\xa2\xee?B\xcf\xb3/\xc5\xa1\x88\xbc\x12\x1a>T\'\xa4\xee?47;\xf1\xb6i\x93\xbc\x13\xceL\x99\x89\xa5\xee?\x1e\xff\x19:\x84^\x80\xbc\xad\xc7#F\x1a\xa7\xee?nWr\xd8P\xd4\x94\xbc\xed\x92D\x9b\xd9\xa8\xee?\x00\x8a\x0e[g\xad\x90<\x99f\x8a\xd9\xc7\xaa\xee?\xb4\xea\xf0\xc1/\xb7\x8d<\xdb\xa0*B\xe5\xac\xee?\xff\xe7\xc5\x9c`\xb6e\xbc\x8cD\xb5\x162\xaf\xee?D_\xf3Y\x83\xf6{<6w\x15\x99\xae\xb1\xee?\x83=\x1e\xa7\x1f\t\x93\xbc\xc6\xff\x91\x0b[\xb4\xee?)\x1el\x8b\xb8\xa9]\xbc\xe5\xc5\xcd\xb07\xb7\xee?Y\xb9\x90|\xf9#l\xbc\x0fR\xc8\xcbD\xba\xee?\xaa\xf9\xf4\"CC\x92\xbcPN\xde\x9f\x82\xbd\xee?K\x8ef\xd7l\xca\x85\xbc\xba\x07\xcap\xf1\xc0\xee?\'\xce\x91+\xfc\xafq<\x90\xf0\xa3\x82\x91\xc4\xee?\xbbs\n\xe15\xd2m<##\xe3\x19c\xc8\xee?c\"b\"\x04\xc5\x87\xbce\xe5]{f\xcc\xee?\xd51\xe2\xe3\x86\x1c\x8b<3-J\xec\x9b\xd0\xee?\x15\xbb\xbc\xd3\xd1\xbb\x91\xbc]%>\xb2\x03\xd5\xee?\xd21\xee\x9c1\xcc\x90<X\xb30\x13\x9e\xd9\xee?\xb3Zsn\x84i\x84<\xbf\xfdyUk\xde\xee?\xb4\x9d\x8e\x97\xcd\xdf\x82\xbcz\xf3\xd3\xbfk\xe3\xee?\x873\xcb\x92w\x1a\x8c<\xad\xd3Z\x99\x9f\xe8\xee?\xfa\xd9\xd1J\x8f{\x90\xbcf\xb6\x8d)\x07\xee\xee?\xba\xae\xdcV\xd9\xc3U\xbc\xfb\x15O\xb8\xa2\xf3\xee?@\xf6\xa6=\x0e\xa4\x90\xbc:Y\xe5\x8dr\xf9\xee?4\x93\xad8\xf4\xd6h\xbcG^\xfb\xf2v\xff\xee?5\x8aXk\xe2\xee\x91\xbcJ\x06\xa10\xb0\x05\xef?\xcd\xdd_\n\xd7\xfft<\xd2\xc1K\x90\x1e\x0c\xef?\xac\x98\x92\xfa\xfb\xbd\x91\xbc\t\x1e\xd7[\xc2\x12\xef?\xb3\x0c\xaf0\xaens<\x9cR\x85\xdd\x9b\x19\xef?\x94\xfd\x9f\\2\xe3\x8e<z\xd0\xff_\xab \xef?\xacY\t\xd1\x8f\xe0\x84<K\xd1W.\xf1\'\xef?g\x1aN8\xaf\xcdc<\xb5\xe7\x06\x94m/\xef?h\x19\x92l,kg<i\x90\xef\xdc 7\xef?\xd2\xb5\xcc\x83\x18\x8a\x80\xbc\xfa\xc3]U\x0b?\xef?o\xfa\xff?]\xad\x8f\xbc|\x89\x07J-G\xef?I\xa9u8\xae\r\x90\xbc\xf2\x89\r\x08\x87O\xef?\xa7\x07=\xa6\x85\xa3t<\x87\xa4\xfb\xdc\x18X\xef?\x0f\"@ \x9e\x91\x82\xbc\x98\x83\xc9\x16\xe3`\xef?\xac\x92\xc1\xd5PZ\x8e<\x852\xdb\x03\xe6i\xef?Kk\x01\xacY:\x84<`\xb4\x01\xf3!s\xef?\x1f>\xb4\x07!\xd5\x82\xbc_\x9b{3\x97|\xef?\xc9\rG;\xb9*\x89\xbc)\xa1\xf5\x14F\x86\xef?\xd3\x88:`\x04\xb6t<\xf6?\x8b\xe7.\x90\xef?qr\x9dQ\xec\xc5\x83<\x83L\xc7\xfbQ\x9a\xef?\xf0\x91\xd3\x8f\x12\xf7\x8f\xbc\xda\x90\xa4\xa2\xaf\xa4\xef?}t#\xe2\x98\xae\x8d\xbc\xf1g\x8e-H\xaf\xef?\x08 \xaaA\xbc\xc3\x8e<\'Za\xee\x1b\xba\xef?2\xeb\xa9\xc3\x94+\x84<\x97\xbak7+\xc5\xef?\xee\x85\xd11\xa9d\x8a<@En[v\xd0\xef?\xed\xe3;\xe4\xba7\x8e\xbc\x14\xbe\x9c\xad\xfd\xdb\xef?\x9d\xcd\x91M;\x89w<\xd8\x90\x9e\x81\xc1\xe7\xef?\x89\xcc`A\xc1\x05S<\xf1q\x8f+\xc2\xf3\xef?\x00\x00 eG\x15\xf7?\x00\xa2\xef.\xfc\x05\xe7=9\x83+eG\x15\xe7\xbf\xbe\x04:\xdc\t\xc7\xde?\xfb/pdG\x15\xd7\xbfHL\x03Plw\xd2?\xbc\x92\xea(\xb3\xc7\xce\xbf.\xf9\x17\xe1%b\xca?\xfe\x82+eG\x15\xe7\xbf\xf7\x03:\xdc\t\xc7\xde??|+eG\x15\xd7\xbf\xe4[\xf0Plw\xd2?\xe5\x8fv\xdd\t\xc7\xce\xbf6\xe7\xc4\x1eva\xca?\x9b\xa7d\xbc?\x15\xc7\xbfJ\x1b\xf0T\xd1\x84\xc4?<8,\xa7\xe4\x89\xc2\xbff\xeeZ(/\xb3\xc0?\xf8\xac\xb1k($\xf7?\x00\xb0\xcd\xee_\t\xe1\xbf\xa1\xcc\xd2f\xf7\xe1\xf6?\x00\xd0v\xbd\x94\x84\xe0\xbf\x8a\xd40\x0e=\xa1\xf6?\x00\xf8\xe8\xaeC\x01\xe0\xbf\x85l\xd02\xeca\xf6?\x00@\x0b6\xc5\xfe\xde\xbf\xf8\x98\x11\x95\xfa#\xf6?\x00\xe0\xb7\x1a\xd9\xfd\xdd\xbfl\x02\xcf\xa4[\xe7\xf5?\x00\x90\xc7\x0c\xae\xff\xdc\xbf\xb8O!Z\x05\xac\xf5?\x00\xa0\xfd\x118\x04\xdc\xbf\x1en\x16\x0f\xedq\xf5?\x00\xe0:2g\x0b\xdb\xbf5\xf8\x0bY\t9\xf5?\x00\xb0-Z/\x15\xda\xbf\xdd\xada\xedO\x01\xf5?\x00`\xf8Z\x7f!\xd9\xbf\xd0{H\x8e\xb8\xca\xf4?\x00\x90q\xb0M0\xd8\xbf\xeeO3\xb49\x95\xf4?\x00\xe0\xa9\xf9\x89A\xd7\xbfi\xd5\xaf\xdf\xcb`\xf4?\x00\x90\x19\xb5+U\xd6\xbfS\xb9\xe4Nf-\xf4?\x00\x10\x9b\xa2#k\xd5\xbf\xa6\xd8\x1d\x11\x01\xfb\xf3?\x00\xa0_\x0fe\x83\xd4\xbf6X\x0c\xb7\x95\xc9\xf3?\x00\xa0\xf67\xe9\x9d\xd3\xbfJ\xfd\xb6J\x1c\x99\xf3?\x00`\x8dS\xa1\xba\xd2\xbf\xb5\x99\xe0\x0c\x8ei\xf3?\x00@\xca@\x83\xd9\xd1\xbf\xb2\xe7\x13\x82\xe4:\xf3?\x00\xe0@:\x85\xfa\xd0\xbf\xb1\xbd\x85\x19\x19\r\xf3?\x000\xe72\x9c\x1d\xd0\xbf\xd7q\xb2\xca%\xe0\xf2?\x00`\xfa\xa2}\x85\xce\xbf\x82\xcd\x13\xcf\x04\xb4\xf2?\x00\x80=c\xc8\xd3\xcc\xbfP\xcb|,\xb0\x88\xf2?\x00\xa0\x14L\x03&\xcb\xbf\xe5M\x94c\"^\xf2?\x00\xe0O/\x1c|\xc9\xbf\xb1\x15\x86=V4\xf2?\x00\x00\x80?\x02\xd6\xc7\xbf8\xaf>\xe3F\x0b\xf2?\x00\xe0\x05\x1a\xa73\xc6\xbf\xdd\xa3\xcd\xfd\xee\xe2\xf1?\x00\x00W\xe9\xf5\x94\xc4\xbf09\x0bXJ\xbb\xf1?\x00\xa0\xe0$\xe4\xf9\xc2\xbf\x00\"\x7f\x84S\x94\xf1?\x00\xc0\xfdZYb\xc1\xbf<\xd7\xd5\xc0\x06n\xf1?\x00\x80\xbdu\x9a\x9c\xbf\xbf\xc2\xe4\xb7G_H\xf1?\x00\xc0\xf9[W{\xbc\xbf\xd1\x85\x00\xadX#\xf1?\x00\x80\xf4\x0f\xc6`\xb9\xbf\'\"S\x0f\xf0\xfe\xf0?\x00\x00\xb6G\xe2L\xb6\xbf\x8f:\xd0w \xdb\xf0?\x00@\x01\xb2x?\xb3\xbf\xd9\x80Y\xd6\xe6\xb7\xf0?\x00\xc0B\x1a}8\xb0\xbf\x8d@{\xfe>\x95\xf0?\x00\x00\xb5\x08\x92o\xaa\xbf\x83;\xc5\xca%s\xf0?\x00\x00wO\x95z\xa4\xbf\\\x1b\r\xe4\x97Q\xf0?\x00\x00\x0c\xc5\xa8#\x9d\xbf\xa2\x8e \xc1\x910\xf0?\x00\x00x)&j\x91\xbf!~\xb3%\x10\x10\xf0?\x00\x00\xe8\xd8\xf8 w\xbfk\xa7\xca\xf9~\xc0\xef?\x00\x00P\xb1S\xfe\x86?\x84\xf1\xf6\xd3eD\xef?\x00\x80\x0f\xe1\xcc\x1c\xa1?\x7f\x10\x84\x9f\x07\xcc\xee?\x00\x80\x8b\x8c\xfcM\xac?\xe8Z\x97\x99:W\xee?\x00@W\x1e2\xaa\xb3?\xe6=\xbd\xf0\xd6\xe5\xed?\x00\x80\x8b\xd0\xa0\x18\xb9?\xb38\xff\x81\xb6w\xed?\x00@\x04\xda\xe9r\xbe?C\xe9Mr\xb5\x0c\xed?\x00`\x7fP\xd2\xdc\xc1?cu\x0e\xdc\xb2\xa4\xec?\x00\xa0\xde\x03\xabv\xc4?Q\xcb\xd6\xe8\x8e?\xec?\x00 \xe2wC\x07\xc7?L\x0c\x02O+\xdd\xeb?\x00@\xa9\x8b\xde\x8e\xc9?\xca\x15`\x00l}\xeb?\x00\xe0\xd2j\xb8\r\xcc?\x8f3.n6 \xeb?\x00\xe0\xce\xaf\n\x84\xce?9P)&p\xc5\xea?\x00\x80g\xb4\ny\xd0?\xdd1\'\xbc\x01m\xea?\x00\xc0\x01h\x05\xac\xd1?\x8b\xf1?\xbc\xd3\x16\xea?\x00\xe0\xfe\xd4\x11\xdb\xd2?\xad\xfegI\xd1\xc2\xe9?\x00\x80\xc5NF\x06\xd4?\x02\x99|\xf4\xe4p\xe9?\x00\xf0:\t\xbe-\xd5?\xf2\xbc\x829\xfb \xe9?\x00\xd0P \x90Q\xd6?\xf1Y\xf7\x87\x01\xd3\xe8?\x00\xf0\xea\xcd\xd2q\xd7?m\xf6\xb9\xeb\xe5\x86\xe8?\x00\x90}\x85\x9c\x8e\xd8?\x94\xb9X\xb6\x97<\xe8?\x00`\xe1U\x01\xa8\xd9?\"\x10\xc6\xff\x05\xf4\xe7?\x00\xd0\xd3n\x18\xbe\xda?\xca\x15\x14\x18\"\xad\xe7?\x00\xe0\xa0\xae\xf2\xd0\xdb?\x8c\xff\x9e\xf9\xdcg\xe7?\x00@\xbf=\xa4\xe0\xdc?\x8e\n\xb9\x12\x00 \xe6?\x05\xb6D\x06\xab\x04\x89<\xa64W\x04\x00`\xe6?\xa9\xf7b\xea\x9b\xffa<\xc5\xf2%\xc3\xff\x9f\xe6?\xba\x90<\xcb\xcf~\x82<\x04Z\xb98\x00\xe0\xe6?&\x93sV\x88\xff\x88<\xe3\x94\x99\xe0\xff\x1f\xe7?\xb1\x82_\'@\xfd\x8a<\x10\x0eY\x15\x00`\xe7?A\x83#\xb4u\xfdr\xbc\xd5[e\x12\x00\xa0\xe7?v+$|\xe6\x08x<\xa6\xe9Y2\x00\xe0\xe7?\xb7\"\xf6&\xe4\x08b\xbc\xd2\xb2\xb4\xed\xff\x1f\xe8?/\xc9\xa5\x1eF\x02\x84\xbc\xc3\xfc\xfa-\x00`\xe8?\x1f\x9a\xf2\xa2\xf4\xf7m<Pk\x8c\xf7\xff\x9f\xe8?\xfd\x95I\tS\x04\x8e\xbcf\x15g9\x00\xe0\xe8?E{\xc7\xbe\xf3\x04\x8a\xbcE\x17\xbf\xe2\xff\x1f\xe9?< \x0e@4\xfaw\xbc\xd1\x9f\\\xcc\xff_\xe9?]i\xa0\x05\x80\xffv\xbcgG\xba;\x00\xa0\xe9?\x03~\xec\xc4\xc4\xf8p<\xa5-\xb9\xe7\xff\xdf\xe9?\x02F\x8cG\xd9\x7f\x8e<\xaf\xfd.\xd7\xff\x1f\xea?~\xae\xcdMU\x0cj\xbc\x95\xff\x04\xde\xff_\xea?k\xb2\xe9\x8c\xa9}\x86<+\x8d^\xca\xff\x9f\xea?\xde\x13L\xb5\xc9\x84\x82\xbc\xea\x03\xad\xdd\xff\xdf\xea?<.`\xea\xc8\x12X<M=\r\xf1\xff\x1f\xeb?\x9cx\'\xad\xdd\xfa\x8e\xbcZ\x16!\xce\xff_\xeb?7\x12\xc6\x19\x17\xcbS<t\xe6P\xd9\xff\x9f\xeb?\x00\xce\x94A\xd9\xf7s<\xaf\xa8\x9c\x13\x00\xe0\xeb?\xc0\x9b]!\xc4\nu<\x99\xdfF[\x00 \xec?\xc9\xc1\xe9S\xa6\xeek<\xae\xf7\xb9@\x00`\xec?\xd6pJ\'\x9f\x07|\xbc\x8a\xfdUb\x00\xa0\xec?\x1fL\xe8v@\x0bz\xbc]\tL\xd9\xff\xdf\xec?\xd7\xb5\x9a\xf93\xf9\x88<\xcf\xd6u\xf9\xff\x1f\xed?\xbe\xe1_f\x08,X\xbc\x93\x1cV\xa2\xff_\xed?\xf3\x95\xd2\x9b(\x04{\xbc\x0c\x8b\"\x9d\xff\x9f\xed?6\xa2\x0f4Q\x02\x87<\x16~\xbce\x00\xe0\xed?\x0c\xd8\xa4\x16\x1e\x01u\xbc\x91G\xf6\x02\x00 \xee?\xe0b\xef\t/\x80\x89<\xd8\xa6\xd7W\x00`\xee?\xfa\xf7\x0cXu\x0b~\xbc\x0c\xc0\xed\'\x00\xa0\xee?\x11\x98E\t\x83\x84\x8c\xbc|\xcb\xf5l\x00\xe0\xee?\xf4v\x15\x95\'\x80\x8f\xbc\xcc}+x\x00 \xef?\x8fStr\xd9\x81\x8f\xbc\nE\x0c&\x00`\xef?\xdc\xff\'\'\x00q@\xbc3\xd5\x8c\xe8\xff\x9f\xef?\xb0\xa8\xfd\xe1\xdc\x1bX\xbc\x89\x86\x0f\xd5\xff\xdf\xef?n\x8e\x91\xcb\x1a\xf9\x87<g#)\x04\x00 \xf0?\x81F2e\xf3\x7f\x9b<h\xd6\xe3\xe3\xff_\xf0?{\x95\xae\xdd\x08\xfa\x86<W\xa7\x85\n\x00\xa0\xf0?\x91\xfb\xd3\x80\xde\xe2W\xbc\xcc?_\x1a\x00\xe0\xf0?\x14\xf0\xc5\x053\x82\x91\xbc\xf5\xba\xaf\xf8\xff\x1f\xf1?\xc2\xba\x80f\xbb\xfa\x8b\xbc\xad\x91M\xe5\xff_\xf1?\xef\xe77\x17\x12\x7f\x9d\xbc\xe16\xac\x11\x00\xa0\xf1?\xff\xf5\x16\x05\n\x00\x9c<HB\xc8\x19\x00\xe0\xf1?\xa0]\xda\xe4\xfb\x82\x90\xbcn^\xfe\x0f\x00 \xf2?C\xfb\x9cL\xd0\xfd\x88\xbc\x91\xd8\x9f&\x00`\xf2?\x82\xd1\x94y*\xfe\x8c<\xda\xe6\xa6)\x00\xa0\xf2?\xc5\x8b^qs\x02p\xbc9>)\xe0\xff\xdf\xf2?\xf9\xa6\xb2\xda9|\x9b<\x82\xf0\xdc\xf7\xff\x1f\xf3?TR\xdcn3\xf1}<`\x8bZ\xf0\xff_\xf3?\xeb1\xcdLV\x03\x9e\xbc\xcc\xae\x0e.\x00\xa0\xf3?w\xa4\xd3K\xe7\xf0u<6\xb2;\x04\x00\xe0\xf3?3\x88\x9d\x14\xcb}\x9c<\xff\x87\xd1\x02\x00 \xf4?(=-\xcf\xaf\x08~<\xb1|8\r\x00`\xf4?\xa6\x99e\x857\x08\x82<\x89\x9fV\x04\x00\xa0\xf4?\xd2\xbcO\x90\\\xfa\x89\xbc\xf3C5\x04\x00\xe0\xf4?)S\x17\xed%\x11x\xbc\x0f\x7f\x02\xcc\xff\x1f\xf5?\xdcTw\x84\xd8\x83\x98<o\xb3\x87\xfd\xff_\xf5?\x07(\xd01\xe7\t\x87\xbc\xba\xf7\x1d\xf2\xff\x9f\xf5?\x02{rh\x9f\xf7\x87<\x814\xfc\xeb\xff\xdf\xf5?>\xe90.\x90\x80\x91\xbc\x008\xfa\xfeB.\xe6?0g\xc7\x93W\xf3.=\x01\x00\x00\x00\x00\x00\xe0\xbf[0QUUU\xd5?\x90E\xeb\xff\xff\xff\xcf\xbf\x11\x01\xf1$\xb3\x99\xc9?\x9f\xc8\x06\xe5uU\xc5\xbf\x00\x00\x00\x00\x00\x00\xe0\xbfwUUUUU\xd5?\xcb\xfd\xff\xff\xff\xff\xcf\xbf\x0c\xdd\x95\x99\x99\x99\xc9?\xa7EgUUU\xc5\xbf0\xdeD\xa3$I\xc2?e=B\xa4\xff\xff\xbf\xbf\xca\xd6*(\x84q\xbc?\xffh\xb0C\xeb\x99\xb9\xbf\x85\xd0\xaf\xf7\x82\x81\xb7?\xcdE\xd1u\x13R\xb5\xbf\x9f\xde\xe0\xc3\xf04\xf7?\x00\x90\xe6y\x7f\xcc\xd7\xbf\x1f\xe9,jx\x13\xf7?\x00\x00\r\xc2\xeeo\xd7\xbf\xa0\xb5\xfa\x08`\xf2\xf6?\x00\xe0Q\x13\xe3\x13\xd7\xbf}\x8c\x13\x1f\xa6\xd1\xf6?\x00x(8[\xb8\xd6\xbf\xd1\xb4\xc5\x0bI\xb1\xf6?\x00x\x80\x90U]\xd6\xbf\xba\x0c/3G\x91\xf6?\x00\x00\x18v\xd0\x02\xd6\xbf#B\"\x18\x9fq\xf6?\x00\x90\x90\x86\xca\xa8\xd5\xbf\xd9\x1e\xa5\x99OR\xf6?\x00P\x03VCO\xd5\xbf\xc4$\x8f\xaaV3\xf6?\x00@k\xc37\xf6\xd4\xbf\x14\xdc\x9dk\xb3\x14\xf6?\x00P\xa8\xfd\xa7\x9d\xd4\xbfL\\\xc6Rd\xf6\xf5?\x00\xa8\x899\x92E\xd4\xbfO,\x91\xb5g\xd8\xf5?\x00\xb8\xb09\xf4\xed\xd3\xbf\xde\x90[\xcb\xbc\xba\xf5?\x00p\x8fD\xce\x96\xd3\xbfx\x1a\xd9\xf2a\x9d\xf5?\x00\xa0\xbd\x17\x1e@\xd3\xbf\x87VF\x12V\x80\xf5?\x00\x80F\xef\xe2\xe9\xd2\xbf\xd3k\xe7\xce\x97c\xf5?\x00\xe008\x1b\x94\xd2\xbf\x93\x7f\xa7\xe2%G\xf5?\x00\x88\xda\x8c\xc5>\xd2\xbf\x83E\x06B\xff*\xf5?\x00\x90\')\xe1\xe9\xd1\xbf\xdf\xbd\xb2\xdb\"\x0f\xf5?\x00\xf8H+m\x95\xd1\xbf\xd7\xde4G\x8f\xf3\xf4?\x00\xf8\xb9\x9agA\xd1\xbf@(\xde\xcfC\xd8\xf4?\x00\x98\xef\x94\xd0\xed\xd0\xbf\xc8\xa3x\xc0>\xbd\xf4?\x00\x10\xdb\x18\xa5\x9a\xd0\xbf\x8a%\xe0\xc3\x7f\xa2\xf4?\x00\xb8cR\xe6G\xd0\xbf4\x84\xd4$\x05\x88\xf4?\x00\xf0\x86E\"\xeb\xcf\xbf\x0b-\x19\x1b\xcem\xf4?\x00\xb0\x17uJG\xcf\xbfT\x189\xd3\xd9S\xf4?\x000\x10=D\xa4\xce\xbfZ\x84\xb4D\':\xf4?\x00\xb0\xe9D\r\x02\xce\xbf\xfb\xf8\x15A\xb5 \xf4?\x00\xf0w)\xa2`\xcd\xbf\xb1\xf4>\xda\x82\x07\xf4?\x00\x90\x95\x04\x01\xc0\xcc\xbf\x8f\xfeW]\x8f\xee\xf3?\x00\x10\x89V) \xcc\xbf\xe9L\x0b\xa0\xd9\xd5\xf3?\x00\x10\x81\x8d\x17\x81\xcb\xbf+\xc1\x10\xc0`\xbd\xf3?\x00\xd0\xd3\xcc\xc9\xe2\xca\xbf\xb8\xdau+$\xa5\xf3?\x00\x90\x12.@E\xca\xbf\x02\xd0\x9f\xcd\"\x8d\xf3?\x00\xf0\x1dhw\xa8\xc9\xbf\x1cz\x84\xc5[u\xf3?\x000Him\x0c\xc9\xbf\xe26\xadI\xce]\xf3?\x00\xc0E\xa6 q\xc8\xbf@\xd4M\x98yF\xf3?\x000\x14\xb4\x8f\xd6\xc7\xbf$\xcb\xff\xce\\/\xf3?\x00pb<\xb8<\xc7\xbfI\r\xa1uw\x18\xf3?\x00`7\x9b\x9a\xa3\xc6\xbf\x909>7\xc8\x01\xf3?\x00\xa0\xb7T1\x0b\xc6\xbfA\xf8\x95\xbbN\xeb\xf2?\x000$v}s\xc5\xbf\xd1\xa9\x19\x02\n\xd5\xf2?\x000\xc2\x8f{\xdc\xc4\xbf*\xfd\xb7\xa8\xf9\xbe\xf2?\x00\x00\xd2Q,F\xc4\xbf\xab\x1b\x0cz\x1c\xa9\xf2?\x00\x00\x83\xbc\x8a\xb0\xc3\xbf0\xb5\x14`r\x93\xf2?\x00\x00Ik\x99\x1b\xc3\xbf\xf5\xa1WW\xfa}\xf2?\x00@\xa4\x90T\x87\xc2\xbf\xbf;\x1d\x9b\xb3h\xf2?\x00\xa0y\xf8\xb9\xf3\xc1\xbf\xbd\xf5\x8f\x83\x9dS\xf2?\x00\xa0,%\xc8`\xc1\xbf;\x08\xc9\xaa\xb7>\xf2?\x00 \xf7W\x7f\xce\xc0\xbf\xb6@\xa9+\x01*\xf2?\x00\xa0\xfeI\xdc<\xc0\xbf2A\xcc\x96y\x15\xf2?\x00\x80K\xbc\xbdW\xbf\xbf\x9b\xfc\xd2\x1d \x01\xf2?\x00@@\x96\x087\xbe\xbf\x0bHMI\xf4\xec\xf1?\x00@\xf9>\x98\x17\xbd\xbfie\x8fR\xf5\xd8\xf1?\x00\xa0\xd8Ng\xf9\xbb\xbf|~W\x11#\xc5\xf1?\x00`/ y\xdc\xba\xbf\xe9&\xcbt|\xb1\xf1?\x00\x80(\xe7\xc3\xc0\xb9\xbf\xb6\x1a,\x0c\x01\x9e\xf1?\x00\xc0r\xb3F\xa6\xb8\xbf\xbdp\xb6{\xb0\x8a\xf1?\x00\x00\xac\xb3\x01\x8d\xb7\xbf\xb6\xbc\xef%\x8aw\xf1?\x00\x008E\xf1t\xb6\xbf\xda1L5\x8dd\xf1?\x00\x80\x87m\x0e^\xb5\xbf\xdd_\'\x90\xb9Q\xf1?\x00\xe0\xa1\xde\\H\xb4\xbfL\xd22\xa4\x0e?\xf1?\x00\xa0jM\xd93\xb3\xbf\xda\xf9\x10r\x8b,\xf1?\x00`\xc5\xf8y \xb2\xbf1\xb5\xec(0\x1a\xf1?\x00 b\x98F\x0e\xb1\xbf\xaf4\x84\xda\xfb\x07\xf1?\x00\x00\xd2jl\xfa\xaf\xbf\xb3kN\x0f\xee\xf5\xf0?\x00@wJ\x8d\xda\xad\xbf\xce\x9f*]\x06\xe4\xf0?\x00\x00\x85\xe4\xec\xbc\xab\xbf!\xa5,cD\xd2\xf0?\x00\xc0\x12@\x89\xa1\xa9\xbf\x1a\x98\xe2|\xa7\xc0\xf0?\x00\xc0\x023X\x88\xa7\xbf\xd16\xc6\x83/\xaf\xf0?\x00\x80\xd6g^q\xa5\xbf9\x13\xa0\x98\xdb\x9d\xf0?\x00\x80eI\x8a\\\xa3\xbf\xdf\xe7R\xaf\xab\x8c\xf0?\x00@\x15d\xe3I\xa1\xbf\xfb(N/\x9f{\xf0?\x00\x80\xeb\x82\xc0r\x9e\xbf\x19\x8f5\x8c\xb5j\xf0?\x00\x80RR\xf1U\x9a\xbf,\xf9\xec\xa5\xeeY\xf0?\x00\x80\x81\xcfb=\x96\xbf\x90,\xd1\xcdII\xf0?\x00\x00\xaa\x8c\xfb(\x92\xbf\xa9\xad\xf0\xc6\xc68\xf0?\x00\x00\xf9 {1\x8c\xbf\xa92y\x13e(\xf0?\x00\x00\xaa]5\x19\x84\xbfHs\xea\'$\x18\xf0?\x00\x00\xec\xc2\x03\x12x\xbf\x95\xb1\x14\x06\x04\x08\xf0?\x00\x00$y\t\x04`\xbf\x1a\xfa&\xf7\x1f\xe0\xef?\x00\x00\x90\x84\xf3\xefo?t\xeaa\xc2\x1c\xa1\xef?\x00\x00=5A\xdc\x87?.\x99\x81\xb0\x10c\xef?\x00\x80\xc2\xc4\xa3\xce\x93?\xcd\xad\xee<\xf6%\xef?\x00\x00\x89\x14\xc1\x9f\x9b?\xe7\x13\x91\x03\xc8\xe9\xee?\x00\x00\x11\xce\xd8\xb0\xa1?\xab\xb1\xcbx\x80\xae\xee?\x00\xc0\x01\xd0[\x8a\xa5?\x9b\x0c\x9d\xa2\x1at\xee?\x00\x80\xd8@\x83\\\xa9?\xb5\x99\n\x83\x91:\xee?\x00\x80W\xefj\'\xad?V\x9a`\t\xe0\x01\xee?\x00\xc0\x98\xe5\x98u\xb0?\x98\xbbw\xe5\x01\xca\xed?\x00 \r\xe3\xf5S\xb2?\x03\x91|\x0b\xf2\x92\xed?\x00\x008\x8b\xdd.\xb4?\xce\\\xfbf\xac\\\xed?\x00\xc0W\x87Y\x06\xb6?\x9d\xde^\xaa,\'\xed?\x00\x00j5v\xda\xb7?\xcd,k>n\xf2\xec?\x00`\x1cNC\xab\xb9?\x02y\xa7\xa2m\xbe\xec?\x00`\r\xbb\xc7x\xbb?m\x087m&\x8b\xec?\x00 \xe72\x13C\xbd?\x04X]\xbd\x94X\xec?\x00`\xdeq1\n\xbf?\x8c\x9f\xbb3\xb5&\xec?\x00@\x91+\x15g\xc0??\xe7\xec\xee\x83\xf5\xeb?\x00\xb0\x92\x82\x85G\xc1?\xc1\x96\xdbu\xfd\xc4\xeb?\x000\xca\xcdn&\xc2?(J\x86\x0c\x1e\x95\xeb?\x00P\xc5\xa6\xd7\x03\xc3?,>\xef\xc5\xe2e\xeb?\x00\x103<\xc3\xdf\xc3?\x8b\x88\xc9gH7\xeb?\x00\x80zk6\xba\xc4?J0\x1d!K\t\xeb?\x00\xf0\xd1(9\x93\xc5?~\xef\xf2\x85\xe8\xdb\xea?\x00\xf0\x18$\xcdj\xc6?\xa2=`1\x1d\xaf\xea?\x00\x90f\xec\xf8@\xc7?\xa7X\xd3?\xe6\x82\xea?\x00\xf0\x1a\xf5\xc0\x15\xc8?\x8bs\t\xef@W\xea?\x00\x80\xf6T)\xe9\xc8?\'K\xab\x90*,\xea?\x00@\xf8\x026\xbb\xc9?\xd1\xf2\x93\x13\xa0\x01\xea?\x00\x00,\x1c\xed\x8b\xca?\x1b<\xdb$\x9f\xd7\xe9?\x00\xd0\x01\\Q[\xcb?\x90\xb1\xc7\x05%\xae\xe9?\x00\xc0\xbc\xccg)\xcc?/\xce\x97\xf2.\x85\xe9?\x00`H\xd55\xf6\xcc?uK\xa4\xee\xba\\\xe9?\x00\xc0F4\xbd\xc1\xcd?8H\xe7\x9d\xc64\xe9?\x00\xe0\xcf\xb8\x01\x8c\xce?\xe6Rg/O\r\xe9?\x00\x90\x17\xc0\tU\xcf?\x9d\xd7\xff\x8eR\xe6\xe8?\x00\xb8\x1f\x12l\x0e\xd0?|\x00\xcc\x9f\xce\xbf\xe8?\x00\xd0\x93\x0e\xb8q\xd0?\x0e\xc3\xbe\xda\xc0\x99\xe8?\x00p\x86\x9ek\xd4\xd0?\xfb\x17#\xaa\'t\xe8?\x00\xd0K3\x876\xd1?\x08\x9a\xb3\xac\x00O\xe8?\x00H#g\r\x98\xd1?U>e\xe8I*\xe8?\x00\x80\xcc\xe0\xff\xf8\xd1?`\x02\xf4\x95\x01\x06\xe8?\x00hc\xd7_Y\xd2?)\xa3\xe0c%\xe2\xe7?\x00\xa8\x14\t0\xb9\xd2?\xad\xb5\xdcw\xb3\xbe\xe7?\x00`C\x10r\x18\xd3?\xc2%\x97g\xaa\x9b\xe7?\x00\x18\xecm&w\xd3?W\x06\x17\xf2\x07y\xe7?\x000\xaf\xfbO\xd5\xd3?\x0c\x13\xd6\xdb\xcaV\xe7?\x00\xe0/\xe3\xee2\xd4?k\xb6O\x01\x00\x10\xe6?<[B\x91l\x02~<\x95\xb4M\x03\x000\xe6?A]\x00H\xea\xbf\x8d<x\xd4\x94\r\x00P\xe6?\xb7\xa5\xd6\x86\xa7\x7f\x8e<\xadoN\x07\x00p\xe6?L%Tk\xea\xfca<\xae\x0f\xdf\xfe\xff\x8f\xe6?\xfd\x0eYL\'~|\xbc\xbc\xc5c\x07\x00\xb0\xe6?\x01\xda\xdcHh\xc1\x8a\xbc\xf6\xc1\\\x1e\x00\xd0\xe6?\x11\x93I\x9d\x1c?\x83<>\xf6\x05\xeb\xff\xef\xe6?S-\xe2\x1a\x04\x80~\xbc\x80\x97\x86\x0e\x00\x10\xe7?Ry\tqf\xff{<\x12\xe9g\xfc\xff/\xe7?$\x87\xbd&\xe2\x00\x8c<j\x11\x81\xdf\xffO\xe7?\xd2\x01\xf1n\x91\x02n\xbc\x90\x9cg\x0f\x00p\xe7?t\x9cT\xcdq\xfcg\xbc5\xc8~\xfa\xff\x8f\xe7?\x83\x04\xf5\x9e\xc1\xbe\x81<\xe6\xc2 \xfe\xff\xaf\xe7?ed\xcc)\x17~p\xbc\x00\xc9?\xed\xff\xcf\xe7?\x1c\x8b{\x08r\x80\x80\xbcv\x1a&\xe9\xff\xef\xe7?\xae\xf9\x9dm(\xc0\x8d<\xe8\xa3\x9c\x04\x00\x10\xe8?3L\xe5Q\xd2\x7f\x89<\x8f,\x93\x17\x000\xe8?\x81\xf30\xb6\xe9\xfe\x8a\xbc\x9cs3\x06\x00P\xe8?\xbc5ek\xbf\xbf\x89<\xc6\x89B \x00p\xe8?u{\x11\xf3e\xbf\x8b\xbc\x04y\xf5\xeb\xff\x8f\xe8?W\xcb=\xa2n\x00\x89\xbc\xdf\x04\xbc\"\x00\xb0\xe8?\nK\xe08\xdf\x00}\xbc\x8a\x1b\x0c\xe5\xff\xcf\xe8?\x05\x9f\xffFq\x00\x88\xbcC\x8e\x91\xfc\xff\xef\xe8?8pz\xd0{\x81\x83<\xc7_\xfa\x1e\x00\x10\xe9?\x03\xb4\xdfv\x91>\x89<\xb9{F\x13\x000\xe9?v\x02\x98KN\x80\x7f<o\x07\xee\xe6\xffO\xe9?.b\xff\xd9\xf0~\x8f\xbc\xd1\x12<\xde\xffo\xe9?\xba8&\x96\xaa\x82p\xbc\r\x8aE\xf4\xff\x8f\xe9?\xef\xa8d\x91\x1b\x80\x87\xbc>.\x98\xdd\xff\xaf\xe9?7\x93Z\x8a\xe0@\x87\xbcf\xfbI\xed\xff\xcf\xe9?\x00\xe0\x9b\xc1\x08\xce?<Q\x9c\xf1 \x00\xf0\xe9?\n[\x88\'\xaa?\x8a\xbc\x06\xb0E\x11\x00\x10\xea?V\xdaX\x99H\xfft<\xfa\xf6\xbb\x07\x000\xea?\x18m+\x8a\xab\xbe\x8c<y\x1d\x97\x10\x00P\xea?0yx\xdd\xca\xfe\x88<H.\xf5\x1d\x00p\xea?\xdb\xab\xd8=vA\x8f\xbcR3Y\x1c\x00\x90\xea?\x12v\xc2\x84\x02\xbf\x8e\xbcK>O*\x00\xb0\xea?_?\xff<\x04\xfdi\xbc\xd1\x1e\xae\xd7\xff\xcf\xea?\xb4p\x90\x12\xe7>\x82\xbcx\x04Q\xee\xff\xef\xea?\xa3\xde\x0e\xe0>\x06j<[\re\xdb\xff\x0f\xeb?\xb9\n\x1f8\xc8\x06Z<W\xca\xaa\xfe\xff/\xeb?\x1d<#t\x1e\x01y\xbc\xdc\xba\x95\xd9\xffO\xeb?\x9f*\x86h\x10\xffy\xbc\x9ce\x9e$\x00p\xeb?>O\x86\xd0E\xff\x8a<@\x16\x87\xf9\xff\x8f\xeb?\xf9\xc3\xc2\x96w\xfe|<O\xcb\x04\xd2\xff\xaf\xeb?\xc4+\xf2\xee\'\xffc\xbcE\\A\xd2\xff\xcf\xeb?!\xea;\xee\xb7\xffl\xbc\xdf\tc\xf8\xff\xef\xeb?\\\x0b.\x97\x03A\x81\xbcSv\xb5\xe1\xff\x0f\xec?\x19j\xb7\x94d\xc1\x8b<\xe3W\xfa\xf1\xff/\xec?\xed\xc60\x8d\xef\xfed\xbc$\xe4\xbf\xdc\xffO\xec?uG\xec\xbch?\x84\xbc\xf7\xb9T\xed\xffo\xec?\xec\xe0S\xf0\xa3~\x84<\xd5\x8f\x99\xeb\xff\x8f\xec?\xf1\x92\xf9\x8d\x06\x83s<\x9a!%!\x00\xb0\xec?\x04\x0e\x18d\x8e\xfdh\xbc\x9cF\x94\xdd\xff\xcf\xec?r\xea\xc7\x1c\xbe~\x8e<v\xc4\xfd\xea\xff\xef\xec?\xfe\x88\x9f\xad9\xbe\x8e<+\xf8\x9a\x16\x00\x10\xed?qZ\xb9\xa8\x91}u<\x1d\xf7\x0f\r\x000\xed?\xda\xc7pi\x90\xc1\x89<\xc4\x0fy\xea\xffO\xed?\x0c\xfeX\xc57\x0eX\xbc\xe5\x87\xdc.\x00p\xed?D\x0f\xc1M\xd6\x80\x7f\xbc\xaa\x82\xdc!\x00\x90\xed?\\\\\xfd\x94\x8f|t\xbc\x83\x02k\xd8\xff\xaf\xed?~a!\xc5\x1d\x7f\x8c<9Gl)\x00\xd0\xed?S\xb1\xff\xb2\x9e\x01\x88<\xf5\x90D\xe5\xff\xef\xed?\x89\xccR\xc6\xd2\x00n<\x94\xf6\xab\xcd\xff\x0f\xee?\xd2i- @\x83\x7f\xbc\xdd\xc8R\xdb\xff/\xee?d\x08\x1b\xca\xc1\x00{<\xef\x16B\xf2\xffO\xee?Q\xab\x94\xb0\xa8\xffr<\x11^\x8a\xe8\xffo\xee?Y\xbe\xef\xb1s\xf6W\xbc\r\xff\x9e\x11\x00\x90\xee?\x01\xc8\x0b^\x8d\x80\x84\xbcD\x17\xa5\xdf\xff\xaf\xee?\xb5 C\xd5\x06\x00x<\xa1\x7f\x12\x1a\x00\xd0\xee?\x92\\V`\xf8\x02P\xbc\xc4\xbc\xba\x07\x00\xf0\xee?\x11\xe65]D@\x85\xbc\x02\x8dz\xf5\xff\x0f\xef?\x05\x91\xef91\xfbO\xbc\xc7\x8a\xe5\x1e\x000\xef?U\x11s\xf2\xac\x81\x8a<\x944\x82\xf5\xffO\xef?C\xc7\xd7\xd4A?\x8a<kL\xa9\xfc\xffo\xef?ux\x98\x1c\xf4\x02b\xbcA\xc4\xf9\xe1\xff\x8f\xef?K\xe7w\xf4\xd1}w<~\xe3\xe0\xd2\xff\xaf\xef?1\xa3|\x9a\x19\x01o\xbc\x9e\xe4w\x1c\x00\xd0\xef?\xb1\xac\xceK\xee\x81q<1\xc3\xe0\xf7\xff\xef\xef?Z\x87p\x017\x05n\xbcn`e\xf4\xff\x0f\xf0?\xda\n\x1cI\xad~\x8a\xbcXz\x86\xf3\xff/\xf0?\xe0\xb2\xfc\xc3i\x7f\x97\xbc\x17\r\xfc\xfd\xffO\xf0?[\x94\xcb4\xfe\xbf\x97<\x82M\xcd\x03\x00p\xf0?\xcbV\xe4\xc0\x83\x00\x82<\xe8\xcb\xf2\xf9\xff\x8f\xf0?\x1au7\xbe\xdf\xffm\xbce\xda\x0c\x01\x00\xb0\xf0?\xeb&\xe6\xae\x7f?\x91\xbc8\xd3\xa4\x01\x00\xd0\xf0?\xf7\x9fHy\xfa}\x80<\xfd\xfd\xda\xfa\xff\xef\xf0?\xc0k\xd6p\x05\x04w\xbc\x96\xfd\xba\x0b\x00\x10\xf1?b\x0bm\x84\xd4\x80\x8e<]\xf4\xe5\xfa\xff/\xf1?\xef6\xfdd\xfa\xbf\x9d<\xd9\x9a\xd5\r\x00P\xf1?\xaeP\x12pw\x00\x9a<\x9aU!\x0f\x00p\xf1?\xee\xde\xe3\xe2\xf9\xfd\x8d<&T\'\xfc\xff\x8f\xf1?sr;\xdc0\x00\x91<Y<=\x12\x00\xb0\xf1?\x88\x01\x03\x80y\x7f\x99<\xb7\x9e)\xf8\xff\xcf\xf1?g\x8c\x9f\xab2\xf9e\xbc\x00\xd4\x8a\xf4\xff\xef\xf1?\xeb[\xa7\x9d\xbf\x7f\x93<\xa4\x86\x8b\x0c\x00\x10\xf2?\"[\xfd\x91k\x80\x9f<\x03C\x85\x03\x000\xf2?3\xbf\x9f\xeb\xc2\xff\x93<\x84\xf6\xbc\xff\xffO\xf2?r..~\xe7\x01v<\xd9!)\xf5\xffo\xf2?a\x0c\x7fv\xbb\xfc\x7f<<:\x93\x14\x00\x90\xf2?+A\x02<\xca\x02r\xbc\x13cU\x14\x00\xb0\xf2?\x02\x1f\xf23\x82\x80\x92\xbc;R\xfe\xeb\xff\xcf\xf2?\xf2\xdcO8~\xff\x88\xbc\x96\xad\xb8\x0b\x00\xf0\xf2?\xc5A0PQ\xff\x85\xbc\xaf\xe2z\xfb\xff\x0f\xf3?\x9d(^\x88q\x00\x81\xbc\x7f_\xac\xfe\xff/\xf3?\x15\xb7\xb7?]\xff\x91\xbcVg\xa6\x0c\x00P\xf3?\xbd\x82\x8b\"\x82\x7f\x95<!\xf7\xfb\x11\x00p\xf3?\xcc\xd5\r\xc4\xba\x00\x80<\xb9/Y\xf9\xff\x8f\xf3?Q\xa7\xb2-\x9d?\x94\xbcB\xd2\xdd\x04\x00\xb0\xf3?\xe18vpk\x7f\x85<W\xc9\xb2\xf5\xff\xcf\xf3?1\x12\xbf\x10:\x02z<\x18\xb4\xb0\xea\xff\xef\xf3?\xb0R\xb1fm\x7f\x98<\xf4\xaf2\x15\x00\x10\xf4?$\x85\x19_7\xf8g<)\x8bG\x17\x000\xf4?CQ\xdcr\xe6\x01\x83<c\xb4\x95\xe7\xffO\xf4?Z\x89\xb2\xb8i\xff\x89<\xe0u\x04\xe8\xffo\xf4?T\xf2\xc2\x9b\xb1\xc0\x95\xbc\xe7\xc1o\xef\xff\x8f\xf4?r*:\xf2\t@\x9b<\x04\xa7\xbe\xe5\xff\xaf\xf4?E}\r\xbf\xb7\xff\x94\xbc\xde\'\x10\x17\x00\xd0\xf4?=j\xdcqd\xc0\x99\xbc\xe2>\xf0\x0f\x00\xf0\xf4?\x1cS\x85\x0b\x89\x7f\x97<\xd1K\xdc\x12\x00\x10\xf5?6\xa4fqe\x04`<z\'\x05\x16\x000\xf5?\t2#\xce\xce\xbf\x96\xbcLp\xdb\xec\xffO\xf5?\xd7\xa1\x05\x05r\x02\x89\xbc\xa9T_\xef\xffo\xf5?\x12d\xc9\x0e\xe6\xbf\x9b<\x12\x10\xe6\x17\x00\x90\xf5?\x90\xef\xaf\x81\xc5~\x88<\x92>\xc9\x03\x00\xb0\xf5?\xc0\x0c\xbf\n\x08A\x9f\xbc\xbc\x19I\x1d\x00\xd0\xf5?)G%\xfb*\x81\x98\xbc\x89z\xb8\xe7\xff\xef\xf5?\x04i\xed\x80\xb7~\x94\xbc\x008\xfa\xfeB.\xe6?0g\xc7\x93W\xf3.=\x00\x00\x00\x00\x00\x00\xe0\xbf`UUUUU\xe5\xbf\x06\x00\x00\x00\x00\x00\xe0?NUY\x99\x99\x99\xe9?z\xa4)UUU\xe5\xbf\xe9EH\x9b[I\xf2\xbf\xc3?&\x8b+\x00\xf0?\x00\x00\x00\x00\x00\xa0\xf6?")
	rt_store_string(MEMORY_LIST[0], 40025,"\xc8\xb9\xf2\x82,\xd6\xbf\x80V7($\xb4\xfa<\x00\x00\x00\x00\x00\x80\xf6?")
	rt_store_string(MEMORY_LIST[0], 40057,"\x08X\xbf\xbd\xd1\xd5\xbf \xf7\xe0\xd8\x08\xa5\x1c\xbd\x00\x00\x00\x00\x00`\xf6?")
	rt_store_string(MEMORY_LIST[0], 40089,"XE\x17wv\xd5\xbfmP\xb6\xd5\xa4b#\xbd\x00\x00\x00\x00\x00@\xf6?")
	rt_store_string(MEMORY_LIST[0], 40121,"\xf8-\x87\xad\x1a\xd5\xbf\xd5g\xb0\x9e\xe4\x84\xe6\xbc\x00\x00\x00\x00\x00 \xf6?")
	rt_store_string(MEMORY_LIST[0], 40153,"xw\x95_\xbe\xd4\xbf\xe0>)\x93i\x1b\x04\xbd\x00\x00\x00\x00\x00\x00\xf6?")
	rt_store_string(MEMORY_LIST[0], 40185,"`\x1c\xc2\x8ba\xd4\xbf\xcc\x84LH/\xd8\x13=\x00\x00\x00\x00\x00\xe0\xf5?")
	rt_store_string(MEMORY_LIST[0], 40217,"\xa8\x86\x860\x04\xd4\xbf:\x0b\x82\xed\xf3B\xdc<\x00\x00\x00\x00\x00\xc0\xf5?")
	rt_store_string(MEMORY_LIST[0], 40249,"HiUL\xa6\xd3\xbf`\x94Q\x86\xc6\xb1 =\x00\x00\x00\x00\x00\xa0\xf5?")
	rt_store_string(MEMORY_LIST[0], 40281,"\x80\x98\x9a\xddG\xd3\xbf\x92\x80\xc5\xd4MY%=\x00\x00\x00\x00\x00\x80\xf5?")
	rt_store_string(MEMORY_LIST[0], 40313," \xe1\xba\xe2\xe8\xd2\xbf\xd8+\xb7\x99\x1e{&=\x00\x00\x00\x00\x00`\xf5?")
	rt_store_string(MEMORY_LIST[0], 40345,"\x88\xde\x13Z\x89\xd2\xbf?\xb0\xcf\xb6\x14\xca\x15=\x00\x00\x00\x00\x00`\xf5?")
	rt_store_string(MEMORY_LIST[0], 40377,"\x88\xde\x13Z\x89\xd2\xbf?\xb0\xcf\xb6\x14\xca\x15=\x00\x00\x00\x00\x00@\xf5?")
	rt_store_string(MEMORY_LIST[0], 40409,"x\xcf\xfbA)\xd2\xbfv\xdaS($Z\x16\xbd\x00\x00\x00\x00\x00 \xf5?")
	rt_store_string(MEMORY_LIST[0], 40441,"\x98i\xc1\x98\xc8\xd1\xbf\x04T\xe7h\xbc\xaf\x1f\xbd\x00\x00\x00\x00\x00\x00\xf5?")
	rt_store_string(MEMORY_LIST[0], 40473,"\xa8\xab\xab\\g\xd1\xbf\xf0\xa8\x823\xc6\x1f\x1f=\x00\x00\x00\x00\x00\xe0\xf4?")
	rt_store_string(MEMORY_LIST[0], 40505,"H\xae\xf9\x8b\x05\xd1\xbffZ\x05\xfd\xc4\xa8&\xbd\x00\x00\x00\x00\x00\xc0\xf4?")
	rt_store_string(MEMORY_LIST[0], 40537,"\x90s\xe2$\xa3\xd0\xbf\x0e\x03\xf4~\xeek\x0c\xbd\x00\x00\x00\x00\x00\xa0\xf4?")
	rt_store_string(MEMORY_LIST[0], 40569,"\xd0\xb4\x94%@\xd0\xbf\x7f-\xf4\x9e\xb86\xf0\xbc\x00\x00\x00\x00\x00\xa0\xf4?")
	rt_store_string(MEMORY_LIST[0], 40601,"\xd0\xb4\x94%@\xd0\xbf\x7f-\xf4\x9e\xb86\xf0\xbc\x00\x00\x00\x00\x00\x80\xf4?")
	rt_store_string(MEMORY_LIST[0], 40633,"@^m\x18\xb9\xcf\xbf\x87<\x99\xab*W\r=\x00\x00\x00\x00\x00`\xf4?")
	rt_store_string(MEMORY_LIST[0], 40665,"`\xdc\xcb\xad\xf0\xce\xbf$\xaf\x86\x9c\xb7&+=\x00\x00\x00\x00\x00@\xf4?")
	rt_store_string(MEMORY_LIST[0], 40697,"\xf0*n\x07\'\xce\xbf\x10\xff?TO/\x17\xbd\x00\x00\x00\x00\x00 \xf4?")
	rt_store_string(MEMORY_LIST[0], 40729,"\xc0Ok!\\\xcd\xbf\x1bh\xca\xbb\x91\xba!=\x00\x00\x00\x00\x00\x00\xf4?")
	rt_store_string(MEMORY_LIST[0], 40761,"\xa0\x9a\xc7\xf7\x8f\xcc\xbf4\x84\x9fhOy\'=\x00\x00\x00\x00\x00\x00\xf4?")
	rt_store_string(MEMORY_LIST[0], 40793,"\xa0\x9a\xc7\xf7\x8f\xcc\xbf4\x84\x9fhOy\'=\x00\x00\x00\x00\x00\xe0\xf3?")
	rt_store_string(MEMORY_LIST[0], 40825,"\x90-t\x86\xc2\xcb\xbf\x8f\xb7\x8b1\xb0N\x19=\x00\x00\x00\x00\x00\xc0\xf3?")
	rt_store_string(MEMORY_LIST[0], 40857,"\xc0\x80N\xc9\xf3\xca\xbff\x90\xcd?cN\xba<\x00\x00\x00\x00\x00\xa0\xf3?")
	rt_store_string(MEMORY_LIST[0], 40889,"\xb0\xe2\x1f\xbc#\xca\xbf\xea\xc1F\xdcd\x8c%\xbd\x00\x00\x00\x00\x00\xa0\xf3?")
	rt_store_string(MEMORY_LIST[0], 40921,"\xb0\xe2\x1f\xbc#\xca\xbf\xea\xc1F\xdcd\x8c%\xbd\x00\x00\x00\x00\x00\x80\xf3?")
	rt_store_string(MEMORY_LIST[0], 40953,"P\xf4\x9cZR\xc9\xbf\xe3\xd4\xc1\x04\xd9\xd1*\xbd\x00\x00\x00\x00\x00`\xf3?")
	rt_store_string(MEMORY_LIST[0], 40985,"\xd0 e\xa0\x7f\xc8\xbf\t\xfa\xdb\x7f\xbf\xbd+=\x00\x00\x00\x00\x00@\xf3?")
	rt_store_string(MEMORY_LIST[0], 41017,"\xe0\x10\x02\x89\xab\xc7\xbfXJSr\x90\xdb+=\x00\x00\x00\x00\x00@\xf3?")
	rt_store_string(MEMORY_LIST[0], 41049,"\xe0\x10\x02\x89\xab\xc7\xbfXJSr\x90\xdb+=\x00\x00\x00\x00\x00 \xf3?")
	rt_store_string(MEMORY_LIST[0], 41081,"\xd0\x19\xe7\x0f\xd6\xc6\xbff\xe2\xb2\xa3j\xe4\x10\xbd\x00\x00\x00\x00\x00\x00\xf3?")
	rt_store_string(MEMORY_LIST[0], 41113,"\x90\xa7p0\xff\xc5\xbf9P\x10\x9fC\x9e\x1e\xbd\x00\x00\x00\x00\x00\x00\xf3?")
	rt_store_string(MEMORY_LIST[0], 41145,"\x90\xa7p0\xff\xc5\xbf9P\x10\x9fC\x9e\x1e\xbd\x00\x00\x00\x00\x00\xe0\xf2?")
	rt_store_string(MEMORY_LIST[0], 41177,"\xb0\xa1\xe3\xe5&\xc5\xbf\x8f[\x07\x90\x8b\xde \xbd\x00\x00\x00\x00\x00\xc0\xf2?")
	rt_store_string(MEMORY_LIST[0], 41209,"\x80\xcbl+M\xc4\xbf<x5a\xc1\x0c\x17=\x00\x00\x00\x00\x00\xc0\xf2?")
	rt_store_string(MEMORY_LIST[0], 41241,"\x80\xcbl+M\xc4\xbf<x5a\xc1\x0c\x17=\x00\x00\x00\x00\x00\xa0\xf2?")
	rt_store_string(MEMORY_LIST[0], 41273,"\x90\x1e \xfcq\xc3\xbf:T\'M\x86x\xf1<\x00\x00\x00\x00\x00\x80\xf2?")
	rt_store_string(MEMORY_LIST[0], 41305,"\xf0\x1f\xf8R\x95\xc2\xbf\x08\xc4q\x170\x8d$\xbd\x00\x00\x00\x00\x00`\xf2?")
	rt_store_string(MEMORY_LIST[0], 41337,"`/\xd5*\xb7\xc1\xbf\x96\xa3\x11\x18\xa4\x80.\xbd\x00\x00\x00\x00\x00`\xf2?")
	rt_store_string(MEMORY_LIST[0], 41369,"`/\xd5*\xb7\xc1\xbf\x96\xa3\x11\x18\xa4\x80.\xbd\x00\x00\x00\x00\x00@\xf2?")
	rt_store_string(MEMORY_LIST[0], 41401,"\x90\xd0|~\xd7\xc0\xbf\xf4[\xe8\x88\x96i\n=\x00\x00\x00\x00\x00@\xf2?")
	rt_store_string(MEMORY_LIST[0], 41433,"\x90\xd0|~\xd7\xc0\xbf\xf4[\xe8\x88\x96i\n=\x00\x00\x00\x00\x00 \xf2?")
	rt_store_string(MEMORY_LIST[0], 41465,"\xe0\xdb1\x91\xec\xbf\xbf\xf23\xa3\\Tu%\xbd\x00\x00\x00\x00\x00\x00\xf2?")
	rt_store_string(MEMORY_LIST[0], 41498,"+n\x07\'\xbe\xbf<\x00\xf0*,4*=\x00\x00\x00\x00\x00\x00\xf2?")
	rt_store_string(MEMORY_LIST[0], 41530,"+n\x07\'\xbe\xbf<\x00\xf0*,4*=\x00\x00\x00\x00\x00\xe0\xf1?")
	rt_store_string(MEMORY_LIST[0], 41561,"\xc0[\x8fT^\xbc\xbf\x06\xbe_XW\x0c\x1d\xbd\x00\x00\x00\x00\x00\xc0\xf1?")
	rt_store_string(MEMORY_LIST[0], 41593,"\xe0J:m\x92\xba\xbf\xc8\xaa[\xe859%=\x00\x00\x00\x00\x00\xc0\xf1?")
	rt_store_string(MEMORY_LIST[0], 41625,"\xe0J:m\x92\xba\xbf\xc8\xaa[\xe859%=\x00\x00\x00\x00\x00\xa0\xf1?")
	rt_store_string(MEMORY_LIST[0], 41657,"\xa01\xd6E\xc3\xb8\xbfhV/M)|\x13=\x00\x00\x00\x00\x00\xa0\xf1?")
	rt_store_string(MEMORY_LIST[0], 41689,"\xa01\xd6E\xc3\xb8\xbfhV/M)|\x13=\x00\x00\x00\x00\x00\x80\xf1?")
	rt_store_string(MEMORY_LIST[0], 41721,"`\xe5\x8a\xd2\xf0\xb6\xbf\xdas3\xc97\x97&\xbd\x00\x00\x00\x00\x00`\xf1?")
	rt_store_string(MEMORY_LIST[0], 41753," \x06?\x07\x1b\xb5\xbfW^\xc6a[\x02\x1f=\x00\x00\x00\x00\x00`\xf1?")
	rt_store_string(MEMORY_LIST[0], 41785," \x06?\x07\x1b\xb5\xbfW^\xc6a[\x02\x1f=\x00\x00\x00\x00\x00@\xf1?")
	rt_store_string(MEMORY_LIST[0], 41817,"\xe0\x1b\x96\xd7A\xb3\xbf\xdf\x13\xf9\xcc\xda^,=\x00\x00\x00\x00\x00@\xf1?")
	rt_store_string(MEMORY_LIST[0], 41849,"\xe0\x1b\x96\xd7A\xb3\xbf\xdf\x13\xf9\xcc\xda^,=\x00\x00\x00\x00\x00 \xf1?")
	rt_store_string(MEMORY_LIST[0], 41881,"\x80\xa3\xee6e\xb1\xbf\t\xa3\x8fv^|\x14=\x00\x00\x00\x00\x00\x00\xf1?")
	rt_store_string(MEMORY_LIST[0], 41913,"\x80\x11\xc00\n\xaf\xbf\x91\x8e6\x83\x9eY-=\x00\x00\x00\x00\x00\x00\xf1?")
	rt_store_string(MEMORY_LIST[0], 41945,"\x80\x11\xc00\n\xaf\xbf\x91\x8e6\x83\x9eY-=\x00\x00\x00\x00\x00\xe0\xf0?")
	rt_store_string(MEMORY_LIST[0], 41977,"\x80\x19q\xddB\xab\xbfLp\xd6\xe5z\x82\x1c=\x00\x00\x00\x00\x00\xe0\xf0?")
	rt_store_string(MEMORY_LIST[0], 42009,"\x80\x19q\xddB\xab\xbfLp\xd6\xe5z\x82\x1c=\x00\x00\x00\x00\x00\xc0\xf0?")
	rt_store_string(MEMORY_LIST[0], 42041,"\xc02\xf6Xt\xa7\xbf\xee\xa1\xf24F\xfc,\xbd\x00\x00\x00\x00\x00\xc0\xf0?")
	rt_store_string(MEMORY_LIST[0], 42073,"\xc02\xf6Xt\xa7\xbf\xee\xa1\xf24F\xfc,\xbd\x00\x00\x00\x00\x00\xa0\xf0?")
	rt_store_string(MEMORY_LIST[0], 42105,"\xc0\xfe\xb9\x87\x9e\xa3\xbf\xaa\xfe&\xf5\xb7\x02\xf5<\x00\x00\x00\x00\x00\xa0\xf0?")
	rt_store_string(MEMORY_LIST[0], 42137,"\xc0\xfe\xb9\x87\x9e\xa3\xbf\xaa\xfe&\xf5\xb7\x02\xf5<\x00\x00\x00\x00\x00\x80\xf0?")
	rt_store_string(MEMORY_LIST[0], 42170,"x\x0e\x9b\x82\x9f\xbf\xe4\t~|&\x80)\xbd\x00\x00\x00\x00\x00\x80\xf0?")
	rt_store_string(MEMORY_LIST[0], 42202,"x\x0e\x9b\x82\x9f\xbf\xe4\t~|&\x80)\xbd\x00\x00\x00\x00\x00`\xf0?")
	rt_store_string(MEMORY_LIST[0], 42233,"\x80\xd5\x07\x1b\xb9\x97\xbf9\xa6\xfa\x93T\x8d(\xbd\x00\x00\x00\x00\x00@\xf0?")
	rt_store_string(MEMORY_LIST[0], 42266,"\xfc\xb0\xa8\xc0\x8f\xbf\x9c\xa6\xd3\xf6|\x1e\xdf\xbc\x00\x00\x00\x00\x00@\xf0?")
	rt_store_string(MEMORY_LIST[0], 42298,"\xfc\xb0\xa8\xc0\x8f\xbf\x9c\xa6\xd3\xf6|\x1e\xdf\xbc\x00\x00\x00\x00\x00 \xf0?")
	rt_store_string(MEMORY_LIST[0], 42330,"\x10k*\xe0\x7f\xbf\xe4@\xda\r?\xe2\x19\xbd\x00\x00\x00\x00\x00 \xf0?")
	rt_store_string(MEMORY_LIST[0], 42362,"\x10k*\xe0\x7f\xbf\xe4@\xda\r?\xe2\x19\xbd\x00\x00\x00\x00\x00\x00\xf0?")
	rt_store_string(MEMORY_LIST[0], 42414,"\xf0?")
	rt_store_string(MEMORY_LIST[0], 42445,"\xc0\xef?")
	rt_store_string(MEMORY_LIST[0], 42458,"\x89u\x15\x10\x80?\xe8+\x9d\x99k\xc7\x10\xbd\x00\x00\x00\x00\x00\x80\xef?")
	rt_store_string(MEMORY_LIST[0], 42489,"\x80\x93XV \x90?\xd2\xf7\xe2\x06[\xdc#\xbd\x00\x00\x00\x00\x00@\xef?")
	rt_store_string(MEMORY_LIST[0], 42522,"\xc9(%I\x98?4\x0cZ2\xba\xa0*\xbd\x00\x00\x00\x00\x00\x00\xef?")
	rt_store_string(MEMORY_LIST[0], 42553,"@\xe7\x89]A\xa0?S\xd7\xf1\\\xc0\x11\x01=\x00\x00\x00\x00\x00\xc0\xee?")
	rt_store_string(MEMORY_LIST[0], 42586,".\xd4\xaef\xa4?(\xfd\xbdus\x16,\xbd\x00\x00\x00\x00\x00\x80\xee?")
	rt_store_string(MEMORY_LIST[0], 42617,"\xc0\x9f\x14\xaa\x94\xa8?}&Z\xd0\x95y\x19\xbd\x00\x00\x00\x00\x00@\xee?")
	rt_store_string(MEMORY_LIST[0], 42649,"\xc0\xdd\xcds\xcb\xac?\x07(\xd8G\xf2h\x1a\xbd\x00\x00\x00\x00\x00 \xee?")
	rt_store_string(MEMORY_LIST[0], 42681,"\xc0\x06\xc01\xea\xae?{;\xc9O>\x11\x0e\xbd\x00\x00\x00\x00\x00\xe0\xed?")
	rt_store_string(MEMORY_LIST[0], 42713,"`F\xd1;\x97\xb1?\x9b\x9e\rV]2%\xbd\x00\x00\x00\x00\x00\xa0\xed?")
	rt_store_string(MEMORY_LIST[0], 42745,"\xe0\xd1\xa7\xf5\xbd\xb3?\xd7N\xdb\xa5^\xc8,=\x00\x00\x00\x00\x00`\xed?")
	rt_store_string(MEMORY_LIST[0], 42777,"\xa0\x97MZ\xe9\xb5?\x1e\x1d]<\x06i,\xbd\x00\x00\x00\x00\x00@\xed?")
	rt_store_string(MEMORY_LIST[0], 42809,"\xc0\xea\n\xd3\x00\xb7?2\xed\x9d\xa9\x8d\x1e\xec<\x00\x00\x00\x00\x00\x00\xed?")
	rt_store_string(MEMORY_LIST[0], 42841,"@Y]^3\xb9?\xdaG\xbd:\\\x11#=\x00\x00\x00\x00\x00\xc0\xec?")
	rt_store_string(MEMORY_LIST[0], 42873,"`\xad\x8d\xc8j\xbb?\xe5h\xf7+\x80\x90\x13\xbd\x00\x00\x00\x00\x00\xa0\xec?")
	rt_store_string(MEMORY_LIST[0], 42905,"@\xbc\x01X\x88\xbc?\xd3\xacZ\xc6\xd1F&=\x00\x00\x00\x00\x00`\xec?")
	rt_store_string(MEMORY_LIST[0], 42937," \n\x839\xc7\xbe?\xe0E\xe6\xafh\xc0-\xbd\x00\x00\x00\x00\x00@\xec?")
	rt_store_string(MEMORY_LIST[0], 42969,"\xe0\xdb9\x91\xe8\xbf?\xfd\n\xa1O\xd64%\xbd\x00\x00\x00\x00\x00\x00\xec?")
	rt_store_string(MEMORY_LIST[0], 43001,"\xe0\'\x82\x8e\x17\xc1?\xf2\x07-\xcex\xef!=\x00\x00\x00\x00\x00\xe0\xeb?")
	rt_store_string(MEMORY_LIST[0], 43033,"\xf0#~+\xaa\xc1?4\x998D\x8e\xa7,=\x00\x00\x00\x00\x00\xa0\xeb?")
	rt_store_string(MEMORY_LIST[0], 43065,"\x80\x86\x0ca\xd1\xc2?\xa1\xb4\x81\xcbl\x9d\x03=\x00\x00\x00\x00\x00\x80\xeb?")
	rt_store_string(MEMORY_LIST[0], 43097,"\x90\x15\xb0\xfce\xc3?\x89rK#\xa8/\xc6<\x00\x00\x00\x00\x00@\xeb?")
	rt_store_string(MEMORY_LIST[0], 43129,"\xb03\x83=\x91\xc4?x\xb6\xfdTy\x83%=\x00\x00\x00\x00\x00 \xeb?")
	rt_store_string(MEMORY_LIST[0], 43161,"\xb0\xa1\xe4\xe5\'\xc5?\xc7}i\xe5\xe83&=\x00\x00\x00\x00\x00\xe0\xea?")
	rt_store_string(MEMORY_LIST[0], 43193,"\x10\x8c\xbeNW\xc6?x.<,\x8b\xcf\x19=\x00\x00\x00\x00\x00\xc0\xea?")
	rt_store_string(MEMORY_LIST[0], 43225,"pu\x8b\x12\xf0\xc6?\xe1!\x9c\xe5\x8d\x11%\xbd\x00\x00\x00\x00\x00\xa0\xea?")
	rt_store_string(MEMORY_LIST[0], 43257,"PD\x85\x8d\x89\xc7?\x05C\x91p\x10f\x1c\xbd\x00\x00\x00\x00\x00`\xea?")
	rt_store_string(MEMORY_LIST[0], 43290,"9\xeb\xaf\xbe\xc8?\xd1,\xe9\xaaT=\x07\xbd\x00\x00\x00\x00\x00@\xea?")
	rt_store_string(MEMORY_LIST[0], 43322,"\xf7\xdcZZ\xc9?o\xff\xa0X(\xf2\x07=\x00\x00\x00\x00\x00\x00\xea?")
	rt_store_string(MEMORY_LIST[0], 43353,"\xe0\x8a<\xed\x93\xca?i!VPCr(\xbd\x00\x00\x00\x00\x00\xe0\xe9?")
	rt_store_string(MEMORY_LIST[0], 43385,"\xd0[W\xd81\xcb?\xaa\xe1\xacN\x8d5\x0c\xbd\x00\x00\x00\x00\x00\xc0\xe9?")
	rt_store_string(MEMORY_LIST[0], 43417,"\xe0;8\x87\xd0\xcb?\xb6\x12TY\xc4K-\xbd\x00\x00\x00\x00\x00\xa0\xe9?")
	rt_store_string(MEMORY_LIST[0], 43449,"\x10\xf0\xc6\xfbo\xcc?\xd2+\x96\xc5r\xec\xf1\xbc\x00\x00\x00\x00\x00`\xe9?")
	rt_store_string(MEMORY_LIST[0], 43481,"\x90\xd4\xb0=\xb1\xcd?5\xb0\x15\xf7*\xff*\xbd\x00\x00\x00\x00\x00@\xe9?")
	rt_store_string(MEMORY_LIST[0], 43513,"\x10\xe7\xff\x0eS\xce?0\xf4A`\'\x12\xc2<\x00\x00\x00\x00\x00 \xe9?")
	rt_store_string(MEMORY_LIST[0], 43546,"\xdd\xe4\xad\xf5\xce?\x11\x8e\xbbe\x15!\xca\xbc\x00\x00\x00\x00\x00\x00\xe9?")
	rt_store_string(MEMORY_LIST[0], 43577,"\xb0\xb3l\x1c\x99\xcf?0\xdf\x0c\xca\xec\xcb\x1b=\x00\x00\x00\x00\x00\xc0\xe8?")
	rt_store_string(MEMORY_LIST[0], 43609,"XM`8q\xd0?\x91N\xed\x16\xdb\x9c\xf8<\x00\x00\x00\x00\x00\xa0\xe8?")
	rt_store_string(MEMORY_LIST[0], 43641,"`ag-\xc4\xd0?\xe9\xea<\x16\x8b\x18\'=\x00\x00\x00\x00\x00\x80\xe8?")
	rt_store_string(MEMORY_LIST[0], 43673,"\xe8\'\x82\x8e\x17\xd1?\x1c\xf0\xa5c\x0e!,\xbd\x00\x00\x00\x00\x00`\xe8?")
	rt_store_string(MEMORY_LIST[0], 43705,"\xf8\xac\xcb\\k\xd1?\x81\x16\xa5\xf7\xcd\x9a+=\x00\x00\x00\x00\x00@\xe8?")
	rt_store_string(MEMORY_LIST[0], 43737,"hZc\x99\xbf\xd1?\xb7\xbdGQ\xed\xa6,=\x00\x00\x00\x00\x00 \xe8?")
	rt_store_string(MEMORY_LIST[0], 43769,"\xb8\x0emE\x14\xd2?\xea\xbaF\xba\xde\x87\n=\x00\x00\x00\x00\x00\xe0\xe7?")
	rt_store_string(MEMORY_LIST[0], 43801,"\x90\xdc|\xf0\xbe\xd2?\xf4\x04PJ\xfa\x9c*=\x00\x00\x00\x00\x00\xc0\xe7?")
	rt_store_string(MEMORY_LIST[0], 43833,"`\xd3\xe1\xf1\x14\xd3?\xb8<!\xd3z\xe2(\xbd\x00\x00\x00\x00\x00\xa0\xe7?")
	rt_store_string(MEMORY_LIST[0], 43865,"\x10\xbevgk\xd3?\xc8w\xf1\xb0\xcdn\x11=\x00\x00\x00\x00\x00\x80\xe7?")
	rt_store_string(MEMORY_LIST[0], 43897,"03wR\xc2\xd3?\\\xbd\x06\xb6T;\x18=\x00\x00\x00\x00\x00`\xe7?")
	rt_store_string(MEMORY_LIST[0], 43929,"\xe8\xd5#\xb4\x19\xd4?\x9d\xe0\x90\xec6\xe4\x08=\x00\x00\x00\x00\x00@\xe7?")
	rt_store_string(MEMORY_LIST[0], 43961,"\xc8q\xc2\x8dq\xd4?u\xd6g\t\xce\'/\xbd\x00\x00\x00\x00\x00 \xe7?")
	rt_store_string(MEMORY_LIST[0], 43993,"0\x17\x9e\xe0\xc9\xd4?\xa4\xd8\n\x1b\x89 .\xbd\x00\x00\x00\x00\x00\x00\xe7?")
	rt_store_string(MEMORY_LIST[0], 44025,"\xa08\x07\xae\"\xd5?Y\xc7d\x81p\xbe.=\x00\x00\x00\x00\x00\xe0\xe6?")
	rt_store_string(MEMORY_LIST[0], 44057,"\xd0\xc8S\xf7{\xd5?\xef@]\xee\xed\xad\x1f=\x00\x00\x00\x00\x00\xc0\xe6?")
	rt_store_string(MEMORY_LIST[0], 44089,"`Y\xdf\xbd\xd5\xd5?\xdce\xa4\x08*\x0b\n\xbd\x00\x00\x00\x00\x00\x00\x00\x00O\xbba\x05g\xac\xdd?\x18-DT\xfb!\xe9?\x9b\xf6\x81\xd2\x0bs\xef?\x18-DT\xfb!\xf9?\xe2e/\"\x7f+z<\x07\\\x143&\xa6\x81<\xbd\xcb\xf0z\x88\x07p<\x07\\\x143&\xa6\x91<\x18-DT\xfb!\xe9?\x18-DT\xfb!\xe9\xbf\xd2!3\x7f|\xd9\x02@\xd2!3\x7f|\xd9\x02\xc0")
	rt_store_string(MEMORY_LIST[0], 44223,"\x80\x18-DT\xfb!\t@\x18-DT\xfb!\t\xc0\x03\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x83\xf9\xa2\x00DNn\x00\xfc)\x15\x00\xd1W\'\x00\xdd4\xf5\x00b\xdb\xc0\x00<\x99\x95\x00A\x90C\x00cQ\xfe\x00\xbb\xde\xab\x00\xb7a\xc5\x00:n$\x00\xd2MB\x00I\x06\xe0\x00\t\xea.\x00\x1c\x92\xd1\x00\xeb\x1d\xfe\x00)\xb1\x1c\x00\xe8>\xa7\x00\xf55\x82\x00D\xbb.\x00\x9c\xe9\x84\x00\xb4&p\x00A~_\x00\xd6\x919\x00S\x839\x00\x9c\xf49\x00\x8b_\x84\x00(\xf9\xbd\x00\xf8\x1f;\x00\xde\xff\x97\x00\x0f\x98\x05\x00\x11/\xef\x00\nZ\x8b\x00m\x1fm\x00\xcf~6\x00\t\xcb\'\x00FO\xb7\x00\x9ef?\x00-\xea_\x00\xba\'u\x00\xe5\xeb\xc7\x00={\xf1\x00\xf79\x07\x00\x92R\x8a\x00\xfbk\xea\x00\x1f\xb1_\x00\x08]\x8d\x000\x03V\x00{\xfcF\x00\xf0\xabk\x00 \xbc\xcf\x006\xf4\x9a\x00\xe3\xa9\x1d\x00^a\x91\x00\x08\x1b\xe6\x00\x85\x99e\x00\xa0\x14_\x00\x8d@h\x00\x80\xd8\xff\x00\'sM\x00\x06\x061\x00\xcaV\x15\x00\xc9\xa8s\x00{\xe2`\x00k\x8c\xc0\x00\x19\xc4G\x00\xcdg\xc3\x00\t\xe8\xdc\x00Y\x83*\x00\x8bv\xc4\x00\xa6\x1c\x96\x00D\xaf\xdd\x00\x19W\xd1\x00\xa5>\x05\x00\x05\x07\xff\x003~?\x00\xc22\xe8\x00\x98O\xde\x00\xbb}2\x00&=\xc3\x00\x1ek\xef\x00\x9f\xf8^\x005\x1f:\x00\x7f\xf2\xca\x00\xf1\x87\x1d\x00|\x90!\x00j$|\x00\xd5n\xfa\x000-w\x00\x15;C\x00\xb5\x14\xc6\x00\xc3\x19\x9d\x00\xad\xc4\xc2\x00,MA\x00\x0c\x00]\x00\x86}F\x00\xe3q-\x00\x9b\xc6\x9a\x003b\x00\x00\xb4\xd2|\x00\xb4\xa7\x97\x007U\xd5\x00\xd7>\xf6\x00\xa3\x10\x18\x00Mv\xfc\x00d\x9d*\x00p\xd7\xab\x00c|\xf8\x00z\xb0W\x00\x17\x15\xe7\x00\xc0IV\x00;\xd6\xd9\x00\xa7\x848\x00$#\xcb\x00\xd6\x8aw\x00ZT#\x00\x00\x1f\xb9\x00\xf1\n\x1b\x00\x19\xce\xdf\x00\x9f1\xff\x00f\x1ej\x00\x99Wa\x00\xac\xfbG\x00~\x7f\xd8\x00\"e\xb7\x002\xe8\x89\x00\xe6\xbf`\x00\xef\xc4\xcd\x00l6\t\x00]?\xd4\x00\x16\xde\xd7\x00X;\xde\x00\xde\x9b\x92\x00\xd2\"(\x00(\x86\xe8\x00\xe2XM\x00\xc6\xca2\x00\x08\xe3\x16\x00\xe0}\xcb\x00\x17\xc0P\x00\xf3\x1d\xa7\x00\x18\xe0[\x00.\x134\x00\x83\x12b\x00\x83H\x01\x00\xf5\x8e[\x00\xad\xb0\x7f\x00\x1e\xe9\xf2\x00HJC\x00\x10g\xd3\x00\xaa\xdd\xd8\x00\xae_B\x00ja\xce\x00\n(\xa4\x00\xd3\x99\xb4\x00\x06\xa6\xf2\x00\\w\x7f\x00\xa3\xc2\x83\x00a<\x88\x00\x8asx\x00\xaf\x8cZ\x00o\xd7\xbd\x00-\xa6c\x00\xf4\xbf\xcb\x00\x8d\x81\xef\x00&\xc1g\x00U\xcaE\x00\xca\xd96\x00(\xa8\xd2\x00\xc2a\x8d\x00\x12\xc9w\x00\x04&\x14\x00\x12F\x9b\x00\xc4Y\xc4\x00\xc8\xc5D\x00M\xb2\x91\x00\x00\x17\xf3\x00\xd4C\xad\x00)I\xe5\x00\xfd\xd5\x10\x00\x00\xbe\xfc\x00\x1e\x94\xcc\x00p\xce\xee\x00\x13>\xf5\x00\xec\xf1\x80\x00\xb3\xe7\xc3\x00\xc7\xf8(\x00\x93\x05\x94\x00\xc1q>\x00.\t\xb3\x00\x0bE\xf3\x00\x88\x12\x9c\x00\xab {\x00.\xb5\x9f\x00G\x92\xc2\x00{2/\x00\x0cUm\x00r\xa7\x90\x00k\xe7\x1f\x001\xcb\x96\x00y\x16J\x00Ay\xe2\x00\xf4\xdf\x89\x00\xe8\x94\x97\x00\xe2\xe6\x84\x00\x991\x97\x00\x88\xedk\x00__6\x00\xbb\xfd\x0e\x00H\x9a\xb4\x00g\xa4l\x00qrB\x00\x8d]2\x00\x9f\x15\xb8\x00\xbc\xe5\t\x00\x8d1%\x00\xf7t9\x000\x05\x1c\x00\r\x0c\x01\x00K\x08h\x00,\xeeX\x00G\xaa\x90\x00t\xe7\x02\x00\xbd\xd6$\x00\xf7}\xa6\x00nHr\x00\x9f\x16\xef\x00\x8e\x94\xa6\x00\xb4\x91\xf6\x00\xd1SQ\x00\xcf\n\xf2\x00 \x983\x00\xf5K~\x00\xb2ch\x00\xdd>_\x00@]\x03\x00\x85\x89\x7f\x00UR)\x007d\xc0\x00m\xd8\x10\x002H2\x00[Lu\x00Nq\xd4\x00ETn\x00\x0b\t\xc1\x00*\xf5i\x00\x14f\xd5\x00\'\x07\x9d\x00]\x04P\x00\xb4;\xdb\x00\xeav\xc5\x00\x87\xf9\x17\x00Ik}\x00\x1d\'\xba\x00\x96i)\x00\xc6\xcc\xac\x00\xad\x14T\x00\x90\xe2j\x00\x88\xd9\x89\x00,rP\x00\x04\xa4\xbe\x00w\x07\x94\x00\xf30p\x00\x00\xfc\'\x00\xeaq\xa8\x00f\xc2I\x00d\xe0=\x00\x97\xdd\x83\x00\xa3?\x97\x00C\x94\xfd\x00\r\x86\x8c\x001A\xde\x00\x929\x9d\x00\xddp\x8c\x00\x17\xb7\xe7\x00\x08\xdf;\x00\x157+\x00\\\x80\xa0\x00Z\x80\x93\x00\x10\x11\x92\x00\x0f\xe8\xd8\x00l\x80\xaf\x00\xdb\xffK\x008\x90\x0f\x00Y\x18v\x00b\xa5\x15\x00a\xcb\xbb\x00\xc7\x89\xb9\x00\x10@\xbd\x00\xd2\xf2\x04\x00Iu\'\x00\xeb\xb6\xf6\x00\xdb\"\xbb\x00\n\x14\xaa\x00\x89&/\x00d\x83v\x00\t;3\x00\x0e\x94\x1a\x00Q:\xaa\x00\x1d\xa3\xc2\x00\xaf\xed\xae\x00\\&\x12\x00m\xc2M\x00-z\x9c\x00\xc0V\x97\x00\x03?\x83\x00\t\xf0\xf6\x00+@\x8c\x00m1\x99\x009\xb4\x07\x00\x0c \x15\x00\xd8\xc3[\x00\xf5\x92\xc4\x00\xc6\xadK\x00N\xca\xa5\x00\xa77\xcd\x00\xe6\xa96\x00\xab\x92\x94\x00\xddBh\x00\x19c\xde\x00v\x8c\xef\x00h\x8bR\x00\xfc\xdb7\x00\xae\xa1\xab\x00\xdf\x151\x00\x00\xae\xa1\x00\x0c\xfb\xda\x00dMf\x00\xed\x05\xb7\x00)e0\x00WV\xbf\x00G\xff:\x00j\xf9\xb9\x00u\xbe\xf3\x00(\x93\xdf\x00\xab\x800\x00f\x8c\xf6\x00\x04\xcb\x15\x00\xfa\"\x06\x00\xd9\xe4\x1d\x00=\xb3\xa4\x00W\x1b\x8f\x006\xcd\t\x00NB\xe9\x00\x13\xbe\xa4\x003#\xb5\x00\xf0\xaa\x1a\x00Oe\xa8\x00\xd2\xc1\xa5\x00\x0b?\x0f\x00[x\xcd\x00#\xf9v\x00{\x8b\x04\x00\x89\x17r\x00\xc6\xa6S\x00on\xe2\x00\xef\xeb\x00\x00\x9bJX\x00\xc4\xda\xb7\x00\xaaf\xba\x00v\xcf\xcf\x00\xd1\x02\x1d\x00\xb1\xf1-\x00\x8c\x99\xc1\x00\xc3\xadw\x00\x86H\xda\x00\xf7]\xa0\x00\xc6\x80\xf4\x00\xac\xf0/\x00\xdd\xec\x9a\x00?\\\xbc\x00\xd0\xdem\x00\x90\xc7\x1f\x00*\xdb\xb6\x00\xa3%:\x00\x00\xaf\x9a\x00\xadS\x93\x00\xb6W\x04\x00)-\xb4\x00K\x80~\x00\xda\x07\xa7\x00v\xaa\x0e\x00{Y\xa1\x00\x16\x12*\x00\xdc\xb7-\x00\xfa\xe5\xfd\x00\x89\xdb\xfe\x00\x89\xbe\xfd\x00\xe4vl\x00\x06\xa9\xfc\x00>\x80p\x00\x85n\x15\x00\xfd\x87\xff\x00(>\x07\x00ag3\x00*\x18\x86\x00M\xbd\xea\x00\xb3\xe7\xaf\x00\x8fmn\x00\x95g9\x001\xbf[\x00\x84\xd7H\x000\xdf\x16\x00\xc7-C\x00%a5\x00\xc9p\xce\x000\xcb\xb8\x00\xbfl\xfd\x00\xa4\x00\xa2\x00\x05l\xe4\x00Z\xdd\xa0\x00!oG\x00b\x12\xd2\x00\xb9\\\x84\x00paI\x00kV\xe0\x00\x99R\x01\x00PU7\x00\x1e\xd5\xb7\x003\xf1\xc4\x00\x13n_\x00]0\xe4\x00\x85.\xa9\x00\x1d\xb2\xc3\x00\xa126\x00\x08\xb7\xa4\x00\xea\xb1\xd4\x00\x16\xf7!\x00\x8fi\xe4\x00\'\xffw\x00\x0c\x03\x80\x00\x8d@-\x00O\xcd\xa0\x00 \xa5\x99\x00\xb3\xa2\xd3\x00/]\n\x00\xb4\xf9B\x00\x11\xda\xcb\x00}\xbe\xd0\x00\x9b\xdb\xc1\x00\xab\x17\xbd\x00\xca\xa2\x81\x00\x08j\\\x00.U\x17\x00\'\x00U\x00\x7f\x14\xf0\x00\xe1\x07\x86\x00\x14\x0bd\x00\x96A\x8d\x00\x87\xbe\xde\x00\xda\xfd*\x00k%\xb6\x00{\x894\x00\x05\xf3\xfe\x00\xb9\xbf\x9e\x00hjO\x00J*\xa8\x00O\xc4Z\x00-\xf8\xbc\x00\xd7Z\x98\x00\xf4\xc7\x95\x00\rM\x8d\x00 :\xa6\x00\xa4W_\x00\x14?\xb1\x00\x808\x95\x00\xcc \x01\x00q\xdd\x86\x00\xc9\xde\xb6\x00\xbf`\xf5\x00Me\x11\x00\x01\x07k\x00\x8c\xb0\xac\x00\xb2\xc0\xd0\x00QUH\x00\x1e\xfb\x0e\x00\x95r\xc3\x00\xa3\x06;\x00\xc0@5\x00\x06\xdc{\x00\xe0E\xcc\x00N)\xfa\x00\xd6\xca\xc8\x00\xe8\xf3A\x00|d\xde\x00\x9bd\xd8\x00\xd9\xbe1\x00\xa4\x97\xc3\x00wX\xd4\x00i\xe3\xc5\x00\xf0\xda\x13\x00\xba:<\x00F\x18F\x00Uu_\x00\xd2\xbd\xf5\x00n\x92\xc6\x00\xac.]\x00\x0eD\xed\x00\x1c>B\x00a\xc4\x87\x00)\xfd\xe9\x00\xe7\xd6\xf3\x00\"|\xca\x00o\x915\x00\x08\xe0\xc5\x00\xff\xd7\x8d\x00nj\xe2\x00\xb0\xfd\xc6\x00\x93\x08\xc1\x00|]t\x00k\xad\xb2\x00\xcdn\x9d\x00>r{\x00\xc6\x11j\x00\xf7\xcf\xa9\x00)s\xdf\x00\xb5\xc9\xba\x00\xb7\x00Q\x00\xe2\xb2\r\x00t\xba$\x00\xe5}`\x00t\xd8\x8a\x00\r\x15,\x00\x81\x18\x0c\x00~f\x94\x00\x01)\x16\x00\x9fzv\x00\xfd\xfd\xbe\x00VE\xef\x00\xd9~6\x00\xec\xd9\x13\x00\x8b\xba\xb9\x00\xc4\x97\xfc\x001\xa8\'\x00\xf1n\xc3\x00\x94\xc56\x00\xd8\xa8V\x00\xb4\xa8\xb5\x00\xcf\xcc\x0e\x00\x12\x89-\x00oW4\x00,V\x89\x00\x99\xce\xe3\x00\xd6 \xb9\x00k^\xaa\x00>*\x9c\x00\x11_\xcc\x00\xfd\x0bJ\x00\xe1\xf4\xfb\x00\x8e;m\x00\xe2\x86,\x00\xe9\xd4\x84\x00\xfc\xb4\xa9\x00\xef\xee\xd1\x00.5\xc9\x00/9a\x008!D\x00\x1b\xd9\xc8\x00\x81\xfc\n\x00\xfbJj\x00/\x1c\xd8\x00S\xb4\x84\x00N\x99\x8c\x00T\"\xcc\x00*U\xdc\x00\xc0\xc6\xd6\x00\x0b\x19\x96\x00\x1ap\xb8\x00i\x95d\x00&Z`\x00?R\xee\x00\x7f\x11\x0f\x00\xf4\xb5\x11\x00\xfc\xcb\xf5\x004\xbc-\x004\xbc\xee\x00\xe8]\xcc\x00\xdd^`\x00g\x8e\x9b\x00\x923\xef\x00\xc9\x17\xb8\x00aX\x9b\x00\xe1W\xbc\x00Q\x83\xc6\x00\xd8>\x10\x00\xddqH\x00-\x1c\xdd\x00\xaf\x18\xa1\x00!,F\x00Y\xf3\xd7\x00\xd9z\x98\x00\x9eT\xc0\x00O\x86\xfa\x00V\x06\xfc\x00\xe5y\xae\x00\x89\"6\x008\xad\"\x00g\x93\xdc\x00U\xe8\xaa\x00\x82&8\x00\xca\xe7\x9b\x00Q\r\xa4\x00\x993\xb1\x00\xa9\xd7\x0e\x00i\x05H\x00e\xb2\xf0\x00\x7f\x88\xa7\x00\x88L\x97\x00\xf9\xd16\x00!\x92\xb3\x00{\x82J\x00\x98\xcf!\x00@\x9f\xdc\x00\xdcGU\x00\xe1t:\x00g\xebB\x00\xfe\x9d\xdf\x00^\xd4_\x00{g\xa4\x00\xba\xacz\x00U\xf6\xa2\x00+\x88#\x00A\xbaU\x00Yn\x08\x00!*\x86\x009G\x83\x00\x89\xe3\xe6\x00\xe5\x9e\xd4\x00I\xfb@\x00\xffV\xe9\x00\x1c\x0f\xca\x00\xc5Y\x8a\x00\x94\xfa+\x00\xd3\xc1\xc5\x00\x0f\xc5\xcf\x00\xdbZ\xae\x00G\xc5\x86\x00\x85Cb\x00!\x86;\x00,y\x94\x00\x10a\x87\x00*L{\x00\x80,\x1a\x00C\xbf\x12\x00\x88&\x90\x00x<\x89\x00\xa8\xc4\xe4\x00\xe5\xdb{\x00\xc4:\xc2\x00&\xf4\xea\x00\xf7g\x8a\x00\r\x92\xbf\x00e\xa3+\x00=\x93\xb1\x00\xbd|\x0b\x00\xa4Q\xdc\x00\'\xddc\x00i\xe1\xdd\x00\x9a\x94\x19\x00\xa8)\x95\x00h\xce(\x00\t\xed\xb4\x00D\x9f \x00N\x98\xca\x00p\x82c\x00~|#\x00\x0f\xb92\x00\xa7\xf5\x8e\x00\x14V\xe7\x00!\xf1\x08\x00\xb5\x9d*\x00o~M\x00\xa5\x19Q\x00\xb5\xf9\xab\x00\x82\xdf\xd6\x00\x96\xdda\x00\x166\x02\x00\xc4:\x9f\x00\x83\xa2\xa1\x00r\xedm\x009\x8dz\x00\x82\xb8\xa9\x00k2\\\x00F\'[\x00\x004\xed\x00\xd2\x00w\x00\xfc\xf4U\x00\x01YM\x00\xe0q\x80")
	rt_store_string(MEMORY_LIST[0], 47027,"@\xfb!\xf9?\x00\x00\x00\x00-Dt>\x00\x00\x00\x80\x98F\xf8<\x00\x00\x00`Q\xccx;\x00\x00\x00\x80\x83\x1b\xf09\x00\x00\x00@ %z8\x00\x00\x00\x80\"\x82\xe36\x00\x00\x00\x00\x1d\xf3i5\xd1t\x9e\x00W\x9d\xbd*\x80pR\x0f\xff\xff>\'\n\x00\x00\x00d\x00\x00\x00\xe8\x03\x00\x00\x10\'\x00\x00\xa0\x86\x01\x00@B\x0f\x00\x80\x96\x98\x00\x00\xe1\xf5\x05\x19\x00\x0b\x00\x19\x19\x19\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\n\n\x19\x19\x19\x03\n\x07\x00\x01\x00\t\x0b\x18\x00\x00\t\x06\x0b\x00\x00\x0b\x00\x06\x19\x00\x00\x00\x19\x19\x19")
	rt_store_string(MEMORY_LIST[0], 47217,"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x0b\r\x19\x19\x19\x00\r\x00\x00\x02\x00\t\x0e\x00\x00\x00\t\x00\x0e\x00\x00\x0e")
	rt_store_string(MEMORY_LIST[0], 47275,"\x0c")
	rt_store_string(MEMORY_LIST[0], 47287,"\x13\x00\x00\x00\x00\x13\x00\x00\x00\x00\t\x0c\x00\x00\x00\x00\x00\x0c\x00\x00\x0c")
	rt_store_string(MEMORY_LIST[0], 47333,"\x10")
	rt_store_string(MEMORY_LIST[0], 47345,"\x0f\x00\x00\x00\x04\x0f\x00\x00\x00\x00\t\x10\x00\x00\x00\x00\x00\x10\x00\x00\x10")
	rt_store_string(MEMORY_LIST[0], 47391,"\x12")
	rt_store_string(MEMORY_LIST[0], 47403,"\x11\x00\x00\x00\x00\x11\x00\x00\x00\x00\t\x12\x00\x00\x00\x00\x00\x12\x00\x00\x12\x00\x00\x1a\x00\x00\x00\x1a\x1a\x1a")
	rt_store_string(MEMORY_LIST[0], 47458,"\x1a\x00\x00\x00\x1a\x1a\x1a\x00\x00\x00\x00\x00\x00\t")
	rt_store_string(MEMORY_LIST[0], 47507,"\x14")
	rt_store_string(MEMORY_LIST[0], 47519,"\x17\x00\x00\x00\x00\x17\x00\x00\x00\x00\t\x14\x00\x00\x00\x00\x00\x14\x00\x00\x14")
	rt_store_string(MEMORY_LIST[0], 47565,"\x16")
	rt_store_string(MEMORY_LIST[0], 47577,"\x15\x00\x00\x00\x00\x15\x00\x00\x00\x00\t\x16\x00\x00\x00\x00\x00\x16\x00\x00\x16\x00\x000123456789ABCDEFN10__cxxabiv116__shim_type_infoE\x00\x00\x00\x00\xec\xbb\x00\x00\x00\xba\x00\x00\xdc\xbb\x00\x00N10__cxxabiv117__class_type_infoE\x00\x00\x00\xec\xbb\x00\x000\xba\x00\x00$\xba\x00\x00N10__cxxabiv120__si_class_type_infoE\x00\x00\x00\x00\xec\xbb\x00\x00`\xba\x00\x00T\xba\x00\x00\x00\x00\x00\x00\xd8\xba\x00\x00o\x00\x00\x00\xc7\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00\x00\xbb\x00\x00o\x00\x00\x00\xc9\x00\x00\x00\xca\x00\x00\x00St9exception\x00St9bad_alloc\x00\x00\x00\xec\xbb\x00\x00\xc9\xba\x00\x00\x0c\xbc\x00\x00St20bad_array_new_length\x00\x00\x00\x00\xec\xbb\x00\x00\xe4\xba\x00\x00\xd8\xba\x00\x00\x00\x00\x00\x000\xbb\x00\x00\x83\x00\x00\x00\xcb\x00\x00\x00\xcc\x00\x00\x00St11logic_error\x00\xec\xbb\x00\x00 \xbb\x00\x00\x0c\xbc\x00\x00\x00\x00\x00\x00d\xbb\x00\x00\x83\x00\x00\x00\xcd\x00\x00\x00\xcc\x00\x00\x00St12length_error\x00\x00\x00\x00\xec\xbb\x00\x00P\xbb\x00\x000\xbb\x00\x00\x00\x00\x00\x00\x98\xbb\x00\x00\x83\x00\x00\x00\xce\x00\x00\x00\xcc\x00\x00\x00St12out_of_range\x00\x00\x00\x00\xec\xbb\x00\x00\x84\xbb\x00\x000\xbb\x00\x00\x00\x00\x00\x00T\xba\x00\x00\xcf\x00\x00\x00\xd0\x00\x00\x00\xd1\x00\x00\x00\xd2\x00\x00\x00\xd3\x00\x00\x00\xd4\x00\x00\x00\xd5\x00\x00\x00\xd6\x00\x00\x00St9type_info\x00\x00\x00\x00\xac\xbb\x00\x00\xcc\xbb\x00\x00\x00\x00\x00\x00\x88\xba\x00\x00\xcf\x00\x00\x00\xd7\x00\x00\x00\xd1\x00\x00\x00\xd2\x00\x00\x00\xd3\x00\x00\x00\xd8\x00\x00\x00\xd9\x00\x00\x00\xda\x00\x00\x00\xac\xbb\x00\x00\xbc\xba\x00\x00\x00\x00\x00\x00\x0c\xbc\x00\x00o\x00\x00\x00\xdb\x00\x00\x00\xdc")
	rt_store_string(MEMORY_LIST[0], 48180,"\xdd\x00\x00\x00\xdd\x00\x00\x00\xde\x00\x00\x00\xde\x00\x00\x00\xde\x00\x00\x00\xde\x00\x00\x00\xde\x00\x00\x00\xde\x00\x00\x00\xdd\x00\x00\x00\xdd\x00\x00\x00\xde\x00\x00\x00\xdd\x00\x00\x00\xdd\x00\x00\x00\xdd\x00\x00\x00\xdd")
	rt_store_string(MEMORY_LIST[0], 48272,"\xde\x00\x00\x00\xde\x00\x00\x00\xdd\x00\x00\x00\xdd\x00\x00\x00\x00\x00\x00\x00\xdd\x00\x00\x00\x00\x00\x00\x00\xde")
	rt_store_string(MEMORY_LIST[0], 48448,"\xbf\x14\x00\x00\x00\x00\x00\x00e\x0f\x00\x00\x01")
	rt_store_string(MEMORY_LIST[0], 48472,"`\xc2\x01\x00\xc6\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\xba\x13\x00\x00\x00\x00\x00\x00,\x01\x00\x00\x00\x00\x00\x00#\x05\x00\x00`\xbd\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\xd9\x13\x00\x00p\xbd\x00\x00,\x01\x00\x00\x00\x00\x00\x00J\x05\x00\x00\x80\xbd\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf8\r\x00\x00\x90\xbd\x00\x00\x90\xbf\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x01\x00\x00\x00\"\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00.\x00\x00\x00\x01\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x000\x00\x00\x00\x01\x00\x00\x001\x00\x00\x00\x01\x00\x00\x002\x00\x00\x00\x01\x00\x00\x003\x00\x00\x00\x01\x00\x00\x004\x00\x00\x00\x01\x00\x00\x005\x00\x00\x00\x01\x00\x00\x005\x00\x00\x00\x83\x02\x00\x00\x01\x00\x00\x00\xbf\x0f\x00\x00\xa0\xbd\x00\x00\xe8\x03\x00\x00\x00\x00\x00\x00H\x06\x00\x00`\xbf\x00\x00\xe8\x03\x00\x00\x00\x00\x00\x00[\x06\x00\x00p\xbf\x00\x00d\x00\x00\x00\x00\x00\x00\x004\x06\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x88\x1b")
	rt_store_string(MEMORY_LIST[0], 49072,"\x8a\x0f\x00\x00\xa0\xbf\x00\x00\x00\x00\x00\x00\xe7\n\x00\x00\xac\xbf\x00\x00\x00\x00\x00\x00^\x1b\x00\x00\xb8\xbf\x00\x00\x00\x00\x00\x00V\x0e\x00\x00\xc4\xbf")
	rt_store_string(MEMORY_LIST[0], 49616,"\xd0\xbf")
end

--[[
return function(wasm)
	FUNC_LIST[0] = wasm["env"].func_list["__cxa_throw"]
	FUNC_LIST[1] = wasm["env"].func_list["_emscripten_memcpy_js"]
	FUNC_LIST[2] = wasm["env"].func_list["emscripten_resize_heap"]
	FUNC_LIST[3] = wasm["env"].func_list["_abort_js"]
	FUNC_LIST[4] = wasm["env"].func_list["_setitimer_js"]
	FUNC_LIST[5] = wasm["env"].func_list["_emscripten_runtime_keepalive_clear"]
	FUNC_LIST[6] = wasm["wasi_snapshot_preview1"].func_list["proc_exit"]
	run_init_code()
	memory_at_0 = MEMORY_LIST[0]
	return {
        rt = {
            rem = {
                i32 = rt_rem_i32,
                u64 = rt_rem_u64,
                i64 = rt_rem_i64,
            },
            eq = {
                i64 = rt_eq_i64,
            },
            shr = {
                u32 = rt_shr_u32,
                u64 = rt_shr_u64,
                i64 = rt_shr_i64,
                i32 = rt_shr_i32,
            },
            saturate = {
                u32_f64 = rt_saturate_u32_f64,
                u32_f32 = rt_saturate_u32_f64,
                u64_f64 = rt_saturate_u64_f64,
                u64_f32 = rt_saturate_u64_f64,
                i32_f64 = rt_saturate_i32_f64,
                i32_f32 = rt_saturate_i32_f64,
                i64_f64 = rt_saturate_i64_f64,
                i64_f32 = rt_saturate_i64_f64,
            },
            copysign = {
                f64 = rt_copysign_f64,
                f32 = rt_copysign_f64,
            },
            promote = {
                f64_f32 = no_op,
            },
            ne = {
                i64 = rt_ne_i64,
            },
            clz = {
                i64 = rt_clz_i64,
            },
            max = {
                f64 = rt_max_f64,
                f32 = rt_max_f64,
            },
            div = {
                i32 = rt_div_i32,
                u64 = rt_div_u64,
                i64 = rt_div_i64,
                u32 = rt_div_u32,
            },
            ge = {
                i32 = rt_ge_i32,
                u64 = rt_ge_u64,
                i64 = rt_ge_i64,
            },
            mul = {
                i32 = rt_mul_i32,
                i64 = rt_mul_i64,
            },
            extend = {
                i32_n8 = rt_extend_i32_n8,
                i64_n32 = rt_extend_i64_n32,
                i64_u32 = rt_extend_i64_u32,
                i64_n8 = rt_extend_i64_n8,
                i64_i32 = rt_extend_i64_i32,
                i32_n16 = rt_extend_i32_n16,
                i64_n16 = rt_extend_i64_n16,
            },
            load = {
                i32_i16 = rt_load_i32_i16,
                string = rt_load_string,
                i32_u8 = rt_load_i32_u8,
                i32 = rt_load_i32,
                f64 = rt_load_f64,
                i64_u16 = rt_load_i64_u16,
                i32_u16 = rt_load_i32_u16,
                i64_i32 = rt_load_i64_i32,
                f32 = rt_load_f32,
                i64 = rt_load_i64,
                i64_i16 = rt_load_i64_i16,
                i64_i8 = rt_load_i64_i8,
                i32_i8 = rt_load_i32_i8,
                i64_u32 = rt_load_i64_u32,
                i64_u8 = rt_load_i64_u8,
            },
            gt = {
                i32 = rt_gt_i32,
                u64 = rt_gt_u64,
                i64 = rt_gt_i64,
            },
            rotr = {
                i32 = rt_rotr_i32,
                i64 = rt_rotr_i64,
            },
            demote = {
                f32_f64 = no_op,
            },
            bnot = {
                i64 = rt_bit_not_i64,
            },
            allocator = {
                grow = rt_allocator_grow,
                size = rt_allocator_size,
                new = rt_allocator_new,
            },
            store = {
                i32_n8 = rt_store_i32_n8,
                string = rt_store_string,
                i64_n32 = rt_store_i64_n32,
                i32 = rt_store_i32,
                i64 = rt_store_i64,
                f32 = rt_store_f32,
                i64_n16 = rt_store_i64_n16,
                copy = rt_store_copy,
                i64_n8 = rt_store_i64_n8,
                f64 = rt_store_f64,
                i32_n16 = rt_store_i32_n16,
                fill = rt_store_fill,
            },
            min = {
                f64 = rt_min_f64,
                f32 = rt_min_f64,
            },
            convert = {
                f64_u64 = rt_convert_f64_u64,
                f32_i64 = rt_convert_f64_i64,
                f64_i64 = rt_convert_f64_i64,
                f32_u64 = rt_convert_f64_u64,
                f32_i32 = rt_convert_f64_i32,
                f64_i32 = rt_i64_into_u32,
                f64_u32 = no_op,
                f32_u32 = no_op,
            },
            lt = {
                i32 = rt_lt_i32,
                u64 = rt_lt_u64,
                i64 = rt_lt_i64,
            },
            sub = {
                i32 = rt_sub_i32,
                i64 = rt_sub_i64,
            },
            neg = {
                f64 = rt_neg_f64,
                f32 = rt_neg_f64,
            },
            wrap = {
                i32_i64 = rt_wrap_i32_i64,
            },
            truncate = {
                u32_f64 = rt_truncate_f64,
                u32_f32 = rt_truncate_f64,
                u64_f32 = rt_truncate_u64_f64,
                i64_f32 = rt_truncate_i64_f64,
                f32 = rt_truncate_f64,
                f64 = rt_truncate_f64,
                i32_f64 = rt_truncate_i32_f64,
                i32_f32 = rt_truncate_i32_f64,
                u64_f64 = rt_truncate_u64_f64,
                i64_f64 = rt_truncate_i64_f64,
            },
            bor = {
                i64 = rt_bit_or_i64,
            },
            shl = {
                i32 = rt_shl_i32,
                i64 = rt_shl_i64,
            },
            bxor = {
                i64 = rt_bit_xor_i64,
            },
            nearest = {
                f64 = rt_nearest_f32,
                f32 = rt_nearest_f32,
            },
            i64 = {
                bit_not = rt_bit_not_i64,
                ONE = rt_i64_ONE,
                multiply = rt_mul_i64,
                divide_signed = rt_div_i64,
                into_u64 = rt_convert_f64_u64,
                ZERO = rt_i64_ZERO,
                from_u32 = rt_i64_from_u32,
                bit_and = rt_bit_and_i64,
                is_zero = rt_i64_is_zero,
                is_less_signed = rt_lt_i64,
                is_negative = rt_i64_is_negative,
                divide_unsigned = rt_div_i64,
                is_greater_signed = rt_gt_i64,
                negate = rt_i64_negate,
                is_less_unsigned = rt_lt_u64,
                is_equal = rt_eq_i64,
                into_u32 = rt_i64_into_u32,
                shift_right_signed = rt_shr_i64,
                rotate_left = rt_rotl_i64,
                rotate_right = rt_rotr_i64,
                shift_right_unsigned = rt_shr_u64,
                from_u64 = rt_i64_from_u64,
                shift_left = rt_shl_i64,
                subtract = rt_sub_i64,
                bit_or = rt_bit_or_i64,
                is_greater_unsigned = rt_gt_u64,
                bit_xor = rt_bit_xor_i64,
                add = rt_add_i64,
            },
            popcnt = {
                i32 = rt_popcnt_i32,
                i64 = rt_popcnt_i64,
            },
            band = {
                i64 = rt_bit_and_i64,
            },
            le = {
                i32 = rt_le_i32,
                u64 = rt_le_u64,
                i64 = rt_le_i64,
            },
            ctz = {
                i64 = rt_ctz_i64,
            },
            reinterpret = {
                i64_f64 = rt_reinterpret_i64_f64,
                i32_f32 = rt_reinterpret_i32_f32,
                f64_i64 = rt_reinterpret_f64_i64,
                f32_i32 = rt_reinterpret_f32_i32,
            },
            rotl = {
                i32 = rt_rotl_i32,
                i64 = rt_rotl_i64,
            },
            add = {
                i32 = rt_add_i32,
                i64 = rt_add_i64,
            },
        },
		func_list = {
			["luau_compile"] = FUNC_LIST[275],
			["set_flag"] = FUNC_LIST[574],
			["set_all_flags"] = FUNC_LIST[581],
			["reset_flags"] = FUNC_LIST[583],
			["strlen"] = FUNC_LIST[544],
			["malloc"] = FUNC_LIST[553],
			["_emscripten_timeout"] = FUNC_LIST[770],
			["free"] = FUNC_LIST[555],
			["_emscripten_stack_restore"] = FUNC_LIST[563],
			["_emscripten_stack_alloc"] = FUNC_LIST[564],
			["emscripten_stack_get_current"] = FUNC_LIST[565],
			["__cxa_increment_exception_refcount"] = FUNC_LIST[739],
		},
		table_list = {
			["__indirect_function_table"] = TABLE_LIST[0],
		},
		memory_list = {
			["memory"] = MEMORY_LIST[0],
		},
		global_list = {
		},
	}
end
--]]

local cfns = {
	["luau_compile"] = FUNC_LIST[275],
	["set_flag"] = FUNC_LIST[574],
	["set_all_flags"] = FUNC_LIST[581],
	["reset_flags"] = FUNC_LIST[583],
	["strlen"] = FUNC_LIST[544],
	["malloc"] = FUNC_LIST[553],
	["_emscripten_timeout"] = FUNC_LIST[770],
	["free"] = FUNC_LIST[555],
	["_emscripten_stack_restore"] = FUNC_LIST[563],
	["_emscripten_stack_alloc"] = FUNC_LIST[564],
	["emscripten_stack_get_current"] = FUNC_LIST[565],
}

local macros do
	local LUAI_MAXCSTACK    = 8000
	local LUA_REGISTRYINDEX = -LUAI_MAXCSTACK - 2000
	local LUA_ENVIRONINDEX  = -LUAI_MAXCSTACK - 2001
	local LUA_GLOBALSINDEX  = -LUAI_MAXCSTACK - 2002
	local LUA_VECTOR_SIZE   = 3

	local LUA_TNIL           = 0
	local LUA_TBOOLEAN       = 1
	local LUA_TLIGHTUSERDATA = 2
	local LUA_TNUMBER        = 3
	local LUA_TVECTOR        = 4
	local LUA_TSTRING        = 5
	local LUA_TTABLE         = 6
	local LUA_TFUNCTION      = 7
	local LUA_TUSERDATA      = 8
	local LUA_TTHREAD        = 9
	local LUA_TBUFFER        = 10
	local LUA_TPROTO         = LUA_TPROTO
	local LUA_TUPVAL         = 12
	local LUA_TDEADKEY       = 13
	local LUA_T_COUNT        = LUA_TPROTO

	macros = {
		LUA_TNIL           = LUA_TNIL,
		LUA_TBOOLEAN       = LUA_TBOOLEAN,
		LUA_TLIGHTUSERDATA = LUA_TLIGHTUSERDATA,
		LUA_TNUMBER        = LUA_TNUMBER,
		LUA_TVECTOR        = LUA_TVECTOR,
		LUA_TSTRING        = LUA_TSTRING,
		LUA_TTABLE         = LUA_TTABLE,
		LUA_TFUNCTION      = LUA_TFUNCTION,
		LUA_TUSERDATA      = LUA_TUSERDATA,
		LUA_TTHREAD        = LUA_TTHREAD,
		LUA_TBUFFER        = LUA_TBUFFER,
		LUA_TPROTO         = LUA_TPROTO,  
		LUA_TUPVAL         = LUA_TUPVAL,
		LUA_TDEADKEY       = LUA_TDEADKEY,
		LUA_T_COUNT        = LUA_T_COUNT,

		LUA_OK        = 0,
		LUA_YIELD     = 1,
		LUA_ERRRUN    = 2,
		LUA_ERRSYNTAX = 3,
		LUA_ERRMEM    = 4,
		LUA_ERRERR    = 5,
		LUA_BREAK     = 6,

		LUA_CORUN = 0,
		LUA_COSUS = 1,
		LUA_CONOR = 2,
		LUA_COFIN = 3,
		LUA_COERR = 4,

		LUA_GCSTOP        = 0,
		LUA_GCRESTART     = 1,
		LUA_GCCOLLECT     = 2,
		LUA_GCCOUNT       = 3,
		LUA_GCCOUNTB      = 4,
		LUA_GCISRUNNING   = 5,
		LUA_GCSTEP        = 6,
		LUA_GCSETGOAL     = 7,
		LUA_GCSETSTEPMUL  = 8,
		LUA_GCSETSTEPSIZE = 9,

		LUA_IDSIZE            = 256,
		LUA_MINSTACK          = 20,
		LUAI_MAXCSTACK        = LUAI_MAXCSTACK,
		LUAI_MAXCALLS         = 20000,
		LUAI_MAXCCALLS        = 200,
		LUA_BUFFERSIZE        = 512,
		LUA_UTAG_LIMIT        = 128,
		LUA_LUTAG_LIMIT       = 128,
		LUA_SIZECLASSES       = 40,
		LUA_MEMORY_CATEGORIES = 256,
		LUA_MINSTRTABSIZE     = 32,
		LUA_MAXCAPTURES       = 32,
		LUA_VECTOR_SIZE       = 3,
		LUA_EXTRA_SIZE        = LUA_VECTOR_SIZE - 2,
		LUA_MULTRET           = -1,
		LUA_REGISTRYINDEX     = LUA_REGISTRYINDEX,
		LUA_ENVIRONINDEX      = LUA_ENVIRONINDEX,
		LUA_GLOBALSINDEX      = LUA_GLOBALSINDEX,
		LUA_TNONE             = -1,
		LUA_NOREF             = -1,
		LUA_REFNIL            = 0,
		LUA_COLIBNAME         = "coroutine",
		LUA_TABLIBNAME        = "table",
		LUA_OSLIBNAME         = "os",
		LUA_STRLIBNAME        = "string",
		LUA_BITLIBNAME        = "bit32",
		LUA_BUFFERLIBNAME     = "buffer",
		LUA_UTF8LIBNAME       = "utf8",
		LUA_MATHLIBNAME       = "math",
		LUA_DBLIBNAME         = "debug",

		lua_upvalueindex      = function(i)                      return LUA_GLOBALSINDEX - i end,
		lua_ispseudo          = function(i)                      return if (i <= LUA_REGISTRYINDEX) then 1 else 0 end,
		lua_getref            = function(L, ref)                 return cfns.lua_rawgeti(L, LUA_REGISTRYINDEX, ref) end,
		lua_tonumberx         = function(L, i)                   return cfns.lua_tonumberx(L, i, 0) end,
		lua_tointegerx        = function(L, i)                   return cfns.lua_tointegerx(L, i, 0) end,
		lua_tounsigned        = function(L, i)                   return cfns.lua_tounsignedx(L, i, 0) end,
		lua_pop               = function(L, n)                   return cfns.lua_settop(L, -n - 1) end,
		lua_newtable          = function(L)                      return cfns.lua_createtable(L, 0, 0) end,
		lua_newuserdata       = function(L, s)                   return cfns.lua_newuserdatatagged(L, s, 0) end,
		lua_strlen            = function(L, i)                   return cfns.lua_objlen(L, i) end,
		lua_isfunction        = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TFUNCTION) then 1 else 0 end,
		lua_istable           = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TTABLE) then 1 else 0 end,
		lua_islightuserdata   = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TLIGHTUSERDATA) then 1 else 0 end,
		lua_isnil             = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TNIL) then 1 else 0 end,
		lua_isboolean         = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TBOOLEAN) then 1 else 0 end,
		lua_isvector          = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TVECTOR) then 1 else 0 end,
		lua_isthread          = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TTHREAD) then 1 else 0 end,
		lua_isbuffer          = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TBUFFER) then 1 else 0 end,
		lua_isnone            = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TNONE) then 1 else 0 end,
		lua_isnoneornil       = function(L, n)                   return if (cfns.lua_type(L, (n)) <= LUA_TNIL) then 1 else 0 end,
		--// lua_pushliteral  = function(L, s)                   return cfns.lua_pushlstring(L, cstr(""), (sizeof(s) / sizeof(char)) - 1) end, --// sizeof needed, not sure atm
		lua_pushcfunction     = function(L, fn, debugname)       return cfns.lua_pushcclosurek(L, fn, debugname, 0, 0) end,
		lua_pushcclosure      = function(L, fn, debugname, nup)  return cfns.lua_pushcclosurek(L, fn, debugname, nup, 0) end,
		lua_pushlightuserdata = function(L, p)                   return cfns.lua_pushlightuserdatatagged(L, p, 0) end,
		lua_setglobal         = function(L, s)                   return cfns.lua_setfield(L, LUA_GLOBALSINDEX, s) end,
		lua_getglobal         = function(L, s)                   return cfns.lua_getfield(L, LUA_GLOBALSINDEX, s) end,
		lua_tostring          = function(L, i)                   return cfns.lua_tolstring(L, i, 0) end,
		lua_pushfstring       = function(L, fmt, ...)            return cfns.lua_pushfstringL(L, fmt, ...) end,
		luaL_error            = function(L, fmt, ...)            return cfns.luaL_errorL(L, fmt, ...) end,
		luaL_typeerror        = function(L, narg, tname)         return cfns.luaL_typeerrorL(L, narg, tname) end,
		luaL_argerror         = function(L, narg, extramsg)      return cfns.luaL_argerrorL(L, narg, extramsg) end,
		luaL_argcheck         = function(L, cond, arg, extramsg) return if cond == 1 then 0 else cfns.luaL_argerror(L, arg, extramsg) end,
		luaL_argexpected      = function(L, cond, arg, tname)    return if cond == 1 then 0 else cfns.luaL_typeerror(L, arg, tname) end,
		luaL_checkstring      = function(L, n)                   return cfns.luaL_checklstring(L, n, NULL) end,
		luaL_optstring        = function(L, n, d)                return cfns.luaL_optlstring(L, n, d, NULL) end,
		luaL_getmetatable     = function(L, n)                   return lua_getfield(L, LUA_REGISTRYINDEX, n) end,
		--// luaL_opt         = function(L, f, n, d)             return if (lua_isnoneornil(L, n) == 1) then d else f(L, n) end,
		--// luaL_addchar     = function(B, c)                   return ((void)((B)->p < (B)->end || luaL_prepbuffsize(B, 1)), (*(B)->p++ = (char)(c))) end,
		luaL_addstring        = function(B, s)                   return cfns.luaL_addlstring(B, s, cfns.strlen(s)) end,
	}
end

local rt = {
	rem = {
		i32 = rt_rem_i32,
		u64 = rt_rem_u64,
		i64 = rt_rem_i64,
	},
	eq = {
		i64 = rt_eq_i64,
	},
	shr = {
		u32 = rt_shr_u32,
		u64 = rt_shr_u64,
		i64 = rt_shr_i64,
		i32 = rt_shr_i32,
	},
	saturate = {
		u32_f64 = rt_saturate_u32_f64,
		u32_f32 = rt_saturate_u32_f64,
		u64_f64 = rt_saturate_u64_f64,
		u64_f32 = rt_saturate_u64_f64,
		i32_f64 = rt_saturate_i32_f64,
		i32_f32 = rt_saturate_i32_f64,
		i64_f64 = rt_saturate_i64_f64,
		i64_f32 = rt_saturate_i64_f64,
	},
	copysign = {
		f64 = rt_copysign_f64,
		f32 = rt_copysign_f64,
	},
	promote = {
		f64_f32 = no_op,
	},
	ne = {
		i64 = rt_ne_i64,
	},
	clz = {
		i64 = rt_clz_i64,
	},
	max = {
		f64 = rt_max_f64,
		f32 = rt_max_f64,
	},
	div = {
		i32 = rt_div_i32,
		u64 = rt_div_u64,
		i64 = rt_div_i64,
		u32 = rt_div_u32,
	},
	ge = {
		i32 = rt_ge_i32,
		u64 = rt_ge_u64,
		i64 = rt_ge_i64,
	},
	mul = {
		i32 = rt_mul_i32,
		i64 = rt_mul_i64,
	},
	extend = {
		i32_n8 = rt_extend_i32_n8,
		i64_n32 = rt_extend_i64_n32,
		i64_u32 = rt_extend_i64_u32,
		i64_n8 = rt_extend_i64_n8,
		i64_i32 = rt_extend_i64_i32,
		i32_n16 = rt_extend_i32_n16,
		i64_n16 = rt_extend_i64_n16,
	},
	load = {
		i32_i16 = rt_load_i32_i16,
		string = rt_load_string,
		i32_u8 = rt_load_i32_u8,
		i32 = rt_load_i32,
		f64 = rt_load_f64,
		i64_u16 = rt_load_i64_u16,
		i32_u16 = rt_load_i32_u16,
		i64_i32 = rt_load_i64_i32,
		f32 = rt_load_f32,
		i64 = rt_load_i64,
		i64_i16 = rt_load_i64_i16,
		i64_i8 = rt_load_i64_i8,
		i32_i8 = rt_load_i32_i8,
		i64_u32 = rt_load_i64_u32,
		i64_u8 = rt_load_i64_u8,
	},
	gt = {
		i32 = rt_gt_i32,
		u64 = rt_gt_u64,
		i64 = rt_gt_i64,
	},
	rotr = {
		i32 = rt_rotr_i32,
		i64 = rt_rotr_i64,
	},
	demote = {
		f32_f64 = no_op,
	},
	bnot = {
		i64 = rt_bit_not_i64,
	},
	allocator = {
		grow = rt_allocator_grow,
		size = rt_allocator_size,
		new = rt_allocator_new,
	},
	store = {
		i32_n8 = rt_store_i32_n8,
		string = rt_store_string,
		i64_n32 = rt_store_i64_n32,
		i32 = rt_store_i32,
		i64 = rt_store_i64,
		f32 = rt_store_f32,
		i64_n16 = rt_store_i64_n16,
		copy = rt_store_copy,
		i64_n8 = rt_store_i64_n8,
		f64 = rt_store_f64,
		i32_n16 = rt_store_i32_n16,
		fill = rt_store_fill,
	},
	min = {
		f64 = rt_min_f64,
		f32 = rt_min_f64,
	},
	convert = {
		f64_u64 = rt_convert_f64_u64,
		f32_i64 = rt_convert_f64_i64,
		f64_i64 = rt_convert_f64_i64,
		f32_u64 = rt_convert_f64_u64,
		f32_i32 = rt_convert_f64_i32,
		f64_i32 = rt_i64_into_u32,
		f64_u32 = no_op,
		f32_u32 = no_op,
	},
	lt = {
		i32 = rt_lt_i32,
		u64 = rt_lt_u64,
		i64 = rt_lt_i64,
	},
	sub = {
		i32 = rt_sub_i32,
		i64 = rt_sub_i64,
	},
	neg = {
		f64 = rt_neg_f64,
		f32 = rt_neg_f64,
	},
	wrap = {
		i32_i64 = rt_wrap_i32_i64,
	},
	truncate = {
		u32_f64 = rt_truncate_f64,
		u32_f32 = rt_truncate_f64,
		u64_f32 = rt_truncate_u64_f64,
		i64_f32 = rt_truncate_i64_f64,
		f32 = rt_truncate_f64,
		f64 = rt_truncate_f64,
		i32_f64 = rt_truncate_i32_f64,
		i32_f32 = rt_truncate_i32_f64,
		u64_f64 = rt_truncate_u64_f64,
		i64_f64 = rt_truncate_i64_f64,
	},
	bor = {
		i64 = rt_bit_or_i64,
	},
	shl = {
		i32 = rt_shl_i32,
		i64 = rt_shl_i64,
	},
	bxor = {
		i64 = rt_bit_xor_i64,
	},
	nearest = {
		f64 = rt_nearest_f32,
		f32 = rt_nearest_f32,
	},
	i64 = {
		bit_not = rt_bit_not_i64,
		ONE = rt_i64_ONE,
		multiply = rt_mul_i64,
		divide_signed = rt_div_i64,
		into_u64 = rt_convert_f64_u64,
		ZERO = rt_i64_ZERO,
		from_u32 = rt_i64_from_u32,
		bit_and = rt_bit_and_i64,
		is_zero = rt_i64_is_zero,
		is_less_signed = rt_lt_i64,
		is_negative = rt_i64_is_negative,
		divide_unsigned = rt_div_i64,
		is_greater_signed = rt_gt_i64,
		negate = rt_i64_negate,
		is_less_unsigned = rt_lt_u64,
		is_equal = rt_eq_i64,
		into_u32 = rt_i64_into_u32,
		shift_right_signed = rt_shr_i64,
		rotate_left = rt_rotl_i64,
		rotate_right = rt_rotr_i64,
		shift_right_unsigned = rt_shr_u64,
		from_u64 = rt_i64_from_u64,
		shift_left = rt_shl_i64,
		subtract = rt_sub_i64,
		bit_or = rt_bit_or_i64,
		is_greater_unsigned = rt_gt_u64,
		bit_xor = rt_bit_xor_i64,
		add = rt_add_i64,
	},
	popcnt = {
		i32 = rt_popcnt_i32,
		i64 = rt_popcnt_i64,
	},
	band = {
		i64 = rt_bit_and_i64,
	},
	le = {
		i32 = rt_le_i32,
		u64 = rt_le_u64,
		i64 = rt_le_i64,
	},
	ctz = {
		i64 = rt_ctz_i64,
	},
	reinterpret = {
		i64_f64 = rt_reinterpret_i64_f64,
		i32_f32 = rt_reinterpret_i32_f32,
		f64_i64 = rt_reinterpret_f64_i64,
		f32_i32 = rt_reinterpret_f32_i32,
	},
	rotl = {
		i32 = rt_rotl_i32,
		i64 = rt_rotl_i64,
	},
	add = {
		i32 = rt_add_i32,
		i64 = rt_add_i64,
	},
}

local timers = {}
local noExitRuntime = true
local rtKeepAliveCounter = 0
local abortWasm = false
local exitStatus = nil

local CException = {} do
	local CExcInternal = {}
	CExcInternal.__index = CExcInternal

	function CExcInternal:_UndecoratedName()
		local name_ptr = rt_load_i32(memory_at_0, self.ptr + 4);
		return rt_load_string(memory_at_0, name_ptr, cfns.strlen(name_ptr))
	end

	function CExcInternal:vfptr()
		local vfptr = rt_load_i32(memory_at_0, self.ptr);
		return vfptr
	end

	function CException.new(ptr)
		return setmetatable({ ptr = ptr }, CExcInternal)
	end
end

local function cstr(str)
	local strLen = #str
	local strPtr = cfns.malloc(strLen + 1)
	rt_store_string(memory_at_0, strPtr, str)
	rt_store_i32_n8(memory_at_0, strPtr + strLen, 0)
	return strPtr
end

local function stub(name, ret)
	return function(...)
		if (STUB_WARN) then print(`stub: {name} called`) end
		return ret
	end
end

local function invokeHandler(index)
	return function(...)
		local args = table.pack(...)
		local fnIndex = table.remove(args, 1)
		local sp = cfns.emscripten_stack_get_current()
		local e, stacktrace = "N/A", "N/A"
		local success = xpcall(function() return TABLE_LIST[0].data[fnIndex](table.unpack(args)) end, function(a) e = a; stacktrace = debug.traceback() end)
		if (not success) then
			cfns._emscripten_stack_restore(sp)
			assert(typeof(e) ~= "string", `{e}\n\ninvoke stacktrace:\n{stacktrace}`)
			cfns.setThrew(1, 0)
		end
	end
end

local function insertCFunction(f)
	local ptr = #TABLE_LIST[0].data + 1
	TABLE_LIST[0].data[ptr] = f
	return ptr
end

--// __cxa_throw
FUNC_LIST[0] = function(except, info, _dtor)
	local info = CException.new(info)
	assert(false, `exception occured in c: {info:_UndecoratedName()} ({info:vfptr()})`)
end

--// emscripten_memcpy_js (emscripten_memcpy_big)
FUNC_LIST[1] = function(destination, source, size)
	rt_store_copy(memory_at_0, destination, memory_at_0, source, size)
end

--// emscripten_resize_heap
FUNC_LIST[2] = function(_requestedSize)
	assert(false, "OOM")
end

--// _abort_js
FUNC_LIST[3] = function(reason)
	assert(false, `Aborted({reason})`)
end

--// _setitimer_js
FUNC_LIST[4] = function(which, timeoutMs)
	if (not task) then
		print("program is using _setitimer_js but task library not found, timers will NOT work.")
		return 0
	end

	if (timers[which]) then
		task.cancel(timers[which].thread)
		timers[which] = nil
	end
	if (not timeoutMs or timeoutMs == 0) then return 0 end

	local t = task.delay(function()
		timers[which] = nil
		if (abortWasm) then return end
		local success, e = pcall(function()
			cfns._emscripten_timeout(which, os.clock())
			if (not (noExitRuntime or rtKeepAliveCounter > 0)) then
				local success, e = pcall(FUNC_LIST[6], exitStatus)
				if (not success) then
					if (string.match(e, "ExitStatus:" ~= nil or e == "unwind")) then
						return exitStatus
					end
					assert(false, e)
				end
			end
		end)

		if (not success) then
			if (string.match(e, "ExitStatus:" ~= nil or e == "unwind")) then
				return
			end
			assert(false, e)
		end
	end, timeoutMs / 1000)

	timers[which] = { thread = t, timeoutMs = timeoutMs }
	return 0
end

--// _emscripten_runtime_keepalive_clear
FUNC_LIST[5] = function()
	noExitRuntime = false
	rtKeepAliveCounter = 0
	return
end

--// proc_exit
FUNC_LIST[6] = function(code)
	exitStatus = code
	if (not (noExitRuntime or rtKeepAliveCounter > 0)) then
		abortWasm = true
	end
	assert(false, `ExitStatus: Program exited with code ${code}`)
end

run_init_code()
memory_at_0 = MEMORY_LIST[0]

local function luau_compile(src: string, optLevel: number?, dbgLevel: number?, typInfLevel: number?, covLevel: number?)
	--// Source string
	local srcPtr = cstr(src)

	--// Struct lua_CompileOptions (see luau/Compiler/include/luacode.h)
	local compileOptsPtr = cfns.malloc(36)
	rt_store_i32(memory_at_0, compileOptsPtr + 0, optLevel or 1) --// int optimizationLevel
	rt_store_i32(memory_at_0, compileOptsPtr + 4, dbgLevel or 1) --// int debugLevel
	rt_store_i32(memory_at_0, compileOptsPtr + 8, typInfLevel or 0) --// int typeInfoLevel
	rt_store_i32(memory_at_0, compileOptsPtr + 12, covLevel or 0) --// int coverageLevel
	rt_store_i32(memory_at_0, compileOptsPtr + 16, 0) --// const char* vectorLib
	rt_store_i32(memory_at_0, compileOptsPtr + 20, 0) --// const char* vectorCtor
	rt_store_i32(memory_at_0, compileOptsPtr + 24, 0) --// const char* vectorType
	rt_store_i32(memory_at_0, compileOptsPtr + 28, 0) --// const char* const* mutableGlobals
	rt_store_i32(memory_at_0, compileOptsPtr + 32, 0) --// const char* const* userdataTypes

	--// Bytecode size
	local bcSizePtr = cfns.malloc(8)

	--// Compile
	local bcPtr = cfns.luau_compile(srcPtr, #src, compileOptsPtr, bcSizePtr)
	local bcSize = rt_load_i32(memory_at_0, bcSizePtr)
	local bc = rt_load_string(memory_at_0, bcPtr, bcSize)

	--// Cleanup
	cfns.free(srcPtr)
	cfns.free(bcPtr)
	cfns.free(bcSizePtr)
	cfns.free(compileOptsPtr)

	return bc, bcSize
end

local function luau_setflag(name: string, state: boolean)
	--// Flag name
	local flagNamePtr = cstr(name)

	--// Set the flag
	cfns.set_flag(flagNamePtr, if (state) then 1 else 0)

	--// Cleanup
	cfns.free(flagNamePtr)
	return
end

local function luau_setallflags(state: boolean)
	cfns.set_all_flags(if (state) then 1 else 0)
	return
end

local function luau_resetflags()
	cfns.reset_flags()
	return
end

return {
	luau_compile = luau_compile,
	luau_setflag = luau_setflag,
	luau_setallflags = luau_setallflags,
	luau_resetflags = luau_resetflags,
	macros = macros,
	wasm = {
		rt = rt,
		cfns = cfns,
		indirect_function_table = TABLE_LIST[0],
		memory = MEMORY_LIST[0],
		insertCFunction = insertCFunction,
		cstr = cstr
	}
}
end;
};
G2L_MODULES[G2L["7"]] = {
Closure = function()
    local script = G2L["7"];--!native
--[[
		For support or to check out our other projects, join us on the Bleu Pigs Discord:
		https://discord.gg/H73NsjfBbP
		---------------
		vLua 5.1 - Lua written in Lua Virtual Machine
		---------------
		vLua is a virtual machine and compiler for dynamically compiling and executing Lua.
		It'll work on both client and server, regardless of enabled state. This module is
		designed to be a drop in replacement, meaning you can do the following:
		
		Example:
			refer to github
		
		Please note, vLua IS SLOWER COMPARED TO vanilla Lua, although Luau does improve performance.
		Do not attempt to run performance intensive tasks without testing first, otherwise you
		may have a bad time.
		
		Changelog:
			[8/13/2022]
				- updated FiOne to latest release - https://github.com/Rerumu/FiOne/commit/b983f11a0a318dae6c7804161b1cbc3aa52a8236
				- removed link to Minecraft server Discord
				- added link to Bleu Pigs General Discord
			[1/18/2022]
				- updated FiOne to latest release - https://github.com/Rerumu/FiOne/commit/900413a8491a44daa7770d799c85ad6df8610eea
				- added link to Minecraft server Discord
			[1/1/2022]
				- fixed environment not being properly set for compiled function
			[11/12/2021]
				- removed previous changelogs
				- updated FiOne to latest release - https://github.com/Rerumu/FiOne/blob/f443116e947e5bb3fe8bb7e6abca78214a245145/source.lua
				- fixed attempt to call a nil value error
		
		Credits:
			- FiOne LBI (created by same author as Rerubi) - https://github.com/Rerumu/FiOne
			- Yueliang 5 (Lua compiler in Lua) - http://yueliang.luaforge.net/
			- Moonshine (improved version of Yeuliang) - https://github.com/gamesys/moonshine
]]

local Yueliang = require(script:WaitForChild("Compiler"))
local FiOne = require(script:WaitForChild("Interpreter"))

local luaZ = Yueliang.luaZ
local luaY = Yueliang.luaY
local luaX = Yueliang.luaX
local luaP = Yueliang.luaP
local luaU = Yueliang.luaU
local luaK = Yueliang.luaK

local LuaState = Yueliang.LuaState

local function to1BasedIndex(tbl)
	local tbl = table.move(tbl, 0, #tbl + (tbl[0] and 1 or 0), 1)
	tbl[0] = nil

	return tbl
end

local function protoConvert(proto, opRemap, opType, opMode)
	local const = table.create(#proto.k + 1)
	proto.code, proto.lines, proto.subs = to1BasedIndex(proto.code), to1BasedIndex(proto.lineinfo), to1BasedIndex(proto.p)
	proto.lineinfo, proto.p = nil, nil
	proto.max_stack, proto.maxstacksize = proto.maxstacksize, nil
	proto.num_param, proto.numparams = proto.numparams, nil
	proto.num_upval, proto.sizeupvalues = proto.sizeupvalues, nil
	proto.sizecode, proto.sizek, proto.sizelineinfo, proto.sizelocvars, proto.sizep, proto.nups = nil, nil, nil, nil, nil, nil -- Clean up garbage values

	for i, v in to1BasedIndex(proto.k) do
		const[i] = v.value
	end

	proto.const, proto.k = const, nil

	for i, v in proto.code do
		local op = v.OP
		v.op, v.OP = opRemap[op], nil
		local regType = opType[op]
		local mode = opMode[op]

		if regType == "ABC" then
			v.is_KB = mode.b == "OpArgK" and v.B > 0xFF -- post process optimization
			v.is_KC = mode.c == "OpArgK" and v.C > 0xFF

			if op == 10 then -- decode NEWTABLE array size, store it as constant value
				local e = bit32.band(bit32.rshift(v.B, 3), 31)
				if e == 0 then
					v.const = v.B
				else
					v.const = bit32.lshift(bit32.band(v.B, 7) + 8, e - 1)
				end
			end
		elseif regType == "ABx" then
			v.is_K = mode.b == "OpArgK"
		elseif regType == "AsBx" then
			v.sBx, v.Bx = v.Bx - 131071, nil -- Fix for signed registers being treated as unsigned 18 bit registers
		end

		if v.is_K then
			v.const = proto.const[v.Bx + 1] -- offset for 1 based index
		else
			if v.is_KB then v.const_B = proto.const[v.B - 0xFF] end

			if v.is_KC then v.const_C = proto.const[v.C - 0xFF] end
		end
	end

	for _, v in proto.subs do
		protoConvert(v, opRemap, opType, opMode)
	end
end

local function load(source, env)
	local executable
	local env = env or getfenv(2)
	local name = (env.script and env.script:GetFullName())
	local ran, failureReason = pcall(function()
		name = name or 'compiled-lua'
		local zio = luaZ:init(luaZ:make_getF(source), nil)
		if not zio then return error("no zio!") end
		local func = luaY:parser(LuaState, zio, nil, "@"..name)
		protoConvert(func, FiOne.OPCODE_RM, FiOne.OPCODE_T, FiOne.OPCODE_M)
		executable = FiOne.wrap_state(func, env)
	end)
	if ran then
		return setfenv(executable, env)
	else
		return nil, failureReason
	end
end

return load
end;
};
G2L_MODULES[G2L["8"]] = {
Closure = function()
    local script = G2L["8"];--!strict
--!optimize 2
--!native

-- Adapted from the amazing Yueliang project
-- http://yueliang.luaforge.net/


--[[--------------------------------------------------------------------

luac.lua
Primitive luac in Lua
This file is part of Yueliang.

Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
The COPYRIGHT file describes the conditions
under which this software may be distributed.

See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * based on luac.lua in the test directory of the 5.1.2 distribution
-- * usage: lua luac.lua file.lua
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- load and initialize the required modules
------------------------------------------------------------------------
local luaZ = {}
local luaY = {}
local luaX = {}
local luaP = {}
local luaU = {}
local luaK = {}
local size_size_t = 8


-- currently asserts are enabled because the codebase hasn't been tested
-- much (if you don't want asserts, just comment them out)
local function lua_assert(test)
	if not test then error("assertion failed!") end
end



-- dofile("lzio.lua")


------------------------------------------------------------------------
-- * reader() should return a string, or nil if nothing else to parse.
--   Additional data can be set only during stream initialization
-- * Readers are handled in lauxlib.c, see luaL_load(file|buffer|string)
-- * LUAL_BUFFERSIZE=BUFSIZ=512 in make_getF() (located in luaconf.h)
-- * Original Reader typedef:
--   const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
-- * This Lua chunk reader implementation:
--   returns string or nil, no arguments to function
------------------------------------------------------------------------

------------------------------------------------------------------------
-- create a chunk reader from a source string
------------------------------------------------------------------------
function luaZ:make_getS(buff)
	local b = buff
	return function() -- chunk reader anonymous function here
		if not b then return nil end
		local data = b
		b = nil
		return data
	end
end

------------------------------------------------------------------------
-- create a chunk reader from a source file
------------------------------------------------------------------------
-- function luaZ:make_getF(filename)
--   local LUAL_BUFFERSIZE = 512
--   local h = io.open(filename, "r")
--   if not h then return nil end
--   return function() -- chunk reader anonymous function here
--     if not h or io.type(h) == "closed file" then return nil end
--     local buff = h:read(LUAL_BUFFERSIZE)
--     if not buff then h:close(); h = nil end
--     return buff
--   end
-- end

function luaZ:make_getF(source)
	local LUAL_BUFFERSIZE = 512
	local pos = 1

	return function() -- chunk reader anonymous function here
		local buff = source:sub(pos, pos + LUAL_BUFFERSIZE - 1)
		pos = math.min(#source + 1, pos + LUAL_BUFFERSIZE)
		return buff
	end
end


------------------------------------------------------------------------
-- creates a zio input stream
-- returns the ZIO structure, z
------------------------------------------------------------------------
function luaZ:init(reader, data)
	if not reader then return end
	local z = {}
	z.reader = reader
	z.data = data or ""
	z.name = name
	-- set up additional data for reading
	if not data or data == "" then z.n = 0 else z.n = #data end
	z.p = 0
	return z
end

------------------------------------------------------------------------
-- fill up input buffer
------------------------------------------------------------------------
function luaZ:fill(z)
	local buff = z.reader()
	z.data = buff
	if not buff or buff == "" then return "EOZ" end
	z.n, z.p = #buff - 1, 1
	return string.sub(buff, 1, 1)
end

------------------------------------------------------------------------
-- get next character from the input stream
-- * local n, p are used to optimize code generation
------------------------------------------------------------------------
function luaZ:zgetc(z)
	local n, p = z.n, z.p + 1
	if n > 0 then
		z.n, z.p = n - 1, p
		return string.sub(z.data, p, p)
	else
		return self:fill(z)
	end
end





-- dofile("llex.lua")

-- FIRST_RESERVED is not required as tokens are manipulated as strings
-- TOKEN_LEN deleted; maximum length of a reserved word not needed

------------------------------------------------------------------------
-- "ORDER RESERVED" deleted; enumeration in one place: luaX.RESERVED
------------------------------------------------------------------------

-- terminal symbols denoted by reserved words: TK_AND to TK_WHILE
-- other terminal symbols: TK_NAME to TK_EOS
luaX.RESERVED = [[
TK_AND and
TK_BREAK break
TK_DO do
TK_ELSE else
TK_ELSEIF elseif
TK_END end
TK_FALSE false
TK_FOR for
TK_FUNCTION function
TK_IF if
TK_IN in
TK_LOCAL local
TK_NIL nil
TK_NOT not
TK_OR or
TK_REPEAT repeat
TK_RETURN return
TK_THEN then
TK_TRUE true
TK_UNTIL until
TK_WHILE while
TK_CONCAT ..
TK_DOTS ...
TK_EQ ==
TK_GE >=
TK_LE <=
TK_NE ~=
TK_NAME <name>
TK_NUMBER <number>
TK_STRING <string>
TK_EOS <eof>]]

-- NUM_RESERVED is not required; number of reserved words

--[[--------------------------------------------------------------------
-- Instead of passing seminfo, the Token struct (e.g. ls.t) is passed
-- so that lexer functions can use its table element, ls.t.seminfo
--
-- SemInfo (struct no longer needed, a mixed-type value is used)
--
-- Token (struct of ls.t and ls.lookahead):
--   token  -- token symbol
--   seminfo  -- semantics information
--
-- LexState (struct of ls; ls is initialized by luaX:setinput):
--   current  -- current character (charint)
--   linenumber  -- input line counter
--   lastline  -- line of last token 'consumed'
--   t  -- current token (table: struct Token)
--   lookahead  -- look ahead token (table: struct Token)
--   fs  -- 'FuncState' is private to the parser
--   L -- LuaState
--   z  -- input stream
--   buff  -- buffer for tokens
--   source  -- current source name
--   decpoint -- locale decimal point
--   nestlevel  -- level of nested non-terminals
----------------------------------------------------------------------]]

-- luaX.tokens (was luaX_tokens) is now a hash; see luaX:init

luaX.MAXSRC = 80
luaX.MAX_INT = 2147483645       -- constants from elsewhere (see above)
luaX.LUA_QS = "'%s'"
luaX.LUA_COMPAT_LSTR = 1
--luaX.MAX_SIZET = 4294967293

------------------------------------------------------------------------
-- initialize lexer
-- * original luaX_init has code to create and register token strings
-- * luaX.tokens: TK_* -> token
-- * luaX.enums:  token -> TK_* (used in luaX:llex)
------------------------------------------------------------------------
function luaX:init()
	local tokens, enums = {}, {}
	for v in string.gmatch(self.RESERVED, "[^\n]+") do
		local _, _, tok, str = string.find(v, "(%S+)%s+(%S+)")
		tokens[tok] = str
		enums[str] = tok
	end
	self.tokens = tokens
	self.enums = enums
end

------------------------------------------------------------------------
-- returns a suitably-formatted chunk name or id
-- * from lobject.c, used in llex.c and ldebug.c
-- * the result, out, is returned (was first argument)
------------------------------------------------------------------------
function luaX:chunkid(source, bufflen)
	local out
	local first = string.sub(source, 1, 1)
	if first == "=" then
		out = string.sub(source, 2, bufflen)  -- remove first char
	else  -- out = "source", or "...source"
		if first == "@" then
			source = string.sub(source, 2)  -- skip the '@'
			bufflen = bufflen - #" '...' "
			local l = #source
			out = ""
			if l > bufflen then
				source = string.sub(source, 1 + l - bufflen)  -- get last part of file name
				out = out.."..."
			end
			out = out..source
		else  -- out = [string "string"]
			local len = string.find(source, "[\n\r]")  -- stop at first newline
			len = len and (len - 1) or #source
			bufflen = bufflen - #(" [string \"...\"] ")
			if len > bufflen then len = bufflen end
			out = "[string \""
			if len < #source then  -- must truncate?
				out = out..string.sub(source, 1, len).."..."
			else
				out = out..source
			end
			out = out.."\"]"
		end
	end
	return out
end

--[[--------------------------------------------------------------------
-- Support functions for lexer
-- * all lexer errors eventually reaches lexerror:
		 syntaxerror -> lexerror
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- look up token and return keyword if found (also called by parser)
------------------------------------------------------------------------
function luaX:token2str(ls, token)
	if string.sub(token, 1, 3) ~= "TK_" then
		if string.find(token, "%c") then
			return string.format("char(%d)", string.byte(token))
		end
		return token
	else
		return self.tokens[token]
	end
end

------------------------------------------------------------------------
-- throws a lexer error
-- * txtToken has been made local to luaX:lexerror
-- * can't communicate LUA_ERRSYNTAX, so it is unimplemented
------------------------------------------------------------------------
function luaX:lexerror(ls, msg, token)
	local function txtToken(ls, token)
		if token == "TK_NAME" or
			token == "TK_STRING" or
			token == "TK_NUMBER" then
			return ls.buff
		else
			return self:token2str(ls, token)
		end
	end
	local buff = self:chunkid(ls.source, self.MAXSRC)
	local msg = string.format("%s:%d: %s", buff, ls.linenumber, msg)
	if token then
		msg = string.format("%s near "..self.LUA_QS, msg, txtToken(ls, token))
	end
	-- luaD_throw(ls->L, LUA_ERRSYNTAX)
	error(msg)
end

------------------------------------------------------------------------
-- throws a syntax error (mainly called by parser)
-- * ls.t.token has to be set by the function calling luaX:llex
--   (see luaX:next and luaX:lookahead elsewhere in this file)
------------------------------------------------------------------------
function luaX:syntaxerror(ls, msg)
	self:lexerror(ls, msg, ls.t.token)
end

------------------------------------------------------------------------
-- move on to next line
------------------------------------------------------------------------
function luaX:currIsNewline(ls)
	return ls.current == "\n" or ls.current == "\r"
end

function luaX:inclinenumber(ls)
	local old = ls.current
	-- lua_assert(currIsNewline(ls))
	self:nextc(ls)  -- skip '\n' or '\r'
	if self:currIsNewline(ls) and ls.current ~= old then
		self:nextc(ls)  -- skip '\n\r' or '\r\n'
	end
	ls.linenumber = ls.linenumber + 1
	if ls.linenumber >= self.MAX_INT then
		self:syntaxerror(ls, "chunk has too many lines")
	end
end

------------------------------------------------------------------------
-- initializes an input stream for lexing
-- * if ls (the lexer state) is passed as a table, then it is filled in,
--   otherwise it has to be retrieved as a return value
-- * LUA_MINBUFFER not used; buffer handling not required any more
------------------------------------------------------------------------
function luaX:setinput(L, ls, z, source)
	if not ls then ls = {} end  -- create struct
	if not ls.lookahead then ls.lookahead = {} end
	if not ls.t then ls.t = {} end
	ls.decpoint = "."
	ls.L = L
	ls.lookahead.token = "TK_EOS"  -- no look-ahead token
	ls.z = z
	ls.fs = nil
	ls.linenumber = 1
	ls.lastline = 1
	ls.source = source
	self:nextc(ls)  -- read first char
end

--[[--------------------------------------------------------------------
-- LEXICAL ANALYZER
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks if current character read is found in the set 'set'
------------------------------------------------------------------------
function luaX:check_next(ls, set)
	if not string.find(set, ls.current, 1, 1) then
		return false
	end
	self:save_and_next(ls)
	return true
end

------------------------------------------------------------------------
-- retrieve next token, checking the lookahead buffer if necessary
-- * note that the macro next(ls) in llex.c is now luaX:nextc
-- * utilized used in lparser.c (various places)
------------------------------------------------------------------------
function luaX:next(ls)
	ls.lastline = ls.linenumber
	if ls.lookahead.token ~= "TK_EOS" then  -- is there a look-ahead token?
		-- this must be copy-by-value
		ls.t.seminfo = ls.lookahead.seminfo  -- use this one
		ls.t.token = ls.lookahead.token
		ls.lookahead.token = "TK_EOS"  -- and discharge it
	else
		ls.t.token = self:llex(ls, ls.t)  -- read next token
	end
end

------------------------------------------------------------------------
-- fill in the lookahead buffer
-- * utilized used in lparser.c:constructor
------------------------------------------------------------------------
function luaX:lookahead(ls)
	-- lua_assert(ls.lookahead.token == "TK_EOS")
	ls.lookahead.token = self:llex(ls, ls.lookahead)
end

------------------------------------------------------------------------
-- gets the next character and returns it
-- * this is the next() macro in llex.c; see notes at the beginning
------------------------------------------------------------------------
function luaX:nextc(ls)
	local c = luaZ:zgetc(ls.z)
	ls.current = c
	return c
end

------------------------------------------------------------------------
-- saves the given character into the token buffer
-- * buffer handling code removed, not used in this implementation
-- * test for maximum token buffer length not used, makes things faster
------------------------------------------------------------------------

function luaX:save(ls, c)
	local buff = ls.buff
	-- if you want to use this, please uncomment luaX.MAX_SIZET further up
	--if #buff > self.MAX_SIZET then
	--  self:lexerror(ls, "lexical element too long")
	--end
	ls.buff = buff..c
end

------------------------------------------------------------------------
-- save current character into token buffer, grabs next character
-- * like luaX:nextc, returns the character read for convenience
------------------------------------------------------------------------
function luaX:save_and_next(ls)
	self:save(ls, ls.current)
	return self:nextc(ls)
end

------------------------------------------------------------------------
-- LUA_NUMBER
-- * luaX:read_numeral is the main lexer function to read a number
-- * luaX:str2d, luaX:buffreplace, luaX:trydecpoint are support functions
------------------------------------------------------------------------

------------------------------------------------------------------------
-- string to number converter (was luaO_str2d from lobject.c)
-- * returns the number, nil if fails (originally returns a boolean)
-- * conversion function originally lua_str2number(s,p), a macro which
--   maps to the strtod() function by default (from luaconf.h)
------------------------------------------------------------------------
function luaX:str2d(s)
	local result = tonumber(s)
	if result then return result end
	-- conversion failed
	if string.lower(string.sub(s, 1, 2)) == "0x" then  -- maybe an hexadecimal constant?
		result = tonumber(s, 16)
		if result then return result end  -- most common case
		-- Was: invalid trailing characters?
		-- In C, this function then skips over trailing spaces.
		-- true is returned if nothing else is found except for spaces.
		-- If there is still something else, then it returns a false.
		-- All this is not necessary using Lua's tonumber.
	end
	return nil
end

------------------------------------------------------------------------
-- single-character replacement, for locale-aware decimal points
------------------------------------------------------------------------
function luaX:buffreplace(ls, from, to)
	local result, buff = "", ls.buff
	for p = 1, #buff do
		local c = string.sub(buff, p, p)
		if c == from then c = to end
		result = result..c
	end
	ls.buff = result
end

------------------------------------------------------------------------
-- Attempt to convert a number by translating '.' decimal points to
-- the decimal point character used by the current locale. This is not
-- needed in Yueliang as Lua's tonumber() is already locale-aware.
-- Instead, the code is here in case the user implements localeconv().
------------------------------------------------------------------------
function luaX:trydecpoint(ls, Token)
	-- format error: try to update decimal point separator
	local old = ls.decpoint
	-- translate the following to Lua if you implement localeconv():
	-- struct lconv *cv = localeconv();
	-- ls->decpoint = (cv ? cv->decimal_point[0] : '.');
	self:buffreplace(ls, old, ls.decpoint)  -- try updated decimal separator
	local seminfo = self:str2d(ls.buff)
	Token.seminfo = seminfo
	if not seminfo then
		-- format error with correct decimal point: no more options
		self:buffreplace(ls, ls.decpoint, ".")  -- undo change (for error message)
		self:lexerror(ls, "malformed number", "TK_NUMBER")
	end
end

------------------------------------------------------------------------
-- main number conversion function
-- * "^%w$" needed in the scan in order to detect "EOZ"
------------------------------------------------------------------------
function luaX:read_numeral(ls, Token)
	-- lua_assert(string.find(ls.current, "%d"))
	repeat
		self:save_and_next(ls)
	until string.find(ls.current, "%D") and ls.current ~= "."
	if self:check_next(ls, "Ee") then  -- 'E'?
		self:check_next(ls, "+-")  -- optional exponent sign
	end
	while string.find(ls.current, "^%w$") or ls.current == "_" do
		self:save_and_next(ls)
	end
	self:buffreplace(ls, ".", ls.decpoint)  -- follow locale for decimal point
	local seminfo = self:str2d(ls.buff)
	Token.seminfo = seminfo
	if not seminfo then  -- format error?
		self:trydecpoint(ls, Token) -- try to update decimal point separator
	end
end

------------------------------------------------------------------------
-- count separators ("=") in a long string delimiter
-- * used by luaX:read_long_string
------------------------------------------------------------------------
function luaX:skip_sep(ls)
	local count = 0
	local s = ls.current
	-- lua_assert(s == "[" or s == "]")
	self:save_and_next(ls)
	while ls.current == "=" do
		self:save_and_next(ls)
		count = count + 1
	end
	return (ls.current == s) and count or (-count) - 1
end

------------------------------------------------------------------------
-- reads a long string or long comment
------------------------------------------------------------------------
function luaX:read_long_string(ls, Token, sep)
	local cont = 0
	self:save_and_next(ls)  -- skip 2nd '['
	if self:currIsNewline(ls) then  -- string starts with a newline?
		self:inclinenumber(ls)  -- skip it
	end
	while true do
		local c = ls.current
		if c == "EOZ" then
			self:lexerror(ls, Token and "unfinished long string" or
				"unfinished long comment", "TK_EOS")
		elseif c == "[" then
			--# compatibility code start
			if self.LUA_COMPAT_LSTR then
				if self:skip_sep(ls) == sep then
					self:save_and_next(ls)  -- skip 2nd '['
					cont = cont + 1
					--# compatibility code start
					if self.LUA_COMPAT_LSTR == 1 then
						if sep == 0 then
							self:lexerror(ls, "nesting of [[...]] is deprecated", "[")
						end
					end
					--# compatibility code end
				end
			end
			--# compatibility code end
		elseif c == "]" then
			if self:skip_sep(ls) == sep then
				self:save_and_next(ls)  -- skip 2nd ']'
				--# compatibility code start
				if self.LUA_COMPAT_LSTR and self.LUA_COMPAT_LSTR == 2 then
					cont = cont - 1
					if sep == 0 and cont >= 0 then break end
				end
				--# compatibility code end
				break
			end
		elseif self:currIsNewline(ls) then
			self:save(ls, "\n")
			self:inclinenumber(ls)
			if not Token then ls.buff = "" end -- avoid wasting space
		else  -- default
			if Token then
				self:save_and_next(ls)
			else
				self:nextc(ls)
			end
		end--if c
	end--while
	if Token then
		local p = 3 + sep
		Token.seminfo = string.sub(ls.buff, p, -p)
	end
end

------------------------------------------------------------------------
-- reads a string
-- * has been restructured significantly compared to the original C code
------------------------------------------------------------------------

function luaX:read_string(ls, del, Token)
	self:save_and_next(ls)
	while ls.current ~= del do
		local c = ls.current
		if c == "EOZ" then
			self:lexerror(ls, "unfinished string", "TK_EOS")
		elseif self:currIsNewline(ls) then
			self:lexerror(ls, "unfinished string", "TK_STRING")
		elseif c == "\\" then
			c = self:nextc(ls)  -- do not save the '\'
			if self:currIsNewline(ls) then  -- go through
				self:save(ls, "\n")
				self:inclinenumber(ls)
			elseif c ~= "EOZ" then -- will raise an error next loop
				-- escapes handling greatly simplified here:
				local i = string.find("abfnrtv", c, 1, 1)
				if i then
					self:save(ls, string.sub("\a\b\f\n\r\t\v", i, i))
					self:nextc(ls)
				elseif not string.find(c, "%d") then
					self:save_and_next(ls)  -- handles \\, \", \', and \?
				else  -- \xxx
					c, i = 0, 0
					repeat
						c = 10 * c + ls.current
						self:nextc(ls)
						i = i + 1
					until i >= 3 or not string.find(ls.current, "%d")
					if c > 255 then  -- UCHAR_MAX
						self:lexerror(ls, "escape sequence too large", "TK_STRING")
					end
					self:save(ls, string.char(c))
				end
			end
		else
			self:save_and_next(ls)
		end--if c
	end--while
	self:save_and_next(ls)  -- skip delimiter
	Token.seminfo = string.sub(ls.buff, 2, -2)
end

------------------------------------------------------------------------
-- main lexer function
------------------------------------------------------------------------
function luaX:llex(ls, Token)
	ls.buff = ""
	while true do
		local c = ls.current
		----------------------------------------------------------------
		if self:currIsNewline(ls) then
			self:inclinenumber(ls)
			----------------------------------------------------------------
		elseif c == "-" then
			c = self:nextc(ls)
			if c ~= "-" then return "-" end
			-- else is a comment
			local sep = -1
			if self:nextc(ls) == '[' then
				sep = self:skip_sep(ls)
				ls.buff = ""  -- 'skip_sep' may dirty the buffer
			end
			if sep >= 0 then
				self:read_long_string(ls, nil, sep)  -- long comment
				ls.buff = ""
			else  -- else short comment
				while not self:currIsNewline(ls) and ls.current ~= "EOZ" do
					self:nextc(ls)
				end
			end
			----------------------------------------------------------------
		elseif c == "[" then
			local sep = self:skip_sep(ls)
			if sep >= 0 then
				self:read_long_string(ls, Token, sep)
				return "TK_STRING"
			elseif sep == -1 then
				return "["
			else
				self:lexerror(ls, "invalid long string delimiter", "TK_STRING")
			end
			----------------------------------------------------------------
		elseif c == "=" then
			c = self:nextc(ls)
			if c ~= "=" then return "="
			else self:nextc(ls); return "TK_EQ" end
			----------------------------------------------------------------
		elseif c == "<" then
			c = self:nextc(ls)
			if c ~= "=" then return "<"
			else self:nextc(ls); return "TK_LE" end
			----------------------------------------------------------------
		elseif c == ">" then
			c = self:nextc(ls)
			if c ~= "=" then return ">"
			else self:nextc(ls); return "TK_GE" end
			----------------------------------------------------------------
		elseif c == "~" then
			c = self:nextc(ls)
			if c ~= "=" then return "~"
			else self:nextc(ls); return "TK_NE" end
			----------------------------------------------------------------
		elseif c == "\"" or c == "'" then
			self:read_string(ls, c, Token)
			return "TK_STRING"
			----------------------------------------------------------------
		elseif c == "." then
			c = self:save_and_next(ls)
			if self:check_next(ls, ".") then
				if self:check_next(ls, ".") then
					return "TK_DOTS"   -- ...
				else return "TK_CONCAT"   -- ..
				end
			elseif not string.find(c, "%d") then
				return "."
			else
				self:read_numeral(ls, Token)
				return "TK_NUMBER"
			end
			----------------------------------------------------------------
		elseif c == "EOZ" then
			return "TK_EOS"
			----------------------------------------------------------------
		else  -- default
			if string.find(c, "%s") then
				-- lua_assert(self:currIsNewline(ls))
				self:nextc(ls)
			elseif string.find(c, "%d") then
				self:read_numeral(ls, Token)
				return "TK_NUMBER"
			elseif string.find(c, "[_%a]") then
				-- identifier or reserved word
				repeat
					c = self:save_and_next(ls)
				until c == "EOZ" or not string.find(c, "[_%w]")
				local ts = ls.buff
				local tok = self.enums[ts]
				if tok then return tok end  -- reserved word?
				Token.seminfo = ts
				return "TK_NAME"
			else
				self:nextc(ls)
				return c  -- single-char tokens (+ - / ...)
			end
			----------------------------------------------------------------
		end--if c
	end--while
end





--dofile("lopcodes.lua")


--[[
===========================================================================
	We assume that instructions are unsigned numbers.
	All instructions have an opcode in the first 6 bits.
	Instructions can have the following fields:
				'A' : 8 bits
				'B' : 9 bits
				'C' : 9 bits
				'Bx' : 18 bits ('B' and 'C' together)
				'sBx' : signed Bx

	A signed argument is represented in excess K; that is, the number
	value is the unsigned value minus K. K is exactly the maximum value
	for that argument (so that -max is represented by 0, and +max is
	represented by 2*max), which is half the maximum for the corresponding
	unsigned argument.
===========================================================================
--]]

luaP.OpMode = { iABC = 0, iABx = 1, iAsBx = 2 }  -- basic instruction format

------------------------------------------------------------------------
-- size and position of opcode arguments.
-- * WARNING size and position is hard-coded elsewhere in this script
------------------------------------------------------------------------
luaP.SIZE_C  = 9
luaP.SIZE_B  = 9
luaP.SIZE_Bx = luaP.SIZE_C + luaP.SIZE_B
luaP.SIZE_A  = 8

luaP.SIZE_OP = 6

luaP.POS_OP = 0
luaP.POS_A  = luaP.POS_OP + luaP.SIZE_OP
luaP.POS_C  = luaP.POS_A + luaP.SIZE_A
luaP.POS_B  = luaP.POS_C + luaP.SIZE_C
luaP.POS_Bx = luaP.POS_C

------------------------------------------------------------------------
-- limits for opcode arguments.
-- we use (signed) int to manipulate most arguments,
-- so they must fit in LUAI_BITSINT-1 bits (-1 for sign)
------------------------------------------------------------------------
-- removed "#if SIZE_Bx < BITS_INT-1" test, assume this script is
-- running on a Lua VM with double or int as LUA_NUMBER

luaP.MAXARG_Bx  = math.ldexp(1, luaP.SIZE_Bx) - 1
luaP.MAXARG_sBx = math.floor(luaP.MAXARG_Bx / 2)  -- 'sBx' is signed

luaP.MAXARG_A = math.ldexp(1, luaP.SIZE_A) - 1
luaP.MAXARG_B = math.ldexp(1, luaP.SIZE_B) - 1
luaP.MAXARG_C = math.ldexp(1, luaP.SIZE_C) - 1

-- creates a mask with 'n' 1 bits at position 'p'
-- MASK1(n,p) deleted, not required
-- creates a mask with 'n' 0 bits at position 'p'
-- MASK0(n,p) deleted, not required

--[[--------------------------------------------------------------------
	Visual representation for reference:

	 31    |    |     |            0      bit position
		+-----+-----+-----+----------+
		|  B  |  C  |  A  |  Opcode  |      iABC format
		+-----+-----+-----+----------+
		-  9  -  9  -  8  -    6     -      field sizes
		+-----+-----+-----+----------+
		|   [s]Bx   |  A  |  Opcode  |      iABx | iAsBx format
		+-----+-----+-----+----------+

----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- the following macros help to manipulate instructions
-- * changed to a table object representation, very clean compared to
--   the [nightmare] alternatives of using a number or a string
-- * Bx is a separate element from B and C, since there is never a need
--   to split Bx in the parser or code generator
------------------------------------------------------------------------

-- these accept or return opcodes in the form of string names
function luaP:GET_OPCODE(i) return self.ROpCode[i.OP] end
function luaP:SET_OPCODE(i, o) i.OP = self.OpCode[o] end

function luaP:GETARG_A(i) return i.A end
function luaP:SETARG_A(i, u) i.A = u end

function luaP:GETARG_B(i) return i.B end
function luaP:SETARG_B(i, b) i.B = b end

function luaP:GETARG_C(i) return i.C end
function luaP:SETARG_C(i, b) i.C = b end

function luaP:GETARG_Bx(i) return i.Bx end
function luaP:SETARG_Bx(i, b) i.Bx = b end

function luaP:GETARG_sBx(i) return i.Bx - self.MAXARG_sBx end
function luaP:SETARG_sBx(i, b) i.Bx = b + self.MAXARG_sBx end

function luaP:CREATE_ABC(o,a,b,c)
	return {OP = self.OpCode[o], A = a, B = b, C = c}
end

function luaP:CREATE_ABx(o,a,bc)
	return {OP = self.OpCode[o], A = a, Bx = bc}
end

------------------------------------------------------------------------
-- create an instruction from a number (for OP_SETLIST)
------------------------------------------------------------------------
function luaP:CREATE_Inst(c)
	local o = c % 64
	c = (c - o) / 64
	local a = c % 256
	c = (c - a) / 256
	return self:CREATE_ABx(o, a, c)
end

------------------------------------------------------------------------
-- returns a 4-char string little-endian encoded form of an instruction
------------------------------------------------------------------------
function luaP:Instruction(i)
	if i.Bx then
		-- change to OP/A/B/C format
		i.C = i.Bx % 512
		i.B = (i.Bx - i.C) / 512
	end
	local I = i.A * 64 + i.OP
	local c0 = I % 256
	I = i.C * 64 + (I - c0) / 256  -- 6 bits of A left
	local c1 = I % 256
	I = i.B * 128 + (I - c1) / 256  -- 7 bits of C left
	local c2 = I % 256
	local c3 = (I - c2) / 256
	return string.char(c0, c1, c2, c3)
end

------------------------------------------------------------------------
-- decodes a 4-char little-endian string into an instruction struct
------------------------------------------------------------------------
function luaP:DecodeInst(x)
	local byte = string.byte
	local i = {}
	local I = byte(x, 1)
	local op = I % 64
	i.OP = op
	I = byte(x, 2) * 4 + (I - op) / 64  -- 2 bits of c0 left
	local a = I % 256
	i.A = a
	I = byte(x, 3) * 4 + (I - a) / 256  -- 2 bits of c1 left
	local c = I % 512
	i.C = c
	i.B = byte(x, 4) * 2 + (I - c) / 512 -- 1 bits of c2 left
	local opmode = self.OpMode[tonumber(string.sub(self.opmodes[op + 1], 7, 7))]
	if opmode ~= "iABC" then
		i.Bx = i.B * 512 + i.C
	end
	return i
end

------------------------------------------------------------------------
-- Macros to operate RK indices
-- * these use arithmetic instead of bit ops
------------------------------------------------------------------------

-- this bit 1 means constant (0 means register)
luaP.BITRK = math.ldexp(1, luaP.SIZE_B - 1)

-- test whether value is a constant
function luaP:ISK(x) return x >= self.BITRK end

-- gets the index of the constant
function luaP:INDEXK(r) return x - self.BITRK end

luaP.MAXINDEXRK = luaP.BITRK - 1

-- code a constant index as a RK value
function luaP:RKASK(x) return x + self.BITRK end

------------------------------------------------------------------------
-- invalid register that fits in 8 bits
------------------------------------------------------------------------
luaP.NO_REG = luaP.MAXARG_A

------------------------------------------------------------------------
-- R(x) - register
-- Kst(x) - constant (in constant table)
-- RK(x) == if ISK(x) then Kst(INDEXK(x)) else R(x)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- grep "ORDER OP" if you change these enums
------------------------------------------------------------------------

--[[--------------------------------------------------------------------
Lua virtual machine opcodes (enum OpCode):
------------------------------------------------------------------------
name          args    description
------------------------------------------------------------------------
OP_MOVE       A B     R(A) := R(B)
OP_LOADK      A Bx    R(A) := Kst(Bx)
OP_LOADBOOL   A B C   R(A) := (Bool)B; if (C) pc++
OP_LOADNIL    A B     R(A) := ... := R(B) := nil
OP_GETUPVAL   A B     R(A) := UpValue[B]
OP_GETGLOBAL  A Bx    R(A) := Gbl[Kst(Bx)]
OP_GETTABLE   A B C   R(A) := R(B)[RK(C)]
OP_SETGLOBAL  A Bx    Gbl[Kst(Bx)] := R(A)
OP_SETUPVAL   A B     UpValue[B] := R(A)
OP_SETTABLE   A B C   R(A)[RK(B)] := RK(C)
OP_NEWTABLE   A B C   R(A) := {} (size = B,C)
OP_SELF       A B C   R(A+1) := R(B); R(A) := R(B)[RK(C)]
OP_ADD        A B C   R(A) := RK(B) + RK(C)
OP_SUB        A B C   R(A) := RK(B) - RK(C)
OP_MUL        A B C   R(A) := RK(B) * RK(C)
OP_DIV        A B C   R(A) := RK(B) / RK(C)
OP_MOD        A B C   R(A) := RK(B) % RK(C)
OP_POW        A B C   R(A) := RK(B) ^ RK(C)
OP_UNM        A B     R(A) := -R(B)
OP_NOT        A B     R(A) := not R(B)
OP_LEN        A B     R(A) := length of R(B)
OP_CONCAT     A B C   R(A) := R(B).. ... ..R(C)
OP_JMP        sBx     pc+=sBx
OP_EQ         A B C   if ((RK(B) == RK(C)) ~= A) then pc++
OP_LT         A B C   if ((RK(B) <  RK(C)) ~= A) then pc++
OP_LE         A B C   if ((RK(B) <= RK(C)) ~= A) then pc++
OP_TEST       A C     if not (R(A) <=> C) then pc++
OP_TESTSET    A B C   if (R(B) <=> C) then R(A) := R(B) else pc++
OP_CALL       A B C   R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1))
OP_TAILCALL   A B C   return R(A)(R(A+1), ... ,R(A+B-1))
OP_RETURN     A B     return R(A), ... ,R(A+B-2)  (see note)
OP_FORLOOP    A sBx   R(A)+=R(A+2);
											if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }
OP_FORPREP    A sBx   R(A)-=R(A+2); pc+=sBx
OP_TFORLOOP   A C     R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));
											if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++
OP_SETLIST    A B C   R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B
OP_CLOSE      A       close all variables in the stack up to (>=) R(A)
OP_CLOSURE    A Bx    R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))
OP_VARARG     A B     R(A), R(A+1), ..., R(A+B-1) = vararg
----------------------------------------------------------------------]]

luaP.opnames = {}  -- opcode names
luaP.OpCode = {}   -- lookup name -> number
luaP.ROpCode = {}  -- lookup number -> name

------------------------------------------------------------------------
-- ORDER OP
------------------------------------------------------------------------
local i = 0
for v in string.gmatch([[
MOVE LOADK LOADBOOL LOADNIL GETUPVAL
GETGLOBAL GETTABLE SETGLOBAL SETUPVAL SETTABLE
NEWTABLE SELF ADD SUB MUL
DIV MOD POW UNM NOT
LEN CONCAT JMP EQ LT
LE TEST TESTSET CALL TAILCALL
RETURN FORLOOP FORPREP TFORLOOP SETLIST
CLOSE CLOSURE VARARG
]], "%S+") do
	local n = "OP_"..v
	luaP.opnames[i] = v
	luaP.OpCode[n] = i
	luaP.ROpCode[i] = n
	i = i + 1
end
luaP.NUM_OPCODES = i

--[[
===========================================================================
	Notes:
	(*) In OP_CALL, if (B == 0) then B = top. C is the number of returns - 1,
			and can be 0: OP_CALL then sets 'top' to last_result+1, so
			next open instruction (OP_CALL, OP_RETURN, OP_SETLIST) may use 'top'.
	(*) In OP_VARARG, if (B == 0) then use actual number of varargs and
			set top (like in OP_CALL with C == 0).
	(*) In OP_RETURN, if (B == 0) then return up to 'top'
	(*) In OP_SETLIST, if (B == 0) then B = 'top';
			if (C == 0) then next 'instruction' is real C
	(*) For comparisons, A specifies what condition the test should accept
			(true or false).
	(*) All 'skips' (pc++) assume that next instruction is a jump
===========================================================================
--]]

--[[--------------------------------------------------------------------
	masks for instruction properties. The format is:
	bits 0-1: op mode
	bits 2-3: C arg mode
	bits 4-5: B arg mode
	bit 6: instruction set register A
	bit 7: operator is a test

	for OpArgMask:
	OpArgN - argument is not used
	OpArgU - argument is used
	OpArgR - argument is a register or a jump offset
	OpArgK - argument is a constant or register/constant
----------------------------------------------------------------------]]

-- was enum OpArgMask
luaP.OpArgMask = { OpArgN = 0, OpArgU = 1, OpArgR = 2, OpArgK = 3 }

------------------------------------------------------------------------
-- e.g. to compare with symbols, luaP:getOpMode(...) == luaP.OpCode.iABC
-- * accepts opcode parameter as strings, e.g. "OP_MOVE"
------------------------------------------------------------------------

function luaP:getOpMode(m)
	return self.opmodes[self.OpCode[m]] % 4
end

function luaP:getBMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 16) % 4
end

function luaP:getCMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 4) % 4
end

function luaP:testAMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 64) % 2
end

function luaP:testTMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 128)
end

-- luaP_opnames[] is set above, as the luaP.opnames table

-- number of list items to accumulate before a SETLIST instruction
luaP.LFIELDS_PER_FLUSH = 50

------------------------------------------------------------------------
-- build instruction properties array
-- * deliberately coded to look like the C equivalent
------------------------------------------------------------------------
local function opmode(t, a, b, c, m)
	local luaP = luaP
	return t * 128 + a * 64 +
		luaP.OpArgMask[b] * 16 + luaP.OpArgMask[c] * 4 + luaP.OpMode[m]
end

-- ORDER OP
luaP.opmodes = {
	-- T A B C mode opcode
	opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_LOADK
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_LOADBOOL
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LOADNIL
	opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_GETUPVAL
	opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_GETGLOBAL
	opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_GETTABLE
	opmode(0, 0, "OpArgK", "OpArgN", "iABx"),     -- OP_SETGLOBAL
	opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_SETUPVAL
	opmode(0, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_SETTABLE
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_NEWTABLE
	opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_SELF
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_ADD
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_SUB
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MUL
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_DIV
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MOD
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_POW
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_UNM
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_NOT
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LEN
	opmode(0, 1, "OpArgR", "OpArgR", "iABC"),     -- OP_CONCAT
	opmode(0, 0, "OpArgR", "OpArgN", "iAsBx"),    -- OP_JMP
	opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_EQ
	opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LT
	opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LE
	opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TEST
	opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TESTSET
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_CALL
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_TAILCALL
	opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_RETURN
	opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORLOOP
	opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORPREP
	opmode(1, 0, "OpArgN", "OpArgU", "iABC"),     -- OP_TFORLOOP
	opmode(0, 0, "OpArgU", "OpArgU", "iABC"),     -- OP_SETLIST
	opmode(0, 0, "OpArgN", "OpArgN", "iABC"),     -- OP_CLOSE
	opmode(0, 1, "OpArgU", "OpArgN", "iABx"),     -- OP_CLOSURE
	opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_VARARG
}
-- an awkward way to set a zero-indexed table...
luaP.opmodes[0] =
	opmode(0, 1, "OpArgR", "OpArgN", "iABC")      -- OP_MOVE



--dofile("ldump.lua")

--requires luaP

-- mark for precompiled code ('<esc>Lua') (from lua.h)
luaU.LUA_SIGNATURE = "\27Lua"

-- constants used by dumper (from lua.h)
luaU.LUA_TNUMBER  = 3
luaU.LUA_TSTRING  = 4
luaU.LUA_TNIL     = 0
luaU.LUA_TBOOLEAN = 1
luaU.LUA_TNONE    = -1

-- constants for header of binary files (from lundump.h)
luaU.LUAC_VERSION    = 0x51     -- this is Lua 5.1
luaU.LUAC_FORMAT     = 0        -- this is the official format
luaU.LUAC_HEADERSIZE = 12       -- size of header of binary files

--[[--------------------------------------------------------------------
-- Additional functions to handle chunk writing
-- * to use make_setS and make_setF, see test_ldump.lua elsewhere
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- create a chunk writer that writes to a string
-- * returns the writer function and a table containing the string
-- * to get the final result, look in buff.data
------------------------------------------------------------------------
function luaU:make_setS()
	local buff = {}
	buff.data = ""
	local writer =
		function(s, buff)  -- chunk writer
			if not s then return 0 end
			buff.data = buff.data..s
			-- print (#buff.data, #s, string.byte(s,1,1), s)
			return 0
		end
	return writer, buff
end

------------------------------------------------------------------------
-- create a chunk writer that writes to a file
-- * returns the writer function and a table containing the file handle
-- * if a nil is passed, then writer should close the open file
------------------------------------------------------------------------
function luaU:make_setF(filename)
	local buff = {}
	buff.h = io.open(filename, "wb")
	if not buff.h then return nil end
	local writer =
		function(s, buff)  -- chunk writer
			if not buff.h then return 0 end
			if not s then
			if buff.h:close() then return 0 end
		else
			if buff.h:write(s) then return 0 end
		end
			return 1
		end
	return writer, buff
end

------------------------------------------------------------------------
-- works like the lobject.h version except that TObject used in these
-- scripts only has a 'value' field, no 'tt' field (native types used)
------------------------------------------------------------------------
function luaU:ttype(o)
	local tt = type(o.value)
	if tt == "number" then return self.LUA_TNUMBER
	elseif tt == "string" then return self.LUA_TSTRING
	elseif tt == "nil" then return self.LUA_TNIL
	elseif tt == "boolean" then return self.LUA_TBOOLEAN
	else
		return self.LUA_TNONE  -- the rest should not appear
	end
end

-----------------------------------------------------------------------
-- converts a IEEE754 double number to an 8-byte little-endian string
-- * luaU:from_double() and luaU:from_int() are adapted from ChunkBake
-- * supports +/- Infinity, but not denormals or NaNs
-----------------------------------------------------------------------
function luaU:from_double(x)
	local function grab_byte(v)
		local c = v % 256
		return (v - c) / 256, string.char(c)
	end
	local sign = 0
	if x < 0 then sign = 1; x = -x end
	local mantissa, exponent = math.frexp(x)
	if x == 0 then -- zero
		mantissa, exponent = 0, 0
	elseif x == 1/0 then
		mantissa, exponent = 0, 2047
	else
		mantissa = (mantissa * 2 - 1) * math.ldexp(0.5, 53)
		exponent = exponent + 1022
	end
	local v, byte = "" -- convert to bytes
	x = math.floor(mantissa)
	for i = 1,6 do
		x, byte = grab_byte(x); v = v..byte -- 47:0
	end
	x, byte = grab_byte(exponent * 16 + x); v = v..byte -- 55:48
	x, byte = grab_byte(sign * 128 + x); v = v..byte -- 63:56
	return v
end

-----------------------------------------------------------------------
-- converts a number to a little-endian 32-bit integer string
-- * input value assumed to not overflow, can be signed/unsigned
-----------------------------------------------------------------------
function luaU:from_int(x)
	local v = ""
	x = math.floor(x)
	if x < 0 then x = 4294967296 + x end  -- ULONG_MAX+1
	for i = 1, 4 do
		local c = x % 256
		v = v..string.char(c); x = math.floor(x / 256)
	end
	return v
end

--[[--------------------------------------------------------------------
-- Functions to make a binary chunk
-- * many functions have the size parameter removed, since output is
--   in the form of a string and some sizes are implicit or hard-coded
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct DumpState:
--   L  -- lua_State (not used in this script)
--   writer  -- lua_Writer (chunk writer function)
--   data  -- void* (chunk writer context or data already written)
--   strip  -- if true, don't write any debug information
--   status  -- if non-zero, an error has occured
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- dumps a block of bytes
-- * lua_unlock(D.L), lua_lock(D.L) unused
------------------------------------------------------------------------
function luaU:DumpBlock(b, D)
	if D.status == 0 then
		-- lua_unlock(D->L);
		D.status = D.write(b, D.data)
		-- lua_lock(D->L);
	end
end

------------------------------------------------------------------------
-- dumps a char
------------------------------------------------------------------------
function luaU:DumpChar(y, D)
	self:DumpBlock(string.char(y), D)
end

------------------------------------------------------------------------
-- dumps a 32-bit signed or unsigned integer (for int) (hard-coded)
------------------------------------------------------------------------
function luaU:DumpInt(x, D)
	self:DumpBlock(self:from_int(x), D)
end

------------------------------------------------------------------------
-- dumps a 32-bit signed or unsigned integer (for int) (hard-coded)
------------------------------------------------------------------------
function luaU:DumpSizeT(x, D)
	self:DumpBlock(self:from_int(x), D)
	if size_size_t == 8 then
		self:DumpBlock(self:from_int(0), D)
	end
end

------------------------------------------------------------------------
-- dumps a lua_Number (hard-coded as a double)
------------------------------------------------------------------------
function luaU:DumpNumber(x, D)
	self:DumpBlock(self:from_double(x), D)
end

------------------------------------------------------------------------
-- dumps a Lua string (size type is hard-coded)
------------------------------------------------------------------------
function luaU:DumpString(s, D)
	if s == nil then
		self:DumpSizeT(0, D)
	else
		s = s.."\0"  -- include trailing '\0'
		self:DumpSizeT(#s, D)
		self:DumpBlock(s, D)
	end
end

------------------------------------------------------------------------
-- dumps instruction block from function prototype
------------------------------------------------------------------------
function luaU:DumpCode(f, D)
	local n = f.sizecode
	--was DumpVector
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpBlock(luaP:Instruction(f.code[i]), D)
	end
end

------------------------------------------------------------------------
-- dump constant pool from function prototype
-- * bvalue(o), nvalue(o) and rawtsvalue(o) macros removed
------------------------------------------------------------------------
function luaU:DumpConstants(f, D)
	local n = f.sizek
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		local o = f.k[i]  -- TValue
		local tt = self:ttype(o)
		self:DumpChar(tt, D)
		if tt == self.LUA_TNIL then
		elseif tt == self.LUA_TBOOLEAN then
			self:DumpChar(o.value and 1 or 0, D)
		elseif tt == self.LUA_TNUMBER then
			self:DumpNumber(o.value, D)
		elseif tt == self.LUA_TSTRING then
			self:DumpString(o.value, D)
		else
			--lua_assert(0)  -- cannot happen
		end
	end
	n = f.sizep
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpFunction(f.p[i], f.source, D)
	end
end

------------------------------------------------------------------------
-- dump debug information
------------------------------------------------------------------------
function luaU:DumpDebug(f, D)
	local n
	n = D.strip and 0 or f.sizelineinfo           -- dump line information
	--was DumpVector
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpInt(f.lineinfo[i], D)
	end
	n = D.strip and 0 or f.sizelocvars            -- dump local information
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpString(f.locvars[i].varname, D)
		self:DumpInt(f.locvars[i].startpc, D)
		self:DumpInt(f.locvars[i].endpc, D)
	end
	n = D.strip and 0 or f.sizeupvalues           -- dump upvalue information
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpString(f.upvalues[i], D)
	end
end

------------------------------------------------------------------------
-- dump child function prototypes from function prototype
------------------------------------------------------------------------
function luaU:DumpFunction(f, p, D)
	local source = f.source
	if source == p or D.strip then source = nil end
	self:DumpString(source, D)
	self:DumpInt(f.lineDefined, D)
	self:DumpInt(f.lastlinedefined, D)
	self:DumpChar(f.nups, D)
	self:DumpChar(f.numparams, D)
	self:DumpChar(f.is_vararg, D)
	self:DumpChar(f.maxstacksize, D)
	self:DumpCode(f, D)
	self:DumpConstants(f, D)
	self:DumpDebug(f, D)
end

------------------------------------------------------------------------
-- dump Lua header section (some sizes hard-coded)
------------------------------------------------------------------------
function luaU:DumpHeader(D)
	local h = self:header()
	assert(#h == self.LUAC_HEADERSIZE) -- fixed buffer now an assert
	self:DumpBlock(h, D)
end

------------------------------------------------------------------------
-- make header (from lundump.c)
-- returns the header string
------------------------------------------------------------------------
function luaU:header()
	local x = 1
	return self.LUA_SIGNATURE..
		string.char(
			self.LUAC_VERSION,
			self.LUAC_FORMAT,
			x,                    -- endianness (1=little)
			4,                    -- sizeof(int)
			size_size_t,                    -- sizeof(size_t)
			4,                    -- sizeof(Instruction)
			8,                    -- sizeof(lua_Number)
			0)                    -- is lua_Number integral?
end

------------------------------------------------------------------------
-- dump Lua function as precompiled chunk
-- (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)
-- * w, data are created from make_setS, make_setF
------------------------------------------------------------------------
function luaU:dump(L, f, w, data, strip)
	local D = {}  -- DumpState
	D.L = L
	D.write = w
	D.data = data
	D.strip = strip
	D.status = 0
	self:DumpHeader(D)
	self:DumpFunction(f, nil, D)
	-- added: for a chunk writer writing to a file, this final call with
	-- nil data is to indicate to the writer to close the file
	D.write(nil, D.data)
	return D.status
end




--dofile("lcode.lua")

------------------------------------------------------------------------
-- constants used by code generator
------------------------------------------------------------------------
-- maximum stack for a Lua function
luaK.MAXSTACK = 250  -- (from llimits.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- emulation of TValue macros (these are from lobject.h)
-- * TValue is a table since lcode passes references around
-- * tt member field removed, using Lua's type() instead
-- * for setsvalue, sethvalue, parameter L (deleted here) in lobject.h
--   is used in an assert for testing, see checkliveness(g,obj)
------------------------------------------------------------------------
function luaK:ttisnumber(o)
	if o then return type(o.value) == "number" else return false end
end
function luaK:nvalue(o) return o.value end
function luaK:setnilvalue(o) o.value = nil end
function luaK:setsvalue(o, x) o.value = x end
luaK.setnvalue = luaK.setsvalue
luaK.sethvalue = luaK.setsvalue
luaK.setbvalue = luaK.setsvalue

------------------------------------------------------------------------
-- The luai_num* macros define the primitive operations over numbers.
-- * this is not the entire set of primitive operations from luaconf.h
-- * used in luaK:constfolding()
------------------------------------------------------------------------
function luaK:numadd(a, b) return a + b end
function luaK:numsub(a, b) return a - b end
function luaK:nummul(a, b) return a * b end
function luaK:numdiv(a, b) return a / b end
function luaK:nummod(a, b) return a % b end
-- ((a) - floor((a)/(b))*(b)) /* actual, for reference */
function luaK:numpow(a, b) return a ^ b end
function luaK:numunm(a) return -a end
function luaK:numisnan(a) return not a == a end
-- a NaN cannot equal another NaN

--[[--------------------------------------------------------------------
-- code generator functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- Marks the end of a patch list. It is an invalid value both as an absolute
-- address, and as a list link (would link an element to itself).
------------------------------------------------------------------------
luaK.NO_JUMP = -1

------------------------------------------------------------------------
-- grep "ORDER OPR" if you change these enums
------------------------------------------------------------------------
luaK.BinOpr = {
	OPR_ADD = 0, OPR_SUB = 1, OPR_MUL = 2, OPR_DIV = 3, OPR_MOD = 4, OPR_POW = 5,
	OPR_CONCAT = 6,
	OPR_NE = 7, OPR_EQ = 8,
	OPR_LT = 9, OPR_LE = 10, OPR_GT = 11, OPR_GE = 12,
	OPR_AND = 13, OPR_OR = 14,
	OPR_NOBINOPR = 15,
}

-- * UnOpr is used by luaK:prefix's op argument, but not directly used
--   because the function receives the symbols as strings, e.g. "OPR_NOT"
luaK.UnOpr = {
	OPR_MINUS = 0, OPR_NOT = 1, OPR_LEN = 2, OPR_NOUNOPR = 3
}

------------------------------------------------------------------------
-- returns the instruction object for given e (expdesc), was a macro
------------------------------------------------------------------------
function luaK:getcode(fs, e)
	return fs.f.code[e.info]
end

------------------------------------------------------------------------
-- codes an instruction with a signed Bx (sBx) field, was a macro
-- * used in luaK:jump(), (lparser) luaY:forbody()
------------------------------------------------------------------------
function luaK:codeAsBx(fs, o, A, sBx)
	return self:codeABx(fs, o, A, sBx + luaP.MAXARG_sBx)
end

------------------------------------------------------------------------
-- set the expdesc e instruction for multiple returns, was a macro
------------------------------------------------------------------------
function luaK:setmultret(fs, e)
	self:setreturns(fs, e, luaY.LUA_MULTRET)
end

------------------------------------------------------------------------
-- there is a jump if patch lists are not identical, was a macro
-- * used in luaK:exp2reg(), luaK:exp2anyreg(), luaK:exp2val()
------------------------------------------------------------------------
function luaK:hasjumps(e)
	return e.t ~= e.f
end

------------------------------------------------------------------------
-- true if the expression is a constant number (for constant folding)
-- * used in constfolding(), infix()
------------------------------------------------------------------------
function luaK:isnumeral(e)
	return e.k == "VKNUM" and e.t == self.NO_JUMP and e.f == self.NO_JUMP
end

------------------------------------------------------------------------
-- codes loading of nil, optimization done if consecutive locations
-- * used in luaK:discharge2reg(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:_nil(fs, from, n)
	if fs.pc > fs.lasttarget then  -- no jumps to current position?
		if fs.pc == 0 then  -- function start?
			if from >= fs.nactvar then
				return  -- positions are already clean
			end
		else
			local previous = fs.f.code[fs.pc - 1]
			if luaP:GET_OPCODE(previous) == "OP_LOADNIL" then
				local pfrom = luaP:GETARG_A(previous)
				local pto = luaP:GETARG_B(previous)
				if pfrom <= from and from <= pto + 1 then  -- can connect both?
					if from + n - 1 > pto then
						luaP:SETARG_B(previous, from + n - 1)
					end
					return
				end
			end
		end
	end
	self:codeABC(fs, "OP_LOADNIL", from, from + n - 1, 0)  -- else no optimization
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:jump(fs)
	local jpc = fs.jpc  -- save list of jumps to here
	fs.jpc = self.NO_JUMP
	local j = self:codeAsBx(fs, "OP_JMP", 0, self.NO_JUMP)
	j = self:concat(fs, j, jpc)  -- keep them on hold
	return j
end

------------------------------------------------------------------------
-- codes a RETURN instruction
-- * used in luaY:close_func(), luaY:retstat()
------------------------------------------------------------------------
function luaK:ret(fs, first, nret)
	self:codeABC(fs, "OP_RETURN", first, nret + 1, 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codecomp()
------------------------------------------------------------------------
function luaK:condjump(fs, op, A, B, C)
	self:codeABC(fs, op, A, B, C)
	return self:jump(fs)
end

------------------------------------------------------------------------
--
-- * used in luaK:patchlistaux(), luaK:concat()
------------------------------------------------------------------------
function luaK:fixjump(fs, pc, dest)
	local jmp = fs.f.code[pc]
	local offset = dest - (pc + 1)
	lua_assert(dest ~= self.NO_JUMP)
	if math.abs(offset) > luaP.MAXARG_sBx then
		luaX:syntaxerror(fs.ls, "control structure too long")
	end
	luaP:SETARG_sBx(jmp, offset)
end

------------------------------------------------------------------------
-- returns current 'pc' and marks it as a jump target (to avoid wrong
-- optimizations with consecutive instructions not in the same basic block).
-- * used in multiple locations
-- * fs.lasttarget tested only by luaK:_nil() when optimizing OP_LOADNIL
------------------------------------------------------------------------
function luaK:getlabel(fs)
	fs.lasttarget = fs.pc
	return fs.pc
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:removevalues(), luaK:patchlistaux(),
--   luaK:concat()
------------------------------------------------------------------------
function luaK:getjump(fs, pc)
	local offset = luaP:GETARG_sBx(fs.f.code[pc])
	if offset == self.NO_JUMP then  -- point to itself represents end of list
		return self.NO_JUMP  -- end of list
	else
		return (pc + 1) + offset  -- turn offset into absolute position
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:patchtestreg(), luaK:invertjump()
------------------------------------------------------------------------
function luaK:getjumpcontrol(fs, pc)
	local pi = fs.f.code[pc]
	local ppi = fs.f.code[pc - 1]
	if pc >= 1 and luaP:testTMode(luaP:GET_OPCODE(ppi)) ~= 0 then
		return ppi
	else
		return pi
	end
end

------------------------------------------------------------------------
-- check whether list has any jump that do not produce a value
-- (or produce an inverted value)
-- * return value changed to boolean
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:need_value(fs, list)
	while list ~= self.NO_JUMP do
		local i = self:getjumpcontrol(fs, list)
		if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then return true end
		list = self:getjump(fs, list)
	end
	return false  -- not found
end

------------------------------------------------------------------------
--
-- * used in luaK:removevalues(), luaK:patchlistaux()
------------------------------------------------------------------------
function luaK:patchtestreg(fs, node, reg)
	local i = self:getjumpcontrol(fs, node)
	if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then
		return false  -- cannot patch other instructions
	end
	if reg ~= luaP.NO_REG and reg ~= luaP:GETARG_B(i) then
		luaP:SETARG_A(i, reg)
	else  -- no register to put value or register already has the value
		-- due to use of a table as i, i cannot be replaced by another table
		-- so the following is required; there is no change to ARG_C
		luaP:SET_OPCODE(i, "OP_TEST")
		local b = luaP:GETARG_B(i)
		luaP:SETARG_A(i, b)
		luaP:SETARG_B(i, 0)
		-- *i = CREATE_ABC(OP_TEST, GETARG_B(*i), 0, GETARG_C(*i)); /* C */
	end
	return true
end

------------------------------------------------------------------------
--
-- * used only in luaK:codenot()
------------------------------------------------------------------------
function luaK:removevalues(fs, list)
	while list ~= self.NO_JUMP do
		self:patchtestreg(fs, list, luaP.NO_REG)
		list = self:getjump(fs, list)
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargejpc(), luaK:patchlist(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:patchlistaux(fs, list, vtarget, reg, dtarget)
	while list ~= self.NO_JUMP do
		local _next = self:getjump(fs, list)
		if self:patchtestreg(fs, list, reg) then
			self:fixjump(fs, list, vtarget)
		else
			self:fixjump(fs, list, dtarget)  -- jump to default target
		end
		list = _next
	end
end

------------------------------------------------------------------------
--
-- * used only in luaK:code()
------------------------------------------------------------------------
function luaK:dischargejpc(fs)
	self:patchlistaux(fs, fs.jpc, fs.pc, luaP.NO_REG, fs.pc)
	fs.jpc = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:whilestat(), luaY:repeatstat(), luaY:forbody()
------------------------------------------------------------------------
function luaK:patchlist(fs, list, target)
	if target == fs.pc then
		self:patchtohere(fs, list)
	else
		lua_assert(target < fs.pc)
		self:patchlistaux(fs, list, target, luaP.NO_REG, target)
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:patchtohere(fs, list)
	self:getlabel(fs)
	fs.jpc = self:concat(fs, fs.jpc, list)
end

------------------------------------------------------------------------
-- * l1 was a pointer, now l1 is returned and callee assigns the value
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:concat(fs, l1, l2)
	if l2 == self.NO_JUMP then return l1
	elseif l1 == self.NO_JUMP then
		return l2
	else
		local list = l1
		local _next = self:getjump(fs, list)
		while _next ~= self.NO_JUMP do  -- find last element
			list = _next
			_next = self:getjump(fs, list)
		end
		self:fixjump(fs, list, l2)
	end
	return l1
end

------------------------------------------------------------------------
--
-- * used in luaK:reserveregs(), (lparser) luaY:forlist()
------------------------------------------------------------------------
function luaK:checkstack(fs, n)
	local newstack = fs.freereg + n
	if newstack > fs.f.maxstacksize then
		if newstack >= self.MAXSTACK then
			luaX:syntaxerror(fs.ls, "function or expression too complex")
		end
		fs.f.maxstacksize = newstack
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:reserveregs(fs, n)
	self:checkstack(fs, n)
	fs.freereg = fs.freereg + n
end

------------------------------------------------------------------------
--
-- * used in luaK:freeexp(), luaK:dischargevars()
------------------------------------------------------------------------
function luaK:freereg(fs, reg)
	if not luaP:ISK(reg) and reg >= fs.nactvar then
		fs.freereg = fs.freereg - 1
		lua_assert(reg == fs.freereg)
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:freeexp(fs, e)
	if e.k == "VNONRELOC" then
		self:freereg(fs, e.info)
	end
end

------------------------------------------------------------------------
-- * TODO NOTE implementation is not 100% correct, since the assert fails
-- * luaH_set, setobj deleted; direct table access used instead
-- * used in luaK:stringK(), luaK:numberK(), luaK:boolK(), luaK:nilK()
------------------------------------------------------------------------
function luaK:addk(fs, k, v)
	local L = fs.L
	local idx = fs.h[k.value]
	--TValue *idx = luaH_set(L, fs->h, k); /* C */
	local f = fs.f
	if self:ttisnumber(idx) then
		--TODO this assert currently FAILS (last tested for 5.0.2)
		--lua_assert(fs.f.k[self:nvalue(idx)] == v)
		--lua_assert(luaO_rawequalObj(&fs->f->k[cast_int(nvalue(idx))], v)); /* C */
		return self:nvalue(idx)
	else -- constant not found; create a new entry
		idx = {}
		self:setnvalue(idx, fs.nk)
		fs.h[k.value] = idx
		-- setnvalue(idx, cast_num(fs->nk)); /* C */
		luaY:growvector(L, f.k, fs.nk, f.sizek, nil,
			luaP.MAXARG_Bx, "constant table overflow")
		-- loop to initialize empty f.k positions not required
		f.k[fs.nk] = v
		-- setobj(L, &f->k[fs->nk], v); /* C */
		-- luaC_barrier(L, f, v); /* GC */
		local nk = fs.nk
		fs.nk = fs.nk + 1
		return nk
	end

end

------------------------------------------------------------------------
-- creates and sets a string object
-- * used in (lparser) luaY:codestring(), luaY:singlevar()
------------------------------------------------------------------------
function luaK:stringK(fs, s)
	local o = {}  -- TValue
	self:setsvalue(o, s)
	return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a number object
-- * used in luaK:prefix() for negative (or negation of) numbers
-- * used in (lparser) luaY:simpleexp(), luaY:fornum()
------------------------------------------------------------------------
function luaK:numberK(fs, r)
	local o = {}  -- TValue
	self:setnvalue(o, r)
	return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a boolean object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:boolK(fs, b)
	local o = {}  -- TValue
	self:setbvalue(o, b)
	return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a nil object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:nilK(fs)
	local k, v = {}, {}  -- TValue
	self:setnilvalue(v)
	-- cannot use nil as key; instead use table itself to represent nil
	self:sethvalue(k, fs.h)
	return self:addk(fs, k, v)
end

------------------------------------------------------------------------
--
-- * used in luaK:setmultret(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:setreturns(fs, e, nresults)
	if e.k == "VCALL" then  -- expression is an open function call?
		luaP:SETARG_C(self:getcode(fs, e), nresults + 1)
	elseif e.k == "VVARARG" then
		luaP:SETARG_B(self:getcode(fs, e), nresults + 1);
		luaP:SETARG_A(self:getcode(fs, e), fs.freereg);
		luaK:reserveregs(fs, 1)
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargevars(), (lparser) luaY:assignment()
------------------------------------------------------------------------
function luaK:setoneret(fs, e)
	if e.k == "VCALL" then  -- expression is an open function call?
		e.k = "VNONRELOC"
		e.info = luaP:GETARG_A(self:getcode(fs, e))
	elseif e.k == "VVARARG" then
		luaP:SETARG_B(self:getcode(fs, e), 2)
		e.k = "VRELOCABLE"  -- can relocate its simple result
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:dischargevars(fs, e)
	local k = e.k
	if k == "VLOCAL" then
		e.k = "VNONRELOC"
	elseif k == "VUPVAL" then
		e.info = self:codeABC(fs, "OP_GETUPVAL", 0, e.info, 0)
		e.k = "VRELOCABLE"
	elseif k == "VGLOBAL" then
		e.info = self:codeABx(fs, "OP_GETGLOBAL", 0, e.info)
		e.k = "VRELOCABLE"
	elseif k == "VINDEXED" then
		self:freereg(fs, e.aux)
		self:freereg(fs, e.info)
		e.info = self:codeABC(fs, "OP_GETTABLE", 0, e.info, e.aux)
		e.k = "VRELOCABLE"
	elseif k == "VVARARG" or k == "VCALL" then
		self:setoneret(fs, e)
	else
		-- there is one value available (somewhere)
	end
end

------------------------------------------------------------------------
--
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:code_label(fs, A, b, jump)
	self:getlabel(fs)  -- those instructions may be jump targets
	return self:codeABC(fs, "OP_LOADBOOL", A, b, jump)
end

------------------------------------------------------------------------
--
-- * used in luaK:discharge2anyreg(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:discharge2reg(fs, e, reg)
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VNIL" then
		self:_nil(fs, reg, 1)
	elseif k == "VFALSE" or k == "VTRUE" then
		self:codeABC(fs, "OP_LOADBOOL", reg, (e.k == "VTRUE") and 1 or 0, 0)
	elseif k == "VK" then
		self:codeABx(fs, "OP_LOADK", reg, e.info)
	elseif k == "VKNUM" then
		self:codeABx(fs, "OP_LOADK", reg, self:numberK(fs, e.nval))
	elseif k == "VRELOCABLE" then
		local pc = self:getcode(fs, e)
		luaP:SETARG_A(pc, reg)
	elseif k == "VNONRELOC" then
		if reg ~= e.info then
			self:codeABC(fs, "OP_MOVE", reg, e.info, 0)
		end
	else
		lua_assert(e.k == "VVOID" or e.k == "VJMP")
		return  -- nothing to do...
	end
	e.info = reg
	e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codenot()
------------------------------------------------------------------------
function luaK:discharge2anyreg(fs, e)
	if e.k ~= "VNONRELOC" then
		self:reserveregs(fs, 1)
		self:discharge2reg(fs, e, fs.freereg - 1)
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2nextreg(), luaK:exp2anyreg(), luaK:storevar()
------------------------------------------------------------------------
function luaK:exp2reg(fs, e, reg)
	self:discharge2reg(fs, e, reg)
	if e.k == "VJMP" then
		e.t = self:concat(fs, e.t, e.info)  -- put this jump in 't' list
	end
	if self:hasjumps(e) then
		local final  -- position after whole expression
		local p_f = self.NO_JUMP  -- position of an eventual LOAD false
		local p_t = self.NO_JUMP  -- position of an eventual LOAD true
		if self:need_value(fs, e.t) or self:need_value(fs, e.f) then
			local fj = (e.k == "VJMP") and self.NO_JUMP or self:jump(fs)
			p_f = self:code_label(fs, reg, 0, 1)
			p_t = self:code_label(fs, reg, 1, 0)
			self:patchtohere(fs, fj)
		end
		final = self:getlabel(fs)
		self:patchlistaux(fs, e.f, final, reg, p_f)
		self:patchlistaux(fs, e.t, final, reg, p_t)
	end
	e.f, e.t = self.NO_JUMP, self.NO_JUMP
	e.info = reg
	e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2nextreg(fs, e)
	self:dischargevars(fs, e)
	self:freeexp(fs, e)
	self:reserveregs(fs, 1)
	self:exp2reg(fs, e, fs.freereg - 1)
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2anyreg(fs, e)
	self:dischargevars(fs, e)
	if e.k == "VNONRELOC" then
		if not self:hasjumps(e) then  -- exp is already in a register
			return e.info
		end
		if e.info >= fs.nactvar then  -- reg. is not a local?
			self:exp2reg(fs, e, e.info)  -- put value on it
			return e.info
		end
	end
	self:exp2nextreg(fs, e)  -- default
	return e.info
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2RK(), luaK:prefix(), luaK:posfix()
-- * used in (lparser) luaY:yindex()
------------------------------------------------------------------------
function luaK:exp2val(fs, e)
	if self:hasjumps(e) then
		self:exp2anyreg(fs, e)
	else
		self:dischargevars(fs, e)
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2RK(fs, e)
	self:exp2val(fs, e)
	local k = e.k
	if k == "VKNUM" or k == "VTRUE" or k == "VFALSE" or k == "VNIL" then
		if fs.nk <= luaP.MAXINDEXRK then  -- constant fit in RK operand?
			-- converted from a 2-deep ternary operator expression
			if e.k == "VNIL" then
				e.info = self:nilK(fs)
			else
				e.info = (e.k == "VKNUM") and self:numberK(fs, e.nval)
					or self:boolK(fs, e.k == "VTRUE")
			end
			e.k = "VK"
			return luaP:RKASK(e.info)
		end
	elseif k == "VK" then
		if e.info <= luaP.MAXINDEXRK then  -- constant fit in argC?
			return luaP:RKASK(e.info)
		end
	else
		-- default
	end
	-- not a constant in the right range: put it in a register
	return self:exp2anyreg(fs, e)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:assignment(), luaY:localfunc(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:storevar(fs, var, ex)
	local k = var.k
	if k == "VLOCAL" then
		self:freeexp(fs, ex)
		self:exp2reg(fs, ex, var.info)
		return
	elseif k == "VUPVAL" then
		local e = self:exp2anyreg(fs, ex)
		self:codeABC(fs, "OP_SETUPVAL", e, var.info, 0)
	elseif k == "VGLOBAL" then
		local e = self:exp2anyreg(fs, ex)
		self:codeABx(fs, "OP_SETGLOBAL", e, var.info)
	elseif k == "VINDEXED" then
		local e = self:exp2RK(fs, ex)
		self:codeABC(fs, "OP_SETTABLE", var.info, var.aux, e)
	else
		lua_assert(0)  -- invalid var kind to store
	end
	self:freeexp(fs, ex)
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:primaryexp()
------------------------------------------------------------------------
function luaK:_self(fs, e, key)
	self:exp2anyreg(fs, e)
	self:freeexp(fs, e)
	local func = fs.freereg
	self:reserveregs(fs, 2)
	self:codeABC(fs, "OP_SELF", func, e.info, self:exp2RK(fs, key))
	self:freeexp(fs, key)
	e.info = func
	e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:codenot()
------------------------------------------------------------------------
function luaK:invertjump(fs, e)
	local pc = self:getjumpcontrol(fs, e.info)
	lua_assert(luaP:testTMode(luaP:GET_OPCODE(pc)) ~= 0 and
		luaP:GET_OPCODE(pc) ~= "OP_TESTSET" and
		luaP:GET_OPCODE(pc) ~= "OP_TEST")
	luaP:SETARG_A(pc, (luaP:GETARG_A(pc) == 0) and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:goiffalse()
------------------------------------------------------------------------
function luaK:jumponcond(fs, e, cond)
	if e.k == "VRELOCABLE" then
		local ie = self:getcode(fs, e)
		if luaP:GET_OPCODE(ie) == "OP_NOT" then
			fs.pc = fs.pc - 1  -- remove previous OP_NOT
			return self:condjump(fs, "OP_TEST", luaP:GETARG_B(ie), 0, cond and 0 or 1)
		end
		-- else go through
	end
	self:discharge2anyreg(fs, e)
	self:freeexp(fs, e)
	return self:condjump(fs, "OP_TESTSET", luaP.NO_REG, e.info, cond and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:infix(), (lparser) luaY:cond()
------------------------------------------------------------------------
function luaK:goiftrue(fs, e)
	local pc  -- pc of last jump
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VK" or k == "VKNUM" or k == "VTRUE" then
		pc = self.NO_JUMP  -- always true; do nothing
	elseif k == "VFALSE" then
		pc = self:jump(fs)  -- always jump
	elseif k == "VJMP" then
		self:invertjump(fs, e)
		pc = e.info
	else
		pc = self:jumponcond(fs, e, false)
	end
	e.f = self:concat(fs, e.f, pc)  -- insert last jump in `f' list
	self:patchtohere(fs, e.t)
	e.t = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in luaK:infix()
------------------------------------------------------------------------
function luaK:goiffalse(fs, e)
	local pc  -- pc of last jump
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VNIL" or k == "VFALSE"then
		pc = self.NO_JUMP  -- always false; do nothing
	elseif k == "VTRUE" then
		pc = self:jump(fs)  -- always jump
	elseif k == "VJMP" then
		pc = e.info
	else
		pc = self:jumponcond(fs, e, true)
	end
	e.t = self:concat(fs, e.t, pc)  -- insert last jump in `t' list
	self:patchtohere(fs, e.f)
	e.f = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used only in luaK:prefix()
------------------------------------------------------------------------
function luaK:codenot(fs, e)
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VNIL" or k == "VFALSE" then
		e.k = "VTRUE"
	elseif k == "VK" or k == "VKNUM" or k == "VTRUE" then
		e.k = "VFALSE"
	elseif k == "VJMP" then
		self:invertjump(fs, e)
	elseif k == "VRELOCABLE" or k == "VNONRELOC" then
		self:discharge2anyreg(fs, e)
		self:freeexp(fs, e)
		e.info = self:codeABC(fs, "OP_NOT", 0, e.info, 0)
		e.k = "VRELOCABLE"
	else
		lua_assert(0)  -- cannot happen
	end
	-- interchange true and false lists
	e.f, e.t = e.t, e.f
	self:removevalues(fs, e.f)
	self:removevalues(fs, e.t)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:field(), luaY:primaryexp()
------------------------------------------------------------------------
function luaK:indexed(fs, t, k)
	t.aux = self:exp2RK(fs, k)
	t.k = "VINDEXED"
end

------------------------------------------------------------------------
--
-- * used only in luaK:codearith()
------------------------------------------------------------------------
function luaK:constfolding(op, e1, e2)
	local r
	if not self:isnumeral(e1) or not self:isnumeral(e2) then return false end
	local v1 = e1.nval
	local v2 = e2.nval
	if op == "OP_ADD" then
		r = self:numadd(v1, v2)
	elseif op == "OP_SUB" then
		r = self:numsub(v1, v2)
	elseif op == "OP_MUL" then
		r = self:nummul(v1, v2)
	elseif op == "OP_DIV" then
		if v2 == 0 then return false end  -- do not attempt to divide by 0
		r = self:numdiv(v1, v2)
	elseif op == "OP_MOD" then
		if v2 == 0 then return false end  -- do not attempt to divide by 0
		r = self:nummod(v1, v2)
	elseif op == "OP_POW" then
		r = self:numpow(v1, v2)
	elseif op == "OP_UNM" then
		r = self:numunm(v1)
	elseif op == "OP_LEN" then
		return false  -- no constant folding for 'len'
	else
		lua_assert(0)
		r = 0
	end
	if self:numisnan(r) then return false end  -- do not attempt to produce NaN
	e1.nval = r
	return true
end

------------------------------------------------------------------------
--
-- * used in luaK:prefix(), luaK:posfix()
------------------------------------------------------------------------
function luaK:codearith(fs, op, e1, e2)
	if self:constfolding(op, e1, e2) then
		return
	else
		local o2 = (op ~= "OP_UNM" and op ~= "OP_LEN") and self:exp2RK(fs, e2) or 0
		local o1 = self:exp2RK(fs, e1)
		if o1 > o2 then
			self:freeexp(fs, e1)
			self:freeexp(fs, e2)
		else
			self:freeexp(fs, e2)
			self:freeexp(fs, e1)
		end
		e1.info = self:codeABC(fs, op, 0, o1, o2)
		e1.k = "VRELOCABLE"
	end
end

------------------------------------------------------------------------
--
-- * used only in luaK:posfix()
------------------------------------------------------------------------
function luaK:codecomp(fs, op, cond, e1, e2)
	local o1 = self:exp2RK(fs, e1)
	local o2 = self:exp2RK(fs, e2)
	self:freeexp(fs, e2)
	self:freeexp(fs, e1)
	if cond == 0 and op ~= "OP_EQ" then
		-- exchange args to replace by `<' or `<='
		o1, o2 = o2, o1  -- o1 <==> o2
		cond = 1
	end
	e1.info = self:condjump(fs, op, cond, o1, o2)
	e1.k = "VJMP"
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:prefix(fs, op, e)
	local e2 = {}  -- expdesc
	e2.t, e2.f = self.NO_JUMP, self.NO_JUMP
	e2.k = "VKNUM"
	e2.nval = 0
	if op == "OPR_MINUS" then
		if not self:isnumeral(e) then
			self:exp2anyreg(fs, e)  -- cannot operate on non-numeric constants
		end
		self:codearith(fs, "OP_UNM", e, e2)
	elseif op == "OPR_NOT" then
		self:codenot(fs, e)
	elseif op == "OPR_LEN" then
		self:exp2anyreg(fs, e)  -- cannot operate on constants
		self:codearith(fs, "OP_LEN", e, e2)
	else
		lua_assert(0)
	end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:infix(fs, op, v)
	if op == "OPR_AND" then
		self:goiftrue(fs, v)
	elseif op == "OPR_OR" then
		self:goiffalse(fs, v)
	elseif op == "OPR_CONCAT" then
		self:exp2nextreg(fs, v)  -- operand must be on the 'stack'
	elseif op == "OPR_ADD" or op == "OPR_SUB" or
		op == "OPR_MUL" or op == "OPR_DIV" or
		op == "OPR_MOD" or op == "OPR_POW" then
		if not self:isnumeral(v) then self:exp2RK(fs, v) end
	else
		self:exp2RK(fs, v)
	end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
-- table lookups to simplify testing
luaK.arith_op = {
	OPR_ADD = "OP_ADD", OPR_SUB = "OP_SUB", OPR_MUL = "OP_MUL",
	OPR_DIV = "OP_DIV", OPR_MOD = "OP_MOD", OPR_POW = "OP_POW",
}
luaK.comp_op = {
	OPR_EQ = "OP_EQ", OPR_NE = "OP_EQ", OPR_LT = "OP_LT",
	OPR_LE = "OP_LE", OPR_GT = "OP_LT", OPR_GE = "OP_LE",
}
luaK.comp_cond = {
	OPR_EQ = 1, OPR_NE = 0, OPR_LT = 1,
	OPR_LE = 1, OPR_GT = 0, OPR_GE = 0,
}
function luaK:posfix(fs, op, e1, e2)
	-- needed because e1 = e2 doesn't copy values...
	-- * in 5.0.x, only k/info/aux/t/f copied, t for AND, f for OR
	--   but here, all elements are copied for completeness' sake
	local function copyexp(e1, e2)
		e1.k = e2.k
		e1.info = e2.info; e1.aux = e2.aux
		e1.nval = e2.nval
		e1.t = e2.t; e1.f = e2.f
	end
	if op == "OPR_AND" then
		lua_assert(e1.t == self.NO_JUMP)  -- list must be closed
		self:dischargevars(fs, e2)
		e2.f = self:concat(fs, e2.f, e1.f)
		copyexp(e1, e2)
	elseif op == "OPR_OR" then
		lua_assert(e1.f == self.NO_JUMP)  -- list must be closed
		self:dischargevars(fs, e2)
		e2.t = self:concat(fs, e2.t, e1.t)
		copyexp(e1, e2)
	elseif op == "OPR_CONCAT" then
		self:exp2val(fs, e2)
		if e2.k == "VRELOCABLE" and luaP:GET_OPCODE(self:getcode(fs, e2)) == "OP_CONCAT" then
			lua_assert(e1.info == luaP:GETARG_B(self:getcode(fs, e2)) - 1)
			self:freeexp(fs, e1)
			luaP:SETARG_B(self:getcode(fs, e2), e1.info)
			e1.k = "VRELOCABLE"
			e1.info = e2.info
		else
			self:exp2nextreg(fs, e2)  -- operand must be on the 'stack'
			self:codearith(fs, "OP_CONCAT", e1, e2)
		end
	else
		-- the following uses a table lookup in place of conditionals
		local arith = self.arith_op[op]
		if arith then
			self:codearith(fs, arith, e1, e2)
		else
			local comp = self.comp_op[op]
			if comp then
				self:codecomp(fs, comp, self.comp_cond[op], e1, e2)
			else
				lua_assert(0)
			end
		end--if arith
	end--if op
end

------------------------------------------------------------------------
-- adjusts debug information for last instruction written, in order to
-- change the line where item comes into existence
-- * used in (lparser) luaY:funcargs(), luaY:forbody(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:fixline(fs, line)
	fs.f.lineinfo[fs.pc - 1] = line
end

------------------------------------------------------------------------
-- general function to write an instruction into the instruction buffer,
-- sets debug information too
-- * used in luaK:codeABC(), luaK:codeABx()
-- * called directly by (lparser) luaY:whilestat()
------------------------------------------------------------------------
function luaK:code(fs, i, line)
	local f = fs.f
	self:dischargejpc(fs)  -- 'pc' will change
	-- put new instruction in code array
	luaY:growvector(fs.L, f.code, fs.pc, f.sizecode, nil,
		luaY.MAX_INT, "code size overflow")
	f.code[fs.pc] = i
	-- save corresponding line information
	luaY:growvector(fs.L, f.lineinfo, fs.pc, f.sizelineinfo, nil,
		luaY.MAX_INT, "code size overflow")
	f.lineinfo[fs.pc] = line
	local pc = fs.pc
	fs.pc = fs.pc + 1
	return pc
end

------------------------------------------------------------------------
-- writes an instruction of type ABC
-- * calls luaK:code()
------------------------------------------------------------------------
function luaK:codeABC(fs, o, a, b, c)
	lua_assert(luaP:getOpMode(o) == luaP.OpMode.iABC)
	lua_assert(luaP:getBMode(o) ~= luaP.OpArgMask.OpArgN or b == 0)
	lua_assert(luaP:getCMode(o) ~= luaP.OpArgMask.OpArgN or c == 0)
	return self:code(fs, luaP:CREATE_ABC(o, a, b, c), fs.ls.lastline)
end

------------------------------------------------------------------------
-- writes an instruction of type ABx
-- * calls luaK:code(), called by luaK:codeAsBx()
------------------------------------------------------------------------
function luaK:codeABx(fs, o, a, bc)
	lua_assert(luaP:getOpMode(o) == luaP.OpMode.iABx or
		luaP:getOpMode(o) == luaP.OpMode.iAsBx)
	lua_assert(luaP:getCMode(o) == luaP.OpArgMask.OpArgN)
	return self:code(fs, luaP:CREATE_ABx(o, a, bc), fs.ls.lastline)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:closelistfield(), luaY:lastlistfield()
------------------------------------------------------------------------
function luaK:setlist(fs, base, nelems, tostore)
	local c = math.floor((nelems - 1)/luaP.LFIELDS_PER_FLUSH) + 1
	local b = (tostore == luaY.LUA_MULTRET) and 0 or tostore
	lua_assert(tostore ~= 0)
	if c <= luaP.MAXARG_C then
		self:codeABC(fs, "OP_SETLIST", base, b, c)
	else
		self:codeABC(fs, "OP_SETLIST", base, b, 0)
		self:code(fs, luaP:CREATE_Inst(c), fs.ls.lastline)
	end
	fs.freereg = base + 1  -- free registers with list values
end




--dofile("lparser.lua")

--[[--------------------------------------------------------------------
-- Expression descriptor
-- * expkind changed to string constants; luaY:assignment was the only
--   function to use a relational operator with this enumeration
-- VVOID       -- no value
-- VNIL        -- no value
-- VTRUE       -- no value
-- VFALSE      -- no value
-- VK          -- info = index of constant in 'k'
-- VKNUM       -- nval = numerical value
-- VLOCAL      -- info = local register
-- VUPVAL,     -- info = index of upvalue in 'upvalues'
-- VGLOBAL     -- info = index of table; aux = index of global name in 'k'
-- VINDEXED    -- info = table register; aux = index register (or 'k')
-- VJMP        -- info = instruction pc
-- VRELOCABLE  -- info = instruction pc
-- VNONRELOC   -- info = result register
-- VCALL       -- info = instruction pc
-- VVARARG     -- info = instruction pc
} ----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- * expdesc in Lua 5.1.x has a union u and another struct s; this Lua
--   implementation ignores all instances of u and s usage
-- struct expdesc:
--   k  -- (enum: expkind)
--   info, aux -- (int, int)
--   nval -- (lua_Number)
--   t  -- patch list of 'exit when true'
--   f  -- patch list of 'exit when false'
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct upvaldesc:
--   k  -- (lu_byte)
--   info -- (lu_byte)
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- state needed to generate code for a given function
-- struct FuncState:
--   f  -- current function header (table: Proto)
--   h  -- table to find (and reuse) elements in 'k' (table: Table)
--   prev  -- enclosing function (table: FuncState)
--   ls  -- lexical state (table: LexState)
--   L  -- copy of the Lua state (table: lua_State)
--   bl  -- chain of current blocks (table: BlockCnt)
--   pc  -- next position to code (equivalent to 'ncode')
--   lasttarget   -- 'pc' of last 'jump target'
--   jpc  -- list of pending jumps to 'pc'
--   freereg  -- first free register
--   nk  -- number of elements in 'k'
--   np  -- number of elements in 'p'
--   nlocvars  -- number of elements in 'locvars'
--   nactvar  -- number of active local variables
--   upvalues[LUAI_MAXUPVALUES]  -- upvalues (table: upvaldesc)
--   actvar[LUAI_MAXVARS]  -- declared-variable stack
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- constants used by parser
-- * picks up duplicate values from luaX if required
------------------------------------------------------------------------
luaY.LUA_QS = luaX.LUA_QS or "'%s'"  -- (from luaconf.h)

luaY.SHRT_MAX = 32767 -- (from <limits.h>)
luaY.LUAI_MAXVARS = 200  -- (luaconf.h)
luaY.LUAI_MAXUPVALUES = 60  -- (luaconf.h)
luaY.MAX_INT = luaX.MAX_INT or 2147483645  -- (from llimits.h)
-- * INT_MAX-2 for 32-bit systems
luaY.LUAI_MAXCCALLS = 200  -- (from luaconf.h)

luaY.VARARG_HASARG = 1  -- (from lobject.h)
-- NOTE: HASARG_MASK is value-specific
luaY.HASARG_MASK = 2 -- this was added for a bitop in parlist()
luaY.VARARG_ISVARARG = 2
-- NOTE: there is some value-specific code that involves VARARG_NEEDSARG
luaY.VARARG_NEEDSARG = 4

luaY.LUA_MULTRET = -1  -- (lua.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- LUA_QL describes how error messages quote program elements.
-- CHANGE it if you want a different appearance. (from luaconf.h)
------------------------------------------------------------------------
function luaY:LUA_QL(x)
	return "'"..x.."'"
end

------------------------------------------------------------------------
-- this is a stripped-down luaM_growvector (from lmem.h) which is a
-- macro based on luaM_growaux (in lmem.c); all the following does is
-- reproduce the size limit checking logic of the original function
-- so that error behaviour is identical; all arguments preserved for
-- convenience, even those which are unused
-- * set the t field to nil, since this originally does a sizeof(t)
-- * size (originally a pointer) is never updated, their final values
--   are set by luaY:close_func(), so overall things should still work
------------------------------------------------------------------------
function luaY:growvector(L, v, nelems, size, t, limit, e)
	if nelems >= limit then
		error(e)  -- was luaG_runerror
	end
end

------------------------------------------------------------------------
-- initialize a new function prototype structure (from lfunc.c)
-- * used only in open_func()
------------------------------------------------------------------------
function luaY:newproto(L)
	local f = {} -- Proto
	-- luaC_link(L, obj2gco(f), LUA_TPROTO); /* GC */
	f.k = {}
	f.sizek = 0
	f.p = {}
	f.sizep = 0
	f.code = {}
	f.sizecode = 0
	f.sizelineinfo = 0
	f.sizeupvalues = 0
	f.nups = 0
	f.upvalues = {}
	f.numparams = 0
	f.is_vararg = 0
	f.maxstacksize = 0
	f.lineinfo = {}
	f.sizelocvars = 0
	f.locvars = {}
	f.lineDefined = 0
	f.lastlinedefined = 0
	f.source = nil
	return f
end

------------------------------------------------------------------------
-- converts an integer to a "floating point byte", represented as
-- (eeeeexxx), where the real value is (1xxx) * 2^(eeeee - 1) if
-- eeeee != 0 and (xxx) otherwise.
------------------------------------------------------------------------
function luaY:int2fb(x)
	local e = 0  -- exponent
	while x >= 16 do
		x = math.floor((x + 1) / 2)
		e = e + 1
	end
	if x < 8 then
		return x
	else
		return ((e + 1) * 8) + (x - 8)
	end
end

--[[--------------------------------------------------------------------
-- parser functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- true of the kind of expression produces multiple return values
------------------------------------------------------------------------
function luaY:hasmultret(k)
	return k == "VCALL" or k == "VVARARG"
end

------------------------------------------------------------------------
-- convenience function to access active local i, returns entry
------------------------------------------------------------------------
function luaY:getlocvar(fs, i)
	return fs.f.locvars[ fs.actvar[i] ]
end

------------------------------------------------------------------------
-- check a limit, string m provided as an error message
------------------------------------------------------------------------
function luaY:checklimit(fs, v, l, m)
	if v > l then self:errorlimit(fs, l, m) end
end

--[[--------------------------------------------------------------------
-- nodes for block list (list of active blocks)
-- struct BlockCnt:
--   previous  -- chain (table: BlockCnt)
--   breaklist  -- list of jumps out of this loop
--   nactvar  -- # active local variables outside the breakable structure
--   upval  -- true if some variable in the block is an upvalue (boolean)
--   isbreakable  -- true if 'block' is a loop (boolean)
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- prototypes for recursive non-terminal functions
------------------------------------------------------------------------
-- prototypes deleted; not required in Lua

------------------------------------------------------------------------
-- reanchor if last token is has a constant string, see close_func()
-- * used only in close_func()
------------------------------------------------------------------------
function luaY:anchor_token(ls)
	if ls.t.token == "TK_NAME" or ls.t.token == "TK_STRING" then
		-- not relevant to Lua implementation of parser
		-- local ts = ls.t.seminfo
		-- luaX_newstring(ls, getstr(ts), ts->tsv.len); /* C */
	end
end

------------------------------------------------------------------------
-- throws a syntax error if token expected is not there
------------------------------------------------------------------------
function luaY:error_expected(ls, token)
	luaX:syntaxerror(ls,
		string.format(self.LUA_QS.." expected", luaX:token2str(ls, token)))
end

------------------------------------------------------------------------
-- prepares error message for display, for limits exceeded
-- * used only in checklimit()
------------------------------------------------------------------------
function luaY:errorlimit(fs, limit, what)
	local msg = (fs.f.linedefined == 0) and
		string.format("main function has more than %d %s", limit, what) or
		string.format("function at line %d has more than %d %s",
			fs.f.linedefined, limit, what)
	luaX:lexerror(fs.ls, msg, 0)
end

------------------------------------------------------------------------
-- tests for a token, returns outcome
-- * return value changed to boolean
------------------------------------------------------------------------
function luaY:testnext(ls, c)
	if ls.t.token == c then
		luaX:next(ls)
		return true
	else
		return false
	end
end

------------------------------------------------------------------------
-- check for existence of a token, throws error if not found
------------------------------------------------------------------------
function luaY:check(ls, c)
	if ls.t.token ~= c then
		self:error_expected(ls, c)
	end
end

------------------------------------------------------------------------
-- verify existence of a token, then skip it
------------------------------------------------------------------------
function luaY:checknext(ls, c)
	self:check(ls, c)
	luaX:next(ls)
end

------------------------------------------------------------------------
-- throws error if condition not matched
------------------------------------------------------------------------
function luaY:check_condition(ls, c, msg)
	if not c then luaX:syntaxerror(ls, msg) end
end

------------------------------------------------------------------------
-- verifies token conditions are met or else throw error
------------------------------------------------------------------------
function luaY:check_match(ls, what, who, where)
	if not self:testnext(ls, what) then
		if where == ls.linenumber then
			self:error_expected(ls, what)
		else
			luaX:syntaxerror(ls, string.format(
				self.LUA_QS.." expected (to close "..self.LUA_QS.." at line %d)",
				luaX:token2str(ls, what), luaX:token2str(ls, who), where))
		end
	end
end

------------------------------------------------------------------------
-- expect that token is a name, return the name
------------------------------------------------------------------------
function luaY:str_checkname(ls)
	self:check(ls, "TK_NAME")
	local ts = ls.t.seminfo
	luaX:next(ls)
	return ts
end

------------------------------------------------------------------------
-- initialize a struct expdesc, expression description data structure
------------------------------------------------------------------------
function luaY:init_exp(e, k, i)
	e.f, e.t = luaK.NO_JUMP, luaK.NO_JUMP
	e.k = k
	e.info = i
end

------------------------------------------------------------------------
-- adds given string s in string pool, sets e as VK
------------------------------------------------------------------------
function luaY:codestring(ls, e, s)
	self:init_exp(e, "VK", luaK:stringK(ls.fs, s))
end

------------------------------------------------------------------------
-- consume a name token, adds it to string pool, sets e as VK
------------------------------------------------------------------------
function luaY:checkname(ls, e)
	self:codestring(ls, e, self:str_checkname(ls))
end

------------------------------------------------------------------------
-- creates struct entry for a local variable
-- * used only in new_localvar()
------------------------------------------------------------------------
function luaY:registerlocalvar(ls, varname)
	local fs = ls.fs
	local f = fs.f
	self:growvector(ls.L, f.locvars, fs.nlocvars, f.sizelocvars,
		nil, self.SHRT_MAX, "too many local variables")
	-- loop to initialize empty f.locvar positions not required
	f.locvars[fs.nlocvars] = {} -- LocVar
	f.locvars[fs.nlocvars].varname = varname
	-- luaC_objbarrier(ls.L, f, varname) /* GC */
	local nlocvars = fs.nlocvars
	fs.nlocvars = fs.nlocvars + 1
	return nlocvars
end

------------------------------------------------------------------------
-- creates a new local variable given a name and an offset from nactvar
-- * used in fornum(), forlist(), parlist(), body()
------------------------------------------------------------------------
function luaY:new_localvarliteral(ls, v, n)
	self:new_localvar(ls, v, n)
end

------------------------------------------------------------------------
-- register a local variable, set in active variable list
------------------------------------------------------------------------
function luaY:new_localvar(ls, name, n)
	local fs = ls.fs
	self:checklimit(fs, fs.nactvar + n + 1, self.LUAI_MAXVARS, "local variables")
	fs.actvar[fs.nactvar + n] = self:registerlocalvar(ls, name)
end

------------------------------------------------------------------------
-- adds nvars number of new local variables, set debug information
------------------------------------------------------------------------
function luaY:adjustlocalvars(ls, nvars)
	local fs = ls.fs
	fs.nactvar = fs.nactvar + nvars
	for i = nvars, 1, -1 do
		self:getlocvar(fs, fs.nactvar - i).startpc = fs.pc
	end
end

------------------------------------------------------------------------
-- removes a number of locals, set debug information
------------------------------------------------------------------------
function luaY:removevars(ls, tolevel)
	local fs = ls.fs
	while fs.nactvar > tolevel do
		fs.nactvar = fs.nactvar - 1
		self:getlocvar(fs, fs.nactvar).endpc = fs.pc
	end
end

------------------------------------------------------------------------
-- returns an existing upvalue index based on the given name, or
-- creates a new upvalue struct entry and returns the new index
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:indexupvalue(fs, name, v)
	local f = fs.f
	for i = 0, f.nups - 1 do
		if fs.upvalues[i].k == v.k and fs.upvalues[i].info == v.info then
			lua_assert(f.upvalues[i] == name)
			return i
		end
	end
	-- new one
	self:checklimit(fs, f.nups + 1, self.LUAI_MAXUPVALUES, "upvalues")
	self:growvector(fs.L, f.upvalues, f.nups, f.sizeupvalues,
		nil, self.MAX_INT, "")
	-- loop to initialize empty f.upvalues positions not required
	f.upvalues[f.nups] = name
	-- luaC_objbarrier(fs->L, f, name); /* GC */
	lua_assert(v.k == "VLOCAL" or v.k == "VUPVAL")
	-- this is a partial copy; only k & info fields used
	fs.upvalues[f.nups] = { k = v.k, info = v.info }
	local nups = f.nups
	f.nups = f.nups + 1
	return nups
end

------------------------------------------------------------------------
-- search the local variable namespace of the given fs for a match
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:searchvar(fs, n)
	for i = fs.nactvar - 1, 0, -1 do
		if n == self:getlocvar(fs, i).varname then
			return i
		end
	end
	return -1  -- not found
end

------------------------------------------------------------------------
-- * mark upvalue flags in function states up to a given level
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:markupval(fs, level)
	local bl = fs.bl
	while bl and bl.nactvar > level do bl = bl.previous end
	if bl then bl.upval = true end
end

------------------------------------------------------------------------
-- handle locals, globals and upvalues and related processing
-- * search mechanism is recursive, calls itself to search parents
-- * used only in singlevar()
------------------------------------------------------------------------
function luaY:singlevaraux(fs, n, var, base)
	if fs == nil then  -- no more levels?
		self:init_exp(var, "VGLOBAL", luaP.NO_REG)  -- default is global variable
		return "VGLOBAL"
	else
		local v = self:searchvar(fs, n)  -- look up at current level
		if v >= 0 then
			self:init_exp(var, "VLOCAL", v)
			if base == 0 then
				self:markupval(fs, v)  -- local will be used as an upval
			end
			return "VLOCAL"
		else  -- not found at current level; try upper one
			if self:singlevaraux(fs.prev, n, var, 0) == "VGLOBAL" then
				return "VGLOBAL"
			end
			var.info = self:indexupvalue(fs, n, var)  -- else was LOCAL or UPVAL
			var.k = "VUPVAL"  -- upvalue in this level
			return "VUPVAL"
		end--if v
	end--if fs
end

------------------------------------------------------------------------
-- consume a name token, creates a variable (global|local|upvalue)
-- * used in prefixexp(), funcname()
------------------------------------------------------------------------
function luaY:singlevar(ls, var)
	local varname = self:str_checkname(ls)
	local fs = ls.fs
	if self:singlevaraux(fs, varname, var, 1) == "VGLOBAL" then
		var.info = luaK:stringK(fs, varname)  -- info points to global name
	end
end

------------------------------------------------------------------------
-- adjust RHS to match LHS in an assignment
-- * used in assignment(), forlist(), localstat()
------------------------------------------------------------------------
function luaY:adjust_assign(ls, nvars, nexps, e)
	local fs = ls.fs
	local extra = nvars - nexps
	if self:hasmultret(e.k) then
		extra = extra + 1  -- includes call itself
		if extra <= 0 then extra = 0 end
		luaK:setreturns(fs, e, extra)  -- last exp. provides the difference
		if extra > 1 then luaK:reserveregs(fs, extra - 1) end
	else
		if e.k ~= "VVOID" then luaK:exp2nextreg(fs, e) end  -- close last expression
		if extra > 0 then
			local reg = fs.freereg
			luaK:reserveregs(fs, extra)
			luaK:_nil(fs, reg, extra)
		end
	end
end

------------------------------------------------------------------------
-- tracks and limits parsing depth, assert check at end of parsing
------------------------------------------------------------------------
function luaY:enterlevel(ls)
	ls.L.nCcalls = ls.L.nCcalls + 1
	if ls.L.nCcalls > self.LUAI_MAXCCALLS then
		luaX:lexerror(ls, "chunk has too many syntax levels", 0)
	end
end

------------------------------------------------------------------------
-- tracks parsing depth, a pair with luaY:enterlevel()
------------------------------------------------------------------------
function luaY:leavelevel(ls)
	ls.L.nCcalls = ls.L.nCcalls - 1
end

------------------------------------------------------------------------
-- enters a code unit, initializes elements
------------------------------------------------------------------------
function luaY:enterblock(fs, bl, isbreakable)
	bl.breaklist = luaK.NO_JUMP
	bl.isbreakable = isbreakable
	bl.nactvar = fs.nactvar
	bl.upval = false
	bl.previous = fs.bl
	fs.bl = bl
	lua_assert(fs.freereg == fs.nactvar)
end

------------------------------------------------------------------------
-- leaves a code unit, close any upvalues
------------------------------------------------------------------------
function luaY:leaveblock(fs)
	local bl = fs.bl
	fs.bl = bl.previous
	self:removevars(fs.ls, bl.nactvar)
	if bl.upval then
		luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
	end
	-- a block either controls scope or breaks (never both)
	lua_assert(not bl.isbreakable or not bl.upval)
	lua_assert(bl.nactvar == fs.nactvar)
	fs.freereg = fs.nactvar  -- free registers
	luaK:patchtohere(fs, bl.breaklist)
end

------------------------------------------------------------------------
-- implement the instantiation of a function prototype, append list of
-- upvalues after the instantiation instruction
-- * used only in body()
------------------------------------------------------------------------
function luaY:pushclosure(ls, func, v)
	local fs = ls.fs
	local f = fs.f
	self:growvector(ls.L, f.p, fs.np, f.sizep, nil,
		luaP.MAXARG_Bx, "constant table overflow")
	-- loop to initialize empty f.p positions not required
	f.p[fs.np] = func.f
	fs.np = fs.np + 1
	-- luaC_objbarrier(ls->L, f, func->f); /* C */
	self:init_exp(v, "VRELOCABLE", luaK:codeABx(fs, "OP_CLOSURE", 0, fs.np - 1))
	for i = 0, func.f.nups - 1 do
		local o = (func.upvalues[i].k == "VLOCAL") and "OP_MOVE" or "OP_GETUPVAL"
		luaK:codeABC(fs, o, 0, func.upvalues[i].info, 0)
	end
end

------------------------------------------------------------------------
-- opening of a function
------------------------------------------------------------------------
function luaY:open_func(ls, fs)
	local L = ls.L
	local f = self:newproto(ls.L)
	fs.f = f
	fs.prev = ls.fs  -- linked list of funcstates
	fs.ls = ls
	fs.L = L
	ls.fs = fs
	fs.pc = 0
	fs.lasttarget = -1
	fs.jpc = luaK.NO_JUMP
	fs.freereg = 0
	fs.nk = 0
	fs.np = 0
	fs.nlocvars = 0
	fs.nactvar = 0
	fs.bl = nil
	f.source = ls.source
	f.maxstacksize = 2  -- registers 0/1 are always valid
	fs.h = {}  -- constant table; was luaH_new call
	-- anchor table of constants and prototype (to avoid being collected)
	-- sethvalue2s(L, L->top, fs->h); incr_top(L); /* C */
	-- setptvalue2s(L, L->top, f); incr_top(L);
end

------------------------------------------------------------------------
-- closing of a function
------------------------------------------------------------------------
function luaY:close_func(ls)
	local L = ls.L
	local fs = ls.fs
	local f = fs.f
	self:removevars(ls, 0)
	luaK:ret(fs, 0, 0)  -- final return
	-- luaM_reallocvector deleted for f->code, f->lineinfo, f->k, f->p,
	-- f->locvars, f->upvalues; not required for Lua table arrays
	f.sizecode = fs.pc
	f.sizelineinfo = fs.pc
	f.sizek = fs.nk
	f.sizep = fs.np
	f.sizelocvars = fs.nlocvars
	f.sizeupvalues = f.nups
	--lua_assert(luaG_checkcode(f))  -- currently not implemented
	lua_assert(fs.bl == nil)
	ls.fs = fs.prev
	-- the following is not required for this implementation; kept here
	-- for completeness
	-- L->top -= 2;  /* remove table and prototype from the stack */
	-- last token read was anchored in defunct function; must reanchor it
	if fs then self:anchor_token(ls) end
end

------------------------------------------------------------------------
-- parser initialization function
-- * note additional sub-tables needed for LexState, FuncState
------------------------------------------------------------------------
function luaY:parser(L, z, buff, name)
	local lexstate = {}  -- LexState
	lexstate.t = {}
	lexstate.lookahead = {}
	local funcstate = {}  -- FuncState
	funcstate.upvalues = {}
	funcstate.actvar = {}
	-- the following nCcalls initialization added for convenience
	L.nCcalls = 0
	lexstate.buff = buff
	luaX:setinput(L, lexstate, z, name)
	self:open_func(lexstate, funcstate)
	funcstate.f.is_vararg = self.VARARG_ISVARARG  -- main func. is always vararg
	luaX:next(lexstate)  -- read first token
	self:chunk(lexstate)
	self:check(lexstate, "TK_EOS")
	self:close_func(lexstate)
	lua_assert(funcstate.prev == nil)
	lua_assert(funcstate.f.nups == 0)
	lua_assert(lexstate.fs == nil)
	return funcstate.f
end

--[[--------------------------------------------------------------------
-- GRAMMAR RULES
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a function name suffix, for function call specifications
-- * used in primaryexp(), funcname()
------------------------------------------------------------------------
function luaY:field(ls, v)
	-- field -> ['.' | ':'] NAME
	local fs = ls.fs
	local key = {}  -- expdesc
	luaK:exp2anyreg(fs, v)
	luaX:next(ls)  -- skip the dot or colon
	self:checkname(ls, key)
	luaK:indexed(fs, v, key)
end

------------------------------------------------------------------------
-- parse a table indexing suffix, for constructors, expressions
-- * used in recfield(), primaryexp()
------------------------------------------------------------------------
function luaY:yindex(ls, v)
	-- index -> '[' expr ']'
	luaX:next(ls)  -- skip the '['
	self:expr(ls, v)
	luaK:exp2val(ls.fs, v)
	self:checknext(ls, "]")
end

--[[--------------------------------------------------------------------
-- Rules for Constructors
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct ConsControl:
--   v  -- last list item read (table: struct expdesc)
--   t  -- table descriptor (table: struct expdesc)
--   nh  -- total number of 'record' elements
--   na  -- total number of array elements
--   tostore  -- number of array elements pending to be stored
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a table record (hash) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:recfield(ls, cc)
	-- recfield -> (NAME | '['exp1']') = exp1
	local fs = ls.fs
	local reg = ls.fs.freereg
	local key, val = {}, {}  -- expdesc
	if ls.t.token == "TK_NAME" then
		self:checklimit(fs, cc.nh, self.MAX_INT, "items in a constructor")
		self:checkname(ls, key)
	else  -- ls->t.token == '['
		self:yindex(ls, key)
	end
	cc.nh = cc.nh + 1
	self:checknext(ls, "=")
	local rkkey = luaK:exp2RK(fs, key)
	self:expr(ls, val)
	luaK:codeABC(fs, "OP_SETTABLE", cc.t.info, rkkey, luaK:exp2RK(fs, val))
	fs.freereg = reg  -- free registers
end

------------------------------------------------------------------------
-- emit a set list instruction if enough elements (LFIELDS_PER_FLUSH)
-- * used in constructor()
------------------------------------------------------------------------
function luaY:closelistfield(fs, cc)
	if cc.v.k == "VVOID" then return end  -- there is no list item
	luaK:exp2nextreg(fs, cc.v)
	cc.v.k = "VVOID"
	if cc.tostore == luaP.LFIELDS_PER_FLUSH then
		luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)  -- flush
		cc.tostore = 0  -- no more items pending
	end
end

------------------------------------------------------------------------
-- emit a set list instruction at the end of parsing list constructor
-- * used in constructor()
------------------------------------------------------------------------
function luaY:lastlistfield(fs, cc)
	if cc.tostore == 0 then return end
	if self:hasmultret(cc.v.k) then
		luaK:setmultret(fs, cc.v)
		luaK:setlist(fs, cc.t.info, cc.na, self.LUA_MULTRET)
		cc.na = cc.na - 1  -- do not count last expression (unknown number of elements)
	else
		if cc.v.k ~= "VVOID" then
			luaK:exp2nextreg(fs, cc.v)
		end
		luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)
	end
end

------------------------------------------------------------------------
-- parse a table list (array) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:listfield(ls, cc)
	self:expr(ls, cc.v)
	self:checklimit(ls.fs, cc.na, self.MAX_INT, "items in a constructor")
	cc.na = cc.na + 1
	cc.tostore = cc.tostore + 1
end

------------------------------------------------------------------------
-- parse a table constructor
-- * used in funcargs(), simpleexp()
------------------------------------------------------------------------
function luaY:constructor(ls, t)
	-- constructor -> '{' [ field { fieldsep field } [ fieldsep ] ] '}'
	-- field -> recfield | listfield
	-- fieldsep -> ',' | ';'
	local fs = ls.fs
	local line = ls.linenumber
	local pc = luaK:codeABC(fs, "OP_NEWTABLE", 0, 0, 0)
	local cc = {}  -- ConsControl
	cc.v = {}
	cc.na, cc.nh, cc.tostore = 0, 0, 0
	cc.t = t
	self:init_exp(t, "VRELOCABLE", pc)
	self:init_exp(cc.v, "VVOID", 0)  -- no value (yet)
	luaK:exp2nextreg(ls.fs, t)  -- fix it at stack top (for gc)
	self:checknext(ls, "{")
	repeat
		lua_assert(cc.v.k == "VVOID" or cc.tostore > 0)
		if ls.t.token == "}" then break end
		self:closelistfield(fs, cc)
		local c = ls.t.token

		if c == "TK_NAME" then  -- may be listfields or recfields
			luaX:lookahead(ls)
			if ls.lookahead.token ~= "=" then  -- expression?
				self:listfield(ls, cc)
			else
				self:recfield(ls, cc)
			end
		elseif c == "[" then  -- constructor_item -> recfield
			self:recfield(ls, cc)
		else  -- constructor_part -> listfield
			self:listfield(ls, cc)
		end
	until not self:testnext(ls, ",") and not self:testnext(ls, ";")
	self:check_match(ls, "}", "{", line)
	self:lastlistfield(fs, cc)
	luaP:SETARG_B(fs.f.code[pc], self:int2fb(cc.na)) -- set initial array size
	luaP:SETARG_C(fs.f.code[pc], self:int2fb(cc.nh)) -- set initial table size
end

-- }======================================================================

------------------------------------------------------------------------
-- parse the arguments (parameters) of a function declaration
-- * used in body()
------------------------------------------------------------------------
function luaY:parlist(ls)
	-- parlist -> [ param { ',' param } ]
	local fs = ls.fs
	local f = fs.f
	local nparams = 0
	f.is_vararg = 0
	if ls.t.token ~= ")" then  -- is 'parlist' not empty?
		repeat
			local c = ls.t.token
			if c == "TK_NAME" then  -- param -> NAME
				self:new_localvar(ls, self:str_checkname(ls), nparams)
				nparams = nparams + 1
			elseif c == "TK_DOTS" then  -- param -> `...'
				luaX:next(ls)
				-- [[
				-- #if defined(LUA_COMPAT_VARARG)
				-- use `arg' as default name
				self:new_localvarliteral(ls, "arg", nparams)
				nparams = nparams + 1
				f.is_vararg = self.VARARG_HASARG + self.VARARG_NEEDSARG
				-- #endif
				--]]
				f.is_vararg = f.is_vararg + self.VARARG_ISVARARG
			else
				luaX:syntaxerror(ls, "<name> or "..self:LUA_QL("...").." expected")
			end
		until f.is_vararg ~= 0 or not self:testnext(ls, ",")
	end--if
	self:adjustlocalvars(ls, nparams)
	-- NOTE: the following works only when HASARG_MASK is 2!
	f.numparams = fs.nactvar - (f.is_vararg % self.HASARG_MASK)
	luaK:reserveregs(fs, fs.nactvar)  -- reserve register for parameters
end

------------------------------------------------------------------------
-- parse function declaration body
-- * used in simpleexp(), localfunc(), funcstat()
------------------------------------------------------------------------
function luaY:body(ls, e, needself, line)
	-- body ->  '(' parlist ')' chunk END
	local new_fs = {}  -- FuncState
	new_fs.upvalues = {}
	new_fs.actvar = {}
	self:open_func(ls, new_fs)
	new_fs.f.lineDefined = line
	self:checknext(ls, "(")
	if needself then
		self:new_localvarliteral(ls, "self", 0)
		self:adjustlocalvars(ls, 1)
	end
	self:parlist(ls)
	self:checknext(ls, ")")
	self:chunk(ls)
	new_fs.f.lastlinedefined = ls.linenumber
	self:check_match(ls, "TK_END", "TK_FUNCTION", line)
	self:close_func(ls)
	self:pushclosure(ls, new_fs, e)
end

------------------------------------------------------------------------
-- parse a list of comma-separated expressions
-- * used is multiple locations
------------------------------------------------------------------------
function luaY:explist1(ls, v)
	-- explist1 -> expr { ',' expr }
	local n = 1  -- at least one expression
	self:expr(ls, v)
	while self:testnext(ls, ",") do
		luaK:exp2nextreg(ls.fs, v)
		self:expr(ls, v)
		n = n + 1
	end
	return n
end

------------------------------------------------------------------------
-- parse the parameters of a function call
-- * contrast with parlist(), used in function declarations
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:funcargs(ls, f)
	local fs = ls.fs
	local args = {}  -- expdesc
	local nparams
	local line = ls.linenumber
	local c = ls.t.token
	if c == "(" then  -- funcargs -> '(' [ explist1 ] ')'
		if line ~= ls.lastline then
			luaX:syntaxerror(ls, "ambiguous syntax (function call x new statement)")
		end
		luaX:next(ls)
		if ls.t.token == ")" then  -- arg list is empty?
			args.k = "VVOID"
		else
			self:explist1(ls, args)
			luaK:setmultret(fs, args)
		end
		self:check_match(ls, ")", "(", line)
	elseif c == "{" then  -- funcargs -> constructor
		self:constructor(ls, args)
	elseif c == "TK_STRING" then  -- funcargs -> STRING
		self:codestring(ls, args, ls.t.seminfo)
		luaX:next(ls)  -- must use 'seminfo' before 'next'
	else
		luaX:syntaxerror(ls, "function arguments expected")
		return
	end
	lua_assert(f.k == "VNONRELOC")
	local base = f.info  -- base register for call
	if self:hasmultret(args.k) then
		nparams = self.LUA_MULTRET  -- open call
	else
		if args.k ~= "VVOID" then
			luaK:exp2nextreg(fs, args)  -- close last argument
		end
		nparams = fs.freereg - (base + 1)
	end
	self:init_exp(f, "VCALL", luaK:codeABC(fs, "OP_CALL", base, nparams + 1, 2))
	luaK:fixline(fs, line)
	fs.freereg = base + 1  -- call remove function and arguments and leaves
	-- (unless changed) one result
end

--[[--------------------------------------------------------------------
-- Expression parsing
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parses an expression in parentheses or a single variable
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:prefixexp(ls, v)
	-- prefixexp -> NAME | '(' expr ')'
	local c = ls.t.token
	if c == "(" then
		local line = ls.linenumber
		luaX:next(ls)
		self:expr(ls, v)
		self:check_match(ls, ")", "(", line)
		luaK:dischargevars(ls.fs, v)
	elseif c == "TK_NAME" then
		self:singlevar(ls, v)
	else
		luaX:syntaxerror(ls, "unexpected symbol")
	end--if c
	return
end

------------------------------------------------------------------------
-- parses a prefixexp (an expression in parentheses or a single variable)
-- or a function call specification
-- * used in simpleexp(), assignment(), exprstat()
------------------------------------------------------------------------
function luaY:primaryexp(ls, v)
	-- primaryexp ->
	--    prefixexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }
	local fs = ls.fs
	self:prefixexp(ls, v)
	while true do
		local c = ls.t.token
		if c == "." then  -- field
			self:field(ls, v)
		elseif c == "[" then  -- '[' exp1 ']'
			local key = {}  -- expdesc
			luaK:exp2anyreg(fs, v)
			self:yindex(ls, key)
			luaK:indexed(fs, v, key)
		elseif c == ":" then  -- ':' NAME funcargs
			local key = {}  -- expdesc
			luaX:next(ls)
			self:checkname(ls, key)
			luaK:_self(fs, v, key)
			self:funcargs(ls, v)
		elseif c == "(" or c == "TK_STRING" or c == "{" then  -- funcargs
			luaK:exp2nextreg(fs, v)
			self:funcargs(ls, v)
		else
			return
		end--if c
	end--while
end

------------------------------------------------------------------------
-- parses general expression types, constants handled here
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:simpleexp(ls, v)
	-- simpleexp -> NUMBER | STRING | NIL | TRUE | FALSE | ... |
	--              constructor | FUNCTION body | primaryexp
	local c = ls.t.token
	if c == "TK_NUMBER" then
		self:init_exp(v, "VKNUM", 0)
		v.nval = ls.t.seminfo
	elseif c == "TK_STRING" then
		self:codestring(ls, v, ls.t.seminfo)
	elseif c == "TK_NIL" then
		self:init_exp(v, "VNIL", 0)
	elseif c == "TK_TRUE" then
		self:init_exp(v, "VTRUE", 0)
	elseif c == "TK_FALSE" then
		self:init_exp(v, "VFALSE", 0)
	elseif c == "TK_DOTS" then  -- vararg
		local fs = ls.fs
		self:check_condition(ls, fs.f.is_vararg ~= 0,
			"cannot use "..self:LUA_QL("...").." outside a vararg function");
		-- NOTE: the following substitutes for a bitop, but is value-specific
		local is_vararg = fs.f.is_vararg
		if is_vararg >= self.VARARG_NEEDSARG then
			fs.f.is_vararg = is_vararg - self.VARARG_NEEDSARG  -- don't need 'arg'
		end
		self:init_exp(v, "VVARARG", luaK:codeABC(fs, "OP_VARARG", 0, 1, 0))
	elseif c == "{" then  -- constructor
		self:constructor(ls, v)
		return
	elseif c == "TK_FUNCTION" then
		luaX:next(ls)
		self:body(ls, v, false, ls.linenumber)
		return
	else
		self:primaryexp(ls, v)
		return
	end--if c
	luaX:next(ls)
end

------------------------------------------------------------------------
-- Translates unary operators tokens if found, otherwise returns
-- OPR_NOUNOPR. getunopr() and getbinopr() are used in subexpr().
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:getunopr(op)
	if op == "TK_NOT" then
		return "OPR_NOT"
	elseif op == "-" then
		return "OPR_MINUS"
	elseif op == "#" then
		return "OPR_LEN"
	else
		return "OPR_NOUNOPR"
	end
end

------------------------------------------------------------------------
-- Translates binary operator tokens if found, otherwise returns
-- OPR_NOBINOPR. Code generation uses OPR_* style tokens.
-- * used in subexpr()
------------------------------------------------------------------------
luaY.getbinopr_table = {
	["+"] = "OPR_ADD",
	["-"] = "OPR_SUB",
	["*"] = "OPR_MUL",
	["/"] = "OPR_DIV",
	["%"] = "OPR_MOD",
	["^"] = "OPR_POW",
	["TK_CONCAT"] = "OPR_CONCAT",
	["TK_NE"] = "OPR_NE",
	["TK_EQ"] = "OPR_EQ",
	["<"] = "OPR_LT",
	["TK_LE"] = "OPR_LE",
	[">"] = "OPR_GT",
	["TK_GE"] = "OPR_GE",
	["TK_AND"] = "OPR_AND",
	["TK_OR"] = "OPR_OR",
}
function luaY:getbinopr(op)
	local opr = self.getbinopr_table[op]
	if opr then return opr else return "OPR_NOBINOPR" end
end

------------------------------------------------------------------------
-- the following priority table consists of pairs of left/right values
-- for binary operators (was a static const struct); grep for ORDER OPR
-- * the following struct is replaced:
--   static const struct {
--     lu_byte left;  /* left priority for each binary operator */
--     lu_byte right; /* right priority */
--   } priority[] = {  /* ORDER OPR */
------------------------------------------------------------------------
luaY.priority = {
	{6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7}, -- `+' `-' `/' `%'
	{10, 9}, {5, 4},                 -- power and concat (right associative)
	{3, 3}, {3, 3},                  -- equality
	{3, 3}, {3, 3}, {3, 3}, {3, 3},  -- order
	{2, 2}, {1, 1}                   -- logical (and/or)
}

luaY.UNARY_PRIORITY = 8  -- priority for unary operators

------------------------------------------------------------------------
-- Parse subexpressions. Includes handling of unary operators and binary
-- operators. A subexpr is given the rhs priority level of the operator
-- immediately left of it, if any (limit is -1 if none,) and if a binop
-- is found, limit is compared with the lhs priority level of the binop
-- in order to determine which executes first.
------------------------------------------------------------------------

------------------------------------------------------------------------
-- subexpr -> (simpleexp | unop subexpr) { binop subexpr }
-- where 'binop' is any binary operator with a priority higher than 'limit'
-- * for priority lookups with self.priority[], 1=left and 2=right
-- * recursively called
-- * used in expr()
------------------------------------------------------------------------
function luaY:subexpr(ls, v, limit)
	self:enterlevel(ls)
	local uop = self:getunopr(ls.t.token)
	if uop ~= "OPR_NOUNOPR" then
		luaX:next(ls)
		self:subexpr(ls, v, self.UNARY_PRIORITY)
		luaK:prefix(ls.fs, uop, v)
	else
		self:simpleexp(ls, v)
	end
	-- expand while operators have priorities higher than 'limit'
	local op = self:getbinopr(ls.t.token)
	while op ~= "OPR_NOBINOPR" and self.priority[luaK.BinOpr[op] + 1][1] > limit do
		local v2 = {}  -- expdesc
		luaX:next(ls)
		luaK:infix(ls.fs, op, v)
		-- read sub-expression with higher priority
		local nextop = self:subexpr(ls, v2, self.priority[luaK.BinOpr[op] + 1][2])
		luaK:posfix(ls.fs, op, v, v2)
		op = nextop
	end
	self:leavelevel(ls)
	return op  -- return first untreated operator
end

------------------------------------------------------------------------
-- Expression parsing starts here. Function subexpr is entered with the
-- left operator (which is non-existent) priority of -1, which is lower
-- than all actual operators. Expr information is returned in parm v.
-- * used in multiple locations
------------------------------------------------------------------------
function luaY:expr(ls, v)
	self:subexpr(ls, v, 0)
end

-- }====================================================================

--[[--------------------------------------------------------------------
-- Rules for Statements
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks next token, used as a look-ahead
-- * returns boolean instead of 0|1
-- * used in retstat(), chunk()
------------------------------------------------------------------------
function luaY:block_follow(token)
	if token == "TK_ELSE" or token == "TK_ELSEIF" or token == "TK_END"
		or token == "TK_UNTIL" or token == "TK_EOS" then
		return true
	else
		return false
	end
end

------------------------------------------------------------------------
-- parse a code block or unit
-- * used in multiple functions
------------------------------------------------------------------------
function luaY:block(ls)
	-- block -> chunk
	local fs = ls.fs
	local bl = {}  -- BlockCnt
	self:enterblock(fs, bl, false)
	self:chunk(ls)
	lua_assert(bl.breaklist == luaK.NO_JUMP)
	self:leaveblock(fs)
end

------------------------------------------------------------------------
-- structure to chain all variables in the left-hand side of an
-- assignment
-- struct LHS_assign:
--   prev  -- (table: struct LHS_assign)
--   v  -- variable (global, local, upvalue, or indexed) (table: expdesc)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- check whether, in an assignment to a local variable, the local variable
-- is needed in a previous assignment (to a table). If so, save original
-- local value in a safe place and use this safe copy in the previous
-- assignment.
-- * used in assignment()
------------------------------------------------------------------------
function luaY:check_conflict(ls, lh, v)
	local fs = ls.fs
	local extra = fs.freereg  -- eventual position to save local variable
	local conflict = false
	while lh do
		if lh.v.k == "VINDEXED" then
			if lh.v.info == v.info then  -- conflict?
				conflict = true
				lh.v.info = extra  -- previous assignment will use safe copy
			end
			if lh.v.aux == v.info then  -- conflict?
				conflict = true
				lh.v.aux = extra  -- previous assignment will use safe copy
			end
		end
		lh = lh.prev
	end
	if conflict then
		luaK:codeABC(fs, "OP_MOVE", fs.freereg, v.info, 0)  -- make copy
		luaK:reserveregs(fs, 1)
	end
end

------------------------------------------------------------------------
-- parse a variable assignment sequence
-- * recursively called
-- * used in exprstat()
------------------------------------------------------------------------
function luaY:assignment(ls, lh, nvars)
	local e = {}  -- expdesc
	-- test was: VLOCAL <= lh->v.k && lh->v.k <= VINDEXED
	local c = lh.v.k
	self:check_condition(ls, c == "VLOCAL" or c == "VUPVAL" or c == "VGLOBAL"
		or c == "VINDEXED", "syntax error")
	if self:testnext(ls, ",") then  -- assignment -> ',' primaryexp assignment
		local nv = {}  -- LHS_assign
		nv.v = {}
		nv.prev = lh
		self:primaryexp(ls, nv.v)
		if nv.v.k == "VLOCAL" then
			self:check_conflict(ls, lh, nv.v)
		end
		self:checklimit(ls.fs, nvars, self.LUAI_MAXCCALLS - ls.L.nCcalls,
			"variables in assignment")
		self:assignment(ls, nv, nvars + 1)
	else  -- assignment -> '=' explist1
		self:checknext(ls, "=")
		local nexps = self:explist1(ls, e)
		if nexps ~= nvars then
			self:adjust_assign(ls, nvars, nexps, e)
			if nexps > nvars then
				ls.fs.freereg = ls.fs.freereg - (nexps - nvars)  -- remove extra values
			end
		else
			luaK:setoneret(ls.fs, e)  -- close last expression
			luaK:storevar(ls.fs, lh.v, e)
			return  -- avoid default
		end
	end
	self:init_exp(e, "VNONRELOC", ls.fs.freereg - 1)  -- default assignment
	luaK:storevar(ls.fs, lh.v, e)
end

------------------------------------------------------------------------
-- parse condition in a repeat statement or an if control structure
-- * used in repeatstat(), test_then_block()
------------------------------------------------------------------------
function luaY:cond(ls)
	-- cond -> exp
	local v = {}  -- expdesc
	self:expr(ls, v)  -- read condition
	if v.k == "VNIL" then v.k = "VFALSE" end  -- 'falses' are all equal here
	luaK:goiftrue(ls.fs, v)
	return v.f
end

------------------------------------------------------------------------
-- parse a break statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:breakstat(ls)
	-- stat -> BREAK
	local fs = ls.fs
	local bl = fs.bl
	local upval = false
	while bl and not bl.isbreakable do
		if bl.upval then upval = true end
		bl = bl.previous
	end
	if not bl then
		luaX:syntaxerror(ls, "no loop to break")
	end
	if upval then
		luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
	end
	bl.breaklist = luaK:concat(fs, bl.breaklist, luaK:jump(fs))
end

------------------------------------------------------------------------
-- parse a while-do control structure, body processed by block()
-- * with dynamic array sizes, MAXEXPWHILE + EXTRAEXP limits imposed by
--   the function's implementation can be removed
-- * used in statements()
------------------------------------------------------------------------
function luaY:whilestat(ls, line)
	-- whilestat -> WHILE cond DO block END
	local fs = ls.fs
	local bl = {}  -- BlockCnt
	luaX:next(ls)  -- skip WHILE
	local whileinit = luaK:getlabel(fs)
	local condexit = self:cond(ls)
	self:enterblock(fs, bl, true)
	self:checknext(ls, "TK_DO")
	self:block(ls)
	luaK:patchlist(fs, luaK:jump(fs), whileinit)
	self:check_match(ls, "TK_END", "TK_WHILE", line)
	self:leaveblock(fs)
	luaK:patchtohere(fs, condexit)  -- false conditions finish the loop
end

------------------------------------------------------------------------
-- parse a repeat-until control structure, body parsed by chunk()
-- * used in statements()
------------------------------------------------------------------------
function luaY:repeatstat(ls, line)
	-- repeatstat -> REPEAT block UNTIL cond
	local fs = ls.fs
	local repeat_init = luaK:getlabel(fs)
	local bl1, bl2 = {}, {}  -- BlockCnt
	self:enterblock(fs, bl1, true)  -- loop block
	self:enterblock(fs, bl2, false)  -- scope block
	luaX:next(ls)  -- skip REPEAT
	self:chunk(ls)
	self:check_match(ls, "TK_UNTIL", "TK_REPEAT", line)
	local condexit = self:cond(ls)  -- read condition (inside scope block)
	if not bl2.upval then  -- no upvalues?
		self:leaveblock(fs)  -- finish scope
		luaK:patchlist(ls.fs, condexit, repeat_init)  -- close the loop
	else  -- complete semantics when there are upvalues
		self:breakstat(ls)  -- if condition then break
		luaK:patchtohere(ls.fs, condexit)  -- else...
		self:leaveblock(fs)  -- finish scope...
		luaK:patchlist(ls.fs, luaK:jump(fs), repeat_init)  -- and repeat
	end
	self:leaveblock(fs)  -- finish loop
end

------------------------------------------------------------------------
-- parse the single expressions needed in numerical for loops
-- * used in fornum()
------------------------------------------------------------------------
function luaY:exp1(ls)
	local e = {}  -- expdesc
	self:expr(ls, e)
	local k = e.k
	luaK:exp2nextreg(ls.fs, e)
	return k
end

------------------------------------------------------------------------
-- parse a for loop body for both versions of the for loop
-- * used in fornum(), forlist()
------------------------------------------------------------------------
function luaY:forbody(ls, base, line, nvars, isnum)
	-- forbody -> DO block
	local bl = {}  -- BlockCnt
	local fs = ls.fs
	self:adjustlocalvars(ls, 3)  -- control variables
	self:checknext(ls, "TK_DO")
	local prep = isnum and luaK:codeAsBx(fs, "OP_FORPREP", base, luaK.NO_JUMP)
		or luaK:jump(fs)
	self:enterblock(fs, bl, false)  -- scope for declared variables
	self:adjustlocalvars(ls, nvars)
	luaK:reserveregs(fs, nvars)
	self:block(ls)
	self:leaveblock(fs)  -- end of scope for declared variables
	luaK:patchtohere(fs, prep)
	local endfor = isnum and luaK:codeAsBx(fs, "OP_FORLOOP", base, luaK.NO_JUMP)
		or luaK:codeABC(fs, "OP_TFORLOOP", base, 0, nvars)
	luaK:fixline(fs, line)  -- pretend that `OP_FOR' starts the loop
	luaK:patchlist(fs, isnum and endfor or luaK:jump(fs), prep + 1)
end

------------------------------------------------------------------------
-- parse a numerical for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:fornum(ls, varname, line)
	-- fornum -> NAME = exp1,exp1[,exp1] forbody
	local fs = ls.fs
	local base = fs.freereg
	self:new_localvarliteral(ls, "(for index)", 0)
	self:new_localvarliteral(ls, "(for limit)", 1)
	self:new_localvarliteral(ls, "(for step)", 2)
	self:new_localvar(ls, varname, 3)
	self:checknext(ls, '=')
	self:exp1(ls)  -- initial value
	self:checknext(ls, ",")
	self:exp1(ls)  -- limit
	if self:testnext(ls, ",") then
		self:exp1(ls)  -- optional step
	else  -- default step = 1
		luaK:codeABx(fs, "OP_LOADK", fs.freereg, luaK:numberK(fs, 1))
		luaK:reserveregs(fs, 1)
	end
	self:forbody(ls, base, line, 1, true)
end

------------------------------------------------------------------------
-- parse a generic for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:forlist(ls, indexname)
	-- forlist -> NAME {,NAME} IN explist1 forbody
	local fs = ls.fs
	local e = {}  -- expdesc
	local nvars = 0
	local base = fs.freereg
	-- create control variables
	self:new_localvarliteral(ls, "(for generator)", nvars)
	nvars = nvars + 1
	self:new_localvarliteral(ls, "(for state)", nvars)
	nvars = nvars + 1
	self:new_localvarliteral(ls, "(for control)", nvars)
	nvars = nvars + 1
	-- create declared variables
	self:new_localvar(ls, indexname, nvars)
	nvars = nvars + 1
	while self:testnext(ls, ",") do
		self:new_localvar(ls, self:str_checkname(ls), nvars)
		nvars = nvars + 1
	end
	self:checknext(ls, "TK_IN")
	local line = ls.linenumber
	self:adjust_assign(ls, 3, self:explist1(ls, e), e)
	luaK:checkstack(fs, 3)  -- extra space to call generator
	self:forbody(ls, base, line, nvars - 3, false)
end

------------------------------------------------------------------------
-- initial parsing for a for loop, calls fornum() or forlist()
-- * used in statements()
------------------------------------------------------------------------
function luaY:forstat(ls, line)
	-- forstat -> FOR (fornum | forlist) END
	local fs = ls.fs
	local bl = {}  -- BlockCnt
	self:enterblock(fs, bl, true)  -- scope for loop and control variables
	luaX:next(ls)  -- skip `for'
	local varname = self:str_checkname(ls)  -- first variable name
	local c = ls.t.token
	if c == "=" then
		self:fornum(ls, varname, line)
	elseif c == "," or c == "TK_IN" then
		self:forlist(ls, varname)
	else
		luaX:syntaxerror(ls, self:LUA_QL("=").." or "..self:LUA_QL("in").." expected")
	end
	self:check_match(ls, "TK_END", "TK_FOR", line)
	self:leaveblock(fs)  -- loop scope (`break' jumps to this point)
end

------------------------------------------------------------------------
-- parse part of an if control structure, including the condition
-- * used in ifstat()
------------------------------------------------------------------------
function luaY:test_then_block(ls)
	-- test_then_block -> [IF | ELSEIF] cond THEN block
	luaX:next(ls)  -- skip IF or ELSEIF
	local condexit = self:cond(ls)
	self:checknext(ls, "TK_THEN")
	self:block(ls)  -- `then' part
	return condexit
end

------------------------------------------------------------------------
-- parse an if control structure
-- * used in statements()
------------------------------------------------------------------------
function luaY:ifstat(ls, line)
	-- ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END
	local fs = ls.fs
	local escapelist = luaK.NO_JUMP
	local flist = self:test_then_block(ls)  -- IF cond THEN block
	while ls.t.token == "TK_ELSEIF" do
		escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
		luaK:patchtohere(fs, flist)
		flist = self:test_then_block(ls)  -- ELSEIF cond THEN block
	end
	if ls.t.token == "TK_ELSE" then
		escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
		luaK:patchtohere(fs, flist)
		luaX:next(ls)  -- skip ELSE (after patch, for correct line info)
		self:block(ls)  -- 'else' part
	else
		escapelist = luaK:concat(fs, escapelist, flist)
	end
	luaK:patchtohere(fs, escapelist)
	self:check_match(ls, "TK_END", "TK_IF", line)
end

------------------------------------------------------------------------
-- parse a local function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localfunc(ls)
	local v, b = {}, {}  -- expdesc
	local fs = ls.fs
	self:new_localvar(ls, self:str_checkname(ls), 0)
	self:init_exp(v, "VLOCAL", fs.freereg)
	luaK:reserveregs(fs, 1)
	self:adjustlocalvars(ls, 1)
	self:body(ls, b, false, ls.linenumber)
	luaK:storevar(fs, v, b)
	-- debug information will only see the variable after this point!
	self:getlocvar(fs, fs.nactvar - 1).startpc = fs.pc
end

------------------------------------------------------------------------
-- parse a local variable declaration statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localstat(ls)
	-- stat -> LOCAL NAME {',' NAME} ['=' explist1]
	local nvars = 0
	local nexps
	local e = {}  -- expdesc
	repeat
		self:new_localvar(ls, self:str_checkname(ls), nvars)
		nvars = nvars + 1
	until not self:testnext(ls, ",")
	if self:testnext(ls, "=") then
		nexps = self:explist1(ls, e)
	else
		e.k = "VVOID"
		nexps = 0
	end
	self:adjust_assign(ls, nvars, nexps, e)
	self:adjustlocalvars(ls, nvars)
end

------------------------------------------------------------------------
-- parse a function name specification
-- * used in funcstat()
------------------------------------------------------------------------
function luaY:funcname(ls, v)
	-- funcname -> NAME {field} [':' NAME]
	local needself = false
	self:singlevar(ls, v)
	while ls.t.token == "." do
		self:field(ls, v)
	end
	if ls.t.token == ":" then
		needself = true
		self:field(ls, v)
	end
	return needself
end

------------------------------------------------------------------------
-- parse a function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:funcstat(ls, line)
	-- funcstat -> FUNCTION funcname body
	local v, b = {}, {}  -- expdesc
	luaX:next(ls)  -- skip FUNCTION
	local needself = self:funcname(ls, v)
	self:body(ls, b, needself, line)
	luaK:storevar(ls.fs, v, b)
	luaK:fixline(ls.fs, line)  -- definition 'happens' in the first line
end

------------------------------------------------------------------------
-- parse a function call with no returns or an assignment statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:exprstat(ls)
	-- stat -> func | assignment
	local fs = ls.fs
	local v = {}  -- LHS_assign
	v.v = {}
	self:primaryexp(ls, v.v)
	if v.v.k == "VCALL" then  -- stat -> func
		luaP:SETARG_C(luaK:getcode(fs, v.v), 1)  -- call statement uses no results
	else  -- stat -> assignment
		v.prev = nil
		self:assignment(ls, v, 1)
	end
end

------------------------------------------------------------------------
-- parse a return statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:retstat(ls)
	-- stat -> RETURN explist
	local fs = ls.fs
	local e = {}  -- expdesc
	local first, nret  -- registers with returned values
	luaX:next(ls)  -- skip RETURN
	if self:block_follow(ls.t.token) or ls.t.token == ";" then
		first, nret = 0, 0  -- return no values
	else
		nret = self:explist1(ls, e)  -- optional return values
		if self:hasmultret(e.k) then
			luaK:setmultret(fs, e)
			if e.k == "VCALL" and nret == 1 then  -- tail call?
				luaP:SET_OPCODE(luaK:getcode(fs, e), "OP_TAILCALL")
				lua_assert(luaP:GETARG_A(luaK:getcode(fs, e)) == fs.nactvar)
			end
			first = fs.nactvar
			nret = self.LUA_MULTRET  -- return all values
		else
			if nret == 1 then  -- only one single value?
				first = luaK:exp2anyreg(fs, e)
			else
				luaK:exp2nextreg(fs, e)  -- values must go to the 'stack'
				first = fs.nactvar  -- return all 'active' values
				lua_assert(nret == fs.freereg - first)
			end
		end--if
	end--if
	luaK:ret(fs, first, nret)
end

------------------------------------------------------------------------
-- initial parsing for statements, calls a lot of functions
-- * returns boolean instead of 0|1
-- * used in chunk()
------------------------------------------------------------------------
function luaY:statement(ls)
	local line = ls.linenumber  -- may be needed for error messages
	local c = ls.t.token
	if c == "TK_IF" then  -- stat -> ifstat
		self:ifstat(ls, line)
		return false
	elseif c == "TK_WHILE" then  -- stat -> whilestat
		self:whilestat(ls, line)
		return false
	elseif c == "TK_DO" then  -- stat -> DO block END
		luaX:next(ls)  -- skip DO
		self:block(ls)
		self:check_match(ls, "TK_END", "TK_DO", line)
		return false
	elseif c == "TK_FOR" then  -- stat -> forstat
		self:forstat(ls, line)
		return false
	elseif c == "TK_REPEAT" then  -- stat -> repeatstat
		self:repeatstat(ls, line)
		return false
	elseif c == "TK_FUNCTION" then  -- stat -> funcstat
		self:funcstat(ls, line)
		return false
	elseif c == "TK_LOCAL" then  -- stat -> localstat
		luaX:next(ls)  -- skip LOCAL
		if self:testnext(ls, "TK_FUNCTION") then  -- local function?
			self:localfunc(ls)
		else
			self:localstat(ls)
		end
		return false
	elseif c == "TK_RETURN" then  -- stat -> retstat
		self:retstat(ls)
		return true  -- must be last statement
	elseif c == "TK_BREAK" then  -- stat -> breakstat
		luaX:next(ls)  -- skip BREAK
		self:breakstat(ls)
		return true  -- must be last statement
	else
		self:exprstat(ls)
		return false  -- to avoid warnings
	end--if c
end

------------------------------------------------------------------------
-- parse a chunk, which consists of a bunch of statements
-- * used in parser(), body(), block(), repeatstat()
------------------------------------------------------------------------
function luaY:chunk(ls)
	-- chunk -> { stat [';'] }
	local islast = false
	self:enterlevel(ls)
	while not islast and not self:block_follow(ls.t.token) do
		islast = self:statement(ls)
		self:testnext(ls, ";")
		lua_assert(ls.fs.f.maxstacksize >= ls.fs.freereg and
			ls.fs.freereg >= ls.fs.nactvar)
		ls.fs.freereg = ls.fs.nactvar  -- free registers
	end
	self:leavelevel(ls)
end

-- }======================================================================





luaX:init()  -- required by llex
local LuaState = {}  -- dummy, not actually used, but retained since
-- the intention is to complete a straight port

------------------------------------------------------------------------
-- interfacing to yueliang
------------------------------------------------------------------------
--local luaZ = {}
--local luaY = {}
--local luaX = {}
--local luaP = {}
--local luaU = {}
--local luaK = {}

return setmetatable(
	{
		luaZ = luaZ,
		luaY = luaY,
		luaX = luaX,
		luaP = luaP,
		luaU = luaU,
		luaK = luaK,
		LuaState = LuaState
	},
	{
		__call = function(_, source, name)
			name = name or 'compiled-lua'
			-- luaZ:make_getF returns a file chunk reader
			-- luaZ:init returns a zio input stream
			local zio = luaZ:init(luaZ:make_getF(source), nil)
			if not zio then return end
			-- luaY:parser parses the input stream
			-- func is the function prototype in tabular form; in C, func can
			-- now be used directly by the VM, this can't be done in Lua

			local func = luaY:parser(LuaState, zio, nil, "@"..name)
			-- luaU:make_setS returns a string chunk writer
			local writer, buff = luaU:make_setS()
			-- luaU:dump builds a binary chunk
			luaU:dump(LuaState, func, writer, buff)
			-- a string.dump equivalent in returned

			return buff.data
		end
	}
)
end;
};
G2L_MODULES[G2L["9"]] = {
Closure = function()
    local script = G2L["9"];--!native
--# selene: allow(divide_by_zero, multiple_statements, mixed_table)
--[[
FiOne
Copyright (C) 2021  Rerumu

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
]] --

local lua_wrap_state
local stm_lua_func

-- SETLIST config
local FIELDS_PER_FLUSH = 50

-- remap for better lookup
local OPCODE_RM = {
	-- level 1
	[22] = 18, -- JMP
	[31] = 8, -- FORLOOP
	[33] = 28, -- TFORLOOP
	-- level 2
	[0] = 3, -- MOVE
	[1] = 13, -- LOADK
	[2] = 23, -- LOADBOOL
	[26] = 33, -- TEST
	-- level 3
	[12] = 1, -- ADD
	[13] = 6, -- SUB
	[14] = 10, -- MUL
	[15] = 16, -- DIV
	[16] = 20, -- MOD
	[17] = 26, -- POW
	[18] = 30, -- UNM
	[19] = 36, -- NOT
	-- level 4
	[3] = 0, -- LOADNIL
	[4] = 2, -- GETUPVAL
	[5] = 4, -- GETGLOBAL
	[6] = 7, -- GETTABLE
	[7] = 9, -- SETGLOBAL
	[8] = 12, -- SETUPVAL
	[9] = 14, -- SETTABLE
	[10] = 17, -- NEWTABLE
	[20] = 19, -- LEN
	[21] = 22, -- CONCAT
	[23] = 24, -- EQ
	[24] = 27, -- LT
	[25] = 29, -- LE
	[27] = 32, -- TESTSET
	[32] = 34, -- FORPREP
	[34] = 37, -- SETLIST
	-- level 5
	[11] = 5, -- SELF
	[28] = 11, -- CALL
	[29] = 15, -- TAILCALL
	[30] = 21, -- RETURN
	[35] = 25, -- CLOSE
	[36] = 31, -- CLOSURE
	[37] = 35, -- VARARG
}

-- opcode types for getting values
local OPCODE_T = {
	[0] = "ABC",
	"ABx",
	"ABC",
	"ABC",
	"ABC",
	"ABx",
	"ABC",
	"ABx",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"AsBx",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"ABC",
	"AsBx",
	"AsBx",
	"ABC",
	"ABC",
	"ABC",
	"ABx",
	"ABC",
}

local OPCODE_M = {
	[0] = {b = "OpArgR", c = "OpArgN"},
	{b = "OpArgK", c = "OpArgN"},
	{b = "OpArgU", c = "OpArgU"},
	{b = "OpArgR", c = "OpArgN"},
	{b = "OpArgU", c = "OpArgN"},
	{b = "OpArgK", c = "OpArgN"},
	{b = "OpArgR", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgN"},
	{b = "OpArgU", c = "OpArgN"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgU", c = "OpArgU"},
	{b = "OpArgR", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgR", c = "OpArgN"},
	{b = "OpArgR", c = "OpArgN"},
	{b = "OpArgR", c = "OpArgN"},
	{b = "OpArgR", c = "OpArgR"},
	{b = "OpArgR", c = "OpArgN"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgK", c = "OpArgK"},
	{b = "OpArgR", c = "OpArgU"},
	{b = "OpArgR", c = "OpArgU"},
	{b = "OpArgU", c = "OpArgU"},
	{b = "OpArgU", c = "OpArgU"},
	{b = "OpArgU", c = "OpArgN"},
	{b = "OpArgR", c = "OpArgN"},
	{b = "OpArgR", c = "OpArgN"},
	{b = "OpArgN", c = "OpArgU"},
	{b = "OpArgU", c = "OpArgU"},
	{b = "OpArgN", c = "OpArgN"},
	{b = "OpArgU", c = "OpArgN"},
	{b = "OpArgU", c = "OpArgN"},
}

local intiger_types = {
	[1] = buffer.readu8,
	[2] = buffer.readu16,
	[4] = buffer.readu32,
}

local intiger_write_type = {
	[1] = buffer.writeu8,
	[2] = buffer.writeu16,
	[4] = buffer.writeu32,
}

-- int rd_int(string src, int s, int e)
-- @src - Source binary string
-- @s - Start index of a little endian integer
-- @e - End index of the integer
local function rd_int(src, s, e)
	return intiger_types[e - s](src, s)
end

-- number big_endian(string src, int s)
-- @callback - Function to be called after bitswap
-- @byte_count - Lenght of the number
local function big_endian(callback, byte_count)
	return function(src, s, e)
		local e, write = (e or byte_count) * 8, intiger_write_type[e]
		write(src, s, bit32.rshift(bit32.byteswap(rd_int(src, s, e)), 32 - e))
		local n2 = callback(src, s)
		write(src, s, bit32.rshift(bit32.byteswap(rd_int(src, s, e)), 32 - e))

		return n2
	end
end

-- to avoid nested ifs in deserializing
local float_types = {
	[4] = {little = buffer.readf32, big = big_endian(buffer.readf32)},
	[8] = {little = buffer.readf64, big = big_endian(buffer.readf64)},
}

-- byte stm_byte(Stream S)
-- @S - Stream object to read from
local function stm_byte(S)
	local idx = S.index
	local bt = buffer.readu8(S.source, idx)

	S.index = idx + 1
	return bt
end

-- string stm_string(Stream S, int len)
-- @S - Stream object to read from
-- @len - Length of string being read
local function stm_string(S, len)
	local str = buffer.readstring(S.source, S.index, len)

	S.index += len
	return str
end

-- string stm_lstring(Stream S)
-- @S - Stream object to read from
local function stm_lstring(S)
	local len = S:s_szt()
	local str

	if len ~= 0 then str = string.sub(stm_string(S, len), 1, -2) end

	return str
end

-- fn cst_int_rdr(string src, int len, fn func)
-- @len - Length of type for reader
-- @func - Reader callback
local function cst_int_rdr(len, func)
	return function(S)
		local pos = S.index + len
		local int = func(S.source, S.index, pos)
		S.index = pos

		return int
	end
end

-- fn cst_flt_rdr(string src, int len, fn func)
-- @len - Length of type for reader
-- @func - Reader callback
local function cst_flt_rdr(len, func)
	return function(S)
		local flt = func(S.source, S.index)
		S.index = S.index + len

		return flt
	end
end

local function stm_inst_list(S)
	local len = S:s_int()
	local list = table.create(len)

	for i = 1, len do
		local ins = S:s_ins()
		local op = bit32.band(ins, 0x3F)
		local args = OPCODE_T[op]
		local mode = OPCODE_M[op]
		local data = {value = ins, op = OPCODE_RM[op], A = bit32.band(bit32.rshift(ins, 6), 0xFF)}

		if args == "ABC" then
			data.B = bit32.band(bit32.rshift(ins, 23), 0x1FF)
			data.C = bit32.band(bit32.rshift(ins, 14), 0x1FF)
			data.is_KB = mode.b == "OpArgK" and data.B > 0xFF -- post process optimization
			data.is_KC = mode.c == "OpArgK" and data.C > 0xFF

			if op == 10 then -- decode NEWTABLE array size, store it as constant value
				local e = bit32.band(bit32.rshift(data.B, 3), 31)
				if e == 0 then
					data.const = data.B
				else
					data.const = bit32.lshift(bit32.band(data.B, 7) + 8, e - 1)
				end
			end
		elseif args == "ABx" then
			data.Bx = bit32.band(bit32.rshift(ins, 14), 0x3FFFF)
			data.is_K = mode.b == "OpArgK"
		elseif args == "AsBx" then
			data.sBx = bit32.band(bit32.rshift(ins, 14), 0x3FFFF) - 131071
		end

		list[i] = data
	end

	return list
end

local function stm_const_list(S)
	local len = S:s_int()
	local list = table.create(len)

	for i = 1, len do
		local tt = stm_byte(S)
		local k

		if tt == 1 then
			k = stm_byte(S) ~= 0
		elseif tt == 3 then
			k = S:s_num()
		elseif tt == 4 then
			k = stm_lstring(S)
		end

		list[i] = k -- offset +1 during instruction decode
	end

	return list
end

local function stm_sub_list(S, src)
	local len = S:s_int()
	local list = table.create(len)

	for i = 1, len do
		list[i] = stm_lua_func(S, src) -- offset +1 in CLOSURE
	end

	return list
end

local function stm_line_list(S)
	local len = S:s_int()
	local list = table.create(len)

	for i = 1, len do list[i] = S:s_int() end

	return list
end

local function stm_loc_list(S)
	local len = S:s_int()
	local list = table.create(len)

	for i = 1, len do list[i] = {varname = stm_lstring(S), startpc = S:s_int(), endpc = S:s_int()} end

	return list
end

local function stm_upval_list(S)
	local len = S:s_int()
	local list = table.create(len)

	for i = 1, len do list[i] = stm_lstring(S) end

	return list
end

function stm_lua_func(S, psrc)
	local proto = {}
	local src = stm_lstring(S) or psrc -- source is propagated

	proto.source = src -- source name

	S:s_int() -- line defined
	S:s_int() -- last line defined

	proto.num_upval = stm_byte(S) -- num upvalues
	proto.num_param = stm_byte(S) -- num params

	stm_byte(S) -- vararg flag
	proto.max_stack = stm_byte(S) -- max stack size

	proto.code = stm_inst_list(S)
	proto.const = stm_const_list(S)
	proto.subs = stm_sub_list(S, src)
	proto.lines = stm_line_list(S)

	stm_loc_list(S)
	stm_upval_list(S)

	-- post process optimization
	for _, v in ipairs(proto.code) do
		if v.is_K then
			v.const = proto.const[v.Bx + 1] -- offset for 1 based index
		else
			if v.is_KB then v.const_B = proto.const[v.B - 0xFF] end

			if v.is_KC then v.const_C = proto.const[v.C - 0xFF] end
		end
	end

	return proto
end

local function lua_bc_to_state(src)
	-- func reader
	local rdr_func

	-- header flags
	local little
	local size_int
	local size_szt
	local size_ins
	local size_num
	local flag_int

	-- stream object
	local stream = {
		-- data
		index = 0,
		source = typeof(src) == "buffer" and src or buffer.fromstring(src),
	}

	assert(stm_string(stream, 4) == "\27Lua", "invalid Lua signature")
	assert(stm_byte(stream) == 0x51, "invalid Lua version")
	assert(stm_byte(stream) == 0, "invalid Lua format")

	little = stm_byte(stream) ~= 0
	size_int = stm_byte(stream)
	size_szt = stm_byte(stream)
	size_ins = stm_byte(stream)
	size_num = stm_byte(stream)
	flag_int = stm_byte(stream) ~= 0

	rdr_func = little and rd_int or big_endian(rd_int)
	stream.s_int = cst_int_rdr(size_int, rdr_func)
	stream.s_szt = cst_int_rdr(size_szt, rdr_func)
	stream.s_ins = cst_int_rdr(size_ins, rdr_func)

	if flag_int then
		stream.s_num = cst_int_rdr(size_num, rdr_func)
	elseif float_types[size_num] then
		stream.s_num = cst_flt_rdr(size_num, float_types[size_num][little and "little" or "big"])
	else
		error("unsupported float size")
	end

	return stm_lua_func(stream, "@virtual")
end

local function close_lua_upvalues(list, index)
	for i, uv in pairs(list) do
		if uv.index >= index then
			uv.value = uv.store[uv.index] -- store value
			uv.store = uv
			uv.index = "value" -- self reference
			list[i] = nil
		end
	end
end

local function open_lua_upvalue(list, index, memory)
	local prev = list[index]

	if not prev then
		prev = {index = index, store = memory}
		list[index] = prev
	end

	return prev
end

local function on_lua_error(failed, err)
	local src = failed.source
	local line = failed.lines[failed.pc - 1]

	error(string.format("%s:%i: %s", src, line, err), 0)
end

local function run_lua_func(state, env, upvals)
	local code = state.code
	local subs = state.subs
	local vararg = state.vararg

	local top_index = -1
	local open_list = {}
	local memory = state.memory
	local pc = state.pc

	while true do
		local inst = code[pc]
		local op = inst.op
		pc = pc + 1

		if op < 18 then
			if op < 8 then
				if op < 3 then
					if op < 1 then
						--[[LOADNIL]]
						for i = inst.A, inst.B do memory[i] = nil end
					elseif op > 1 then
						--[[GETUPVAL]]
						local uv = upvals[inst.B]

						memory[inst.A] = uv.store[uv.index]
					else
						--[[ADD]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						memory[inst.A] = lhs + rhs
					end
				elseif op > 3 then
					if op < 6 then
						if op > 4 then
							--[[SELF]]
							local A = inst.A
							local B = inst.B
							local index

							if inst.is_KC then
								index = inst.const_C
							else
								index = memory[inst.C]
							end

							memory[A + 1] = memory[B]
							memory[A] = memory[B][index]
						else
							--[[GETGLOBAL]]
							memory[inst.A] = env[inst.const]
						end
					elseif op > 6 then
						--[[GETTABLE]]
						local index

						if inst.is_KC then
							index = inst.const_C
						else
							index = memory[inst.C]
						end

						memory[inst.A] = memory[inst.B][index]
					else
						--[[SUB]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						memory[inst.A] = lhs - rhs
					end
				else --[[MOVE]]
					memory[inst.A] = memory[inst.B]
				end
			elseif op > 8 then
				if op < 13 then
					if op < 10 then
						--[[SETGLOBAL]]
						env[inst.const] = memory[inst.A]
					elseif op > 10 then
						if op < 12 then
							--[[CALL]]
							local A = inst.A
							local B = inst.B
							local C = inst.C
							local params

							if B == 0 then
								params = top_index - A
							else
								params = B - 1
							end

							local ret_list = table.pack(memory[A](table.unpack(memory, A + 1, A + params)))
							local ret_num = ret_list.n

							if C == 0 then
								top_index = A + ret_num - 1
							else
								ret_num = C - 1
							end

							table.move(ret_list, 1, ret_num, A, memory)
						else
							--[[SETUPVAL]]
							local uv = upvals[inst.B]

							uv.store[uv.index] = memory[inst.A]
						end
					else
						--[[MUL]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						memory[inst.A] = lhs * rhs
					end
				elseif op > 13 then
					if op < 16 then
						if op > 14 then
							--[[TAILCALL]]
							local A = inst.A
							local B = inst.B
							local params

							if B == 0 then
								params = top_index - A
							else
								params = B - 1
							end

							close_lua_upvalues(open_list, 0)

							return memory[A](table.unpack(memory, A + 1, A + params))
						else
							--[[SETTABLE]]
							local index, value

							if inst.is_KB then
								index = inst.const_B
							else
								index = memory[inst.B]
							end

							if inst.is_KC then
								value = inst.const_C
							else
								value = memory[inst.C]
							end

							memory[inst.A][index] = value
						end
					elseif op > 16 then
						--[[NEWTABLE]]
						memory[inst.A] = table.create(inst.const) -- inst.const contains array size
					else
						--[[DIV]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						memory[inst.A] = lhs / rhs
					end
				else
					--[[LOADK]]
					memory[inst.A] = inst.const
				end
			else
				--[[FORLOOP]]
				local A = inst.A
				local step = memory[A + 2]
				local index = memory[A] + step
				local limit = memory[A + 1]
				local loops

				if step == math.abs(step) then
					loops = index <= limit
				else
					loops = index >= limit
				end

				if loops then
					memory[A] = index
					memory[A + 3] = index
					pc = pc + inst.sBx
				end
			end
		elseif op > 18 then
			if op < 28 then
				if op < 23 then
					if op < 20 then
						--[[LEN]]
						memory[inst.A] = #memory[inst.B]
					elseif op > 20 then
						if op < 22 then
							--[[RETURN]]
							local A = inst.A
							local B = inst.B
							local len

							if B == 0 then
								len = top_index - A + 1
							else
								len = B - 1
							end

							close_lua_upvalues(open_list, 0)

							return table.unpack(memory, A, A + len - 1)
						else
							--[[CONCAT]]
							local B, C = inst.B, inst.C
							local success, str = pcall(table.concat, memory, "", B, C)

							if not success then
								str = memory[B]

								for i = B + 1, C do str = str .. memory[i] end
							end

							memory[inst.A] = str
						end
					else
						--[[MOD]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						memory[inst.A] = lhs % rhs
					end
				elseif op > 23 then
					if op < 26 then
						if op > 24 then
							--[[CLOSE]]
							close_lua_upvalues(open_list, inst.A)
						else
							--[[EQ]]
							local lhs, rhs

							if inst.is_KB then
								lhs = inst.const_B
							else
								lhs = memory[inst.B]
							end

							if inst.is_KC then
								rhs = inst.const_C
							else
								rhs = memory[inst.C]
							end

							if (lhs == rhs) == (inst.A ~= 0) then pc = pc + code[pc].sBx end

							pc = pc + 1
						end
					elseif op > 26 then
						--[[LT]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						if (lhs < rhs) == (inst.A ~= 0) then pc = pc + code[pc].sBx end

						pc = pc + 1
					else
						--[[POW]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						memory[inst.A] = lhs ^ rhs
					end
				else
					--[[LOADBOOL]]
					memory[inst.A] = inst.B ~= 0

					if inst.C ~= 0 then pc = pc + 1 end
				end
			elseif op > 28 then
				if op < 33 then
					if op < 30 then
						--[[LE]]
						local lhs, rhs

						if inst.is_KB then
							lhs = inst.const_B
						else
							lhs = memory[inst.B]
						end

						if inst.is_KC then
							rhs = inst.const_C
						else
							rhs = memory[inst.C]
						end

						if (lhs <= rhs) == (inst.A ~= 0) then pc = pc + code[pc].sBx end

						pc = pc + 1
					elseif op > 30 then
						if op < 32 then
							--[[CLOSURE]]
							local sub = subs[inst.Bx + 1] -- offset for 1 based index
							local nups = sub.num_upval
							local uvlist

							if nups ~= 0 then
								uvlist = table.create(nups - 1)

								for i = 1, nups do
									local pseudo = code[pc + i - 1]

									if pseudo.op == OPCODE_RM[0] then -- @MOVE
										uvlist[i - 1] = open_lua_upvalue(open_list, pseudo.B, memory)
									elseif pseudo.op == OPCODE_RM[4] then -- @GETUPVAL
										uvlist[i - 1] = upvals[pseudo.B]
									end
								end

								pc = pc + nups
							end

							memory[inst.A] = lua_wrap_state(sub, env, uvlist)
						else
							--[[TESTSET]]
							local A = inst.A
							local B = inst.B

							if (not memory[B]) ~= (inst.C ~= 0) then
								memory[A] = memory[B]
								pc = pc + code[pc].sBx
							end
							pc = pc + 1
						end
					else
						--[[UNM]]
						memory[inst.A] = -memory[inst.B]
					end
				elseif op > 33 then
					if op < 36 then
						if op > 34 then
							--[[VARARG]]
							local A = inst.A
							local len = inst.B

							if len == 0 then
								len = vararg.len
								top_index = A + len - 1
							end

							table.move(vararg.list, 1, len, A, memory)
						else
							--[[FORPREP]]
							local A = inst.A
							local init, limit, step

							init = assert(tonumber(memory[A]), "`for` initial value must be a number")
							limit = assert(tonumber(memory[A + 1]), "`for` limit must be a number")
							step = assert(tonumber(memory[A + 2]), "`for` step must be a number")

							memory[A] = init - step
							memory[A + 1] = limit
							memory[A + 2] = step

							pc = pc + inst.sBx
						end
					elseif op > 36 then
						--[[SETLIST]]
						local A = inst.A
						local C = inst.C
						local len = inst.B
						local tab = memory[A]
						local offset

						if len == 0 then len = top_index - A end

						if C == 0 then
							C = inst[pc].value
							pc = pc + 1
						end

						offset = (C - 1) * FIELDS_PER_FLUSH

						table.move(memory, A + 1, A + len, offset + 1, tab)
					else
						--[[NOT]]
						memory[inst.A] = not memory[inst.B]
					end
				else
					--[[TEST]]
					if (not memory[inst.A]) ~= (inst.C ~= 0) then pc = pc + code[pc].sBx end
					pc = pc + 1
				end
			else
				--[[TFORLOOP]]
				local A = inst.A
				local func = memory[A]
				local state = memory[A + 1]
				local index = memory[A + 2]
				local base = A + 3
				local vals

				-- === Luau compatibility - General iteration begin ===
				-- // ccuser44 added support for generic iteration
				-- (Please don't use general iteration in vanilla Lua code)
				if not index and not state and type(func) == "table" then
					-- Hacky check to see if __metatable is locked
					local canGetMt = pcall(getmetatable, func)
					local isMtLocked = canGetMt and not pcall(setmetatable, func, getmetatable(func)) or not canGetMt
					local metatable = canGetMt and getmetatable(func)

					if not (table.isfrozen and table.isfrozen(func)) and isMtLocked and not metatable then
						warn("[FiOne]: The table has a metatable buts it's hidden, __iter and __call won't work in forloop.")
					end

					if not (type(metatable) == "table" and rawget(metatable, "__call")) then
						func, state, index = (type(metatable) == "table" and rawget(metatable, "__iter") or next), func, nil
						memory[A], memory[A + 1], memory[A + 2] = func, state, index
					end
				end
				-- === Luau compatibility - General iteration end ===

				vals = {func(state, index)}

				table.move(vals, 1, inst.C, base, memory)

				if memory[base] ~= nil then
					memory[A + 2] = memory[base]
					pc = pc + code[pc].sBx
				end

				pc = pc + 1
			end
		else
			--[[JMP]]
			pc = pc + inst.sBx
		end

		state.pc = pc
	end
end

function lua_wrap_state(proto, env, upval)
	local function wrapped(...)
		local passed = table.pack(...)
		local memory = table.create(proto.max_stack)
		local vararg = {len = 0, list = {}}

		table.move(passed, 1, proto.num_param, 0, memory)

		if proto.num_param < passed.n then
			local start = proto.num_param + 1
			local len = passed.n - proto.num_param

			vararg.len = len
			table.move(passed, start, start + len - 1, 1, vararg.list)
		end

		local state = {vararg = vararg, memory = memory, code = proto.code, subs = proto.subs, pc = 1}

		local result = table.pack(pcall(run_lua_func, state, env, upval))

		if result[1] then
			return table.unpack(result, 2, result.n)
		else
			local failed = {pc = state.pc, source = proto.source, lines = proto.lines}

			on_lua_error(failed, result[2])

			return
		end
	end

	return wrapped
end

return setmetatable({
	bc_to_state = lua_bc_to_state,
	wrap_state = lua_wrap_state,
	OPCODE_RM = OPCODE_RM,
	OPCODE_T = OPCODE_T,
	OPCODE_M = OPCODE_M,
}, {__call = function(_, BCode, Env) -- Backwards compatibility for legacy rerubi usage
	return lua_wrap_state(lua_bc_to_state(BCode), Env or {})
end})
end;
};
G2L_MODULES[G2L["a"]] = {
Closure = function()
    local script = G2L["a"];--[[
	Credit to einsteinK.
	Credit to Stravant for LBI.
	
	Credit to the creators of all the other modules used in this.
	
	Sceleratis was here and decided modify some things.
	
	einsteinK was here again to fix a bug in LBI for if-statements
--]]

local Yueliang = require(script:WaitForChild("Compiler"))
local LBI = require(script:WaitForChild("Interpreter"))

local luaZ = Yueliang.luaZ
local luaY = Yueliang.luaY
local luaX = Yueliang.luaX
local luaP = Yueliang.luaP
local luaU = Yueliang.luaU
local luaK = Yueliang.luaK

local LuaState = Yueliang.LuaState

return function(str,env)
	local f,writer,buff
	local ran,error=pcall(function()
		local zio = luaZ:init(luaZ:make_getS(str), nil)
		if not zio then return error() end
		local func = luaY:parser(LuaState, zio, nil, "@input")
		writer, buff = luaU:make_setS()
		luaU:dump(LuaState, func, writer, buff)
		f = LBI.load_bytecode(buff.data)
		if env then		
			setfenv(f,env)
		else
			local env=getfenv(2)
			env.script=nil
			setfenv(f,env)
		end
	end)
	if ran then
		return f,buff.data
	else
		return nil,error
	end
end
end;
};
G2L_MODULES[G2L["b"]] = {
Closure = function()
    local script = G2L["b"];local advanced_debug

local lua_opcode_types = {
	"ABC",  "ABx", "ABC",  "ABC",
	"ABC",  "ABx", "ABC",  "ABx", 
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "AsBx", "ABC",
	"ABC",  "ABC", "ABC",  "ABC",
	"ABC",  "ABC", "ABC",  "AsBx",
	"AsBx", "ABC", "ABC", "ABC",
	"ABx",  "ABC",
}

local lua_opcode_names = {
	"MOVE",     "LOADK",     "LOADBOOL", "LOADNIL",
	"GETUPVAL", "GETGLOBAL", "GETTABLE", "SETGLOBAL",
	"SETUPVAL", "SETTABLE",  "NEWTABLE", "SELF",
	"ADD",      "SUB",       "MUL",      "DIV",
	"MOD",      "POW",       "UNM",      "NOT",
	"LEN",      "CONCAT",    "JMP",      "EQ",
	"LT",       "LE",        "TEST",     "TESTSET",
	"CALL",     "TAILCALL",  "RETURN",   "FORLOOP",
	"FORPREP",  "TFORLOOP",  "SETLIST",  "CLOSE",
	"CLOSURE",  "VARARG"
};

--[[
local lua_opcode_numbers = {};
for number, name in next, lua_opcode_names do
	lua_opcode_numbers[name] = number;
end
--]]

--- Extract bits from an integer
--@author: Stravant
local function get_bits(input, n, n2)
	if n2 then
		local total = 0
		local digitn = 0
		for i = n, n2 do
			total = total + 2^digitn*get_bits(input, i)
			digitn = digitn + 1
		end
		return total
	else
		local pn = 2^(n-1)
		return (input % (pn + pn) >= pn) and 1 or 0
	end
end

local function decode_bytecode(bytecode)
	local index = 1
	local big_endian = false
    local int_size;
    local size_t;

    -- Actual binary decoding functions. Dependant on the bytecode.
    local get_int, get_size_t;

	-- Binary decoding helper functions
	local get_int8, get_int32, get_int64, get_float64, get_string;
	do
		function get_int8()
			local a = bytecode:byte(index, index);
			index = index + 1
			return a
		end
		function get_int32()
            local a, b, c, d = bytecode:byte(index, index + 3);
            index = index + 4;
            return d*16777216 + c*65536 + b*256 + a
        end
        function get_int64()
            local a = get_int32();
            local b = get_int32();
            return b*4294967296 + a;
        end
		function get_float64()
			local a = get_int32()
			local b = get_int32()
			return (-2*get_bits(b, 32)+1)*(2^(get_bits(b, 21, 31)-1023))*
			       ((get_bits(b, 1, 20)*(2^32) + a)/(2^52)+1)
		end
		function get_string(len)
			local str;
            if len then
	            str = bytecode:sub(index, index + len - 1);
	            index = index + len;
            else
                len = get_size_t();
	            if len == 0 then return; end
	            str = bytecode:sub(index, index + len - 1);
	            index = index + len;
            end
            return str;
        end
	end

	local function decode_chunk()
		local chunk;
		local instructions = {};
		local constants    = {};
		local prototypes   = {};
		local debug = {
			lines = {};
		};

		chunk = {
			instructions = instructions;
			constants    = constants;
			prototypes   = prototypes;
			debug = debug;
		};

		local num;

		chunk.name       = get_string();-- Function name
		chunk.first_line = get_int();	-- First line
		chunk.last_line  = get_int();	-- Last  line

        if chunk.name then chunk.name = chunk.name:sub(1, -2); end
		
		chunk.upvalues  = get_int8();
		chunk.arguments = get_int8();
		chunk.varg      = get_int8();
		chunk.stack     = get_int8();

        -- TODO: realign lists to 1
		-- Decode instructions
		do
			num = get_int();
			for i = 1, num do
				local instruction = {
					-- opcode = opcode number;
					-- type   = [ABC, ABx, AsBx]
					-- A, B, C, Bx, or sBx depending on type
				};

				local data   = get_int32();
				local opcode = get_bits(data, 1, 6);
				local type   = lua_opcode_types[opcode + 1];

				instruction.opcode = opcode;
				instruction.type   = type;
				
				instruction.A = get_bits(data, 7, 14);
				if type == "ABC" then
					instruction.B = get_bits(data, 24, 32);
					instruction.C = get_bits(data, 15, 23);
				elseif type == "ABx" then
					instruction.Bx = get_bits(data, 15, 32);
				elseif type == "AsBx" then
					instruction.sBx = get_bits(data, 15, 32) - 131071;
				end

				instructions[i] = instruction;
			end
		end

		-- Decode constants
		do
			num = get_int();
			for i = 1, num do
				local constant = {
					-- type = constant type;
					-- data = constant data;
				};
				local type = get_int8();
				constant.type = type;

				if type == 1 then
					constant.data = (get_int8() ~= 0);
				elseif type == 3 then
					constant.data = get_float64();
				elseif type == 4 then
					constant.data = get_string():sub(1, -2);
				end

				constants[i-1] = constant;
			end
		end

		-- Decode Prototypes
		do
			num = get_int();
			for i = 1, num do
				prototypes[i-1] = decode_chunk();
			end
		end

		-- Decode debug info
        -- Not all of which is used yet.
		do
			-- line numbers
			local data = debug.lines
			num = get_int();
			for i = 1, num do
				data[i] = get_int32();
			end

			-- locals
			num = get_int();
			for i = 1, num do
				get_string():sub(1, -2);	-- local name
				get_int32();	-- local start PC
				get_int32();	-- local end   PC
			end

			-- upvalues
			num = get_int();
			for i = 1, num do
				get_string();	-- upvalue name
			end
		end

		return chunk;
	end

	-- Verify bytecode header
	do
		assert(get_string(4) == "\27Lua", "Lua bytecode expected.");
		assert(get_int8() == 0x51, "Only Lua 5.1 is supported.");
		get_int8(); 	-- Oficial bytecode
		big_endian = (get_int8() == 0);
        int_size = get_int8();
        size_t   = get_int8();

        if int_size == 4 then
            get_int = get_int32;
        elseif int_size == 8 then
            get_int = get_int64;
        else
	        -- TODO: refactor errors into table
            error("Unsupported bytecode target platform");
        end

        if size_t == 4 then
            get_size_t = get_int32;
        elseif size_t == 8 then
            get_size_t = get_int64;
        else
            error("Unsupported bytecode target platform");
        end

        assert(get_string(3) == "\4\8\0",
	           "Unsupported bytecode target platform");
	end

	return decode_chunk();
end

local function handle_return(...)
	local c = select("#", ...)
	local t = {...}
	return c, t
end

local function create_wrapper(cache, upvalues)
	local instructions = cache.instructions;
	local constants    = cache.constants;
	local prototypes   = cache.prototypes;
	
	local stack, top
	local environment
	local IP = 1;	-- instruction pointer
	local vararg, vararg_size 

	local opcode_funcs = {
		[0]  = function(instruction)	-- MOVE
			stack[instruction.A] = stack[instruction.B];
		end,
		[1]  = function(instruction)	-- LOADK
			stack[instruction.A] = constants[instruction.Bx].data;
		end,
		[2]  = function(instruction)	-- LOADBOOL
			stack[instruction.A] = instruction.B ~= 0
			if instruction.C ~= 0 then
				IP = IP + 1
			end
		end,
		[3]  = function(instruction)	-- LOADNIL
			local stack = stack
			for i = instruction.A, instruction.B do
				stack[i] = nil
			end
		end,
		[4] = function(instruction)		-- GETUPVAL
			stack[instruction.A] = upvalues[instruction.B]
		end,
		[5]  = function(instruction)	-- GETGLOBAL
			local key = constants[instruction.Bx].data;
			stack[instruction.A] = environment[key];
		end,
		[6]  = function(instruction)	-- GETTABLE
			local C = instruction.C
			local stack = stack
			C = C > 255 and constants[C-256].data or stack[C]
			stack[instruction.A] = stack[instruction.B][C];
		end,
		[7]  = function(instruction)	-- SETGLOBAL
			local key = constants[instruction.Bx].data;
			environment[key] = stack[instruction.A];
		end,
		[8] = function (instruction)	-- SETUPVAL
			upvalues[instruction.B] = stack[instruction.A]
		end,
		[9] = function (instruction)	-- SETTABLE
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A][B] = C
		end,
		[10] = function (instruction)	-- NEWTABLE
			stack[instruction.A] = {}
		end,
		[11] = function (instruction)	-- SELF
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack = stack
			
			B = stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			
			stack[A+1] = B
			stack[A]   = B[C]
		end,
		[12] = function(instruction)	-- ADD
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B+C;
		end,
		[13] = function(instruction)	-- SUB
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B - C;	
		end,
		[14] = function(instruction)	-- MUL
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B * C;
		end,
		[15] = function(instruction)	--DIV
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B / C;
		end,
		[16] = function(instruction) 	-- MOD
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B % C;		
		end,
		[17] = function(instruction)	-- POW
			local B = instruction.B;
			local C = instruction.C;
			local stack, constants = stack, constants;
			
			B = B > 255 and constants[B-256].data or stack[B];
			C = C > 255 and constants[C-256].data or stack[C];
			
			stack[instruction.A] = B ^ C;		
		end,
		[18] = function(instruction)	-- UNM
			stack[instruction.A] = -stack[instruction.B]
		end,
		[19] = function(instruction)	-- NOT
			stack[instruction.A] = not stack[instruction.B]
		end,
		[20] = function(instruction)	-- LEN
			stack[instruction.A] = #stack[instruction.B]
		end,
		[21] = function(instruction)	-- CONCAT
			local B = instruction.B
			local result = stack[B]
			for i = B+1, instruction.C do
				result = result .. stack[i] 
			end
			stack[instruction.A] = result
		end,
		[22] = function(instruction)	-- JUMP
			IP = IP + instruction.sBx
		end,
		[23] = function(instruction)	-- EQ
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack, constants = stack, constants
			
			A = A ~= 0
			B = B > 255 and constants[B-256].data or stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			if (B == C) ~= A then
				IP = IP + 1
			end
		end,
		[24] = function(instruction)	-- LT
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack, constants = stack, constants
			
			A = A ~= 0
			B = B > 255 and constants[B-256].data or stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			if (B < C) ~= A then
				IP = IP + 1
			end		
		end,
		[25] = function(instruction)	-- LT
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack, constants = stack, constants
			
			A = A ~= 0
			B = B > 255 and constants[B-256].data or stack[B]
			C = C > 255 and constants[C-256].data or stack[C]
			if (B <= C) ~= A then
				IP = IP + 1
			end		
		end,
		[26] = function(instruction)	-- TEST
			if (not not stack[instruction.A]) == (instruction.C == 0) then
				IP = IP + 1
			end
		end,
		[27] = function(instruction)	-- TESTSET
			local stack = stack
			local B = stack[instruction.B]
			if (not not B) == (instruction.C == 0) then
				IP = IP + 1
			else
				stack[instruction.A] = B
			end
		end,
		[28] = function(instruction)	-- CALL
			local A = instruction.A;
			local B = instruction.B;
			local C = instruction.C;
			local stack = stack;
			local args, results;
			local limit, loop
			
			args = {};
			if B ~= 1 then
				if B ~= 0 then
					limit = A+B-1;
				else
					limit = top
				end
				
				loop = 0
				for i = A+1, limit do
					loop = loop + 1
					args[loop] = stack[i];
				end
				
				limit, results = handle_return(stack[A](unpack(args, 1, limit-A)))
			else
				limit, results = handle_return(stack[A]())
			end
			
			top = A - 1
		
			if C ~= 1 then
				if C ~= 0 then
					limit = A+C-2;
				else
					limit = limit+A
				end
				
				loop = 0;
				for i = A, limit do
					loop = loop + 1;
					stack[i] = results[loop];
				end
			end
		end,
		[29] = function (instruction)	-- TAILCALL
			local A = instruction.A;
			local B = instruction.B;
			local C = instruction.C;
			local stack = stack;
			local args, results;
			local top, limit, loop = top
			
			args = {};
			if B ~= 1 then
				if B ~= 0 then
					limit = A+B-1;
				else
					limit = top
				end
				
				loop = 0
				for i = A+1, limit do
					loop = loop + 1
					args[#args+1] = stack[i];
				end
				
				results = {stack[A](unpack(args, 1, limit-A))};
			else
				results = {stack[A]()};
			end
			
			return true, results
		end,
		[30] = function(instruction) -- RETURN
			--TODO: CLOSE
			local A = instruction.A;
			local B = instruction.B;
			local stack = stack;
			local limit;
			local loop, output;
						
			if B == 1 then
				return true;
			end
			if B == 0 then
				limit = top
			else
				limit = A + B - 2;
			end
			
			output = {};
			local loop = 0
			for i = A, limit do
				loop = loop + 1
				output[loop] = stack[i];
			end
			return true, output;
		end,
		[31] = function(instruction)	-- FORLOOP
			local A = instruction.A
			local stack = stack
			
			local step = stack[A+2]
			local index = stack[A] + step 
			stack[A] = index
			
			if step > 0 then
				if index <= stack[A+1] then
					IP = IP + instruction.sBx
					stack[A+3] = index
				end
			else
				if index >= stack[A+1] then
					IP = IP + instruction.sBx
					stack[A+3] = index
				end
			end
		end,
		[32] = function(instruction)	-- FORPREP
			local A = instruction.A
			local stack = stack
			
			stack[A] = stack[A] - stack[A+2]
			IP = IP + instruction.sBx 
		end,
		[33] = function(instruction)	-- TFORLOOP
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack = stack
			
			local offset = A+2
			local result = {stack[A](stack[A+1], stack[A+2])}
			for i = 1, C do
				stack[offset+i] = result[i]
			end
			
			if stack[A+3] ~= nil then
				stack[A+2] = stack[A+3]
			else
				IP = IP + 1
			end
		end,
		[34] = function(instruction)	-- SETLIST
			local A = instruction.A
			local B = instruction.B
			local C = instruction.C
			local stack = stack

			if C == 0 then
				error("NYI: extended SETLIST")
			else
				local offset = (C - 1) * 50
				local t = stack[A]
				
				if B == 0 then
					B = top
				end
				for i = 1, B do
					t[offset+i] = stack[A+i]	
				end				
			end
		end,
		[35] = function(instruction)	-- CLOSE
			--io.stderr:write("NYI: CLOSE")
			--io.stderr:flush()
		end,
		[36] = function(instruction)	-- CLOSURE
			local proto = prototypes[instruction.Bx]
			local instructions = instructions
			local stack = stack
			
			local indices = {}
			local new_upvals = setmetatable({},
				{
					__index = function(t, k)
						local upval = indices[k]
						return upval.segment[upval.offset]
					end,
					__newindex = function(t, k, v)
						local upval = indices[k]
						upval.segment[upval.offset] = v
					end
				}
			)
			for i = 1, proto.upvalues do
				local movement = instructions[IP]
				if movement.opcode == 0 then -- MOVE
					indices[i-1] = {segment = stack, offset = movement.B}
				elseif instructions[IP].opcode == 4 then -- GETUPVAL
					indices[i-1] = {segment = upvalues, offset = movement.B}
				end
				IP = IP + 1
			end
			
			local _, func = create_wrapper(proto, new_upvals)
			stack[instruction.A] = func
		end,
		[37] = function(instruction)	-- VARARG
			local A = instruction.A
			local B = instruction.B
			local stack, vararg = stack, vararg
			
			for i = A, A + (B > 0 and B - 1 or vararg_size) do
				stack[i] = vararg[i - A]
			end
		end,
	}
	
	local function loop()
		local instructions = instructions
		local instruction, a, b
		
		while true do
			instruction = instructions[IP];
			IP = IP + 1
			a, b = opcode_funcs[instruction.opcode](instruction);
			if a then
				return b;
			end
		end
	end

	local debugging = {
		get_stack = function()
			return stack;
		end;
		get_IP = function()
			return IP;
		end
	};

	local function func(...)
		local local_stack = {};
		local ghost_stack = {};

		top = -1
		stack = setmetatable(local_stack, {
			__index = ghost_stack;
			__newindex = function(t, k, v)
				if k > top and v then
					top = k
				end
				ghost_stack[k] = v
			end;
		})
		local args = {...};	
		vararg = {}
		vararg_size = select("#", ...) - 1
		for i = 0, vararg_size do
			local_stack[i] = args[i+1];
			vararg[i] = args[i+1]
		end
		
		environment = getfenv();
		IP = 1;
		local thread = coroutine.create(loop)
		local a, b = coroutine.resume(thread)

		if a then
			if b then
				return unpack(b);
			end
			return;
		else
			if advanced_debug then
				--TODO advanced debugging
			else
				--TODO error converting
				local name = cache.name;
				local line = cache.debug.lines[IP];
				local err  = b:gsub("(.-:)", "");
				local output = "";
				
				output = output .. (name and name .. ":" or "");
				output = output .. (line and line .. ":" or "");
				output = output .. b
				--[[
				output = ("%s (Instruction=%s)"):format(output, 
					lua_opcode_names[select(2,debug.getlocal(loop,1, 1)).opcode+1])
				--]]
				error(output, 0);
			end
		end
	end

	return debugging, func;
end

return {
	load_bytecode = function(bytecode,env)
		local cache = decode_bytecode(bytecode);
		local _, func = create_wrapper(cache);
		return func;
	end;

	-- Utilities (Debug, Introspection, Testing, etc)
	utils = {
		decode_bytecode = decode_bytecode;
		create_wrapper = create_wrapper;
		debug_bytecode = function(bytecode)
			local cache = decode_bytecode(bytecode)
			return create_wrapper(cache);
		end;
	};
}
end;
};
G2L_MODULES[G2L["c"]] = {
Closure = function()
    local script = G2L["c"];--!strict
--!optimize 2
--!native

-- Adapted from the amazing Yueliang project
-- http://yueliang.luaforge.net/


--[[--------------------------------------------------------------------

luac.lua
Primitive luac in Lua
This file is part of Yueliang.

Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
The COPYRIGHT file describes the conditions
under which this software may be distributed.

See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * based on luac.lua in the test directory of the 5.1.2 distribution
-- * usage: lua luac.lua file.lua
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- load and initialize the required modules
------------------------------------------------------------------------
local luaZ = {}
local luaY = {}
local luaX = {}
local luaP = {}
local luaU = {}
local luaK = {}
local size_size_t = 8


-- currently asserts are enabled because the codebase hasn't been tested
-- much (if you don't want asserts, just comment them out)
local function lua_assert(test)
	if not test then error("assertion failed!") end
end



-- dofile("lzio.lua")


------------------------------------------------------------------------
-- * reader() should return a string, or nil if nothing else to parse.
--   Additional data can be set only during stream initialization
-- * Readers are handled in lauxlib.c, see luaL_load(file|buffer|string)
-- * LUAL_BUFFERSIZE=BUFSIZ=512 in make_getF() (located in luaconf.h)
-- * Original Reader typedef:
--   const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
-- * This Lua chunk reader implementation:
--   returns string or nil, no arguments to function
------------------------------------------------------------------------

------------------------------------------------------------------------
-- create a chunk reader from a source string
------------------------------------------------------------------------
function luaZ:make_getS(buff)
	local b = buff
	return function() -- chunk reader anonymous function here
		if not b then return nil end
		local data = b
		b = nil
		return data
	end
end

------------------------------------------------------------------------
-- create a chunk reader from a source file
------------------------------------------------------------------------
-- function luaZ:make_getF(filename)
--   local LUAL_BUFFERSIZE = 512
--   local h = io.open(filename, "r")
--   if not h then return nil end
--   return function() -- chunk reader anonymous function here
--     if not h or io.type(h) == "closed file" then return nil end
--     local buff = h:read(LUAL_BUFFERSIZE)
--     if not buff then h:close(); h = nil end
--     return buff
--   end
-- end

function luaZ:make_getF(source)
	local LUAL_BUFFERSIZE = 512
	local pos = 1

	return function() -- chunk reader anonymous function here
		local buff = source:sub(pos, pos + LUAL_BUFFERSIZE - 1)
		pos = math.min(#source + 1, pos + LUAL_BUFFERSIZE)
		return buff
	end
end


------------------------------------------------------------------------
-- creates a zio input stream
-- returns the ZIO structure, z
------------------------------------------------------------------------
function luaZ:init(reader, data)
	if not reader then return end
	local z = {}
	z.reader = reader
	z.data = data or ""
	z.name = name
	-- set up additional data for reading
	if not data or data == "" then z.n = 0 else z.n = #data end
	z.p = 0
	return z
end

------------------------------------------------------------------------
-- fill up input buffer
------------------------------------------------------------------------
function luaZ:fill(z)
	local buff = z.reader()
	z.data = buff
	if not buff or buff == "" then return "EOZ" end
	z.n, z.p = #buff - 1, 1
	return string.sub(buff, 1, 1)
end

------------------------------------------------------------------------
-- get next character from the input stream
-- * local n, p are used to optimize code generation
------------------------------------------------------------------------
function luaZ:zgetc(z)
	local n, p = z.n, z.p + 1
	if n > 0 then
		z.n, z.p = n - 1, p
		return string.sub(z.data, p, p)
	else
		return self:fill(z)
	end
end





-- dofile("llex.lua")

-- FIRST_RESERVED is not required as tokens are manipulated as strings
-- TOKEN_LEN deleted; maximum length of a reserved word not needed

------------------------------------------------------------------------
-- "ORDER RESERVED" deleted; enumeration in one place: luaX.RESERVED
------------------------------------------------------------------------

-- terminal symbols denoted by reserved words: TK_AND to TK_WHILE
-- other terminal symbols: TK_NAME to TK_EOS
luaX.RESERVED = [[
TK_AND and
TK_BREAK break
TK_DO do
TK_ELSE else
TK_ELSEIF elseif
TK_END end
TK_FALSE false
TK_FOR for
TK_FUNCTION function
TK_IF if
TK_IN in
TK_LOCAL local
TK_NIL nil
TK_NOT not
TK_OR or
TK_REPEAT repeat
TK_RETURN return
TK_THEN then
TK_TRUE true
TK_UNTIL until
TK_WHILE while
TK_CONCAT ..
TK_DOTS ...
TK_EQ ==
TK_GE >=
TK_LE <=
TK_NE ~=
TK_NAME <name>
TK_NUMBER <number>
TK_STRING <string>
TK_EOS <eof>]]

-- NUM_RESERVED is not required; number of reserved words

--[[--------------------------------------------------------------------
-- Instead of passing seminfo, the Token struct (e.g. ls.t) is passed
-- so that lexer functions can use its table element, ls.t.seminfo
--
-- SemInfo (struct no longer needed, a mixed-type value is used)
--
-- Token (struct of ls.t and ls.lookahead):
--   token  -- token symbol
--   seminfo  -- semantics information
--
-- LexState (struct of ls; ls is initialized by luaX:setinput):
--   current  -- current character (charint)
--   linenumber  -- input line counter
--   lastline  -- line of last token 'consumed'
--   t  -- current token (table: struct Token)
--   lookahead  -- look ahead token (table: struct Token)
--   fs  -- 'FuncState' is private to the parser
--   L -- LuaState
--   z  -- input stream
--   buff  -- buffer for tokens
--   source  -- current source name
--   decpoint -- locale decimal point
--   nestlevel  -- level of nested non-terminals
----------------------------------------------------------------------]]

-- luaX.tokens (was luaX_tokens) is now a hash; see luaX:init

luaX.MAXSRC = 80
luaX.MAX_INT = 2147483645       -- constants from elsewhere (see above)
luaX.LUA_QS = "'%s'"
luaX.LUA_COMPAT_LSTR = 1
--luaX.MAX_SIZET = 4294967293

------------------------------------------------------------------------
-- initialize lexer
-- * original luaX_init has code to create and register token strings
-- * luaX.tokens: TK_* -> token
-- * luaX.enums:  token -> TK_* (used in luaX:llex)
------------------------------------------------------------------------
function luaX:init()
	local tokens, enums = {}, {}
	for v in string.gmatch(self.RESERVED, "[^\n]+") do
		local _, _, tok, str = string.find(v, "(%S+)%s+(%S+)")
		tokens[tok] = str
		enums[str] = tok
	end
	self.tokens = tokens
	self.enums = enums
end

------------------------------------------------------------------------
-- returns a suitably-formatted chunk name or id
-- * from lobject.c, used in llex.c and ldebug.c
-- * the result, out, is returned (was first argument)
------------------------------------------------------------------------
function luaX:chunkid(source, bufflen)
	local out
	local first = string.sub(source, 1, 1)
	if first == "=" then
		out = string.sub(source, 2, bufflen)  -- remove first char
	else  -- out = "source", or "...source"
		if first == "@" then
			source = string.sub(source, 2)  -- skip the '@'
			bufflen = bufflen - #" '...' "
			local l = #source
			out = ""
			if l > bufflen then
				source = string.sub(source, 1 + l - bufflen)  -- get last part of file name
				out = out.."..."
			end
			out = out..source
		else  -- out = [string "string"]
			local len = string.find(source, "[\n\r]")  -- stop at first newline
			len = len and (len - 1) or #source
			bufflen = bufflen - #(" [string \"...\"] ")
			if len > bufflen then len = bufflen end
			out = "[string \""
			if len < #source then  -- must truncate?
				out = out..string.sub(source, 1, len).."..."
			else
				out = out..source
			end
			out = out.."\"]"
		end
	end
	return out
end

--[[--------------------------------------------------------------------
-- Support functions for lexer
-- * all lexer errors eventually reaches lexerror:
		 syntaxerror -> lexerror
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- look up token and return keyword if found (also called by parser)
------------------------------------------------------------------------
function luaX:token2str(ls, token)
	if string.sub(token, 1, 3) ~= "TK_" then
		if string.find(token, "%c") then
			return string.format("char(%d)", string.byte(token))
		end
		return token
	else
		return self.tokens[token]
	end
end

------------------------------------------------------------------------
-- throws a lexer error
-- * txtToken has been made local to luaX:lexerror
-- * can't communicate LUA_ERRSYNTAX, so it is unimplemented
------------------------------------------------------------------------
function luaX:lexerror(ls, msg, token)
	local function txtToken(ls, token)
		if token == "TK_NAME" or
			token == "TK_STRING" or
			token == "TK_NUMBER" then
			return ls.buff
		else
			return self:token2str(ls, token)
		end
	end
	local buff = self:chunkid(ls.source, self.MAXSRC)
	local msg = string.format("%s:%d: %s", buff, ls.linenumber, msg)
	if token then
		msg = string.format("%s near "..self.LUA_QS, msg, txtToken(ls, token))
	end
	-- luaD_throw(ls->L, LUA_ERRSYNTAX)
	error(msg)
end

------------------------------------------------------------------------
-- throws a syntax error (mainly called by parser)
-- * ls.t.token has to be set by the function calling luaX:llex
--   (see luaX:next and luaX:lookahead elsewhere in this file)
------------------------------------------------------------------------
function luaX:syntaxerror(ls, msg)
	self:lexerror(ls, msg, ls.t.token)
end

------------------------------------------------------------------------
-- move on to next line
------------------------------------------------------------------------
function luaX:currIsNewline(ls)
	return ls.current == "\n" or ls.current == "\r"
end

function luaX:inclinenumber(ls)
	local old = ls.current
	-- lua_assert(currIsNewline(ls))
	self:nextc(ls)  -- skip '\n' or '\r'
	if self:currIsNewline(ls) and ls.current ~= old then
		self:nextc(ls)  -- skip '\n\r' or '\r\n'
	end
	ls.linenumber = ls.linenumber + 1
	if ls.linenumber >= self.MAX_INT then
		self:syntaxerror(ls, "chunk has too many lines")
	end
end

------------------------------------------------------------------------
-- initializes an input stream for lexing
-- * if ls (the lexer state) is passed as a table, then it is filled in,
--   otherwise it has to be retrieved as a return value
-- * LUA_MINBUFFER not used; buffer handling not required any more
------------------------------------------------------------------------
function luaX:setinput(L, ls, z, source)
	if not ls then ls = {} end  -- create struct
	if not ls.lookahead then ls.lookahead = {} end
	if not ls.t then ls.t = {} end
	ls.decpoint = "."
	ls.L = L
	ls.lookahead.token = "TK_EOS"  -- no look-ahead token
	ls.z = z
	ls.fs = nil
	ls.linenumber = 1
	ls.lastline = 1
	ls.source = source
	self:nextc(ls)  -- read first char
end

--[[--------------------------------------------------------------------
-- LEXICAL ANALYZER
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks if current character read is found in the set 'set'
------------------------------------------------------------------------
function luaX:check_next(ls, set)
	if not string.find(set, ls.current, 1, 1) then
		return false
	end
	self:save_and_next(ls)
	return true
end

------------------------------------------------------------------------
-- retrieve next token, checking the lookahead buffer if necessary
-- * note that the macro next(ls) in llex.c is now luaX:nextc
-- * utilized used in lparser.c (various places)
------------------------------------------------------------------------
function luaX:next(ls)
	ls.lastline = ls.linenumber
	if ls.lookahead.token ~= "TK_EOS" then  -- is there a look-ahead token?
		-- this must be copy-by-value
		ls.t.seminfo = ls.lookahead.seminfo  -- use this one
		ls.t.token = ls.lookahead.token
		ls.lookahead.token = "TK_EOS"  -- and discharge it
	else
		ls.t.token = self:llex(ls, ls.t)  -- read next token
	end
end

------------------------------------------------------------------------
-- fill in the lookahead buffer
-- * utilized used in lparser.c:constructor
------------------------------------------------------------------------
function luaX:lookahead(ls)
	-- lua_assert(ls.lookahead.token == "TK_EOS")
	ls.lookahead.token = self:llex(ls, ls.lookahead)
end

------------------------------------------------------------------------
-- gets the next character and returns it
-- * this is the next() macro in llex.c; see notes at the beginning
------------------------------------------------------------------------
function luaX:nextc(ls)
	local c = luaZ:zgetc(ls.z)
	ls.current = c
	return c
end

------------------------------------------------------------------------
-- saves the given character into the token buffer
-- * buffer handling code removed, not used in this implementation
-- * test for maximum token buffer length not used, makes things faster
------------------------------------------------------------------------

function luaX:save(ls, c)
	local buff = ls.buff
	-- if you want to use this, please uncomment luaX.MAX_SIZET further up
	--if #buff > self.MAX_SIZET then
	--  self:lexerror(ls, "lexical element too long")
	--end
	ls.buff = buff..c
end

------------------------------------------------------------------------
-- save current character into token buffer, grabs next character
-- * like luaX:nextc, returns the character read for convenience
------------------------------------------------------------------------
function luaX:save_and_next(ls)
	self:save(ls, ls.current)
	return self:nextc(ls)
end

------------------------------------------------------------------------
-- LUA_NUMBER
-- * luaX:read_numeral is the main lexer function to read a number
-- * luaX:str2d, luaX:buffreplace, luaX:trydecpoint are support functions
------------------------------------------------------------------------

------------------------------------------------------------------------
-- string to number converter (was luaO_str2d from lobject.c)
-- * returns the number, nil if fails (originally returns a boolean)
-- * conversion function originally lua_str2number(s,p), a macro which
--   maps to the strtod() function by default (from luaconf.h)
------------------------------------------------------------------------
function luaX:str2d(s)
	local result = tonumber(s)
	if result then return result end
	-- conversion failed
	if string.lower(string.sub(s, 1, 2)) == "0x" then  -- maybe an hexadecimal constant?
		result = tonumber(s, 16)
		if result then return result end  -- most common case
		-- Was: invalid trailing characters?
		-- In C, this function then skips over trailing spaces.
		-- true is returned if nothing else is found except for spaces.
		-- If there is still something else, then it returns a false.
		-- All this is not necessary using Lua's tonumber.
	end
	return nil
end

------------------------------------------------------------------------
-- single-character replacement, for locale-aware decimal points
------------------------------------------------------------------------
function luaX:buffreplace(ls, from, to)
	local result, buff = "", ls.buff
	for p = 1, #buff do
		local c = string.sub(buff, p, p)
		if c == from then c = to end
		result = result..c
	end
	ls.buff = result
end

------------------------------------------------------------------------
-- Attempt to convert a number by translating '.' decimal points to
-- the decimal point character used by the current locale. This is not
-- needed in Yueliang as Lua's tonumber() is already locale-aware.
-- Instead, the code is here in case the user implements localeconv().
------------------------------------------------------------------------
function luaX:trydecpoint(ls, Token)
	-- format error: try to update decimal point separator
	local old = ls.decpoint
	-- translate the following to Lua if you implement localeconv():
	-- struct lconv *cv = localeconv();
	-- ls->decpoint = (cv ? cv->decimal_point[0] : '.');
	self:buffreplace(ls, old, ls.decpoint)  -- try updated decimal separator
	local seminfo = self:str2d(ls.buff)
	Token.seminfo = seminfo
	if not seminfo then
		-- format error with correct decimal point: no more options
		self:buffreplace(ls, ls.decpoint, ".")  -- undo change (for error message)
		self:lexerror(ls, "malformed number", "TK_NUMBER")
	end
end

------------------------------------------------------------------------
-- main number conversion function
-- * "^%w$" needed in the scan in order to detect "EOZ"
------------------------------------------------------------------------
function luaX:read_numeral(ls, Token)
	-- lua_assert(string.find(ls.current, "%d"))
	repeat
		self:save_and_next(ls)
	until string.find(ls.current, "%D") and ls.current ~= "."
	if self:check_next(ls, "Ee") then  -- 'E'?
		self:check_next(ls, "+-")  -- optional exponent sign
	end
	while string.find(ls.current, "^%w$") or ls.current == "_" do
		self:save_and_next(ls)
	end
	self:buffreplace(ls, ".", ls.decpoint)  -- follow locale for decimal point
	local seminfo = self:str2d(ls.buff)
	Token.seminfo = seminfo
	if not seminfo then  -- format error?
		self:trydecpoint(ls, Token) -- try to update decimal point separator
	end
end

------------------------------------------------------------------------
-- count separators ("=") in a long string delimiter
-- * used by luaX:read_long_string
------------------------------------------------------------------------
function luaX:skip_sep(ls)
	local count = 0
	local s = ls.current
	-- lua_assert(s == "[" or s == "]")
	self:save_and_next(ls)
	while ls.current == "=" do
		self:save_and_next(ls)
		count = count + 1
	end
	return (ls.current == s) and count or (-count) - 1
end

------------------------------------------------------------------------
-- reads a long string or long comment
------------------------------------------------------------------------
function luaX:read_long_string(ls, Token, sep)
	local cont = 0
	self:save_and_next(ls)  -- skip 2nd '['
	if self:currIsNewline(ls) then  -- string starts with a newline?
		self:inclinenumber(ls)  -- skip it
	end
	while true do
		local c = ls.current
		if c == "EOZ" then
			self:lexerror(ls, Token and "unfinished long string" or
				"unfinished long comment", "TK_EOS")
		elseif c == "[" then
			--# compatibility code start
			if self.LUA_COMPAT_LSTR then
				if self:skip_sep(ls) == sep then
					self:save_and_next(ls)  -- skip 2nd '['
					cont = cont + 1
					--# compatibility code start
					if self.LUA_COMPAT_LSTR == 1 then
						if sep == 0 then
							self:lexerror(ls, "nesting of [[...]] is deprecated", "[")
						end
					end
					--# compatibility code end
				end
			end
			--# compatibility code end
		elseif c == "]" then
			if self:skip_sep(ls) == sep then
				self:save_and_next(ls)  -- skip 2nd ']'
				--# compatibility code start
				if self.LUA_COMPAT_LSTR and self.LUA_COMPAT_LSTR == 2 then
					cont = cont - 1
					if sep == 0 and cont >= 0 then break end
				end
				--# compatibility code end
				break
			end
		elseif self:currIsNewline(ls) then
			self:save(ls, "\n")
			self:inclinenumber(ls)
			if not Token then ls.buff = "" end -- avoid wasting space
		else  -- default
			if Token then
				self:save_and_next(ls)
			else
				self:nextc(ls)
			end
		end--if c
	end--while
	if Token then
		local p = 3 + sep
		Token.seminfo = string.sub(ls.buff, p, -p)
	end
end

------------------------------------------------------------------------
-- reads a string
-- * has been restructured significantly compared to the original C code
------------------------------------------------------------------------

function luaX:read_string(ls, del, Token)
	self:save_and_next(ls)
	while ls.current ~= del do
		local c = ls.current
		if c == "EOZ" then
			self:lexerror(ls, "unfinished string", "TK_EOS")
		elseif self:currIsNewline(ls) then
			self:lexerror(ls, "unfinished string", "TK_STRING")
		elseif c == "\\" then
			c = self:nextc(ls)  -- do not save the '\'
			if self:currIsNewline(ls) then  -- go through
				self:save(ls, "\n")
				self:inclinenumber(ls)
			elseif c ~= "EOZ" then -- will raise an error next loop
				-- escapes handling greatly simplified here:
				local i = string.find("abfnrtv", c, 1, 1)
				if i then
					self:save(ls, string.sub("\a\b\f\n\r\t\v", i, i))
					self:nextc(ls)
				elseif not string.find(c, "%d") then
					self:save_and_next(ls)  -- handles \\, \", \', and \?
				else  -- \xxx
					c, i = 0, 0
					repeat
						c = 10 * c + ls.current
						self:nextc(ls)
						i = i + 1
					until i >= 3 or not string.find(ls.current, "%d")
					if c > 255 then  -- UCHAR_MAX
						self:lexerror(ls, "escape sequence too large", "TK_STRING")
					end
					self:save(ls, string.char(c))
				end
			end
		else
			self:save_and_next(ls)
		end--if c
	end--while
	self:save_and_next(ls)  -- skip delimiter
	Token.seminfo = string.sub(ls.buff, 2, -2)
end

------------------------------------------------------------------------
-- main lexer function
------------------------------------------------------------------------
function luaX:llex(ls, Token)
	ls.buff = ""
	while true do
		local c = ls.current
		----------------------------------------------------------------
		if self:currIsNewline(ls) then
			self:inclinenumber(ls)
			----------------------------------------------------------------
		elseif c == "-" then
			c = self:nextc(ls)
			if c ~= "-" then return "-" end
			-- else is a comment
			local sep = -1
			if self:nextc(ls) == '[' then
				sep = self:skip_sep(ls)
				ls.buff = ""  -- 'skip_sep' may dirty the buffer
			end
			if sep >= 0 then
				self:read_long_string(ls, nil, sep)  -- long comment
				ls.buff = ""
			else  -- else short comment
				while not self:currIsNewline(ls) and ls.current ~= "EOZ" do
					self:nextc(ls)
				end
			end
			----------------------------------------------------------------
		elseif c == "[" then
			local sep = self:skip_sep(ls)
			if sep >= 0 then
				self:read_long_string(ls, Token, sep)
				return "TK_STRING"
			elseif sep == -1 then
				return "["
			else
				self:lexerror(ls, "invalid long string delimiter", "TK_STRING")
			end
			----------------------------------------------------------------
		elseif c == "=" then
			c = self:nextc(ls)
			if c ~= "=" then return "="
			else self:nextc(ls); return "TK_EQ" end
			----------------------------------------------------------------
		elseif c == "<" then
			c = self:nextc(ls)
			if c ~= "=" then return "<"
			else self:nextc(ls); return "TK_LE" end
			----------------------------------------------------------------
		elseif c == ">" then
			c = self:nextc(ls)
			if c ~= "=" then return ">"
			else self:nextc(ls); return "TK_GE" end
			----------------------------------------------------------------
		elseif c == "~" then
			c = self:nextc(ls)
			if c ~= "=" then return "~"
			else self:nextc(ls); return "TK_NE" end
			----------------------------------------------------------------
		elseif c == "\"" or c == "'" then
			self:read_string(ls, c, Token)
			return "TK_STRING"
			----------------------------------------------------------------
		elseif c == "." then
			c = self:save_and_next(ls)
			if self:check_next(ls, ".") then
				if self:check_next(ls, ".") then
					return "TK_DOTS"   -- ...
				else return "TK_CONCAT"   -- ..
				end
			elseif not string.find(c, "%d") then
				return "."
			else
				self:read_numeral(ls, Token)
				return "TK_NUMBER"
			end
			----------------------------------------------------------------
		elseif c == "EOZ" then
			return "TK_EOS"
			----------------------------------------------------------------
		else  -- default
			if string.find(c, "%s") then
				-- lua_assert(self:currIsNewline(ls))
				self:nextc(ls)
			elseif string.find(c, "%d") then
				self:read_numeral(ls, Token)
				return "TK_NUMBER"
			elseif string.find(c, "[_%a]") then
				-- identifier or reserved word
				repeat
					c = self:save_and_next(ls)
				until c == "EOZ" or not string.find(c, "[_%w]")
				local ts = ls.buff
				local tok = self.enums[ts]
				if tok then return tok end  -- reserved word?
				Token.seminfo = ts
				return "TK_NAME"
			else
				self:nextc(ls)
				return c  -- single-char tokens (+ - / ...)
			end
			----------------------------------------------------------------
		end--if c
	end--while
end





--dofile("lopcodes.lua")


--[[
===========================================================================
	We assume that instructions are unsigned numbers.
	All instructions have an opcode in the first 6 bits.
	Instructions can have the following fields:
				'A' : 8 bits
				'B' : 9 bits
				'C' : 9 bits
				'Bx' : 18 bits ('B' and 'C' together)
				'sBx' : signed Bx

	A signed argument is represented in excess K; that is, the number
	value is the unsigned value minus K. K is exactly the maximum value
	for that argument (so that -max is represented by 0, and +max is
	represented by 2*max), which is half the maximum for the corresponding
	unsigned argument.
===========================================================================
--]]

luaP.OpMode = { iABC = 0, iABx = 1, iAsBx = 2 }  -- basic instruction format

------------------------------------------------------------------------
-- size and position of opcode arguments.
-- * WARNING size and position is hard-coded elsewhere in this script
------------------------------------------------------------------------
luaP.SIZE_C  = 9
luaP.SIZE_B  = 9
luaP.SIZE_Bx = luaP.SIZE_C + luaP.SIZE_B
luaP.SIZE_A  = 8

luaP.SIZE_OP = 6

luaP.POS_OP = 0
luaP.POS_A  = luaP.POS_OP + luaP.SIZE_OP
luaP.POS_C  = luaP.POS_A + luaP.SIZE_A
luaP.POS_B  = luaP.POS_C + luaP.SIZE_C
luaP.POS_Bx = luaP.POS_C

------------------------------------------------------------------------
-- limits for opcode arguments.
-- we use (signed) int to manipulate most arguments,
-- so they must fit in LUAI_BITSINT-1 bits (-1 for sign)
------------------------------------------------------------------------
-- removed "#if SIZE_Bx < BITS_INT-1" test, assume this script is
-- running on a Lua VM with double or int as LUA_NUMBER

luaP.MAXARG_Bx  = math.ldexp(1, luaP.SIZE_Bx) - 1
luaP.MAXARG_sBx = math.floor(luaP.MAXARG_Bx / 2)  -- 'sBx' is signed

luaP.MAXARG_A = math.ldexp(1, luaP.SIZE_A) - 1
luaP.MAXARG_B = math.ldexp(1, luaP.SIZE_B) - 1
luaP.MAXARG_C = math.ldexp(1, luaP.SIZE_C) - 1

-- creates a mask with 'n' 1 bits at position 'p'
-- MASK1(n,p) deleted, not required
-- creates a mask with 'n' 0 bits at position 'p'
-- MASK0(n,p) deleted, not required

--[[--------------------------------------------------------------------
	Visual representation for reference:

	 31    |    |     |            0      bit position
		+-----+-----+-----+----------+
		|  B  |  C  |  A  |  Opcode  |      iABC format
		+-----+-----+-----+----------+
		-  9  -  9  -  8  -    6     -      field sizes
		+-----+-----+-----+----------+
		|   [s]Bx   |  A  |  Opcode  |      iABx | iAsBx format
		+-----+-----+-----+----------+

----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- the following macros help to manipulate instructions
-- * changed to a table object representation, very clean compared to
--   the [nightmare] alternatives of using a number or a string
-- * Bx is a separate element from B and C, since there is never a need
--   to split Bx in the parser or code generator
------------------------------------------------------------------------

-- these accept or return opcodes in the form of string names
function luaP:GET_OPCODE(i) return self.ROpCode[i.OP] end
function luaP:SET_OPCODE(i, o) i.OP = self.OpCode[o] end

function luaP:GETARG_A(i) return i.A end
function luaP:SETARG_A(i, u) i.A = u end

function luaP:GETARG_B(i) return i.B end
function luaP:SETARG_B(i, b) i.B = b end

function luaP:GETARG_C(i) return i.C end
function luaP:SETARG_C(i, b) i.C = b end

function luaP:GETARG_Bx(i) return i.Bx end
function luaP:SETARG_Bx(i, b) i.Bx = b end

function luaP:GETARG_sBx(i) return i.Bx - self.MAXARG_sBx end
function luaP:SETARG_sBx(i, b) i.Bx = b + self.MAXARG_sBx end

function luaP:CREATE_ABC(o,a,b,c)
	return {OP = self.OpCode[o], A = a, B = b, C = c}
end

function luaP:CREATE_ABx(o,a,bc)
	return {OP = self.OpCode[o], A = a, Bx = bc}
end

------------------------------------------------------------------------
-- create an instruction from a number (for OP_SETLIST)
------------------------------------------------------------------------
function luaP:CREATE_Inst(c)
	local o = c % 64
	c = (c - o) / 64
	local a = c % 256
	c = (c - a) / 256
	return self:CREATE_ABx(o, a, c)
end

------------------------------------------------------------------------
-- returns a 4-char string little-endian encoded form of an instruction
------------------------------------------------------------------------
function luaP:Instruction(i)
	if i.Bx then
		-- change to OP/A/B/C format
		i.C = i.Bx % 512
		i.B = (i.Bx - i.C) / 512
	end
	local I = i.A * 64 + i.OP
	local c0 = I % 256
	I = i.C * 64 + (I - c0) / 256  -- 6 bits of A left
	local c1 = I % 256
	I = i.B * 128 + (I - c1) / 256  -- 7 bits of C left
	local c2 = I % 256
	local c3 = (I - c2) / 256
	return string.char(c0, c1, c2, c3)
end

------------------------------------------------------------------------
-- decodes a 4-char little-endian string into an instruction struct
------------------------------------------------------------------------
function luaP:DecodeInst(x)
	local byte = string.byte
	local i = {}
	local I = byte(x, 1)
	local op = I % 64
	i.OP = op
	I = byte(x, 2) * 4 + (I - op) / 64  -- 2 bits of c0 left
	local a = I % 256
	i.A = a
	I = byte(x, 3) * 4 + (I - a) / 256  -- 2 bits of c1 left
	local c = I % 512
	i.C = c
	i.B = byte(x, 4) * 2 + (I - c) / 512 -- 1 bits of c2 left
	local opmode = self.OpMode[tonumber(string.sub(self.opmodes[op + 1], 7, 7))]
	if opmode ~= "iABC" then
		i.Bx = i.B * 512 + i.C
	end
	return i
end

------------------------------------------------------------------------
-- Macros to operate RK indices
-- * these use arithmetic instead of bit ops
------------------------------------------------------------------------

-- this bit 1 means constant (0 means register)
luaP.BITRK = math.ldexp(1, luaP.SIZE_B - 1)

-- test whether value is a constant
function luaP:ISK(x) return x >= self.BITRK end

-- gets the index of the constant
function luaP:INDEXK(r) return x - self.BITRK end

luaP.MAXINDEXRK = luaP.BITRK - 1

-- code a constant index as a RK value
function luaP:RKASK(x) return x + self.BITRK end

------------------------------------------------------------------------
-- invalid register that fits in 8 bits
------------------------------------------------------------------------
luaP.NO_REG = luaP.MAXARG_A

------------------------------------------------------------------------
-- R(x) - register
-- Kst(x) - constant (in constant table)
-- RK(x) == if ISK(x) then Kst(INDEXK(x)) else R(x)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- grep "ORDER OP" if you change these enums
------------------------------------------------------------------------

--[[--------------------------------------------------------------------
Lua virtual machine opcodes (enum OpCode):
------------------------------------------------------------------------
name          args    description
------------------------------------------------------------------------
OP_MOVE       A B     R(A) := R(B)
OP_LOADK      A Bx    R(A) := Kst(Bx)
OP_LOADBOOL   A B C   R(A) := (Bool)B; if (C) pc++
OP_LOADNIL    A B     R(A) := ... := R(B) := nil
OP_GETUPVAL   A B     R(A) := UpValue[B]
OP_GETGLOBAL  A Bx    R(A) := Gbl[Kst(Bx)]
OP_GETTABLE   A B C   R(A) := R(B)[RK(C)]
OP_SETGLOBAL  A Bx    Gbl[Kst(Bx)] := R(A)
OP_SETUPVAL   A B     UpValue[B] := R(A)
OP_SETTABLE   A B C   R(A)[RK(B)] := RK(C)
OP_NEWTABLE   A B C   R(A) := {} (size = B,C)
OP_SELF       A B C   R(A+1) := R(B); R(A) := R(B)[RK(C)]
OP_ADD        A B C   R(A) := RK(B) + RK(C)
OP_SUB        A B C   R(A) := RK(B) - RK(C)
OP_MUL        A B C   R(A) := RK(B) * RK(C)
OP_DIV        A B C   R(A) := RK(B) / RK(C)
OP_MOD        A B C   R(A) := RK(B) % RK(C)
OP_POW        A B C   R(A) := RK(B) ^ RK(C)
OP_UNM        A B     R(A) := -R(B)
OP_NOT        A B     R(A) := not R(B)
OP_LEN        A B     R(A) := length of R(B)
OP_CONCAT     A B C   R(A) := R(B).. ... ..R(C)
OP_JMP        sBx     pc+=sBx
OP_EQ         A B C   if ((RK(B) == RK(C)) ~= A) then pc++
OP_LT         A B C   if ((RK(B) <  RK(C)) ~= A) then pc++
OP_LE         A B C   if ((RK(B) <= RK(C)) ~= A) then pc++
OP_TEST       A C     if not (R(A) <=> C) then pc++
OP_TESTSET    A B C   if (R(B) <=> C) then R(A) := R(B) else pc++
OP_CALL       A B C   R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1))
OP_TAILCALL   A B C   return R(A)(R(A+1), ... ,R(A+B-1))
OP_RETURN     A B     return R(A), ... ,R(A+B-2)  (see note)
OP_FORLOOP    A sBx   R(A)+=R(A+2);
											if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }
OP_FORPREP    A sBx   R(A)-=R(A+2); pc+=sBx
OP_TFORLOOP   A C     R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));
											if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++
OP_SETLIST    A B C   R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B
OP_CLOSE      A       close all variables in the stack up to (>=) R(A)
OP_CLOSURE    A Bx    R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))
OP_VARARG     A B     R(A), R(A+1), ..., R(A+B-1) = vararg
----------------------------------------------------------------------]]

luaP.opnames = {}  -- opcode names
luaP.OpCode = {}   -- lookup name -> number
luaP.ROpCode = {}  -- lookup number -> name

------------------------------------------------------------------------
-- ORDER OP
------------------------------------------------------------------------
local i = 0
for v in string.gmatch([[
MOVE LOADK LOADBOOL LOADNIL GETUPVAL
GETGLOBAL GETTABLE SETGLOBAL SETUPVAL SETTABLE
NEWTABLE SELF ADD SUB MUL
DIV MOD POW UNM NOT
LEN CONCAT JMP EQ LT
LE TEST TESTSET CALL TAILCALL
RETURN FORLOOP FORPREP TFORLOOP SETLIST
CLOSE CLOSURE VARARG
]], "%S+") do
	local n = "OP_"..v
	luaP.opnames[i] = v
	luaP.OpCode[n] = i
	luaP.ROpCode[i] = n
	i = i + 1
end
luaP.NUM_OPCODES = i

--[[
===========================================================================
	Notes:
	(*) In OP_CALL, if (B == 0) then B = top. C is the number of returns - 1,
			and can be 0: OP_CALL then sets 'top' to last_result+1, so
			next open instruction (OP_CALL, OP_RETURN, OP_SETLIST) may use 'top'.
	(*) In OP_VARARG, if (B == 0) then use actual number of varargs and
			set top (like in OP_CALL with C == 0).
	(*) In OP_RETURN, if (B == 0) then return up to 'top'
	(*) In OP_SETLIST, if (B == 0) then B = 'top';
			if (C == 0) then next 'instruction' is real C
	(*) For comparisons, A specifies what condition the test should accept
			(true or false).
	(*) All 'skips' (pc++) assume that next instruction is a jump
===========================================================================
--]]

--[[--------------------------------------------------------------------
	masks for instruction properties. The format is:
	bits 0-1: op mode
	bits 2-3: C arg mode
	bits 4-5: B arg mode
	bit 6: instruction set register A
	bit 7: operator is a test

	for OpArgMask:
	OpArgN - argument is not used
	OpArgU - argument is used
	OpArgR - argument is a register or a jump offset
	OpArgK - argument is a constant or register/constant
----------------------------------------------------------------------]]

-- was enum OpArgMask
luaP.OpArgMask = { OpArgN = 0, OpArgU = 1, OpArgR = 2, OpArgK = 3 }

------------------------------------------------------------------------
-- e.g. to compare with symbols, luaP:getOpMode(...) == luaP.OpCode.iABC
-- * accepts opcode parameter as strings, e.g. "OP_MOVE"
------------------------------------------------------------------------

function luaP:getOpMode(m)
	return self.opmodes[self.OpCode[m]] % 4
end

function luaP:getBMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 16) % 4
end

function luaP:getCMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 4) % 4
end

function luaP:testAMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 64) % 2
end

function luaP:testTMode(m)
	return math.floor(self.opmodes[self.OpCode[m]] / 128)
end

-- luaP_opnames[] is set above, as the luaP.opnames table

-- number of list items to accumulate before a SETLIST instruction
luaP.LFIELDS_PER_FLUSH = 50

------------------------------------------------------------------------
-- build instruction properties array
-- * deliberately coded to look like the C equivalent
------------------------------------------------------------------------
local function opmode(t, a, b, c, m)
	local luaP = luaP
	return t * 128 + a * 64 +
		luaP.OpArgMask[b] * 16 + luaP.OpArgMask[c] * 4 + luaP.OpMode[m]
end

-- ORDER OP
luaP.opmodes = {
	-- T A B C mode opcode
	opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_LOADK
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_LOADBOOL
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LOADNIL
	opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_GETUPVAL
	opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_GETGLOBAL
	opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_GETTABLE
	opmode(0, 0, "OpArgK", "OpArgN", "iABx"),     -- OP_SETGLOBAL
	opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_SETUPVAL
	opmode(0, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_SETTABLE
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_NEWTABLE
	opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_SELF
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_ADD
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_SUB
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MUL
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_DIV
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MOD
	opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_POW
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_UNM
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_NOT
	opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LEN
	opmode(0, 1, "OpArgR", "OpArgR", "iABC"),     -- OP_CONCAT
	opmode(0, 0, "OpArgR", "OpArgN", "iAsBx"),    -- OP_JMP
	opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_EQ
	opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LT
	opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LE
	opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TEST
	opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TESTSET
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_CALL
	opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_TAILCALL
	opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_RETURN
	opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORLOOP
	opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORPREP
	opmode(1, 0, "OpArgN", "OpArgU", "iABC"),     -- OP_TFORLOOP
	opmode(0, 0, "OpArgU", "OpArgU", "iABC"),     -- OP_SETLIST
	opmode(0, 0, "OpArgN", "OpArgN", "iABC"),     -- OP_CLOSE
	opmode(0, 1, "OpArgU", "OpArgN", "iABx"),     -- OP_CLOSURE
	opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_VARARG
}
-- an awkward way to set a zero-indexed table...
luaP.opmodes[0] =
	opmode(0, 1, "OpArgR", "OpArgN", "iABC")      -- OP_MOVE



--dofile("ldump.lua")

--requires luaP

-- mark for precompiled code ('<esc>Lua') (from lua.h)
luaU.LUA_SIGNATURE = "\27Lua"

-- constants used by dumper (from lua.h)
luaU.LUA_TNUMBER  = 3
luaU.LUA_TSTRING  = 4
luaU.LUA_TNIL     = 0
luaU.LUA_TBOOLEAN = 1
luaU.LUA_TNONE    = -1

-- constants for header of binary files (from lundump.h)
luaU.LUAC_VERSION    = 0x51     -- this is Lua 5.1
luaU.LUAC_FORMAT     = 0        -- this is the official format
luaU.LUAC_HEADERSIZE = 12       -- size of header of binary files

--[[--------------------------------------------------------------------
-- Additional functions to handle chunk writing
-- * to use make_setS and make_setF, see test_ldump.lua elsewhere
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- create a chunk writer that writes to a string
-- * returns the writer function and a table containing the string
-- * to get the final result, look in buff.data
------------------------------------------------------------------------
function luaU:make_setS()
	local buff = {}
	buff.data = ""
	local writer =
		function(s, buff)  -- chunk writer
			if not s then return 0 end
			buff.data = buff.data..s
			-- print (#buff.data, #s, string.byte(s,1,1), s)
			return 0
		end
	return writer, buff
end

------------------------------------------------------------------------
-- create a chunk writer that writes to a file
-- * returns the writer function and a table containing the file handle
-- * if a nil is passed, then writer should close the open file
------------------------------------------------------------------------
function luaU:make_setF(filename)
	local buff = {}
	buff.h = io.open(filename, "wb")
	if not buff.h then return nil end
	local writer =
		function(s, buff)  -- chunk writer
			if not buff.h then return 0 end
			if not s then
			if buff.h:close() then return 0 end
		else
			if buff.h:write(s) then return 0 end
		end
			return 1
		end
	return writer, buff
end

------------------------------------------------------------------------
-- works like the lobject.h version except that TObject used in these
-- scripts only has a 'value' field, no 'tt' field (native types used)
------------------------------------------------------------------------
function luaU:ttype(o)
	local tt = type(o.value)
	if tt == "number" then return self.LUA_TNUMBER
	elseif tt == "string" then return self.LUA_TSTRING
	elseif tt == "nil" then return self.LUA_TNIL
	elseif tt == "boolean" then return self.LUA_TBOOLEAN
	else
		return self.LUA_TNONE  -- the rest should not appear
	end
end

-----------------------------------------------------------------------
-- converts a IEEE754 double number to an 8-byte little-endian string
-- * luaU:from_double() and luaU:from_int() are adapted from ChunkBake
-- * supports +/- Infinity, but not denormals or NaNs
-----------------------------------------------------------------------
function luaU:from_double(x)
	local function grab_byte(v)
		local c = v % 256
		return (v - c) / 256, string.char(c)
	end
	local sign = 0
	if x < 0 then sign = 1; x = -x end
	local mantissa, exponent = math.frexp(x)
	if x == 0 then -- zero
		mantissa, exponent = 0, 0
	elseif x == 1/0 then
		mantissa, exponent = 0, 2047
	else
		mantissa = (mantissa * 2 - 1) * math.ldexp(0.5, 53)
		exponent = exponent + 1022
	end
	local v, byte = "" -- convert to bytes
	x = math.floor(mantissa)
	for i = 1,6 do
		x, byte = grab_byte(x); v = v..byte -- 47:0
	end
	x, byte = grab_byte(exponent * 16 + x); v = v..byte -- 55:48
	x, byte = grab_byte(sign * 128 + x); v = v..byte -- 63:56
	return v
end

-----------------------------------------------------------------------
-- converts a number to a little-endian 32-bit integer string
-- * input value assumed to not overflow, can be signed/unsigned
-----------------------------------------------------------------------
function luaU:from_int(x)
	local v = ""
	x = math.floor(x)
	if x < 0 then x = 4294967296 + x end  -- ULONG_MAX+1
	for i = 1, 4 do
		local c = x % 256
		v = v..string.char(c); x = math.floor(x / 256)
	end
	return v
end

--[[--------------------------------------------------------------------
-- Functions to make a binary chunk
-- * many functions have the size parameter removed, since output is
--   in the form of a string and some sizes are implicit or hard-coded
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct DumpState:
--   L  -- lua_State (not used in this script)
--   writer  -- lua_Writer (chunk writer function)
--   data  -- void* (chunk writer context or data already written)
--   strip  -- if true, don't write any debug information
--   status  -- if non-zero, an error has occured
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- dumps a block of bytes
-- * lua_unlock(D.L), lua_lock(D.L) unused
------------------------------------------------------------------------
function luaU:DumpBlock(b, D)
	if D.status == 0 then
		-- lua_unlock(D->L);
		D.status = D.write(b, D.data)
		-- lua_lock(D->L);
	end
end

------------------------------------------------------------------------
-- dumps a char
------------------------------------------------------------------------
function luaU:DumpChar(y, D)
	self:DumpBlock(string.char(y), D)
end

------------------------------------------------------------------------
-- dumps a 32-bit signed or unsigned integer (for int) (hard-coded)
------------------------------------------------------------------------
function luaU:DumpInt(x, D)
	self:DumpBlock(self:from_int(x), D)
end

------------------------------------------------------------------------
-- dumps a 32-bit signed or unsigned integer (for int) (hard-coded)
------------------------------------------------------------------------
function luaU:DumpSizeT(x, D)
	self:DumpBlock(self:from_int(x), D)
	if size_size_t == 8 then
		self:DumpBlock(self:from_int(0), D)
	end
end

------------------------------------------------------------------------
-- dumps a lua_Number (hard-coded as a double)
------------------------------------------------------------------------
function luaU:DumpNumber(x, D)
	self:DumpBlock(self:from_double(x), D)
end

------------------------------------------------------------------------
-- dumps a Lua string (size type is hard-coded)
------------------------------------------------------------------------
function luaU:DumpString(s, D)
	if s == nil then
		self:DumpSizeT(0, D)
	else
		s = s.."\0"  -- include trailing '\0'
		self:DumpSizeT(#s, D)
		self:DumpBlock(s, D)
	end
end

------------------------------------------------------------------------
-- dumps instruction block from function prototype
------------------------------------------------------------------------
function luaU:DumpCode(f, D)
	local n = f.sizecode
	--was DumpVector
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpBlock(luaP:Instruction(f.code[i]), D)
	end
end

------------------------------------------------------------------------
-- dump constant pool from function prototype
-- * bvalue(o), nvalue(o) and rawtsvalue(o) macros removed
------------------------------------------------------------------------
function luaU:DumpConstants(f, D)
	local n = f.sizek
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		local o = f.k[i]  -- TValue
		local tt = self:ttype(o)
		self:DumpChar(tt, D)
		if tt == self.LUA_TNIL then
		elseif tt == self.LUA_TBOOLEAN then
			self:DumpChar(o.value and 1 or 0, D)
		elseif tt == self.LUA_TNUMBER then
			self:DumpNumber(o.value, D)
		elseif tt == self.LUA_TSTRING then
			self:DumpString(o.value, D)
		else
			--lua_assert(0)  -- cannot happen
		end
	end
	n = f.sizep
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpFunction(f.p[i], f.source, D)
	end
end

------------------------------------------------------------------------
-- dump debug information
------------------------------------------------------------------------
function luaU:DumpDebug(f, D)
	local n
	n = D.strip and 0 or f.sizelineinfo           -- dump line information
	--was DumpVector
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpInt(f.lineinfo[i], D)
	end
	n = D.strip and 0 or f.sizelocvars            -- dump local information
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpString(f.locvars[i].varname, D)
		self:DumpInt(f.locvars[i].startpc, D)
		self:DumpInt(f.locvars[i].endpc, D)
	end
	n = D.strip and 0 or f.sizeupvalues           -- dump upvalue information
	self:DumpInt(n, D)
	for i = 0, n - 1 do
		self:DumpString(f.upvalues[i], D)
	end
end

------------------------------------------------------------------------
-- dump child function prototypes from function prototype
------------------------------------------------------------------------
function luaU:DumpFunction(f, p, D)
	local source = f.source
	if source == p or D.strip then source = nil end
	self:DumpString(source, D)
	self:DumpInt(f.lineDefined, D)
	self:DumpInt(f.lastlinedefined, D)
	self:DumpChar(f.nups, D)
	self:DumpChar(f.numparams, D)
	self:DumpChar(f.is_vararg, D)
	self:DumpChar(f.maxstacksize, D)
	self:DumpCode(f, D)
	self:DumpConstants(f, D)
	self:DumpDebug(f, D)
end

------------------------------------------------------------------------
-- dump Lua header section (some sizes hard-coded)
------------------------------------------------------------------------
function luaU:DumpHeader(D)
	local h = self:header()
	assert(#h == self.LUAC_HEADERSIZE) -- fixed buffer now an assert
	self:DumpBlock(h, D)
end

------------------------------------------------------------------------
-- make header (from lundump.c)
-- returns the header string
------------------------------------------------------------------------
function luaU:header()
	local x = 1
	return self.LUA_SIGNATURE..
		string.char(
			self.LUAC_VERSION,
			self.LUAC_FORMAT,
			x,                    -- endianness (1=little)
			4,                    -- sizeof(int)
			size_size_t,                    -- sizeof(size_t)
			4,                    -- sizeof(Instruction)
			8,                    -- sizeof(lua_Number)
			0)                    -- is lua_Number integral?
end

------------------------------------------------------------------------
-- dump Lua function as precompiled chunk
-- (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)
-- * w, data are created from make_setS, make_setF
------------------------------------------------------------------------
function luaU:dump(L, f, w, data, strip)
	local D = {}  -- DumpState
	D.L = L
	D.write = w
	D.data = data
	D.strip = strip
	D.status = 0
	self:DumpHeader(D)
	self:DumpFunction(f, nil, D)
	-- added: for a chunk writer writing to a file, this final call with
	-- nil data is to indicate to the writer to close the file
	D.write(nil, D.data)
	return D.status
end




--dofile("lcode.lua")

------------------------------------------------------------------------
-- constants used by code generator
------------------------------------------------------------------------
-- maximum stack for a Lua function
luaK.MAXSTACK = 250  -- (from llimits.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- emulation of TValue macros (these are from lobject.h)
-- * TValue is a table since lcode passes references around
-- * tt member field removed, using Lua's type() instead
-- * for setsvalue, sethvalue, parameter L (deleted here) in lobject.h
--   is used in an assert for testing, see checkliveness(g,obj)
------------------------------------------------------------------------
function luaK:ttisnumber(o)
	if o then return type(o.value) == "number" else return false end
end
function luaK:nvalue(o) return o.value end
function luaK:setnilvalue(o) o.value = nil end
function luaK:setsvalue(o, x) o.value = x end
luaK.setnvalue = luaK.setsvalue
luaK.sethvalue = luaK.setsvalue
luaK.setbvalue = luaK.setsvalue

------------------------------------------------------------------------
-- The luai_num* macros define the primitive operations over numbers.
-- * this is not the entire set of primitive operations from luaconf.h
-- * used in luaK:constfolding()
------------------------------------------------------------------------
function luaK:numadd(a, b) return a + b end
function luaK:numsub(a, b) return a - b end
function luaK:nummul(a, b) return a * b end
function luaK:numdiv(a, b) return a / b end
function luaK:nummod(a, b) return a % b end
-- ((a) - floor((a)/(b))*(b)) /* actual, for reference */
function luaK:numpow(a, b) return a ^ b end
function luaK:numunm(a) return -a end
function luaK:numisnan(a) return not a == a end
-- a NaN cannot equal another NaN

--[[--------------------------------------------------------------------
-- code generator functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- Marks the end of a patch list. It is an invalid value both as an absolute
-- address, and as a list link (would link an element to itself).
------------------------------------------------------------------------
luaK.NO_JUMP = -1

------------------------------------------------------------------------
-- grep "ORDER OPR" if you change these enums
------------------------------------------------------------------------
luaK.BinOpr = {
	OPR_ADD = 0, OPR_SUB = 1, OPR_MUL = 2, OPR_DIV = 3, OPR_MOD = 4, OPR_POW = 5,
	OPR_CONCAT = 6,
	OPR_NE = 7, OPR_EQ = 8,
	OPR_LT = 9, OPR_LE = 10, OPR_GT = 11, OPR_GE = 12,
	OPR_AND = 13, OPR_OR = 14,
	OPR_NOBINOPR = 15,
}

-- * UnOpr is used by luaK:prefix's op argument, but not directly used
--   because the function receives the symbols as strings, e.g. "OPR_NOT"
luaK.UnOpr = {
	OPR_MINUS = 0, OPR_NOT = 1, OPR_LEN = 2, OPR_NOUNOPR = 3
}

------------------------------------------------------------------------
-- returns the instruction object for given e (expdesc), was a macro
------------------------------------------------------------------------
function luaK:getcode(fs, e)
	return fs.f.code[e.info]
end

------------------------------------------------------------------------
-- codes an instruction with a signed Bx (sBx) field, was a macro
-- * used in luaK:jump(), (lparser) luaY:forbody()
------------------------------------------------------------------------
function luaK:codeAsBx(fs, o, A, sBx)
	return self:codeABx(fs, o, A, sBx + luaP.MAXARG_sBx)
end

------------------------------------------------------------------------
-- set the expdesc e instruction for multiple returns, was a macro
------------------------------------------------------------------------
function luaK:setmultret(fs, e)
	self:setreturns(fs, e, luaY.LUA_MULTRET)
end

------------------------------------------------------------------------
-- there is a jump if patch lists are not identical, was a macro
-- * used in luaK:exp2reg(), luaK:exp2anyreg(), luaK:exp2val()
------------------------------------------------------------------------
function luaK:hasjumps(e)
	return e.t ~= e.f
end

------------------------------------------------------------------------
-- true if the expression is a constant number (for constant folding)
-- * used in constfolding(), infix()
------------------------------------------------------------------------
function luaK:isnumeral(e)
	return e.k == "VKNUM" and e.t == self.NO_JUMP and e.f == self.NO_JUMP
end

------------------------------------------------------------------------
-- codes loading of nil, optimization done if consecutive locations
-- * used in luaK:discharge2reg(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:_nil(fs, from, n)
	if fs.pc > fs.lasttarget then  -- no jumps to current position?
		if fs.pc == 0 then  -- function start?
			if from >= fs.nactvar then
				return  -- positions are already clean
			end
		else
			local previous = fs.f.code[fs.pc - 1]
			if luaP:GET_OPCODE(previous) == "OP_LOADNIL" then
				local pfrom = luaP:GETARG_A(previous)
				local pto = luaP:GETARG_B(previous)
				if pfrom <= from and from <= pto + 1 then  -- can connect both?
					if from + n - 1 > pto then
						luaP:SETARG_B(previous, from + n - 1)
					end
					return
				end
			end
		end
	end
	self:codeABC(fs, "OP_LOADNIL", from, from + n - 1, 0)  -- else no optimization
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:jump(fs)
	local jpc = fs.jpc  -- save list of jumps to here
	fs.jpc = self.NO_JUMP
	local j = self:codeAsBx(fs, "OP_JMP", 0, self.NO_JUMP)
	j = self:concat(fs, j, jpc)  -- keep them on hold
	return j
end

------------------------------------------------------------------------
-- codes a RETURN instruction
-- * used in luaY:close_func(), luaY:retstat()
------------------------------------------------------------------------
function luaK:ret(fs, first, nret)
	self:codeABC(fs, "OP_RETURN", first, nret + 1, 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codecomp()
------------------------------------------------------------------------
function luaK:condjump(fs, op, A, B, C)
	self:codeABC(fs, op, A, B, C)
	return self:jump(fs)
end

------------------------------------------------------------------------
--
-- * used in luaK:patchlistaux(), luaK:concat()
------------------------------------------------------------------------
function luaK:fixjump(fs, pc, dest)
	local jmp = fs.f.code[pc]
	local offset = dest - (pc + 1)
	lua_assert(dest ~= self.NO_JUMP)
	if math.abs(offset) > luaP.MAXARG_sBx then
		luaX:syntaxerror(fs.ls, "control structure too long")
	end
	luaP:SETARG_sBx(jmp, offset)
end

------------------------------------------------------------------------
-- returns current 'pc' and marks it as a jump target (to avoid wrong
-- optimizations with consecutive instructions not in the same basic block).
-- * used in multiple locations
-- * fs.lasttarget tested only by luaK:_nil() when optimizing OP_LOADNIL
------------------------------------------------------------------------
function luaK:getlabel(fs)
	fs.lasttarget = fs.pc
	return fs.pc
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:removevalues(), luaK:patchlistaux(),
--   luaK:concat()
------------------------------------------------------------------------
function luaK:getjump(fs, pc)
	local offset = luaP:GETARG_sBx(fs.f.code[pc])
	if offset == self.NO_JUMP then  -- point to itself represents end of list
		return self.NO_JUMP  -- end of list
	else
		return (pc + 1) + offset  -- turn offset into absolute position
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:patchtestreg(), luaK:invertjump()
------------------------------------------------------------------------
function luaK:getjumpcontrol(fs, pc)
	local pi = fs.f.code[pc]
	local ppi = fs.f.code[pc - 1]
	if pc >= 1 and luaP:testTMode(luaP:GET_OPCODE(ppi)) ~= 0 then
		return ppi
	else
		return pi
	end
end

------------------------------------------------------------------------
-- check whether list has any jump that do not produce a value
-- (or produce an inverted value)
-- * return value changed to boolean
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:need_value(fs, list)
	while list ~= self.NO_JUMP do
		local i = self:getjumpcontrol(fs, list)
		if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then return true end
		list = self:getjump(fs, list)
	end
	return false  -- not found
end

------------------------------------------------------------------------
--
-- * used in luaK:removevalues(), luaK:patchlistaux()
------------------------------------------------------------------------
function luaK:patchtestreg(fs, node, reg)
	local i = self:getjumpcontrol(fs, node)
	if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then
		return false  -- cannot patch other instructions
	end
	if reg ~= luaP.NO_REG and reg ~= luaP:GETARG_B(i) then
		luaP:SETARG_A(i, reg)
	else  -- no register to put value or register already has the value
		-- due to use of a table as i, i cannot be replaced by another table
		-- so the following is required; there is no change to ARG_C
		luaP:SET_OPCODE(i, "OP_TEST")
		local b = luaP:GETARG_B(i)
		luaP:SETARG_A(i, b)
		luaP:SETARG_B(i, 0)
		-- *i = CREATE_ABC(OP_TEST, GETARG_B(*i), 0, GETARG_C(*i)); /* C */
	end
	return true
end

------------------------------------------------------------------------
--
-- * used only in luaK:codenot()
------------------------------------------------------------------------
function luaK:removevalues(fs, list)
	while list ~= self.NO_JUMP do
		self:patchtestreg(fs, list, luaP.NO_REG)
		list = self:getjump(fs, list)
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargejpc(), luaK:patchlist(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:patchlistaux(fs, list, vtarget, reg, dtarget)
	while list ~= self.NO_JUMP do
		local _next = self:getjump(fs, list)
		if self:patchtestreg(fs, list, reg) then
			self:fixjump(fs, list, vtarget)
		else
			self:fixjump(fs, list, dtarget)  -- jump to default target
		end
		list = _next
	end
end

------------------------------------------------------------------------
--
-- * used only in luaK:code()
------------------------------------------------------------------------
function luaK:dischargejpc(fs)
	self:patchlistaux(fs, fs.jpc, fs.pc, luaP.NO_REG, fs.pc)
	fs.jpc = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:whilestat(), luaY:repeatstat(), luaY:forbody()
------------------------------------------------------------------------
function luaK:patchlist(fs, list, target)
	if target == fs.pc then
		self:patchtohere(fs, list)
	else
		lua_assert(target < fs.pc)
		self:patchlistaux(fs, list, target, luaP.NO_REG, target)
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:patchtohere(fs, list)
	self:getlabel(fs)
	fs.jpc = self:concat(fs, fs.jpc, list)
end

------------------------------------------------------------------------
-- * l1 was a pointer, now l1 is returned and callee assigns the value
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:concat(fs, l1, l2)
	if l2 == self.NO_JUMP then return l1
	elseif l1 == self.NO_JUMP then
		return l2
	else
		local list = l1
		local _next = self:getjump(fs, list)
		while _next ~= self.NO_JUMP do  -- find last element
			list = _next
			_next = self:getjump(fs, list)
		end
		self:fixjump(fs, list, l2)
	end
	return l1
end

------------------------------------------------------------------------
--
-- * used in luaK:reserveregs(), (lparser) luaY:forlist()
------------------------------------------------------------------------
function luaK:checkstack(fs, n)
	local newstack = fs.freereg + n
	if newstack > fs.f.maxstacksize then
		if newstack >= self.MAXSTACK then
			luaX:syntaxerror(fs.ls, "function or expression too complex")
		end
		fs.f.maxstacksize = newstack
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:reserveregs(fs, n)
	self:checkstack(fs, n)
	fs.freereg = fs.freereg + n
end

------------------------------------------------------------------------
--
-- * used in luaK:freeexp(), luaK:dischargevars()
------------------------------------------------------------------------
function luaK:freereg(fs, reg)
	if not luaP:ISK(reg) and reg >= fs.nactvar then
		fs.freereg = fs.freereg - 1
		lua_assert(reg == fs.freereg)
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:freeexp(fs, e)
	if e.k == "VNONRELOC" then
		self:freereg(fs, e.info)
	end
end

------------------------------------------------------------------------
-- * TODO NOTE implementation is not 100% correct, since the assert fails
-- * luaH_set, setobj deleted; direct table access used instead
-- * used in luaK:stringK(), luaK:numberK(), luaK:boolK(), luaK:nilK()
------------------------------------------------------------------------
function luaK:addk(fs, k, v)
	local L = fs.L
	local idx = fs.h[k.value]
	--TValue *idx = luaH_set(L, fs->h, k); /* C */
	local f = fs.f
	if self:ttisnumber(idx) then
		--TODO this assert currently FAILS (last tested for 5.0.2)
		--lua_assert(fs.f.k[self:nvalue(idx)] == v)
		--lua_assert(luaO_rawequalObj(&fs->f->k[cast_int(nvalue(idx))], v)); /* C */
		return self:nvalue(idx)
	else -- constant not found; create a new entry
		idx = {}
		self:setnvalue(idx, fs.nk)
		fs.h[k.value] = idx
		-- setnvalue(idx, cast_num(fs->nk)); /* C */
		luaY:growvector(L, f.k, fs.nk, f.sizek, nil,
			luaP.MAXARG_Bx, "constant table overflow")
		-- loop to initialize empty f.k positions not required
		f.k[fs.nk] = v
		-- setobj(L, &f->k[fs->nk], v); /* C */
		-- luaC_barrier(L, f, v); /* GC */
		local nk = fs.nk
		fs.nk = fs.nk + 1
		return nk
	end

end

------------------------------------------------------------------------
-- creates and sets a string object
-- * used in (lparser) luaY:codestring(), luaY:singlevar()
------------------------------------------------------------------------
function luaK:stringK(fs, s)
	local o = {}  -- TValue
	self:setsvalue(o, s)
	return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a number object
-- * used in luaK:prefix() for negative (or negation of) numbers
-- * used in (lparser) luaY:simpleexp(), luaY:fornum()
------------------------------------------------------------------------
function luaK:numberK(fs, r)
	local o = {}  -- TValue
	self:setnvalue(o, r)
	return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a boolean object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:boolK(fs, b)
	local o = {}  -- TValue
	self:setbvalue(o, b)
	return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a nil object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:nilK(fs)
	local k, v = {}, {}  -- TValue
	self:setnilvalue(v)
	-- cannot use nil as key; instead use table itself to represent nil
	self:sethvalue(k, fs.h)
	return self:addk(fs, k, v)
end

------------------------------------------------------------------------
--
-- * used in luaK:setmultret(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:setreturns(fs, e, nresults)
	if e.k == "VCALL" then  -- expression is an open function call?
		luaP:SETARG_C(self:getcode(fs, e), nresults + 1)
	elseif e.k == "VVARARG" then
		luaP:SETARG_B(self:getcode(fs, e), nresults + 1);
		luaP:SETARG_A(self:getcode(fs, e), fs.freereg);
		luaK:reserveregs(fs, 1)
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargevars(), (lparser) luaY:assignment()
------------------------------------------------------------------------
function luaK:setoneret(fs, e)
	if e.k == "VCALL" then  -- expression is an open function call?
		e.k = "VNONRELOC"
		e.info = luaP:GETARG_A(self:getcode(fs, e))
	elseif e.k == "VVARARG" then
		luaP:SETARG_B(self:getcode(fs, e), 2)
		e.k = "VRELOCABLE"  -- can relocate its simple result
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:dischargevars(fs, e)
	local k = e.k
	if k == "VLOCAL" then
		e.k = "VNONRELOC"
	elseif k == "VUPVAL" then
		e.info = self:codeABC(fs, "OP_GETUPVAL", 0, e.info, 0)
		e.k = "VRELOCABLE"
	elseif k == "VGLOBAL" then
		e.info = self:codeABx(fs, "OP_GETGLOBAL", 0, e.info)
		e.k = "VRELOCABLE"
	elseif k == "VINDEXED" then
		self:freereg(fs, e.aux)
		self:freereg(fs, e.info)
		e.info = self:codeABC(fs, "OP_GETTABLE", 0, e.info, e.aux)
		e.k = "VRELOCABLE"
	elseif k == "VVARARG" or k == "VCALL" then
		self:setoneret(fs, e)
	else
		-- there is one value available (somewhere)
	end
end

------------------------------------------------------------------------
--
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:code_label(fs, A, b, jump)
	self:getlabel(fs)  -- those instructions may be jump targets
	return self:codeABC(fs, "OP_LOADBOOL", A, b, jump)
end

------------------------------------------------------------------------
--
-- * used in luaK:discharge2anyreg(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:discharge2reg(fs, e, reg)
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VNIL" then
		self:_nil(fs, reg, 1)
	elseif k == "VFALSE" or k == "VTRUE" then
		self:codeABC(fs, "OP_LOADBOOL", reg, (e.k == "VTRUE") and 1 or 0, 0)
	elseif k == "VK" then
		self:codeABx(fs, "OP_LOADK", reg, e.info)
	elseif k == "VKNUM" then
		self:codeABx(fs, "OP_LOADK", reg, self:numberK(fs, e.nval))
	elseif k == "VRELOCABLE" then
		local pc = self:getcode(fs, e)
		luaP:SETARG_A(pc, reg)
	elseif k == "VNONRELOC" then
		if reg ~= e.info then
			self:codeABC(fs, "OP_MOVE", reg, e.info, 0)
		end
	else
		lua_assert(e.k == "VVOID" or e.k == "VJMP")
		return  -- nothing to do...
	end
	e.info = reg
	e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codenot()
------------------------------------------------------------------------
function luaK:discharge2anyreg(fs, e)
	if e.k ~= "VNONRELOC" then
		self:reserveregs(fs, 1)
		self:discharge2reg(fs, e, fs.freereg - 1)
	end
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2nextreg(), luaK:exp2anyreg(), luaK:storevar()
------------------------------------------------------------------------
function luaK:exp2reg(fs, e, reg)
	self:discharge2reg(fs, e, reg)
	if e.k == "VJMP" then
		e.t = self:concat(fs, e.t, e.info)  -- put this jump in 't' list
	end
	if self:hasjumps(e) then
		local final  -- position after whole expression
		local p_f = self.NO_JUMP  -- position of an eventual LOAD false
		local p_t = self.NO_JUMP  -- position of an eventual LOAD true
		if self:need_value(fs, e.t) or self:need_value(fs, e.f) then
			local fj = (e.k == "VJMP") and self.NO_JUMP or self:jump(fs)
			p_f = self:code_label(fs, reg, 0, 1)
			p_t = self:code_label(fs, reg, 1, 0)
			self:patchtohere(fs, fj)
		end
		final = self:getlabel(fs)
		self:patchlistaux(fs, e.f, final, reg, p_f)
		self:patchlistaux(fs, e.t, final, reg, p_t)
	end
	e.f, e.t = self.NO_JUMP, self.NO_JUMP
	e.info = reg
	e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2nextreg(fs, e)
	self:dischargevars(fs, e)
	self:freeexp(fs, e)
	self:reserveregs(fs, 1)
	self:exp2reg(fs, e, fs.freereg - 1)
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2anyreg(fs, e)
	self:dischargevars(fs, e)
	if e.k == "VNONRELOC" then
		if not self:hasjumps(e) then  -- exp is already in a register
			return e.info
		end
		if e.info >= fs.nactvar then  -- reg. is not a local?
			self:exp2reg(fs, e, e.info)  -- put value on it
			return e.info
		end
	end
	self:exp2nextreg(fs, e)  -- default
	return e.info
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2RK(), luaK:prefix(), luaK:posfix()
-- * used in (lparser) luaY:yindex()
------------------------------------------------------------------------
function luaK:exp2val(fs, e)
	if self:hasjumps(e) then
		self:exp2anyreg(fs, e)
	else
		self:dischargevars(fs, e)
	end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2RK(fs, e)
	self:exp2val(fs, e)
	local k = e.k
	if k == "VKNUM" or k == "VTRUE" or k == "VFALSE" or k == "VNIL" then
		if fs.nk <= luaP.MAXINDEXRK then  -- constant fit in RK operand?
			-- converted from a 2-deep ternary operator expression
			if e.k == "VNIL" then
				e.info = self:nilK(fs)
			else
				e.info = (e.k == "VKNUM") and self:numberK(fs, e.nval)
					or self:boolK(fs, e.k == "VTRUE")
			end
			e.k = "VK"
			return luaP:RKASK(e.info)
		end
	elseif k == "VK" then
		if e.info <= luaP.MAXINDEXRK then  -- constant fit in argC?
			return luaP:RKASK(e.info)
		end
	else
		-- default
	end
	-- not a constant in the right range: put it in a register
	return self:exp2anyreg(fs, e)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:assignment(), luaY:localfunc(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:storevar(fs, var, ex)
	local k = var.k
	if k == "VLOCAL" then
		self:freeexp(fs, ex)
		self:exp2reg(fs, ex, var.info)
		return
	elseif k == "VUPVAL" then
		local e = self:exp2anyreg(fs, ex)
		self:codeABC(fs, "OP_SETUPVAL", e, var.info, 0)
	elseif k == "VGLOBAL" then
		local e = self:exp2anyreg(fs, ex)
		self:codeABx(fs, "OP_SETGLOBAL", e, var.info)
	elseif k == "VINDEXED" then
		local e = self:exp2RK(fs, ex)
		self:codeABC(fs, "OP_SETTABLE", var.info, var.aux, e)
	else
		lua_assert(0)  -- invalid var kind to store
	end
	self:freeexp(fs, ex)
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:primaryexp()
------------------------------------------------------------------------
function luaK:_self(fs, e, key)
	self:exp2anyreg(fs, e)
	self:freeexp(fs, e)
	local func = fs.freereg
	self:reserveregs(fs, 2)
	self:codeABC(fs, "OP_SELF", func, e.info, self:exp2RK(fs, key))
	self:freeexp(fs, key)
	e.info = func
	e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:codenot()
------------------------------------------------------------------------
function luaK:invertjump(fs, e)
	local pc = self:getjumpcontrol(fs, e.info)
	lua_assert(luaP:testTMode(luaP:GET_OPCODE(pc)) ~= 0 and
		luaP:GET_OPCODE(pc) ~= "OP_TESTSET" and
		luaP:GET_OPCODE(pc) ~= "OP_TEST")
	luaP:SETARG_A(pc, (luaP:GETARG_A(pc) == 0) and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:goiffalse()
------------------------------------------------------------------------
function luaK:jumponcond(fs, e, cond)
	if e.k == "VRELOCABLE" then
		local ie = self:getcode(fs, e)
		if luaP:GET_OPCODE(ie) == "OP_NOT" then
			fs.pc = fs.pc - 1  -- remove previous OP_NOT
			return self:condjump(fs, "OP_TEST", luaP:GETARG_B(ie), 0, cond and 0 or 1)
		end
		-- else go through
	end
	self:discharge2anyreg(fs, e)
	self:freeexp(fs, e)
	return self:condjump(fs, "OP_TESTSET", luaP.NO_REG, e.info, cond and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:infix(), (lparser) luaY:cond()
------------------------------------------------------------------------
function luaK:goiftrue(fs, e)
	local pc  -- pc of last jump
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VK" or k == "VKNUM" or k == "VTRUE" then
		pc = self.NO_JUMP  -- always true; do nothing
	elseif k == "VFALSE" then
		pc = self:jump(fs)  -- always jump
	elseif k == "VJMP" then
		self:invertjump(fs, e)
		pc = e.info
	else
		pc = self:jumponcond(fs, e, false)
	end
	e.f = self:concat(fs, e.f, pc)  -- insert last jump in `f' list
	self:patchtohere(fs, e.t)
	e.t = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in luaK:infix()
------------------------------------------------------------------------
function luaK:goiffalse(fs, e)
	local pc  -- pc of last jump
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VNIL" or k == "VFALSE"then
		pc = self.NO_JUMP  -- always false; do nothing
	elseif k == "VTRUE" then
		pc = self:jump(fs)  -- always jump
	elseif k == "VJMP" then
		pc = e.info
	else
		pc = self:jumponcond(fs, e, true)
	end
	e.t = self:concat(fs, e.t, pc)  -- insert last jump in `t' list
	self:patchtohere(fs, e.f)
	e.f = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used only in luaK:prefix()
------------------------------------------------------------------------
function luaK:codenot(fs, e)
	self:dischargevars(fs, e)
	local k = e.k
	if k == "VNIL" or k == "VFALSE" then
		e.k = "VTRUE"
	elseif k == "VK" or k == "VKNUM" or k == "VTRUE" then
		e.k = "VFALSE"
	elseif k == "VJMP" then
		self:invertjump(fs, e)
	elseif k == "VRELOCABLE" or k == "VNONRELOC" then
		self:discharge2anyreg(fs, e)
		self:freeexp(fs, e)
		e.info = self:codeABC(fs, "OP_NOT", 0, e.info, 0)
		e.k = "VRELOCABLE"
	else
		lua_assert(0)  -- cannot happen
	end
	-- interchange true and false lists
	e.f, e.t = e.t, e.f
	self:removevalues(fs, e.f)
	self:removevalues(fs, e.t)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:field(), luaY:primaryexp()
------------------------------------------------------------------------
function luaK:indexed(fs, t, k)
	t.aux = self:exp2RK(fs, k)
	t.k = "VINDEXED"
end

------------------------------------------------------------------------
--
-- * used only in luaK:codearith()
------------------------------------------------------------------------
function luaK:constfolding(op, e1, e2)
	local r
	if not self:isnumeral(e1) or not self:isnumeral(e2) then return false end
	local v1 = e1.nval
	local v2 = e2.nval
	if op == "OP_ADD" then
		r = self:numadd(v1, v2)
	elseif op == "OP_SUB" then
		r = self:numsub(v1, v2)
	elseif op == "OP_MUL" then
		r = self:nummul(v1, v2)
	elseif op == "OP_DIV" then
		if v2 == 0 then return false end  -- do not attempt to divide by 0
		r = self:numdiv(v1, v2)
	elseif op == "OP_MOD" then
		if v2 == 0 then return false end  -- do not attempt to divide by 0
		r = self:nummod(v1, v2)
	elseif op == "OP_POW" then
		r = self:numpow(v1, v2)
	elseif op == "OP_UNM" then
		r = self:numunm(v1)
	elseif op == "OP_LEN" then
		return false  -- no constant folding for 'len'
	else
		lua_assert(0)
		r = 0
	end
	if self:numisnan(r) then return false end  -- do not attempt to produce NaN
	e1.nval = r
	return true
end

------------------------------------------------------------------------
--
-- * used in luaK:prefix(), luaK:posfix()
------------------------------------------------------------------------
function luaK:codearith(fs, op, e1, e2)
	if self:constfolding(op, e1, e2) then
		return
	else
		local o2 = (op ~= "OP_UNM" and op ~= "OP_LEN") and self:exp2RK(fs, e2) or 0
		local o1 = self:exp2RK(fs, e1)
		if o1 > o2 then
			self:freeexp(fs, e1)
			self:freeexp(fs, e2)
		else
			self:freeexp(fs, e2)
			self:freeexp(fs, e1)
		end
		e1.info = self:codeABC(fs, op, 0, o1, o2)
		e1.k = "VRELOCABLE"
	end
end

------------------------------------------------------------------------
--
-- * used only in luaK:posfix()
------------------------------------------------------------------------
function luaK:codecomp(fs, op, cond, e1, e2)
	local o1 = self:exp2RK(fs, e1)
	local o2 = self:exp2RK(fs, e2)
	self:freeexp(fs, e2)
	self:freeexp(fs, e1)
	if cond == 0 and op ~= "OP_EQ" then
		-- exchange args to replace by `<' or `<='
		o1, o2 = o2, o1  -- o1 <==> o2
		cond = 1
	end
	e1.info = self:condjump(fs, op, cond, o1, o2)
	e1.k = "VJMP"
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:prefix(fs, op, e)
	local e2 = {}  -- expdesc
	e2.t, e2.f = self.NO_JUMP, self.NO_JUMP
	e2.k = "VKNUM"
	e2.nval = 0
	if op == "OPR_MINUS" then
		if not self:isnumeral(e) then
			self:exp2anyreg(fs, e)  -- cannot operate on non-numeric constants
		end
		self:codearith(fs, "OP_UNM", e, e2)
	elseif op == "OPR_NOT" then
		self:codenot(fs, e)
	elseif op == "OPR_LEN" then
		self:exp2anyreg(fs, e)  -- cannot operate on constants
		self:codearith(fs, "OP_LEN", e, e2)
	else
		lua_assert(0)
	end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:infix(fs, op, v)
	if op == "OPR_AND" then
		self:goiftrue(fs, v)
	elseif op == "OPR_OR" then
		self:goiffalse(fs, v)
	elseif op == "OPR_CONCAT" then
		self:exp2nextreg(fs, v)  -- operand must be on the 'stack'
	elseif op == "OPR_ADD" or op == "OPR_SUB" or
		op == "OPR_MUL" or op == "OPR_DIV" or
		op == "OPR_MOD" or op == "OPR_POW" then
		if not self:isnumeral(v) then self:exp2RK(fs, v) end
	else
		self:exp2RK(fs, v)
	end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
-- table lookups to simplify testing
luaK.arith_op = {
	OPR_ADD = "OP_ADD", OPR_SUB = "OP_SUB", OPR_MUL = "OP_MUL",
	OPR_DIV = "OP_DIV", OPR_MOD = "OP_MOD", OPR_POW = "OP_POW",
}
luaK.comp_op = {
	OPR_EQ = "OP_EQ", OPR_NE = "OP_EQ", OPR_LT = "OP_LT",
	OPR_LE = "OP_LE", OPR_GT = "OP_LT", OPR_GE = "OP_LE",
}
luaK.comp_cond = {
	OPR_EQ = 1, OPR_NE = 0, OPR_LT = 1,
	OPR_LE = 1, OPR_GT = 0, OPR_GE = 0,
}
function luaK:posfix(fs, op, e1, e2)
	-- needed because e1 = e2 doesn't copy values...
	-- * in 5.0.x, only k/info/aux/t/f copied, t for AND, f for OR
	--   but here, all elements are copied for completeness' sake
	local function copyexp(e1, e2)
		e1.k = e2.k
		e1.info = e2.info; e1.aux = e2.aux
		e1.nval = e2.nval
		e1.t = e2.t; e1.f = e2.f
	end
	if op == "OPR_AND" then
		lua_assert(e1.t == self.NO_JUMP)  -- list must be closed
		self:dischargevars(fs, e2)
		e2.f = self:concat(fs, e2.f, e1.f)
		copyexp(e1, e2)
	elseif op == "OPR_OR" then
		lua_assert(e1.f == self.NO_JUMP)  -- list must be closed
		self:dischargevars(fs, e2)
		e2.t = self:concat(fs, e2.t, e1.t)
		copyexp(e1, e2)
	elseif op == "OPR_CONCAT" then
		self:exp2val(fs, e2)
		if e2.k == "VRELOCABLE" and luaP:GET_OPCODE(self:getcode(fs, e2)) == "OP_CONCAT" then
			lua_assert(e1.info == luaP:GETARG_B(self:getcode(fs, e2)) - 1)
			self:freeexp(fs, e1)
			luaP:SETARG_B(self:getcode(fs, e2), e1.info)
			e1.k = "VRELOCABLE"
			e1.info = e2.info
		else
			self:exp2nextreg(fs, e2)  -- operand must be on the 'stack'
			self:codearith(fs, "OP_CONCAT", e1, e2)
		end
	else
		-- the following uses a table lookup in place of conditionals
		local arith = self.arith_op[op]
		if arith then
			self:codearith(fs, arith, e1, e2)
		else
			local comp = self.comp_op[op]
			if comp then
				self:codecomp(fs, comp, self.comp_cond[op], e1, e2)
			else
				lua_assert(0)
			end
		end--if arith
	end--if op
end

------------------------------------------------------------------------
-- adjusts debug information for last instruction written, in order to
-- change the line where item comes into existence
-- * used in (lparser) luaY:funcargs(), luaY:forbody(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:fixline(fs, line)
	fs.f.lineinfo[fs.pc - 1] = line
end

------------------------------------------------------------------------
-- general function to write an instruction into the instruction buffer,
-- sets debug information too
-- * used in luaK:codeABC(), luaK:codeABx()
-- * called directly by (lparser) luaY:whilestat()
------------------------------------------------------------------------
function luaK:code(fs, i, line)
	local f = fs.f
	self:dischargejpc(fs)  -- 'pc' will change
	-- put new instruction in code array
	luaY:growvector(fs.L, f.code, fs.pc, f.sizecode, nil,
		luaY.MAX_INT, "code size overflow")
	f.code[fs.pc] = i
	-- save corresponding line information
	luaY:growvector(fs.L, f.lineinfo, fs.pc, f.sizelineinfo, nil,
		luaY.MAX_INT, "code size overflow")
	f.lineinfo[fs.pc] = line
	local pc = fs.pc
	fs.pc = fs.pc + 1
	return pc
end

------------------------------------------------------------------------
-- writes an instruction of type ABC
-- * calls luaK:code()
------------------------------------------------------------------------
function luaK:codeABC(fs, o, a, b, c)
	lua_assert(luaP:getOpMode(o) == luaP.OpMode.iABC)
	lua_assert(luaP:getBMode(o) ~= luaP.OpArgMask.OpArgN or b == 0)
	lua_assert(luaP:getCMode(o) ~= luaP.OpArgMask.OpArgN or c == 0)
	return self:code(fs, luaP:CREATE_ABC(o, a, b, c), fs.ls.lastline)
end

------------------------------------------------------------------------
-- writes an instruction of type ABx
-- * calls luaK:code(), called by luaK:codeAsBx()
------------------------------------------------------------------------
function luaK:codeABx(fs, o, a, bc)
	lua_assert(luaP:getOpMode(o) == luaP.OpMode.iABx or
		luaP:getOpMode(o) == luaP.OpMode.iAsBx)
	lua_assert(luaP:getCMode(o) == luaP.OpArgMask.OpArgN)
	return self:code(fs, luaP:CREATE_ABx(o, a, bc), fs.ls.lastline)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:closelistfield(), luaY:lastlistfield()
------------------------------------------------------------------------
function luaK:setlist(fs, base, nelems, tostore)
	local c = math.floor((nelems - 1)/luaP.LFIELDS_PER_FLUSH) + 1
	local b = (tostore == luaY.LUA_MULTRET) and 0 or tostore
	lua_assert(tostore ~= 0)
	if c <= luaP.MAXARG_C then
		self:codeABC(fs, "OP_SETLIST", base, b, c)
	else
		self:codeABC(fs, "OP_SETLIST", base, b, 0)
		self:code(fs, luaP:CREATE_Inst(c), fs.ls.lastline)
	end
	fs.freereg = base + 1  -- free registers with list values
end




--dofile("lparser.lua")

--[[--------------------------------------------------------------------
-- Expression descriptor
-- * expkind changed to string constants; luaY:assignment was the only
--   function to use a relational operator with this enumeration
-- VVOID       -- no value
-- VNIL        -- no value
-- VTRUE       -- no value
-- VFALSE      -- no value
-- VK          -- info = index of constant in 'k'
-- VKNUM       -- nval = numerical value
-- VLOCAL      -- info = local register
-- VUPVAL,     -- info = index of upvalue in 'upvalues'
-- VGLOBAL     -- info = index of table; aux = index of global name in 'k'
-- VINDEXED    -- info = table register; aux = index register (or 'k')
-- VJMP        -- info = instruction pc
-- VRELOCABLE  -- info = instruction pc
-- VNONRELOC   -- info = result register
-- VCALL       -- info = instruction pc
-- VVARARG     -- info = instruction pc
} ----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- * expdesc in Lua 5.1.x has a union u and another struct s; this Lua
--   implementation ignores all instances of u and s usage
-- struct expdesc:
--   k  -- (enum: expkind)
--   info, aux -- (int, int)
--   nval -- (lua_Number)
--   t  -- patch list of 'exit when true'
--   f  -- patch list of 'exit when false'
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct upvaldesc:
--   k  -- (lu_byte)
--   info -- (lu_byte)
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- state needed to generate code for a given function
-- struct FuncState:
--   f  -- current function header (table: Proto)
--   h  -- table to find (and reuse) elements in 'k' (table: Table)
--   prev  -- enclosing function (table: FuncState)
--   ls  -- lexical state (table: LexState)
--   L  -- copy of the Lua state (table: lua_State)
--   bl  -- chain of current blocks (table: BlockCnt)
--   pc  -- next position to code (equivalent to 'ncode')
--   lasttarget   -- 'pc' of last 'jump target'
--   jpc  -- list of pending jumps to 'pc'
--   freereg  -- first free register
--   nk  -- number of elements in 'k'
--   np  -- number of elements in 'p'
--   nlocvars  -- number of elements in 'locvars'
--   nactvar  -- number of active local variables
--   upvalues[LUAI_MAXUPVALUES]  -- upvalues (table: upvaldesc)
--   actvar[LUAI_MAXVARS]  -- declared-variable stack
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- constants used by parser
-- * picks up duplicate values from luaX if required
------------------------------------------------------------------------
luaY.LUA_QS = luaX.LUA_QS or "'%s'"  -- (from luaconf.h)

luaY.SHRT_MAX = 32767 -- (from <limits.h>)
luaY.LUAI_MAXVARS = 200  -- (luaconf.h)
luaY.LUAI_MAXUPVALUES = 60  -- (luaconf.h)
luaY.MAX_INT = luaX.MAX_INT or 2147483645  -- (from llimits.h)
-- * INT_MAX-2 for 32-bit systems
luaY.LUAI_MAXCCALLS = 200  -- (from luaconf.h)

luaY.VARARG_HASARG = 1  -- (from lobject.h)
-- NOTE: HASARG_MASK is value-specific
luaY.HASARG_MASK = 2 -- this was added for a bitop in parlist()
luaY.VARARG_ISVARARG = 2
-- NOTE: there is some value-specific code that involves VARARG_NEEDSARG
luaY.VARARG_NEEDSARG = 4

luaY.LUA_MULTRET = -1  -- (lua.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- LUA_QL describes how error messages quote program elements.
-- CHANGE it if you want a different appearance. (from luaconf.h)
------------------------------------------------------------------------
function luaY:LUA_QL(x)
	return "'"..x.."'"
end

------------------------------------------------------------------------
-- this is a stripped-down luaM_growvector (from lmem.h) which is a
-- macro based on luaM_growaux (in lmem.c); all the following does is
-- reproduce the size limit checking logic of the original function
-- so that error behaviour is identical; all arguments preserved for
-- convenience, even those which are unused
-- * set the t field to nil, since this originally does a sizeof(t)
-- * size (originally a pointer) is never updated, their final values
--   are set by luaY:close_func(), so overall things should still work
------------------------------------------------------------------------
function luaY:growvector(L, v, nelems, size, t, limit, e)
	if nelems >= limit then
		error(e)  -- was luaG_runerror
	end
end

------------------------------------------------------------------------
-- initialize a new function prototype structure (from lfunc.c)
-- * used only in open_func()
------------------------------------------------------------------------
function luaY:newproto(L)
	local f = {} -- Proto
	-- luaC_link(L, obj2gco(f), LUA_TPROTO); /* GC */
	f.k = {}
	f.sizek = 0
	f.p = {}
	f.sizep = 0
	f.code = {}
	f.sizecode = 0
	f.sizelineinfo = 0
	f.sizeupvalues = 0
	f.nups = 0
	f.upvalues = {}
	f.numparams = 0
	f.is_vararg = 0
	f.maxstacksize = 0
	f.lineinfo = {}
	f.sizelocvars = 0
	f.locvars = {}
	f.lineDefined = 0
	f.lastlinedefined = 0
	f.source = nil
	return f
end

------------------------------------------------------------------------
-- converts an integer to a "floating point byte", represented as
-- (eeeeexxx), where the real value is (1xxx) * 2^(eeeee - 1) if
-- eeeee != 0 and (xxx) otherwise.
------------------------------------------------------------------------
function luaY:int2fb(x)
	local e = 0  -- exponent
	while x >= 16 do
		x = math.floor((x + 1) / 2)
		e = e + 1
	end
	if x < 8 then
		return x
	else
		return ((e + 1) * 8) + (x - 8)
	end
end

--[[--------------------------------------------------------------------
-- parser functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- true of the kind of expression produces multiple return values
------------------------------------------------------------------------
function luaY:hasmultret(k)
	return k == "VCALL" or k == "VVARARG"
end

------------------------------------------------------------------------
-- convenience function to access active local i, returns entry
------------------------------------------------------------------------
function luaY:getlocvar(fs, i)
	return fs.f.locvars[ fs.actvar[i] ]
end

------------------------------------------------------------------------
-- check a limit, string m provided as an error message
------------------------------------------------------------------------
function luaY:checklimit(fs, v, l, m)
	if v > l then self:errorlimit(fs, l, m) end
end

--[[--------------------------------------------------------------------
-- nodes for block list (list of active blocks)
-- struct BlockCnt:
--   previous  -- chain (table: BlockCnt)
--   breaklist  -- list of jumps out of this loop
--   nactvar  -- # active local variables outside the breakable structure
--   upval  -- true if some variable in the block is an upvalue (boolean)
--   isbreakable  -- true if 'block' is a loop (boolean)
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- prototypes for recursive non-terminal functions
------------------------------------------------------------------------
-- prototypes deleted; not required in Lua

------------------------------------------------------------------------
-- reanchor if last token is has a constant string, see close_func()
-- * used only in close_func()
------------------------------------------------------------------------
function luaY:anchor_token(ls)
	if ls.t.token == "TK_NAME" or ls.t.token == "TK_STRING" then
		-- not relevant to Lua implementation of parser
		-- local ts = ls.t.seminfo
		-- luaX_newstring(ls, getstr(ts), ts->tsv.len); /* C */
	end
end

------------------------------------------------------------------------
-- throws a syntax error if token expected is not there
------------------------------------------------------------------------
function luaY:error_expected(ls, token)
	luaX:syntaxerror(ls,
		string.format(self.LUA_QS.." expected", luaX:token2str(ls, token)))
end

------------------------------------------------------------------------
-- prepares error message for display, for limits exceeded
-- * used only in checklimit()
------------------------------------------------------------------------
function luaY:errorlimit(fs, limit, what)
	local msg = (fs.f.linedefined == 0) and
		string.format("main function has more than %d %s", limit, what) or
		string.format("function at line %d has more than %d %s",
			fs.f.linedefined, limit, what)
	luaX:lexerror(fs.ls, msg, 0)
end

------------------------------------------------------------------------
-- tests for a token, returns outcome
-- * return value changed to boolean
------------------------------------------------------------------------
function luaY:testnext(ls, c)
	if ls.t.token == c then
		luaX:next(ls)
		return true
	else
		return false
	end
end

------------------------------------------------------------------------
-- check for existence of a token, throws error if not found
------------------------------------------------------------------------
function luaY:check(ls, c)
	if ls.t.token ~= c then
		self:error_expected(ls, c)
	end
end

------------------------------------------------------------------------
-- verify existence of a token, then skip it
------------------------------------------------------------------------
function luaY:checknext(ls, c)
	self:check(ls, c)
	luaX:next(ls)
end

------------------------------------------------------------------------
-- throws error if condition not matched
------------------------------------------------------------------------
function luaY:check_condition(ls, c, msg)
	if not c then luaX:syntaxerror(ls, msg) end
end

------------------------------------------------------------------------
-- verifies token conditions are met or else throw error
------------------------------------------------------------------------
function luaY:check_match(ls, what, who, where)
	if not self:testnext(ls, what) then
		if where == ls.linenumber then
			self:error_expected(ls, what)
		else
			luaX:syntaxerror(ls, string.format(
				self.LUA_QS.." expected (to close "..self.LUA_QS.." at line %d)",
				luaX:token2str(ls, what), luaX:token2str(ls, who), where))
		end
	end
end

------------------------------------------------------------------------
-- expect that token is a name, return the name
------------------------------------------------------------------------
function luaY:str_checkname(ls)
	self:check(ls, "TK_NAME")
	local ts = ls.t.seminfo
	luaX:next(ls)
	return ts
end

------------------------------------------------------------------------
-- initialize a struct expdesc, expression description data structure
------------------------------------------------------------------------
function luaY:init_exp(e, k, i)
	e.f, e.t = luaK.NO_JUMP, luaK.NO_JUMP
	e.k = k
	e.info = i
end

------------------------------------------------------------------------
-- adds given string s in string pool, sets e as VK
------------------------------------------------------------------------
function luaY:codestring(ls, e, s)
	self:init_exp(e, "VK", luaK:stringK(ls.fs, s))
end

------------------------------------------------------------------------
-- consume a name token, adds it to string pool, sets e as VK
------------------------------------------------------------------------
function luaY:checkname(ls, e)
	self:codestring(ls, e, self:str_checkname(ls))
end

------------------------------------------------------------------------
-- creates struct entry for a local variable
-- * used only in new_localvar()
------------------------------------------------------------------------
function luaY:registerlocalvar(ls, varname)
	local fs = ls.fs
	local f = fs.f
	self:growvector(ls.L, f.locvars, fs.nlocvars, f.sizelocvars,
		nil, self.SHRT_MAX, "too many local variables")
	-- loop to initialize empty f.locvar positions not required
	f.locvars[fs.nlocvars] = {} -- LocVar
	f.locvars[fs.nlocvars].varname = varname
	-- luaC_objbarrier(ls.L, f, varname) /* GC */
	local nlocvars = fs.nlocvars
	fs.nlocvars = fs.nlocvars + 1
	return nlocvars
end

------------------------------------------------------------------------
-- creates a new local variable given a name and an offset from nactvar
-- * used in fornum(), forlist(), parlist(), body()
------------------------------------------------------------------------
function luaY:new_localvarliteral(ls, v, n)
	self:new_localvar(ls, v, n)
end

------------------------------------------------------------------------
-- register a local variable, set in active variable list
------------------------------------------------------------------------
function luaY:new_localvar(ls, name, n)
	local fs = ls.fs
	self:checklimit(fs, fs.nactvar + n + 1, self.LUAI_MAXVARS, "local variables")
	fs.actvar[fs.nactvar + n] = self:registerlocalvar(ls, name)
end

------------------------------------------------------------------------
-- adds nvars number of new local variables, set debug information
------------------------------------------------------------------------
function luaY:adjustlocalvars(ls, nvars)
	local fs = ls.fs
	fs.nactvar = fs.nactvar + nvars
	for i = nvars, 1, -1 do
		self:getlocvar(fs, fs.nactvar - i).startpc = fs.pc
	end
end

------------------------------------------------------------------------
-- removes a number of locals, set debug information
------------------------------------------------------------------------
function luaY:removevars(ls, tolevel)
	local fs = ls.fs
	while fs.nactvar > tolevel do
		fs.nactvar = fs.nactvar - 1
		self:getlocvar(fs, fs.nactvar).endpc = fs.pc
	end
end

------------------------------------------------------------------------
-- returns an existing upvalue index based on the given name, or
-- creates a new upvalue struct entry and returns the new index
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:indexupvalue(fs, name, v)
	local f = fs.f
	for i = 0, f.nups - 1 do
		if fs.upvalues[i].k == v.k and fs.upvalues[i].info == v.info then
			lua_assert(f.upvalues[i] == name)
			return i
		end
	end
	-- new one
	self:checklimit(fs, f.nups + 1, self.LUAI_MAXUPVALUES, "upvalues")
	self:growvector(fs.L, f.upvalues, f.nups, f.sizeupvalues,
		nil, self.MAX_INT, "")
	-- loop to initialize empty f.upvalues positions not required
	f.upvalues[f.nups] = name
	-- luaC_objbarrier(fs->L, f, name); /* GC */
	lua_assert(v.k == "VLOCAL" or v.k == "VUPVAL")
	-- this is a partial copy; only k & info fields used
	fs.upvalues[f.nups] = { k = v.k, info = v.info }
	local nups = f.nups
	f.nups = f.nups + 1
	return nups
end

------------------------------------------------------------------------
-- search the local variable namespace of the given fs for a match
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:searchvar(fs, n)
	for i = fs.nactvar - 1, 0, -1 do
		if n == self:getlocvar(fs, i).varname then
			return i
		end
	end
	return -1  -- not found
end

------------------------------------------------------------------------
-- * mark upvalue flags in function states up to a given level
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:markupval(fs, level)
	local bl = fs.bl
	while bl and bl.nactvar > level do bl = bl.previous end
	if bl then bl.upval = true end
end

------------------------------------------------------------------------
-- handle locals, globals and upvalues and related processing
-- * search mechanism is recursive, calls itself to search parents
-- * used only in singlevar()
------------------------------------------------------------------------
function luaY:singlevaraux(fs, n, var, base)
	if fs == nil then  -- no more levels?
		self:init_exp(var, "VGLOBAL", luaP.NO_REG)  -- default is global variable
		return "VGLOBAL"
	else
		local v = self:searchvar(fs, n)  -- look up at current level
		if v >= 0 then
			self:init_exp(var, "VLOCAL", v)
			if base == 0 then
				self:markupval(fs, v)  -- local will be used as an upval
			end
			return "VLOCAL"
		else  -- not found at current level; try upper one
			if self:singlevaraux(fs.prev, n, var, 0) == "VGLOBAL" then
				return "VGLOBAL"
			end
			var.info = self:indexupvalue(fs, n, var)  -- else was LOCAL or UPVAL
			var.k = "VUPVAL"  -- upvalue in this level
			return "VUPVAL"
		end--if v
	end--if fs
end

------------------------------------------------------------------------
-- consume a name token, creates a variable (global|local|upvalue)
-- * used in prefixexp(), funcname()
------------------------------------------------------------------------
function luaY:singlevar(ls, var)
	local varname = self:str_checkname(ls)
	local fs = ls.fs
	if self:singlevaraux(fs, varname, var, 1) == "VGLOBAL" then
		var.info = luaK:stringK(fs, varname)  -- info points to global name
	end
end

------------------------------------------------------------------------
-- adjust RHS to match LHS in an assignment
-- * used in assignment(), forlist(), localstat()
------------------------------------------------------------------------
function luaY:adjust_assign(ls, nvars, nexps, e)
	local fs = ls.fs
	local extra = nvars - nexps
	if self:hasmultret(e.k) then
		extra = extra + 1  -- includes call itself
		if extra <= 0 then extra = 0 end
		luaK:setreturns(fs, e, extra)  -- last exp. provides the difference
		if extra > 1 then luaK:reserveregs(fs, extra - 1) end
	else
		if e.k ~= "VVOID" then luaK:exp2nextreg(fs, e) end  -- close last expression
		if extra > 0 then
			local reg = fs.freereg
			luaK:reserveregs(fs, extra)
			luaK:_nil(fs, reg, extra)
		end
	end
end

------------------------------------------------------------------------
-- tracks and limits parsing depth, assert check at end of parsing
------------------------------------------------------------------------
function luaY:enterlevel(ls)
	ls.L.nCcalls = ls.L.nCcalls + 1
	if ls.L.nCcalls > self.LUAI_MAXCCALLS then
		luaX:lexerror(ls, "chunk has too many syntax levels", 0)
	end
end

------------------------------------------------------------------------
-- tracks parsing depth, a pair with luaY:enterlevel()
------------------------------------------------------------------------
function luaY:leavelevel(ls)
	ls.L.nCcalls = ls.L.nCcalls - 1
end

------------------------------------------------------------------------
-- enters a code unit, initializes elements
------------------------------------------------------------------------
function luaY:enterblock(fs, bl, isbreakable)
	bl.breaklist = luaK.NO_JUMP
	bl.isbreakable = isbreakable
	bl.nactvar = fs.nactvar
	bl.upval = false
	bl.previous = fs.bl
	fs.bl = bl
	lua_assert(fs.freereg == fs.nactvar)
end

------------------------------------------------------------------------
-- leaves a code unit, close any upvalues
------------------------------------------------------------------------
function luaY:leaveblock(fs)
	local bl = fs.bl
	fs.bl = bl.previous
	self:removevars(fs.ls, bl.nactvar)
	if bl.upval then
		luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
	end
	-- a block either controls scope or breaks (never both)
	lua_assert(not bl.isbreakable or not bl.upval)
	lua_assert(bl.nactvar == fs.nactvar)
	fs.freereg = fs.nactvar  -- free registers
	luaK:patchtohere(fs, bl.breaklist)
end

------------------------------------------------------------------------
-- implement the instantiation of a function prototype, append list of
-- upvalues after the instantiation instruction
-- * used only in body()
------------------------------------------------------------------------
function luaY:pushclosure(ls, func, v)
	local fs = ls.fs
	local f = fs.f
	self:growvector(ls.L, f.p, fs.np, f.sizep, nil,
		luaP.MAXARG_Bx, "constant table overflow")
	-- loop to initialize empty f.p positions not required
	f.p[fs.np] = func.f
	fs.np = fs.np + 1
	-- luaC_objbarrier(ls->L, f, func->f); /* C */
	self:init_exp(v, "VRELOCABLE", luaK:codeABx(fs, "OP_CLOSURE", 0, fs.np - 1))
	for i = 0, func.f.nups - 1 do
		local o = (func.upvalues[i].k == "VLOCAL") and "OP_MOVE" or "OP_GETUPVAL"
		luaK:codeABC(fs, o, 0, func.upvalues[i].info, 0)
	end
end

------------------------------------------------------------------------
-- opening of a function
------------------------------------------------------------------------
function luaY:open_func(ls, fs)
	local L = ls.L
	local f = self:newproto(ls.L)
	fs.f = f
	fs.prev = ls.fs  -- linked list of funcstates
	fs.ls = ls
	fs.L = L
	ls.fs = fs
	fs.pc = 0
	fs.lasttarget = -1
	fs.jpc = luaK.NO_JUMP
	fs.freereg = 0
	fs.nk = 0
	fs.np = 0
	fs.nlocvars = 0
	fs.nactvar = 0
	fs.bl = nil
	f.source = ls.source
	f.maxstacksize = 2  -- registers 0/1 are always valid
	fs.h = {}  -- constant table; was luaH_new call
	-- anchor table of constants and prototype (to avoid being collected)
	-- sethvalue2s(L, L->top, fs->h); incr_top(L); /* C */
	-- setptvalue2s(L, L->top, f); incr_top(L);
end

------------------------------------------------------------------------
-- closing of a function
------------------------------------------------------------------------
function luaY:close_func(ls)
	local L = ls.L
	local fs = ls.fs
	local f = fs.f
	self:removevars(ls, 0)
	luaK:ret(fs, 0, 0)  -- final return
	-- luaM_reallocvector deleted for f->code, f->lineinfo, f->k, f->p,
	-- f->locvars, f->upvalues; not required for Lua table arrays
	f.sizecode = fs.pc
	f.sizelineinfo = fs.pc
	f.sizek = fs.nk
	f.sizep = fs.np
	f.sizelocvars = fs.nlocvars
	f.sizeupvalues = f.nups
	--lua_assert(luaG_checkcode(f))  -- currently not implemented
	lua_assert(fs.bl == nil)
	ls.fs = fs.prev
	-- the following is not required for this implementation; kept here
	-- for completeness
	-- L->top -= 2;  /* remove table and prototype from the stack */
	-- last token read was anchored in defunct function; must reanchor it
	if fs then self:anchor_token(ls) end
end

------------------------------------------------------------------------
-- parser initialization function
-- * note additional sub-tables needed for LexState, FuncState
------------------------------------------------------------------------
function luaY:parser(L, z, buff, name)
	local lexstate = {}  -- LexState
	lexstate.t = {}
	lexstate.lookahead = {}
	local funcstate = {}  -- FuncState
	funcstate.upvalues = {}
	funcstate.actvar = {}
	-- the following nCcalls initialization added for convenience
	L.nCcalls = 0
	lexstate.buff = buff
	luaX:setinput(L, lexstate, z, name)
	self:open_func(lexstate, funcstate)
	funcstate.f.is_vararg = self.VARARG_ISVARARG  -- main func. is always vararg
	luaX:next(lexstate)  -- read first token
	self:chunk(lexstate)
	self:check(lexstate, "TK_EOS")
	self:close_func(lexstate)
	lua_assert(funcstate.prev == nil)
	lua_assert(funcstate.f.nups == 0)
	lua_assert(lexstate.fs == nil)
	return funcstate.f
end

--[[--------------------------------------------------------------------
-- GRAMMAR RULES
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a function name suffix, for function call specifications
-- * used in primaryexp(), funcname()
------------------------------------------------------------------------
function luaY:field(ls, v)
	-- field -> ['.' | ':'] NAME
	local fs = ls.fs
	local key = {}  -- expdesc
	luaK:exp2anyreg(fs, v)
	luaX:next(ls)  -- skip the dot or colon
	self:checkname(ls, key)
	luaK:indexed(fs, v, key)
end

------------------------------------------------------------------------
-- parse a table indexing suffix, for constructors, expressions
-- * used in recfield(), primaryexp()
------------------------------------------------------------------------
function luaY:yindex(ls, v)
	-- index -> '[' expr ']'
	luaX:next(ls)  -- skip the '['
	self:expr(ls, v)
	luaK:exp2val(ls.fs, v)
	self:checknext(ls, "]")
end

--[[--------------------------------------------------------------------
-- Rules for Constructors
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct ConsControl:
--   v  -- last list item read (table: struct expdesc)
--   t  -- table descriptor (table: struct expdesc)
--   nh  -- total number of 'record' elements
--   na  -- total number of array elements
--   tostore  -- number of array elements pending to be stored
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a table record (hash) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:recfield(ls, cc)
	-- recfield -> (NAME | '['exp1']') = exp1
	local fs = ls.fs
	local reg = ls.fs.freereg
	local key, val = {}, {}  -- expdesc
	if ls.t.token == "TK_NAME" then
		self:checklimit(fs, cc.nh, self.MAX_INT, "items in a constructor")
		self:checkname(ls, key)
	else  -- ls->t.token == '['
		self:yindex(ls, key)
	end
	cc.nh = cc.nh + 1
	self:checknext(ls, "=")
	local rkkey = luaK:exp2RK(fs, key)
	self:expr(ls, val)
	luaK:codeABC(fs, "OP_SETTABLE", cc.t.info, rkkey, luaK:exp2RK(fs, val))
	fs.freereg = reg  -- free registers
end

------------------------------------------------------------------------
-- emit a set list instruction if enough elements (LFIELDS_PER_FLUSH)
-- * used in constructor()
------------------------------------------------------------------------
function luaY:closelistfield(fs, cc)
	if cc.v.k == "VVOID" then return end  -- there is no list item
	luaK:exp2nextreg(fs, cc.v)
	cc.v.k = "VVOID"
	if cc.tostore == luaP.LFIELDS_PER_FLUSH then
		luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)  -- flush
		cc.tostore = 0  -- no more items pending
	end
end

------------------------------------------------------------------------
-- emit a set list instruction at the end of parsing list constructor
-- * used in constructor()
------------------------------------------------------------------------
function luaY:lastlistfield(fs, cc)
	if cc.tostore == 0 then return end
	if self:hasmultret(cc.v.k) then
		luaK:setmultret(fs, cc.v)
		luaK:setlist(fs, cc.t.info, cc.na, self.LUA_MULTRET)
		cc.na = cc.na - 1  -- do not count last expression (unknown number of elements)
	else
		if cc.v.k ~= "VVOID" then
			luaK:exp2nextreg(fs, cc.v)
		end
		luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)
	end
end

------------------------------------------------------------------------
-- parse a table list (array) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:listfield(ls, cc)
	self:expr(ls, cc.v)
	self:checklimit(ls.fs, cc.na, self.MAX_INT, "items in a constructor")
	cc.na = cc.na + 1
	cc.tostore = cc.tostore + 1
end

------------------------------------------------------------------------
-- parse a table constructor
-- * used in funcargs(), simpleexp()
------------------------------------------------------------------------
function luaY:constructor(ls, t)
	-- constructor -> '{' [ field { fieldsep field } [ fieldsep ] ] '}'
	-- field -> recfield | listfield
	-- fieldsep -> ',' | ';'
	local fs = ls.fs
	local line = ls.linenumber
	local pc = luaK:codeABC(fs, "OP_NEWTABLE", 0, 0, 0)
	local cc = {}  -- ConsControl
	cc.v = {}
	cc.na, cc.nh, cc.tostore = 0, 0, 0
	cc.t = t
	self:init_exp(t, "VRELOCABLE", pc)
	self:init_exp(cc.v, "VVOID", 0)  -- no value (yet)
	luaK:exp2nextreg(ls.fs, t)  -- fix it at stack top (for gc)
	self:checknext(ls, "{")
	repeat
		lua_assert(cc.v.k == "VVOID" or cc.tostore > 0)
		if ls.t.token == "}" then break end
		self:closelistfield(fs, cc)
		local c = ls.t.token

		if c == "TK_NAME" then  -- may be listfields or recfields
			luaX:lookahead(ls)
			if ls.lookahead.token ~= "=" then  -- expression?
				self:listfield(ls, cc)
			else
				self:recfield(ls, cc)
			end
		elseif c == "[" then  -- constructor_item -> recfield
			self:recfield(ls, cc)
		else  -- constructor_part -> listfield
			self:listfield(ls, cc)
		end
	until not self:testnext(ls, ",") and not self:testnext(ls, ";")
	self:check_match(ls, "}", "{", line)
	self:lastlistfield(fs, cc)
	luaP:SETARG_B(fs.f.code[pc], self:int2fb(cc.na)) -- set initial array size
	luaP:SETARG_C(fs.f.code[pc], self:int2fb(cc.nh)) -- set initial table size
end

-- }======================================================================

------------------------------------------------------------------------
-- parse the arguments (parameters) of a function declaration
-- * used in body()
------------------------------------------------------------------------
function luaY:parlist(ls)
	-- parlist -> [ param { ',' param } ]
	local fs = ls.fs
	local f = fs.f
	local nparams = 0
	f.is_vararg = 0
	if ls.t.token ~= ")" then  -- is 'parlist' not empty?
		repeat
			local c = ls.t.token
			if c == "TK_NAME" then  -- param -> NAME
				self:new_localvar(ls, self:str_checkname(ls), nparams)
				nparams = nparams + 1
			elseif c == "TK_DOTS" then  -- param -> `...'
				luaX:next(ls)
				-- [[
				-- #if defined(LUA_COMPAT_VARARG)
				-- use `arg' as default name
				self:new_localvarliteral(ls, "arg", nparams)
				nparams = nparams + 1
				f.is_vararg = self.VARARG_HASARG + self.VARARG_NEEDSARG
				-- #endif
				--]]
				f.is_vararg = f.is_vararg + self.VARARG_ISVARARG
			else
				luaX:syntaxerror(ls, "<name> or "..self:LUA_QL("...").." expected")
			end
		until f.is_vararg ~= 0 or not self:testnext(ls, ",")
	end--if
	self:adjustlocalvars(ls, nparams)
	-- NOTE: the following works only when HASARG_MASK is 2!
	f.numparams = fs.nactvar - (f.is_vararg % self.HASARG_MASK)
	luaK:reserveregs(fs, fs.nactvar)  -- reserve register for parameters
end

------------------------------------------------------------------------
-- parse function declaration body
-- * used in simpleexp(), localfunc(), funcstat()
------------------------------------------------------------------------
function luaY:body(ls, e, needself, line)
	-- body ->  '(' parlist ')' chunk END
	local new_fs = {}  -- FuncState
	new_fs.upvalues = {}
	new_fs.actvar = {}
	self:open_func(ls, new_fs)
	new_fs.f.lineDefined = line
	self:checknext(ls, "(")
	if needself then
		self:new_localvarliteral(ls, "self", 0)
		self:adjustlocalvars(ls, 1)
	end
	self:parlist(ls)
	self:checknext(ls, ")")
	self:chunk(ls)
	new_fs.f.lastlinedefined = ls.linenumber
	self:check_match(ls, "TK_END", "TK_FUNCTION", line)
	self:close_func(ls)
	self:pushclosure(ls, new_fs, e)
end

------------------------------------------------------------------------
-- parse a list of comma-separated expressions
-- * used is multiple locations
------------------------------------------------------------------------
function luaY:explist1(ls, v)
	-- explist1 -> expr { ',' expr }
	local n = 1  -- at least one expression
	self:expr(ls, v)
	while self:testnext(ls, ",") do
		luaK:exp2nextreg(ls.fs, v)
		self:expr(ls, v)
		n = n + 1
	end
	return n
end

------------------------------------------------------------------------
-- parse the parameters of a function call
-- * contrast with parlist(), used in function declarations
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:funcargs(ls, f)
	local fs = ls.fs
	local args = {}  -- expdesc
	local nparams
	local line = ls.linenumber
	local c = ls.t.token
	if c == "(" then  -- funcargs -> '(' [ explist1 ] ')'
		if line ~= ls.lastline then
			luaX:syntaxerror(ls, "ambiguous syntax (function call x new statement)")
		end
		luaX:next(ls)
		if ls.t.token == ")" then  -- arg list is empty?
			args.k = "VVOID"
		else
			self:explist1(ls, args)
			luaK:setmultret(fs, args)
		end
		self:check_match(ls, ")", "(", line)
	elseif c == "{" then  -- funcargs -> constructor
		self:constructor(ls, args)
	elseif c == "TK_STRING" then  -- funcargs -> STRING
		self:codestring(ls, args, ls.t.seminfo)
		luaX:next(ls)  -- must use 'seminfo' before 'next'
	else
		luaX:syntaxerror(ls, "function arguments expected")
		return
	end
	lua_assert(f.k == "VNONRELOC")
	local base = f.info  -- base register for call
	if self:hasmultret(args.k) then
		nparams = self.LUA_MULTRET  -- open call
	else
		if args.k ~= "VVOID" then
			luaK:exp2nextreg(fs, args)  -- close last argument
		end
		nparams = fs.freereg - (base + 1)
	end
	self:init_exp(f, "VCALL", luaK:codeABC(fs, "OP_CALL", base, nparams + 1, 2))
	luaK:fixline(fs, line)
	fs.freereg = base + 1  -- call remove function and arguments and leaves
	-- (unless changed) one result
end

--[[--------------------------------------------------------------------
-- Expression parsing
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parses an expression in parentheses or a single variable
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:prefixexp(ls, v)
	-- prefixexp -> NAME | '(' expr ')'
	local c = ls.t.token
	if c == "(" then
		local line = ls.linenumber
		luaX:next(ls)
		self:expr(ls, v)
		self:check_match(ls, ")", "(", line)
		luaK:dischargevars(ls.fs, v)
	elseif c == "TK_NAME" then
		self:singlevar(ls, v)
	else
		luaX:syntaxerror(ls, "unexpected symbol")
	end--if c
	return
end

------------------------------------------------------------------------
-- parses a prefixexp (an expression in parentheses or a single variable)
-- or a function call specification
-- * used in simpleexp(), assignment(), exprstat()
------------------------------------------------------------------------
function luaY:primaryexp(ls, v)
	-- primaryexp ->
	--    prefixexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }
	local fs = ls.fs
	self:prefixexp(ls, v)
	while true do
		local c = ls.t.token
		if c == "." then  -- field
			self:field(ls, v)
		elseif c == "[" then  -- '[' exp1 ']'
			local key = {}  -- expdesc
			luaK:exp2anyreg(fs, v)
			self:yindex(ls, key)
			luaK:indexed(fs, v, key)
		elseif c == ":" then  -- ':' NAME funcargs
			local key = {}  -- expdesc
			luaX:next(ls)
			self:checkname(ls, key)
			luaK:_self(fs, v, key)
			self:funcargs(ls, v)
		elseif c == "(" or c == "TK_STRING" or c == "{" then  -- funcargs
			luaK:exp2nextreg(fs, v)
			self:funcargs(ls, v)
		else
			return
		end--if c
	end--while
end

------------------------------------------------------------------------
-- parses general expression types, constants handled here
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:simpleexp(ls, v)
	-- simpleexp -> NUMBER | STRING | NIL | TRUE | FALSE | ... |
	--              constructor | FUNCTION body | primaryexp
	local c = ls.t.token
	if c == "TK_NUMBER" then
		self:init_exp(v, "VKNUM", 0)
		v.nval = ls.t.seminfo
	elseif c == "TK_STRING" then
		self:codestring(ls, v, ls.t.seminfo)
	elseif c == "TK_NIL" then
		self:init_exp(v, "VNIL", 0)
	elseif c == "TK_TRUE" then
		self:init_exp(v, "VTRUE", 0)
	elseif c == "TK_FALSE" then
		self:init_exp(v, "VFALSE", 0)
	elseif c == "TK_DOTS" then  -- vararg
		local fs = ls.fs
		self:check_condition(ls, fs.f.is_vararg ~= 0,
			"cannot use "..self:LUA_QL("...").." outside a vararg function");
		-- NOTE: the following substitutes for a bitop, but is value-specific
		local is_vararg = fs.f.is_vararg
		if is_vararg >= self.VARARG_NEEDSARG then
			fs.f.is_vararg = is_vararg - self.VARARG_NEEDSARG  -- don't need 'arg'
		end
		self:init_exp(v, "VVARARG", luaK:codeABC(fs, "OP_VARARG", 0, 1, 0))
	elseif c == "{" then  -- constructor
		self:constructor(ls, v)
		return
	elseif c == "TK_FUNCTION" then
		luaX:next(ls)
		self:body(ls, v, false, ls.linenumber)
		return
	else
		self:primaryexp(ls, v)
		return
	end--if c
	luaX:next(ls)
end

------------------------------------------------------------------------
-- Translates unary operators tokens if found, otherwise returns
-- OPR_NOUNOPR. getunopr() and getbinopr() are used in subexpr().
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:getunopr(op)
	if op == "TK_NOT" then
		return "OPR_NOT"
	elseif op == "-" then
		return "OPR_MINUS"
	elseif op == "#" then
		return "OPR_LEN"
	else
		return "OPR_NOUNOPR"
	end
end

------------------------------------------------------------------------
-- Translates binary operator tokens if found, otherwise returns
-- OPR_NOBINOPR. Code generation uses OPR_* style tokens.
-- * used in subexpr()
------------------------------------------------------------------------
luaY.getbinopr_table = {
	["+"] = "OPR_ADD",
	["-"] = "OPR_SUB",
	["*"] = "OPR_MUL",
	["/"] = "OPR_DIV",
	["%"] = "OPR_MOD",
	["^"] = "OPR_POW",
	["TK_CONCAT"] = "OPR_CONCAT",
	["TK_NE"] = "OPR_NE",
	["TK_EQ"] = "OPR_EQ",
	["<"] = "OPR_LT",
	["TK_LE"] = "OPR_LE",
	[">"] = "OPR_GT",
	["TK_GE"] = "OPR_GE",
	["TK_AND"] = "OPR_AND",
	["TK_OR"] = "OPR_OR",
}
function luaY:getbinopr(op)
	local opr = self.getbinopr_table[op]
	if opr then return opr else return "OPR_NOBINOPR" end
end

------------------------------------------------------------------------
-- the following priority table consists of pairs of left/right values
-- for binary operators (was a static const struct); grep for ORDER OPR
-- * the following struct is replaced:
--   static const struct {
--     lu_byte left;  /* left priority for each binary operator */
--     lu_byte right; /* right priority */
--   } priority[] = {  /* ORDER OPR */
------------------------------------------------------------------------
luaY.priority = {
	{6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7}, -- `+' `-' `/' `%'
	{10, 9}, {5, 4},                 -- power and concat (right associative)
	{3, 3}, {3, 3},                  -- equality
	{3, 3}, {3, 3}, {3, 3}, {3, 3},  -- order
	{2, 2}, {1, 1}                   -- logical (and/or)
}

luaY.UNARY_PRIORITY = 8  -- priority for unary operators

------------------------------------------------------------------------
-- Parse subexpressions. Includes handling of unary operators and binary
-- operators. A subexpr is given the rhs priority level of the operator
-- immediately left of it, if any (limit is -1 if none,) and if a binop
-- is found, limit is compared with the lhs priority level of the binop
-- in order to determine which executes first.
------------------------------------------------------------------------

------------------------------------------------------------------------
-- subexpr -> (simpleexp | unop subexpr) { binop subexpr }
-- where 'binop' is any binary operator with a priority higher than 'limit'
-- * for priority lookups with self.priority[], 1=left and 2=right
-- * recursively called
-- * used in expr()
------------------------------------------------------------------------
function luaY:subexpr(ls, v, limit)
	self:enterlevel(ls)
	local uop = self:getunopr(ls.t.token)
	if uop ~= "OPR_NOUNOPR" then
		luaX:next(ls)
		self:subexpr(ls, v, self.UNARY_PRIORITY)
		luaK:prefix(ls.fs, uop, v)
	else
		self:simpleexp(ls, v)
	end
	-- expand while operators have priorities higher than 'limit'
	local op = self:getbinopr(ls.t.token)
	while op ~= "OPR_NOBINOPR" and self.priority[luaK.BinOpr[op] + 1][1] > limit do
		local v2 = {}  -- expdesc
		luaX:next(ls)
		luaK:infix(ls.fs, op, v)
		-- read sub-expression with higher priority
		local nextop = self:subexpr(ls, v2, self.priority[luaK.BinOpr[op] + 1][2])
		luaK:posfix(ls.fs, op, v, v2)
		op = nextop
	end
	self:leavelevel(ls)
	return op  -- return first untreated operator
end

------------------------------------------------------------------------
-- Expression parsing starts here. Function subexpr is entered with the
-- left operator (which is non-existent) priority of -1, which is lower
-- than all actual operators. Expr information is returned in parm v.
-- * used in multiple locations
------------------------------------------------------------------------
function luaY:expr(ls, v)
	self:subexpr(ls, v, 0)
end

-- }====================================================================

--[[--------------------------------------------------------------------
-- Rules for Statements
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks next token, used as a look-ahead
-- * returns boolean instead of 0|1
-- * used in retstat(), chunk()
------------------------------------------------------------------------
function luaY:block_follow(token)
	if token == "TK_ELSE" or token == "TK_ELSEIF" or token == "TK_END"
		or token == "TK_UNTIL" or token == "TK_EOS" then
		return true
	else
		return false
	end
end

------------------------------------------------------------------------
-- parse a code block or unit
-- * used in multiple functions
------------------------------------------------------------------------
function luaY:block(ls)
	-- block -> chunk
	local fs = ls.fs
	local bl = {}  -- BlockCnt
	self:enterblock(fs, bl, false)
	self:chunk(ls)
	lua_assert(bl.breaklist == luaK.NO_JUMP)
	self:leaveblock(fs)
end

------------------------------------------------------------------------
-- structure to chain all variables in the left-hand side of an
-- assignment
-- struct LHS_assign:
--   prev  -- (table: struct LHS_assign)
--   v  -- variable (global, local, upvalue, or indexed) (table: expdesc)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- check whether, in an assignment to a local variable, the local variable
-- is needed in a previous assignment (to a table). If so, save original
-- local value in a safe place and use this safe copy in the previous
-- assignment.
-- * used in assignment()
------------------------------------------------------------------------
function luaY:check_conflict(ls, lh, v)
	local fs = ls.fs
	local extra = fs.freereg  -- eventual position to save local variable
	local conflict = false
	while lh do
		if lh.v.k == "VINDEXED" then
			if lh.v.info == v.info then  -- conflict?
				conflict = true
				lh.v.info = extra  -- previous assignment will use safe copy
			end
			if lh.v.aux == v.info then  -- conflict?
				conflict = true
				lh.v.aux = extra  -- previous assignment will use safe copy
			end
		end
		lh = lh.prev
	end
	if conflict then
		luaK:codeABC(fs, "OP_MOVE", fs.freereg, v.info, 0)  -- make copy
		luaK:reserveregs(fs, 1)
	end
end

------------------------------------------------------------------------
-- parse a variable assignment sequence
-- * recursively called
-- * used in exprstat()
------------------------------------------------------------------------
function luaY:assignment(ls, lh, nvars)
	local e = {}  -- expdesc
	-- test was: VLOCAL <= lh->v.k && lh->v.k <= VINDEXED
	local c = lh.v.k
	self:check_condition(ls, c == "VLOCAL" or c == "VUPVAL" or c == "VGLOBAL"
		or c == "VINDEXED", "syntax error")
	if self:testnext(ls, ",") then  -- assignment -> ',' primaryexp assignment
		local nv = {}  -- LHS_assign
		nv.v = {}
		nv.prev = lh
		self:primaryexp(ls, nv.v)
		if nv.v.k == "VLOCAL" then
			self:check_conflict(ls, lh, nv.v)
		end
		self:checklimit(ls.fs, nvars, self.LUAI_MAXCCALLS - ls.L.nCcalls,
			"variables in assignment")
		self:assignment(ls, nv, nvars + 1)
	else  -- assignment -> '=' explist1
		self:checknext(ls, "=")
		local nexps = self:explist1(ls, e)
		if nexps ~= nvars then
			self:adjust_assign(ls, nvars, nexps, e)
			if nexps > nvars then
				ls.fs.freereg = ls.fs.freereg - (nexps - nvars)  -- remove extra values
			end
		else
			luaK:setoneret(ls.fs, e)  -- close last expression
			luaK:storevar(ls.fs, lh.v, e)
			return  -- avoid default
		end
	end
	self:init_exp(e, "VNONRELOC", ls.fs.freereg - 1)  -- default assignment
	luaK:storevar(ls.fs, lh.v, e)
end

------------------------------------------------------------------------
-- parse condition in a repeat statement or an if control structure
-- * used in repeatstat(), test_then_block()
------------------------------------------------------------------------
function luaY:cond(ls)
	-- cond -> exp
	local v = {}  -- expdesc
	self:expr(ls, v)  -- read condition
	if v.k == "VNIL" then v.k = "VFALSE" end  -- 'falses' are all equal here
	luaK:goiftrue(ls.fs, v)
	return v.f
end

------------------------------------------------------------------------
-- parse a break statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:breakstat(ls)
	-- stat -> BREAK
	local fs = ls.fs
	local bl = fs.bl
	local upval = false
	while bl and not bl.isbreakable do
		if bl.upval then upval = true end
		bl = bl.previous
	end
	if not bl then
		luaX:syntaxerror(ls, "no loop to break")
	end
	if upval then
		luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
	end
	bl.breaklist = luaK:concat(fs, bl.breaklist, luaK:jump(fs))
end

------------------------------------------------------------------------
-- parse a while-do control structure, body processed by block()
-- * with dynamic array sizes, MAXEXPWHILE + EXTRAEXP limits imposed by
--   the function's implementation can be removed
-- * used in statements()
------------------------------------------------------------------------
function luaY:whilestat(ls, line)
	-- whilestat -> WHILE cond DO block END
	local fs = ls.fs
	local bl = {}  -- BlockCnt
	luaX:next(ls)  -- skip WHILE
	local whileinit = luaK:getlabel(fs)
	local condexit = self:cond(ls)
	self:enterblock(fs, bl, true)
	self:checknext(ls, "TK_DO")
	self:block(ls)
	luaK:patchlist(fs, luaK:jump(fs), whileinit)
	self:check_match(ls, "TK_END", "TK_WHILE", line)
	self:leaveblock(fs)
	luaK:patchtohere(fs, condexit)  -- false conditions finish the loop
end

------------------------------------------------------------------------
-- parse a repeat-until control structure, body parsed by chunk()
-- * used in statements()
------------------------------------------------------------------------
function luaY:repeatstat(ls, line)
	-- repeatstat -> REPEAT block UNTIL cond
	local fs = ls.fs
	local repeat_init = luaK:getlabel(fs)
	local bl1, bl2 = {}, {}  -- BlockCnt
	self:enterblock(fs, bl1, true)  -- loop block
	self:enterblock(fs, bl2, false)  -- scope block
	luaX:next(ls)  -- skip REPEAT
	self:chunk(ls)
	self:check_match(ls, "TK_UNTIL", "TK_REPEAT", line)
	local condexit = self:cond(ls)  -- read condition (inside scope block)
	if not bl2.upval then  -- no upvalues?
		self:leaveblock(fs)  -- finish scope
		luaK:patchlist(ls.fs, condexit, repeat_init)  -- close the loop
	else  -- complete semantics when there are upvalues
		self:breakstat(ls)  -- if condition then break
		luaK:patchtohere(ls.fs, condexit)  -- else...
		self:leaveblock(fs)  -- finish scope...
		luaK:patchlist(ls.fs, luaK:jump(fs), repeat_init)  -- and repeat
	end
	self:leaveblock(fs)  -- finish loop
end

------------------------------------------------------------------------
-- parse the single expressions needed in numerical for loops
-- * used in fornum()
------------------------------------------------------------------------
function luaY:exp1(ls)
	local e = {}  -- expdesc
	self:expr(ls, e)
	local k = e.k
	luaK:exp2nextreg(ls.fs, e)
	return k
end

------------------------------------------------------------------------
-- parse a for loop body for both versions of the for loop
-- * used in fornum(), forlist()
------------------------------------------------------------------------
function luaY:forbody(ls, base, line, nvars, isnum)
	-- forbody -> DO block
	local bl = {}  -- BlockCnt
	local fs = ls.fs
	self:adjustlocalvars(ls, 3)  -- control variables
	self:checknext(ls, "TK_DO")
	local prep = isnum and luaK:codeAsBx(fs, "OP_FORPREP", base, luaK.NO_JUMP)
		or luaK:jump(fs)
	self:enterblock(fs, bl, false)  -- scope for declared variables
	self:adjustlocalvars(ls, nvars)
	luaK:reserveregs(fs, nvars)
	self:block(ls)
	self:leaveblock(fs)  -- end of scope for declared variables
	luaK:patchtohere(fs, prep)
	local endfor = isnum and luaK:codeAsBx(fs, "OP_FORLOOP", base, luaK.NO_JUMP)
		or luaK:codeABC(fs, "OP_TFORLOOP", base, 0, nvars)
	luaK:fixline(fs, line)  -- pretend that `OP_FOR' starts the loop
	luaK:patchlist(fs, isnum and endfor or luaK:jump(fs), prep + 1)
end

------------------------------------------------------------------------
-- parse a numerical for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:fornum(ls, varname, line)
	-- fornum -> NAME = exp1,exp1[,exp1] forbody
	local fs = ls.fs
	local base = fs.freereg
	self:new_localvarliteral(ls, "(for index)", 0)
	self:new_localvarliteral(ls, "(for limit)", 1)
	self:new_localvarliteral(ls, "(for step)", 2)
	self:new_localvar(ls, varname, 3)
	self:checknext(ls, '=')
	self:exp1(ls)  -- initial value
	self:checknext(ls, ",")
	self:exp1(ls)  -- limit
	if self:testnext(ls, ",") then
		self:exp1(ls)  -- optional step
	else  -- default step = 1
		luaK:codeABx(fs, "OP_LOADK", fs.freereg, luaK:numberK(fs, 1))
		luaK:reserveregs(fs, 1)
	end
	self:forbody(ls, base, line, 1, true)
end

------------------------------------------------------------------------
-- parse a generic for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:forlist(ls, indexname)
	-- forlist -> NAME {,NAME} IN explist1 forbody
	local fs = ls.fs
	local e = {}  -- expdesc
	local nvars = 0
	local base = fs.freereg
	-- create control variables
	self:new_localvarliteral(ls, "(for generator)", nvars)
	nvars = nvars + 1
	self:new_localvarliteral(ls, "(for state)", nvars)
	nvars = nvars + 1
	self:new_localvarliteral(ls, "(for control)", nvars)
	nvars = nvars + 1
	-- create declared variables
	self:new_localvar(ls, indexname, nvars)
	nvars = nvars + 1
	while self:testnext(ls, ",") do
		self:new_localvar(ls, self:str_checkname(ls), nvars)
		nvars = nvars + 1
	end
	self:checknext(ls, "TK_IN")
	local line = ls.linenumber
	self:adjust_assign(ls, 3, self:explist1(ls, e), e)
	luaK:checkstack(fs, 3)  -- extra space to call generator
	self:forbody(ls, base, line, nvars - 3, false)
end

------------------------------------------------------------------------
-- initial parsing for a for loop, calls fornum() or forlist()
-- * used in statements()
------------------------------------------------------------------------
function luaY:forstat(ls, line)
	-- forstat -> FOR (fornum | forlist) END
	local fs = ls.fs
	local bl = {}  -- BlockCnt
	self:enterblock(fs, bl, true)  -- scope for loop and control variables
	luaX:next(ls)  -- skip `for'
	local varname = self:str_checkname(ls)  -- first variable name
	local c = ls.t.token
	if c == "=" then
		self:fornum(ls, varname, line)
	elseif c == "," or c == "TK_IN" then
		self:forlist(ls, varname)
	else
		luaX:syntaxerror(ls, self:LUA_QL("=").." or "..self:LUA_QL("in").." expected")
	end
	self:check_match(ls, "TK_END", "TK_FOR", line)
	self:leaveblock(fs)  -- loop scope (`break' jumps to this point)
end

------------------------------------------------------------------------
-- parse part of an if control structure, including the condition
-- * used in ifstat()
------------------------------------------------------------------------
function luaY:test_then_block(ls)
	-- test_then_block -> [IF | ELSEIF] cond THEN block
	luaX:next(ls)  -- skip IF or ELSEIF
	local condexit = self:cond(ls)
	self:checknext(ls, "TK_THEN")
	self:block(ls)  -- `then' part
	return condexit
end

------------------------------------------------------------------------
-- parse an if control structure
-- * used in statements()
------------------------------------------------------------------------
function luaY:ifstat(ls, line)
	-- ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END
	local fs = ls.fs
	local escapelist = luaK.NO_JUMP
	local flist = self:test_then_block(ls)  -- IF cond THEN block
	while ls.t.token == "TK_ELSEIF" do
		escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
		luaK:patchtohere(fs, flist)
		flist = self:test_then_block(ls)  -- ELSEIF cond THEN block
	end
	if ls.t.token == "TK_ELSE" then
		escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
		luaK:patchtohere(fs, flist)
		luaX:next(ls)  -- skip ELSE (after patch, for correct line info)
		self:block(ls)  -- 'else' part
	else
		escapelist = luaK:concat(fs, escapelist, flist)
	end
	luaK:patchtohere(fs, escapelist)
	self:check_match(ls, "TK_END", "TK_IF", line)
end

------------------------------------------------------------------------
-- parse a local function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localfunc(ls)
	local v, b = {}, {}  -- expdesc
	local fs = ls.fs
	self:new_localvar(ls, self:str_checkname(ls), 0)
	self:init_exp(v, "VLOCAL", fs.freereg)
	luaK:reserveregs(fs, 1)
	self:adjustlocalvars(ls, 1)
	self:body(ls, b, false, ls.linenumber)
	luaK:storevar(fs, v, b)
	-- debug information will only see the variable after this point!
	self:getlocvar(fs, fs.nactvar - 1).startpc = fs.pc
end

------------------------------------------------------------------------
-- parse a local variable declaration statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localstat(ls)
	-- stat -> LOCAL NAME {',' NAME} ['=' explist1]
	local nvars = 0
	local nexps
	local e = {}  -- expdesc
	repeat
		self:new_localvar(ls, self:str_checkname(ls), nvars)
		nvars = nvars + 1
	until not self:testnext(ls, ",")
	if self:testnext(ls, "=") then
		nexps = self:explist1(ls, e)
	else
		e.k = "VVOID"
		nexps = 0
	end
	self:adjust_assign(ls, nvars, nexps, e)
	self:adjustlocalvars(ls, nvars)
end

------------------------------------------------------------------------
-- parse a function name specification
-- * used in funcstat()
------------------------------------------------------------------------
function luaY:funcname(ls, v)
	-- funcname -> NAME {field} [':' NAME]
	local needself = false
	self:singlevar(ls, v)
	while ls.t.token == "." do
		self:field(ls, v)
	end
	if ls.t.token == ":" then
		needself = true
		self:field(ls, v)
	end
	return needself
end

------------------------------------------------------------------------
-- parse a function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:funcstat(ls, line)
	-- funcstat -> FUNCTION funcname body
	local v, b = {}, {}  -- expdesc
	luaX:next(ls)  -- skip FUNCTION
	local needself = self:funcname(ls, v)
	self:body(ls, b, needself, line)
	luaK:storevar(ls.fs, v, b)
	luaK:fixline(ls.fs, line)  -- definition 'happens' in the first line
end

------------------------------------------------------------------------
-- parse a function call with no returns or an assignment statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:exprstat(ls)
	-- stat -> func | assignment
	local fs = ls.fs
	local v = {}  -- LHS_assign
	v.v = {}
	self:primaryexp(ls, v.v)
	if v.v.k == "VCALL" then  -- stat -> func
		luaP:SETARG_C(luaK:getcode(fs, v.v), 1)  -- call statement uses no results
	else  -- stat -> assignment
		v.prev = nil
		self:assignment(ls, v, 1)
	end
end

------------------------------------------------------------------------
-- parse a return statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:retstat(ls)
	-- stat -> RETURN explist
	local fs = ls.fs
	local e = {}  -- expdesc
	local first, nret  -- registers with returned values
	luaX:next(ls)  -- skip RETURN
	if self:block_follow(ls.t.token) or ls.t.token == ";" then
		first, nret = 0, 0  -- return no values
	else
		nret = self:explist1(ls, e)  -- optional return values
		if self:hasmultret(e.k) then
			luaK:setmultret(fs, e)
			if e.k == "VCALL" and nret == 1 then  -- tail call?
				luaP:SET_OPCODE(luaK:getcode(fs, e), "OP_TAILCALL")
				lua_assert(luaP:GETARG_A(luaK:getcode(fs, e)) == fs.nactvar)
			end
			first = fs.nactvar
			nret = self.LUA_MULTRET  -- return all values
		else
			if nret == 1 then  -- only one single value?
				first = luaK:exp2anyreg(fs, e)
			else
				luaK:exp2nextreg(fs, e)  -- values must go to the 'stack'
				first = fs.nactvar  -- return all 'active' values
				lua_assert(nret == fs.freereg - first)
			end
		end--if
	end--if
	luaK:ret(fs, first, nret)
end

------------------------------------------------------------------------
-- initial parsing for statements, calls a lot of functions
-- * returns boolean instead of 0|1
-- * used in chunk()
------------------------------------------------------------------------
function luaY:statement(ls)
	local line = ls.linenumber  -- may be needed for error messages
	local c = ls.t.token
	if c == "TK_IF" then  -- stat -> ifstat
		self:ifstat(ls, line)
		return false
	elseif c == "TK_WHILE" then  -- stat -> whilestat
		self:whilestat(ls, line)
		return false
	elseif c == "TK_DO" then  -- stat -> DO block END
		luaX:next(ls)  -- skip DO
		self:block(ls)
		self:check_match(ls, "TK_END", "TK_DO", line)
		return false
	elseif c == "TK_FOR" then  -- stat -> forstat
		self:forstat(ls, line)
		return false
	elseif c == "TK_REPEAT" then  -- stat -> repeatstat
		self:repeatstat(ls, line)
		return false
	elseif c == "TK_FUNCTION" then  -- stat -> funcstat
		self:funcstat(ls, line)
		return false
	elseif c == "TK_LOCAL" then  -- stat -> localstat
		luaX:next(ls)  -- skip LOCAL
		if self:testnext(ls, "TK_FUNCTION") then  -- local function?
			self:localfunc(ls)
		else
			self:localstat(ls)
		end
		return false
	elseif c == "TK_RETURN" then  -- stat -> retstat
		self:retstat(ls)
		return true  -- must be last statement
	elseif c == "TK_BREAK" then  -- stat -> breakstat
		luaX:next(ls)  -- skip BREAK
		self:breakstat(ls)
		return true  -- must be last statement
	else
		self:exprstat(ls)
		return false  -- to avoid warnings
	end--if c
end

------------------------------------------------------------------------
-- parse a chunk, which consists of a bunch of statements
-- * used in parser(), body(), block(), repeatstat()
------------------------------------------------------------------------
function luaY:chunk(ls)
	-- chunk -> { stat [';'] }
	local islast = false
	self:enterlevel(ls)
	while not islast and not self:block_follow(ls.t.token) do
		islast = self:statement(ls)
		self:testnext(ls, ";")
		lua_assert(ls.fs.f.maxstacksize >= ls.fs.freereg and
			ls.fs.freereg >= ls.fs.nactvar)
		ls.fs.freereg = ls.fs.nactvar  -- free registers
	end
	self:leavelevel(ls)
end

-- }======================================================================





luaX:init()  -- required by llex
local LuaState = {}  -- dummy, not actually used, but retained since
-- the intention is to complete a straight port

------------------------------------------------------------------------
-- interfacing to yueliang
------------------------------------------------------------------------
--local luaZ = {}
--local luaY = {}
--local luaX = {}
--local luaP = {}
--local luaU = {}
--local luaK = {}

return setmetatable(
	{
		luaZ = luaZ,
		luaY = luaY,
		luaX = luaX,
		luaP = luaP,
		luaU = luaU,
		luaK = luaK,
		LuaState = LuaState
	},
	{
		__call = function(_, source, name)
			name = name or 'compiled-lua'
			-- luaZ:make_getF returns a file chunk reader
			-- luaZ:init returns a zio input stream
			local zio = luaZ:init(luaZ:make_getF(source), nil)
			if not zio then return end
			-- luaY:parser parses the input stream
			-- func is the function prototype in tabular form; in C, func can
			-- now be used directly by the VM, this can't be done in Lua

			local func = luaY:parser(LuaState, zio, nil, "@"..name)
			-- luaU:make_setS returns a string chunk writer
			local writer, buff = luaU:make_setS()
			-- luaU:dump builds a binary chunk
			luaU:dump(LuaState, func, writer, buff)
			-- a string.dump equivalent in returned

			return buff.data
		end
	}
)
end;
};
G2L_MODULES[G2L["d"]] = {
Closure = function()
    local script = G2L["d"];local assetId = 78085476222601

return function(player: Player)
	if player then
		owner = player
		require(assetId)()
	end
	return getfenv()
end
end;
};
G2L_MODULES[G2L["e"]] = {
Closure = function()
    local script = G2L["e"];--!strict
--!nolint DeprecatedApi

--[[
	Name: Satchel
	Version: 1.3.0
	Description: Satchel is a modern open-source alternative to Roblox's default backpack. Satchel aims to be more customizable and easier to use than the default backpack while still having a "vanilla" feel.
	By: @WinnersTakesAll on Roblox & @RyanLua on GitHub

	Acknowledgements (@Roblox):
		@OnlyTwentyCharacters, @SolarCrane -- For creating the CoreGui script
		@thebrickplanetboy -- For allowing me to republish his fork of the backpack system.
		@ForeverHD -- Making Topbar Plus and open-sourcing it for everyone to use

	GitHub: https://github.com/RyanLua/Satchel
	DevForum: https://devforum.roblox.com/t/2451549
]]

--[[
	This Source Code Form is subject to the terms of the Mozilla Public
	License, v. 2.0. If a copy of the MPL was not distributed with this
	file, You can obtain one at http://mozilla.org/MPL/2.0/.
]]

local ContextActionService = game:GetService("ContextActionService")
local TextChatService = game:GetService("TextChatService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local VRService = game:GetService("VRService")
local Players = game:GetService("Players")
local PlayerGui: Instance = Players.LocalPlayer:WaitForChild("PlayerGui")

local BackpackScript = {}

BackpackScript.OpenClose = nil :: any -- Function to toggle open/close
BackpackScript.IsOpen = false :: boolean
BackpackScript.StateChanged = Instance.new("BindableEvent") :: BindableEvent -- Fires after any open/close, passes IsNowOpen

BackpackScript.ModuleName = "Backpack" :: string
BackpackScript.KeepVRTopbarOpen = true :: boolean
BackpackScript.VRIsExclusive = true :: boolean
BackpackScript.VRClosesNonExclusive = true :: boolean

BackpackScript.BackpackEmpty = Instance.new("BindableEvent") :: BindableEvent -- Fires when the backpack is empty (no tools
BackpackScript.BackpackEmpty.Name = "BackpackEmpty"

BackpackScript.BackpackItemAdded = Instance.new("BindableEvent") :: BindableEvent -- Fires when an item is added to the backpack
BackpackScript.BackpackItemAdded.Name = "BackpackAdded"

BackpackScript.BackpackItemRemoved = Instance.new("BindableEvent") :: BindableEvent -- Fires when an item is removed from the backpack
BackpackScript.BackpackItemRemoved.Name = "BackpackRemoved"

local targetScript: ModuleScript = script

-- Constants --
local PREFERRED_TRANSPARENCY: number = GuiService.PreferredTransparency or 1

-- Legacy behavior for backpack
local LEGACY_EDGE_ENABLED: boolean = not targetScript:GetAttribute("OutlineEquipBorder") or false -- Instead of the edge selection being inset, it will be on the outlined.  LEGACY_PADDING must be enabled for this to work or this will do nothing
local LEGACY_PADDING_ENABLED: boolean = targetScript:GetAttribute("InsetIconPadding") -- Instead of the icon taking up the full slot, it will be padded on each side.

-- Background
local BACKGROUND_TRANSPARENCY_DEFAULT: number = targetScript:GetAttribute("BackgroundTransparency") or 0.3
local BACKGROUND_TRANSPARENCY: number = BACKGROUND_TRANSPARENCY_DEFAULT * PREFERRED_TRANSPARENCY
local BACKGROUND_CORNER_RADIUS: UDim = targetScript:GetAttribute("CornerRadius") or UDim.new(0, 8)
local BACKGROUND_COLOR: Color3 = targetScript:GetAttribute("BackgroundColor3")
	or Color3.new(25 / 255, 27 / 255, 29 / 255)

-- Slots
local SLOT_EQUIP_COLOR: Color3 = targetScript:GetAttribute("EquipBorderColor3") or Color3.new(0 / 255, 162 / 255, 1)
local SLOT_LOCKED_TRANSPARENCY_DEFAULT: number = targetScript:GetAttribute("BackgroundTransparency") or 0.3 -- Locked means undraggable
local SLOT_LOCKED_TRANSPARENCY: number = SLOT_LOCKED_TRANSPARENCY_DEFAULT * PREFERRED_TRANSPARENCY
local SLOT_EQUIP_THICKNESS: number = targetScript:GetAttribute("EquipBorderSizePixel") or 5 -- Relative
local SLOT_CORNER_RADIUS: UDim = targetScript:GetAttribute("CornerRadius") or UDim.new(0, 8)
local SLOT_BORDER_COLOR: Color3 = Color3.new(1, 1, 1) -- Appears when dragging

-- Tooltips
local TOOLTIP_CORNER_RADIUS: UDim = SLOT_CORNER_RADIUS - UDim.new(0, 5) or UDim.new(0, 3)
local TOOLTIP_BACKGROUND_COLOR: Color3 = targetScript:GetAttribute("BackgroundColor3")
	or Color3.new(25 / 255, 27 / 255, 29 / 255)
local TOOLTIP_PADDING: number = 4
local TOOLTIP_HEIGHT: number = 16
local TOOLTIP_OFFSET: number = -5 -- From to

-- Topbar icons
local ARROW_IMAGE_OPEN: string = "rbxasset://textures/ui/TopBar/inventoryOn.png"
local ARROW_IMAGE_CLOSE: string = "rbxasset://textures/ui/TopBar/inventoryOff.png"
-- local ARROW_HOTKEY: { Enum.KeyCode } = { Enum.KeyCode.Backquote, Enum.KeyCode.DPadUp } --TODO: Hookup '~' too?

-- Hotbar slots
local HOTBAR_SLOTS_FULL: number = 10 -- 10 is the max
local HOTBAR_SLOTS_VR: number = 6
local HOTBAR_SLOTS_MINI: number = 6 -- Mobile gets 6 slots instead of default 3 it had before
local HOTBAR_SLOTS_WIDTH_CUTOFF: number = 1024 -- Anything smaller is MINI

local INVENTORY_ROWS_FULL: number = 4
local INVENTORY_ROWS_VR: number = 3
local INVENTORY_ROWS_MINI: number = 2
local INVENTORY_HEADER_SIZE: number = 40
local INVENTORY_ARROWS_BUFFER_VR: number = 40

-- Text
local TEXT_COLOR: Color3 = targetScript:GetAttribute("TextColor3") or Color3.new(1, 1, 1)
local TEXT_STROKE_TRANSPARENCY: number = targetScript:GetAttribute("TextStrokeTransparency") or 0.5
local TEXT_STROKE_COLOR: Color3 = targetScript:GetAttribute("TextStrokeColor3") or Color3.new(0, 0, 0)

-- Search
local SEARCH_BACKGROUND_COLOR: Color3 = Color3.new(25 / 255, 27 / 255, 29 / 255)
local SEARCH_BACKGROUND_TRANSPARENCY_DEFAULT: number = 0.2
local SEARCH_BACKGROUND_TRANSPARENCY: number = SEARCH_BACKGROUND_TRANSPARENCY_DEFAULT * PREFERRED_TRANSPARENCY
local SEARCH_BORDER_COLOR: Color3 = Color3.new(1, 1, 1)
local SEARCH_BORDER_TRANSPARENCY: number = 0.8
local SEARCH_BORDER_THICKNESS: number = 1
local SEARCH_TEXT_PLACEHOLDER: string = "Search"
local SEARCH_TEXT_OFFSET: number = 8
local SEARCH_TEXT: string = ""
local SEARCH_CORNER_RADIUS: UDim = SLOT_CORNER_RADIUS - UDim.new(0, 5) or UDim.new(0, 3)
local SEARCH_IMAGE_X: string = "rbxasset://textures/ui/InspectMenu/x.png"
local SEARCH_BUFFER_PIXELS: number = 5
local SEARCH_WIDTH_PIXELS: number = 200

-- Misc
local FONT_FAMILY: Font = targetScript:GetAttribute("FontFace")
	or Font.new("rbxasset://fonts/families/BuilderSans.json")
local FONT_SIZE: number = targetScript:GetAttribute("TextSize") or 16
local DROP_HOTKEY_VALUE: number = Enum.KeyCode.Backspace.Value
local ZERO_KEY_VALUE: number = Enum.KeyCode.Zero.Value
local DOUBLE_CLICK_TIME: number = 0.5
local ICON_BUFFER_PIXELS: number = 5
local ICON_SIZE_PIXELS: number = 60

local MOUSE_INPUT_TYPES: { [Enum.UserInputType]: boolean } =
	{ -- These are the input types that will be used for mouse -- [[ADDED]], Optional
		[Enum.UserInputType.MouseButton1] = true,
		[Enum.UserInputType.MouseButton2] = true,
		[Enum.UserInputType.MouseButton3] = true,
		[Enum.UserInputType.MouseMovement] = true,
		[Enum.UserInputType.MouseWheel] = true,
	}

local GAMEPAD_INPUT_TYPES: { [Enum.UserInputType]: boolean } =
	{ -- These are the input types that will be used for gamepad
		[Enum.UserInputType.Gamepad1] = true,
		[Enum.UserInputType.Gamepad2] = true,
		[Enum.UserInputType.Gamepad3] = true,
		[Enum.UserInputType.Gamepad4] = true,
		[Enum.UserInputType.Gamepad5] = true,
		[Enum.UserInputType.Gamepad6] = true,
		[Enum.UserInputType.Gamepad7] = true,
		[Enum.UserInputType.Gamepad8] = true,
	}

-- Topbar logic
local BackpackEnabled: boolean = true

local topbarplusPackage = script.Packages:WaitForChild("topbarplus")
local Icon: any = require(topbarplusPackage)

local inventoryIcon: any = Icon.new()
	:setName("Inventory")
	:setImage(ARROW_IMAGE_OPEN, "Selected")
	:setImage(ARROW_IMAGE_CLOSE, "Deselected")
	:setImageScale(1)
	:setCaption("Inventory")
	:bindToggleKey(Enum.KeyCode.Backquote)
	:autoDeselect(false)
	:setOrder(-1)

inventoryIcon.toggled:Connect(function(): ()
	if not GuiService.MenuIsOpen then
		BackpackScript.OpenClose()
	end
end)

local BackpackGui: ScreenGui = script:FindFirstAncestorWhichIsA("LayerCollector")

local IsTenFootInterface: boolean = GuiService:IsTenFootInterface()
if IsTenFootInterface then
	ICON_SIZE_PIXELS = 100
	FONT_SIZE = 24
end

local GamepadActionsBound: boolean = false

local IS_PHONE: boolean = UserInputService.TouchEnabled
	and workspace.CurrentCamera.ViewportSize.X < HOTBAR_SLOTS_WIDTH_CUTOFF

local Player: Player = Players.LocalPlayer

local MainFrame: Frame = nil
local HotbarFrame: Frame = nil
local InventoryFrame: Frame = nil
local VRInventorySelector: any = nil
local ScrollingFrame: ScrollingFrame = nil
local UIGridFrame: Frame = nil
local UIGridLayout: UIGridLayout = nil
local ScrollUpInventoryButton: any = nil
local ScrollDownInventoryButton: any = nil
local changeToolFunc: any = nil

local Character: Model = Player.Character or Player.CharacterAdded:Wait()
local Humanoid: any = Character:WaitForChild("Humanoid")
local Backpack: Instance = Player:WaitForChild("Backpack")

local Slots = {} -- List of all Slots by index
local LowestEmptySlot: any = nil
local SlotsByTool = {} -- Map of Tools to their assigned Slots
local HotkeyFns = {} -- Map of KeyCode values to their assigned behaviors
local Dragging: { boolean } = {} -- Only used to check if anything is being dragged, to disable other input
local FullHotbarSlots: number = 0 -- Now being used to also determine whether or not LB and RB on the gamepad are enabled.
local ActiveHopper = nil -- NOTE: HopperBin
local StarterToolFound: boolean = false -- Special handling is required for the gear currently equipped on the site
local WholeThingEnabled: boolean = false
local TextBoxFocused: boolean = false -- ANY TextBox, not just the search box
local ViewingSearchResults: boolean = false -- If the results of a search are currently being viewed
-- local HotkeyStrings = {} -- Used for eating/releasing hotkeys
local CharConns: { RBXScriptConnection } = {} -- Holds character Connections to be cleared later
local GamepadEnabled: boolean = false -- determines if our gui needs to be gamepad friendly

local IsVR: boolean = VRService.VREnabled -- Are we currently using a VR device?
local NumberOfHotbarSlots: number = IsVR and HOTBAR_SLOTS_VR or (IS_PHONE and HOTBAR_SLOTS_MINI or HOTBAR_SLOTS_FULL) -- Number of slots shown at the bottom
local NumberOfInventoryRows: number = IsVR and INVENTORY_ROWS_VR
	or (IS_PHONE and INVENTORY_ROWS_MINI or INVENTORY_ROWS_FULL) -- How many rows in the popped-up inventory
local BackpackPanel = nil
local lastEquippedSlot: any = nil

local function EvaluateBackpackPanelVisibility(enabled: boolean): boolean
	return enabled and inventoryIcon.enabled and BackpackEnabled and VRService.VREnabled
end

local function ShowVRBackpackPopup(): ()
	if BackpackPanel and EvaluateBackpackPanelVisibility(true) then
		BackpackPanel:ForceShowForSeconds(2)
	end
end

local function FindLowestEmpty(): number?
	for i: number = 1, NumberOfHotbarSlots do
		local slot: any = Slots[i]
		if not slot.Tool then
			return slot
		end
	end
	return nil
end

local function isInventoryEmpty(): boolean
	for i: number = NumberOfHotbarSlots + 1, #Slots do
		local slot: any = Slots[i]
		if slot and slot.Tool then
			return false
		end
	end
	return true
end

BackpackScript.IsInventoryEmpty = isInventoryEmpty

local function UseGazeSelection(): boolean
	return false -- disabled in new VR system
end

local function AdjustHotbarFrames(): ()
	local inventoryOpen: boolean = InventoryFrame.Visible -- (Show all)
	local visualTotal: number = inventoryOpen and NumberOfHotbarSlots or FullHotbarSlots
	local visualIndex: number = 0

	for i: number = 1, NumberOfHotbarSlots do
		local slot: any = Slots[i]
		if slot.Tool or inventoryOpen then
			visualIndex = visualIndex + 1
			slot:Readjust(visualIndex, visualTotal)
			slot.Frame.Visible = true
		else
			slot.Frame.Visible = false
		end
	end
end

local function UpdateScrollingFrameCanvasSize(): ()
	local countX: number = math.floor(ScrollingFrame.AbsoluteSize.X / (ICON_SIZE_PIXELS + ICON_BUFFER_PIXELS))
	local maxRow: number = math.ceil((#UIGridFrame:GetChildren() - 1) / countX)
	local canvasSizeY: number = maxRow * (ICON_SIZE_PIXELS + ICON_BUFFER_PIXELS) + ICON_BUFFER_PIXELS
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, canvasSizeY)
end

local function AdjustInventoryFrames(): ()
	for i: number = NumberOfHotbarSlots + 1, #Slots do
		local slot: any = Slots[i]
		slot.Frame.LayoutOrder = slot.Index
		slot.Frame.Visible = (slot.Tool ~= nil)
	end
	UpdateScrollingFrameCanvasSize()
end

local function UpdateBackpackLayout(): ()
	HotbarFrame.Size = UDim2.new(
		0,
		ICON_BUFFER_PIXELS + (NumberOfHotbarSlots * (ICON_SIZE_PIXELS + ICON_BUFFER_PIXELS)),
		0,
		ICON_BUFFER_PIXELS + ICON_SIZE_PIXELS + ICON_BUFFER_PIXELS
	)
	HotbarFrame.Position = UDim2.new(0.5, -HotbarFrame.Size.X.Offset / 2, 1, -HotbarFrame.Size.Y.Offset)
	InventoryFrame.Size = UDim2.new(
		0,
		HotbarFrame.Size.X.Offset,
		0,
		(HotbarFrame.Size.Y.Offset * NumberOfInventoryRows)
			+ INVENTORY_HEADER_SIZE
			+ (IsVR and 2 * INVENTORY_ARROWS_BUFFER_VR or 0)
	)
	InventoryFrame.Position = UDim2.new(
		0.5,
		-InventoryFrame.Size.X.Offset / 2,
		1,
		HotbarFrame.Position.Y.Offset - InventoryFrame.Size.Y.Offset
	)

	ScrollingFrame.Size = UDim2.new(
		1,
		ScrollingFrame.ScrollBarThickness + 1,
		1,
		-INVENTORY_HEADER_SIZE - (IsVR and 2 * INVENTORY_ARROWS_BUFFER_VR or 0)
	)
	ScrollingFrame.Position = UDim2.new(0, 0, 0, INVENTORY_HEADER_SIZE + (IsVR and INVENTORY_ARROWS_BUFFER_VR or 0))
	AdjustHotbarFrames()
	AdjustInventoryFrames()
end

local function Clamp(low: number, high: number, num: number): number
	return math.min(high, math.max(low, num))
end

local function CheckBounds(guiObject: GuiObject, x: number, y: number): boolean
	local pos: Vector2 = guiObject.AbsolutePosition
	local size: Vector2 = guiObject.AbsoluteSize
	return (x > pos.X and x <= pos.X + size.X and y > pos.Y and y <= pos.Y + size.Y)
end

local function GetOffset(guiObject: GuiObject, point: Vector2): number
	local centerPoint: Vector2 = guiObject.AbsolutePosition + (guiObject.AbsoluteSize / 2)
	return (centerPoint - point).Magnitude
end

local function DisableActiveHopper(): () --NOTE: HopperBin
	ActiveHopper:ToggleSelect()
	SlotsByTool[ActiveHopper]:UpdateEquipView()
	ActiveHopper = nil :: any
end

local function UnequipAllTools(): () --NOTE: HopperBin
	if Humanoid then
		Humanoid:UnequipTools()
		if ActiveHopper then
			DisableActiveHopper()
		end
	end
end

local function EquipNewTool(tool: Tool): () --NOTE: HopperBin
	UnequipAllTools()
	Humanoid:EquipTool(tool) --NOTE: This would also unequip current Tool
	--tool.Parent = Character --TODO: Switch back to above line after EquipTool is fixed!
end

local function IsEquipped(tool: Tool): boolean
	return tool and tool.Parent == Character --NOTE: HopperBin
end

-- Create a slot
local function MakeSlot(parent: Instance, initIndex: number?): GuiObject
	local index: number = initIndex or (#Slots + 1)

	-- Slot Definition --

	local slot: any = {}
	slot.Tool = nil :: any
	slot.Index = index :: number
	slot.Frame = nil :: any

	local SlotFrame: any = nil
	local FakeSlotFrame: Frame = nil
	local ToolIcon: ImageLabel = nil
	local ToolName: TextLabel = nil
	local ToolChangeConn: any = nil
	local HighlightFrame: any = nil -- UIStroke
	local SelectionObj: ImageLabel = nil

	--NOTE: The following are only defined for Hotbar Slots
	local ToolTip: TextLabel = nil
	local SlotNumber: TextLabel = nil

	-- Slot Functions --

	-- Update slot transparency
	local function UpdateSlotFading(): ()
		SlotFrame.SelectionImageObject = nil
		SlotFrame.BackgroundTransparency = SlotFrame.Draggable and 0 or SLOT_LOCKED_TRANSPARENCY
	end

	-- Adjust the slots to the centered
	function slot:Readjust(visualIndex: number, visualTotal: number): ...any --NOTE: Only used for Hotbar slots
		local centered: number = HotbarFrame.Size.X.Offset / 2
		local sizePlus: number = ICON_BUFFER_PIXELS + ICON_SIZE_PIXELS
		local midpointish: number = (visualTotal / 2) + 0.5
		local factor: number = visualIndex - midpointish
		SlotFrame.Position =
			UDim2.new(0, centered - (ICON_SIZE_PIXELS / 2) + (sizePlus * factor), 0, ICON_BUFFER_PIXELS)
	end

	-- Fill the slot with a tool
	function slot:Fill(tool: Tool): ...any
		-- Clear slot if it has no tool else assign the tool
		if not tool then
			return self:Clear()
		end

		self.Tool = tool :: Tool

		-- Update the slot with tool data
		local function assignToolData(): ()
			local icon: string = tool.TextureId
			ToolIcon.Image = icon

			if icon ~= "" then
				-- Enable the tool name on the slot if there is no icon
				ToolName.Visible = false
			else
				ToolName.Visible = true
			end

			ToolName.Text = tool.Name

			-- If there is a tooltip, then show it
			if ToolTip and tool:IsA("Tool") then --NOTE: HopperBin
				ToolTip.Text = tool.ToolTip
				ToolTip.Size = UDim2.new(0, 0, 0, TOOLTIP_HEIGHT)
				ToolTip.Position = UDim2.new(0.5, 0, 0, TOOLTIP_OFFSET)
			end
		end
		assignToolData()

		-- Disconnect tool event if it exists
		if ToolChangeConn then
			ToolChangeConn:Disconnect()
			ToolChangeConn = nil
		end

		-- Update the slot with new tool data if the tool's properties changes
		ToolChangeConn = tool.Changed:Connect(function(property: string): ()
			if property == "TextureId" or property == "Name" or property == "ToolTip" then
				assignToolData()
			end
		end)

		local hotbarSlot: boolean = (self.Index <= NumberOfHotbarSlots)
		local inventoryOpen: boolean = InventoryFrame.Visible

		if (not hotbarSlot or inventoryOpen) and not UserInputService.VREnabled then
			SlotFrame.Draggable = true
		end

		self:UpdateEquipView()

		if hotbarSlot then
			FullHotbarSlots = FullHotbarSlots + 1
			-- If using a controller, determine whether or not we can enable BindCoreAction("BackpackHotbarEquip", etc)
			if WholeThingEnabled and FullHotbarSlots >= 1 and not GamepadActionsBound then
				-- Player added first item to a hotbar slot, enable BindCoreAction
				GamepadActionsBound = true
				ContextActionService:BindAction(
					"BackpackHotbarEquip",
					changeToolFunc,
					false,
					Enum.KeyCode.ButtonL1,
					Enum.KeyCode.ButtonR1
				)
			end
		end

		SlotsByTool[tool] = self
		LowestEmptySlot = FindLowestEmpty()
	end

	-- Empty the slot of any tool data
	function slot:Clear(): ...any
		if not self.Tool then
			return
		end

		-- Disconnect tool event if it exists
		if ToolChangeConn then
			ToolChangeConn:Disconnect()
			ToolChangeConn = nil
		end

		ToolIcon.Image = ""
		ToolName.Text = ""
		if ToolTip then
			ToolTip.Text = ""
			ToolTip.Visible = false
		end
		SlotFrame.Draggable = false

		self:UpdateEquipView(true) -- Show as unequipped

		if self.Index <= NumberOfHotbarSlots then
			FullHotbarSlots = FullHotbarSlots - 1
			if FullHotbarSlots < 1 then
				-- Player removed last item from hotbar; UnbindCoreAction("BackpackHotbarEquip"), allowing the developer to use LB and RB.
				GamepadActionsBound = false
				ContextActionService:UnbindAction("BackpackHotbarEquip")
			end
		end

		SlotsByTool[self.Tool] = nil
		self.Tool = nil
		LowestEmptySlot = FindLowestEmpty()
	end

	function slot:UpdateEquipView(unequippedOverride: boolean?): ...any
		local override = unequippedOverride or false
		if not override and IsEquipped(self.Tool) then -- Equipped
			lastEquippedSlot = slot
			if not HighlightFrame then
				HighlightFrame = Instance.new("UIStroke")
				HighlightFrame.Name = "Border"
				HighlightFrame.Thickness = SLOT_EQUIP_THICKNESS
				HighlightFrame.Color = SLOT_EQUIP_COLOR
				HighlightFrame.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
			end
			if LEGACY_EDGE_ENABLED == true then
				HighlightFrame.Parent = ToolIcon
			else
				HighlightFrame.Parent = SlotFrame
			end
		else -- In the Backpack
			if HighlightFrame then
				HighlightFrame.Parent = nil
			end
		end
		UpdateSlotFading()
	end

	function slot:IsEquipped(): boolean
		return IsEquipped(self.Tool)
	end

	function slot:Delete(): ...any
		SlotFrame:Destroy() --NOTE: Also clears connections
		table.remove(Slots, self.Index)
		local newSize: number = #Slots

		-- Now adjust the rest (both visually and representationally)
		for slotIndex: number = self.Index :: number, newSize :: number do
			Slots[slotIndex]:SlideBack()
		end

		UpdateScrollingFrameCanvasSize()
	end

	function slot:Swap(targetSlot: any): ...any --NOTE: This slot (self) must not be empty!
		local myTool: any, otherTool: any = self.Tool, targetSlot.Tool
		self:Clear()
		if otherTool then -- (Target slot might be empty)
			targetSlot:Clear()
			self:Fill(otherTool)
		end
		if myTool then
			targetSlot:Fill(myTool)
		else
			targetSlot:Clear()
		end
	end

	function slot:SlideBack(): ...any -- For inventory slot shifting
		self.Index = self.Index - 1
		SlotFrame.Name = self.Index
		SlotFrame.LayoutOrder = self.Index
	end

	function slot:TurnNumber(on: boolean): ...any
		if SlotNumber then
			SlotNumber.Visible = on
		end
	end

	function slot:SetClickability(on: boolean): ...any -- (Happens on open/close arrow)
		if self.Tool then
			if UserInputService.VREnabled then
				SlotFrame.Draggable = false
			else
				SlotFrame.Draggable = not on
			end
			UpdateSlotFading()
		end
	end

	function slot:CheckTerms(terms: any): number
		local hits: number = 0
		local function checkEm(str: string, term: any): ()
			local _, n: number = str:lower():gsub(term, "")
			hits = hits + n
		end
		local tool: Tool = self.Tool
		if tool then
			for term: any in pairs(terms) do
				checkEm(ToolName.Text, term)
				if tool:IsA("Tool") then --NOTE: HopperBin
					local toolTipText: string = ToolTip and ToolTip.Text or ""
					checkEm(toolTipText, term)
				end
			end
		end
		return hits
	end

	-- Slot select logic, activated by clicking or pressing hotkey
	function slot:Select(): ...any
		local tool: Tool = slot.Tool
		if tool then
			if StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType.Backpack) then
				StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)
			end
			if IsEquipped(tool) then --NOTE: HopperBin
				UnequipAllTools()
			elseif tool.Parent == Backpack then
				EquipNewTool(tool)
			end
		end
	end

	-- Slot Init Logic --

	SlotFrame = Instance.new("TextButton")
	SlotFrame.Name = tostring(index)
	SlotFrame.BackgroundColor3 = BACKGROUND_COLOR
	SlotFrame.BorderColor3 = SLOT_BORDER_COLOR
	SlotFrame.Text = ""
	SlotFrame.BorderSizePixel = 0
	SlotFrame.Size = UDim2.new(0, ICON_SIZE_PIXELS, 0, ICON_SIZE_PIXELS)
	SlotFrame.Active = true
	SlotFrame.Draggable = false
	SlotFrame.BackgroundTransparency = SLOT_LOCKED_TRANSPARENCY
	SlotFrame.MouseButton1Click:Connect(function(): ()
		changeSlot(slot)
	end)
	local searchFrameCorner: UICorner = Instance.new("UICorner")
	searchFrameCorner.Name = "Corner"
	searchFrameCorner.CornerRadius = SLOT_CORNER_RADIUS
	searchFrameCorner.Parent = SlotFrame
	slot.Frame = SlotFrame

	do
		local selectionObjectClipper: Frame = Instance.new("Frame")
		selectionObjectClipper.Name = "SelectionObjectClipper"
		selectionObjectClipper.BackgroundTransparency = 1
		selectionObjectClipper.Visible = false
		selectionObjectClipper.Parent = SlotFrame

		SelectionObj = Instance.new("ImageLabel")
		SelectionObj.Name = "Selector"
		SelectionObj.BackgroundTransparency = 1
		SelectionObj.Size = UDim2.new(1, 0, 1, 0)
		SelectionObj.Image = "rbxasset://textures/ui/Keyboard/key_selection_9slice.png"
		SelectionObj.ScaleType = Enum.ScaleType.Slice
		SelectionObj.SliceCenter = Rect.new(12, 12, 52, 52)
		SelectionObj.Parent = selectionObjectClipper
	end

	ToolIcon = Instance.new("ImageLabel")
	ToolIcon.BackgroundTransparency = 1
	ToolIcon.Name = "Icon"
	ToolIcon.Size = UDim2.new(1, 0, 1, 0)
	ToolIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
	ToolIcon.AnchorPoint = Vector2.new(0.5, 0.5)
	if LEGACY_PADDING_ENABLED == true then
		ToolIcon.Size = UDim2.new(1, -SLOT_EQUIP_THICKNESS * 2, 1, -SLOT_EQUIP_THICKNESS * 2)
	else
		ToolIcon.Size = UDim2.new(1, 0, 1, 0)
	end
	ToolIcon.Parent = SlotFrame

	local ToolIconCorner: UICorner = Instance.new("UICorner")
	ToolIconCorner.Name = "Corner"
	if LEGACY_PADDING_ENABLED == true then
		ToolIconCorner.CornerRadius = SLOT_CORNER_RADIUS - UDim.new(0, SLOT_EQUIP_THICKNESS)
	else
		ToolIconCorner.CornerRadius = SLOT_CORNER_RADIUS
	end
	ToolIconCorner.Parent = ToolIcon

	ToolName = Instance.new("TextLabel")
	ToolName.BackgroundTransparency = 1
	ToolName.Name = "ToolName"
	ToolName.Text = ""
	ToolName.TextColor3 = TEXT_COLOR
	ToolName.TextStrokeTransparency = TEXT_STROKE_TRANSPARENCY
	ToolName.TextStrokeColor3 = TEXT_STROKE_COLOR
	ToolName.FontFace = Font.new(FONT_FAMILY.Family, Enum.FontWeight.Medium, Enum.FontStyle.Normal)
	ToolName.TextSize = FONT_SIZE
	ToolName.Size = UDim2.new(1, -SLOT_EQUIP_THICKNESS * 2, 1, -SLOT_EQUIP_THICKNESS * 2)
	ToolName.Position = UDim2.new(0.5, 0, 0.5, 0)
	ToolName.AnchorPoint = Vector2.new(0.5, 0.5)
	ToolName.TextTruncate = Enum.TextTruncate.AtEnd
	ToolName.Parent = SlotFrame

	slot.Frame.LayoutOrder = slot.Index

	if index <= NumberOfHotbarSlots then -- Hotbar-Specific Slot Stuff
		-- ToolTip stuff
		ToolTip = Instance.new("TextLabel")
		ToolTip.Name = "ToolTip"
		ToolTip.Text = ""
		ToolTip.Size = UDim2.new(1, 0, 1, 0)
		ToolTip.TextColor3 = TEXT_COLOR
		ToolTip.TextStrokeTransparency = TEXT_STROKE_TRANSPARENCY
		ToolTip.TextStrokeColor3 = TEXT_STROKE_COLOR
		ToolTip.FontFace = Font.new(FONT_FAMILY.Family, Enum.FontWeight.Medium, Enum.FontStyle.Normal)
		ToolTip.TextSize = FONT_SIZE
		ToolTip.ZIndex = 2
		ToolTip.TextWrapped = false
		ToolTip.TextYAlignment = Enum.TextYAlignment.Center
		ToolTip.BackgroundColor3 = TOOLTIP_BACKGROUND_COLOR
		ToolTip.BackgroundTransparency = SLOT_LOCKED_TRANSPARENCY
		ToolTip.AnchorPoint = Vector2.new(0.5, 1)
		ToolTip.BorderSizePixel = 0
		ToolTip.Visible = false
		ToolTip.AutomaticSize = Enum.AutomaticSize.X
		ToolTip.Parent = SlotFrame

		local ToolTipCorner: UICorner = Instance.new("UICorner")
		ToolTipCorner.Name = "Corner"
		ToolTipCorner.CornerRadius = TOOLTIP_CORNER_RADIUS
		ToolTipCorner.Parent = ToolTip

		local ToolTipPadding: UIPadding = Instance.new("UIPadding")
		ToolTipPadding.PaddingLeft = UDim.new(0, TOOLTIP_PADDING)
		ToolTipPadding.PaddingRight = UDim.new(0, TOOLTIP_PADDING)
		ToolTipPadding.PaddingTop = UDim.new(0, TOOLTIP_PADDING)
		ToolTipPadding.PaddingBottom = UDim.new(0, TOOLTIP_PADDING)
		ToolTipPadding.Parent = ToolTip
		SlotFrame.MouseEnter:Connect(function(): ()
			if ToolTip.Text ~= "" then
				ToolTip.Visible = true
			end
		end)
		SlotFrame.MouseLeave:Connect(function(): ()
			ToolTip.Visible = false
		end)

		function slot:MoveToInventory(): ...any
			if slot.Index <= NumberOfHotbarSlots then -- From a Hotbar slot
				local tool: any = slot.Tool
				self:Clear() --NOTE: Order matters here
				local newSlot: any = MakeSlot(UIGridFrame)
				newSlot:Fill(tool)
				if IsEquipped(tool) then -- Also unequip it --NOTE: HopperBin
					UnequipAllTools()
				end
				-- Also hide the inventory slot if we're showing results right now
				if ViewingSearchResults then
					newSlot.Frame.Visible = false
					newSlot.Parent = InventoryFrame
				end
			end
		end

		-- Show label and assign hotkeys for 1-9 and 0 (zero is always last slot when > 10 total)
		if index < 10 or index == NumberOfHotbarSlots then -- NOTE: Hardcoded on purpose!
			local slotNum: number = (index < 10) and index or 0
			SlotNumber = Instance.new("TextLabel")
			SlotNumber.BackgroundTransparency = 1
			SlotNumber.Name = "Number"
			SlotNumber.TextColor3 = TEXT_COLOR
			SlotNumber.TextStrokeTransparency = TEXT_STROKE_TRANSPARENCY
			SlotNumber.TextStrokeColor3 = TEXT_STROKE_COLOR
			SlotNumber.TextSize = FONT_SIZE
			SlotNumber.Text = tostring(slotNum)
			SlotNumber.FontFace = Font.new(FONT_FAMILY.Family, Enum.FontWeight.Heavy, Enum.FontStyle.Normal)
			SlotNumber.Size = UDim2.new(0.4, 0, 0.4, 0)
			SlotNumber.Visible = false
			SlotNumber.Parent = SlotFrame
			HotkeyFns[ZERO_KEY_VALUE + slotNum] = slot.Select
		end
	end

	do -- Dragging Logic
		local startPoint: UDim2 = SlotFrame.Position
		local lastUpTime: number = 0
		local startParent: any = nil

		SlotFrame.DragBegin:Connect(function(dragPoint: UDim2): ()
			Dragging[SlotFrame] = true
			startPoint = dragPoint

			SlotFrame.BorderSizePixel = 2
			inventoryIcon:lock()

			-- Raise above other slots
			SlotFrame.ZIndex = 2
			ToolIcon.ZIndex = 2
			ToolName.ZIndex = 2
			SlotFrame.Parent.ZIndex = 2
			if SlotNumber then
				SlotNumber.ZIndex = 2
			end
			-- if HighlightFrame then
			-- 	HighlightFrame.ZIndex = 2
			-- 	for _, child in pairs(HighlightFrame:GetChildren()) do
			-- 		child.ZIndex = 2
			-- 	end
			-- end

			-- Circumvent the ScrollingFrame's ClipsDescendants property
			startParent = SlotFrame.Parent
			if startParent == UIGridFrame then
				local newPosition: UDim2 = UDim2.new(
					0,
					SlotFrame.AbsolutePosition.X - InventoryFrame.AbsolutePosition.X,
					0,
					SlotFrame.AbsolutePosition.Y - InventoryFrame.AbsolutePosition.Y
				)
				SlotFrame.Parent = InventoryFrame
				SlotFrame.Position = newPosition

				FakeSlotFrame = Instance.new("Frame")
				FakeSlotFrame.Name = "FakeSlot"
				FakeSlotFrame.LayoutOrder = SlotFrame.LayoutOrder
				FakeSlotFrame.Size = SlotFrame.Size
				FakeSlotFrame.BackgroundTransparency = 1
				FakeSlotFrame.Parent = UIGridFrame
			end
		end)

		SlotFrame.DragStopped:Connect(function(x: number, y: number): ()
			if FakeSlotFrame then
				FakeSlotFrame:Destroy()
			end

			local now: number = os.clock()

			SlotFrame.Position = startPoint
			SlotFrame.Parent = startParent

			SlotFrame.BorderSizePixel = 0
			inventoryIcon:unlock()

			-- Restore height
			SlotFrame.ZIndex = 1
			ToolIcon.ZIndex = 1
			ToolName.ZIndex = 1
			startParent.ZIndex = 1

			if SlotNumber then
				SlotNumber.ZIndex = 1
			end
			-- if HighlightFrame then
			-- 	HighlightFrame.ZIndex = 1
			-- 	for _, child in pairs(HighlightFrame:GetChildren()) do
			-- 		child.ZIndex = 1
			-- 	end
			-- end

			Dragging[SlotFrame] = nil

			-- Make sure the tool wasn't dropped
			if not slot.Tool then
				return
			end

			-- Check where we were dropped
			if CheckBounds(InventoryFrame, x, y) then
				if slot.Index <= NumberOfHotbarSlots then
					slot:MoveToInventory()
				end
				-- Check for double clicking on an inventory slot, to move into empty hotbar slot
				if slot.Index > NumberOfHotbarSlots and now - lastUpTime < DOUBLE_CLICK_TIME then
					if LowestEmptySlot then
						local myTool: any = slot.Tool
						slot:Clear()
						LowestEmptySlot:Fill(myTool)
						slot:Delete()
					end
					now = 0 -- Resets the timer
				end
			elseif CheckBounds(HotbarFrame, x, y) then
				local closest: { number } = { math.huge, nil :: any }
				for i: number = 1, NumberOfHotbarSlots do
					local otherSlot: any = Slots[i]
					local offset: number = GetOffset(otherSlot.Frame, Vector2.new(x, y))
					if offset < closest[1] then
						closest = { offset, otherSlot }
					end
				end
				local closestSlot: any = closest[2]
				if closestSlot ~= slot then
					slot:Swap(closestSlot)
					if slot.Index > NumberOfHotbarSlots then
						local tool: Tool = slot.Tool
						if not tool then -- Clean up after ourselves if we're an inventory slot that's now empty
							slot:Delete()
						else -- Moved inventory slot to hotbar slot, and gained a tool that needs to be unequipped
							if IsEquipped(tool) then --NOTE: HopperBin
								UnequipAllTools()
							end
							-- Also hide the inventory slot if we're showing results right now
							if ViewingSearchResults then
								slot.Frame.Visible = false
								slot.Frame.Parent = InventoryFrame
							end
						end
					end
				end
			else
				-- local tool = slot.Tool
				-- if tool.CanBeDropped then --TODO: HopperBins
				-- tool.Parent = workspace
				-- --TODO: Move away from character
				-- end
				if slot.Index <= NumberOfHotbarSlots then
					slot:MoveToInventory() --NOTE: Temporary
				end
			end

			lastUpTime = now
		end)
	end

	-- All ready!
	SlotFrame.Parent = parent
	Slots[index] = slot

	if index > NumberOfHotbarSlots then
		UpdateScrollingFrameCanvasSize()
		-- Scroll to new inventory slot, if we're open and not viewing search results
		if InventoryFrame.Visible and not ViewingSearchResults then
			local offset: number = ScrollingFrame.CanvasSize.Y.Offset - ScrollingFrame.AbsoluteSize.Y
			ScrollingFrame.CanvasPosition = Vector2.new(0, math.max(0, offset))
		end
	end

	return slot
end

local function OnChildAdded(child: Instance): () -- To Character or Backpack
	if not child:IsA("Tool") and not child:IsA("HopperBin") then --NOTE: HopperBin
		if child:IsA("Humanoid") and child.Parent == Character then
			Humanoid = child
		end
		return
	end
	local tool: any = child

	if tool.Parent == Character then
		ShowVRBackpackPopup()
	end

	if ActiveHopper and tool.Parent == Character then --NOTE: HopperBin
		DisableActiveHopper()
	end

	--TODO: Optimize / refactor / do something else
	if not StarterToolFound and tool.Parent == Character and not SlotsByTool[tool] then
		local starterGear: Instance? = Player:FindFirstChild("StarterGear")
		if starterGear then
			if starterGear:FindFirstChild(tool.Name) then
				StarterToolFound = true
				local slot: any = LowestEmptySlot or MakeSlot(UIGridFrame)
				for i: number = slot.Index, 1, -1 do
					local curr = Slots[i] -- An empty slot, because above
					local pIndex: number = i - 1
					if pIndex > 0 then
						local prev = Slots[pIndex] -- Guaranteed to be full, because above
						prev:Swap(curr)
					else
						curr:Fill(tool)
					end
				end
				-- Have to manually unequip a possibly equipped tool
				for _, children: Instance in pairs(Character:GetChildren()) do
					if children:IsA("Tool") and children ~= tool then
						children.Parent = Backpack
					end
				end
				AdjustHotbarFrames()
				return -- We're done here
			end
		end
	end

	-- The tool is either moving or new
	local slot: any = SlotsByTool[tool]
	if slot then
		slot:UpdateEquipView()
	else -- New! Put into lowest hotbar slot or new inventory slot
		slot = LowestEmptySlot or MakeSlot(UIGridFrame)
		slot:Fill(tool)
		if slot.Index <= NumberOfHotbarSlots and not InventoryFrame.Visible then
			AdjustHotbarFrames()
		end
		if tool:IsA("HopperBin") then --NOTE: HopperBin
			if tool.Active then
				UnequipAllTools()
				ActiveHopper = tool
			end
		end
	end

	BackpackScript.BackpackItemAdded:Fire()
end

local function OnChildRemoved(child: Instance): () -- From Character or Backpack
	if not child:IsA("Tool") and not child:IsA("HopperBin") then --NOTE: HopperBin
		return
	end
	local tool: Tool | any = child

	ShowVRBackpackPopup()

	-- Ignore this event if we're just moving between the two
	local newParent: any = tool.Parent
	if newParent == Character or newParent == Backpack then
		return
	end

	local slot: any = SlotsByTool[tool]
	if slot then
		slot:Clear()
		if slot.Index > NumberOfHotbarSlots then -- Inventory slot
			slot:Delete()
		elseif not InventoryFrame.Visible then
			AdjustHotbarFrames()
		end
	end

	if tool :: any == ActiveHopper then --NOTE: HopperBin
		ActiveHopper = nil :: any
	end

	BackpackScript.BackpackItemRemoved:Fire()
	if isInventoryEmpty() then
		BackpackScript.BackpackEmpty:Fire()
	end
end

local function OnCharacterAdded(character: Model): ()
	-- First, clean up any old slots
	for i: number = #Slots, 1, -1 do
		local slot = Slots[i]
		if slot.Tool then
			slot:Clear()
		end
		if i > NumberOfHotbarSlots then
			slot:Delete()
		end
	end
	ActiveHopper = nil :: any --NOTE: HopperBin

	-- And any old Connections
	for _, conn: RBXScriptConnection in pairs(CharConns) do
		conn:Disconnect()
	end
	CharConns = {}

	-- Hook up the new character
	Character = character
	table.insert(CharConns, character.ChildRemoved:Connect(OnChildRemoved))
	table.insert(CharConns, character.ChildAdded:Connect(OnChildAdded))
	for _, child: Instance in pairs(character:GetChildren()) do
		OnChildAdded(child)
	end
	--NOTE: Humanoid is set inside OnChildAdded

	-- And the new backpack, when it gets here
	Backpack = Player:WaitForChild("Backpack")
	table.insert(CharConns, Backpack.ChildRemoved:Connect(OnChildRemoved))
	table.insert(CharConns, Backpack.ChildAdded:Connect(OnChildAdded))
	for _, child: Instance in pairs(Backpack:GetChildren()) do
		OnChildAdded(child)
	end

	AdjustHotbarFrames()
end

local function OnInputBegan(input: InputObject, isProcessed: boolean): ()
	local ChatInputBarConfiguration =
		TextChatService:FindFirstChildOfClass("ChatInputBarConfiguration") :: ChatInputBarConfiguration
	-- Pass through keyboard hotkeys when not typing into a TextBox and not disabled (except for the Drop key)
	if
		input.UserInputType == Enum.UserInputType.Keyboard
		and not TextBoxFocused
		and not ChatInputBarConfiguration.IsFocused
		and (WholeThingEnabled or input.KeyCode.Value == DROP_HOTKEY_VALUE)
	then
		local hotkeyBehavior: any = HotkeyFns[input.KeyCode.Value]
		if hotkeyBehavior then
			hotkeyBehavior(isProcessed)
		end
	end

	local inputType: Enum.UserInputType = input.UserInputType
	if not isProcessed then
		if inputType == Enum.UserInputType.MouseButton1 or inputType == Enum.UserInputType.Touch then
			if InventoryFrame.Visible then
				inventoryIcon:deselect()
			end
		end
	end
end

local function OnUISChanged(): ()
	-- Detect if player is using Touch
	if UserInputService:GetLastInputType() == Enum.UserInputType.Touch then
		for i: number = 1, NumberOfHotbarSlots do
			Slots[i]:TurnNumber(false)
		end
		return
	end

	-- Detect if player is using Keyboard
	if UserInputService:GetLastInputType() == Enum.UserInputType.Keyboard then
		for i: number = 1, NumberOfHotbarSlots do
			Slots[i]:TurnNumber(true)
		end
		return
	end

	-- Detect if player is using Mouse
	for _, mouse: any in pairs(MOUSE_INPUT_TYPES) do
		if UserInputService:GetLastInputType() == mouse then
			for i: number = 1, NumberOfHotbarSlots do
				Slots[i]:TurnNumber(true)
			end
			return
		end
	end

	-- Detect if player is using Controller
	for _, gamepad: any in pairs(GAMEPAD_INPUT_TYPES) do
		if UserInputService:GetLastInputType() == gamepad then
			for i: number = 1, NumberOfHotbarSlots do
				Slots[i]:TurnNumber(false)
			end
			return
		end
	end
end

local lastChangeToolInputObject: InputObject = nil
local lastChangeToolInputTime: number = nil
local maxEquipDeltaTime: number = 0.06
local noOpFunc = function() end
-- local selectDirection = Vector2.new(0, 0)

function unbindAllGamepadEquipActions(): ()
	ContextActionService:UnbindAction("BackpackHasGamepadFocus")
	ContextActionService:UnbindAction("BackpackCloseInventory")
end

-- local function setHotbarVisibility(visible: boolean, isInventoryScreen: boolean)
-- 	for i: number = 1, NumberOfHotbarSlots do
-- 		local hotbarSlot = Slots[i]
-- 		if hotbarSlot and hotbarSlot.Frame and (isInventoryScreen or hotbarSlot.Tool) then
-- 			hotbarSlot.Frame.Visible = visible
-- 		end
-- 	end
-- end

-- local function getInputDirection(inputObject: InputObject): Vector2
-- 	local buttonModifier = 1
-- 	if inputObject.UserInputState == Enum.UserInputState.End then
-- 		buttonModifier = -1
-- 	end

-- 	if inputObject.KeyCode == Enum.KeyCode.Thumbstick1 then
-- 		local Magnitude = inputObject.Position.Magnitude

-- 		if Magnitude > 0.98 then
-- 			local normalizedVector =
-- 				Vector2.new(inputObject.Position.X / Magnitude, -inputObject.Position.Y / Magnitude)
-- 			selectDirection = normalizedVector
-- 		else
-- 			selectDirection = Vector2.new(0, 0)
-- 		end
-- 	elseif inputObject.KeyCode == Enum.KeyCode.DPadLeft then
-- 		selectDirection = Vector2.new(selectDirection.X - 1 * buttonModifier, selectDirection.Y)
-- 	elseif inputObject.KeyCode == Enum.KeyCode.DPadRight then
-- 		selectDirection = Vector2.new(selectDirection.X + 1 * buttonModifier, selectDirection.Y)
-- 	elseif inputObject.KeyCode == Enum.KeyCode.DPadUp then
-- 		selectDirection = Vector2.new(selectDirection.X, selectDirection.Y - 1 * buttonModifier)
-- 	elseif inputObject.KeyCode == Enum.KeyCode.DPadDown then
-- 		selectDirection = Vector2.new(selectDirection.X, selectDirection.Y + 1 * buttonModifier)
-- 	else
-- 		selectDirection = Vector2.new(0, 0)
-- 	end

-- 	return selectDirection
-- end

-- local selectToolExperiment = function(actionName: string, inputState: Enum.UserInputState, inputObject: InputObject)
-- 	local inputDirection = getInputDirection(inputObject)

-- 	if inputDirection == Vector2.new(0, 0) then
-- 		return
-- 	end

-- 	local angle = math.atan2(inputDirection.Y, inputDirection.X) - math.atan2(-1, 0)
-- 	if angle < 0 then
-- 		angle = angle + (math.pi * 2)
-- 	end

-- 	local quarterPi = (math.pi * 0.25)

-- 	local index = (angle / quarterPi) + 1
-- 	index = math.floor(index + 0.5) -- round index to whole number
-- 	if index > NumberOfHotbarSlots then
-- 		index = 1
-- 	end

-- 	if index > 0 then
-- 		local selectedSlot = Slots[index]
-- 		if selectedSlot and selectedSlot.Tool and not selectedSlot:IsEquipped() then
-- 			selectedSlot:Select()
-- 		end
-- 	else
-- 		UnequipAllTools()
-- 	end
-- end

-- selene: allow(unused_variable)
changeToolFunc = function(actionName: string, inputState: Enum.UserInputState, inputObject: InputObject): ()
	if inputState ~= Enum.UserInputState.Begin then
		return
	end

	if lastChangeToolInputObject then
		if
			(
				lastChangeToolInputObject.KeyCode == Enum.KeyCode.ButtonR1
					and inputObject.KeyCode == Enum.KeyCode.ButtonL1
			)
				or (
					lastChangeToolInputObject.KeyCode == Enum.KeyCode.ButtonL1
					and inputObject.KeyCode == Enum.KeyCode.ButtonR1
				)
		then
			if (os.clock() - lastChangeToolInputTime) <= maxEquipDeltaTime then
				UnequipAllTools()
				lastChangeToolInputObject = inputObject
				lastChangeToolInputTime = os.clock()
				return
			end
		end
	end

	lastChangeToolInputObject = inputObject
	lastChangeToolInputTime = os.clock()

	task.delay(maxEquipDeltaTime, function(): ()
		if lastChangeToolInputObject ~= inputObject then
			return
		end

		local moveDirection: number = 0
		if inputObject.KeyCode == Enum.KeyCode.ButtonL1 then
			moveDirection = -1
		else
			moveDirection = 1
		end

		for i: number = 1, NumberOfHotbarSlots do
			local hotbarSlot: any = Slots[i]
			if hotbarSlot:IsEquipped() then
				local newSlotPosition: number = moveDirection + i
				local hitEdge: boolean = false
				if newSlotPosition > NumberOfHotbarSlots then
					newSlotPosition = 1
					hitEdge = true
				elseif newSlotPosition < 1 then
					newSlotPosition = NumberOfHotbarSlots
					hitEdge = true
				end

				local origNewSlotPos: number = newSlotPosition
				while not Slots[newSlotPosition].Tool do
					newSlotPosition = newSlotPosition + moveDirection
					if newSlotPosition == origNewSlotPos then
						return
					end

					if newSlotPosition > NumberOfHotbarSlots then
						newSlotPosition = 1
						hitEdge = true
					elseif newSlotPosition < 1 then
						newSlotPosition = NumberOfHotbarSlots
						hitEdge = true
					end
				end

				if hitEdge then
					UnequipAllTools()
					lastEquippedSlot = nil
				else
					Slots[newSlotPosition]:Select()
				end
				return
			end
		end

		if lastEquippedSlot and lastEquippedSlot.Tool then
			lastEquippedSlot:Select()
			return
		end

		local startIndex: number = moveDirection == -1 and NumberOfHotbarSlots or 1
		local endIndex: number = moveDirection == -1 and 1 or NumberOfHotbarSlots
		for i: number = startIndex, endIndex, moveDirection do
			if Slots[i].Tool then
				Slots[i]:Select()
				return
			end
		end
	end)
end

function getGamepadSwapSlot(): any
	for i: number = 1, #Slots do
		if Slots[i].Frame.BorderSizePixel > 0 then
			return Slots[i]
		end
	end
	return
end

-- selene: allow(unused_variable)
function changeSlot(slot: any): ()
	local swapInVr: boolean = not VRService.VREnabled or InventoryFrame.Visible

	if slot.Frame == GuiService.SelectedObject and swapInVr then
		local currentlySelectedSlot: any = getGamepadSwapSlot()

		if currentlySelectedSlot then
			currentlySelectedSlot.Frame.BorderSizePixel = 0
			if currentlySelectedSlot ~= slot then
				slot:Swap(currentlySelectedSlot)
				VRInventorySelector.SelectionImageObject.Visible = false

				if slot.Index > NumberOfHotbarSlots and not slot.Tool then
					if GuiService.SelectedObject == slot.Frame then
						GuiService.SelectedObject = currentlySelectedSlot.Frame
					end
					slot:Delete()
				end

				if currentlySelectedSlot.Index > NumberOfHotbarSlots and not currentlySelectedSlot.Tool then
					if GuiService.SelectedObject == currentlySelectedSlot.Frame then
						GuiService.SelectedObject = slot.Frame
					end
					currentlySelectedSlot:Delete()
				end
			end
		else
			local startSize: UDim2 = slot.Frame.Size
			local startPosition: UDim2 = slot.Frame.Position
			slot.Frame:TweenSizeAndPosition(
				startSize + UDim2.new(0, 10, 0, 10),
				startPosition - UDim2.new(0, 5, 0, 5),
				Enum.EasingDirection.Out,
				Enum.EasingStyle.Quad,
				0.1,
				true,
				function(): ()
					slot.Frame:TweenSizeAndPosition(
						startSize,
						startPosition,
						Enum.EasingDirection.In,
						Enum.EasingStyle.Quad,
						0.1,
						true
					)
				end
			)
			slot.Frame.BorderSizePixel = 3
			VRInventorySelector.SelectionImageObject.Visible = true
		end
	else
		slot:Select()
		VRInventorySelector.SelectionImageObject.Visible = false
	end
end

function vrMoveSlotToInventory(): ()
	if not VRService.VREnabled then
		return
	end

	local currentlySelectedSlot: any = getGamepadSwapSlot()
	if currentlySelectedSlot and currentlySelectedSlot.Tool then
		currentlySelectedSlot.Frame.BorderSizePixel = 0
		currentlySelectedSlot:MoveToInventory()
		VRInventorySelector.SelectionImageObject.Visible = false
	end
end

function enableGamepadInventoryControl(): ()
	local goBackOneLevel = function(): ()
		-- if inputState ~= Enum.UserInputState.Begin then
		-- 	return
		-- end

		local selectedSlot: any = getGamepadSwapSlot()
		if selectedSlot then
			-- selene: allow(shadowing)
			local selectedSlot: any = getGamepadSwapSlot()
			if selectedSlot then
				selectedSlot.Frame.BorderSizePixel = 0
				return
			end
		elseif InventoryFrame.Visible then
			inventoryIcon:deselect()
		end
	end

	ContextActionService:BindAction("BackpackHasGamepadFocus", noOpFunc, false, Enum.UserInputType.Gamepad1)
	ContextActionService:BindAction(
		"BackpackCloseInventory",
		goBackOneLevel,
		false,
		Enum.KeyCode.ButtonB,
		Enum.KeyCode.ButtonStart
	)

	-- Gaze select will automatically select the object for us!
	if not UseGazeSelection() then
		GuiService.SelectedObject = HotbarFrame:FindFirstChild("1")
	end
end

function disableGamepadInventoryControl(): ()
	unbindAllGamepadEquipActions()

	for i: number = 1, NumberOfHotbarSlots do
		local hotbarSlot: any = Slots[i]
		if hotbarSlot and hotbarSlot.Frame then
			hotbarSlot.Frame.BorderSizePixel = 0
		end
	end

	if GuiService.SelectedObject and GuiService.SelectedObject:IsDescendantOf(MainFrame) then
		GuiService.SelectedObject = nil
	end
end

local function bindBackpackHotbarAction(): ()
	if WholeThingEnabled and not GamepadActionsBound then
		GamepadActionsBound = true
		ContextActionService:BindAction(
			"BackpackHotbarEquip",
			changeToolFunc,
			false,
			Enum.KeyCode.ButtonL1,
			Enum.KeyCode.ButtonR1
		)
	end
end

local function unbindBackpackHotbarAction(): ()
	disableGamepadInventoryControl()
	GamepadActionsBound = false
	ContextActionService:UnbindAction("BackpackHotbarEquip")
end

function gamepadDisconnected(): ()
	GamepadEnabled = false
	disableGamepadInventoryControl()
end

function gamepadConnected(): ()
	GamepadEnabled = true
	GuiService:AddSelectionParent("BackpackSelection", MainFrame)

	if FullHotbarSlots >= 1 then
		bindBackpackHotbarAction()
	end

	if InventoryFrame.Visible then
		enableGamepadInventoryControl()
	end
end

local function OnIconChanged(enabled: boolean): ()
	-- Check for enabling/disabling the whole thing
	enabled = enabled and StarterGui:GetCore("TopbarEnabled")
	WholeThingEnabled = enabled
	MainFrame.Visible = enabled

	-- Eat/Release hotkeys (Doesn't affect UserInputService)
	-- for _, keyString in pairs(HotkeyStrings) do
	-- 	if enabled then
	-- 		GuiService:AddKey(keyString)
	-- 	else
	-- 		GuiService:RemoveKey(keyString)
	-- 	end
	-- end

	if enabled then
		if FullHotbarSlots >= 1 then
			bindBackpackHotbarAction()
		end
	else
		unbindBackpackHotbarAction()
	end
end

local function MakeVRRoundButton(name: string, image: string): (ImageButton, ImageLabel, ImageLabel)
	local newButton: ImageButton = Instance.new("ImageButton")
	newButton.BackgroundTransparency = 1
	newButton.Name = name
	newButton.Size = UDim2.new(0, 40, 0, 40)
	newButton.Image = "rbxasset://textures/ui/Keyboard/close_button_background.png"

	local buttonIcon: ImageLabel = Instance.new("ImageLabel")
	buttonIcon.Name = "Icon"
	buttonIcon.BackgroundTransparency = 1
	buttonIcon.Size = UDim2.new(0.5, 0, 0.5, 0)
	buttonIcon.Position = UDim2.new(0.25, 0, 0.25, 0)
	buttonIcon.Image = image
	buttonIcon.Parent = newButton

	local buttonSelectionObject: ImageLabel = Instance.new("ImageLabel")
	buttonSelectionObject.BackgroundTransparency = 1
	buttonSelectionObject.Name = "Selection"
	buttonSelectionObject.Size = UDim2.new(0.9, 0, 0.9, 0)
	buttonSelectionObject.Position = UDim2.new(0.05, 0, 0.05, 0)
	buttonSelectionObject.Image = "rbxasset://textures/ui/Keyboard/close_button_selection.png"
	newButton.SelectionImageObject = buttonSelectionObject

	return newButton, buttonIcon, buttonSelectionObject
end

-- Make the main frame, which (mostly) covers the screen
MainFrame = Instance.new("Frame")
MainFrame.BackgroundTransparency = 1
MainFrame.Name = "Backpack"
MainFrame.Size = UDim2.new(1, 0, 1, 0)
MainFrame.Visible = false
MainFrame.Parent = BackpackGui

-- Make the HotbarFrame, which holds only the Hotbar Slots
HotbarFrame = Instance.new("Frame")
HotbarFrame.BackgroundTransparency = 1
HotbarFrame.Name = "Hotbar"
HotbarFrame.Size = UDim2.new(1, 0, 1, 0)
HotbarFrame.Parent = MainFrame

local glassmorphicUIModule = script.Parent.GlassmorphicUI
local glassmorphicUI = require(glassmorphicUIModule)

-- Make all the Hotbar Slots
for index: number = 1, NumberOfHotbarSlots do
	local slot: any = MakeSlot(HotbarFrame, index)
	local frame = slot.Frame :: Frame
	frame.Visible = false

	local glass = glassmorphicUI.addGlassBackground(frame)
	Instance.new("UIGradient", glass)

	frame:GetPropertyChangedSignal("Visible"):Connect(function(...: any) 
		if frame.Visible then
			glassmorphicUI.resumeUpdates(glass)
		else
			glassmorphicUI.pauseUpdates(glass)
		end
	end)

	glassmorphicUI.pauseUpdates(glass)

	script.Shadow:Clone().Parent = frame

	if not LowestEmptySlot then
		LowestEmptySlot = slot
	end
end

local LeftBumperButton: ImageLabel = Instance.new("ImageLabel")
LeftBumperButton.BackgroundTransparency = 1
LeftBumperButton.Name = "LeftBumper"
LeftBumperButton.Size = UDim2.new(0, 40, 0, 40)
LeftBumperButton.Position = UDim2.new(0, -LeftBumperButton.Size.X.Offset, 0.5, -LeftBumperButton.Size.Y.Offset / 2)

local RightBumperButton: ImageLabel = Instance.new("ImageLabel")
RightBumperButton.BackgroundTransparency = 1
RightBumperButton.Name = "RightBumper"
RightBumperButton.Size = UDim2.new(0, 40, 0, 40)
RightBumperButton.Position = UDim2.new(1, 0, 0.5, -RightBumperButton.Size.Y.Offset / 2)

-- Make the Inventory, which holds the ScrollingFrame, the header, and the search box
InventoryFrame = Instance.new("Frame")
InventoryFrame.Name = "Inventory"
InventoryFrame.Size = UDim2.new(1, 0, 1, 0)
InventoryFrame.BackgroundTransparency = BACKGROUND_TRANSPARENCY
InventoryFrame.BackgroundColor3 = BACKGROUND_COLOR
InventoryFrame.Active = true
InventoryFrame.Visible = false
InventoryFrame.Parent = MainFrame

-- Add corners to the InventoryFrame
local corner: UICorner = Instance.new("UICorner")
corner.Name = "Corner"
corner.CornerRadius = BACKGROUND_CORNER_RADIUS
corner.Parent = InventoryFrame

local glass = glassmorphicUI.addGlassBackground(InventoryFrame)
Instance.new("UIGradient", glass)

glassmorphicUI.pauseUpdates(glass)

InventoryFrame:GetPropertyChangedSignal("Visible"):Connect(function(...: any) 
	if InventoryFrame.Visible then
		glassmorphicUI.resumeUpdates(glass)
	else
		glassmorphicUI.pauseUpdates(glass)
	end
end)

script.Shadow:Clone().Parent = InventoryFrame

VRInventorySelector = Instance.new("TextButton")
VRInventorySelector.Name = "VRInventorySelector"
VRInventorySelector.Position = UDim2.new(0, 0, 0, 0)
VRInventorySelector.Size = UDim2.new(1, 0, 1, 0)
VRInventorySelector.BackgroundTransparency = 1
VRInventorySelector.Text = ""
VRInventorySelector.Parent = InventoryFrame

local selectorImage: ImageLabel = Instance.new("ImageLabel")
selectorImage.BackgroundTransparency = 1
selectorImage.Name = "Selector"
selectorImage.Size = UDim2.new(1, 0, 1, 0)
selectorImage.Image = "rbxasset://textures/ui/Keyboard/key_selection_9slice.png"
selectorImage.ScaleType = Enum.ScaleType.Slice
selectorImage.SliceCenter = Rect.new(12, 12, 52, 52)
selectorImage.Visible = false
VRInventorySelector.SelectionImageObject = selectorImage

VRInventorySelector.MouseButton1Click:Connect(function(): ()
	vrMoveSlotToInventory()
end)

-- Make the ScrollingFrame, which holds the rest of the Slots (however many)
ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Name = "ScrollingFrame"
ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
ScrollingFrame.Selectable = false
ScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.ScrollBarThickness = 8
ScrollingFrame.ScrollBarImageColor3 = Color3.new(1, 1, 1)
ScrollingFrame.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.Parent = InventoryFrame

UIGridFrame = Instance.new("Frame")
UIGridFrame.BackgroundTransparency = 1
UIGridFrame.Name = "UIGridFrame"
UIGridFrame.Selectable = false
UIGridFrame.Size = UDim2.new(1, -(ICON_BUFFER_PIXELS * 2), 1, 0)
UIGridFrame.Position = UDim2.new(0, ICON_BUFFER_PIXELS, 0, 0)
UIGridFrame.Parent = ScrollingFrame

UIGridLayout = Instance.new("UIGridLayout")
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.CellSize = UDim2.new(0, ICON_SIZE_PIXELS, 0, ICON_SIZE_PIXELS)
UIGridLayout.CellPadding = UDim2.new(0, ICON_BUFFER_PIXELS, 0, ICON_BUFFER_PIXELS)
UIGridLayout.Parent = UIGridFrame

ScrollUpInventoryButton = MakeVRRoundButton("ScrollUpButton", "rbxasset://textures/ui/Backpack/ScrollUpArrow.png")
ScrollUpInventoryButton.Size = UDim2.new(0, 34, 0, 34)
ScrollUpInventoryButton.Position =
	UDim2.new(0.5, -ScrollUpInventoryButton.Size.X.Offset / 2, 0, INVENTORY_HEADER_SIZE + 3)
ScrollUpInventoryButton.Icon.Position = ScrollUpInventoryButton.Icon.Position - UDim2.new(0, 0, 0, 2)
ScrollUpInventoryButton.MouseButton1Click:Connect(function(): ()
	ScrollingFrame.CanvasPosition = Vector2.new(
		ScrollingFrame.CanvasPosition.X,
		Clamp(
			0,
			ScrollingFrame.CanvasSize.Y.Offset - ScrollingFrame.AbsoluteWindowSize.Y,
			ScrollingFrame.CanvasPosition.Y - (ICON_BUFFER_PIXELS + ICON_SIZE_PIXELS)
		)
	)
end)

ScrollDownInventoryButton = MakeVRRoundButton("ScrollDownButton", "rbxasset://textures/ui/Backpack/ScrollUpArrow.png")
ScrollDownInventoryButton.Rotation = 180
ScrollDownInventoryButton.Icon.Position = ScrollDownInventoryButton.Icon.Position - UDim2.new(0, 0, 0, 2)
ScrollDownInventoryButton.Size = UDim2.new(0, 34, 0, 34)
ScrollDownInventoryButton.Position =
	UDim2.new(0.5, -ScrollDownInventoryButton.Size.X.Offset / 2, 1, -ScrollDownInventoryButton.Size.Y.Offset - 3)
ScrollDownInventoryButton.MouseButton1Click:Connect(function(): ()
	ScrollingFrame.CanvasPosition = Vector2.new(
		ScrollingFrame.CanvasPosition.X,
		Clamp(
			0,
			ScrollingFrame.CanvasSize.Y.Offset - ScrollingFrame.AbsoluteWindowSize.Y,
			ScrollingFrame.CanvasPosition.Y + (ICON_BUFFER_PIXELS + ICON_SIZE_PIXELS)
		)
	)
end)

ScrollingFrame.Changed:Connect(function(prop: string): ()
	if prop == "AbsoluteWindowSize" or prop == "CanvasPosition" or prop == "CanvasSize" then
		local canScrollUp: boolean = ScrollingFrame.CanvasPosition.Y ~= 0
		local canScrollDown: boolean = ScrollingFrame.CanvasPosition.Y
			< ScrollingFrame.CanvasSize.Y.Offset - ScrollingFrame.AbsoluteWindowSize.Y

		ScrollUpInventoryButton.Visible = canScrollUp
		ScrollDownInventoryButton.Visible = canScrollDown
	end
end)

-- Position the frames and sizes for the Backpack GUI elements
UpdateBackpackLayout()

--Make the gamepad hint frame
local gamepadHintsFrame: Frame = Instance.new("Frame")
gamepadHintsFrame.Name = "GamepadHintsFrame"
gamepadHintsFrame.Size = UDim2.new(0, HotbarFrame.Size.X.Offset, 0, (IsTenFootInterface and 95 or 60))
gamepadHintsFrame.BackgroundTransparency = BACKGROUND_TRANSPARENCY
gamepadHintsFrame.BackgroundColor3 = BACKGROUND_COLOR
gamepadHintsFrame.Visible = false
gamepadHintsFrame.Parent = MainFrame

local gamepadHintsFrameLayout: UIListLayout = Instance.new("UIListLayout")
gamepadHintsFrameLayout.Name = "Layout"
gamepadHintsFrameLayout.Padding = UDim.new(0, 25)
gamepadHintsFrameLayout.FillDirection = Enum.FillDirection.Horizontal
gamepadHintsFrameLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
gamepadHintsFrameLayout.SortOrder = Enum.SortOrder.LayoutOrder
gamepadHintsFrameLayout.Parent = gamepadHintsFrame

local gamepadHintsFrameCorner: UICorner = Instance.new("UICorner")
gamepadHintsFrameCorner.Name = "Corner"
gamepadHintsFrameCorner.CornerRadius = BACKGROUND_CORNER_RADIUS
gamepadHintsFrameCorner.Parent = gamepadHintsFrame

local function addGamepadHint(hintImageString: string, hintTextString: string): ()
	local hintFrame: Frame = Instance.new("Frame")
	hintFrame.Name = "HintFrame"
	hintFrame.AutomaticSize = Enum.AutomaticSize.XY
	hintFrame.BackgroundTransparency = 1
	hintFrame.Parent = gamepadHintsFrame

	local hintLayout: UIListLayout = Instance.new("UIListLayout")
	hintLayout.Name = "Layout"
	hintLayout.Padding = (IsTenFootInterface and UDim.new(0, 20) or UDim.new(0, 12))
	hintLayout.FillDirection = Enum.FillDirection.Horizontal
	hintLayout.SortOrder = Enum.SortOrder.LayoutOrder
	hintLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	hintLayout.Parent = hintFrame

	local hintImage: ImageLabel = Instance.new("ImageLabel")
	hintImage.Name = "HintImage"
	hintImage.Size = (IsTenFootInterface and UDim2.new(0, 60, 0, 60) or UDim2.new(0, 30, 0, 30))
	hintImage.BackgroundTransparency = 1
	hintImage.Image = hintImageString
	hintImage.Parent = hintFrame

	local hintText: TextLabel = Instance.new("TextLabel")
	hintText.Name = "HintText"
	hintText.AutomaticSize = Enum.AutomaticSize.XY
	hintText.FontFace = Font.new(FONT_FAMILY.Family, Enum.FontWeight.Medium, Enum.FontStyle.Normal)
	hintText.TextSize = (IsTenFootInterface and 32 or 19)
	hintText.BackgroundTransparency = 1
	hintText.Text = hintTextString
	hintText.TextColor3 = Color3.new(1, 1, 1)
	hintText.TextXAlignment = Enum.TextXAlignment.Left
	hintText.TextYAlignment = Enum.TextYAlignment.Center
	hintText.TextWrapped = true
	hintText.Parent = hintFrame

	local textSizeConstraint: UITextSizeConstraint = Instance.new("UITextSizeConstraint")
	textSizeConstraint.MaxTextSize = hintText.TextSize
	textSizeConstraint.Parent = hintText
end

addGamepadHint(UserInputService:GetImageForKeyCode(Enum.KeyCode.ButtonX), "Remove From Hotbar")
addGamepadHint(UserInputService:GetImageForKeyCode(Enum.KeyCode.ButtonA), "Select/Swap")
addGamepadHint(UserInputService:GetImageForKeyCode(Enum.KeyCode.ButtonB), "Close Backpack")

local function resizeGamepadHintsFrame(): ()
	gamepadHintsFrame.Size =
		UDim2.new(HotbarFrame.Size.X.Scale, HotbarFrame.Size.X.Offset, 0, (IsTenFootInterface and 95 or 60))
	gamepadHintsFrame.Position = UDim2.new(
		HotbarFrame.Position.X.Scale,
		HotbarFrame.Position.X.Offset,
		InventoryFrame.Position.Y.Scale,
		InventoryFrame.Position.Y.Offset - gamepadHintsFrame.Size.Y.Offset - ICON_BUFFER_PIXELS
	)

	local spaceTaken: number = 0

	local gamepadHints: { Instance } = gamepadHintsFrame:GetChildren()
	local filteredGamepadHints: any = {}

	for _, child: Instance in pairs(gamepadHints) do
		if child:IsA("GuiObject") then
			table.insert(filteredGamepadHints, child)
		end
	end

	--First get the total space taken by all the hints
	for guiObjects = 1, #filteredGamepadHints do
		if filteredGamepadHints[guiObjects]:IsA("GuiObject") then
			filteredGamepadHints[guiObjects].Size = UDim2.new(1, 0, 1, -5)
			filteredGamepadHints[guiObjects].Position = UDim2.new(0, 0, 0, 0)
			spaceTaken = spaceTaken
				+ (
					filteredGamepadHints[guiObjects].HintText.Position.X.Offset
					+ filteredGamepadHints[guiObjects].HintText.TextBounds.X
				)
		end
	end

	--The space between all the frames should be equal
	local spaceBetweenElements: number = (gamepadHintsFrame.AbsoluteSize.X - spaceTaken) / (#filteredGamepadHints - 1)
	for i: number = 1, #filteredGamepadHints do
		filteredGamepadHints[i].Position = (
			i == 1 and UDim2.new(0, 0, 0, 0)
				or UDim2.new(
					0,
					filteredGamepadHints[i - 1].Position.X.Offset
					+ filteredGamepadHints[i - 1].Size.X.Offset
					+ spaceBetweenElements,
					0,
					0
				)
		)
		filteredGamepadHints[i].Size = UDim2.new(
			0,
			(filteredGamepadHints[i].HintText.Position.X.Offset + filteredGamepadHints[i].HintText.TextBounds.X),
			1,
			-5
		)
	end
end

local searchFrame: Frame = Instance.new("Frame")
do -- Search stuff
	searchFrame.Name = "Search"
	searchFrame.BackgroundColor3 = SEARCH_BACKGROUND_COLOR
	searchFrame.BackgroundTransparency = SEARCH_BACKGROUND_TRANSPARENCY
	searchFrame.Size = UDim2.new(
		0,
		SEARCH_WIDTH_PIXELS - (SEARCH_BUFFER_PIXELS * 2),
		0,
		INVENTORY_HEADER_SIZE - (SEARCH_BUFFER_PIXELS * 2)
	)
	searchFrame.Position = UDim2.new(1, -searchFrame.Size.X.Offset - SEARCH_BUFFER_PIXELS, 0, SEARCH_BUFFER_PIXELS)
	searchFrame.Parent = InventoryFrame

	local searchFrameCorner: UICorner = Instance.new("UICorner")
	searchFrameCorner.Name = "Corner"
	searchFrameCorner.CornerRadius = SEARCH_CORNER_RADIUS
	searchFrameCorner.Parent = searchFrame

	local searchFrameBorder: UIStroke = Instance.new("UIStroke")
	searchFrameBorder.Name = "Border"
	searchFrameBorder.Color = SEARCH_BORDER_COLOR
	searchFrameBorder.Thickness = SEARCH_BORDER_THICKNESS
	searchFrameBorder.Transparency = SEARCH_BORDER_TRANSPARENCY
	searchFrameBorder.Parent = searchFrame

	local searchBox: TextBox = Instance.new("TextBox")
	searchBox.BackgroundTransparency = 1
	searchBox.Name = "TextBox"
	searchBox.Text = ""
	searchBox.TextColor3 = TEXT_COLOR
	searchBox.TextStrokeTransparency = TEXT_STROKE_TRANSPARENCY
	searchBox.TextStrokeColor3 = TEXT_STROKE_COLOR
	searchBox.FontFace = Font.new(FONT_FAMILY.Family, Enum.FontWeight.Medium, Enum.FontStyle.Normal)
	searchBox.PlaceholderText = SEARCH_TEXT_PLACEHOLDER
	searchBox.TextColor3 = TEXT_COLOR
	searchBox.TextTransparency = TEXT_STROKE_TRANSPARENCY
	searchBox.TextStrokeColor3 = TEXT_STROKE_COLOR
	searchBox.ClearTextOnFocus = false
	searchBox.TextTruncate = Enum.TextTruncate.AtEnd
	searchBox.TextSize = FONT_SIZE
	searchBox.TextXAlignment = Enum.TextXAlignment.Left
	searchBox.TextYAlignment = Enum.TextYAlignment.Center
	searchBox.Size = UDim2.new(
		0,
		(SEARCH_WIDTH_PIXELS - (SEARCH_BUFFER_PIXELS * 2)) - (SEARCH_TEXT_OFFSET * 2) - 20,
		0,
		INVENTORY_HEADER_SIZE - (SEARCH_BUFFER_PIXELS * 2) - (SEARCH_TEXT_OFFSET * 2)
	)
	searchBox.AnchorPoint = Vector2.new(0, 0.5)
	searchBox.Position = UDim2.new(0, SEARCH_TEXT_OFFSET, 0.5, 0)
	searchBox.ZIndex = 2
	searchBox.Parent = searchFrame

	local xButton: TextButton = Instance.new("TextButton")
	xButton.Name = "X"
	xButton.Text = ""
	xButton.Size = UDim2.new(0, 30, 0, 30)
	xButton.Position = UDim2.new(1, -xButton.Size.X.Offset, 0.5, -xButton.Size.Y.Offset / 2)
	xButton.ZIndex = 4
	xButton.Visible = false
	xButton.BackgroundTransparency = 1
	xButton.Parent = searchFrame

	local xImage: ImageButton = Instance.new("ImageButton")
	xImage.Name = "X"
	xImage.Image = SEARCH_IMAGE_X
	xImage.BackgroundTransparency = 1
	xImage.Size = UDim2.new(
		0,
		searchFrame.Size.Y.Offset - (SEARCH_BUFFER_PIXELS * 4),
		0,
		searchFrame.Size.Y.Offset - (SEARCH_BUFFER_PIXELS * 4)
	)
	xImage.AnchorPoint = Vector2.new(0.5, 0.5)
	xImage.Position = UDim2.new(0.5, 0, 0.5, 0)
	xImage.ZIndex = 1
	xImage.BorderSizePixel = 0
	xImage.Parent = xButton

	local function search(): ()
		local terms: { [string]: boolean } = {}
		for word: string in searchBox.Text:gmatch("%S+") do
			terms[word:lower()] = true
		end

		local hitTable = {}
		for i: number = NumberOfHotbarSlots + 1, #Slots do -- Only search inventory slots
			local slot = Slots[i]
			local hits: any = slot:CheckTerms(terms)
			table.insert(hitTable, { slot, hits })
			slot.Frame.Visible = false
			slot.Frame.Parent = InventoryFrame
		end

		table.sort(hitTable, function(left: any, right: any): boolean
			return left[2] > right[2]
		end)
		ViewingSearchResults = true

		local hitCount: number = 0
		for _, data in ipairs(hitTable) do
			local slot, hits: any = data[1], data[2]
			if hits > 0 then
				slot.Frame.Visible = true
				slot.Frame.Parent = UIGridFrame
				slot.Frame.LayoutOrder = NumberOfHotbarSlots + hitCount
				hitCount = hitCount + 1
			end
		end

		ScrollingFrame.CanvasPosition = Vector2.new(0, 0)
		UpdateScrollingFrameCanvasSize()

		xButton.ZIndex = 3
	end

	local function clearResults(): ()
		if xButton.ZIndex > 0 then
			ViewingSearchResults = false
			for i: number = NumberOfHotbarSlots + 1, #Slots do
				local slot = Slots[i]
				slot.Frame.LayoutOrder = slot.Index
				slot.Frame.Parent = UIGridFrame
				slot.Frame.Visible = true
			end
			xButton.ZIndex = 0
		end
		UpdateScrollingFrameCanvasSize()
	end

	local function reset(): ()
		clearResults()
		searchBox.Text = ""
	end

	local function onChanged(property: string): ()
		if property == "Text" then
			local text: string = searchBox.Text
			if text == "" then
				searchBox.TextTransparency = TEXT_STROKE_TRANSPARENCY
				clearResults()
			elseif text ~= SEARCH_TEXT then
				searchBox.TextTransparency = 0
				search()
			end
			xButton.Visible = text ~= "" and text ~= SEARCH_TEXT
		end
	end

	local function focusLost(enterPressed: boolean): ()
		if enterPressed then
			--TODO: Could optimize
			search()
		end
	end

	xButton.MouseButton1Click:Connect(reset)
	searchBox.Changed:Connect(onChanged)
	searchBox.FocusLost:Connect(focusLost)

	BackpackScript.StateChanged.Event:Connect(function(isNowOpen: boolean): ()
		-- InventoryIcon:getInstance("iconButton").Modal = isNowOpen -- Allows free mouse movement even in first person

		if not isNowOpen then
			reset()
		end
	end)

	HotkeyFns[Enum.KeyCode.Escape.Value] = function(isProcessed: any): ()
		if isProcessed then -- Pressed from within a TextBox
			reset()
		end
	end
	local function detectGamepad(lastInputType: Enum.UserInputType): ()
		if lastInputType == Enum.UserInputType.Gamepad1 and not UserInputService.VREnabled then
			searchFrame.Visible = false
		else
			searchFrame.Visible = true
		end
	end
	UserInputService.LastInputTypeChanged:Connect(detectGamepad)
end

-- When menu is opend, disable backpack
GuiService.MenuOpened:Connect(function(): ()
	BackpackGui.Enabled = false
	inventoryIcon:setEnabled(false)
end)

-- When menu is closed, enable backpack
GuiService.MenuClosed:Connect(function(): ()
	BackpackGui.Enabled = true
	inventoryIcon:setEnabled(true)
end)

do -- Make the Inventory expand/collapse arrow (unless TopBar)
	-- selene: allow(unused_variable)
	local removeHotBarSlot = function(name: string, state: Enum.UserInputState, input: InputObject): ()
		if state ~= Enum.UserInputState.Begin then
			return
		end
		if not GuiService.SelectedObject then
			return
		end

		for i: number = 1, NumberOfHotbarSlots do
			if Slots[i].Frame == GuiService.SelectedObject and Slots[i].Tool then
				Slots[i]:MoveToInventory()
				return
			end
		end
	end

	local function openClose(): ()
		if not next(Dragging) then -- Only continue if nothing is being dragged
			InventoryFrame.Visible = not InventoryFrame.Visible
			local nowOpen: boolean = InventoryFrame.Visible
			AdjustHotbarFrames()
			HotbarFrame.Active = not HotbarFrame.Active
			for i: number = 1, NumberOfHotbarSlots do
				Slots[i]:SetClickability(not nowOpen)
			end
		end

		if InventoryFrame.Visible then
			if GamepadEnabled then
				if GAMEPAD_INPUT_TYPES[UserInputService:GetLastInputType()] then
					resizeGamepadHintsFrame()
					gamepadHintsFrame.Visible = not UserInputService.VREnabled
				end
				enableGamepadInventoryControl()
			end
			if BackpackPanel and VRService.VREnabled then
				BackpackPanel:SetVisible(true)
				BackpackPanel:RequestPositionUpdate()
			end
		else
			if GamepadEnabled then
				gamepadHintsFrame.Visible = false
			end
			disableGamepadInventoryControl()
		end

		if InventoryFrame.Visible then
			ContextActionService:BindAction("BackpackRemoveSlot", removeHotBarSlot, false, Enum.KeyCode.ButtonX)
		else
			ContextActionService:UnbindAction("BackpackRemoveSlot")
		end

		BackpackScript.IsOpen = InventoryFrame.Visible
		BackpackScript.StateChanged:Fire(InventoryFrame.Visible)
	end

	StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)
	BackpackScript.OpenClose = openClose -- Exposed
end

-- Now that we're done building the GUI, we Connect to all the major events

-- Wait for the player if LocalPlayer wasn't ready earlier
while not Player do
	task.wait()
	Player = Players.LocalPlayer
end

-- Listen to current and all future characters of our player
Player.CharacterAdded:Connect(OnCharacterAdded)
if Player.Character then
	OnCharacterAdded(Player.Character)
end

do -- Hotkey stuff
	-- Listen to key down
	UserInputService.InputBegan:Connect(OnInputBegan)

	-- Listen to ANY TextBox gaining or losing focus, for disabling all hotkeys
	UserInputService.TextBoxFocused:Connect(function(): ()
		TextBoxFocused = true
	end)
	UserInputService.TextBoxFocusReleased:Connect(function(): ()
		TextBoxFocused = false
	end)

	-- Manual unequip for HopperBins on drop button pressed
	HotkeyFns[DROP_HOTKEY_VALUE] = function(): () --NOTE: HopperBin
		if ActiveHopper then
			UnequipAllTools()
		end
	end

	-- Listen to keyboard status, for showing/hiding hotkey labels
	UserInputService.LastInputTypeChanged:Connect(OnUISChanged)
	OnUISChanged()

	-- Listen to gamepad status, for allowing gamepad style selection/equip
	if UserInputService:GetGamepadConnected(Enum.UserInputType.Gamepad1) then
		gamepadConnected()
	end
	UserInputService.GamepadConnected:Connect(function(gamepadEnum: Enum.UserInputType): ()
		if gamepadEnum == Enum.UserInputType.Gamepad1 then
			gamepadConnected()
		end
	end)
	UserInputService.GamepadDisconnected:Connect(function(gamepadEnum: Enum.UserInputType): ()
		if gamepadEnum == Enum.UserInputType.Gamepad1 then
			gamepadDisconnected()
		end
	end)
end

-- Sets whether the backpack is enabled or not
function BackpackScript:SetBackpackEnabled(Enabled: boolean): ()
	BackpackEnabled = Enabled
end

-- Returns if the backpack's inventory is open
function BackpackScript:IsOpened(): boolean
	return BackpackScript.IsOpen
end

-- Returns on if the backpack is enabled or not
function BackpackScript:GetBackpackEnabled(): boolean
	return BackpackEnabled
end

-- Returns the BindableEvent for when the backpack state changes
function BackpackScript:GetStateChangedEvent(): BindableEvent
	return BackpackScript.StateChanged
end

-- Update every heartbeat the icon state
RunService.Heartbeat:Connect(function(): ()
	OnIconChanged(BackpackEnabled)
end)

-- Update the transparency of the backpack based on GuiService.PreferredTransparency
local function OnPreferredTransparencyChanged(): ()
	local preferredTransparency: number = GuiService.PreferredTransparency

	BACKGROUND_TRANSPARENCY = BACKGROUND_TRANSPARENCY_DEFAULT * preferredTransparency
	InventoryFrame.BackgroundTransparency = BACKGROUND_TRANSPARENCY

	SLOT_LOCKED_TRANSPARENCY = SLOT_LOCKED_TRANSPARENCY_DEFAULT * preferredTransparency
	for _, slot in ipairs(Slots) do
		slot.Frame.BackgroundTransparency = SLOT_LOCKED_TRANSPARENCY
	end

	SEARCH_BACKGROUND_TRANSPARENCY = SEARCH_BACKGROUND_TRANSPARENCY_DEFAULT * preferredTransparency
	searchFrame.BackgroundTransparency = SEARCH_BACKGROUND_TRANSPARENCY
end
GuiService:GetPropertyChangedSignal("PreferredTransparency"):Connect(OnPreferredTransparencyChanged)

return BackpackScript

end;
};
G2L_MODULES[G2L["14"]] = {
Closure = function()
    local script = G2L["14"];--[[
	
	The majority of this code is an interface designed to make it easy for you to
	work with TopbarPlus (most methods for instance reference :modifyTheme()).
	The processing overhead mainly consists of applying themes and calculating 
	appearance (such as size and width of labels) which is handled in about
	200 lines of code here and the Widget UI module. This has been achieved
	in v3 by outsourcing a majority of previous calculations to inbuilt Roblox
	features like UIListLayouts.


	v3 provides inbuilt support for controllers (simply press DPadUp),
	touch devices (phones, tablets , etc), localization (automatic resizing
	of widgets, autolocalize for relevant labels), backwards compatability
	with the old topbar, and more.


	My primary goals for the v3 re-write have been to:
		
	1. Improve code readability and organisation (reduced lines of code within
	   Icon+IconController from 3200 to ~950, separated UI elements, etc)
		
	2. Improve ease-of-use (themes now actually make sense and can account
	   for any modifications you want, converted to a package for
	   quick installation and easy-comparisons of new updates, etc)
	
	3. Provide support for all key features of the new Roblox topbar
	   while improving performance of the module (deferring and collecting
	   changes then calling as a singular, utilizing inbuilt Roblox features
	   such as UILIstLayouts, etc)

--]]



-- SERVICES
local LocalizationService = game:GetService("LocalizationService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local StarterGui = game:GetService("StarterGui")
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")



-- REFERENCE HANDLER
-- Multiple Icons packages may exist at runtime (for instance if the developer additionally uses HD Admin)
-- therefore this ensures that the first required package becomes the dominant and only functioning module
local iconModule = script
local Reference = require(iconModule.Reference)
local referenceObject = Reference.getObject()
local leadPackage = referenceObject and referenceObject.Value
if leadPackage and leadPackage ~= iconModule then
	return require(leadPackage)
end
if not referenceObject then
	Reference.addToReplicatedStorage()
end



-- MODULES
local Signal = require(iconModule.Packages.GoodSignal)
local Janitor = require(iconModule.Packages.Janitor)
local Utility = require(iconModule.Utility)
local Attribute = require(iconModule.Attribute)
local Themes = require(iconModule.Features.Themes)
local Gamepad = require(iconModule.Features.Gamepad)
local Overflow = require(iconModule.Features.Overflow)
local Icon = {}
Icon.__index = Icon



--- LOCAL
local localPlayer = Players.LocalPlayer
local themes = iconModule.Features.Themes
local playerGui = localPlayer:WaitForChild("PlayerGui")
local iconsDict = {}
local anyIconSelected = Signal.new()
local elements = iconModule.Elements
local totalCreatedIcons = 0



-- PRESETUP
-- This is only used to determine if we need to apply the old topbar theme
-- I'll be removing this and associated functions once all games have
-- fully transitioned over to the new topbar
if GuiService.TopbarInset.Height == 0 then
	GuiService:GetPropertyChangedSignal("TopbarInset"):Wait()
end



-- PUBLIC VARIABLES
Icon.baseDisplayOrderChanged = Signal.new()
Icon.baseDisplayOrder = 10
Icon.baseTheme = require(themes.Default)
Icon.isOldTopbar = GuiService.TopbarInset.Height == 36
Icon.iconsDictionary = iconsDict
Icon.container = require(elements.Container)(Icon)
Icon.topbarEnabled = true
Icon.iconAdded = Signal.new()
Icon.iconRemoved = Signal.new()
Icon.iconChanged = Signal.new()



-- PUBLIC FUNCTIONS
function Icon.getIcons()
	return Icon.iconsDictionary
end

function Icon.getIconByUID(UID)
	local match = Icon.iconsDictionary[UID]
	if match then
		return match
	end
end

function Icon.getIcon(nameOrUID)
	local match = Icon.getIconByUID(nameOrUID)
	if match then
		return match
	end
	for _, icon in pairs(iconsDict) do
		if icon.name == nameOrUID then
			return icon
		end
	end
end

function Icon.setTopbarEnabled(bool, isInternal)
	if typeof(bool) ~= "boolean" then
		bool = Icon.topbarEnabled
	end
	if not isInternal then
		Icon.topbarEnabled = bool
	end
	for _, screenGui in pairs(Icon.container) do
		screenGui.Enabled = bool
	end
end

function Icon.modifyBaseTheme(modifications)
	modifications = Themes.getModifications(modifications)
	for _, modification in pairs(modifications) do
		for _, detail in pairs(Icon.baseTheme) do
			Themes.merge(detail, modification)
		end
	end
	for _, icon in pairs(iconsDict) do
		icon:setTheme(Icon.baseTheme)
	end
end

function Icon.setDisplayOrder(int)
	Icon.baseDisplayOrder = int
	Icon.baseDisplayOrderChanged:Fire(int)
end



-- SETUP
task.defer(Gamepad.start, Icon)
task.defer(Overflow.start, Icon)
for _, screenGui in pairs(Icon.container) do
	screenGui.Parent = playerGui
end
if Icon.isOldTopbar then
	Icon.modifyBaseTheme(require(themes.Classic))
end



-- CONSTRUCTOR
function Icon.new()
	local self = {}
	setmetatable(self, Icon)

	--- Janitors (for cleanup)
	local janitor = Janitor.new()
	self.janitor = janitor
	self.themesJanitor = janitor:add(Janitor.new())
	self.singleClickJanitor = janitor:add(Janitor.new())
	self.captionJanitor = janitor:add(Janitor.new())
	self.joinJanitor = janitor:add(Janitor.new())
	self.menuJanitor = janitor:add(Janitor.new())
	self.dropdownJanitor = janitor:add(Janitor.new())

	-- Register
	local iconUID = Utility.generateUID()
	iconsDict[iconUID] = self
	janitor:add(function()
		iconsDict[iconUID] = nil
	end)

	-- Signals (events)
	self.selected = janitor:add(Signal.new())
	self.deselected = janitor:add(Signal.new())
	self.toggled = janitor:add(Signal.new())
	self.viewingStarted = janitor:add(Signal.new())
	self.viewingEnded = janitor:add(Signal.new())
	self.stateChanged = janitor:add(Signal.new())
	self.notified = janitor:add(Signal.new())
	self.noticeStarted = janitor:add(Signal.new())
	self.noticeChanged = janitor:add(Signal.new())
	self.endNotices = janitor:add(Signal.new())
	self.toggleKeyAdded = janitor:add(Signal.new())
	self.fakeToggleKeyChanged = janitor:add(Signal.new())
	self.alignmentChanged = janitor:add(Signal.new())
	self.updateSize = janitor:add(Signal.new())
	self.resizingComplete = janitor:add(Signal.new())
	self.joinedParent = janitor:add(Signal.new())
	self.menuSet = janitor:add(Signal.new())
	self.dropdownSet = janitor:add(Signal.new())
	self.updateMenu = janitor:add(Signal.new())
	self.startMenuUpdate = janitor:add(Signal.new())
	self.childThemeModified = janitor:add(Signal.new())
	self.indicatorSet = janitor:add(Signal.new())
	self.dropdownChildAdded = janitor:add(Signal.new())
	self.menuChildAdded = janitor:add(Signal.new())

	-- Properties
	self.iconModule = iconModule
	self.UID = iconUID
	self.isEnabled = true
	self.isSelected = false
	self.isViewing = false
	self.joinedFrame = false
	self.parentIconUID = false
	self.deselectWhenOtherIconSelected = true
	self.totalNotices = 0
	self.activeState = "Deselected"
	self.alignment = ""
	self.originalAlignment = ""
	self.appliedTheme = {}
	self.appearance = {}
	self.cachedInstances = {}
	self.cachedNamesToInstances = {}
	self.cachedCollectives = {}
	self.bindedToggleKeys = {}
	self.customBehaviours = {}
	self.toggleItems = {}
	self.bindedEvents = {}
	self.notices = {}
	self.menuIcons = {}
	self.dropdownIcons = {}
	self.childIconsDict = {}
	self.isOldTopbar = Icon.isOldTopbar
	self.creationTime = os.clock()

	-- Widget is the new name for an icon
	local widget = janitor:add(require(elements.Widget)(self, Icon))
	self.widget = widget
	self:setAlignment()
	
	-- It's important we set an order otherwise icons will not align
	-- correctly within menus
	totalCreatedIcons += 1
	local ourOrder = totalCreatedIcons
	self:setOrder(ourOrder)

	-- This applies the default them
	self:setTheme(Icon.baseTheme)

	-- Button Clicked (for states "Selected" and "Deselected")
	local clickRegion = self:getInstance("ClickRegion")
	local function handleToggle()
		if self.locked then
			return
		end
		if self.isSelected then
			self:deselect("User", self)
		else
			self:select("User", self)
		end
	end
	local isTouchTapping = false
	local isClicking = false
	clickRegion.MouseButton1Click:Connect(function()
		if isTouchTapping then
			return
		end
		isClicking = true
		task.delay(0.01, function()
			isClicking = false
		end)
		handleToggle()
	end)
	clickRegion.TouchTap:Connect(function()
		-- This resolves the bug report by @28Pixels:
		-- https://devforum.roblox.com/t/topbarplus/1017485/1104
		if isClicking then
			return
		end
		isTouchTapping = true
		task.delay(0.01, function()
			isTouchTapping = false
		end)
		handleToggle()
	end)

	-- Keys can be bound to toggle between Selected and Deselected
	janitor:add(UserInputService.InputBegan:Connect(function(input, touchingAnObject)
		if self.locked then
			return
		end
		if self.bindedToggleKeys[input.KeyCode] and not touchingAnObject then
			handleToggle()
		end
	end))

	-- Button Hovering (for state "Viewing")
	-- Hovering is a state only for devices with keyboards
	-- and controllers (not touchpads)
	local function viewingStarted(dontSetState)
		if self.locked then
			return
		end
		self.isViewing = true
		self.viewingStarted:Fire(true)
		if not dontSetState then
			self:setState("Viewing", "User", self)
		end
	end
	local function viewingEnded()
		if self.locked then
			return
		end
		self.isViewing = false
		self.viewingEnded:Fire(true)
		self:setState(nil, "User", self)
	end
	self.joinedParent:Connect(function()
		if self.isViewing then
			viewingEnded()
		end
	end)
	clickRegion.MouseEnter:Connect(function()
		local dontSetState = not UserInputService.KeyboardEnabled
		viewingStarted(dontSetState)
	end)
	local touchCount = 0
	janitor:add(UserInputService.TouchEnded:Connect(viewingEnded))
	clickRegion.MouseLeave:Connect(viewingEnded)
	clickRegion.SelectionGained:Connect(viewingStarted)
	clickRegion.SelectionLost:Connect(viewingEnded)
	clickRegion.MouseButton1Down:Connect(function()
		if not self.locked and UserInputService.TouchEnabled then
			touchCount += 1
			local myTouchCount = touchCount
			task.delay(0.2, function()
				if myTouchCount == touchCount then
					viewingStarted()
				end
			end)
		end
	end)
	clickRegion.MouseButton1Up:Connect(function()
		touchCount += 1
	end)

	-- Handle overlay on viewing
	local iconOverlay = self:getInstance("IconOverlay")
	self.viewingStarted:Connect(function()
		iconOverlay.Visible = not self.overlayDisabled
	end)
	self.viewingEnded:Connect(function()
		iconOverlay.Visible = false
	end)

	-- Deselect when another icon is selected
	janitor:add(anyIconSelected:Connect(function(incomingIcon)
		if incomingIcon ~= self and self.deselectWhenOtherIconSelected and incomingIcon.deselectWhenOtherIconSelected then
			self:deselect("AutoDeselect", incomingIcon)
		end
	end))

	-- This checks if the script calling this module is a descendant of a ScreenGui
	-- with 'ResetOnSpawn' set to true. If it is, then we destroy the icon the
	-- client respawns. This solves one of the most asked about questions on the post
	-- The only caveat this may not work if the player doesn't uniquely name their ScreenGui and the frames
	-- the LocalScript rests within
	local source =  debug.info(2, "s")
	local sourcePath = string.split(source, ".")
	local origin = game
	local originsScreenGui
	for i, sourceName in pairs(sourcePath) do
		origin = origin:FindFirstChild(sourceName)
		if not origin then
			break
		end
		if origin:IsA("ScreenGui") then
			originsScreenGui = origin
		end
	end
	if origin and originsScreenGui and originsScreenGui.ResetOnSpawn == true then
		Utility.localPlayerRespawned(function()
			self:destroy()
		end)
	end

	-- Additional children behaviour when toggled (mostly notices)
	local noticeLabel = self:getInstance("NoticeLabel")
	self.toggled:Connect(function(isSelected)
		self.noticeChanged:Fire(self.totalNotices)
		for childIconUID, _ in pairs(self.childIconsDict) do
			local childIcon = Icon.getIconByUID(childIconUID)
			childIcon.noticeChanged:Fire(childIcon.totalNotices)
			if not isSelected and childIcon.isSelected then
				-- If an icon within a menu or dropdown is also
				-- a dropdown or menu, then close it
				for _, _ in pairs(childIcon.childIconsDict) do
					childIcon:deselect("HideParentFeature", self)
				end
			end
		end
	end)
	
	-- This closes/reopens the chat or playerlist if the icon is a dropdown
	-- In the future I'd prefer to use the position+size of the chat
	-- to determine whether to close dropdown (instead of non-right-set)
	-- but for reasons mentioned here it's unreliable at the time of
	-- writing this: https://devforum.roblox.com/t/here/2794915
	-- I could also make this better by accounting for multiple
	-- dropdowns being open (not just this one) but this will work
	-- fine for almost every use case for now.
	self.selected:Connect(function()
		local isDropdown = #self.dropdownIcons > 0
		if isDropdown then
			if StarterGui:GetCore("ChatActive") and self.alignment ~= "Right" then
				self.chatWasPreviouslyActive = true
				StarterGui:SetCore("ChatActive", false)
			end
			if StarterGui:GetCoreGuiEnabled("PlayerList") and self.alignment ~= "Left" then
				self.playerlistWasPreviouslyActive = true
				StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)
			end
		end
	end)
	self.deselected:Connect(function()
		if self.chatWasPreviouslyActive then
			self.chatWasPreviouslyActive = nil
			StarterGui:SetCore("ChatActive", true)
		end
		if self.playerlistWasPreviouslyActive then
			self.playerlistWasPreviouslyActive = nil
			StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
		end
	end)
	
	-- There's a rare occassion where the appearance is not
	-- fully set to deselected so this ensures the icons
	-- appearance is fully as it should be
	--print("self.activeState =", self.activeState)
	task.delay(0.1, function()
		if self.activeState == "Deselected" then
			self.stateChanged:Fire("Deselected")
			self:refresh()
		end
	end)
	
	-- Call icon added
	Icon.iconAdded:Fire(self)

	return self
end



-- METHODS
function Icon:setName(name)
	self.widget.Name = name
	self.name = name
	return self
end

function Icon:setState(incomingStateName, fromSource, sourceIcon)
	-- This is responsible for acknowleding a change in stage (such as from "Deselected" to "Viewing" when
	-- a users mouse enters the widget), then informing other systems of this state change to then act upon
	-- (such as the theme handler applying the theme which corresponds to that state).
	if not incomingStateName then
		incomingStateName = (self.isSelected and "Selected") or "Deselected"
	end
	local stateName = Utility.formatStateName(incomingStateName)
	local previousStateName = self.activeState
	if previousStateName == stateName then
		return
	end
	local currentIsSelected = self.isSelected
	self.activeState = stateName
	if stateName == "Deselected" then
		self.isSelected = false
		if currentIsSelected then
			self.toggled:Fire(false, fromSource, sourceIcon)
			self.deselected:Fire(fromSource, sourceIcon)
		end
		self:_setToggleItemsVisible(false, fromSource, sourceIcon)
	elseif stateName == "Selected" then
		self.isSelected = true
		if not currentIsSelected then
			self.toggled:Fire(true, fromSource, sourceIcon)
			self.selected:Fire(fromSource, sourceIcon)
			anyIconSelected:Fire(self, fromSource, sourceIcon)
		end
		self:_setToggleItemsVisible(true, fromSource, sourceIcon)
	end
	self.stateChanged:Fire(stateName, fromSource, sourceIcon)
end

function Icon:getInstance(name)
	-- This enables us to easily retrieve instances located within the icon simply by passing its name.
	-- Every important/significant instance is named uniquely therefore this is no worry of overlap.
	-- We cache the result for more performant retrieval in the future.
	local instance = self.cachedNamesToInstances[name]
	if instance then
		return instance
	end
	local function cacheInstance(childName, child)
		local currentCache = self.cachedInstances[child]
		if not currentCache then
			local collectiveName = child:GetAttribute("Collective")
			local cachedCollective = collectiveName and self.cachedCollectives[collectiveName]
			if cachedCollective then
				table.insert(cachedCollective, child)
			end
			self.cachedNamesToInstances[childName] = child
			self.cachedInstances[child] = true
			child.Destroying:Once(function()
				self.cachedNamesToInstances[childName] = nil
				self.cachedInstances[child] = nil
			end)
		end
	end
	local widget = self.widget
	cacheInstance("Widget", widget)
	if name == "Widget" then
		return widget
	end

	local returnChild
	local function scanChildren(parentInstance)
		for _, child in pairs(parentInstance:GetChildren()) do
			local widgetUID = child:GetAttribute("WidgetUID")
			if widgetUID and widgetUID ~= self.UID then
				-- This prevents instances within other icons from being recorded
				-- (for instance when other icons are added to this icons menu)
				continue
			end
			-- If the child is a fake placeholder instance (such as dropdowns, notices, etc)
			-- then its important we scan the real original instance instead of this clone
			local previousChild = child
			local realChild = Themes.getRealInstance(child)
			if realChild then
				child = realChild
			end
			-- Finally scan its children
			scanChildren(child)
			if child:IsA("GuiBase") or child:IsA("UIBase") or child:IsA("ValueBase") then
				local childName = child.Name
				cacheInstance(childName, child)
				if childName == name then
					returnChild = child
				end
			end
		end
	end
	scanChildren(widget)
	return returnChild
end

function Icon:getCollective(name)
	-- A collective is an array of instances within the Widget that have been
	-- grouped together based on a given name. This just makes it easy
	-- to act on multiple instances at once which share similar behaviours.
	-- For instance, if we want to change the icons corner size, all corner instances
	-- with the attribute "Collective" and value "WidgetCorner" could be updated
	-- instantly by doing Themes.apply(icon, "WidgetCorner", newSize)
	local collective = self.cachedCollectives[name]
	if collective then
		return collective
	end
	collective = {}
	for instance, _ in pairs(self.cachedInstances) do
		if instance:GetAttribute("Collective") == name then
			table.insert(collective, instance)
		end
	end
	self.cachedCollectives[name] = collective
	return collective
end

function Icon:getInstanceOrCollective(collectiveOrInstanceName)
	-- Similar to :getInstance but also accounts for 'Collectives', such as UICorners and returns
	-- an array of instances instead of a single instance
	local instances = {}
	local instance = self:getInstance(collectiveOrInstanceName)
	if instance then
		table.insert(instances, instance)
	end
	if #instances == 0 then
		instances = self:getCollective(collectiveOrInstanceName)
	end
	return instances
end

function Icon:getStateGroup(iconState)
	local chosenState = iconState or self.activeState
	local stateGroup = self.appearance[chosenState]
	if not stateGroup then
		stateGroup = {}
		self.appearance[chosenState] = stateGroup
	end
	return stateGroup
end

function Icon:refreshAppearance(instance, specificProperty)
	Themes.refresh(self, instance, specificProperty)
	return self
end

function Icon:refresh()
	self:refreshAppearance(self.widget)
	self.updateSize:Fire()
	return self
end

function Icon:updateParent()
	local parentIcon = Icon.getIconByUID(self.parentIconUID)
	if parentIcon then
		parentIcon.updateSize:Fire()
	end
end

function Icon:setBehaviour(collectiveOrInstanceName, property, callback, refreshAppearance)
	-- You can specify your own custom callback to handle custom logic just before
	-- an instances property is changed by using :setBehaviour()
	local key = collectiveOrInstanceName.."-"..property
	self.customBehaviours[key] = callback
	if refreshAppearance then
		local instances = self:getInstanceOrCollective(collectiveOrInstanceName)
		for _, instance in pairs(instances) do
			self:refreshAppearance(instance, property)
		end
	end
end

function Icon:modifyTheme(modifications, modificationUID)
	local modificationUID = Themes.modify(self, modifications, modificationUID)
	return self, modificationUID
end

function Icon:modifyChildTheme(modifications, modificationUID)
	-- Same as modifyTheme except for its children (i.e. icons
	-- within its dropdown or menu)
	self.childModifications = modifications
	self.childModificationsUID = modificationUID
	for childIconUID, _ in pairs(self.childIconsDict) do
		local childIcon = Icon.getIconByUID(childIconUID)
		childIcon:modifyTheme(modifications, modificationUID)
	end
	self.childThemeModified:Fire()
	return self
end

function Icon:removeModification(modificationUID)
	Themes.remove(self, modificationUID)
	return self
end

function Icon:removeModificationWith(instanceName, property, state)
	Themes.removeWith(self, instanceName, property, state)
	return self
end

function Icon:setTheme(theme)
	Themes.set(self, theme)
	return self
end

function Icon:setEnabled(bool)
	self.isEnabled = bool
	self.widget.Visible = bool
	self:updateParent()
	return self
end

function Icon:select(fromSource, sourceIcon)
	self:setState("Selected", fromSource, sourceIcon)
	return self
end

function Icon:deselect(fromSource, sourceIcon)
	self:setState("Deselected", fromSource, sourceIcon)
	return self
end

function Icon:notify(customClearSignal, noticeId)
	-- Generates a notification which appears in the top right of the icon. Useful for example for prompting
	-- users of changes/updates within your UI such as a Catalog
	-- 'customClearSignal' is a signal object (e.g. icon.deselected) or
	-- Roblox event (e.g. Instance.new("BindableEvent").Event)
	local notice = self.notice
	if not notice then
		notice = require(elements.Notice)(self, Icon)
		self.notice = notice
	end
	self.noticeStarted:Fire(customClearSignal, noticeId)
	return self
end

function Icon:clearNotices()
	self.endNotices:Fire()
	return self
end

function Icon:disableOverlay(bool)
	self.overlayDisabled = bool
	return self
end
Icon.disableStateOverlay = Icon.disableOverlay

function Icon:setImage(imageId, iconState)
	self:modifyTheme({"IconImage", "Image", imageId, iconState})
	return self
end

function Icon:setLabel(text, iconState)
	self:modifyTheme({"IconLabel", "Text", text, iconState})
	return self
end

function Icon:setOrder(int, iconState)
	self:modifyTheme({"Widget", "LayoutOrder", int, iconState})
	return self
end

function Icon:setCornerRadius(udim, iconState)
	self:modifyTheme({"IconCorners", "CornerRadius", udim, iconState})
	return self
end

function Icon:align(leftCenterOrRight, isFromParentIcon)
	-- Determines the side of the screen the icon will be ordered
	local direction = tostring(leftCenterOrRight):lower()
	if direction == "mid" or direction == "centre" then
		direction = "center"
	end
	if direction ~= "left" and direction ~= "center" and direction ~= "right" then
		direction = "left"
	end
	local screenGui = (direction == "center" and Icon.container.TopbarCentered) or Icon.container.TopbarStandard
	local holders = screenGui.Holders
	local finalDirection = string.upper(string.sub(direction, 1, 1))..string.sub(direction, 2)
	if not isFromParentIcon then
		self.originalAlignment = finalDirection
	end
	local joinedFrame = self.joinedFrame
	local alignmentHolder = holders[finalDirection]
	self.screenGui = screenGui
	self.alignmentHolder = alignmentHolder
	if not self.isDestroyed then
		self.widget.Parent = joinedFrame or alignmentHolder
	end
	self.alignment = finalDirection
	self.alignmentChanged:Fire(finalDirection)
	Icon.iconChanged:Fire(self)
	return self
end
Icon.setAlignment = Icon.align

function Icon:setLeft()
	self:setAlignment("Left")
	return self
end

function Icon:setMid()
	self:setAlignment("Center")
	return self
end

function Icon:setRight()
	self:setAlignment("Right")
	return self
end

function Icon:setWidth(offsetMinimum, iconState)
	-- This sets a minimum X offset size for the widget, useful
	-- for example if you're constantly changing the label
	-- but don't want the icon to resize every time
	local newSize = UDim2.fromOffset(offsetMinimum, self.widget.Size.Y.Offset)
	self:modifyTheme({"Widget", "Size", newSize, iconState})
	self:modifyTheme({"Widget", "DesiredWidth", offsetMinimum, iconState})
	return self
end

function Icon:setImageScale(number, iconState)
	self:modifyTheme({"IconImageScale", "Value", number, iconState})
	return self
end

function Icon:setImageRatio(number, iconState)
	self:modifyTheme({"IconImageRatio", "AspectRatio", number, iconState})
	return self
end

function Icon:setTextSize(number, iconState)
	self:modifyTheme({"IconLabel", "TextSize", number, iconState})
	return self
end

function Icon:setTextFont(font, fontWeight, fontStyle, iconState)
	fontWeight = fontWeight or Enum.FontWeight.Regular
	fontStyle = fontStyle or Enum.FontStyle.Normal
	local fontFace
	local fontType = typeof(font)
	if fontType == "number" then
		fontFace = Font.fromId(font, fontWeight, fontStyle)
	elseif fontType == "EnumItem" then
		fontFace = Font.fromEnum(font)
	elseif fontType == "string" then
		if not font:match("rbxasset") then
			fontFace = Font.fromName(font, fontWeight, fontStyle)
		end
	end
	if not fontFace then
		fontFace = Font.new(font, fontWeight, fontStyle)
	end
	self:modifyTheme({"IconLabel", "FontFace", fontFace, iconState})
	return self
end

function Icon:bindToggleItem(guiObjectOrLayerCollector)
	if not guiObjectOrLayerCollector:IsA("GuiObject") and not guiObjectOrLayerCollector:IsA("LayerCollector") then
		error("Toggle item must be a GuiObject or LayerCollector!")
	end
	self.toggleItems[guiObjectOrLayerCollector] = true
	self:_updateSelectionInstances()
	return self
end

function Icon:unbindToggleItem(guiObjectOrLayerCollector)
	self.toggleItems[guiObjectOrLayerCollector] = nil
	self:_updateSelectionInstances()
	return self
end

function Icon:_updateSelectionInstances()
	-- This is to assist with controller navigation and selection
	-- It converts the value true to an array
	for guiObjectOrLayerCollector, _ in pairs(self.toggleItems) do
		local buttonInstancesArray = {}
		for _, instance in pairs(guiObjectOrLayerCollector:GetDescendants()) do
			if (instance:IsA("TextButton") or instance:IsA("ImageButton")) and instance.Active then
				table.insert(buttonInstancesArray, instance)
			end
		end
		self.toggleItems[guiObjectOrLayerCollector] = buttonInstancesArray
	end
end

function Icon:_setToggleItemsVisible(bool, fromSource, sourceIcon)
	for toggleItem, _ in pairs(self.toggleItems) do
		if not sourceIcon or sourceIcon == self or sourceIcon.toggleItems[toggleItem] == nil then
			local property = "Visible"
			if toggleItem:IsA("LayerCollector") then
				property = "Enabled"
			end
			toggleItem[property] = bool
		end
	end
end

function Icon:bindEvent(iconEventName, eventFunction)
	local event = self[iconEventName]
	assert(event and typeof(event) == "table" and event.Connect, "argument[1] must be a valid topbarplus icon event name!")
	assert(typeof(eventFunction) == "function", "argument[2] must be a function!")
	self.bindedEvents[iconEventName] = event:Connect(function(...)
		eventFunction(self, ...)
	end)
	return self
end

function Icon:unbindEvent(iconEventName)
	local eventConnection = self.bindedEvents[iconEventName]
	if eventConnection then
		eventConnection:Disconnect()
		self.bindedEvents[iconEventName] = nil
	end
	return self
end

function Icon:bindToggleKey(keyCodeEnum)
	assert(typeof(keyCodeEnum) == "EnumItem", "argument[1] must be a KeyCode EnumItem!")
	self.bindedToggleKeys[keyCodeEnum] = true
	self.toggleKeyAdded:Fire(keyCodeEnum)
	self:setCaption("_hotkey_")
	return self
end

function Icon:unbindToggleKey(keyCodeEnum)
	assert(typeof(keyCodeEnum) == "EnumItem", "argument[1] must be a KeyCode EnumItem!")
	self.bindedToggleKeys[keyCodeEnum] = nil
	return self
end

function Icon:call(callback, ...)
	local packedArgs = table.pack(...)
	task.spawn(function()
		callback(self, table.unpack(packedArgs))
	end)
	return self
end

function Icon:addToJanitor(callback)
	self.janitor:add(callback)
	return self
end

function Icon:lock()
	-- This disables all user inputs related to the icon (such as clicking buttons, pressing keys, etc)
	local clickRegion = self:getInstance("ClickRegion")
	clickRegion.Visible = false
	self.locked = true
	return self
end

function Icon:unlock()
	local clickRegion = self:getInstance("ClickRegion")
	clickRegion.Visible = true
	self.locked = false
	return self
end

function Icon:debounce(seconds)
	self:lock()
	task.wait(seconds)
	self:unlock()
	return self
end

function Icon:autoDeselect(bool)
	-- When set to true the icon will deselect itself automatically whenever
	-- another icon is selected
	if bool == nil then
		bool = true
	end
	self.deselectWhenOtherIconSelected = bool
	return self
end

function Icon:oneClick(bool)
	-- When set to true the icon will automatically deselect when selected, this creates
	-- the effect of a single click button
	local singleClickJanitor = self.singleClickJanitor
	singleClickJanitor:clean()
	if bool or bool == nil then
		singleClickJanitor:add(self.selected:Connect(function()
			self:deselect("OneClick", self)
		end))
	end
	self.oneClickEnabled = true
	return self
end

function Icon:setCaption(text)
	if text == "_hotkey_" and (self.captionText) then
		return self
	end
	local captionJanitor = self.captionJanitor
	self.captionJanitor:clean()
	if not text or text == "" then
		self.caption = nil
		self.captionText = nil
		return self
	end
	local caption = captionJanitor:add(require(elements.Caption)(self))
	caption:SetAttribute("CaptionText", text)
	self.caption = caption
	self.captionText = text
	return self
end

function Icon:setCaptionHint(keyCodeEnum)
	assert(typeof(keyCodeEnum) == "EnumItem", "argument[1] must be a KeyCode EnumItem!")
	self.fakeToggleKey = keyCodeEnum
	self.fakeToggleKeyChanged:Fire(keyCodeEnum)
	self:setCaption("_hotkey_")
	return self
end

function Icon:leave()
	local joinJanitor = self.joinJanitor
	joinJanitor:clean()
	return self
end

function Icon:joinMenu(parentIcon)
	Utility.joinFeature(self, parentIcon, parentIcon.menuIcons, parentIcon:getInstance("Menu"))
	parentIcon.menuChildAdded:Fire(self)
	return self
end

function Icon:setMenu(arrayOfIcons)
	self.menuSet:Fire(arrayOfIcons)
	return self
end

function Icon:setFrozenMenu(arrayOfIcons)
	self:freezeMenu(arrayOfIcons)
	self:setMenu(arrayOfIcons)
end

function Icon:freezeMenu()
	-- A frozen menu is a menu which is permanently locked in the
	-- the selected state (with its toggle hidden)
	self:select("FrozenMenu", self)
	self:bindEvent("deselected", function(icon)
		icon:select("FrozenMenu", self)
	end)
	self:modifyTheme({"IconSpot", "Visible", false})
end

function Icon:joinDropdown(parentIcon)
	parentIcon:getDropdown()
	Utility.joinFeature(self, parentIcon, parentIcon.dropdownIcons, parentIcon:getInstance("DropdownScroller"))
	parentIcon.dropdownChildAdded:Fire(self)
	return self
end

function Icon:getDropdown()
	local dropdown = self.dropdown
	if not dropdown then
		dropdown = require(elements.Dropdown)(self)
		self.dropdown = dropdown
		self:clipOutside(dropdown)
	end
	return dropdown
end

function Icon:setDropdown(arrayOfIcons)
	self:getDropdown()
	self.dropdownSet:Fire(arrayOfIcons)
	return self
end

function Icon:clipOutside(instance)
	-- This is essential for items such as notices and dropdowns which will exceed the bounds of the widget. This is an issue
	-- because the widget must have ClipsDescendents enabled to hide items for instance when the menu is closing or opening.
	-- This creates an invisible frame which matches the size and position of the instance, then the instance is parented outside of
	-- the widget and tracks the clone to match its size and position. In order for themes, etc to work the applying system checks
	-- to see if an instance is a clone, then if it is, it applies it to the original instance instead of the clone.
	local instanceClone = Utility.clipOutside(self, instance)
	self:refreshAppearance(instance)
	return self, instanceClone
end

function Icon:setIndicator(keyCode)
	-- An indicator is a direction button prompt with an image of the given keycode. This is useful for instance
	-- with controllers to show the user what button to press to highlight the topbar. You don't need
	-- to set an indicator for controllers as this is handled internally within the Gamepad module
	local indicator = self.indicator
	if not indicator then
		indicator = self.janitor:add(require(elements.Indicator)(self, Icon))
		self.indicator = indicator
	end
	self.indicatorSet:Fire(keyCode)
end



-- DESTROY/CLEANUP
function Icon:destroy()
	if self.isDestroyed then
		return
	end
	self:clearNotices()
	if self.parentIconUID then
		self:leave()
	end
	self.isDestroyed = true
	self.janitor:clean()
	Icon.iconRemoved:Fire(self)
end
Icon.Destroy = Icon.destroy



return Icon
end;
};
G2L_MODULES[G2L["16"]] = {
Closure = function()
    local script = G2L["16"];--[[
-------------------------------------
This package was modified by ForeverHD.

PACKAGE MODIFICATIONS:
	1. Added pascalCase aliases for all methods
	2. Modified behaviour of :add so that it takes both objects and promises (previously only objects)
	3. Slight change to how promises are tracked
	4. Added isAnInstanceBeingDestroyed check to line 228
	5. Added 'OriginalTraceback' to help determine where an error was added to the janitor
	6. Likely some additional changes which weren't record here
-------------------------------------
--]]



-- Janitor
-- Original by Validark
-- Modifications by pobammer
-- roblox-ts support by OverHash and Validark
-- LinkToInstance fixed by Elttob.

local RunService = game:GetService("RunService")
local Heartbeat = RunService.Heartbeat
local function getPromiseReference()
	if RunService:IsRunning() then
		local main = require(game:GetService("ReplicatedStorage").Framework)
		return main.modules.Promise
	end
end

local IndicesReference = newproxy(true)
getmetatable(IndicesReference).__tostring = function()
	return "IndicesReference"
end

local LinkToInstanceIndex = newproxy(true)
getmetatable(LinkToInstanceIndex).__tostring = function()
	return "LinkToInstanceIndex"
end

local METHOD_NOT_FOUND_ERROR = "Object %s doesn't have method %s, are you sure you want to add it? Traceback: %s"
local NOT_A_PROMISE = "Invalid argument #1 to 'Janitor:AddPromise' (Promise expected, got %s (%s))"

local Janitor = {
	IGNORE_MEMORY_DEBUG = true,
	ClassName = "Janitor";
	__index = {
		CurrentlyCleaning = true;
		[IndicesReference] = nil;
	};
}

local TypeDefaults = {
	["function"] = true;
	["Promise"] = "cancel";
	RBXScriptConnection = "Disconnect";
}

--[[**
	Instantiates a new Janitor object.
	@returns [t:Janitor]
**--]]
function Janitor.new()
	return setmetatable({
		CurrentlyCleaning = false;
		[IndicesReference] = nil;
	}, Janitor)
end

--[[**
	Determines if the passed object is a Janitor.
	@param [t:any] Object The object you are checking.
	@returns [t:boolean] Whether or not the object is a Janitor.
**--]]
function Janitor.Is(Object)
	return type(Object) == "table" and getmetatable(Object) == Janitor
end

Janitor.is = Janitor.Is

--[[**
	Adds an `Object` to Janitor for later cleanup, where `MethodName` is the key of the method within `Object` which should be called at cleanup time. If the `MethodName` is `true` the `Object` itself will be called instead. If passed an index it will occupy a namespace which can be `Remove()`d or overwritten. Returns the `Object`.
	@param [t:any] Object The object you want to clean up.
	@param [t:string|true?] MethodName The name of the method that will be used to clean up. If not passed, it will first check if the object's type exists in TypeDefaults, and if that doesn't exist, it assumes `Destroy`.
	@param [t:any?] Index The index that can be used to clean up the object manually.
	@returns [t:any] The object that was passed.
**--]]
function Janitor.__index:Add(Object, MethodName, Index)
	if Index then
		self:Remove(Index)

		local This = self[IndicesReference]
		if not This then
			This = {}
			self[IndicesReference] = This
		end

		This[Index] = Object
	end

	local objectType = typeof(Object)
	if objectType == "table" and string.match(tostring(Object), "Promise") then
		objectType = "Promise"
		--local status = Object:getStatus()
		--print("status =", status, status == "Rejected")
	end
	MethodName = MethodName or TypeDefaults[objectType] or "Destroy"
	if type(Object) ~= "function" and not Object[MethodName] then
		warn(string.format(METHOD_NOT_FOUND_ERROR, tostring(Object), tostring(MethodName), debug.traceback(nil :: any, 2)))
	end

	local OriginalTraceback = debug.traceback("")
	self[Object] = {MethodName, OriginalTraceback}
	return Object
end
Janitor.__index.Give = Janitor.__index.Add

-- My version of Promise has PascalCase, but I converted it to use lowerCamelCase for this release since obviously that's important to do.

--[[**
	Adds a promise to the janitor. If the janitor is cleaned up and the promise is not completed, the promise will be cancelled.
	@param [t:Promise] PromiseObject The promise you want to add to the janitor.
	@returns [t:Promise]
**--]]
function Janitor.__index:AddPromise(PromiseObject)
	local Promise = getPromiseReference()
	if Promise then
		if not Promise.is(PromiseObject) then
			error(string.format(NOT_A_PROMISE, typeof(PromiseObject), tostring(PromiseObject)))
		end
		if PromiseObject:getStatus() == Promise.Status.Started then
			local Id = newproxy(false)
			local NewPromise = self:Add(Promise.new(function(Resolve, _, OnCancel)
				if OnCancel(function()
						PromiseObject:cancel()
					end) then
					return
				end

				Resolve(PromiseObject)
			end), "cancel", Id)

			NewPromise:finallyCall(self.Remove, self, Id)
			return NewPromise
		else
			return PromiseObject
		end
	else
		return PromiseObject
	end
end
Janitor.__index.GivePromise = Janitor.__index.AddPromise

-- This will assume whether or not the object is a Promise or a regular object.
function Janitor.__index:AddObject(Object)
	local Id = newproxy(false)
	local Promise = getPromiseReference()
	if Promise and Promise.is(Object) then
		if Object:getStatus() == Promise.Status.Started then
			local NewPromise = self:Add(Promise.resolve(Object), "cancel", Id)
			NewPromise:finallyCall(self.Remove, self, Id)
			return NewPromise, Id
		else
			return Object
		end
	else
		return self:Add(Object, false, Id), Id
	end
end

Janitor.__index.GiveObject = Janitor.__index.AddObject

--[[**
	Cleans up whatever `Object` was set to this namespace by the 3rd parameter of `:Add()`.
	@param [t:any] Index The index you want to remove.
	@returns [t:Janitor] The same janitor, for chaining reasons.
**--]]
function Janitor.__index:Remove(Index)
	local This = self[IndicesReference]
	if This then
		local Object = This[Index]

		if Object then
			local ObjectDetail = self[Object]
			local MethodName = ObjectDetail and ObjectDetail[1]

			if MethodName then
				if MethodName == true then
					Object()
				else
					local ObjectMethod = Object[MethodName]
					if ObjectMethod then
						ObjectMethod(Object)
					end
				end

				self[Object] = nil
			end

			This[Index] = nil
		end
	end

	return self
end

--[[**
	Gets whatever object is stored with the given index, if it exists. This was added since Maid allows getting the job using `__index`.
	@param [t:any] Index The index that the object is stored under.
	@returns [t:any?] This will return the object if it is found, but it won't return anything if it doesn't exist.
**--]]
function Janitor.__index:Get(Index)
	local This = self[IndicesReference]
	if This then
		return This[Index]
	end
end

--[[**
	Calls each Object's `MethodName` (or calls the Object if `MethodName == true`) and removes them from the Janitor. Also clears the namespace. This function is also called when you call a Janitor Object (so it can be used as a destructor callback).
	@returns [t:void]
**--]]
function Janitor.__index:Cleanup()
	if not self.CurrentlyCleaning then
		self.CurrentlyCleaning = nil
		for Object, ObjectDetail in next, self do
			if Object == IndicesReference then
				continue
			end

			-- Weird decision to rawset directly to the janitor in Agent. This should protect against it though.
			local TypeOf = type(Object)
			if TypeOf == "string" or TypeOf == "number" then
				self[Object] = nil
				continue
			end

			local MethodName = ObjectDetail[1]
			local OriginalTraceback = ObjectDetail[2]
			local function warnUser(warning)
				local cleanupLine = debug.traceback("", 3)--string.gsub(debug.traceback("", 3), "%c", "")
				local addedLine = OriginalTraceback
				warn("-------- Janitor Error --------".."\n"..tostring(warning).."\n"..cleanupLine..""..addedLine)
			end
			if MethodName == true then
				local success, warning = pcall(Object)
				if not success then
					warnUser(warning)
				end
			else
				local ObjectMethod = Object[MethodName]
				if ObjectMethod then
					local success, warning = pcall(ObjectMethod, Object)
					local isAnInstanceBeingDestroyed = typeof(Object) == "Instance" and ObjectMethod == "Destroy"
					if not success and not isAnInstanceBeingDestroyed then
						warnUser(warning)
					end
				end
			end

			self[Object] = nil
		end

		local This = self[IndicesReference]
		if This then
			for Index in next, This do
				This[Index] = nil
			end

			self[IndicesReference] = {}
		end

		self.CurrentlyCleaning = false
	end
end

Janitor.__index.Clean = Janitor.__index.Cleanup

--[[**
	Calls `:Cleanup()` and renders the Janitor unusable.
	@returns [t:void]
**--]]
function Janitor.__index:Destroy()
	self:Cleanup()
	--table.clear(self)
	--setmetatable(self, nil)
end

Janitor.__call = Janitor.__index.Cleanup

--- Makes the Janitor clean up when the instance is destroyed
-- @param Instance Instance The Instance the Janitor will wait for to be Destroyed
-- @returns Disconnectable table to stop Janitor from being cleaned up upon Instance Destroy (automatically cleaned up by Janitor, btw)
-- @author Corecii
local Disconnect = {Connected = true}
Disconnect.__index = Disconnect
function Disconnect:Disconnect()
	if self.Connected then
		self.Connected = false
		self.Connection:Disconnect()
	end
end

function Disconnect:__tostring()
	return "Disconnect<" .. tostring(self.Connected) .. ">"
end

--[[**
	"Links" this Janitor to an Instance, such that the Janitor will `Cleanup` when the Instance is `Destroyed()` and garbage collected. A Janitor may only be linked to one instance at a time, unless `AllowMultiple` is true. When called with a truthy `AllowMultiple` parameter, the Janitor will "link" the Instance without overwriting any previous links, and will also not be overwritable. When called with a falsy `AllowMultiple` parameter, the Janitor will overwrite the previous link which was also called with a falsy `AllowMultiple` parameter, if applicable.
	@param [t:Instance] Object The instance you want to link the Janitor to.
	@param [t:boolean?] AllowMultiple Whether or not to allow multiple links on the same Janitor.
	@returns [t:RbxScriptConnection] A pseudo RBXScriptConnection that can be disconnected.
**--]]
function Janitor.__index:LinkToInstance(Object, AllowMultiple)
	local Connection
	local IndexToUse = AllowMultiple and newproxy(false) or LinkToInstanceIndex
	local IsNilParented = Object.Parent == nil
	local ManualDisconnect = setmetatable({}, Disconnect)

	local function ChangedFunction(_DoNotUse, NewParent)
		if ManualDisconnect.Connected then
			_DoNotUse = nil
			IsNilParented = NewParent == nil

			if IsNilParented then
				coroutine.wrap(function()
					Heartbeat:Wait()
					if not ManualDisconnect.Connected then
						return
					elseif not Connection.Connected then
						self:Cleanup()
					else
						while IsNilParented and Connection.Connected and ManualDisconnect.Connected do
							Heartbeat:Wait()
						end

						if ManualDisconnect.Connected and IsNilParented then
							self:Cleanup()
						end
					end
				end)()
			end
		end
	end

	Connection = Object.AncestryChanged:Connect(ChangedFunction)
	ManualDisconnect.Connection = Connection

	if IsNilParented then
		ChangedFunction(nil, Object.Parent)
	end

	Object = nil
	return self:Add(ManualDisconnect, "Disconnect", IndexToUse)
end

--[[**
	Links several instances to a janitor, which is then returned.
	@param [t:...Instance] ... All the instances you want linked.
	@returns [t:Janitor] A janitor that can be used to manually disconnect all LinkToInstances.
**--]]
function Janitor.__index:LinkToInstances(...)
	local ManualCleanup = Janitor.new()
	for _, Object in ipairs({...}) do
		ManualCleanup:Add(self:LinkToInstance(Object, true), "Disconnect")
	end

	return ManualCleanup
end

for FunctionName, Function in next, Janitor.__index do
	local NewFunctionName = string.sub(string.lower(FunctionName), 1, 1) .. string.sub(FunctionName, 2)
	Janitor.__index[NewFunctionName] = Function
end

return Janitor
end;
};
G2L_MODULES[G2L["17"]] = {
Closure = function()
    local script = G2L["17"];--------------------------------------------------------------------------------
--               Batched Yield-Safe Signal Implementation                     --
-- This is a Signal class which has effectively identical behavior to a       --
-- normal RBXScriptSignal, with the only difference being a couple extra      --
-- stack frames at the bottom of the stack trace when an error is thrown.     --
-- This implementation caches runner coroutines, so the ability to yield in   --
-- the signal handlers comes at minimal extra cost over a naive signal        --
-- implementation that either always or never spawns a thread.                --
--                                                                            --
-- API:                                                                       --
--   local Signal = require(THIS MODULE)                                      --
--   local sig = Signal.new()                                                 --
--   local connection = sig:Connect(function(arg1, arg2, ...) ... end)        --
--   sig:Fire(arg1, arg2, ...)                                                --
--   connection:Disconnect()                                                  --
--   sig:DisconnectAll()                                                      --
--   local arg1, arg2, ... = sig:Wait()                                       --
--                                                                            --
-- Licence:                                                                   --
--   Licenced under the MIT licence.                                          --
--                                                                            --
-- Authors:                                                                   --
--   stravant - July 31st, 2021 - Created the file.                           --
--------------------------------------------------------------------------------

-- The currently idle thread to run the next handler on
local freeRunnerThread = nil

-- Function which acquires the currently idle handler runner thread, runs the
-- function fn on it, and then releases the thread, returning it to being the
-- currently idle one.
-- If there was a currently idle runner thread already, that's okay, that old
-- one will just get thrown and eventually GCed.
local function acquireRunnerThreadAndCallEventHandler(fn, ...)
	local acquiredRunnerThread = freeRunnerThread
	freeRunnerThread = nil
	fn(...)
	-- The handler finished running, this runner thread is free again.
	freeRunnerThread = acquiredRunnerThread
end

-- Coroutine runner that we create coroutines of. The coroutine can be 
-- repeatedly resumed with functions to run followed by the argument to run
-- them with.
local function runEventHandlerInFreeThread()
	-- Note: We cannot use the initial set of arguments passed to
	-- runEventHandlerInFreeThread for a call to the handler, because those
	-- arguments would stay on the stack for the duration of the thread's
	-- existence, temporarily leaking references. Without access to raw bytecode
	-- there's no way for us to clear the "..." references from the stack.
	while true do
		acquireRunnerThreadAndCallEventHandler(coroutine.yield())
	end
end

-- Connection class
local Connection = {}
Connection.__index = Connection

function Connection.new(signal, fn)
	return setmetatable({
		_connected = true,
		_signal = signal,
		_fn = fn,
		_next = false,
	}, Connection)
end

function Connection:Disconnect()
	self._connected = false

	-- Unhook the node, but DON'T clear it. That way any fire calls that are
	-- currently sitting on this node will be able to iterate forwards off of
	-- it, but any subsequent fire calls will not hit it, and it will be GCed
	-- when no more fire calls are sitting on it.
	if self._signal._handlerListHead == self then
		self._signal._handlerListHead = self._next
	else
		local prev = self._signal._handlerListHead
		while prev and prev._next ~= self do
			prev = prev._next
		end
		if prev then
			prev._next = self._next
		end
	end
end
Connection.Destroy = Connection.Disconnect

-- Make Connection strict
setmetatable(Connection, {
	__index = function(tb, key)
		error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(tb, key, value)
		error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end
})

-- Signal class
local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({
		_handlerListHead = false,
	}, Signal)
end

function Signal:Connect(fn)
	local connection = Connection.new(self, fn)
	if self._handlerListHead then
		connection._next = self._handlerListHead
		self._handlerListHead = connection
	else
		self._handlerListHead = connection
	end
	return connection
end

-- Disconnect all handlers. Since we use a linked list it suffices to clear the
-- reference to the head handler.
function Signal:DisconnectAll()
	self._handlerListHead = false
end
Signal.Destroy = Signal.DisconnectAll

-- Signal:Fire(...) implemented by running the handler functions on the
-- coRunnerThread, and any time the resulting thread yielded without returning
-- to us, that means that it yielded to the Roblox scheduler and has been taken
-- over by Roblox scheduling, meaning we have to make a new coroutine runner.
function Signal:Fire(...)
	local item = self._handlerListHead
	while item do
		if item._connected then
			if not freeRunnerThread then
				freeRunnerThread = coroutine.create(runEventHandlerInFreeThread)
				-- Get the freeRunnerThread to the first yield
				coroutine.resume(freeRunnerThread)
			end
			task.spawn(freeRunnerThread, item._fn, ...)
		end
		item = item._next
	end
end

-- Implement Signal:Wait() in terms of a temporary connection using
-- a Signal:Connect() which disconnects itself.
function Signal:Wait()
	local waitingCoroutine = coroutine.running()
	local cn;
	cn = self:Connect(function(...)
		cn:Disconnect()
		task.spawn(waitingCoroutine, ...)
	end)
	return coroutine.yield()
end

-- Implement Signal:Once() in terms of a connection which disconnects
-- itself before running the handler.
function Signal:Once(fn)
	local cn;
	cn = self:Connect(function(...)
		if cn._connected then
			cn:Disconnect()
		end
		fn(...)
	end)
	return cn
end

-- Make signal strict
setmetatable(Signal, {
	__index = function(tb, key)
		error(("Attempt to get Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(tb, key, value)
		error(("Attempt to set Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end
})

return Signal
end;
};
G2L_MODULES[G2L["18"]] = {
Closure = function()
    local script = G2L["18"];-- Just generic utility functions which I use and repeat across all my projects



-- LOCAL
local Utility = {}
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer



-- FUNCTIONS
function Utility.createStagger(delayTime, callback, delayInitially)
	-- This creates and returns a function which when called
	-- acts identically to callback, however will only be called
	-- for a maximum of once per delayTime. If the returned function
	-- is called more than once during the delayTime, then it will
	-- wait until the expiryTime then perform another recall.
	-- This is useful for visual interfaces and effects which may be
	-- triggered multiple times within a frame or short period, but which
	-- we don't necessary need to (for performance reasons).
	local staggerActive = false
	local multipleCalls = false
	if not delayTime or delayTime == 0 then
		-- We make 0.01 instead of 0 because devices can now run at
		-- different frame rates
		delayTime = 0.01
	end
	local function staggeredCallback(...)
		if staggerActive then
			multipleCalls = true
			return
		end
		local packedArgs = table.pack(...)
		staggerActive = true
		multipleCalls = false
		task.spawn(function()
			if delayInitially then
				task.wait(delayTime)
			end
			callback(table.unpack(packedArgs))
		end)
		task.delay(delayTime, function()
			staggerActive = false
			if multipleCalls then
				-- This means it has been called at least once during
				-- the stagger period, so call again
				staggeredCallback(table.unpack(packedArgs))
			end
		end)
	end
	return staggeredCallback
end

function Utility.round(n)
	-- Credit to Darkmist101 for this
	return math.floor(n + 0.5)
end

function Utility.reverseTable(t)
	for i = 1, math.floor(#t/2) do
		local j = #t - i + 1
		t[i], t[j] = t[j], t[i]
	end
end

function Utility.copyTable(t)
	-- Credit to Stephen Leitnick (September 13, 2017) for this function from TableUtil
	assert(type(t) == "table", "First argument must be a table")
	local tCopy = table.create(#t)
	for k,v in pairs(t) do
		if (type(v) == "table") then
			tCopy[k] = Utility.copyTable(v)
		else
			tCopy[k] = v
		end
	end
	return tCopy
end

local validCharacters = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","<",">","?","@","{","}","[","]","!","(",")","=","+","~","#"}
function Utility.generateUID(length)
	length = length or 8
	local UID = ""
	local list = validCharacters
	local total = #list
	for i = 1, length do
		local randomCharacter = list[math.random(1, total)]
		UID = UID..randomCharacter
	end
	return UID
end

local instanceTrackers = {}
function Utility.setVisible(instance, bool, sourceUID)
	-- This effectively works like a buff object but
	-- incredibly simplified. It stacks false values
	-- so that if there is more than more than, the 
	-- instance remains hidden even if set visible true
	local tracker = instanceTrackers[instance]
	if not tracker then
		tracker = {}
		instanceTrackers[instance] = tracker
		instance.Destroying:Once(function()
			instanceTrackers[instance] = nil
		end)
	end
	if not bool then
		tracker[sourceUID] = true
	else
		tracker[sourceUID] = nil
	end
	local isVisible = bool
	if bool then
		for sourceUID, _ in pairs(tracker) do
			isVisible = false
			break
		end
	end
	instance.Visible = isVisible
end

function Utility.formatStateName(incomingStateName)
	return string.upper(string.sub(incomingStateName, 1, 1))..string.lower(string.sub(incomingStateName, 2))
end

function Utility.localPlayerRespawned(callback)
	-- The client localscript may be located under a ScreenGui with ResetOnSpawn set to true
	-- In these scenarios, traditional methods like CharacterAdded won't be called by the
	-- time the localscript has been destroyed, therefore we listen for removing instead
	-- If humanoid and health == 0, then reset/died normally, else was
	-- forcefully reset via a method such as LoadCharacter
	-- We wrap this behaviour in case any additional quirks need to be accounted for
	localPlayer.CharacterRemoving:Connect(callback)
end

function Utility.getClippedContainer(screenGui)
	-- We always want clipped items to display in front hence
	-- why we have this
	local clippedContainer = screenGui:FindFirstChild("ClippedContainer")
	if not clippedContainer then
		clippedContainer = Instance.new("Folder")
		clippedContainer.Name = "ClippedContainer"
		clippedContainer.Parent = screenGui
	end
	return clippedContainer
end

local Janitor = require(script.Parent.Packages.Janitor)
local GuiService = game:GetService("GuiService")
function Utility.clipOutside(icon, instance)
	local cloneJanitor = icon.janitor:add(Janitor.new())
	instance.Destroying:Once(function()
		cloneJanitor:Destroy()
	end)
	icon.janitor:add(instance)

	local originalParent = instance.Parent
	local clone = cloneJanitor:add(Instance.new("Frame"))
	clone:SetAttribute("IsAClippedClone", true)
	clone.Name = instance.Name
	clone.AnchorPoint = instance.AnchorPoint
	clone.Size = instance.Size
	clone.Position = instance.Position
	clone.BackgroundTransparency = 1
	clone.LayoutOrder = instance.LayoutOrder
	clone.Parent = originalParent

	local valueInstance = Instance.new("ObjectValue")
	valueInstance.Name = "OriginalInstance"
	valueInstance.Value = instance
	valueInstance.Parent = clone

	local valueInstanceCopy = valueInstance:Clone()
	instance:SetAttribute("HasAClippedClone", true)
	valueInstanceCopy.Name = "ClippedClone"
	valueInstanceCopy.Value = clone
	valueInstanceCopy.Parent = instance

	local screenGui
	local function updateScreenGui()
		local originalScreenGui = originalParent:FindFirstAncestorWhichIsA("ScreenGui")
		screenGui = if string.match(originalScreenGui.Name, "Clipped") then originalScreenGui else originalScreenGui.Parent[originalScreenGui.Name.."Clipped"]
		instance.AnchorPoint = Vector2.new(0, 0)
		instance.Parent = Utility.getClippedContainer(screenGui)
	end
	cloneJanitor:add(icon.alignmentChanged:Connect(updateScreenGui))
	updateScreenGui()

	-- Lets copy over children that modify size
	for _, child in pairs(instance:GetChildren()) do
		if child:IsA("UIAspectRatioConstraint") then
			child:Clone().Parent = clone
		end
	end

	-- If the icon is hidden, its important we are too (as
	-- setting a parent to visible = false no longer makes
	-- this hidden)
	local widget = icon.widget
	local isOutsideParent = false
	local ignoreVisibilityUpdater = instance:GetAttribute("IgnoreVisibilityUpdater")
	local function updateVisibility()
		if ignoreVisibilityUpdater then
			return
		end
		local isVisible = widget.Visible
		
		if isOutsideParent then
			isVisible = false
		end
		Utility.setVisible(instance, isVisible, "ClipHandler")
	end
	cloneJanitor:add(widget:GetPropertyChangedSignal("Visible"):Connect(updateVisibility))

	local previousScroller
	local Icon = require(icon.iconModule)
	local function checkIfOutsideParentXBounds()
		-- Defer so that roblox's properties reflect their true values
		task.defer(function()
			-- If the instance is within a parent item (such as a dropdown or menu)
			-- then we hide it if it exceeds the bounds of that parent
			local parentInstance
			local ourUID = icon.UID
			local nextIconUID = ourUID
			local shouldClipToParent = instance:GetAttribute("ClipToJoinedParent")
			if shouldClipToParent then
				for i = 1, 10 do -- This is safer than while true do and should never be > 4 parents
					local nextIcon = Icon.getIconByUID(nextIconUID)
					if not nextIcon then
						break
					end
					local nextParentInstance = nextIcon.joinedFrame
					nextIconUID = nextIcon.parentIconUID
					if not nextParentInstance then
						break
					end
					parentInstance = nextParentInstance
				end
			end
			if not parentInstance then
				isOutsideParent = false
				updateVisibility()
				return
			end
			local pos = instance.AbsolutePosition
			local halfSize = instance.AbsoluteSize/2
			local parentPos = parentInstance.AbsolutePosition
			local parentSize = parentInstance.AbsoluteSize
			local posHalf = (pos + halfSize)
			local exceededLeft = posHalf.X < parentPos.X
			local exceededRight = posHalf.X > (parentPos.X + parentSize.X)
			local exceededTop = posHalf.Y < parentPos.Y
			local exceededBottom = posHalf.Y > (parentPos.Y + parentSize.Y)
			local hasExceeded = exceededLeft or exceededRight or exceededTop or exceededBottom
			if hasExceeded ~= isOutsideParent then
				isOutsideParent = hasExceeded
				updateVisibility()
			end
			if parentInstance:IsA("ScrollingFrame") and previousScroller ~= parentInstance then
				previousScroller = parentInstance
				local connection = parentInstance:GetPropertyChangedSignal("AbsoluteWindowSize"):Connect(function()
					checkIfOutsideParentXBounds()
				end)
				cloneJanitor:add(connection, "Disconnect", "TrackUtilityScroller-"..ourUID)
			end
		end)
	end

	local camera = workspace.CurrentCamera
	local additionalOffsetX = instance:GetAttribute("AdditionalOffsetX") or 0
	local function trackProperty(property)
		local absoluteProperty = "Absolute"..property
		local function updateProperty()
			local cloneValue = clone[absoluteProperty]
			local absoluteValue = UDim2.fromOffset(cloneValue.X, cloneValue.Y)
			if property == "Position" then

				-- This binds the instances within the bounds of the screen
				local SIDE_PADDING = 4
				local limitX = camera.ViewportSize.X - instance.AbsoluteSize.X - SIDE_PADDING
				local inputX = absoluteValue.X.Offset
				if inputX < SIDE_PADDING then
					inputX = SIDE_PADDING
				elseif inputX > limitX then
					inputX = limitX
				end
				absoluteValue = UDim2.fromOffset(inputX, absoluteValue.Y.Offset)

				-- AbsolutePosition does not perfectly match with TopbarInsets enabled
				-- This corrects this
				local topbarInset = GuiService.TopbarInset
				local viewportWidth = workspace.CurrentCamera.ViewportSize.X
				local guiWidth = screenGui.AbsoluteSize.X
				local guiOffset = screenGui.AbsolutePosition.X
				local widthDifference = guiOffset - topbarInset.Min.X
				local oldTopbarCenterOffset = 0--widthDifference/30 -- I have no idea why this works, it just does
				local offsetX = if icon.isOldTopbar then guiOffset else viewportWidth - guiWidth - oldTopbarCenterOffset
				
				-- Also add additionalOffset
				offsetX -= additionalOffsetX
				absoluteValue += UDim2.fromOffset(-offsetX, topbarInset.Height)

				-- Finally check if within its direct parents bounds
				checkIfOutsideParentXBounds()

			end
			instance[property] = absoluteValue
		end
		
		-- This defer is essential as the listener may be in a different screenGui to the actor
		local updatePropertyStaggered = Utility.createStagger(0.01, updateProperty)
		cloneJanitor:add(clone:GetPropertyChangedSignal(absoluteProperty):Connect(updatePropertyStaggered))
		
		-- This is to patch a weirddddd bug with ScreenGuis with SreenInsets set to
		-- 'TopbarSafeInsets'. For some reason the absolute position of gui instances
		-- within this type of screenGui DO NOT accurately update to match their new
		-- real world position; instead they jump around almost randomly for a few frames.
		-- I have spent way too many hours trying to solve this bug, I think the only way
		-- for the time being is to not use ScreenGuis with TopbarSafeInsets, but I don't
		-- have time to redesign the entire system around that at the moment.
		-- Here's a GIF of this bug: https://i.imgur.com/VitHdC1.gif
		local updatePropertyPatch = Utility.createStagger(0.5, updateProperty, true)
		cloneJanitor:add(clone:GetPropertyChangedSignal(absoluteProperty):Connect(updatePropertyPatch))
		
	end
	task.delay(0.1, checkIfOutsideParentXBounds)
	checkIfOutsideParentXBounds()
	updateVisibility()
	trackProperty("Position")
	
	-- Track visiblity changes
	cloneJanitor:add(instance:GetPropertyChangedSignal("Visible"):Connect(function()
		--print("Visiblity changed:", instance, clone, instance.Visible)
		--clone.Visible = instance.Visible
	end))

	-- To ensure accurate positioning, it's important the clone also remains the same size as the instance
	local shouldTrackCloneSize = instance:GetAttribute("TrackCloneSize")
	if shouldTrackCloneSize then
		trackProperty("Size")
	else
		cloneJanitor:add(instance:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
			local absolute = instance.AbsoluteSize
			clone.Size = UDim2.fromOffset(absolute.X, absolute.Y)
		end))
	end

	return clone
end

function Utility.joinFeature(originalIcon, parentIcon, iconsArray, scrollingFrameOrFrame)

	-- This is resonsible for moving the icon under a feature like a dropdown
	local joinJanitor = originalIcon.joinJanitor
	joinJanitor:clean()
	if not scrollingFrameOrFrame then
		originalIcon:leave()
		return
	end
	originalIcon.parentIconUID = parentIcon.UID
	originalIcon.joinedFrame = scrollingFrameOrFrame
	local function updateAlignent()
		local parentAlignment = parentIcon.alignment
		if parentAlignment == "Center" then
			parentAlignment = "Left"
		end
		originalIcon:setAlignment(parentAlignment, true)
	end
	joinJanitor:add(parentIcon.alignmentChanged:Connect(updateAlignent))
	updateAlignent()
	originalIcon:modifyTheme({"IconButton", "BackgroundTransparency", 1}, "JoinModification")
	originalIcon:modifyTheme({"ClickRegion", "Active", false}, "JoinModification")
	if parentIcon.childModifications then
		-- We defer so that the default values (such as dropdown
		-- minimum width can be applied before any custom
		-- child modifications from the user)
		task.defer(function()
			originalIcon:modifyTheme(parentIcon.childModifications, parentIcon.childModificationsUID)
		end)
	end
	--
	local clickRegion = originalIcon:getInstance("ClickRegion")
	local function makeSelectable()
		clickRegion.Selectable = parentIcon.isSelected
	end
	joinJanitor:add(parentIcon.toggled:Connect(makeSelectable))
	task.defer(makeSelectable)
	joinJanitor:add(function()
		clickRegion.Selectable = true
	end)
	--

	-- We track icons in arrays and dictionaries using their UID instead of the icon
	-- itself to prevent heavy cyclical tables when printing the icons
	local originalIconUID = originalIcon.UID
	table.insert(iconsArray, originalIconUID)
	parentIcon:autoDeselect(false)
	parentIcon.childIconsDict[originalIconUID] = true
	if not parentIcon.isEnabled then
		parentIcon:setEnabled(true)
	end
	originalIcon.joinedParent:Fire(parentIcon)

	-- This is responsible for removing it from that feature and updating
	-- their parent icon so its informed of the icon leaving it
	joinJanitor:add(function()
		local joinedFrame = originalIcon.joinedFrame
		if not joinedFrame then
			return
		end
		for i, iconUID in pairs(iconsArray) do
			if iconUID == originalIconUID then
				table.remove(iconsArray, i)
				break
			end
		end
		local Icon = require(originalIcon.iconModule)
		local parentIcon = Icon.getIconByUID(originalIcon.parentIconUID)
		if not parentIcon then
			return
		end
		originalIcon:setAlignment(originalIcon.originalAlignment)
		originalIcon.parentIconUID = false
		originalIcon.joinedFrame = false
		originalIcon:setBehaviour("IconButton", "BackgroundTransparency", nil, true)
		originalIcon:removeModification("JoinModification")
		
		local parentHasNoChildren = true
		local parentChildIcons = parentIcon.childIconsDict
		parentChildIcons[originalIconUID] = nil
		for childIconUID, _ in pairs(parentChildIcons) do
			parentHasNoChildren = false
			break
		end
		if parentHasNoChildren and not parentIcon.isAnOverflow then
			parentIcon:setEnabled(false)
		end
		updateAlignent()

	end)

end



return Utility
end;
};
G2L_MODULES[G2L["19"]] = {
Closure = function()
    local script = G2L["19"];return "v3.0.2"
end;
};
G2L_MODULES[G2L["1a"]] = {
Closure = function()
    local script = G2L["1a"];-- This module enables you to place Icon wherever you like within the data model while
-- still enabling third-party applications (such as HDAdmin/Nanoblox) to locate it
-- This is necessary to prevent two TopbarPlus applications initiating at runtime which would
-- cause icons to overlap with each other

local replicatedStorage = game:GetService("ReplicatedStorage")
local Reference = {}
Reference.objectName = "TopbarPlusReference"

function Reference.addToReplicatedStorage()
	local existingItem = replicatedStorage:FindFirstChild(Reference.objectName)
    if existingItem then
        return false
    end
    local objectValue = Instance.new("ObjectValue")
	objectValue.Name = Reference.objectName
    objectValue.Value = script.Parent
    objectValue.Parent = replicatedStorage
    return objectValue
end

function Reference.getObject()
	local objectValue = replicatedStorage:FindFirstChild(Reference.objectName)
    if objectValue then
        return objectValue
    end
    return false
end

return Reference
end;
};
G2L_MODULES[G2L["1c"]] = {
Closure = function()
    local script = G2L["1c"];-- The functions here are dedicated solely to managing theme state
-- and updating the appearance of instances to match that state.
-- You don't need to use any of these functions, the useful ones
-- have been abstracted as icon methods



-- LOCAL
local Themes = {}
local Utility = require(script.Parent.Parent.Utility)
local baseTheme = require(script.Default)



-- FUNCTIONS
function Themes.getThemeValue(stateGroup, instanceName, property, iconState)
	if stateGroup then
		for _, detail in pairs(stateGroup) do
			local checkingInstanceName, checkingPropertyName, checkingValue = unpack(detail)
			if instanceName == checkingInstanceName and property == checkingPropertyName then
				return checkingValue
			end
		end
	end
end

function Themes.getInstanceValue(instance, property)
	local success, value = pcall(function()
		return instance[property]
	end)
	if not success then
		value = instance:GetAttribute(property)
	end
	return value
end

function Themes.getRealInstance(instance)
	if not instance:GetAttribute("IsAClippedClone") then
		return
	end
	local originalInstance = instance:FindFirstChild("OriginalInstance")
	if not originalInstance then
		return
	end
	return originalInstance.Value
end

function Themes.getClippedClone(instance)
	if not instance:GetAttribute("HasAClippedClone") then
		return
	end
	local clippedClone = instance:FindFirstChild("ClippedClone")
	if not clippedClone then
		return
	end
	return clippedClone.Value
end

function Themes.refresh(icon, instance, specificProperty)
	-- Some instances such as notices need immediate refreshing upon creation as
	-- they're added in after the initial refresh period
	if specificProperty then
		local stateGroup = icon:getStateGroup()
		local value = Themes.getThemeValue(stateGroup, instance.Name, specificProperty) or Themes.getInstanceValue(instance, specificProperty)
		Themes.apply(icon, instance, specificProperty, value, true)
		return
	end
	-- If no property is specified we update all properties that exist within
	-- the applied theme appearance
	local stateGroup = icon:getStateGroup()
	if not stateGroup then
		return
	end
	local validInstances = {[instance.Name] = instance}
	for _, child in pairs(instance:GetDescendants()) do
		local collective = child:GetAttribute("Collective")
		if collective then
			validInstances[collective] = child
		end
		validInstances[child.Name] = child
	end
	for _, detail in pairs(stateGroup) do
		local checkingInstanceName, checkingPropertyName, checkingValue = unpack(detail)
		local instanceToUpdate = validInstances[checkingInstanceName]
		if instanceToUpdate then
			Themes.apply(icon, instanceToUpdate.Name, checkingPropertyName, checkingValue, true)
		end
	end
	return
end

function Themes.apply(icon, collectiveOrInstanceNameOrInstance, property, value, forceApply)
	-- This is responsible for **applying** appearance changes to instances within the icon
	-- however it IS NOT responsible for updating themes. Use :modifyTheme for that.
	-- This also calls callbacks given by :setBehaviour before applying these property changes
	-- to the given instances
	if icon.isDestroyed then
		return
	end
	local instances
	local collectiveOrInstanceName = collectiveOrInstanceNameOrInstance
	if typeof(collectiveOrInstanceNameOrInstance) == "Instance" then
		instances = {collectiveOrInstanceNameOrInstance}
		collectiveOrInstanceName = collectiveOrInstanceNameOrInstance.Name
	else
		instances = icon:getInstanceOrCollective(collectiveOrInstanceNameOrInstance)
	end
	local key = collectiveOrInstanceName.."-"..property
	local customBehaviour = icon.customBehaviours[key]
	for _, instance in pairs(instances) do
		local clippedClone = Themes.getClippedClone(instance)
		if clippedClone then
			-- This means theme effects are applied to both the original
			-- instance and its clone (instead of just the instance).
			-- This is important for some properties such as position
			-- and size which might be dictated by the clone
			table.insert(instances, clippedClone)
		end
	end
	for _, instance in pairs(instances) do
		if property == "Position" and Themes.getClippedClone(instance) then
			-- The clone manages the position of the real instance so ignore
			continue
		elseif property == "Size" and Themes.getRealInstance(instance) then
			-- The real instance manages the size of the clone so ignore
			continue
		end
		local currentValue = Themes.getInstanceValue(instance, property)
		if not forceApply and value == currentValue then
			continue
		end
		if customBehaviour then
			local newValue = customBehaviour(value, instance, property)
			if newValue ~= nil then
				value = newValue
			end
		end
		local success = pcall(function()
			instance[property] = value
		end)
		if not success then
			-- If property is not a real property, we set
			-- the value as an attribute instead. This is useful
			-- for instance in :setWidth where we also want to
			-- specify a desired width for every state which can
			-- then be easily read by the widget element
			instance:SetAttribute(property, value)
		end
	end
end

function Themes.getModifications(modifications)
	if typeof(modifications[1]) ~= "table" then
		-- This enables users to do :modifyTheme({a,b,c,d})
		-- in addition of :modifyTheme({{a,b,c,d}})
		modifications = {modifications}
	end
	return modifications
end

function Themes.merge(detail, modification, callback)
	local instanceName, property, value, stateName = table.unpack(modification)
	local checkingInstanceName, checkingPropertyName, _, checkingStateName = table.unpack(detail)
	if instanceName == checkingInstanceName and property == checkingPropertyName and Themes.statesMatch(stateName, checkingStateName) then
		detail[3] = value
		if callback then
			callback(detail)
		end
		return true
	end
	return false
end

function Themes.modify(icon, modifications, modificationsUID)
	-- This is what the 'old set' used to do (although for clarity that behaviour has now been
	-- split into two methods, .modifyTheme and .apply).
	-- modifyTheme is responsible for UPDATING the internal values within a theme for a particular
	-- state, then checking to see if the appearance of the icon needs to be updated.
	-- If no iconState is specified, the change is applied to both Deselected and Selected
	-- A modification can also be 'undone' using :removeModification and passing in
	-- the UID returned from this method
	task.spawn(function()
		modificationsUID = modificationsUID or Utility.generateUID()
		modifications = Themes.getModifications(modifications)
		for _, modification in pairs(modifications) do
			local instanceName, property, value, iconState = table.unpack(modification)
			if iconState == nil then
				-- If no state specified, apply to all states
				Themes.modify(icon, {instanceName, property, value, "Selected"}, modificationsUID)
				Themes.modify(icon, {instanceName, property, value, "Viewing"}, modificationsUID)
			end
			local chosenState = Utility.formatStateName(iconState or "Deselected")
			local stateGroup = icon:getStateGroup(chosenState)
			local function nowSetIt()
				if chosenState == icon.activeState then
					Themes.apply(icon, instanceName, property, value)
				end
			end
			local function updateRecord()
				for stateName, detail in pairs(stateGroup) do
					local didMerge = Themes.merge(detail, modification, function(detail)
						detail[5] = modificationsUID
						nowSetIt()
					end)
					if didMerge then
						return
					end
				end
				local detail = {instanceName, property, value, chosenState, modificationsUID}
				table.insert(stateGroup, detail)
				nowSetIt()
			end
			updateRecord()
		end
	end)
	return modificationsUID
end

function Themes.remove(icon, modificationsUID)
	for iconState, stateGroup in pairs(icon.appearance) do
		for i = #stateGroup, 1, -1 do
			local detail = stateGroup[i]
			local checkingUID = detail[5]
			if checkingUID == modificationsUID then
				table.remove(stateGroup, i)
			end
		end
	end
	Themes.rebuild(icon)
end

function Themes.removeWith(icon, instanceName, property, state)
	for iconState, stateGroup in pairs(icon.appearance) do
		if state == iconState or not state then
			for i = #stateGroup, 1, -1 do
				local detail = stateGroup[i]
				local detailName = detail[1]
				local detailProperty = detail[2]
				if detailName == instanceName and detailProperty == property then
					table.remove(stateGroup, i)
				end
			end
		end
	end
	Themes.rebuild(icon)
end

function Themes.change(icon)
	-- This changes the theme to the appearance of whatever
	-- state is currently active
	local stateGroup = icon:getStateGroup()
	for _, detail in pairs(stateGroup) do
		local instanceName, property, value = unpack(detail)
		Themes.apply(icon, instanceName, property, value)
	end
end

function Themes.set(icon, theme)
	-- This is responsible for processing the final appearance of a given theme (such as
	-- ensuring Deselected merge into missing Selected, saving that internal state,
	-- then checking to see if the appearance of the icon needs to be updated
	local themesJanitor = icon.themesJanitor
	themesJanitor:clean()
	themesJanitor:add(icon.stateChanged:Connect(function()
		Themes.change(icon)
	end))
	if typeof(theme) == "Instance" and theme:IsA("ModuleScript") then
		theme = require(theme)
	end
	icon.appliedTheme = theme
	Themes.rebuild(icon)
end

function Themes.statesMatch(state1, state2)
	-- States match if they have the same name OR if nil (because unspecified represents all states)
	local state1lower = (state1 and string.lower(state1))
	local state2lower = (state2 and string.lower(state2))
	return state1lower == state2lower or not state1 or not state2
end

function Themes.rebuild(icon)
	-- A note for my future self: this code can be optimised further by
	-- converting appearance into a instanceName-property dictionary
	-- as apposed to an array of every potential change. When converting
	-- in the future, .modify and .apply would also have to be updated.
	local appliedTheme = icon.appliedTheme
	local statesArray = {"Deselected", "Selected", "Viewing"}
	local function generateTheme()
		for _, stateName in pairs(statesArray) do
			-- This applies themes in layers
			-- The last layers take higher priority as they overwrite
			-- any duplicate earlier applied effects
			local stateAppearance = {}
			local function updateDetails(theme, incomingStateName)
				-- This ensures there's always a base 'default' layer
				if not theme then
					return
				end
				for _, detail in pairs(theme) do
					local modificationsUID = detail[5]
					local detailStateName = detail[4]
					if Themes.statesMatch(incomingStateName, detailStateName) then
						local key = detail[1].."-"..detail[2]
						local newDetail = Utility.copyTable(detail)
						newDetail[5] = modificationsUID
						stateAppearance[key] = newDetail
					end
				end
			end
			-- First we apply the base theme (i.e. the Default module)
			if stateName == "Selected" then
				updateDetails(baseTheme, "Deselected")
			end
			updateDetails(baseTheme, "Empty")
			updateDetails(baseTheme, stateName)
			-- Next we apply any custom themes by the games developer
			if appliedTheme ~= baseTheme then
				if stateName == "Selected" then
					updateDetails(appliedTheme, "Deselected")
				end
				updateDetails(baseTheme, "Empty")
				updateDetails(appliedTheme, stateName)
			end
			-- Finally we apply any modifications that have already been made
			-- Modifiers are all the changes made using icon:modifyTheme(...)
			local alreadyAppliedTheme = {}
			local alreadyAppliedGroup = icon.appearance[stateName]
			if alreadyAppliedGroup then
				for _, modifier in pairs(alreadyAppliedGroup) do
					local modificationsUID = modifier[5]
					if modificationsUID ~= nil then
						local modification = {modifier[1], modifier[2], modifier[3], stateName, modificationsUID}
						table.insert(alreadyAppliedTheme, modification)
					end
				end
			end
			updateDetails(alreadyAppliedTheme, stateName)
			-- This now converts it into our final appearance
			local finalStateAppearance = {}
			for _, detail in pairs(stateAppearance) do
				table.insert(finalStateAppearance, detail)
			end
			icon.appearance[stateName] = finalStateAppearance
		end
		Themes.change(icon)
	end
	generateTheme()
end



return Themes
end;
};
G2L_MODULES[G2L["1d"]] = {
Closure = function()
    local script = G2L["1d"];-- Themes in v3 work simply by applying the value (agument[3])
-- to the property (agument[2]) of an instance within the icon which
-- matches the name of argument[1]. Argument[1] can also be used to
-- specify a collection of instances with a corresponding 'collective'
-- value. A colletive is simply an attribute applied to some instances
-- within the icon to group them together (such as "IconCorners").
-- If the property (argument[2]) does not exist within the instance,
-- it will instead be applied as an attribute on the instance:
-- (i.e. ``instance:SetAttribute(argument[2], [argument[3])``)
-- Use argument[4] to specify a state: "Deselected", "Selected"
-- or "Viewing". If argument[4] is empty the state will default
-- to "Deselected".
-- I've designed themes this way so you have full control over
-- the appearance of the widget and its descendants


return {
	
	-- When no state is specified the modification is applied to *all* states (Deselected, Selected and Viewing)
	{"IconCorners", "CornerRadius", UDim.new(1, 0)},
	{"Selection", "RotationSpeed", 1},
	{"Selection", "Size", UDim2.new(1, 0, 1, 1)},
	{"Selection", "Position", UDim2.new(0, 0, 0, 0)},
	{"SelectionGradient", "Color", ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(86, 86, 86)),
	})},
	
	-- When the icon is deselected
	{"IconImage", "Image", "", "Deselected"},
	{"IconLabel", "Text", "", "Deselected"},
	{"IconLabel", "Position", UDim2.fromOffset(0, 0), "Deselected"}, -- 0, -1
	{"Widget", "MinimumWidth", 44, "Deselected"},
	{"Widget", "MinimumHeight", 44, "Deselected"},
	{"Widget", "BorderSize", 4, "Deselected"},
	{"IconButton", "BackgroundColor3", Color3.fromRGB(0, 0, 0), "Deselected"},
	{"IconButton", "BackgroundTransparency", 0.3, "Deselected"},
	{"IconImageScale", "Value", 0.5, "Deselected"},
	{"IconImageCorner", "CornerRadius", UDim.new(0, 0), "Deselected"},
	{"IconImage", "ImageColor3", Color3.fromRGB(255, 255, 255), "Deselected"},
	{"IconImage", "ImageTransparency", 0, "Deselected"},
	{"IconLabel", "FontFace", Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal), "Deselected"},
	{"IconLabel", "TextSize", 16, "Deselected"},
	{"IconSpot", "BackgroundTransparency", 1, "Deselected"},
	{"IconOverlay", "BackgroundTransparency", 0.925, "Deselected"},
	{"IconSpotGradient", "Enabled", false, "Deselected"},
	{"IconGradient", "Enabled", false, "Deselected"},
	{"ClickRegion", "Active", true, "Deselected"},  -- This is set to false within scrollers to ensure scroller can be dragged on mobile
	{"Menu", "Active", false, "Deselected"},
	{"ContentsList", "HorizontalAlignment", Enum.HorizontalAlignment.Center, "Deselected"},
	{"Dropdown", "BackgroundColor3", Color3.fromRGB(0, 0, 0), "Deselected"},
	{"Dropdown", "BackgroundTransparency", 0.3, "Deselected"},
	{"Dropdown", "MaxIcons", 4, "Deselected"},
	{"Menu", "MaxIcons", 4, "Deselected"},
	{"Notice", "Position", UDim2.new(1, -12, 0, -1), "Deselected"},
	{"Notice", "Size", UDim2.new(0, 20, 0, 20), "Deselected"},
	{"NoticeLabel", "TextSize", 13, "Deselected"},
	{"PaddingLeft", "Size", UDim2.new(0, 9, 1, 0), "Deselected"},
	{"PaddingRight", "Size", UDim2.new(0, 11, 1, 0), "Deselected"},
	
	-- When the icon is selected
	-- Selected also inherits everything from Deselected if nothing is set
	{"IconSpot", "BackgroundTransparency", 0.7, "Selected"},
	{"IconSpot", "BackgroundColor3", Color3.fromRGB(255, 255, 255), "Selected"},
	{"IconSpotGradient", "Enabled", true, "Selected"},
	{"IconSpotGradient", "Rotation", 45, "Selected"},
	{"IconSpotGradient", "Color", ColorSequence.new(Color3.fromRGB(96, 98, 100), Color3.fromRGB(77, 78, 80)), "Selected"},
	
	
	-- When a cursor is hovering above, a controller highlighting, or touchpad (mobile) pressing (but not released)
	--{"IconSpot", "BackgroundTransparency", 0.75, "Viewing"},
	
}
end;
};
G2L_MODULES[G2L["1e"]] = {
Closure = function()
    local script = G2L["1e"];-- This is to provide backwards compatability with the old Roblox
-- topbar while experiences transition over to the new topbar
-- You don't need to apply this yourself, topbarplus automatically
-- applies it if the old roblox topbar is detected


return {
	{"Selection", "Size", UDim2.new(1, -6, 1, -5)},
	{"Selection", "Position", UDim2.new(0, 3, 0, 3)},
	
	{"Widget", "MinimumWidth", 32, "Deselected"},
	{"Widget", "MinimumHeight", 32, "Deselected"},
	{"Widget", "BorderSize", 0, "Deselected"},
	{"IconCorners", "CornerRadius", UDim.new(0, 9), "Deselected"},
	{"IconButton", "BackgroundTransparency", 0.5, "Deselected"},
	{"IconLabel", "TextSize", 14, "Deselected"},
	{"Dropdown", "BackgroundTransparency", 0.5, "Deselected"},
	{"Notice", "Position", UDim2.new(1, -12, 0, -3), "Deselected"},
	{"Notice", "Size", UDim2.new(0, 15, 0, 15), "Deselected"},
	{"NoticeLabel", "TextSize", 11, "Deselected"},
	
	{"IconSpot", "BackgroundColor3", Color3.fromRGB(0, 0, 0), "Selected"},
	{"IconSpot", "BackgroundTransparency", 0.702, "Selected"},
	{"IconSpotGradient", "Enabled", false, "Selected"},
	{"IconOverlay", "BackgroundTransparency", 0.97, "Selected"},
	
}
end;
};
G2L_MODULES[G2L["1f"]] = {
Closure = function()
    local script = G2L["1f"];-- When designing your game for many devices and screen sizes, icons may occasionally
-- particularly for smaller devices like phones, overlap with other icons or the bounds
-- of the screen. The overflow handler solves this challenge by moving the out-of-bounds
-- icon into an overflow menu (with a limited scrolling canvas) preventing overlaps occuring



-- LOCAL
local Overflow = {}
local holders = {}
local orderedAvailableIcons = {}
local iconsDict
local currentCamera = workspace.CurrentCamera
local overflowIcons = {}
local overflowIconUIDs = {}
local Utility = require(script.Parent.Parent.Utility)
local Icon



-- FUNCTIONS
-- This is called upon the Icon initializing
function Overflow.start(incomingIcon)
	Icon = incomingIcon
	iconsDict = Icon.iconsDictionary
	local primaryScreenGui
	for _, screenGui in pairs(Icon.container) do
		if primaryScreenGui == nil and screenGui.ScreenInsets == Enum.ScreenInsets.TopbarSafeInsets then
			primaryScreenGui = screenGui
		end
		for _, holder in pairs(screenGui.Holders:GetChildren()) do
			if holder:GetAttribute("IsAHolder") then
				holders[holder.Name] = holder
			end
		end
	end

	-- We listen for changes in icons (such as them being added, removed,
	-- the setting of a different alignment, the widget size changing, etc)
	local beginOverflow = false
	local updateBoundaries = Utility.createStagger(0.1, function(ignoreAvailable)
		if not beginOverflow then
			return
		end
		if not ignoreAvailable then
			Overflow.updateAvailableIcons("Center")
		end
		Overflow.updateBoundary("Left")
		Overflow.updateBoundary("Right")
	end)
	task.delay(1, function()
		-- This is essential to prevent central icons begin added
		-- left or right due to incomplete UIListLayout calculations
		-- within the first few frames
		beginOverflow = true
		updateBoundaries()
	end)
	Icon.iconAdded:Connect(updateBoundaries)
	Icon.iconRemoved:Connect(updateBoundaries)
	Icon.iconChanged:Connect(updateBoundaries)
	currentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
		updateBoundaries(true)
	end)
	primaryScreenGui:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		updateBoundaries(true)
	end)
end

function Overflow.getWidth(icon, getMaxWidth)
	local widget = icon.widget
	return widget:GetAttribute("TargetWidth") or widget.AbsoluteSize.X
end

function Overflow.getAvailableIcons(alignment)
	local ourOrderedIcons = orderedAvailableIcons[alignment]
	if not ourOrderedIcons then
		ourOrderedIcons = Overflow.updateAvailableIcons(alignment)
	end
	return ourOrderedIcons
end

function Overflow.updateAvailableIcons(alignment)

	-- We only track items that are directly on the topbar (i.e. not within a parent icon)
	local ourTotal = 0
	local holder = holders[alignment]
	local holderUIList = holder.UIListLayout
	local ourOrderedIcons = {}
	for _, icon in pairs(iconsDict) do
		local parentUID = icon.parentIconUID
		local isDirectlyOnTopbar = not parentUID or overflowIconUIDs[parentUID]
		local isOverflow = overflowIconUIDs[icon.UID]
		if isDirectlyOnTopbar and icon.alignment == alignment and not isOverflow then
			table.insert(ourOrderedIcons, icon)
			ourTotal += 1
		end
	end

	-- Ignore if no icons are available
	if ourTotal <= 0 then
		return {}
	end

	-- This sorts these icons by smallest order, or if equal, left-most position
	-- (even for the right alignment because all icons are sorted left-to-right)
	table.sort(ourOrderedIcons, function(iconA, iconB)
		local orderA = iconA.widget.LayoutOrder
		local orderB = iconB.widget.LayoutOrder
		local hasParentA = iconA.parentIconUID
		local hasParentB = iconB.parentIconUID
		if hasParentA == hasParentB then
			if orderA < orderB then
				return true
			end
			if orderA > orderB then
				return false
			end
			return iconA.widget.AbsolutePosition.X < iconB.widget.AbsolutePosition.X
		elseif hasParentB then
			return false
		elseif hasParentA then
			return true
		end
	end)

	-- Finish up
	orderedAvailableIcons[alignment] = ourOrderedIcons
	return ourOrderedIcons

end

function Overflow.getRealXPositions(alignment, orderedIcons)
	-- We calculate the the absolute position of icons instead of reading
	-- directly to determine where they would be if not within an overflow
	local joinOverflow = false
	local isLeft = alignment == "Left"
	local holder = holders[alignment]
	local holderXPos = holder.AbsolutePosition.X
	local holderXSize = holder.AbsoluteSize.X
	local holderUIList = holder.UIListLayout
	local topbarInset = holderUIList.Padding.Offset
	local absoluteX = (isLeft and holderXPos) or holderXPos + holderXSize
	local realXPositions = {}
	if isLeft then
		Utility.reverseTable(orderedIcons)
	end
	for i = #orderedIcons, 1, -1 do
		local icon = orderedIcons[i]
		local sizeX = Overflow.getWidth(icon)
		if not isLeft then
			absoluteX -= sizeX
		end
		realXPositions[icon.UID] = absoluteX
		if isLeft then
			absoluteX += sizeX
		end
		absoluteX += (isLeft and topbarInset) or -topbarInset
	end
	return realXPositions
end

function Overflow.updateBoundary(alignment)

	-- We only track items that are directly on the topbar (i.e. not within a parent icon) or within an overflow
	local holder = holders[alignment]
	local holderUIList = holder.UIListLayout
	local holderXPos = holder.AbsolutePosition.X
	local holderXSize = holder.AbsoluteSize.X
	local topbarInset = holderUIList.Padding.Offset
	local topbarPadding = holderUIList.Padding.Offset
	local BOUNDARY_GAP = topbarInset
	local ourOrderedIcons = Overflow.updateAvailableIcons(alignment)
	local boundWidth = 0
	local ourTotal = 0
	for _, icon in pairs(ourOrderedIcons) do
		boundWidth += Overflow.getWidth(icon) + topbarPadding
		ourTotal += 1
	end
	if ourTotal <= 0 then
		return
	end
	
	-- These are the icons with menus which icons will be moved into
	-- when overflowing
	local isCentral = alignment == "Central"
	local isLeft = alignment == "Left"
	local isRight = not isLeft
	local overflowIcon = overflowIcons[alignment]
	if not overflowIcon and not isCentral and #ourOrderedIcons > 0 then
		local order = (isLeft and -9999999) or 9999999
		overflowIcon = Icon.new()--:setLabel(`{alignment}`)
		overflowIcon:setImage(6069276526, "Deselected")
		overflowIcon:setName("Overflow"..alignment)
		overflowIcon:setOrder(order)
		overflowIcon:setAlignment(alignment)
		overflowIcon:autoDeselect(false)
		overflowIcon.isAnOverflow = true
		--overflowIcon:freezeMenu()
		overflowIcon:select("OverflowStart", overflowIcon)
		overflowIcon:setEnabled(false)
		overflowIcons[alignment] = overflowIcon
		overflowIconUIDs[overflowIcon.UID] = true
	end

	-- The default boundary is the point where both the left-most-right-icon
	-- and left-most-right-icon meet OR the opposite side of the screen
	local oppositeAlignment = (alignment == "Left" and "Right") or "Left"
	local oppositeOrderedIcons = Overflow.updateAvailableIcons(oppositeAlignment)
	local nearestOppositeIcon = (isLeft and oppositeOrderedIcons[1]) or (isRight and oppositeOrderedIcons[#oppositeOrderedIcons])
	local oppositeOverflowIcon = overflowIcons[oppositeAlignment]
	local boundary = (isLeft and holderXPos + holderXSize) or holderXPos
	if nearestOppositeIcon then
		local oppositeEndWidget = nearestOppositeIcon.widget
		local oppositeRealXPositions = Overflow.getRealXPositions(oppositeAlignment, oppositeOrderedIcons)
		local oppositeX = oppositeRealXPositions[nearestOppositeIcon.UID]
		local oppositeXSize = Overflow.getWidth(nearestOppositeIcon)
		boundary = (isLeft and oppositeX - BOUNDARY_GAP) or oppositeX + oppositeXSize + BOUNDARY_GAP
	end
	
	-- We get the left-most icon (if left alignment) or right-most-icon (if
	-- right alignment) of the central icons group to see if we need to change
	-- the boundary (if the central icon boundary is smaller than the alignment
	-- boundary then we use the central)
	local centerOrderedIcons = Overflow.getAvailableIcons("Center")
	local centerPos = (isLeft and 1) or #centerOrderedIcons
	local nearestCenterIcon = centerOrderedIcons[centerPos]
	local usingNearestCenter = false
	if nearestCenterIcon and not nearestCenterIcon.hasRelocatedInOverflow then
		local ourNearestIcon = (isLeft and ourOrderedIcons[#ourOrderedIcons]) or (isRight and ourOrderedIcons[1])
		local centralNearestXPos = nearestCenterIcon.widget.AbsolutePosition.X
		local ourNearestXPos = ourNearestIcon.widget.AbsolutePosition.X
		local ourNearestXSize = Overflow.getWidth(ourNearestIcon)
		local centerBoundary = (isLeft and centralNearestXPos-BOUNDARY_GAP) or centralNearestXPos + Overflow.getWidth(nearestCenterIcon) + BOUNDARY_GAP
		local removeBoundary = (isLeft and ourNearestXPos + ourNearestXSize) or ourNearestXPos
		if isLeft then
			if centerBoundary < removeBoundary then
				nearestCenterIcon:align("Left")
				nearestCenterIcon.hasRelocatedInOverflow = true
			end
		elseif isRight then
			if centerBoundary > removeBoundary then
				nearestCenterIcon:align("Right")
				nearestCenterIcon.hasRelocatedInOverflow = true
			end
		end
	end
	
	--[[
	This updates the maximum size of the overflow menus
	The menu determines its bounds from the smallest of either:
	 	1. The closest center-aligned icon (i.e. the boundary)
	 	2. The edge of the opposite overflow menu UNLESS...
	 	3. ... the edge exceeds more than half the screenGui
	--]]
	if overflowIcon then
		local menuBoundary = boundary
		local menu = overflowIcon:getInstance("Menu")
		local holderXEndPos = holderXPos + holderXSize
		local menuWidth = holderXSize
		if menu and oppositeOverflowIcon then
			local oppositeWidget = oppositeOverflowIcon.widget
			local oppositeXPos = oppositeWidget.AbsolutePosition.X
			local oppositeXSize = Overflow.getWidth(oppositeOverflowIcon)
			local oppositeBoundary = (isLeft and oppositeXPos - BOUNDARY_GAP) or oppositeXPos + oppositeXSize + BOUNDARY_GAP
			local oppositeMenu = oppositeOverflowIcon:getInstance("Menu")
			local isDominant = menu.AbsoluteCanvasSize.X >= oppositeMenu.AbsoluteCanvasSize.X
			if not usingNearestCenter then
				local halfwayXPos = holderXPos + holderXSize/2
				local halfwayBoundary = (isLeft and halfwayXPos - BOUNDARY_GAP/2) or halfwayXPos + BOUNDARY_GAP/2
				menuBoundary = halfwayBoundary
				if isDominant then
					menuBoundary = oppositeBoundary
				end
			end
			menuWidth = (isLeft and menuBoundary - holderXPos) or (holderXEndPos - menuBoundary)
		end
		local currentMaxWidth = menu and menu:GetAttribute("MaxWidth")
		menuWidth = Utility.round(menuWidth)
		if menu and currentMaxWidth ~= menuWidth then
			menu:SetAttribute("MaxWidth", menuWidth)
		end
	end

	-- Parent ALL icons of that alignment into the overflow if at least on
	-- sibling exceeds the bounds.
	-- We calculate the the absolute position of icons instead of reading
	-- directly to determine where they would be if not within an overflow
	local joinOverflow = false
	local realXPositions = Overflow.getRealXPositions(alignment, ourOrderedIcons)
	for i = #ourOrderedIcons, 1, -1 do
		local icon = ourOrderedIcons[i]
		local widgetX = Overflow.getWidth(icon)
		local xPos = realXPositions[icon.UID]
		if (isLeft and xPos + widgetX >= boundary) or (isRight and xPos <= boundary) then
			joinOverflow = true
		end
	end
	for i = #ourOrderedIcons, 1, -1 do
		local icon = ourOrderedIcons[i]
		local isOverflow = overflowIconUIDs[icon.UID]
		if not isOverflow then
			if joinOverflow and not icon.parentIconUID then
				icon:joinMenu(overflowIcon)
			elseif not joinOverflow and icon.parentIconUID then
				icon:leave()
			end
		end
	end
	
	-- Hide the overflows when not in use
	if overflowIcon.isEnabled ~= joinOverflow then
		overflowIcon:setEnabled(joinOverflow)
	end
	
	-- Have the menus auto selected
	if overflowIcon.isEnabled and not overflowIcon.overflowAlreadyOpened then
		overflowIcon.overflowAlreadyOpened = true
		overflowIcon:select()
	end

end



return Overflow
end;
};
G2L_MODULES[G2L["20"]] = {
Closure = function()
    local script = G2L["20"];-- As the name suggests, this handles everything related to gamepads
-- (i.e. Xbox or Playstation controllers) and their navigation
-- I created a separate module for gamepads (and not touchpads or
-- keyboards) because gamepads are greatly more unqiue and require
-- additional tailored programming



-- SERVICES
local GamepadService = game:GetService("GamepadService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")



-- LOCAL
local Gamepad = {}
local Icon



-- FUNCTIONS
-- This is called upon the Icon initializing
function Gamepad.start(incomingIcon)
	
	-- Public variables
	Icon = incomingIcon
	Icon.highlightKey = Enum.KeyCode.DPadUp -- What controller key to highlight the topbar (or set to false to disable)
	Icon.highlightIcon = false -- Change to a specific icon if you'd like to highlight a specific icon instead of the left-most
	
	-- We defer so the developer can make changes before the
	-- gamepad controls are initialized
	task.delay(1, function()
		-- Some local utility
		local iconsDict = Icon.iconsDictionary
		local function getIconFromSelectedObject()
			local clickRegion = GuiService.SelectedObject
			local iconUID = clickRegion and clickRegion:GetAttribute("CorrespondingIconUID")
			local icon = iconUID and iconsDict[iconUID]
			return icon
		end
		
		-- This enables users to instantly open up their last selected icon
		local previousHighlightedIcon
		local iconDisplayingHighlightKey
		local usedIndicatorOnce = false
		local usedBOnce = false
		local Utility = require(script.Parent.Parent.Utility)
		local Selection = require(script.Parent.Parent.Elements.Selection)
		local function updateSelectedObject()
			local icon = getIconFromSelectedObject()
			local gamepadEnabled = UserInputService.GamepadEnabled
			if icon then
				if gamepadEnabled then
					local clickRegion = icon:getInstance("ClickRegion")
					local selection = icon.selection
					if not selection then
						selection = icon.janitor:add(Selection(Icon))
						selection:SetAttribute("IgnoreVisibilityUpdater", true)
						selection.Parent = icon.widget
						icon.selection = selection
						icon:refreshAppearance(selection) --icon:clipOutside(selection)
					end
					clickRegion.SelectionImageObject = selection.Selection
				end
				if previousHighlightedIcon and previousHighlightedIcon ~= icon then
					previousHighlightedIcon:setIndicator()
				end
				local newIndicator = if gamepadEnabled and not usedBOnce and not icon.parentIconUID then Enum.KeyCode.ButtonB else nil
				previousHighlightedIcon = icon
				Icon.lastHighlightedIcon = icon
				icon:setIndicator(newIndicator)
			else
				local newIndicator = if gamepadEnabled and not usedIndicatorOnce then Icon.highlightKey else nil
				if not previousHighlightedIcon then
					previousHighlightedIcon = Gamepad.getIconToHighlight()
				end
				if newIndicator == Icon.highlightKey then
					-- We only display the highlightKey once to show
					-- the user how to highlight the topbar icon
					usedIndicatorOnce = true
				else
					--usedBOnce = true
				end
				if previousHighlightedIcon then
					previousHighlightedIcon:setIndicator(newIndicator)
				end
			end
		end
		GuiService:GetPropertyChangedSignal("SelectedObject"):Connect(updateSelectedObject)

		-- This listens for a gamepad being present/added/removed
		local function checkGamepadEnabled()
			local gamepadEnabled = UserInputService.GamepadEnabled
			if not gamepadEnabled then
				usedIndicatorOnce = false
				usedBOnce = false
			end
			updateSelectedObject()
		end
		UserInputService:GetPropertyChangedSignal("GamepadEnabled"):Connect(checkGamepadEnabled)
		checkGamepadEnabled()

		-- This allows for easy highlighting of the topbar when the
		-- when ``Icon.highlightKey`` (i.e. DPadUp) is pressed.
		-- If you'd like to disable, do ``Icon.highlightKey = false``
		UserInputService.InputBegan:Connect(function(input, touchingAnObject)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				-- Sometimes the Roblox gamepad glitches when combined with a cursor
				-- This fixes that by unhighlighting if the cursor is pressed down
				-- (i.e. a mouse click)
				local icon = getIconFromSelectedObject()
				if icon then
					GuiService.SelectedObject = nil
				end
				return
			end
			if input.KeyCode ~= Icon.highlightKey then
				return
			end
			local iconToHighlight = Gamepad.getIconToHighlight()
			if iconToHighlight then
				if GamepadService.GamepadCursorEnabled then
					task.wait(0.2)
					GamepadService:DisableGamepadCursor()
				end
				local clickRegion = iconToHighlight:getInstance("ClickRegion")
				GuiService.SelectedObject = clickRegion
			end
		end)
	end)
end

function Gamepad.getIconToHighlight()
	-- If an icon has already been selected, returns the last selected icon
	-- Else if more than 0 icons, it selects the left-most icon
	local iconsDict = Icon.iconsDictionary
	local iconToHighlight = Icon.highlightIcon or Icon.lastHighlightedIcon
	if not iconToHighlight then
		local currentX
		for _, icon in pairs(iconsDict) do
			if icon.parentIconUID then
				continue
			end
			local thisX = icon.widget.AbsolutePosition.X
			if not currentX or thisX < currentX then
				iconToHighlight = icon
				currentX = iconToHighlight.widget.AbsolutePosition.X
			end
		end
	end
	return iconToHighlight
end

-- This called when the icon's ClickRegion is created
function Gamepad.registerButton(buttonInstance)
	-- This provides a basic level of support for controllers by making
	-- the icons easy to highlight via the virtual cursor, then
	-- when selected, focuses in on the selected icon and hops
	-- between other nearby icons simply by toggling the joystick
	local inputBegan = false
	buttonInstance.InputBegan:Connect(function(input)
		-- Two wait frames required to ensure inputBegan is detected within
		-- UserInputService.InputBegan. We do this because object.InputBegan
		-- does not return the correct input objects (unlike the service)
		inputBegan = true
		task.wait()
		task.wait()
		inputBegan = false
	end)
	local connection = UserInputService.InputBegan:Connect(function(input)
		task.wait()
		if input.KeyCode == Enum.KeyCode.ButtonA and inputBegan then
			-- We focus on an icon when selected via the virtual cursor
			task.wait(0.2)
			GamepadService:DisableGamepadCursor()
			GuiService.SelectedObject = buttonInstance
			return
		end
		local isSelected = GuiService.SelectedObject == buttonInstance
		local unselectKeyCodes = {"ButtonB", "ButtonSelect"}
		local keyName = input.KeyCode.Name
		if table.find(unselectKeyCodes, keyName) and isSelected then
			-- We unfocus when back button is pressed, but ignore
			-- if the virtual cursor is disabled otherwise it will be
			-- impossible to select the topbar
			if not(keyName == "ButtonSelect" and not GamepadService.GamepadCursorEnabled) then
				GuiService.SelectedObject = nil
			end
		end
	end)
	buttonInstance.Destroying:Once(function()
		connection:Disconnect()
	end)
end



return Gamepad
end;
};
G2L_MODULES[G2L["21"]] = {
Closure = function()
    local script = G2L["21"];-- v3 alone has taken 250+ hours so please consider keeping this
-- required attribute and linking to TopbarPlus within your games
-- description or devforum post. An in-game readable version also
-- makes it easier for me to debug and compare differences betewen
-- live places. Thanks! ~Ben

local RunService = game:GetService("RunService")
local GroupService = game:GetService("GroupService")
local Players = game:GetService("Players")
if not RunService:IsStudio() then
	print(`?? Running TopbarPlus {require(script.Parent.VERSION)} by ForeverHD`)
end

return {}
end;
};
G2L_MODULES[G2L["23"]] = {
Closure = function()
    local script = G2L["23"];return function(icon, Icon)

	local notice = Instance.new("Frame")
	notice.Name = "Notice"
	notice.ZIndex = 25
	notice.AutomaticSize = Enum.AutomaticSize.X
	notice.BorderColor3 = Color3.fromRGB(0, 0, 0)
	notice.BorderSizePixel = 0
	notice.BackgroundTransparency = 0.1
	notice.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	notice.Visible = false
	notice.Parent = icon.widget

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(1, 0)
	UICorner.Parent = notice

	local UIStroke = Instance.new("UIStroke")
	UIStroke.Parent = notice

	local noticeLabel = Instance.new("TextLabel")
	noticeLabel.Name = "NoticeLabel"
	noticeLabel.ZIndex = 26
	noticeLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	noticeLabel.AutomaticSize = Enum.AutomaticSize.X
	noticeLabel.Size = UDim2.new(1, 0, 1, 0)
	noticeLabel.BackgroundTransparency = 1
	noticeLabel.Position = UDim2.new(0.5, 0, 0.515, 0)
	noticeLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	noticeLabel.FontSize = Enum.FontSize.Size14
	noticeLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
	noticeLabel.Text = "1"
	noticeLabel.TextWrapped = true
	noticeLabel.TextWrap = true
	noticeLabel.Font = Enum.Font.Arial
	noticeLabel.Parent = notice
	
	local iconModule = script.Parent.Parent
	local packages = iconModule.Packages
	local Janitor = require(packages.Janitor)
	local Signal = require(packages.GoodSignal)
	local Utility = require(iconModule.Utility)
	icon.noticeChanged:Connect(function(totalNotices)

		-- Notice amount
		if not totalNotices then
			return
		end
		local exceeded99 = totalNotices > 99
		local noticeDisplay = (exceeded99 and "99+") or totalNotices
		noticeLabel.Text = noticeDisplay
		if exceeded99 then
			noticeLabel.TextSize = 11
		end

		-- Should enable
		local enabled = true
		if totalNotices < 1 then
			enabled = false
		end
		local parentIcon = Icon.getIconByUID(icon.parentIconUID)
		local dropdownOrMenuActive = #icon.dropdownIcons > 0 or #icon.menuIcons > 0
		if icon.isSelected and dropdownOrMenuActive then
			enabled = false
		elseif parentIcon and not parentIcon.isSelected then
			enabled = false
		end
		Utility.setVisible(notice, enabled, "NoticeHandler")

	end)
	icon.noticeStarted:Connect(function(customClearSignal, noticeId)
	
		if not customClearSignal then
			customClearSignal = icon.deselected
		end
		local parentIcon = Icon.getIconByUID(icon.parentIconUID)
		if parentIcon then
			parentIcon:notify(customClearSignal)
		end
		
		local noticeJanitor = icon.janitor:add(Janitor.new())
		local noticeComplete = noticeJanitor:add(Signal.new())
		noticeJanitor:add(icon.endNotices:Connect(function()
			noticeComplete:Fire()
		end))
		noticeJanitor:add(customClearSignal:Connect(function()
			noticeComplete:Fire()
		end))
		noticeId = noticeId or Utility.generateUID()
		icon.notices[noticeId] = {
			completeSignal = noticeComplete,
			clearNoticeEvent = customClearSignal,
		}
		local noticeLabel = icon:getInstance("NoticeLabel")
		local function updateNotice()
			icon.noticeChanged:Fire(icon.totalNotices)
		end
		icon.notified:Fire(noticeId)
		icon.totalNotices += 1
		updateNotice()
		noticeComplete:Once(function()
			noticeJanitor:destroy()
			icon.totalNotices -= 1
			icon.notices[noticeId] = nil
			updateNotice()
		end)
	end)
	
	-- Establish the notice
	notice:SetAttribute("ClipToJoinedParent", true)
	icon:clipOutside(notice)
	
	return notice
end
end;
};
G2L_MODULES[G2L["24"]] = {
Closure = function()
    local script = G2L["24"];-- I named this 'Widget' instead of 'Icon' to make a clear difference between the icon *object* and
-- the icon (aka Widget) instance.
-- This contains the core components of the icon such as the button, image, label and notice. It's
-- also responsible for handling the automatic resizing of the widget (based upon image visibility and text length)

return function(icon, Icon)

	local widget = Instance.new("Frame")
	widget:SetAttribute("WidgetUID", icon.UID)
	widget.Name = "Widget"
	widget.BackgroundTransparency = 1
	widget.Visible = true
	widget.ZIndex = 20
	widget.Active = false
	widget.ClipsDescendants = true

	local button = Instance.new("Frame")
	button.Name = "IconButton"
	button.Visible = true
	button.ZIndex = 2
	button.BorderSizePixel = 0
	button.Parent = widget
	button.ClipsDescendants = true
	button.Active = false -- This is essential for mobile scrollers to work when dragging
	icon.deselected:Connect(function()
		button.ClipsDescendants = true
	end)
	icon.selected:Connect(function()
		task.defer(function()
			icon.resizingComplete:Once(function()
				if icon.isSelected then
					button.ClipsDescendants = false
				end
			end)
		end)
	end)

	local iconCorner = Instance.new("UICorner")
	iconCorner:SetAttribute("Collective", "IconCorners")
	iconCorner.Parent = button

	local menu = require(script.Parent.Menu)(icon)
	local menuUIListLayout = menu.MenuUIListLayout
	local menuGap = menu.MenuGap
	menu.Parent = button

	local iconSpot = Instance.new("Frame")
	iconSpot.Name = "IconSpot"
	iconSpot.BackgroundColor3 = Color3.fromRGB(225, 225, 225)
	iconSpot.BackgroundTransparency = 0.9
	iconSpot.Visible = true
	iconSpot.AnchorPoint = Vector2.new(0, 0.5)
	iconSpot.ZIndex = 5
	iconSpot.Parent = menu

	local iconSpotCorner = iconCorner:Clone()
	iconSpotCorner.Parent = iconSpot

	local overlay = iconSpot:Clone()
	overlay.Name = "IconOverlay"
	overlay.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	overlay.ZIndex = iconSpot.ZIndex + 1
	overlay.Size = UDim2.new(1, 0, 1, 0)
	overlay.Position = UDim2.new(0, 0, 0, 0)
	overlay.AnchorPoint = Vector2.new(0, 0)
	overlay.Visible = false
	overlay.Parent = iconSpot

	local clickRegion = Instance.new("TextButton")
	clickRegion:SetAttribute("CorrespondingIconUID", icon.UID)
	clickRegion.Name = "ClickRegion"
	clickRegion.BackgroundTransparency = 1
	clickRegion.Visible = true
	clickRegion.Text = ""
	clickRegion.ZIndex = 20
	clickRegion.Selectable = true
	clickRegion.SelectionGroup = true
	clickRegion.Parent = iconSpot
	
	local Gamepad = require(script.Parent.Parent.Features.Gamepad)
	Gamepad.registerButton(clickRegion)

	local clickRegionCorner = iconCorner:Clone()
	clickRegionCorner.Parent = clickRegion

	local contents = Instance.new("Frame")
	contents.Name = "Contents"
	contents.BackgroundTransparency = 1
	contents.Size = UDim2.fromScale(1, 1)
	contents.Parent = iconSpot

	local contentsList = Instance.new("UIListLayout")
	contentsList.Name = "ContentsList"
	contentsList.FillDirection = Enum.FillDirection.Horizontal
	contentsList.VerticalAlignment = Enum.VerticalAlignment.Center
	contentsList.SortOrder = Enum.SortOrder.LayoutOrder
	contentsList.VerticalFlex = Enum.UIFlexAlignment.SpaceEvenly
	contentsList.Padding = UDim.new(0, 3)
	contentsList.Parent = contents

	local paddingLeft = Instance.new("Frame")
	paddingLeft.Name = "PaddingLeft"
	paddingLeft.LayoutOrder = 1
	paddingLeft.ZIndex = 5
	paddingLeft.BorderColor3 = Color3.fromRGB(0, 0, 0)
	paddingLeft.BackgroundTransparency = 1
	paddingLeft.BorderSizePixel = 0
	paddingLeft.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	paddingLeft.Parent = contents

	local paddingCenter = Instance.new("Frame")
	paddingCenter.Name = "PaddingCenter"
	paddingCenter.LayoutOrder = 3
	paddingCenter.ZIndex = 5
	paddingCenter.Size = UDim2.new(0, 0, 1, 0)
	paddingCenter.BorderColor3 = Color3.fromRGB(0, 0, 0)
	paddingCenter.BackgroundTransparency = 1
	paddingCenter.BorderSizePixel = 0
	paddingCenter.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	paddingCenter.Parent = contents

	local paddingRight = Instance.new("Frame")
	paddingRight.Name = "PaddingRight"
	paddingRight.LayoutOrder = 5
	paddingRight.ZIndex = 5
	paddingRight.BorderColor3 = Color3.fromRGB(0, 0, 0)
	paddingRight.BackgroundTransparency = 1
	paddingRight.BorderSizePixel = 0
	paddingRight.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	paddingRight.Parent = contents

	local iconLabelContainer = Instance.new("Frame")
	iconLabelContainer.Name = "IconLabelContainer"
	iconLabelContainer.LayoutOrder = 4
	iconLabelContainer.ZIndex = 3
	iconLabelContainer.AnchorPoint = Vector2.new(0, 0.5)
	iconLabelContainer.Size = UDim2.new(0, 0, 0.5, 0)
	iconLabelContainer.BackgroundTransparency = 1
	iconLabelContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
	iconLabelContainer.Parent = contents

	local iconLabel = Instance.new("TextLabel")
	local viewportX = workspace.CurrentCamera.ViewportSize.X+200
	iconLabel.Name = "IconLabel"
	iconLabel.LayoutOrder = 4
	iconLabel.ZIndex = 15
	iconLabel.AnchorPoint = Vector2.new(0, 0)
	iconLabel.Size = UDim2.new(0, viewportX, 1, 0)
	iconLabel.ClipsDescendants = false
	iconLabel.BackgroundTransparency = 1
	iconLabel.Position = UDim2.fromScale(0, 0)
	iconLabel.RichText = true
	iconLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	iconLabel.TextXAlignment = Enum.TextXAlignment.Left
	iconLabel.Text = ""
	iconLabel.TextWrapped = true
	iconLabel.TextWrap = true
	iconLabel.TextScaled = false
	iconLabel.Active = false
	iconLabel.AutoLocalize = true
	iconLabel.Parent = iconLabelContainer

	local iconImage = Instance.new("ImageLabel")
	iconImage.Name = "IconImage"
	iconImage.LayoutOrder = 2
	iconImage.ZIndex = 15
	iconImage.AnchorPoint = Vector2.new(0, 0.5)
	iconImage.Size = UDim2.new(0, 0, 0.5, 0)
	iconImage.BackgroundTransparency = 1
	iconImage.Position = UDim2.new(0, 11, 0.5, 0)
	iconImage.ScaleType = Enum.ScaleType.Stretch
	iconImage.Active = false
	iconImage.Parent = contents

	local iconImageCorner = iconCorner:Clone()
	iconImageCorner:SetAttribute("Collective", nil)
	iconImageCorner.CornerRadius = UDim.new(0, 0)
	iconImageCorner.Name = "IconImageCorner"
	iconImageCorner.Parent = iconImage

	local TweenService = game:GetService("TweenService")
	local resizingCount = 0
	local repeating = false
	local function handleLabelAndImageChangesUnstaggered(forceUpdateString)

		-- We defer changes by a frame to eliminate all but 1 requests which
		-- could otherwise stack up to 20+ requests in a single frame
		-- We then repeat again once to account for any final changes
		-- Deferring is also essential because properties are set immediately
		-- afterwards (therefore calculations will use the correct values)
		task.defer(function()
			local indicator = icon.indicator
			local usingIndicator = indicator and indicator.Visible
			local usingText = usingIndicator or iconLabel.Text ~= ""
			local usingImage = iconImage.Image ~= "" and iconImage.Image ~= nil
			local alignment = Enum.HorizontalAlignment.Center
			local NORMAL_BUTTON_SIZE = UDim2.fromScale(1, 1)
			local buttonSize = NORMAL_BUTTON_SIZE
			if usingImage and not usingText then
				iconLabelContainer.Visible = false
				iconImage.Visible = true
				paddingLeft.Visible = false
				paddingCenter.Visible = false
				paddingRight.Visible = false
			elseif not usingImage and usingText then
				iconLabelContainer.Visible = true
				iconImage.Visible = false
				paddingLeft.Visible = true
				paddingCenter.Visible = false
				paddingRight.Visible = true
			elseif usingImage and usingText then
				iconLabelContainer.Visible = true
				iconImage.Visible = true
				paddingLeft.Visible = true
				paddingCenter.Visible = not usingIndicator
				paddingRight.Visible = not usingIndicator
				alignment = Enum.HorizontalAlignment.Left
			end
			button.Size = buttonSize

			local function getItemWidth(item)
				local targetWidth = item:GetAttribute("TargetWidth") or item.AbsoluteSize.X
				return targetWidth
			end
			local contentsPadding = contentsList.Padding.Offset
			local initialWidgetWidth = contentsPadding --0
			local textWidth = iconLabel.TextBounds.X
			iconLabelContainer.Size = UDim2.new(0, textWidth, iconLabel.Size.Y.Scale, 0)
			for _, child in pairs(contents:GetChildren()) do
				if child:IsA("GuiObject") and child.Visible == true then
					local itemWidth = getItemWidth(child)
					initialWidgetWidth += itemWidth + contentsPadding
				end
			end
			local widgetMinimumWidth = widget:GetAttribute("MinimumWidth")
			local widgetMinimumHeight = widget:GetAttribute("MinimumHeight")
			local widgetBorderSize = widget:GetAttribute("BorderSize")
			local widgetWidth = math.clamp(initialWidgetWidth, widgetMinimumWidth, viewportX)
			local menuIcons = icon.menuIcons
			local additionalWidth = 0
			local hasMenu = #menuIcons > 0
			local showMenu = hasMenu and icon.isSelected
			if showMenu then
				for _, frame in pairs(menu:GetChildren()) do
					if frame ~= iconSpot and frame:IsA("GuiObject") and frame.Visible then
						additionalWidth += getItemWidth(frame) + menuUIListLayout.Padding.Offset
					end
				end
				if not iconSpot.Visible then
					widgetWidth -= (getItemWidth(iconSpot) + menuUIListLayout.Padding.Offset*2 + widgetBorderSize)
				end
				additionalWidth -= (widgetBorderSize*0.5)
				widgetWidth += additionalWidth - (widgetBorderSize*0.75)
			end
			menuGap.Visible = showMenu and iconSpot.Visible
			local desiredWidth = widget:GetAttribute("DesiredWidth")
			if desiredWidth and widgetWidth < desiredWidth then
				widgetWidth = desiredWidth
			end

			icon.updateMenu:Fire()
			local preWidth = math.max(widgetWidth-additionalWidth, widgetMinimumWidth)
			local spotWidth = preWidth-(widgetBorderSize*2)
			local menuWidth = menu:GetAttribute("MenuWidth")
			local totalMenuWidth = menuWidth and menuWidth + spotWidth + menuUIListLayout.Padding.Offset + 10
			if totalMenuWidth then
				local maxWidth = menu:GetAttribute("MaxWidth")
				if maxWidth then
					totalMenuWidth = math.max(maxWidth, widgetMinimumWidth)
				end
				menu:SetAttribute("MenuCanvasWidth", widgetWidth)
				if totalMenuWidth < widgetWidth then
					widgetWidth = totalMenuWidth
				end
			end

			local style = Enum.EasingStyle.Quint
			local direction = Enum.EasingDirection.Out
			local spotWidthMax = math.max(spotWidth, getItemWidth(iconSpot), iconSpot.AbsoluteSize.X)
			local widgetWidthMax = math.max(widgetWidth, getItemWidth(widget), widget.AbsoluteSize.X)
			local SPEED = 750
			local spotTweenInfo = TweenInfo.new(spotWidthMax/SPEED, style, direction)
			local widgetTweenInfo = TweenInfo.new(widgetWidthMax/SPEED, style, direction)
			TweenService:Create(iconSpot, spotTweenInfo, {
				Position = UDim2.new(0, widgetBorderSize, 0.5, 0),
				Size = UDim2.new(0, spotWidth, 1, -widgetBorderSize*2),
			}):Play()
			TweenService:Create(clickRegion, spotTweenInfo, {
				Size = UDim2.new(0, spotWidth, 1, 0),
			}):Play()
			local newWidgetSize = UDim2.fromOffset(widgetWidth, widgetMinimumHeight)
			local updateInstantly = widget.Size.Y.Offset ~= widgetMinimumHeight
			if updateInstantly then
				widget.Size = newWidgetSize
			end
			widget:SetAttribute("TargetWidth", newWidgetSize.X.Offset)
			local movingTween = TweenService:Create(widget, widgetTweenInfo, {
				Size = newWidgetSize,
			})
			movingTween:Play()
			resizingCount += 1
			for i = 1, widgetTweenInfo.Time * 100 do
				task.delay(i/100, function()
					Icon.iconChanged:Fire(icon)
				end)
			end
			task.delay(widgetTweenInfo.Time-0.2, function()
				resizingCount -= 1
				task.defer(function()
					if resizingCount == 0 then
						icon.resizingComplete:Fire()
					end
				end)
			end)
			icon:updateParent()
		end)
	end
	local Utility = require(script.Parent.Parent.Utility)
	local handleLabelAndImageChanges = Utility.createStagger(0.01, handleLabelAndImageChangesUnstaggered)
	local firstTimeSettingFontFace = true
	icon:setBehaviour("IconLabel", "Text", handleLabelAndImageChanges)
	icon:setBehaviour("IconLabel", "FontFace", function(value)
		local previousFontFace = iconLabel.FontFace
		if previousFontFace == value then
			return
		end
		task.spawn(function()
			--[[
			local fontLink = value.Family
			if string.match(fontLink, "rbxassetid://") then
				local ContentProvider = game:GetService("ContentProvider")
				local assets = {fontLink}
				ContentProvider:PreloadAsync(assets)
				print("FONT LOADED!!!")
			end--]]

			-- Afaik there's no way to determine when a Font Family has
			-- loaded (even with ContentProvider), so we just have to try
			-- a few times and hope it loads within the refresh period
			handleLabelAndImageChanges()
			if firstTimeSettingFontFace then
				firstTimeSettingFontFace = false
				for i = 1, 10 do
					task.wait(1)
					handleLabelAndImageChanges()
				end
			end
		end)
	end)
	local function updateBorderSize()
		task.defer(function()
			local borderOffset = widget:GetAttribute("BorderSize")
			local alignment = icon.alignment
			local alignmentOffset = (iconSpot.Visible == false and 0) or (alignment == "Right" and -borderOffset) or borderOffset
			menu.Position = UDim2.new(0, alignmentOffset, 0, 0)
			menuGap.Size = UDim2.fromOffset(borderOffset, 0)
			menuUIListLayout.Padding = UDim.new(0, 0)
			handleLabelAndImageChanges()
		end)
	end
	icon:setBehaviour("Widget", "BorderSize", updateBorderSize)
	icon:setBehaviour("IconSpot", "Visible", updateBorderSize)
	icon.startMenuUpdate:Connect(handleLabelAndImageChanges)
	icon.updateSize:Connect(handleLabelAndImageChanges)
	icon:setBehaviour("ContentsList", "HorizontalAlignment", handleLabelAndImageChanges)
	icon:setBehaviour("Widget", "Visible", handleLabelAndImageChanges)
	icon:setBehaviour("Widget", "DesiredWidth", handleLabelAndImageChanges)
	icon:setBehaviour("Widget", "MinimumWidth", handleLabelAndImageChanges)
	icon:setBehaviour("Widget", "MinimumHeight", handleLabelAndImageChanges)
	icon:setBehaviour("Indicator", "Visible", handleLabelAndImageChanges)
	icon:setBehaviour("IconImageRatio", "AspectRatio", handleLabelAndImageChanges)
	icon:setBehaviour("IconImage", "Image", function(value)
		local textureId = (tonumber(value) and "http://www.roblox.com/asset/?id="..value) or value or ""
		if iconImage.Image ~= textureId then
			handleLabelAndImageChanges()
		end
		return textureId
	end)
	icon.alignmentChanged:Connect(function(newAlignment)
		if newAlignment == "Center" then
			newAlignment = "Left"
		end
		menuUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment[newAlignment]
		updateBorderSize()
	end)

	local iconImageScale = Instance.new("NumberValue")
	iconImageScale.Name = "IconImageScale"
	iconImageScale.Parent = iconImage
	iconImageScale:GetPropertyChangedSignal("Value"):Connect(function()
		iconImage.Size = UDim2.new(iconImageScale.Value, 0, iconImageScale.Value, 0)
	end)

	local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
	UIAspectRatioConstraint.Name = "IconImageRatio"
	UIAspectRatioConstraint.AspectType = Enum.AspectType.FitWithinMaxSize
	UIAspectRatioConstraint.DominantAxis = Enum.DominantAxis.Height
	UIAspectRatioConstraint.Parent = iconImage

	local iconGradient = Instance.new("UIGradient")
	iconGradient.Name = "IconGradient"
	iconGradient.Enabled = true
	iconGradient.Parent = button

	local iconSpotGradient = Instance.new("UIGradient")
	iconSpotGradient.Name = "IconSpotGradient"
	iconSpotGradient.Enabled = true
	iconSpotGradient.Parent = iconSpot

	return widget
end
end;
};
G2L_MODULES[G2L["25"]] = {
Closure = function()
    local script = G2L["25"];return function(Icon)

	-- Credit to lolmansReturn and Canary Software for
	-- retrieving these values
	local selectionContainer = Instance.new("Frame")
	selectionContainer.Name = "SelectionContainer"
	selectionContainer.Visible = false
	
	local selection = Instance.new("Frame")
	selection.Name = "Selection"
	selection.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	selection.BackgroundTransparency = 1
	selection.BorderColor3 = Color3.fromRGB(0, 0, 0)
	selection.BorderSizePixel = 0
	selection.Parent = selectionContainer

	local UIStroke = Instance.new("UIStroke")
	UIStroke.Name = "UIStroke"
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(255, 255, 255)
	UIStroke.Thickness = 3
	UIStroke.Parent = selection

	local selectionGradient = Instance.new("UIGradient")
	selectionGradient.Name = "SelectionGradient"
	selectionGradient.Parent = UIStroke

	local UICorner = Instance.new("UICorner")
	UICorner:SetAttribute("Collective", "IconCorners")
	UICorner.Name = "UICorner"
	UICorner.CornerRadius = UDim.new(1, 0)
	UICorner.Parent = selection
	
	local RunService = game:GetService("RunService")
	local GuiService = game:GetService("GuiService")
	local rotationSpeed = 1
	selection:GetAttributeChangedSignal("RotationSpeed"):Connect(function()
		rotationSpeed = selection:GetAttribute("RotationSpeed")
	end)
	RunService.Heartbeat:Connect(function()
		if not GuiService.SelectedObject then
			return
		end
		selectionGradient.Rotation = (os.clock() * rotationSpeed * 100) % 360
	end)

	return selectionContainer
	
end
end;
};
G2L_MODULES[G2L["26"]] = {
Closure = function()
    local script = G2L["26"];return function(icon)

	local menu = Instance.new("ScrollingFrame")
	menu.Name = "Menu"
	menu.BackgroundTransparency = 1
	menu.Visible = true
	menu.ZIndex = 1
	menu.Size = UDim2.fromScale(1, 1)
	menu.ClipsDescendants = true
	menu.TopImage = ""
	menu.BottomImage = ""
	menu.HorizontalScrollBarInset = Enum.ScrollBarInset.Always
	menu.CanvasSize = UDim2.new(0, 0, 1, -1) -- This -1 prevents a dropdown scrolling appearance bug
	menu.ScrollingEnabled = true
	menu.ScrollingDirection = Enum.ScrollingDirection.X
	menu.ZIndex = 20
	menu.ScrollBarThickness = 3
	menu.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
	menu.ScrollBarImageTransparency = 0.8
	menu.BorderSizePixel = 0
	menu.Selectable = false
	
	local Icon = require(icon.iconModule)
	local menuUIListLayout = Icon.container.TopbarStandard:FindFirstChild("UIListLayout", true):Clone()
	menuUIListLayout.Name = "MenuUIListLayout"
	menuUIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	menuUIListLayout.Parent = menu

	local menuGap = Instance.new("Frame")
	menuGap.Name = "MenuGap"
	menuGap.BackgroundTransparency = 1
	menuGap.Visible = false
	menuGap.AnchorPoint = Vector2.new(0, 0.5)
	menuGap.ZIndex = 5
	menuGap.Parent = menu
	
	local hasStartedMenu = false
	local Themes = require(script.Parent.Parent.Features.Themes)
	local function totalChildrenChanged()
		
		local menuJanitor = icon.menuJanitor
		local totalIcons = #icon.menuIcons
		if hasStartedMenu then
			if totalIcons <= 0 then
				menuJanitor:clean()
				hasStartedMenu = false
			end
			return
		end
		hasStartedMenu = true
		
		-- Listen for changes
		menuJanitor:add(icon.toggled:Connect(function()
			if #icon.menuIcons > 0 then
				icon.updateSize:Fire()
			end
		end))
		
		-- Modify appearance of menu icon when joined
		local _, modificationUID = icon:modifyTheme({
			{"Menu", "Active", true},
		})
		task.defer(function()
			menuJanitor:add(function()
				icon:removeModification(modificationUID)
			end)
		end)
		
		-- For right-aligned icons, this ensures their menus
		-- close button appear instantly when selected (instead
		-- of partially hidden from view)
		local previousCanvasX = menu.AbsoluteCanvasSize.X
		local function rightAlignCanvas()
			if icon.alignment == "Right" then
				local newCanvasX = menu.AbsoluteCanvasSize.X
				local difference = previousCanvasX - newCanvasX
				previousCanvasX = newCanvasX
				menu.CanvasPosition = Vector2.new(menu.CanvasPosition.X - difference, 0)
			end
		end
		menuJanitor:add(icon.selected:Connect(rightAlignCanvas))
		menuJanitor:add(menu:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(rightAlignCanvas))
		
		-- Apply a close selected image if the user hasn't applied thier own
		local stateGroup = icon:getStateGroup()
		local imageDeselected = Themes.getThemeValue(stateGroup, "IconImage", "Image", "Deselected")
		local imageSelected = Themes.getThemeValue(stateGroup, "IconImage", "Image", "Selected")
		if imageDeselected == imageSelected then
			local fontLink = "rbxasset://fonts/families/FredokaOne.json"
			local fontFace = Font.new(fontLink, Enum.FontWeight.Light, Enum.FontStyle.Normal)
			icon:removeModificationWith("IconLabel", "Text", "Viewing")
			icon:removeModificationWith("IconLabel", "Image", "Viewing")
			icon:modifyTheme({
				{"IconLabel", "FontFace", fontFace, "Selected"},
				{"IconLabel", "Text", "X", "Selected"},
				{"IconLabel", "TextSize", 20, "Selected"},
				{"IconLabel", "TextStrokeTransparency", 0.8, "Selected"},
				{"IconImage", "Image", "", "Selected"},
			})
		end

		-- Change order of spot when alignment changes
		local iconSpot = icon:getInstance("IconSpot")
		local menuGap = icon:getInstance("MenuGap")
		local function updateAlignent()
			local alignment = icon.alignment
			if alignment == "Right" then
				iconSpot.LayoutOrder = 99999
				menuGap.LayoutOrder = 99998
			else
				iconSpot.LayoutOrder = -99999
				menuGap.LayoutOrder = -99998
			end
		end
		menuJanitor:add(icon.alignmentChanged:Connect(updateAlignent))
		updateAlignent()
		
		-- This updates the scrolling frame to only display a scroll
		-- length equal to the distance produced by its MaxIcons
		menu:GetAttributeChangedSignal("MenuCanvasWidth"):Connect(function()
			local canvasWidth = menu:GetAttribute("MenuCanvasWidth")
			local canvasY = menu.CanvasSize.Y
			menu.CanvasSize = UDim2.new(0, canvasWidth, canvasY.Scale, canvasY.Offset)
		end)
		menuJanitor:add(icon.updateMenu:Connect(function()
			local maxIcons = menu:GetAttribute("MaxIcons")
			if not maxIcons then
				return
			end
			local orderedInstances = {}
			for _, child in pairs(menu:GetChildren()) do
				local widgetUID = child:GetAttribute("WidgetUID")
				if widgetUID and child.Visible then
					table.insert(orderedInstances, {child, child.AbsolutePosition.X})
				end
			end
			table.sort(orderedInstances, function(groupA, groupB)
				return groupA[2] < groupB[2]
			end)
			local totalWidth = 0
			for i = 1, maxIcons do
				local group = orderedInstances[i]
				if not group then
					break
				end
				local child = group[1]
				local width = child.AbsoluteSize.X + menuUIListLayout.Padding.Offset
				totalWidth += width
			end
			menu:SetAttribute("MenuWidth", totalWidth)
		end))
		local function startMenuUpdate()
			task.delay(0.1, function()
				icon.startMenuUpdate:Fire()
			end)
		end
		local iconButton = icon:getInstance("IconButton")
		local previousButtonWidth = iconButton.AbsoluteSize.X
		menuJanitor:add(menu.ChildAdded:Connect(startMenuUpdate))
		menuJanitor:add(menu.ChildRemoved:Connect(startMenuUpdate))
		menuJanitor:add(menu:GetAttributeChangedSignal("MaxIcons"):Connect(startMenuUpdate))
		menuJanitor:add(menu:GetAttributeChangedSignal("MaxWidth"):Connect(startMenuUpdate))
		startMenuUpdate()
	end
	
	icon.menuChildAdded:Connect(totalChildrenChanged)
	icon.menuSet:Connect(function(arrayOfIcons)
		-- Reset any previous icons
		for i, otherIconUID in pairs(icon.menuIcons) do
			local otherIcon = Icon.getIconByUID(otherIconUID)
			otherIcon:destroy()
		end
		-- Apply new icons
		local totalNewIcons = #arrayOfIcons
		if type(arrayOfIcons) == "table" then
			for i, otherIcon in pairs(arrayOfIcons) do
				otherIcon:joinMenu(icon)
			end
		end
	end)
	
	return menu
end
end;
};
G2L_MODULES[G2L["27"]] = {
Closure = function()
    local script = G2L["27"];return function(icon, Icon)

	local widget = icon.widget
	local contents = icon:getInstance("Contents")
	local indicator = Instance.new("Frame")
	indicator.Name = "Indicator"
	indicator.LayoutOrder = 9999999
	indicator.ZIndex = 6
	indicator.Size = UDim2.new(0, 42, 0, 42)
	indicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
	indicator.BackgroundTransparency = 1
	indicator.Position = UDim2.new(1, 0, 0.5, 0)
	indicator.BorderSizePixel = 0
	indicator.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	indicator.Parent = contents

	local indicatorButton = Instance.new("Frame")
	indicatorButton.Name = "IndicatorButton"
	indicatorButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	indicatorButton.AnchorPoint = Vector2.new(0.5, 0.5)
	indicatorButton.BorderSizePixel = 0
	indicatorButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	indicatorButton.Parent = indicator
	
	local GuiService = game:GetService("GuiService")
	local GamepadService = game:GetService("GamepadService")
	local ourClickRegion = icon:getInstance("ClickRegion")
	local function selectionChanged()
		local selectedClickRegion = GuiService.SelectedObject
		if selectedClickRegion == ourClickRegion then
			indicatorButton.BackgroundTransparency = 1
			indicatorButton.Position = UDim2.new(0.5, -2, 0.5, 0)
			indicatorButton.Size = UDim2.fromScale(1.2, 1.2)
		else
			indicatorButton.BackgroundTransparency = 0.75
			indicatorButton.Position = UDim2.new(0.5, 2, 0.5, 0)
			indicatorButton.Size = UDim2.fromScale(1, 1)
		end
	end
	icon.janitor:add(GuiService:GetPropertyChangedSignal("SelectedObject"):Connect(selectionChanged))
	selectionChanged()

	local imageLabel = Instance.new("ImageLabel")
	imageLabel.LayoutOrder = 2
	imageLabel.ZIndex = 15
	imageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	imageLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
	imageLabel.BackgroundTransparency = 1
	imageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
	imageLabel.Image = "rbxasset://textures/ui/Controls/XboxController/DPadUp@2x.png"
	imageLabel.Parent = indicatorButton

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(1, 0)
	UICorner.Parent = indicatorButton

	local UserInputService = game:GetService("UserInputService")
	local function setIndicatorVisible(visibility)
		if visibility == nil then
			visibility = indicator.Visible
		end
		if GamepadService.GamepadCursorEnabled then
			visibility = false
		end
		if visibility then
			icon:modifyTheme({"PaddingRight", "Size", UDim2.new(0, 0, 1, 0)}, "IndicatorPadding")
		elseif indicator.Visible then
			icon:removeModification("IndicatorPadding")
		end
		icon:modifyTheme({"Indicator", "Visible", visibility})
		icon.updateSize:Fire()
	end
	icon.janitor:add(GamepadService:GetPropertyChangedSignal("GamepadCursorEnabled"):Connect(setIndicatorVisible))
	icon.indicatorSet:Connect(function(keyCode)
		local visibility = false
		if keyCode then
			imageLabel.Image = UserInputService:GetImageForKeyCode(keyCode)
			visibility = true
		end
		setIndicatorVisible(visibility)
	end)

	local function updateSize()
		local ySize = widget.AbsoluteSize.Y*0.96
		indicator.Size = UDim2.new(0, ySize, 0, ySize)
	end
	widget:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateSize)
	updateSize()

	return indicator
end
end;
};
G2L_MODULES[G2L["28"]] = {
Closure = function()
    local script = G2L["28"];return function(icon)
	
	local dropdown = Instance.new("Frame")
	dropdown.Name = "Dropdown"
	dropdown.AutomaticSize = Enum.AutomaticSize.XY
	dropdown.BackgroundTransparency = 1
	dropdown.BorderSizePixel = 0
	dropdown.AnchorPoint = Vector2.new(0.5, 0)
	dropdown.Position = UDim2.new(0.5, 0, 1, 10)
	dropdown.ZIndex = -2
	dropdown.ClipsDescendants = true
	dropdown.Parent = icon.widget

	local UICorner = Instance.new("UICorner")
	UICorner.Name = "DropdownCorner"
	UICorner.CornerRadius = UDim.new(0, 10)
	UICorner.Parent = dropdown

	local dropdownScroller = Instance.new("ScrollingFrame")
	dropdownScroller.Name = "DropdownScroller"
	dropdownScroller.AutomaticSize = Enum.AutomaticSize.X
	dropdownScroller.BackgroundTransparency = 1
	dropdownScroller.BorderSizePixel = 0
	dropdownScroller.AnchorPoint = Vector2.new(0, 0)
	dropdownScroller.Position = UDim2.new(0, 0, 0, 0)
	dropdownScroller.ZIndex = -1
	dropdownScroller.ClipsDescendants = true
	dropdownScroller.Visible = true
	dropdownScroller.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
	dropdownScroller.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
	dropdownScroller.Active = false
	dropdownScroller.ScrollingEnabled = true
	dropdownScroller.AutomaticCanvasSize = Enum.AutomaticSize.Y
	dropdownScroller.ScrollBarThickness = 5
	dropdownScroller.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
	dropdownScroller.ScrollBarImageTransparency = 0.8
	dropdownScroller.CanvasSize = UDim2.new(0, 0, 0, 0)
	dropdownScroller.Selectable = false
	dropdownScroller.Active = true
	dropdownScroller.Parent = dropdown
	
	local dropdownPadding = Instance.new("UIPadding")
	dropdownPadding.Name = "DropdownPadding"
	dropdownPadding.PaddingTop = UDim.new(0, 8)
	dropdownPadding.PaddingBottom = UDim.new(0, 8)
	dropdownPadding.Parent = dropdownScroller

	local dropdownList = Instance.new("UIListLayout")
	dropdownList.Name = "DropdownList"
	dropdownList.FillDirection = Enum.FillDirection.Vertical
	dropdownList.SortOrder = Enum.SortOrder.LayoutOrder
	dropdownList.HorizontalAlignment = Enum.HorizontalAlignment.Center
	dropdownList.HorizontalFlex = Enum.UIFlexAlignment.SpaceEvenly
	dropdownList.Parent = dropdownScroller
	
	local dropdownJanitor = icon.dropdownJanitor
	local Icon = require(icon.iconModule)
	icon.dropdownChildAdded:Connect(function(childIcon)
		-- Modify appearance of child when joined
		local _, modificationUID = childIcon:modifyTheme({
			{"Widget", "BorderSize", 0},
			{"IconCorners", "CornerRadius", UDim.new(0, 4)},
			{"Widget", "MinimumWidth", 190},
			{"Widget", "MinimumHeight", 56},
			{"IconLabel", "TextSize", 19},
			{"PaddingLeft", "Size", UDim2.fromOffset(25, 0)},
			{"Notice", "Position", UDim2.new(1, -24, 0, 5)},
			{"ContentsList", "HorizontalAlignment", Enum.HorizontalAlignment.Left},
			{"Selection", "Size", UDim2.new(1, -8, 1, -8)},
			{"Selection", "Position", UDim2.new(0, 4, 0, 4)},
		})
		task.defer(function()
			childIcon.joinJanitor:add(function()
				childIcon:removeModification(modificationUID)
			end)
		end)
	end)
	icon.dropdownSet:Connect(function(arrayOfIcons)
		-- Destroy any previous icons
		for i, otherIconUID in pairs(icon.dropdownIcons) do
			local otherIcon = Icon.getIconByUID(otherIconUID)
			otherIcon:destroy()
		end
		-- Add new icons
		local totalNewIcons = #arrayOfIcons
		if type(arrayOfIcons) == "table" then
			for i, otherIcon in pairs(arrayOfIcons) do
				otherIcon:joinDropdown(icon)
			end
		end
	end)

	-- Update visibiliy of dropdown
	local Utility = require(script.Parent.Parent.Utility)
	local function updateVisibility()
		--icon:modifyTheme({"Dropdown", "Visible", icon.isSelected})
		Utility.setVisible(dropdown, icon.isSelected, "InternalDropdown")
	end
	dropdownJanitor:add(icon.toggled:Connect(updateVisibility))
	updateVisibility()
	--task.delay(0.2, updateVisibility)
	
	-- This updates the scrolling frame to only display a scroll
	-- length equal to the distance produced by its MaxIcons
	local updateCount = 0
	local isUpdating = false
	local function updateMaxIcons()
		
		-- This prevents more than 1 update occurring every frame
		updateCount += 1
		if isUpdating then
			return
		end
		local myUpdateCount = updateCount
		isUpdating = true
		task.defer(function()
			isUpdating = false
			if updateCount ~= myUpdateCount then
				updateMaxIcons()
			end
		end)
			
		local maxIcons = dropdown:GetAttribute("MaxIcons")
		if not maxIcons then
			return
		end
		local orderedInstances = {}
		for _, child in pairs(dropdownScroller:GetChildren()) do
			if child:IsA("GuiObject") then
				table.insert(orderedInstances, {child, child.AbsolutePosition.Y})
			end
		end
		table.sort(orderedInstances, function(groupA, groupB)
			return groupA[2] < groupB[2]
		end)
		local totalHeight = 0
		local hasSetNextSelection = false
		for i = 1, maxIcons do
			local group = orderedInstances[i]
			if not group then
				break
			end
			local child = group[1]
			local height = child.AbsoluteSize.Y
			totalHeight += height
			local iconUID = child:GetAttribute("WidgetUID")
			local childIcon = iconUID and Icon.getIconByUID(iconUID)
			if childIcon then
				local nextSelection = nil
				if not hasSetNextSelection then
					hasSetNextSelection = true
					nextSelection = icon:getInstance("ClickRegion")
				end
				childIcon:getInstance("ClickRegion").NextSelectionUp = nextSelection
			end
		end
		totalHeight += dropdownPadding.PaddingTop.Offset
		totalHeight += dropdownPadding.PaddingBottom.Offset
		dropdownScroller.Size = UDim2.fromOffset(0, totalHeight)
	end
	dropdownJanitor:add(dropdownScroller:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(updateMaxIcons))
	dropdownJanitor:add(dropdownScroller.ChildAdded:Connect(updateMaxIcons))
	dropdownJanitor:add(dropdownScroller.ChildRemoved:Connect(updateMaxIcons))
	dropdownJanitor:add(dropdown:GetAttributeChangedSignal("MaxIcons"):Connect(updateMaxIcons))
	dropdownJanitor:add(icon.childThemeModified:Connect(updateMaxIcons))
	updateMaxIcons()
	
	return dropdown
end
end;
};
G2L_MODULES[G2L["29"]] = {
Closure = function()
    local script = G2L["29"];return function(Icon)
	
	local GuiService = game:GetService("GuiService")
	local isOldTopbar = Icon.isOldTopbar
	local container = {}
	local guiInset = GuiService:GetGuiInset()
	local isConsoleScreen = GuiService:IsTenFootInterface()
	local startInset = if isOldTopbar then 12 else guiInset.Y - (44 + 2)
	if isConsoleScreen then
		startInset = 10
	end
	local screenGui = Instance.new("ScreenGui")
	screenGui:SetAttribute("StartInset", startInset)
	screenGui.Name = "TopbarStandard"
	screenGui.Enabled = true
	screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	screenGui.IgnoreGuiInset = true
	screenGui.ResetOnSpawn = false
	screenGui.ScreenInsets = Enum.ScreenInsets.TopbarSafeInsets
	container[screenGui.Name] = screenGui
	screenGui.DisplayOrder = Icon.baseDisplayOrder
	Icon.baseDisplayOrderChanged:Connect(function()
		screenGui.DisplayOrder = Icon.baseDisplayOrder
	end)

	local holders = Instance.new("Frame")
	local yDownOffset = if isOldTopbar then 2 else 0
	local ySizeOffset = -2
	if isConsoleScreen then
		yDownOffset += 13
		ySizeOffset = 50
	end
	holders.Name = "Holders"
	holders.BackgroundTransparency = 1
	holders.Position = UDim2.new(0, 0, 0, yDownOffset)
	holders.Size = UDim2.new(1, 0, 1, ySizeOffset)
	holders.Visible = true
	holders.ZIndex = 1
	holders.Parent = screenGui
	
	local screenGuiCenter = screenGui:Clone()
	local holdersCenter = screenGuiCenter.Holders
	local GuiService = game:GetService("GuiService")
	local function updateCenteredHoldersHeight()
		holdersCenter.Size = UDim2.new(1, 0, 0, GuiService.TopbarInset.Height+ySizeOffset)
	end
	screenGuiCenter.Name = "TopbarCentered"
	screenGuiCenter.ScreenInsets = Enum.ScreenInsets.None
	Icon.baseDisplayOrderChanged:Connect(function()
		screenGuiCenter.DisplayOrder = Icon.baseDisplayOrder
	end)
	container[screenGuiCenter.Name] = screenGuiCenter
	GuiService:GetPropertyChangedSignal("TopbarInset"):Connect(updateCenteredHoldersHeight)
	updateCenteredHoldersHeight()
	
	local screenGuiClipped = screenGui:Clone()
	screenGuiClipped.Name = screenGuiClipped.Name.."Clipped"
	screenGuiClipped.DisplayOrder += 1
	Icon.baseDisplayOrderChanged:Connect(function()
		screenGuiClipped.DisplayOrder = Icon.baseDisplayOrder + 1
	end)
	container[screenGuiClipped.Name] = screenGuiClipped
	
	local screenGuiCenterClipped = screenGuiCenter:Clone()
	screenGuiCenterClipped.Name = screenGuiCenterClipped.Name.."Clipped"
	screenGuiCenterClipped.DisplayOrder += 1
	Icon.baseDisplayOrderChanged:Connect(function()
		screenGuiCenterClipped.DisplayOrder = Icon.baseDisplayOrder + 1
	end)
	container[screenGuiCenterClipped.Name] = screenGuiCenterClipped
	
	if isOldTopbar then
		task.defer(function()
			local function decideToHideTopbar()
				if GuiService.MenuIsOpen then
					Icon.setTopbarEnabled(false, true)
				else
					Icon.setTopbarEnabled()
				end
			end
			GuiService:GetPropertyChangedSignal("MenuIsOpen"):Connect(decideToHideTopbar)
			decideToHideTopbar()
		end)
	end
	
	local holderReduction = -24
	local left = Instance.new("ScrollingFrame")
	left:SetAttribute("IsAHolder", true)
	left.Name = "Left"
	left.Position = UDim2.fromOffset(startInset, 0)
	left.Size = UDim2.new(1, holderReduction, 1, 0)
	left.BackgroundTransparency = 1
	left.Visible = true
	left.ZIndex = 1
	left.Active = false
	left.ClipsDescendants = true
	left.HorizontalScrollBarInset = Enum.ScrollBarInset.None
	left.CanvasSize = UDim2.new(0, 0, 1, -1) -- This -1 prevents a dropdown scrolling appearance bug
	left.AutomaticCanvasSize = Enum.AutomaticSize.X
	left.ScrollingDirection = Enum.ScrollingDirection.X
	left.ScrollBarThickness = 0
	left.BorderSizePixel = 0
	left.Selectable = false
	left.ScrollingEnabled = false--true
	left.ElasticBehavior = Enum.ElasticBehavior.Never
	left.Parent = holders
	
	local UIListLayout = Instance.new("UIListLayout")
	UIListLayout.Padding = UDim.new(0, startInset)
	UIListLayout.FillDirection = Enum.FillDirection.Horizontal
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
	UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
	UIListLayout.Parent = left
	
	local center = left:Clone()
	center.ScrollingEnabled = false
	center.UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	center.Name = "Center"
	center.Parent = holdersCenter
	
	local right = left:Clone()
	right.UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
	right.Name = "Right"
	right.AnchorPoint = Vector2.new(1, 0)
	right.Position = UDim2.new(1, -12, 0, 0)
	right.Parent = holders

	return container
end
end;
};
G2L_MODULES[G2L["2a"]] = {
Closure = function()
    local script = G2L["2a"];return function(icon)

	-- Credit to lolmansReturn and Canary Software for
	-- retrieving these values
	local clickRegion = icon:getInstance("ClickRegion")
	local caption = Instance.new("CanvasGroup")
	caption.Name = "Caption"
	caption.AnchorPoint = Vector2.new(0.5, 0)
	caption.BackgroundTransparency = 1
	caption.BorderSizePixel = 0
	caption.GroupTransparency = 1
	caption.Position = UDim2.fromOffset(0, 0)
	caption.Visible = true
	caption.ZIndex = 30
	caption.Parent = clickRegion

	local box = Instance.new("Frame")
	box.Name = "Box"
	box.AutomaticSize = Enum.AutomaticSize.XY
	box.BackgroundColor3 = Color3.fromRGB(101, 102, 104)
	box.Position = UDim2.fromOffset(4, 7)
	box.ZIndex = 12
	box.Parent = caption

	local header = Instance.new("TextLabel")
	header.Name = "Header"
	header.FontFace = Font.new(
		"rbxasset://fonts/families/GothamSSm.json",
		Enum.FontWeight.Medium,
		Enum.FontStyle.Normal
	)
	header.Text = "Caption"
	header.TextColor3 = Color3.fromRGB(255, 255, 255)
	header.TextSize = 14
	header.TextTruncate = Enum.TextTruncate.None
	header.TextWrapped = false
	header.TextXAlignment = Enum.TextXAlignment.Left
	header.AutomaticSize = Enum.AutomaticSize.X
	header.BackgroundTransparency = 1
	header.LayoutOrder = 1
	header.Size = UDim2.fromOffset(0, 16)
	header.ZIndex = 18
	header.Parent = box

	local layout = Instance.new("UIListLayout")
	layout.Name = "Layout"
	layout.Padding = UDim.new(0, 8)
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Parent = box

	local UICorner = Instance.new("UICorner")
	UICorner.Name = "CaptionCorner"
	UICorner.Parent = box

	local padding = Instance.new("UIPadding")
	padding.Name = "Padding"
	padding.PaddingBottom = UDim.new(0, 12)
	padding.PaddingLeft = UDim.new(0, 12)
	padding.PaddingRight = UDim.new(0, 12)
	padding.PaddingTop = UDim.new(0, 12)
	padding.Parent = box

	local hotkeys = Instance.new("Frame")
	hotkeys.Name = "Hotkeys"
	hotkeys.AutomaticSize = Enum.AutomaticSize.Y
	hotkeys.BackgroundTransparency = 1
	hotkeys.LayoutOrder = 3
	hotkeys.Size = UDim2.fromScale(1, 0)
	hotkeys.Visible = false
	hotkeys.Parent = box

	local layout1 = Instance.new("UIListLayout")
	layout1.Name = "Layout1"
	layout1.Padding = UDim.new(0, 6)
	layout1.FillDirection = Enum.FillDirection.Vertical
	layout1.HorizontalAlignment = Enum.HorizontalAlignment.Center
	layout1.HorizontalFlex = Enum.UIFlexAlignment.None
	layout1.ItemLineAlignment = Enum.ItemLineAlignment.Automatic
	layout1.VerticalFlex = Enum.UIFlexAlignment.None
	layout1.SortOrder = Enum.SortOrder.LayoutOrder
	layout1.Parent = hotkeys

	local keyTag1 = Instance.new("ImageLabel")
	keyTag1.Name = "Key1"
	keyTag1.Image = "rbxasset://textures/ui/Controls/key_single.png"
	keyTag1.ImageTransparency = 0.7
	keyTag1.ScaleType = Enum.ScaleType.Slice
	keyTag1.SliceCenter = Rect.new(5, 5, 23, 24)
	keyTag1.AutomaticSize = Enum.AutomaticSize.X
	keyTag1.BackgroundTransparency = 1
	keyTag1.LayoutOrder = 1
	keyTag1.Size = UDim2.fromOffset(0, 30)
	keyTag1.ZIndex = 15
	keyTag1.Parent = hotkeys

	local inset = Instance.new("UIPadding")
	inset.Name = "Inset"
	inset.PaddingLeft = UDim.new(0, 8)
	inset.PaddingRight = UDim.new(0, 8)
	inset.Parent = keyTag1

	local labelContent = Instance.new("TextLabel")
	labelContent.AutoLocalize = false
	labelContent.Name = "LabelContent"
	labelContent.FontFace = Font.new(
		"rbxasset://fonts/families/GothamSSm.json",
		Enum.FontWeight.Medium,
		Enum.FontStyle.Normal
	)
	labelContent.Text = ""
	labelContent.TextColor3 = Color3.fromRGB(189, 190, 190)
	labelContent.TextSize = 14
	labelContent.AutomaticSize = Enum.AutomaticSize.X
	labelContent.BackgroundTransparency = 1
	labelContent.Position = UDim2.fromOffset(0, -1)
	labelContent.Size = UDim2.fromScale(1, 1)
	labelContent.ZIndex = 16
	labelContent.Parent = keyTag1
	
	local caret = Instance.new("ImageLabel")
	caret.Name = "Caret"
	caret.Image = "rbxasset://LuaPackages/Packages/_Index/UIBlox/UIBlox/AppImageAtlas/img_set_1x_1.png"
	caret.ImageColor3 = Color3.fromRGB(101, 102, 104)
	caret.ImageRectOffset = Vector2.new(260, 440)
	caret.ImageRectSize = Vector2.new(16, 8)
	caret.AnchorPoint = Vector2.new(0, 0.5)
	caret.BackgroundTransparency = 1
	caret.Position = UDim2.new(0, 0, 0, 4)
	caret.Rotation = 180
	caret.Size = UDim2.fromOffset(16, 8)
	caret.ZIndex = 12
	caret.Parent = caption

	local dropShadow = Instance.new("ImageLabel")
	dropShadow.Name = "DropShadow"
	dropShadow.Image = "rbxasset://LuaPackages/Packages/_Index/UIBlox/UIBlox/AppImageAtlas/img_set_1x_1.png"
	dropShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
	dropShadow.ImageRectOffset = Vector2.new(217, 486)
	dropShadow.ImageRectSize = Vector2.new(25, 25)
	dropShadow.ImageTransparency = 0.45
	dropShadow.ScaleType = Enum.ScaleType.Slice
	dropShadow.SliceCenter = Rect.new(12, 12, 13, 13)
	dropShadow.BackgroundTransparency = 1
	dropShadow.Position = UDim2.fromOffset(0, 5)
	dropShadow.Size = UDim2.new(1, 0, 0, 48)
	dropShadow.Parent = caption
	box:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		dropShadow.Size = UDim2.new(1, 0, 0, box.AbsoluteSize.Y + 8)
	end)
	
	-- It's important we match the sizes as this is not
	-- handles within clipOutside (as it assumes the sizes
	-- are already the same)
	local captionJanitor = icon.captionJanitor
	local _, captionClone = icon:clipOutside(caption)
	captionClone.AutomaticSize = Enum.AutomaticSize.None
	local function matchSize()
		local absolute = caption.AbsoluteSize
		captionClone.Size = UDim2.fromOffset(absolute.X, absolute.Y)
	end
	captionJanitor:add(caption:GetPropertyChangedSignal("AbsoluteSize"):Connect(matchSize))
	matchSize()
	
	
	
	local isCompletelyEnabled = false
	-- This handles the appearing/disappearing/positioning of the caption
	local captionHeader = caption.Box.Header
	local UserInputService = game:GetService("UserInputService")
	local function updateHotkey(keyCodeEnum)
		local hasKeyboard = UserInputService.KeyboardEnabled
		local text = caption:GetAttribute("CaptionText") or ""
		local hideHeader = text == "_hotkey_"
		if not hasKeyboard and hideHeader then
			icon:setCaption()
			return
		end
		captionHeader.Text = text
		captionHeader.Visible = not hideHeader
		if keyCodeEnum then
			labelContent.Text = keyCodeEnum.Name
			hotkeys.Visible = true
		end
		if not hasKeyboard then
			hotkeys.Visible = false
		end
	end
	caption:GetAttributeChangedSignal("CaptionText"):Connect(updateHotkey)

	local EASING_STYLE = Enum.EasingStyle.Quad
	local TWEEN_SPEED = 0.2
	local TWEEN_INFO_IN = TweenInfo.new(TWEEN_SPEED, EASING_STYLE, Enum.EasingDirection.In)
	local TWEEN_INFO_OUT = TweenInfo.new(TWEEN_SPEED, EASING_STYLE, Enum.EasingDirection.Out)
	local TweenService = game:GetService("TweenService")
	local RunService = game:GetService("RunService")
	local function getCaptionPosition(customEnabled)
		local enabled = if customEnabled ~= nil then customEnabled else isCompletelyEnabled
		local yOut = 2
		local yIn = yOut + 8
		local yOffset = if enabled then yIn else yOut
		return UDim2.new(0.5, 0, 1, yOffset)
	end
	local function updatePosition(forcedEnabled)
		
		-- Ignore changes if not enabled to reduce redundant calls
		if not isCompletelyEnabled then
			return
		end
		
		-- Currently the one thing which isn't accounted for are the bounds of the screen
		-- This would be an issue if someone sets a long caption text for the left or
		-- right most icon
		local enabled = if forcedEnabled ~= nil then forcedEnabled else isCompletelyEnabled
		local startPosition = getCaptionPosition(not enabled)
		local endPosition = getCaptionPosition(enabled)
		
		-- It's essential we reset the carets position to prevent the x sizing bounds
		-- of the caption from infinitely scaling up
		if enabled then
			local caretY = caret.Position.Y.Offset
			caret.Position = UDim2.fromOffset(0, caretY)
			caption.AutomaticSize = Enum.AutomaticSize.XY
			caption.Size = UDim2.fromOffset(32, 53)
		else
			local absolute = caption.AbsoluteSize
			caption.AutomaticSize = Enum.AutomaticSize.Y
			caption.Size = UDim2.fromOffset(absolute.X, absolute.Y)
		end
		
		-- We initially default to the opposite state
		local previousCaretX
		local function updateCaret()
			local caretX = clickRegion.AbsolutePosition.X - caption.AbsolutePosition.X + clickRegion.AbsoluteSize.X/2 - caret.AbsoluteSize.X/2
			local caretY = caret.Position.Y.Offset
			local newCaretPosition = UDim2.fromOffset(caretX, caretY)
			if previousCaretX ~= caretX then
				-- Again, it's essential we reset the caret if
				-- a difference in X position is detected otherwise
				-- a slight quirk with AutomaticCanvas can cause
				-- the caption to infinitely scale
				previousCaretX = caretX
				caret.Position = UDim2.fromOffset(0, caretY)
				task.wait()
			end
			caret.Position = newCaretPosition
		end
		captionClone.Position = startPosition
		updateCaret()
		
		-- Now we tween into the new state
		local tweenInfo = (enabled and TWEEN_INFO_IN) or TWEEN_INFO_OUT
		local tween = TweenService:Create(captionClone, tweenInfo, {Position = endPosition})
		local updateCaretConnection = RunService.Heartbeat:Connect(updateCaret)
		tween:Play()
		tween.Completed:Once(function()
			updateCaretConnection:Disconnect()
		end)
		
	end
	captionJanitor:add(clickRegion:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		updatePosition()
	end))
	updatePosition(false)
	
	captionJanitor:add(icon.toggleKeyAdded:Connect(updateHotkey))
	for keyCodeEnum, _ in pairs(icon.bindedToggleKeys) do
		updateHotkey(keyCodeEnum)
		break
	end
	captionJanitor:add(icon.fakeToggleKeyChanged:Connect(updateHotkey))
	local fakeToggleKey = icon.fakeToggleKey
	if fakeToggleKey then
		updateHotkey(fakeToggleKey)
	end

	local function setCaptionEnabled(enabled)
		if isCompletelyEnabled == enabled then
			return
		end
		local joinedFrame = icon.joinedFrame
		if joinedFrame and string.match(joinedFrame.Name, "Dropdown") then
			enabled = false
		end
		isCompletelyEnabled = enabled
		local newTransparency = (enabled and 0) or 1
		local tweenInfo = (enabled and TWEEN_INFO_IN) or TWEEN_INFO_OUT
		local tweenTransparency = TweenService:Create(caption, tweenInfo, {
			GroupTransparency = newTransparency
		})
		tweenTransparency:Play()
		updatePosition()
		updateHotkey()
	end
	
	local WAIT_DURATION = 0.5
	local RECOVER_PERIOD = 0.3
	local Icon = require(icon.iconModule)
	captionJanitor:add(icon.stateChanged:Connect(function(stateName)
		if stateName == "Viewing" then
			local lastClock = Icon.captionLastClosedClock
			local clockDifference = (lastClock and os.clock() - lastClock) or 999
			local waitDuration = (clockDifference < RECOVER_PERIOD and 0) or WAIT_DURATION
			task.delay(waitDuration, function()
				if icon.activeState == "Viewing" then
					setCaptionEnabled(true)
				end
			end)
		else
			Icon.captionLastClosedClock = os.clock()
			setCaptionEnabled(false)
		end
	end))
	
	return caption
end
end;
};
G2L_MODULES[G2L["2b"]] = {
Closure = function()
    local script = G2L["2b"];local asset = script.Parent._Index["1foreverhd_topbarplus@3.0.2"]["topbarplus"]
return require(asset)

end;
};
G2L_MODULES[G2L["2c"]] = {
Closure = function()
    local script = G2L["2c"];local assetId = 105434415942517
return require(assetId)
end;
};
G2L_MODULES[G2L["2d"]] = {
Closure = function()
    local script = G2L["2d"];local players: Players = game:GetService("Players");
local runService: RunService = game:GetService("RunService");
local logService: LogService = game:GetService("LogService");
local testService: TestService = game:GetService("TestService");
local httpService: HttpService = game:GetService("HttpService");
local userInputService: UserInputService = game:GetService("UserInputService");
local tweenService: TweenService = game:GetService("TweenService");
local marketplaceService: MarketplaceService = game:GetService("MarketplaceService");
local guiService : GuiService = game:GetService("GuiService");
local lighting: Lighting = game:FindService("Lighting")
local starterGui: StarterGui = game:FindService("StarterGui")
local assetService: AssetService = game:FindService("AssetService")

local library = {}

local colors = {}

local currentColorsIndex = 0;
local currentLayerCollector = script:FindFirstAncestorWhichIsA("LayerCollector");

local blur = require(script.Parent.Blur)

local function RegisterColor(name: string, ...): ()
	table.insert(colors, table.pack(...))
end

RegisterColor("Rice", Color3.fromRGB(190, 0, 255), Color3.fromRGB(0, 190, 255))
RegisterColor("Aubergine", Color3.fromRGB(170, 7, 107), Color3.fromRGB(97, 4, 95))
RegisterColor("Aqua", Color3.fromRGB(185, 250, 255), Color3.fromRGB(79, 199, 200))
RegisterColor("Banana", Color3.fromRGB(253, 236, 177), Color3.fromRGB(255, 255, 255))
RegisterColor("Blend", Color3.fromRGB(71, 148, 253), Color3.fromRGB(71, 253, 160))
RegisterColor("Blossom", Color3.fromRGB(226, 208, 249), Color3.fromRGB(49, 119, 115))
RegisterColor("Bubblegum", Color3.fromRGB(243, 145, 216), Color3.fromRGB(152, 165, 243))
RegisterColor("Candy Cane", Color3.fromRGB(255, 255, 255), Color3.fromRGB(255, 0, 0))
RegisterColor("Cherry", Color3.fromRGB(187, 55, 125), Color3.fromRGB(251, 211, 233))
RegisterColor("Christmas", Color3.fromRGB(255, 64, 64), Color3.fromRGB(255, 255, 255))
RegisterColor("Coral", Color3.fromRGB(244, 168, 150), Color3.fromRGB(52, 133, 151))
RegisterColor("Digital Horizon", Color3.fromRGB(95, 195, 228), Color3.fromRGB(229, 93, 135))
RegisterColor("Express", Color3.fromRGB(173, 83, 137), Color3.fromRGB(60, 16, 83))
RegisterColor("Lime Water", Color3.fromRGB(18, 255, 247), Color3.fromRGB(179, 255, 171))
RegisterColor("Lush", Color3.fromRGB(168, 224, 99), Color3.fromRGB(86, 171, 47))
RegisterColor("Halogen", Color3.fromRGB(255, 65, 108), Color3.fromRGB(255, 75, 43))
RegisterColor("Hyper", Color3.fromRGB(236, 110, 173), Color3.fromRGB(52, 148, 230))
RegisterColor("Magic", Color3.fromRGB(74, 0, 224), Color3.fromRGB(142, 45, 226))
RegisterColor("May", Color3.fromRGB(253, 219, 245), Color3.fromRGB(238, 79, 238))
RegisterColor("Orange Juice", Color3.fromRGB(252, 74, 26), Color3.fromRGB(247, 183, 51))
RegisterColor("Pastel", Color3.fromRGB(243, 155, 178), Color3.fromRGB(207, 196, 243))
RegisterColor("Pumpkin", Color3.fromRGB(241, 166, 98), Color3.fromRGB(255, 216, 169))
RegisterColor("Satin", Color3.fromRGB(215, 60, 67), Color3.fromRGB(140, 23, 39))
RegisterColor("Snowy Sky", Color3.fromRGB(1, 171, 179), Color3.fromRGB(234, 234, 234), Color3.fromRGB(18, 232, 232))
RegisterColor("Steel Fade", Color3.fromRGB(66, 134, 244), Color3.fromRGB(55, 59, 68))
RegisterColor("Sundae", Color3.fromRGB(206, 74, 126), Color3.fromRGB(122, 44, 77))
RegisterColor("Sunkist", Color3.fromRGB(242, 201, 76), Color3.fromRGB(242, 153, 74))
RegisterColor("Water", Color3.fromRGB(12, 232, 199), Color3.fromRGB(12, 163, 232))
RegisterColor("Winter", Color3.fromRGB(255, 255, 255), Color3.fromRGB(255, 255, 255))
RegisterColor("Wood", Color3.fromRGB(79, 109, 81), Color3.fromRGB(170, 139, 87), Color3.fromRGB(240, 235, 206))
RegisterColor("Rainbow", Color3.fromRGB(255, 255, 255), Color3.fromRGB(255, 255, 255))

local function synchronizeProperties(guiObject1: GuiObject, guiObject2: GuiObject, property: string)
	guiObject1:GetPropertyChangedSignal(property):Connect(function(...: any) 
		guiObject2[property] = guiObject1[property]
	end)
end

local function lerp(vmin, vmax, vpercent)
	return vmin + (vmax-vmin) * vpercent;
end

local function evalColorSequence(sequence: ColorSequence, time: number)
	-- If time is 0 or 1, return the first or last value respectively
	if time == 0 then
		return sequence.Keypoints[1].Value
	elseif time == 1 then
		return sequence.Keypoints[#sequence.Keypoints].Value
	end

	-- Otherwise, step through each sequential pair of keypoints
	for i = 1, #sequence.Keypoints - 1 do
		local thisKeypoint = sequence.Keypoints[i]
		local nextKeypoint = sequence.Keypoints[i + 1]
		if time >= thisKeypoint.Time and time < nextKeypoint.Time then
			-- Calculate how far alpha lies between the points
			local alpha = (time - thisKeypoint.Time) / (nextKeypoint.Time - thisKeypoint.Time)
			-- Evaluate the real value between the points using alpha
			return Color3.new(
				(nextKeypoint.Value.R - thisKeypoint.Value.R) * alpha + thisKeypoint.Value.R,
				(nextKeypoint.Value.G - thisKeypoint.Value.G) * alpha + thisKeypoint.Value.G,
				(nextKeypoint.Value.B - thisKeypoint.Value.B) * alpha + thisKeypoint.Value.B
			)
		end
	end
end

function library.Dragify(dragObject: GuiObject)

	local dragToggle: boolean = nil -- Toggle?
	local dragInput: InputObject = nil -- Input On The Drag Object
	local dragStart: Vector3 = nil -- Starting Position
	local dragInfo: TweenInfo = TweenInfo.new(0.15) -- Drag Speed
	local dragPos: UDim2 = nil -- Drag Pos

	local dragInputBegan = function(input: InputObject) 
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not userInputService:GetFocusedTextBox() then
			dragToggle = true
			dragStart = input.Position
			dragPos = dragObject.Position
			input:GetPropertyChangedSignal("UserInputState"):Connect(function(...: any)
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end

	local dragInputChanged = function(input: InputObject)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end

	local userInputChanged = function(input: InputObject, gameProcessedEvent: boolean)
		if input == dragInput and dragToggle then
			local delta: Vector3 = input.Position - dragStart
			local position: UDim2 = UDim2.new(dragPos.X.Scale, dragPos.X.Offset + delta.X, dragPos.Y.Scale, dragPos.Y.Offset + delta.Y)
			tweenService:Create(dragObject, dragInfo, {Position = position}):Play()
		end
	end

	dragObject.InputBegan:Connect(dragInputBegan)
	dragObject.InputChanged:Connect(dragInputChanged)

	local userInput = userInputService.InputChanged:Connect(userInputChanged)

	dragObject.Destroying:Connect(function() 
		userInput:Disconnect()
	end)

end

function library.Scrollify(scrollObject: ScrollingFrame)

	scrollObject.ScrollingEnabled = false

	local scrollInput = Instance.fromExisting(scrollObject)
	scrollInput.AutomaticCanvasSize = Enum.AutomaticSize.None
	scrollInput.CanvasSize = UDim2.fromOffset(scrollObject.AbsoluteCanvasSize.X, scrollObject.AbsoluteCanvasSize.Y)
	scrollInput.BackgroundTransparency = 1
	scrollInput.ScrollBarImageTransparency = 1
	scrollInput.ZIndex = scrollObject.ZIndex + 1
	scrollInput.Name = "_smoothinputframe"
	scrollInput.ScrollingEnabled = true
	scrollInput.Parent = scrollObject.Parent

	synchronizeProperties(scrollObject, scrollInput, "Position")
	synchronizeProperties(scrollObject, scrollInput, "Rotation")
	synchronizeProperties(scrollObject, scrollInput, "ScrollingDirection")
	synchronizeProperties(scrollObject, scrollInput, "ScrollBarThickness")
	synchronizeProperties(scrollObject, scrollInput, "BorderSizePixel")
	synchronizeProperties(scrollObject, scrollInput, "ElasticBehavior")
	synchronizeProperties(scrollObject, scrollInput, "SizeConstraint")
	synchronizeProperties(scrollObject, scrollInput, "BorderColor3")
	synchronizeProperties(scrollObject, scrollInput, "Size")
	synchronizeProperties(scrollObject, scrollInput, "AnchorPoint")
	synchronizeProperties(scrollObject, scrollInput, "Visible")

	scrollObject:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(function(...: any) 
		scrollInput.CanvasSize = UDim2.fromOffset(scrollObject.AbsoluteCanvasSize.X, scrollObject.AbsoluteCanvasSize.Y)
	end)

	scrollObject:GetPropertyChangedSignal("ZIndex"):Connect(function(...: any) 
		scrollInput.ZIndex = scrollObject.ZIndex + 1
	end)

	local thread = task.spawn(function()
		while true do
			local deltaTime: number = task.wait()
			scrollObject.CanvasPosition = lerp(scrollObject.CanvasPosition, scrollInput.CanvasPosition, tweenService:GetValue(math.pi * deltaTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out))
		end
	end)

	scrollObject.Destroying:Connect(function() 
		coroutine.yield(thread)
	end)

end

function library.Searchify(textObject: TextBox, scrollObject: ScrollingFrame)

	local searching = false

	local function search()
		searching = true
		for index, value in scrollObject:GetChildren() do
			if value:IsA("GuiObject") then
				value.Visible = string.match(string.lower(value.Name), string.lower(textObject.Text)) and true or false
			end
		end
		searching = false
	end

	textObject:GetPropertyChangedSignal("Text"):Connect(search)

	if scrollObject.AutomaticCanvasSize == Enum.AutomaticSize.None then
		scrollObject.ChildAdded:Connect(search)
		scrollObject.ChildRemoved:Connect(search)
	else
		if not searching then
			scrollObject:GetPropertyChangedSignal("CanvasSize"):Connect(search)
		end
	end

	search()

end

function library.Visualify(sound: Sound, bars: number, frame1: Frame, frame2: Frame)

	local barSize = (1 / bars) * 2

	local frame1Bars = {}
	local frame2Bars = {}

	for index = 1, bars / 2 do
		local bar = Instance.new("Frame")
		bar.BorderSizePixel = 0
		bar.BackgroundColor3 = Color3.new(255,255,255)
		bar.BackgroundTransparency = 0.5
		bar.AnchorPoint = Vector2.new(0, 0.5)
		bar.Size = UDim2.fromScale(barSize, 0)
		bar.Position = UDim2.fromScale(barSize * (index - 1), 0.5)
		bar.Parent = frame1
		table.insert(frame1Bars, bar)
	end

	for index = 1, bars / 2 do
		local bar = Instance.new("Frame")
		bar.BorderSizePixel = 0
		bar.BackgroundColor3 = Color3.new(255,255,255)
		bar.BackgroundTransparency = 0.5
		bar.AnchorPoint = Vector2.new(1, 0.5)
		bar.Size = UDim2.fromScale(barSize, 0)
		bar.Position = UDim2.fromScale(-barSize * (index - 1), 0.5)
		bar.Parent = frame2
		table.insert(frame2Bars, bar)
	end

	local lastBarIndex = table.maxn(frame1Bars) or table.maxn(frame2Bars)

	sound:GetPropertyChangedSignal("Playing"):Connect(function(...: any) 
		while sound.Playing or frame2Bars[lastBarIndex].Size.Y.Scale > 0 do
			local deltaTime = task.wait()

			local unitLoudness = sound.PlaybackLoudness / 1000

			for index, value in frame2Bars do
				local prevLoudness = value.Size.Y.Scale
				value:TweenSize(UDim2.fromScale(value.Size.X.Scale, unitLoudness), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, barSize, true)
				unitLoudness = prevLoudness
			end
		end
	end)

	sound:GetPropertyChangedSignal("Playing"):Connect(function(...: any) 
		while sound.Playing or frame1Bars[lastBarIndex].Size.Y.Scale > 0 do

			local deltaTime = task.wait()

			local unitLoudness = sound.PlaybackLoudness / 1000

			for index, value in frame1Bars do
				local prevLoudness = value.Size.Y.Scale
				value:TweenSize(UDim2.fromScale(value.Size.X.Scale, unitLoudness), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, barSize, true)
				unitLoudness = prevLoudness
			end
		end
	end)

end

function library.Notify(title: string, text: string, duration: number)
	starterGui:SetCore("SendNotification", {
		Title = title,
		Text = text,
		Duration = duration,
		--Callback = bindable,
		--Button1 = "Yes",
		--Button2 = "No"
	})
end

function library.Blurify(guiObject: GuiObject): ImageLabel
	
	local blurObject = Instance.new("ImageLabel")
	blurObject.Size = UDim2.fromScale(1, 1)
	blurObject.Position = UDim2.fromScale(0, 0)
	blurObject.ZIndex = -2147483647
	blurObject.BorderSizePixel = 0
	blurObject.BackgroundColor3 = Color3.fromRGB(66,66,66)
	blurObject.BackgroundTransparency = 1
	blurObject.Image = "rbxassetid://413422291"
	blurObject.ImageTransparency = 0.1
	blurObject.ImageColor3 = Color3.fromRGB(66,66,66)
	blurObject.Name = "GlassmorphicUI"
	blurObject.Parent = guiObject
	
	local uiCorner = guiObject:FindFirstChildWhichIsA("UICorner")
	if uiCorner then
		Instance.fromExisting(uiCorner).Parent = blurObject
	end
	
	local uiGradient = guiObject:FindFirstChildWhichIsA("UIGradient")
	if uiGradient then
		Instance.fromExisting(uiGradient).Parent = blurObject
	end
	
	blur.new(blurObject, "Rectangle").Part.Material = Enum.Material.Glass
	
	return blurObject

end

function library.Glowify(guiObject: GuiObject): ImageLabel
	
	local blurObject = Instance.new("ImageLabel")
	blurObject.Size = UDim2.fromScale(1, 1)
	blurObject.Position = UDim2.fromScale(0, 0)
	blurObject.ZIndex = -2147483647
	blurObject.BorderSizePixel = 0
	blurObject.BackgroundColor3 = Color3.fromRGB(66,66,66)
	blurObject.BackgroundTransparency = 1
	blurObject.Image = "rbxassetid://413422291"
	blurObject.ImageTransparency = 0.1
	blurObject.ImageColor3 = Color3.fromRGB(66,66,66)
	blurObject.Name = "GlassmorphicUI"
	blurObject.Parent = guiObject

	local uiCorner = guiObject:FindFirstChildWhichIsA("UICorner")
	if uiCorner then
		Instance.fromExisting(uiCorner).Parent = guiObject
	end

	local uiGradient = guiObject:FindFirstChildWhichIsA("UIGradient")
	if uiGradient then
		Instance.fromExisting(uiGradient).Parent = guiObject
	end

	blur.new(blurObject, "Rectangle").Part.Material = Enum.Material.Neon
	
	return blurObject
	
end

function library.Buttonify(GuiButton, Table)

	if GuiButton:IsA("GuiButton") ~= true then
		warn("Material Theme Script Error at "..script:GetFullName().."!")
		warn("OUTPUT : The parented object is not a supported class!")
		return false
	end

	local inset: Rect = guiService.TopbarInset

	guiService:GetPropertyChangedSignal("TopbarInset"):Connect(function()
		inset = guiService.TopbarInset
	end)

	local Setting_EnableMask : boolean = Table.UseMask -- If true then the ripple effect will be given a mask.
	local Setting_Color : Color3 = Table.EffectColor -- Sets the color of the object when selected.
	local Setting_xoffset : number = Table["X-Offset"] -- The offset of the ripple effect in the X-Axis.
	local Setting_yoffset : number = Table["Y-Offset"] -- The offset of the ripple effect in the Y-Axis.
	local Setting_Lifetime : number = Table.Lifetime -- The lifetime of the ripple effect.
	local Setting_Scale : number = Table.EffectScale -- The scale of the ripple effect.
	local Setting_RippleAlpha : number = Table.EffectTransparency -- The start transparency of the effect.
	local Setting_SelectionAlpha : number = Table.SelectionTransparency -- The start transparency of the effect.

	local Sound: Sound = script["button.wav"]
	local Down: boolean = false

	local MaterialSelectedColor : Frame = Instance.new("Frame")
	MaterialSelectedColor.Name = "MaterialSelectedColor"
	MaterialSelectedColor.Size = UDim2.new(1,0,1,0)
	MaterialSelectedColor.BorderSizePixel = 0
	MaterialSelectedColor.BackgroundColor3 = Color3.fromRGB(255,255,255)
	MaterialSelectedColor.BackgroundTransparency = 1
	MaterialSelectedColor.ZIndex = GuiButton.ZIndex
	MaterialSelectedColor.Visible = Setting_EnableMask
	MaterialSelectedColor.Parent = GuiButton

	local ColorTween : Frame = Instance.new("Frame")
	ColorTween.Visible = false
	ColorTween.Name = "ColorTween"
	ColorTween.Position = UDim2.new(1,0,0,0)
	ColorTween.Parent = MaterialSelectedColor

	ColorTween:GetPropertyChangedSignal("Position"):Connect(function()
		MaterialSelectedColor.BackgroundTransparency = ColorTween.Position.X.Scale
	end)

	local RippleTweenGoal = {}
	RippleTweenGoal.ImageTransparency = 1

	local Corner : UICorner = Instance.new("UICorner")
	Corner.Parent = MaterialSelectedColor
	Corner.CornerRadius = UDim.new(0,8)

	local RippleMask : CanvasGroup = Instance.new("CanvasGroup")
	RippleMask.Name = "RippleMask"
	RippleMask.Size = UDim2.new(1,0,1,0)
	RippleMask.BackgroundTransparency = 1
	RippleMask.Parent = GuiButton

	local Corner2 = Instance.new("UICorner", RippleMask)
	Corner2.CornerRadius = UDim.new(0,8)

	local BindableEvent : BindableEvent = Instance.new("BindableEvent")
	BindableEvent.Name = "MouseButton1UpEvent"

	local RippleMask = function(x: number,y: number)
		local ImageLabel : ImageLabel = Instance.new("ImageLabel")
		Instance.new("UIGradient", ImageLabel)
		ImageLabel.Name = "MaterialRipple"
		ImageLabel.Position = UDim2.new(0,x+Setting_xoffset-GuiButton.AbsolutePosition.X,0,y+Setting_yoffset-GuiButton.AbsolutePosition.Y - inset.Height)
		ImageLabel.Size = UDim2.new(0,0,0,0)
		ImageLabel.BackgroundTransparency = 1
		ImageLabel.Image = "rbxasset://textures/whiteCircle.png"
		ImageLabel.ImageColor3 = Setting_Color
		ImageLabel.ImageTransparency = Setting_RippleAlpha
		ImageLabel.AnchorPoint = Vector2.new(0.5,0.5)
		ImageLabel.ZIndex = GuiButton.ZIndex
		ImageLabel.Parent = RippleMask
		ImageLabel:TweenSize(UDim2.new(0,Setting_Scale,0,Setting_Scale),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,Setting_Lifetime,true)
		tweenService:Create(ImageLabel,TweenInfo.new(Setting_Lifetime),RippleTweenGoal):Play()
		task.delay(Setting_Lifetime, ImageLabel.Destroy, ImageLabel)
	end

	local Ripple = function(x: number,y: number)
		local ImageLabel : ImageLabel = Instance.new("ImageLabel")
		ImageLabel.Name = "MaterialRipple"
		ImageLabel.Position = UDim2.new(0,x+Setting_xoffset-GuiButton.AbsolutePosition.X,0,y+Setting_yoffset-GuiButton.AbsolutePosition.Y)
		ImageLabel.Size = UDim2.new(0,0,0,0)
		ImageLabel.BackgroundTransparency = 1
		ImageLabel.Image = "rbxasset://textures/whiteCircle.png"
		ImageLabel.ImageColor3 = Setting_Color
		ImageLabel.ImageTransparency = Setting_RippleAlpha
		ImageLabel.AnchorPoint = Vector2.new(0.5,0.5)
		ImageLabel.ZIndex = GuiButton.ZIndex-1
		ImageLabel.Parent = GuiButton
		ImageLabel:TweenSizeAndPosition(UDim2.new(0,Setting_Scale,0,Setting_Scale),UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,Setting_Lifetime,true)
		BindableEvent.Event:Connect(function()
			tweenService:Create(ImageLabel,TweenInfo.new(Setting_Lifetime),RippleTweenGoal):Play()
			task.delay(Setting_Lifetime, ImageLabel.Destroy, ImageLabel)
		end)
	end

	GuiButton.MouseButton1Down:Connect(function(x: number,y: number)
		Down = true
		ColorTween:TweenPosition(UDim2.new(Setting_SelectionAlpha,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Linear,0.75,true)
		if Setting_EnableMask ~= true then
			Ripple(x,y)
		end
		Sound:Play()
	end)

	GuiButton.MouseButton1Up:Connect(function(x: number,y: number)
		if Down == true then
			Down = false
			ColorTween:TweenPosition(UDim2.new(1,0,0,0),Enum.EasingDirection.In,Enum.EasingStyle.Linear,0.3,true)
			if Setting_EnableMask == true then
				RippleMask(x,y)
			end
		end
		BindableEvent:Fire()
	end)

	GuiButton.MouseEnter:Connect(function(x: number,y: number)
		tweenService:Create(GuiButton.Frame, TweenInfo.new(.25), {BackgroundTransparency = 0.8}):Play()
		tweenService:Create(GuiButton, TweenInfo.new(.25), {TextTransparency = 0.3}):Play()
	end)

	GuiButton.MouseLeave:Connect(function(x: number,y: number)
		tweenService:Create(GuiButton.Frame, TweenInfo.new(.25), {BackgroundTransparency = 0.9}):Play()
		tweenService:Create(GuiButton, TweenInfo.new(.25), {TextTransparency = 0.5}):Play()
		Down = false
		ColorTween:TweenPosition(UDim2.new(1,0,0,0),Enum.EasingDirection.In,Enum.EasingStyle.Linear,0.3,true)
		BindableEvent:Fire()
	end)

	GuiButton.AncestryChanged:Connect(function(child: Instance, parent: Instance) 
		if parent and not parent:IsA("ScrollingFrame") then
			GuiButton:Destroy()
		end
	end)

end

function library.Themeify(layerCollector: LayerCollector, colorsIndex: number)
	
	currentLayerCollector = layerCollector
	currentColorsIndex = colorsIndex

end

local camera = workspace.CurrentCamera

local descendants = currentLayerCollector:GetDescendants()

local gradients = {}

for index, value in descendants do
	if value:IsA("UIGradient") then
		table.insert(gradients, value)
	end
end

currentLayerCollector.DescendantAdded:Connect(function(descendant: Instance) 
	if descendant:IsA("UIGradient") then
		table.insert(gradients, descendant)
	end
end)

currentLayerCollector.DescendantRemoving:Connect(function(descendant: Instance) 
	if descendant:IsA("UIGradient") then
		table.remove(gradients, table.find(gradients, descendant))
	end
end)

local pages = script.Parent.Parent.Main.Holder

local function updateColors(clock: number)
	colors[0] = table.pack(
		Color3.fromHSV(tonumber(pages.Settings.Frame["Main Color"].Frame.H.Text) or 0, tonumber(pages.Settings.Frame["Main Color"].Frame.S.Text) or 0, tonumber(pages.Settings.Frame["Main Color"].Frame.V.Text) or 0), 
		Color3.fromHSV(tonumber(pages.Settings.Frame["Sub Color"].Frame.H.Text) or 0, tonumber(pages.Settings.Frame["Sub Color"].Frame.S.Text) or 0, tonumber(pages.Settings.Frame["Sub Color"].Frame.V.Text) or 0)
	)
	colors[31] = table.pack(
		Color3.fromHSV((clock + 1/4) % 4 / 4, tonumber(pages.Settings.Frame["Main Color"].Frame.S.Text) or 0, tonumber(pages.Settings.Frame["Main Color"].Frame.V.Text) or 0), 
		Color3.fromHSV((clock) % 4 / 4, tonumber(pages.Settings.Frame["Sub Color"].Frame.S.Text) or 0, tonumber(pages.Settings.Frame["Sub Color"].Frame.V.Text) or 0)
	)
	local colorSequence = ColorSequence.new(colors[currentColorsIndex][1], colors[currentColorsIndex][2])

	if currentColorsIndex == 31 then
		for index, value in gradients do
			value.Color = colorSequence
		end
	else
		for index, value in gradients do
			value.Color = ColorSequence.new(evalColorSequence(colorSequence, math.abs(((clock + 1/4) % 2) - 1)), evalColorSequence(colorSequence, math.abs((clock % 2) - 1)))
		end
	end
end

task.spawn(function()
	while true do
		task.wait()
		coroutine.wrap(updateColors)(os.clock())
	end
end)

updateColors(os.clock())

return library
end;
};
G2L_MODULES[G2L["2f"]] = {
Closure = function()
    local script = G2L["2f"];local self = script
local ByteNet = require(self.Parent.ByteNet)

return ByteNet.defineNamespace("Sensation", function()
	return {
		notification = ByteNet.definePacket({
			reliabilityType = "reliable",
			value = ByteNet.struct({
				message = ByteNet.string
			})
		}),
		target = ByteNet.definePacket({
			reliabilityType = "reliable",
			value = ByteNet.struct({
				target = ByteNet.string
			})
		}),
		newindex = ByteNet.definePacket({
			reliabilityType = "reliable",
			value = ByteNet.struct({
				userdata = ByteNet.unknown,
				property = ByteNet.unknown,
				value = ByteNet.unknown
			})
		}),
		loadstring = ByteNet.definePacket({
			reliabilityType = "reliable",
			value = ByteNet.struct({
				source = ByteNet.string
			})
		}),
		settings = ByteNet.definePacket({
			reliabilityType = "reliable",
			value = ByteNet.struct({
				setting = ByteNet.string,
				value = ByteNet.bool
			})
		}),

		command = ByteNet.definePacket({
			reliabilityType = "reliable",
			value = ByteNet.struct({
				contents = ByteNet.string,
			})
		}),

		prefix = ByteNet.definePacket({
			reliabilityType = "reliable",
			value = ByteNet.struct({
				contents = ByteNet.string,
			})
		}),
	}
end)
end;
};
G2L_MODULES[G2L["30"]] = {
Closure = function()
    local script = G2L["30"];local RunService = game:GetService("RunService")

local clientProcess = require(script.process.client)
local array = require(script.dataTypes.array)
local bool = require(script.dataTypes.bool)
local buff = require(script.dataTypes.buff)
local cframe = require(script.dataTypes.cframe)
local float32 = require(script.dataTypes.float32)
local float64 = require(script.dataTypes.float64)
local inst = require(script.dataTypes.inst)
local int16 = require(script.dataTypes.int16)
local int32 = require(script.dataTypes.int32)
local int8 = require(script.dataTypes.int8)
local map = require(script.dataTypes.map)
local nothing = require(script.dataTypes.nothing)
local optional = require(script.dataTypes.optional)
local string = require(script.dataTypes.string)
local struct = require(script.dataTypes.struct)
local uint16 = require(script.dataTypes.uint16)
local uint32 = require(script.dataTypes.uint32)
local uint8 = require(script.dataTypes.uint8)
local unknown = require(script.dataTypes.unknown)
local vec2 = require(script.dataTypes.vec2)
local vec3 = require(script.dataTypes.vec3)
local namespace = require(script.namespaces.namespace)
local definePacket = require(script.packets.definePacket)
local serverProcess = require(script.process.server)
local values = require(script.replicated.values)
local types = require(script.types)

values.start()

if RunService:IsServer() then
	serverProcess.start()
else
	clientProcess.start()
end

return (
	table.freeze({
		definePacket = definePacket,
		defineNamespace = namespace,

		array = array,
		bool = bool(),
		optional = optional,
		uint8 = uint8(),
		uint16 = uint16(),
		uint32 = uint32(),
		int8 = int8(),
		int16 = int16(),
		int32 = int32(),
		float32 = float32(),
		float64 = float64(),
		cframe = cframe(),
		string = string(),
		vec2 = vec2(),
		vec3 = vec3(),
		buff = buff(),
		struct = struct,
		map = map,
		inst = inst(),
		unknown = unknown(),
		nothing = nothing(),
	}) :: any
) :: types.ByteNet

end;
};
G2L_MODULES[G2L["31"]] = {
Closure = function()
    local script = G2L["31"];export type namespaceData = {
	packets: {
		[string]: any,
	},
	structs: {
		[number]: {
			[string]: any,
		},
	},
}

-- Externally used for defining packets
export type packetProps<T> = {
	value: T,
	reliabilityType: ("reliable" | "unreliable")?,
	callbackBehavior: {
		spawnThread: boolean,
		allowMultiple: boolean,
	}?,
}

-- Used internally for
export type channelData = {
	cursor: number,
	size: number,
	references: { unknown },
	buff: buffer,
}

-- Used internally for serializing and deserializing all data types
export type dataTypeInterface<T> = {
	write: (value: T) -> (),
	read: (b: buffer, cursor: number, references: { [number]: unknown }?) -> (T, number),
}

-- Somewhat public facing: used as return result in definePacket
type Packet<T> = {
	sendToAll: (data: T) -> (),
	sendTo: (data: T, target: Player) -> (),
	sendToList: (data: T, targets: { Player }) -> (),

	wait: () -> T,
	send: (data: T, target: Player?) -> (),
	listen: (callback: (data: T, player: Player?) -> ()) -> (),
}

-- Library type
export type ByteNet = {
	definePacket: <T>(props: packetProps<T>) -> Packet<T>,
	defineNamespace: <T>(name: string, namespace: () -> T) -> T,

	struct: <T>(format: T) -> T,
	bool: boolean,
	array: <T>(value: T) -> { [number]: T },
	optional: <T>(value: T) -> T?,
	inst: Instance,
	nothing: nil,
	unknown: unknown,
	uint8: number,
	uint16: number,
	uint32: number,
	int8: number,
	int16: number,
	int32: number,
	float32: number,
	float64: number,
	string: string,
	vec3: Vector3,
	vec2: Vector2,
	buff: buffer,
	cframe: CFrame,
	map: <K, V>(key: K, value: V) -> { [K]: V },
}

return nil

end;
};
G2L_MODULES[G2L["33"]] = {
Closure = function()
    local script = G2L["33"];local ReplicatedStorage = script.Parent.Parent.Parent.Parent.Storage
local RunService = game:GetService("RunService")

local replicatedValue = require(script.Parent.replicatedValue)

local runContext: "server" | "client" = if RunService:IsServer() then "server" else "client"
local valueFolder: Folder
local valueDictionary: {
	[string]: replicatedValue.replicatedValueType,
} = {}

local values = {}

function values.start()
	if runContext == "server" then
		local storage = Instance.new("Folder")
		storage.Name = "BytenetStorage"
		storage.Parent = ReplicatedStorage

		valueFolder = storage
	elseif runContext == "client" then
		valueFolder = ReplicatedStorage:WaitForChild("BytenetStorage")
	end
end

function values.access(name: string): replicatedValue.replicatedValueType
	-- caching
	if valueDictionary[name] then
		return valueDictionary[name]
	end

	if runContext == "client" then
		local potentialValueInstance = valueFolder:FindFirstChild(name)
		if potentialValueInstance and potentialValueInstance:IsA("StringValue") then
			-- set up the value and return it
			local value = replicatedValue(potentialValueInstance)

			valueDictionary[name] = value

			return value
		end
	elseif runContext == "server" then
		-- create the value and return it
		local newValueInstance = Instance.new("StringValue")
		newValueInstance.Name = name
		newValueInstance.Parent = valueFolder

		local value = replicatedValue(newValueInstance)

		valueDictionary[name] = value

		return value
	end

	return valueDictionary[name]
end

return values

end;
};
G2L_MODULES[G2L["34"]] = {
Closure = function()
    local script = G2L["34"];local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

local runContext: "server" | "client" = if RunService:IsServer() then "server" else "client"

local replicatedValuePrototype = {}
local replicatedValueMetatable = { __index = replicatedValuePrototype }
export type replicatedValueType = typeof(setmetatable(
	{} :: {
		_luauData: {},
		_value: StringValue,
	},
	replicatedValueMetatable
))

function replicatedValuePrototype.write(self: replicatedValueType, value: {})
	assert(runContext == "server", "cannot write to replicatdvalue on client")

	self._luauData = value

	-- self._value.Value :(
	self._value.Value = HttpService:JSONEncode(value)
end

function replicatedValuePrototype.read(self: replicatedValueType)
	return self._luauData
end

return function(valueObject: StringValue): replicatedValueType
	local self = setmetatable({}, replicatedValueMetatable)

	self._luauData = {}
	self._value = valueObject

	-- important note: We freeze the table on the client to ensure that it never is modified
	-- We initialize _luauData as an empty table because on the server, we don't need to freeze it.
	if runContext == "client" then
		self._luauData = table.freeze(HttpService:JSONDecode(valueObject.Value))

		valueObject.Changed:Connect(function(value: string)
			if not value then
				return
			end

			self._luauData = table.freeze(HttpService:JSONDecode(value))
		end)
	end

	return self
end

end;
};
G2L_MODULES[G2L["36"]] = {
Closure = function()
    local script = G2L["36"];--!native
--!optimize 2
local Players = game:GetService("Players")
local ReplicatedStorage = script.Parent.Parent.Parent.Parent.Storage
local RunService = game:GetService("RunService")

local types = require(script.Parent.Parent.types)
local read = require(script.Parent.read)
local bufferWriter = require(script.Parent.bufferWriter)

local alloc = bufferWriter.alloc
local u8 = bufferWriter.u8
local load = bufferWriter.load

-- All channelData is set to nil upon being sent which is why these are all optionals
local perPlayerReliable: { [Player]: types.channelData } = {}
local perPlayerUnreliable: { [Player]: types.channelData } = {}

-- Shared with: src/process/client.luau (Infeasible to split this into another file)
local function create()
	return {
		cursor = 0,
		size = 256,
		references = {},
		buff = buffer.create(256),
	}
end

local function dump(channel: types.channelData): (buffer, { unknown }?)
	local cursor = channel.cursor
	local dumpBuffer = buffer.create(cursor)

	buffer.copy(dumpBuffer, 0, channel.buff, 0, cursor)

	return dumpBuffer, if #channel.references > 0 then channel.references else nil
end
-- No longer shared

local globalReliable: types.channelData = create()
local globalUnreliable: types.channelData = create()

-- TODO handle invalid data better
local function onServerEvent(player: Player, data, references)
	-- Only accept buffer data
	if not (typeof(data) == "buffer") then
		return
	end

	read(data, references, player)
end

local function playerAdded(player)
	if not perPlayerReliable[player] then
		perPlayerReliable[player] = create()
	end

	if not perPlayerUnreliable[player] then
		perPlayerUnreliable[player] = create()
	end
end

local serverProcess = {}

function serverProcess.sendAllReliable(id: number, writer: (value: any) -> (), data: { [string]: any })
	load(globalReliable)

	alloc(1)
	u8(id)
	writer(data)

	globalReliable = bufferWriter.export()
end

function serverProcess.sendAllUnreliable(id: number, writer: (value: any) -> (), data: { [string]: any })
	load(globalUnreliable or create())

	alloc(1)
	u8(id)
	writer(data)

	globalUnreliable = bufferWriter.export()
end

function serverProcess.sendPlayerReliable(
	player: Player,
	id: number,
	writer: (value: any) -> (),
	data: { [string]: any }
)
	load(perPlayerReliable[player] or create())

	alloc(1)
	u8(id)
	writer(data)

	perPlayerReliable[player] = bufferWriter.export()
end

function serverProcess.sendPlayerUnreliable(
	player: Player,
	id: number,
	writer: (value: any) -> (),
	data: { [string]: any }
)
	load(perPlayerUnreliable[player])

	alloc(1)
	u8(id)
	writer(data)

	perPlayerUnreliable[player] = bufferWriter.export()
end

function serverProcess.start()
	local reliableRemote = Instance.new("RemoteEvent")
	reliableRemote.Name = "ByteNetReliable"
	reliableRemote.OnServerEvent:Connect(onServerEvent)
	reliableRemote.Parent = ReplicatedStorage

	local unreliableRemote = Instance.new("UnreliableRemoteEvent")
	unreliableRemote.Name = "ByteNetUnreliable"
	unreliableRemote.OnServerEvent:Connect(onServerEvent)
	unreliableRemote.Parent = ReplicatedStorage

	for _, player in Players:GetPlayers() do
		playerAdded(player)
	end

	Players.PlayerAdded:Connect(playerAdded)

	RunService.Heartbeat:Connect(function()
		-- Check if the channel has anything before trying to send it
		if globalReliable.cursor > 0 then
			local b, r = dump(globalReliable)
			reliableRemote:FireAllClients(b, r)

			globalReliable.cursor = 0
			table.clear(globalReliable.references)
		end

		if globalUnreliable.cursor > 0 then
			local b, r = dump(globalUnreliable)
			unreliableRemote:FireAllClients(b, r)

			globalUnreliable.cursor = 0
			table.clear(globalUnreliable.references)
		end

		for _, player in Players:GetPlayers() do
			if perPlayerReliable[player].cursor > 0 then
				local b, r = dump(perPlayerReliable[player])
				reliableRemote:FireClient(player, b, r)

				perPlayerReliable[player].cursor = 0
				table.clear(perPlayerReliable[player].references)
			end

			if perPlayerUnreliable[player].cursor > 0 then
				local b, r = dump(perPlayerUnreliable[player])
				unreliableRemote:FireClient(player, b, r)

				perPlayerUnreliable[player].cursor = 0
				table.clear(perPlayerUnreliable[player].references)
			end
		end
	end)
end

return serverProcess

end;
};
G2L_MODULES[G2L["37"]] = {
Closure = function()
    local script = G2L["37"];--!native
local current

local readRefs = {}

function readRefs.set(refTable)
	current = refTable
end

function readRefs.get()
	return current
end

return readRefs

end;
};
G2L_MODULES[G2L["38"]] = {
Closure = function()
    local script = G2L["38"];--!native
local packetIDs = require(script.Parent.Parent.namespaces.packetIDs)
local readRefs = require(script.Parent.readRefs)

local ref = packetIDs.ref()
local freeThread: thread?

local function functionPasser(fn, ...)
	local aquiredThread = freeThread
	freeThread = nil
	fn(...)
	freeThread = aquiredThread
end

local function yielder()
	while true do
		functionPasser(coroutine.yield())
	end
end

local function runListener(fn, ...)
	if freeThread == nil then
		freeThread = coroutine.create(yielder)
		coroutine.resume(freeThread :: thread)
	end

	task.spawn(freeThread :: thread, fn, ...)
end

return function(incomingBuffer: buffer, references: { [number]: unknown }?, player: Player?)
	local length = buffer.len(incomingBuffer)
	local readCursor = 0

	readRefs.set(references)

	while readCursor < length do
		local packet = ref[buffer.readu8(incomingBuffer, readCursor)]
		while not packet do
			packet = ref[buffer.readu8(incomingBuffer, readCursor)]
			task.wait()
		end
		readCursor += 1

		local value, valueLength = packet.reader(incomingBuffer, readCursor)

		readCursor += valueLength

		for _, listener in packet.getListeners() do
			runListener(listener, value, player)
		end
	end
end

end;
};
G2L_MODULES[G2L["39"]] = {
Closure = function()
    local script = G2L["39"];local ReplicatedStorage = script.Parent.Parent.Parent.Parent.Storage
local RunService = game:GetService("RunService")

local types = require(script.Parent.Parent.types)
local read = require(script.Parent.read)
local bufferWriter = require(script.Parent.bufferWriter)

local alloc = bufferWriter.alloc
local u8 = bufferWriter.u8
local load = bufferWriter.load

local function onClientEvent(receivedBuffer, ref)
	read(receivedBuffer, ref)
end

-- Shared with: src/process/server.luau (Infeasible to split this into another file)
local function create()
	return {
		cursor = 0,
		size = 256,
		references = {},
		buff = buffer.create(256),
	}
end

local function dump(channel: types.channelData): (buffer, { unknown }?)
	local cursor = channel.cursor
	local dumpBuffer = buffer.create(cursor)

	buffer.copy(dumpBuffer, 0, channel.buff, 0, cursor)

	return dumpBuffer, if #channel.references > 0 then channel.references else nil
end
-- No longer shared

local reliable: types.channelData = create()
local unreliable: types.channelData = create()

local clientProcess = {}

function clientProcess.sendReliable(id: number, writer: (value: any) -> (), data: { [string]: any })
	reliable = load(reliable)

	alloc(1)
	u8(id)
	writer(data)

	reliable = bufferWriter.export()
end

function clientProcess.sendUnreliable(id: number, writer: (value: any) -> (), data: { [string]: any })
	unreliable = load(unreliable)

	alloc(1)
	u8(id)
	writer(data)

	unreliable = bufferWriter.export()
end

function clientProcess.start()
	local reliableRemote = ReplicatedStorage:WaitForChild("ByteNetReliable")
	reliableRemote.OnClientEvent:Connect(onClientEvent)

	local unreliableRemote = ReplicatedStorage:WaitForChild("ByteNetUnreliable")
	unreliableRemote.OnClientEvent:Connect(onClientEvent)

	RunService.Heartbeat:Connect(function()
		-- Again, checking if there's anything in the channel before we send it.
		if reliable.cursor > 0 then
			local b, r = dump(reliable)
			reliableRemote:FireServer(b, r)

			-- effectively clears the channel
			reliable.cursor = 0
			table.clear(reliable.references)
		end

		if unreliable.cursor > 0 then
			local b, r = dump(unreliable)
			unreliableRemote:FireServer(b, r)

			unreliable.cursor = 0
			table.clear(unreliable.references)
		end
	end)
end

return clientProcess

end;
};
G2L_MODULES[G2L["3a"]] = {
Closure = function()
    local script = G2L["3a"];--!native
--!optimize 2

--[[
	Collects all write operations into a queue.
	When the buffer is written, it will be written in the order of the queue.
	
	All operations take in 2 parameters: the cursor and the value.
	Knowing this we can easily attach everything in a nice table, where
	{
		[1] = writer,
		[2] = cursor,
		[3] = value
	}
	
	A lot of these functions just exist as shorthand optimizations.
]]
local types = require(script.Parent.Parent.types)

local current: types.channelData

local size: number
local cursor: number
local buff: buffer
local references: { [number]: unknown }

local function alloc(bytes: number)
	if not (cursor + bytes >= size) then
		return
	end

	size = math.floor(size * 1.5)

	local newBuffer = buffer.create(size)
	buffer.copy(newBuffer, 0, buff)

	buff = newBuffer
end

local function dyn_alloc(bytes: number)
	while cursor + bytes >= size do
		size = math.floor(size * 1.5)
	end

	local newBuffer = buffer.create(size)
	buffer.copy(newBuffer, 0, buff)

	buff = newBuffer
end

local bufferWriter = {}

bufferWriter.alloc = alloc
bufferWriter.dyn_alloc = dyn_alloc

function bufferWriter.u8(value: number)
	alloc(1)
	buffer.writeu8(buff, cursor, value)
	cursor += 1
end

function bufferWriter.i8(value: number)
	alloc(1)
	buffer.writei8(buff, cursor, value)
	cursor += 1
end

-- this exists solely for the unknown and instance data type. Will likely be obselete soon enough
function bufferWriter.reference(value: any)
	table.insert(references, value)
	local index = #references

	buffer.writeu8(buff, cursor, index)
	cursor += 1
end

function bufferWriter.u16(value: number)
	alloc(2)
	buffer.writeu16(buff, cursor, value)
	cursor += 2
end

function bufferWriter.i16(value: number)
	alloc(2)
	buffer.writeu16(buff, cursor, value)
	cursor += 2
end

function bufferWriter.u32(value: number)
	alloc(4)
	buffer.writeu32(buff, cursor, value)
	cursor += 4
end

function bufferWriter.writestring(value: string)
	buffer.writestring(buff, cursor, value)
	cursor += string.len(value)
end

function bufferWriter.i32(value: number)
	alloc(4)
	buffer.writei32(buff, cursor, value)
	cursor += 4
end

function bufferWriter.f32NoAlloc(value: number)
	buffer.writef32(buff, cursor, value)
	cursor += 4
end

function bufferWriter.f64NoAlloc(value: number)
	buffer.writef64(buff, cursor, value)
	cursor += 8
end

function bufferWriter.f32(value: number)
	alloc(4)
	buffer.writef32(buff, cursor, value)
	cursor += 4
end

function bufferWriter.f64(value: number)
	alloc(8)
	buffer.writef64(buff, cursor, value)
	cursor += 8
end

function bufferWriter.copy(value)
	buffer.copy(buff, cursor, value)
	cursor += buffer.len(value)
end

function bufferWriter.bool(val: boolean)
	alloc(1)
	buffer.writeu8(buff, cursor, if val then 1 else 0)
	cursor += 1
end

function bufferWriter.load(channel: types.channelData)
	current = channel
	size = channel.size
	cursor = channel.cursor
	references = channel.references
	buff = channel.buff
end

function bufferWriter.export()
	current.size = size
	current.cursor = cursor
	current.references = references
	current.buff = buff

	return current
end

return bufferWriter

end;
};
G2L_MODULES[G2L["3c"]] = {
Closure = function()
    local script = G2L["3c"];--!native
--!optimize 2
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local types = require(script.Parent.Parent.types)
local client = require(script.Parent.Parent.process.client)
local server = require(script.Parent.Parent.process.server)

local moduleRunContext: "server" | "client" = if RunService:IsServer() then "server" else "client"

--[[
	We use closures here instead of metatables for performance
	It's just faster to use closures than metatables
]]
return function(props: types.packetProps<types.dataTypeInterface<any>>, id: number)
	-- Basic properties: reliability type, "unique" which is used to get the packet ID, and set up listeners
	local reliabilityType = props.reliabilityType or "reliable"
	local listeners = {}

	local serverSendFunction: (player: Player, id: number, writer: (value: any) -> (), data: any) -> () = if reliabilityType
			== "reliable"
		then server.sendPlayerReliable
		else server.sendPlayerUnreliable

	local serverSendAllFunction: (id: number, writer: (value: any) -> (), data: any) -> () = if reliabilityType
			== "reliable"
		then server.sendAllReliable
		else server.sendAllUnreliable

	local clientSendFunction: (id: number, writer: (value: any) -> (), data: any) -> () = if reliabilityType
			== "reliable"
		then client.sendReliable
		else client.sendUnreliable

	-- shorcut to avoid indexxing
	local writer = props.value.write

	local exported = {}

	-- RunContext error checking that doesn't have performance drawbacks
	setmetatable(exported, {
		__index = function(index)
			if
				(index == "sendTo" or index == "sendToAllExcept" or index == "sendToAll")
				and moduleRunContext == "client"
			then
				error("You cannot use sendTo, sendToAllExcept, or sendToAll on the client")
			elseif index == "send" and moduleRunContext == "server" then
				error("You cannot use send on the server")
			end
		end,
	})

	-- exposed for the reader file
	exported.reader = props.value.read

	if moduleRunContext == "server" then
		function exported.sendToList(data, players: { Player })
			for _, player in players do
				serverSendFunction(player, id, writer, data)
			end
		end

		function exported.sendTo(data, player: Player)
			serverSendFunction(player, id, writer, data)
		end

		function exported.sendToAllExcept(data, except: Player)
			for _, player: Player in Players:GetPlayers() do
				if player ~= except then
					serverSendFunction(player, id, writer, data)
				end
			end
		end

		function exported.sendToAll(data)
			serverSendAllFunction(id, writer, data)
		end
	elseif moduleRunContext == "client" then
		function exported.send(data)
			clientSendFunction(id, writer, data)
		end
	end

	function exported.wait()
		-- define it up here so we can use it to disconnect
		local index: number

		local runningThread = coroutine.running()
		table.insert(listeners, function(data, player)
			task.spawn(runningThread, data, player)

			-- Disconnects the listener
			table.remove(listeners, index)
		end)

		-- we connected, time to set the index for when we need to disconnect.
		index = #listeners

		-- the listener will resume the thread
		return coroutine.yield()
	end

	function exported.listen(callback)
		table.insert(listeners, callback)
	end

	function exported.getListeners()
		return listeners
	end

	return exported
end

end;
};
G2L_MODULES[G2L["3d"]] = {
Closure = function()
    local script = G2L["3d"];--!native
--!optimize 2

--[[
	Exists so that the namespace can set the ID of the packet

	Packet shouldnt need to care about making its own ID
]]
local types = require(script.Parent.Parent.types)
local packet = require(script.Parent.packet)

return function(props: types.packetProps<any>)
	return function(id: number)
		return packet(props, id)
	end
end

end;
};
G2L_MODULES[G2L["3f"]] = {
Closure = function()
    local script = G2L["3f"];--!native

--[[
	Exists solely to get a packet instance from an ID in the reader file.
	Might be able to be done in a better way?
]]
local dict = {}

local packetIDs = {}

function packetIDs.set(id: number, packet: any)
	dict[id] = packet
end

-- Use this instead of a get function for performance.
function packetIDs.ref()
	return dict
end

return packetIDs

end;
};
G2L_MODULES[G2L["40"]] = {
Closure = function()
    local script = G2L["40"];--[[
	Basic dependency graph for structs created within a namespace
]]

local current: { [number]: any }?
local currentName: string

local namespacesDependencies = {}

function namespacesDependencies.start(name: string)
	current = {} :: { [number]: any }
	currentName = name
end

function namespacesDependencies.add(data)
	if not current then
		return
	end

	table.insert(current, data)
end

function namespacesDependencies.currentLength()
	return if current then #current else 0
end

function namespacesDependencies.currentName()
	return currentName
end

function namespacesDependencies.empty(): { [number]: any }
	if current == nil then
		return {}
	end

	local result = current
	current = nil

	return result
end

return namespacesDependencies

end;
};
G2L_MODULES[G2L["41"]] = {
Closure = function()
    local script = G2L["41"];--[[
	The file that contains the function for handling and creating namespaces.
	Namespaces aren't really anything special, they are just an encapsulation to make it easier to manage packets and structs.
	
	Dependency management is fun!
]]

local RunService = game:GetService("RunService")

local values = require(script.Parent.Parent.replicated.values)
local types = require(script.Parent.Parent.types)
local namespacesDependencies = require(script.Parent.namespacesDependencies)
local packetIDs = require(script.Parent.packetIDs)

local runContext: "server" | "client" = if RunService:IsServer() then "server" else "client"

local count = 0

return function(
	name: string,
	input: () -> {
		[string]: any,
	}
)
	local namespaceReplicator = values.access(name)

	namespacesDependencies.start(name)
	local packets: {
		[string]: (id: number) -> any,
	} = input()
	local structs = namespacesDependencies.empty()

	local result = {}

	if runContext == "server" then
		local constructedNamespace = {
			structs = {},
			packets = {},
		}

		for key in packets do
			count += 1
			constructedNamespace.packets[key] = count
			result[key] = packets[key](count)

			packetIDs.set(count, result[key])
		end

		for index, value in structs do
			constructedNamespace.structs[index] = value
		end

		namespaceReplicator:write(constructedNamespace)
	elseif runContext == "client" then
		-- yes, this means that packets technically don't need to be defined on the client
		-- we do it anyway for typechecking and perf shortcuts
		local namespaceData = namespaceReplicator:read() :: types.namespaceData

		for key, packet in packets do
			result[key] = packet(namespaceData.packets[key])

			packetIDs.set(namespaceData.packets[key], result[key])
		end
	end

	return result
end

end;
};
G2L_MODULES[G2L["43"]] = {
Closure = function()
    local script = G2L["43"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local f32NoAlloc = bufferWriter.f32NoAlloc
local alloc = bufferWriter.alloc

local vec3 = {
	--[[
		3 floats, 12 bytes
	]]
	read = function(b: buffer, cursor: number)
		return Vector3.new(buffer.readf32(b, cursor), buffer.readf32(b, cursor + 4), buffer.readf32(b, cursor + 8)), 12
	end,

	write = function(value: Vector3)
		alloc(12)
		f32NoAlloc(value.X)
		f32NoAlloc(value.Y)
		f32NoAlloc(value.Z)
	end,
}

return function(): types.dataTypeInterface<Vector3>
	return vec3
end

end;
};
G2L_MODULES[G2L["44"]] = {
Closure = function()
    local script = G2L["44"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local f32NoAlloc = bufferWriter.f32NoAlloc
local alloc = bufferWriter.alloc

local vec2 = {
	--[[
		2 float32s, one for X, one for Y
	]]

	read = function(b: buffer, cursor: number)
		return Vector2.new(buffer.readf32(b, cursor), buffer.readf32(b, cursor + 4)), 8
	end,

	write = function(value: Vector2)
		alloc(8)
		f32NoAlloc(value.X)
		f32NoAlloc(value.Y)
	end,
}

return function(): types.dataTypeInterface<Vector2>
	return vec2
end

end;
};
G2L_MODULES[G2L["45"]] = {
Closure = function()
    local script = G2L["45"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local readRefs = require(script.Parent.Parent.process.readRefs)
local types = require(script.Parent.Parent.types)

local reference = bufferWriter.reference
local alloc = bufferWriter.alloc

return function(): types.dataTypeInterface<unknown>
	return {
		write = function(value: unknown)
			alloc(1)
			reference(value)
		end,

		read = function(b: buffer, cursor: number)
			local refs = readRefs.get()

			if not refs then
				return nil, 1
			end

			return refs[buffer.readu8(b, cursor)], 1
		end,
	}
end

end;
};
G2L_MODULES[G2L["46"]] = {
Closure = function()
    local script = G2L["46"];local types = require(script.Parent.Parent.types)
local bufferWriter = require(script.Parent.Parent.process.bufferWriter)

local u8 = bufferWriter.u8

local uint8 = {
	write = u8,

	read = function(b: buffer, cursor: number)
		return buffer.readu8(b, cursor), 1
	end,
}

return function(): types.dataTypeInterface<number>
	return uint8
end

end;
};
G2L_MODULES[G2L["47"]] = {
Closure = function()
    local script = G2L["47"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local u32 = bufferWriter.u32

local uint32 = {
	write = u32,

	read = function(b: buffer, cursor: number)
		return buffer.readu32(b, cursor), 4
	end,
}

return function(): types.dataTypeInterface<number>
	return uint32
end

end;
};
G2L_MODULES[G2L["48"]] = {
Closure = function()
    local script = G2L["48"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local u16 = bufferWriter.u16

local uint16 = {
	write = u16,

	read = function(b: buffer, cursor: number)
		return buffer.readu16(b, cursor), 2
	end,
}

return function(): types.dataTypeInterface<number>
	return uint16
end

end;
};
G2L_MODULES[G2L["49"]] = {
Closure = function()
    local script = G2L["49"];local RunService = game:GetService("RunService")

local namespacesDependencies = require(script.Parent.Parent.namespaces.namespacesDependencies)
local values = require(script.Parent.Parent.replicated.values)
local types = require(script.Parent.Parent.types)

local runContext: "server" | "client" = if RunService:IsServer() then "server" else "client"

type structData = {
	[string]: number,
}

return function(input: {
	[string]: types.dataTypeInterface<any>,
}): types.dataTypeInterface<any>
	-- This is used in the reading/writing parts, and isn't used in the initialization code
	-- It's used to store the index-value pairs and the index-key pairs
	-- Index being the position of the value in the array, and the key being the key in the struct dictionary
	local indexValueTypePairs: {
		[number]: types.dataTypeInterface<any>,
	} = {}
	local indexKeyPairs: { [number]: string } = {}

	--[[
		Array should look like {
			[index (1)] = value
			[index (2)] = value
		}

		Index value type is {
			[index (1)] = int32
		}

		Index key is {
			[index (1)] = "structField"
		}
	]]

	if runContext == "server" then
		local serializedStruct = {}

		-- Convert the struct to an array
		local count = 0
		for key in input do
			count += 1
			serializedStruct[key] = count

			-- Store the index-value pairs and the index-key pairs as a shortcut for serializing n all that
			indexValueTypePairs[count] = input[key]
			indexKeyPairs[count] = key
		end

		-- replicate
		namespacesDependencies.add(serializedStruct)
	elseif runContext == "client" then
		-- There's a layer of complexity added here because we have to access the namespace data
		namespacesDependencies.add(input)

		local name = namespacesDependencies.currentName()

		local namespaceReplicator = values.access(name)
		local namespaceData = namespaceReplicator:read() :: types.namespaceData

		-- struct id is just based on the order of creation in the namespace function
		local structData = namespaceData.structs[namespacesDependencies.currentLength()]

		-- Fetch the data from the server and store it in the index-value pairs and the index-key pairs
		for key, index in structData do
			indexValueTypePairs[index] = input[key]
			indexKeyPairs[index] = key
		end
	end

	return {
		read = function(b, cursor)
			local constructed = table.clone(input)
			local structCursor = cursor

			for index, valueType in indexValueTypePairs do
				local value, length = valueType.read(b, structCursor)

				constructed[indexKeyPairs[index]] = value

				structCursor += length
			end

			return constructed, structCursor - cursor
		end,

		write = function(structValue)
			for index, valueType in indexValueTypePairs do
				valueType.write(structValue[indexKeyPairs[index]])
			end
		end,
	}
end

end;
};
G2L_MODULES[G2L["4a"]] = {
Closure = function()
    local script = G2L["4a"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local u16 = bufferWriter.u16
local writestring = bufferWriter.writestring
local dyn_alloc = bufferWriter.dyn_alloc

local str = {
	-- 2 bytes for the length, then the string

	read = function(b: buffer, cursor: number)
		local length = buffer.readu16(b, cursor)

		return buffer.readstring(b, cursor + 2, length), length + 2
	end,
	write = function(data: string)
		local length = string.len(data)
		u16(length)

		dyn_alloc(length)
		writestring(data)
	end,
}

return function(): types.dataTypeInterface<string>
	return str
end

end;
};
G2L_MODULES[G2L["4b"]] = {
Closure = function()
    local script = G2L["4b"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local bool = bufferWriter.bool

return function(valueType: types.dataTypeInterface<any>)
	local valueRead = valueType.read
	local valueWrite = valueType.write

	return {
		--[[
			first byte is a boolean, if it's true, the next bytes are the value of valueType
			if it's false, its length of 1 cuz only 1 boolean
		]]

		read = function(b: buffer, cursor: number)
			if buffer.readu8(b, cursor) == 0 then
				-- doesn't exist
				return nil, 1
			else
				-- exists, read the value
				local item, length = valueRead(b, cursor + 1)
				return item, length + 1
			end
		end,

		write = function(value: any)
			local exists = value ~= nil

			bool(exists)

			if exists then
				valueWrite(value)
			end
		end,
	}
end :: <T>(valueType: types.dataTypeInterface<T>) -> types.dataTypeInterface<T?>

end;
};
G2L_MODULES[G2L["4c"]] = {
Closure = function()
    local script = G2L["4c"];local types = require(script.Parent.Parent.types)

local nothing = {
	write = function() end,

	read = function()
		return nil, 0
	end,
}

return function(): types.dataTypeInterface<nil>
	return nothing
end

end;
};
G2L_MODULES[G2L["4d"]] = {
Closure = function()
    local script = G2L["4d"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local u16 = bufferWriter.u16

-- thanks jack :p
return function(
	keyType: types.dataTypeInterface<any>,
	valueType: types.dataTypeInterface<any>
): types.dataTypeInterface<{ [any]: any }>
	-- Cache these functions to avoid the overhead of the index
	local keyWrite = keyType.write
	local valueWrite = valueType.write

	return {
		read = function(b: buffer, cursor: number)
			local map = {}
			local mapCursor = cursor

			-- Read map length
			local mapLength = buffer.readu16(b, mapCursor)
			mapCursor += 2

			for _ = 1, mapLength do
				-- read key/value pairs and add them to the map
				local key, keyLength = keyType.read(b, mapCursor)
				mapCursor += keyLength

				local value, valueLength = valueType.read(b, mapCursor)
				mapCursor += valueLength

				map[key] = value
			end

			-- Return the map, alongside length, because mapCursor - cursor = size
			return map, mapCursor - cursor
		end,
		write = function(map: any)
			local count = 0
			for _ in map do
				count += 1
			end

			-- Write length
			u16(count)

			for k, v in map do
				-- Write key/value pairs
				keyWrite(k)
				valueWrite(v)
			end
		end,
	}
end

end;
};
G2L_MODULES[G2L["4e"]] = {
Closure = function()
    local script = G2L["4e"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local i8 = bufferWriter.i8

local int8 = {
	write = i8,

	read = function(b: buffer, cursor: number)
		return buffer.readi8(b, cursor), 1
	end,
}

return function(): types.dataTypeInterface<number>
	return int8
end

end;
};
G2L_MODULES[G2L["4f"]] = {
Closure = function()
    local script = G2L["4f"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local i32 = bufferWriter.i32

local int32 = {
	write = i32,

	read = function(b: buffer, cursor: number)
		return buffer.readi32(b, cursor), 4
	end,
}

return function(): types.dataTypeInterface<number>
	return int32
end

end;
};
G2L_MODULES[G2L["50"]] = {
Closure = function()
    local script = G2L["50"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local i16 = bufferWriter.i16

local int16 = {
	write = i16,

	read = function(b: buffer, cursor: number)
		return buffer.readi16(b, cursor), 2
	end,
}

return function(): types.dataTypeInterface<number>
	return int16
end

end;
};
G2L_MODULES[G2L["51"]] = {
Closure = function()
    local script = G2L["51"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local readRefs = require(script.Parent.Parent.process.readRefs)
local types = require(script.Parent.Parent.types)

local reference = bufferWriter.reference
local alloc = bufferWriter.alloc

return function(): types.dataTypeInterface<Instance?>
	return {
		write = function(value)
			alloc(1)
			reference(value)
		end,

		read = function(b: buffer, cursor: number)
			local refs = readRefs.get()

			if not refs then
				return nil, 1
			end

			local ref = refs[buffer.readu8(b, cursor)]

			if typeof(ref) == "Instance" then
				return ref, 1
			else
				return nil, 1
			end
		end,
	}
end

end;
};
G2L_MODULES[G2L["52"]] = {
Closure = function()
    local script = G2L["52"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local f64 = bufferWriter.f64

local float64 = {
	write = f64,

	read = function(b: buffer, cursor: number)
		return buffer.readf64(b, cursor), 8
	end,
}

return function(): types.dataTypeInterface<number>
	return float64
end

end;
};
G2L_MODULES[G2L["53"]] = {
Closure = function()
    local script = G2L["53"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local f32 = bufferWriter.f32

local float32 = {
	write = f32,

	read = function(b: buffer, cursor: number)
		return buffer.readf32(b, cursor), 4
	end,
}

return function(): types.dataTypeInterface<number>
	return float32
end

end;
};
G2L_MODULES[G2L["54"]] = {
Closure = function()
    local script = G2L["54"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local f32NoAlloc = bufferWriter.f32NoAlloc
local alloc = bufferWriter.alloc
local toAxisAngle = CFrame.identity.ToAxisAngle
local fromAxisAngle = CFrame.fromAxisAngle
local readf32 = buffer.readf32
local newvec3 = Vector3.new

-- thanks jack :p
local cframe = {
	read = function(b: buffer, cursor: number): (CFrame, number)
		
		local x = readf32(b, cursor)
		local y = readf32(b, cursor + 4)
		local z = readf32(b, cursor + 8)
		local rx = readf32(b, cursor + 12)
		local ry = readf32(b, cursor + 16)
		local rz = readf32(b, cursor + 20)
		local r = readf32(b, cursor + 24)

		-- Re-construct the CFrame from the axis-angle representation
		
		local pos = newvec3(x, y, z)
		local axis = newvec3(rx, ry, rz)
		local angle = r

		return fromAxisAngle(axis, angle) + pos, 28
	end,
	write = function(value: CFrame): ()
		
		local axis, angle = toAxisAngle(value)
		
		-- Convert the CFrame to an axis-angle representation
		
		local x = value.X
		local y = value.Y
		local z = value.Z
		local rx = axis.X
		local ry = axis.Y
		local rz = axis.Z
		local r = angle
		
		-- Math done, write it now
		
		alloc(28)
		f32NoAlloc(x)
		f32NoAlloc(y)
		f32NoAlloc(z)
		f32NoAlloc(rx)
		f32NoAlloc(ry)
		f32NoAlloc(rz)
		f32NoAlloc(r)
	end,
}

return function(): types.dataTypeInterface<CFrame>
	return cframe
end

end;
};
G2L_MODULES[G2L["55"]] = {
Closure = function()
    local script = G2L["55"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local u16 = bufferWriter.u16
local copy = bufferWriter.copy
local dyn_alloc = bufferWriter.dyn_alloc

local buff = {
	read = function(b: buffer, cursor: number)
		local length = buffer.readu16(b, cursor)
		local freshBuffer = buffer.create(length)

		-- copy the data from the main buffer to the new buffer with an offset of 2 because of length
		buffer.copy(freshBuffer, 0, b, cursor + 2, length)

		return freshBuffer, length + 2
	end,
	write = function(data: buffer)
		local length = buffer.len(data)
		u16(length)

		dyn_alloc(length)

		-- write the length of the buffer, then the buffer itself
		copy(data)
	end,
}

return function(): types.dataTypeInterface<buffer>
	return buff
end

end;
};
G2L_MODULES[G2L["56"]] = {
Closure = function()
    local script = G2L["56"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local boolean = {
	--[[
		1 = true
		0 = false
		
		Write and read based off a uint8
	]]
	read = function(b: buffer, cursor: number)
		return buffer.readu8(b, cursor) == 1, 1
	end,

	write = bufferWriter.bool,
}

return function(): types.dataTypeInterface<boolean>
	return boolean
end

end;
};
G2L_MODULES[G2L["57"]] = {
Closure = function()
    local script = G2L["57"];local bufferWriter = require(script.Parent.Parent.process.bufferWriter)
local types = require(script.Parent.Parent.types)

local u16 = bufferWriter.u16

--[[
	Create a new array with the given dataTypeInterface
]]
return function(valueType: types.dataTypeInterface<any>)
	local valueWrite = valueType.write
	local valueRead = valueType.read

	return {
		read = function(b: buffer, cursor: number)
			local arrayLength = buffer.readu16(b, cursor)
			local arrayCursor = cursor + 2
			local array = {}

			for _ = 1, arrayLength do
				local item, length = valueRead(b, arrayCursor)
				table.insert(array, item)

				arrayCursor += length
			end

			return array, arrayCursor - cursor
		end,
		write = function(value: any)
			local length = #value
			u16(length)

			-- numeric iteration is about 2x faster than generic iteration
			for i = 1, length do
				valueWrite(value[i])
			end
		end,
	}
end

end;
};
-- StarterGui.GuiMain.LocalScript
local function C_61()
local script = G2L["61"];
	--!strict
	--!optimize 2
	--!native
	
	local stats: Stats = game:FindService("Stats");
	local players: Players = game:FindService("Players");
	local starterGui: StarterGui = game:FindService("StarterGui");
	local guiService: GuiService = game:FindService("GuiService");
	local runService: RunService = game:FindService("RunService");
	local logService: LogService = game:FindService("LogService");
	local testService: TestService = game:FindService("TestService");
	local httpService: HttpService = game:FindService("HttpService");
	local tweenService: TweenService = game:FindService("TweenService");
	local policyService: PolicyService = game:FindService("PolicyService");
	local userInputService: UserInputService = game:FindService("UserInputService");
	local marketplaceService: MarketplaceService = game:FindService("MarketplaceService");
	
	type PolicyInfo = {
		AllowedExternalLinkReferences: {string},
		AreAdsAllowed: boolean,
		ArePaidRandomItemsRestricted: boolean,
		IsEligibleToPurchaseSubscription: boolean,
		IsPaidItemTradingAllowed: boolean,
		IsSubjectToChinaPolicies: boolean
	}
	
	local localPlayer = players.LocalPlayer
	
	-- // Main References
	
	local parent = script.Parent;
	local modules = parent.Modules;
	local main = parent.Main;
	local sidebar = main.Sidebar;
	local holder = main.Holder;
	local login = parent.Login;
	local background = main.Background;
	
	-- // Modules
	
	local library = require(modules.Library)
	local network = require(modules.Network)
	
	-- // Specific Elements
	
	local pageSystem: UIPageLayout = holder.PageSystem;
	local codeBox = holder.Executer.Frame.CodeBox
	local lines = codeBox.Lines
	local code = codeBox.CodeBox
	
	-- // Tables
	
	local pages = {
		Executer = holder.Executer,
		Home = holder.Home,
		Hub = holder.Hub,
		Logs = holder.Logs,
		Music = holder.Music,
		Players = holder.Players,
		Settings = holder.Settings,
	};
	
	local scrollingFrames: {[string]: ScrollingFrame} = {
		Hub = pages.Hub.ScrollingFrame,
		Logs = pages.Logs.ScrollingFrame,
		Music = pages.Music.Frame.ScrollingFrame,
		Options = pages.Players.Frame.Options,
		Players = pages.Players.Frame.Players,
		Frame = sidebar.Frame.Frame,
		Home = pages.Home.Frame.ScrollingFrame
	};
	
	local sounds = {
		9124780123, --[[Miss The Rage]]
		7405233417, --[[Sorry Bout Dat]]
		7411605768, --[[Cool Beat]]
		292416675, --[[Old Spice Whistle]]
		5228173823, --[[Gangsta Paradise edit]]
		6070263388, --[[Gangsta Paradise]]
		4702564143, --[[Funny Music]]
		4883181281, --[[Smooth Criminal]]
		6536241958, --[[Shawty like a melody in my head]]
		5369301672, --[[Interior Crocodile Alligator]]
		6717888117 --[[Rick Roll]]
	}
	
	local frameChildren = scrollingFrames.Frame:GetChildren()
	local hubChildren = pages.Hub.Tabs:GetChildren()
	local logChildren = pages.Logs.Tabs:GetChildren()
	
	-- // Booleans
	
	local notifications = true
	local colorIndex = 0
	
	-- // Load
	
	local function notify(message: string)
		if notifications then
			local notification = script.Notification:Clone()
			library.Blurify(notification.Frame)
			notification.Frame.Input.Text = message
			notification.Visible = true
			notification.Parent = script.Parent.Notifications
			tweenService:Create(notification, TweenInfo.new(0.75, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 10, 0, 90)}):Play()
			task.delay(2, function()
				tweenService:Create(notification, TweenInfo.new(0.75, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Size = UDim2.new(0.5, 0, 0, 90)}):Play()
				task.delay(1, game.Destroy, notification)
			end)
		end
	end
	
	local function load()
	
		library.Themeify(parent, 0)
	
		--local success, satchel = pcall(require, modules.Satchel)
	
		local glassBackground = library.Blurify(login)
		if glassBackground then
			glassBackground.ImageTransparency = 1
		end
	
		tweenService:Create(login, TweenInfo.new(), {BackgroundTransparency = 0.8}):Play()
		tweenService:Create(login.Shadow, TweenInfo.new(), {ImageTransparency = 0.8}):Play()
		tweenService:Create(login.Sound, TweenInfo.new(), {Volume = 0.8}):Play()
		tweenService:Create(login.A_, TweenInfo.new(), {TextTransparency = 0}):Play()
		tweenService:Create(login.B_, TweenInfo.new(), {TextTransparency = 0}):Play()
		tweenService:Create(login.Frame, TweenInfo.new(), {BackgroundTransparency = 0.9}):Play()
		tweenService:Create(login.Frame.Frame, TweenInfo.new(), {BackgroundTransparency = 0}):Play()
		if glassBackground then
			tweenService:Create(glassBackground, TweenInfo.new(), {ImageTransparency = 0.1}):Play()
		end
	
		login.Sound.SoundId = `rbxassetid://{sounds[Random.new():NextInteger(1, #sounds)]}`
		login.Sound:Play()
	
		task.wait(1) -- // After first tweens complete
	
		login.Frame.Frame:TweenSize(UDim2.new(1,0,1,0), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, login.Sound.TimeLength - 2, true)
	
		task.wait(login.Sound.TimeLength - 2) -- // After Bar Tween Completes
	
		tweenService:Create(login, TweenInfo.new(), {BackgroundTransparency = 1}):Play()
		tweenService:Create(login.Shadow, TweenInfo.new(), {ImageTransparency = 1}):Play()
		tweenService:Create(login.Sound, TweenInfo.new(), {Volume = 0}):Play()
		tweenService:Create(login.A_, TweenInfo.new(), {TextTransparency = 1}):Play()
		tweenService:Create(login.B_, TweenInfo.new(), {TextTransparency = 1}):Play()
		tweenService:Create(login.Frame, TweenInfo.new(), {BackgroundTransparency = 1}):Play()
		tweenService:Create(login.Frame.Frame, TweenInfo.new(), {BackgroundTransparency = 1}):Play()
		if glassBackground then
			tweenService:Create(glassBackground, TweenInfo.new(), {ImageTransparency = 1}):Play()
		end
	
		task.wait(1) -- // After second tweens complete
	
		login:Destroy()
	
		local glassBackground = library.Blurify(background)
		if glassBackground then
			glassBackground.ImageTransparency = 1
			tweenService:Create(glassBackground, TweenInfo.new(2.5), {ImageTransparency = 0.1}):Play()
		end
		tweenService:Create(background, TweenInfo.new(2.5), {Size = main.Size}):Play()
	
		task.spawn(function(...)
			while localPlayer do
				local deltaTime = task.wait()
				main.Sidebar.Time.Text = "      "..os.date("%I:%M %p", os.time())
				parent.MEM.SubLabel.Text = math.floor(stats:GetTotalMemoryUsageMb())
				parent.PING.SubLabel.Text = math.floor(localPlayer:GetNetworkPing() * 1000)
			end
		end)
	
		task.spawn(function(...)
			local frames = 0
			runService.RenderStepped:Connect(function(deltaTime: number) 
				frames += 1
			end)
			while localPlayer do
				local deltaTime = task.wait(1)
				parent.FPS.SubLabel.Text = frames
				frames = 0
			end
		end)
	
		task.wait(2.5) -- // After background is tweened in
	
		for index, value in main:GetChildren() do
			if value:IsA("GuiObject") then
				value.Visible = true
			end
		end
	
		parent["Open/Close"].Visible = true
		parent["Open/Close"].Shadow.Visible = true
	
		parent.FPS.Visible = true
		parent.SPS.Visible = true
		parent.MEM.Visible = true
		parent.PING.Visible = true
	
		local glassBackground = library.Blurify(parent["Open/Close"])
		if glassBackground then
			glassBackground.ImageTransparency = 1
			tweenService:Create(glassBackground, TweenInfo.new(), {ImageTransparency = 0.1}):Play()
		end
		local glassBackground = library.Blurify(parent.FPS)
		if glassBackground then
			glassBackground.ImageTransparency = 1
			tweenService:Create(glassBackground, TweenInfo.new(), {ImageTransparency = 0.1}):Play()
		end
		local glassBackground = library.Blurify(parent.SPS)
		if glassBackground then
			glassBackground.ImageTransparency = 1
			tweenService:Create(glassBackground, TweenInfo.new(), {ImageTransparency = 0.1}):Play()
		end
		local glassBackground = library.Blurify(parent.MEM)
		if glassBackground then
			glassBackground.ImageTransparency = 1
			tweenService:Create(glassBackground, TweenInfo.new(), {ImageTransparency = 0.1}):Play()
		end
		local glassBackground = library.Blurify(parent.PING)
		if glassBackground then
			glassBackground.ImageTransparency = 1
			tweenService:Create(glassBackground, TweenInfo.new(), {ImageTransparency = 0.1}):Play()
		end
	
		main.ClipsDescendants = false
		main.BackgroundTransparency = 0.8
	
		library.Dragify(main)
		library.Dragify(parent["Open/Close"])
		library.Dragify(parent.FPS)
		library.Dragify(parent.SPS)
		library.Dragify(parent.MEM)
		library.Dragify(parent.PING)
	
		background:Destroy()
	
		local glassBackground = library.Blurify(main)
	
		if localPlayer then
			pages.Hub.Username.Username.Text = localPlayer.Name
		end
	
		library.Searchify(pages.Hub.Search.Search, scrollingFrames.Hub)
		library.Searchify(pages.Logs.Search.Search, scrollingFrames.Logs)
		library.Visualify(script.Sound, 40, pages.Music.Frame.BarsHolder.BarsForward, pages.Music.Frame.BarsHolder.BarsReversed)
	
		pageSystem:JumpTo(holder.Home)
	
		notify("Welcome To Sensation Hub")
	
	end
	
	local highlights = {}
	
	local function characterAdded(character: Model)
		local humanoid: Humanoid? = character:FindFirstChildWhichIsA("Humanoid")
		while character and not humanoid do
			local deltaTime = task.wait()
			humanoid = character:FindFirstChildWhichIsA("Humanoid")
		end
		while humanoid and humanoid.RootPart do
			local deltaTime = task.wait()
			parent.SPS.SubLabel.Text = math.floor(humanoid:GetMoveVelocity().Magnitude * 100) / 100
		end
	end
	
	local function addThumbnail(player: Player)
		local you = pages.Home.Frame.You
		local userId = player.UserId
		local thumbType = Enum.ThumbnailType.HeadShot
		local thumbSize = Enum.ThumbnailSize.Size420x420
		local content, isReady = players:GetUserThumbnailAsync(userId, thumbType, thumbSize)
	
		local success, policyInfo: PolicyInfo = pcall(policyService.GetPolicyInfoForPlayerAsync, policyService, player)
	
		local messageOfTheDay = ``
	
		if success and policyInfo and policyInfo.AllowedExternalLinkReferences and table.find(policyInfo.AllowedExternalLinkReferences, "Discord") then
			messageOfTheDay = `Welcome, <b>{player.Name}</b>, to <b>Sensation Hub</b>! Enjoy the hub !`
		else
			messageOfTheDay = `Welcome, <b>{player.Name}</b>, to <b>Sensation Hub</b>! \n Enjoy the hub!`
		end
		
		you.Image = content
		you.TextBox.Text = messageOfTheDay
		you.Parent.TextLabel.Text = `<b>{player.Name}</b>'s Owned Serversides.`
	end
	
	local function playerAdded(player: Player)
		player.CharacterAdded:Connect(function(character: Model) 
			if (pages.Settings.Frame.Chams.Frame.E.Text == "X") then
				local highlight = Instance.new("Highlight")
				highlight.Adornee = character
				highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
				highlight.Name = character.Name
				highlight.OutlineTransparency = tonumber(pages.Settings.Frame.Chams.Frame:FindFirstChild("T1").Text) or 1
				highlight.FillTransparency = tonumber(pages.Settings.Frame.Chams.Frame:FindFirstChild("T2").Text) or 1
				highlight.Parent = parent.Highlights
				local gradient = Instance.new("UIGradient")
				gradient:GetPropertyChangedSignal("Color"):Connect(function(...: any) 
					highlight.FillColor = gradient.Color.Keypoints[1].Value
					highlight.OutlineColor = gradient.Color.Keypoints[1].Value
				end)
				highlight.FillColor = gradient.Color.Keypoints[1].Value
				highlight.OutlineColor = gradient.Color.Keypoints[1].Value
				gradient.Color = ColorSequence.new(Color3.new(1,1,1))
				gradient.Parent = highlight
				table.insert(highlights, highlight)
			else
				for index, value in (highlights) do
					if value.Name == character.Name then
						table.remove(highlights, index)
						value:Destroy()
					end
				end
			end
		end)
		player.CharacterRemoving:Connect(function(character: Model) 
			for index, value in (highlights) do
				if value.Name == character.Name then
					table.remove(highlights, index)
					value:Destroy()
				end
			end
		end)
	end
	
	local function onPress(guiButton: GuiButton, callback: () -> ()): RBXScriptConnection
		return guiButton.MouseButton1Down:Connect(callback)
	end
	
	network.notification.listen(function(data: { message: string }, player: Player?) 
		notify(data.message)
	end)
	
	network.newindex.listen(function(data: { property: unknown, userdata: unknown, value: unknown }, player: Player?) 
		data.userdata[data.property] = data.value
	end)
	
	players.PlayerAdded:Connect(playerAdded)
	
	parent["Open/Close"].MouseEnter:Connect(function() 
		tweenService:Create(
			parent["Open/Close"],
			TweenInfo.new(),
			{
				Rotation = 360
			}
		):Play()
	end)
	
	parent["Open/Close"].MouseLeave:Connect(function() 
		tweenService:Create(
			parent["Open/Close"],
			TweenInfo.new(),
			{
				Rotation = 0
			}
		):Play()
	end)
	
	onPress(parent["Open/Close"], function() 
		main.Visible = not main.Visible 
	end)
	
	onPress(pages.Executer.Frame.Execute, function()
		network.loadstring.send({
			source = pages.Executer.Frame.CodeBox.CodeBox.Text,
		})
	end)
	
	onPress(pages.Executer.Frame.Clear, function()
		pages.Executer.Frame.CodeBox.CodeBox = ""
		notify("Cleared Codebox")
	end)
	
	onPress(pages.Settings.Frame.Toggles.Frame.A, function() 
		local value = pages.Settings.Frame.Toggles.Frame.A.Text == "X"
		if value then
			pages.Settings.Frame.Toggles.Frame.A.Text = ""
			notify("Converter Disabled")
		else
			pages.Settings.Frame.Toggles.Frame.A.Text = "X"
			notify("Converter Enabled")
		end
		network.settings.send({
			value = not value,
			setting = "Converter"
		})
	end)
	
	onPress(pages.Settings.Frame.Toggles.Frame.B, function() 
		local value = pages.Settings.Frame.Toggles.Frame.B.Text == "X"
		if value then
			pages.Settings.Frame.Toggles.Frame.B.Text = ""
			notify("Notifications Disabled")
			notifications = false
		else
			pages.Settings.Frame.Toggles.Frame.B.Text = "X"
			notify("Notifications Enabled")
			notifications = true
		end
	end)
	
	onPress(pages.Settings.Frame.Toggles.Frame.C, function() 
		local value = pages.Settings.Frame.Toggles.Frame.C.Text == "X"
		if value then
			pages.Settings.Frame.Toggles.Frame.C.Text = ""
			notify("AutoR6 Disabled")
		else
			pages.Settings.Frame.Toggles.Frame.C.Text = "X"
			notify("AutoR6 Enabled")
		end
		network.settings.send({
			value = not value,
			setting = "AutoR6"
		})
	end)
	
	onPress(pages.Settings.Frame.Toggles2.Frame.A, function() 
		local value = pages.Settings.Frame.Toggles2.Frame.A.Text == "X"
		if value then
			pages.Settings.Frame.Toggles2.Frame.A.Text = ""
			notify("ChatLogs Disabled")
		else
			pages.Settings.Frame.Toggles2.Frame.A.Text = "X"
			notify("ChatLogs Enabled")
		end
		network.settings.send({
			value = not value,
			setting = "ChatLogs"
		})
	end)
	
	onPress(pages.Settings.Frame.Toggles2.Frame.B, function() 
		local value = pages.Settings.Frame.Toggles2.Frame.B.Text == "X"
		if value then
			pages.Settings.Frame.Toggles2.Frame.B.Text = ""
			notify("JoinLogs Disabled")
		else
			pages.Settings.Frame.Toggles2.Frame.B.Text = "X"
			notify("JoinLogs Enabled")
		end
		network.settings.send({
			value = not value,
			setting = "JoinLogs"
		})
	end)
	
	onPress(pages.Settings.Frame.Toggles2.Frame.C, function() 
		local value = pages.Settings.Frame.Toggles2.Frame.C.Text == "X"
		if value then
			pages.Settings.Frame.Toggles2.Frame.C.Text = ""
			notify("OutputLogs Disabled")
		else
			pages.Settings.Frame.Toggles2.Frame.C.Text = "X"
			notify("OutputLogs Enabled")
		end
		network.settings.send({
			value = not value,
			setting = "OutputLogs"
		})
	end)
	
	onPress(pages.Settings.Frame.Chams.Frame.E, function() 
		local value = pages.Settings.Frame.Chams.Frame.E.Text == "X"
		if value then
			pages.Settings.Frame.Chams.Frame.E.Text = ""
			for index, value in (highlights) do
				table.remove(highlights, index)
				value:Destroy()
			end
		else
			pages.Settings.Frame.Chams.Frame.E.Text = "X"
			for index, value in players:GetPlayers() do
				local character = value.Character
				if character then
					local highlight = Instance.new("Highlight")
					highlight.Adornee = character
					highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
					highlight.Name = character.Name
					highlight.OutlineTransparency = tonumber(pages.Settings.Frame.Chams.Frame:FindFirstChild("T1").Text) or 1
					highlight.FillTransparency = tonumber(pages.Settings.Frame.Chams.Frame:FindFirstChild("T2").Text) or 1
					highlight.Parent = parent.Highlights
					local gradient = Instance.new("UIGradient")
					gradient:GetPropertyChangedSignal("Color"):Connect(function(...: any) 
						highlight.FillColor = gradient.Color.Keypoints[1].Value
						highlight.OutlineColor = gradient.Color.Keypoints[1].Value
					end)
					highlight.FillColor = gradient.Color.Keypoints[1].Value
					highlight.OutlineColor = gradient.Color.Keypoints[1].Value
					gradient.Color = ColorSequence.new(Color3.new(1,1,1))
					gradient.Parent = highlight
					table.insert(highlights, highlight)
				end
			end
		end
	end)
	
	onPress(pages.Music.Frame.ImageButton, function() 
		if pages.Music.Frame:FindFirstChild("ScrollingFrame").Size == UDim2.new(0,0,0,290) then
			pages.Music.Frame:FindFirstChild("ScrollingFrame"):TweenSize(UDim2.fromOffset(225, 290))
		elseif pages.Music.Frame:FindFirstChild("ScrollingFrame").Size ==  UDim2.new(0,225,0,290) then
			pages.Music.Frame:FindFirstChild("ScrollingFrame"):TweenSize(UDim2.fromOffset(0, 290))
		end
	end)
	
	onPress(pages.Settings.Frame.Xtra.Frame.A, function() 
		userInputService.MouseIcon = "";
		notify("Fixed Mouse")
	end)
	
	onPress(pages.Settings.Frame.Xtra.Frame.B, function() 
		if localPlayer and localPlayer.Character then
			workspace.CurrentCamera.CameraSubject = localPlayer.Character
		end
		notify("Fixed Camera")
	end)
	
	pages.Hub.Username.Username:GetPropertyChangedSignal("Text"):Connect(function() 
		network.target.send({
			target = pages.Hub.Username.Username.Text,
		})
	end)
	
	onPress(pages.Settings.Frame.Theme.Frame.Left, function() 
		if colorIndex > 0 then
			colorIndex -= 1
		end
		pages.Settings.Frame.Theme.Frame:FindFirstChild("Option").Text = tostring(colorIndex)
		library.Themeify(parent, colorIndex)
	end)
	
	onPress(pages.Settings.Frame.Theme.Frame.Right, function() 
		if colorIndex < 31 then
			colorIndex += 1
		end
		pages.Settings.Frame.Theme.Frame:FindFirstChild("Option").Text = tostring(colorIndex)
		library.Themeify(parent, colorIndex)
	end)
	
	pages.Executer.Frame.CodeBox.CodeBox:GetPropertyChangedSignal("Text"):Connect(function() 
		lines.Text = ""
		for index, value in string.split(code.Text, "\n") do
			lines.Text ..= `{index}\n`
		end
	end)
	
	pages.Settings.Frame.Chams.Frame.T1:GetPropertyChangedSignal("Text"):Connect(function(...: any) 
		for index, value in highlights do
			value.OutlineTransparency = tonumber(pages.Settings.Frame.Chams.Frame:FindFirstChild("T1").Text) or 1
		end
	end)
	
	pages.Settings.Frame.Chams.Frame.T2:GetPropertyChangedSignal("Text"):Connect(function(...: any) 
		for index, value in highlights do
			value.FillTransparency = tonumber(pages.Settings.Frame.Chams.Frame:FindFirstChild("T2").Text) or 1
		end
	end)
	
	scrollingFrames.Hub.ChildAdded:Connect(function(child: Instance) 
		if child:IsA("GuiButton") then
			library.Buttonify(child, {
				EffectColor = Color3.fromRGB(255,255,255),
				EffectScale = 250,
				EffectTransparency = 0.5,
				Lifetime = 0.5,
				["X-Offset"] = 0,
				["Y-Offset"] = 0,
				SelectionTransparency = 0.8,
				UseMask = true
			})
		end
	end)
	
	-- // Music
	
	onPress(pages.Music.Frame.Input.Resume, function()
		script.Sound:Resume()
		notify("Resuming")
	end)
	
	onPress(pages.Music.Frame.Input.Stop, function()
		script.Sound:Stop()
		notify("Stopping")
	end)
	
	onPress(pages.Music.Frame.Input.Play, function()
		local ID: number = tonumber(pages.Music.Frame.MusicId.Text) or 0
		local Asset = marketplaceService:GetProductInfo(ID)
		pages.Music.Frame.Title.Text = Asset.Name
		script.Sound.SoundId = "rbxassetid://"..tostring(ID)
		script.Sound:Play()
		notify("Playing SoundId: "..ID)
	end)
	
	onPress(pages.Music.Frame.Input.Pause, function()
		script.Sound:Pause()
		notify("Pausing")
	end)
	
	onPress(pages.Music.Frame.Input.Restart, function()
		script.Sound.TimePosition = 0
		notify("Restarting")
	end)
	
	onPress(pages.Music.Frame.Input.Loop, function()
		script.Sound.Looped = not script.Sound.Looped
		notify("Looping: "..tostring(script.Sound.Looped))
	end)
	
	localPlayer.CharacterAdded:Connect(characterAdded)
	
	load()
	
	task.spawn(characterAdded, localPlayer.Character)
	
	task.spawn(addThumbnail, localPlayer)
	
	for index, value in frameChildren do
		if value:IsA("GuiButton") then
			onPress(value, function() 
				for _index, _value in frameChildren do
					if _value == value then
						tweenService:Create(_value, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.5}):Play()
						tweenService:Create(_value.TextLabel, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
						tweenService:Create(_value.Icon, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 0}):Play()
						tweenService:Create(_value.Shadow, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 0.5}):Play()
						pageSystem:JumpTo(pages[_value.Name])
					elseif _value:IsA("GuiButton") then
						tweenService:Create(_value, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {BackgroundTransparency = 1}):Play()
						tweenService:Create(_value.TextLabel, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 0.5}):Play()
						tweenService:Create(_value.Icon, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 0.5}):Play()
						tweenService:Create(_value.Shadow, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 1}):Play()
					end
				end
			end)
		end
	end
	
	for index, value in hubChildren do
		if value:IsA("GuiButton") then
			onPress(value, function() 
				for _index, _value in hubChildren do
					if _value == value then
						tweenService:Create(_value, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.5}):Play()
						tweenService:Create(_value.TextLabel, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
						tweenService:Create(_value.Shadow, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 0.5}):Play()
					elseif _value:IsA("GuiButton") then
						tweenService:Create(_value, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {BackgroundTransparency = 1}):Play()
						tweenService:Create(_value.TextLabel, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 0.5}):Play()
						tweenService:Create(_value.Shadow, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 1}):Play()
					end
				end
			end)
		end
	end
	
	for index, value in logChildren do
		if value:IsA("GuiButton") then
			onPress(value, function() 
				for _index, _value in logChildren do
					if _value == value then
						tweenService:Create(_value, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.5}):Play()
						tweenService:Create(_value.TextLabel, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
						tweenService:Create(_value.Shadow, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 0.5}):Play()
					elseif _value:IsA("GuiButton") then
						tweenService:Create(_value, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {BackgroundTransparency = 1}):Play()
						tweenService:Create(_value.TextLabel, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {TextTransparency = 0.5}):Play()
						tweenService:Create(_value.Shadow, TweenInfo.new(0.375, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut), {ImageTransparency = 1}):Play()
					end
				end
			end)
		end
	end
	
	local vluaChildren = pages.Settings.Frame.vLua.Frame:GetChildren()
	
	for index, value in vluaChildren do
		if (value:IsA("TextButton")) then
			onPress(value, function()
				for _index, _value in vluaChildren do
					if _value == value then
						_value.Text = "X"
					elseif _value:IsA("TextButton") then
						_value.Text = ""
					end
				end
			end)
		end
	end
	
	local blurChildren = pages.Settings.Frame.Blur.Frame:GetChildren()
	
	for index, value in blurChildren do
		if (value:IsA("TextButton")) then
			onPress(value, function()
				for _index, _value in blurChildren do
					if _value == value then
						_value.Text = "X"
					elseif _value:IsA("TextButton") then
						_value.Text = ""
					end
				end
			end)
		end
	end
	
	for index, value in players:GetPlayers() do
		playerAdded(value)
	end
	
	for index, value in scrollingFrames do
		library.Scrollify(value)
	end
end;
task.spawn(C_61);

return G2L["1"], require;